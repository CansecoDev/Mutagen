/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Enchantment : 
        NamedMajorRecord,
        IEnchantment,
        ILoquiObject<Enchantment>,
        ILoquiObjectSetter,
        IPropertySupporter<Enchantment.EnchantmentType>,
        IPropertySupporter<UInt32>,
        IPropertySupporter<Enchantment.Flag>,
        IEquatable<Enchantment>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Enchantment_Registration.Instance;
        public new static Enchantment_Registration Registration => Enchantment_Registration.Instance;

        #region Ctor
        public Enchantment()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Type
        protected Enchantment.EnchantmentType _Type;
        protected PropertyForwarder<Enchantment, Enchantment.EnchantmentType> _TypeForwarder;
        public INotifyingSetItem<Enchantment.EnchantmentType> Type_Property => _TypeForwarder ?? (_TypeForwarder = new PropertyForwarder<Enchantment, Enchantment.EnchantmentType>(this, (int)Enchantment_FieldIndex.Type));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Enchantment.EnchantmentType Type
        {
            get => this._Type;
            set => this.SetType(value);
        }
        protected void SetType(
            Enchantment.EnchantmentType item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Enchantment_FieldIndex.Type];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Type == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Enchantment_FieldIndex.Type] = hasBeenSet;
            }
            if (_EnchantmentEnchantmentType_subscriptions != null)
            {
                var tmp = Type;
                _Type = item;
                _EnchantmentEnchantmentType_subscriptions.FireSubscriptions(
                    index: (int)Enchantment_FieldIndex.Type,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Type = item;
            }
        }
        protected void UnsetType()
        {
            _hasBeenSetTracker[(int)Enchantment_FieldIndex.Type] = false;
            Type = default(Enchantment.EnchantmentType);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Enchantment.EnchantmentType> IEnchantment.Type_Property => this.Type_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Enchantment.EnchantmentType> IEnchantmentGetter.Type_Property => this.Type_Property;
        #endregion
        #region ChargeAmount
        protected UInt32 _ChargeAmount;
        protected PropertyForwarder<Enchantment, UInt32> _ChargeAmountForwarder;
        public INotifyingSetItem<UInt32> ChargeAmount_Property => _ChargeAmountForwarder ?? (_ChargeAmountForwarder = new PropertyForwarder<Enchantment, UInt32>(this, (int)Enchantment_FieldIndex.ChargeAmount));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 ChargeAmount
        {
            get => this._ChargeAmount;
            set => this.SetChargeAmount(value);
        }
        protected void SetChargeAmount(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Enchantment_FieldIndex.ChargeAmount];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ChargeAmount == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Enchantment_FieldIndex.ChargeAmount] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = ChargeAmount;
                _ChargeAmount = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)Enchantment_FieldIndex.ChargeAmount,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ChargeAmount = item;
            }
        }
        protected void UnsetChargeAmount()
        {
            _hasBeenSetTracker[(int)Enchantment_FieldIndex.ChargeAmount] = false;
            ChargeAmount = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IEnchantment.ChargeAmount_Property => this.ChargeAmount_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IEnchantmentGetter.ChargeAmount_Property => this.ChargeAmount_Property;
        #endregion
        #region EnchantCost
        protected UInt32 _EnchantCost;
        protected PropertyForwarder<Enchantment, UInt32> _EnchantCostForwarder;
        public INotifyingSetItem<UInt32> EnchantCost_Property => _EnchantCostForwarder ?? (_EnchantCostForwarder = new PropertyForwarder<Enchantment, UInt32>(this, (int)Enchantment_FieldIndex.EnchantCost));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 EnchantCost
        {
            get => this._EnchantCost;
            set => this.SetEnchantCost(value);
        }
        protected void SetEnchantCost(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Enchantment_FieldIndex.EnchantCost];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && EnchantCost == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Enchantment_FieldIndex.EnchantCost] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = EnchantCost;
                _EnchantCost = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)Enchantment_FieldIndex.EnchantCost,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _EnchantCost = item;
            }
        }
        protected void UnsetEnchantCost()
        {
            _hasBeenSetTracker[(int)Enchantment_FieldIndex.EnchantCost] = false;
            EnchantCost = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IEnchantment.EnchantCost_Property => this.EnchantCost_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IEnchantmentGetter.EnchantCost_Property => this.EnchantCost_Property;
        #endregion
        #region Flags
        protected Enchantment.Flag _Flags;
        protected PropertyForwarder<Enchantment, Enchantment.Flag> _FlagsForwarder;
        public INotifyingSetItem<Enchantment.Flag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<Enchantment, Enchantment.Flag>(this, (int)Enchantment_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Enchantment.Flag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            Enchantment.Flag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Enchantment_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Enchantment_FieldIndex.Flags] = hasBeenSet;
            }
            if (_EnchantmentFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _EnchantmentFlag_subscriptions.FireSubscriptions(
                    index: (int)Enchantment_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)Enchantment_FieldIndex.Flags] = false;
            Flags = default(Enchantment.Flag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Enchantment.Flag> IEnchantment.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Enchantment.Flag> IEnchantmentGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Effect> _Effects = new NotifyingList<Effect>();
        public INotifyingList<Effect> Effects => _Effects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Effect> EffectsEnumerable
        {
            get => _Effects;
            set => _Effects.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Effect> IEnchantment.Effects => _Effects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Effect> IEnchantmentGetter.Effects => _Effects;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => EnchantmentCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => EnchantmentCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => EnchantmentCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            EnchantmentCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Enchantment>.GetEqualsMask(Enchantment rhs) => EnchantmentCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IEnchantmentGetter>.GetEqualsMask(IEnchantmentGetter rhs) => EnchantmentCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return EnchantmentCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Enchantment_Mask<bool> printMask = null)
        {
            return EnchantmentCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            EnchantmentCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Enchantment_Mask<bool> GetHasBeenSetMask()
        {
            return EnchantmentCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Enchantment rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Enchantment rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (this.Type != rhs.Type) return false;
            if (this.ChargeAmount != rhs.ChargeAmount) return false;
            if (this.EnchantCost != rhs.EnchantCost) return false;
            if (this.Flags != rhs.Flags) return false;
            if (Effects.HasBeenSet != rhs.Effects.HasBeenSet) return false;
            if (Effects.HasBeenSet)
            {
                if (!this.Effects.SequenceEqual(rhs.Effects)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ChargeAmount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EnchantCost).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            if (Effects.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Effects).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Enchantment Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Enchantment Create_XML(
            XElement root,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Enchantment Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Enchantment();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Enchantment Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Enchantment Create_XML(
            string path,
            out Enchantment_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Enchantment Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Enchantment Create_XML(
            Stream stream,
            out Enchantment_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Enchantment>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Enchantment_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<Enchantment>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Enchantment_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Enchantment_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Enchantment_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Enchantment_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            EnchantmentCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            Enchantment item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Type":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.Type);
                        if (EnumXmlTranslation<Enchantment.EnchantmentType>.Instance.Parse(
                            root: root,
                            item: out Enchantment.EnchantmentType TypeParse,
                            errorMask: errorMask))
                        {
                            item.Type = TypeParse;
                        }
                        else
                        {
                            item.UnsetType();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ChargeAmount":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.ChargeAmount);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 ChargeAmountParse,
                            errorMask: errorMask))
                        {
                            item.ChargeAmount = ChargeAmountParse;
                        }
                        else
                        {
                            item.UnsetChargeAmount();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantCost":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.EnchantCost);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 EnchantCostParse,
                            errorMask: errorMask))
                        {
                            item.EnchantCost = EnchantCostParse;
                        }
                        else
                        {
                            item.UnsetEnchantCost();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.Flags);
                        if (EnumXmlTranslation<Enchantment.Flag>.Instance.Parse(
                            root: root,
                            item: out Enchantment.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Effects":
                    ListXmlTranslation<Effect>.Instance.ParseInto(
                        root: root,
                        item: item.Effects,
                        fieldIndex: (int)Enchantment_FieldIndex.Effects,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<Effect>.Instance.Parse);
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter Enchantment.EnchantmentType
        protected ObjectCentralizationSubscriptions<Enchantment.EnchantmentType> _EnchantmentEnchantmentType_subscriptions;
        Enchantment.EnchantmentType IPropertySupporter<Enchantment.EnchantmentType>.Get(int index)
        {
            return GetEnchantmentEnchantmentType(index: index);
        }

        protected Enchantment.EnchantmentType GetEnchantmentEnchantmentType(int index)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.Type:
                    return Type;
                default:
                    throw new ArgumentException($"Unknown index for field type Enchantment.EnchantmentType: {index}");
            }
        }

        void IPropertySupporter<Enchantment.EnchantmentType>.Set(
            int index,
            Enchantment.EnchantmentType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetEnchantmentEnchantmentType(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetEnchantmentEnchantmentType(
            int index,
            Enchantment.EnchantmentType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.Type:
                    SetType(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Enchantment.EnchantmentType: {index}");
            }
        }

        bool IPropertySupporter<Enchantment.EnchantmentType>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Enchantment.EnchantmentType>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Enchantment.EnchantmentType>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetEnchantmentEnchantmentType(
                index: index,
                cmds: cmds);
        }

        protected void UnsetEnchantmentEnchantmentType(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.Type:
                    _hasBeenSetTracker[index] = false;
                    Type = default(Enchantment.EnchantmentType);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Enchantment.EnchantmentType: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Enchantment.EnchantmentType>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Enchantment.EnchantmentType> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_EnchantmentEnchantmentType_subscriptions == null)
            {
                _EnchantmentEnchantmentType_subscriptions = new ObjectCentralizationSubscriptions<Enchantment.EnchantmentType>();
            }
            _EnchantmentEnchantmentType_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Enchantment.EnchantmentType>.Unsubscribe(
            int index,
            object owner)
        {
            _EnchantmentEnchantmentType_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Enchantment.EnchantmentType>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Enchantment.EnchantmentType IPropertySupporter<Enchantment.EnchantmentType>.DefaultValue(int index)
        {
            return DefaultValueEnchantmentEnchantmentType(index: index);
        }

        protected Enchantment.EnchantmentType DefaultValueEnchantmentEnchantmentType(int index)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.Type:
                    return default(Enchantment.EnchantmentType);
                default:
                    throw new ArgumentException($"Unknown index for field type Enchantment.EnchantmentType: {index}");
            }
        }

        #endregion

        #region IPropertySupporter UInt32
        protected ObjectCentralizationSubscriptions<UInt32> _UInt32_subscriptions;
        UInt32 IPropertySupporter<UInt32>.Get(int index)
        {
            return GetUInt32(index: index);
        }

        protected UInt32 GetUInt32(int index)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.ChargeAmount:
                    return ChargeAmount;
                case Enchantment_FieldIndex.EnchantCost:
                    return EnchantCost;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        void IPropertySupporter<UInt32>.Set(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt32(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.ChargeAmount:
                    SetChargeAmount(item, hasBeenSet, cmds);
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    SetEnchantCost(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        bool IPropertySupporter<UInt32>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<UInt32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.ChargeAmount:
                    _hasBeenSetTracker[index] = false;
                    ChargeAmount = default(UInt32);
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    _hasBeenSetTracker[index] = false;
                    EnchantCost = default(UInt32);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt32_subscriptions == null)
            {
                _UInt32_subscriptions = new ObjectCentralizationSubscriptions<UInt32>();
            }
            _UInt32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt32 IPropertySupporter<UInt32>.DefaultValue(int index)
        {
            return DefaultValueUInt32(index: index);
        }

        protected UInt32 DefaultValueUInt32(int index)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                    return default(UInt32);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Enchantment.Flag
        protected ObjectCentralizationSubscriptions<Enchantment.Flag> _EnchantmentFlag_subscriptions;
        Enchantment.Flag IPropertySupporter<Enchantment.Flag>.Get(int index)
        {
            return GetEnchantmentFlag(index: index);
        }

        protected Enchantment.Flag GetEnchantmentFlag(int index)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type Enchantment.Flag: {index}");
            }
        }

        void IPropertySupporter<Enchantment.Flag>.Set(
            int index,
            Enchantment.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetEnchantmentFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetEnchantmentFlag(
            int index,
            Enchantment.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Enchantment.Flag: {index}");
            }
        }

        bool IPropertySupporter<Enchantment.Flag>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Enchantment.Flag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Enchantment.Flag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetEnchantmentFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetEnchantmentFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.Flags:
                    _hasBeenSetTracker[index] = false;
                    Flags = default(Enchantment.Flag);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Enchantment.Flag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Enchantment.Flag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Enchantment.Flag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_EnchantmentFlag_subscriptions == null)
            {
                _EnchantmentFlag_subscriptions = new ObjectCentralizationSubscriptions<Enchantment.Flag>();
            }
            _EnchantmentFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Enchantment.Flag>.Unsubscribe(
            int index,
            object owner)
        {
            _EnchantmentFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Enchantment.Flag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Enchantment.Flag IPropertySupporter<Enchantment.Flag>.DefaultValue(int index)
        {
            return DefaultValueEnchantmentFlag(index: index);
        }

        protected Enchantment.Flag DefaultValueEnchantmentFlag(int index)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.Flags:
                    return default(Enchantment.Flag);
                default:
                    throw new ArgumentException($"Unknown index for field type Enchantment.Flag: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Enchantment_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Effects.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Enchantment Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Enchantment Create_Binary(
            MutagenFrame frame,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Enchantment Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Enchantment>(
                record: new Enchantment(),
                frame: frame,
                errorMask: errorMask,
                recType: Enchantment_Registration.ENCH_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Enchantment Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Enchantment Create_Binary(
            string path,
            out Enchantment_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Enchantment Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Enchantment Create_Binary(
            Stream stream,
            out Enchantment_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            EnchantmentCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Enchantment item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Enchantment item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x54494E45: // ENIT
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Enchantment_FieldIndex.Type);
                            if (EnumBinaryTranslation<Enchantment.EnchantmentType>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Enchantment.EnchantmentType TypeParse,
                                errorMask: errorMask))
                            {
                                item.Type = TypeParse;
                            }
                            else
                            {
                                item.UnsetType();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Enchantment_FieldIndex.ChargeAmount);
                            if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out UInt32 ChargeAmountParse,
                                errorMask: errorMask))
                            {
                                item.ChargeAmount = ChargeAmountParse;
                            }
                            else
                            {
                                item.UnsetChargeAmount();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Enchantment_FieldIndex.EnchantCost);
                            if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out UInt32 EnchantCostParse,
                                errorMask: errorMask))
                            {
                                item.EnchantCost = EnchantCostParse;
                            }
                            else
                            {
                                item.UnsetEnchantCost();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Enchantment_FieldIndex.Flags);
                            if (EnumBinaryTranslation<Enchantment.Flag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Enchantment.Flag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.UnsetFlags();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Flags);
                case 0x44494645: // EFID
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Enchantment_Registration.EFID_HEADER,
                        item: item.Effects,
                        fieldIndex: (int)Enchantment_FieldIndex.Effects,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<Effect>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Effects);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Enchantment Copy(
            Enchantment_CopyMask copyMask = null,
            IEnchantmentGetter def = null)
        {
            return Enchantment.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Enchantment Copy(
            IEnchantment item,
            Enchantment_CopyMask copyMask = null,
            IEnchantmentGetter def = null)
        {
            Enchantment ret;
            if (item.GetType().Equals(typeof(Enchantment)))
            {
                ret = new Enchantment();
            }
            else
            {
                ret = (Enchantment)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Enchantment Copy_ToLoqui(
            IEnchantmentGetter item,
            Enchantment_CopyMask copyMask = null,
            IEnchantmentGetter def = null)
        {
            Enchantment ret;
            if (item.GetType().Equals(typeof(Enchantment)))
            {
                ret = new Enchantment() as Enchantment;
            }
            else
            {
                ret = (Enchantment)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IEnchantmentGetter rhs,
            Enchantment_CopyMask copyMask,
            IEnchantmentGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IEnchantmentGetter rhs,
            out Enchantment_ErrorMask errorMask,
            Enchantment_CopyMask copyMask = null,
            IEnchantmentGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EnchantmentCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IEnchantmentGetter rhs,
            ErrorMaskBuilder errorMask,
            Enchantment_CopyMask copyMask = null,
            IEnchantmentGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            EnchantmentCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                    this.SetType(
                        (Enchantment.EnchantmentType)obj,
                        cmds: cmds);
                    break;
                case Enchantment_FieldIndex.ChargeAmount:
                    this.SetChargeAmount(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    this.SetEnchantCost(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case Enchantment_FieldIndex.Flags:
                    this.SetFlags(
                        (Enchantment.Flag)obj,
                        cmds: cmds);
                    break;
                case Enchantment_FieldIndex.Effects:
                    this._Effects.SetTo((IEnumerable<Effect>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            EnchantmentCommon.Clear(this, cmds);
        }


        public new static Enchantment Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Enchantment();
            foreach (var pair in fields)
            {
                CopyInInternal_Enchantment(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Enchantment(Enchantment obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Enchantment_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                    obj.SetType(
                        (Enchantment.EnchantmentType)pair.Value,
                        cmds: null);
                    break;
                case Enchantment_FieldIndex.ChargeAmount:
                    obj.SetChargeAmount(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    obj.SetEnchantCost(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case Enchantment_FieldIndex.Flags:
                    obj.SetFlags(
                        (Enchantment.Flag)pair.Value,
                        cmds: null);
                    break;
                case Enchantment_FieldIndex.Effects:
                    obj._Effects.SetTo((IEnumerable<Effect>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Enchantment obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IEnchantment : IEnchantmentGetter, INamedMajorRecord, ILoquiClass<IEnchantment, IEnchantmentGetter>, ILoquiClass<Enchantment, IEnchantmentGetter>
    {
        new Enchantment.EnchantmentType Type { get; set; }
        new INotifyingItem<Enchantment.EnchantmentType> Type_Property { get; }

        new UInt32 ChargeAmount { get; set; }
        new INotifyingItem<UInt32> ChargeAmount_Property { get; }

        new UInt32 EnchantCost { get; set; }
        new INotifyingItem<UInt32> EnchantCost_Property { get; }

        new Enchantment.Flag Flags { get; set; }
        new INotifyingItem<Enchantment.Flag> Flags_Property { get; }

        new INotifyingList<Effect> Effects { get; }
    }

    public partial interface IEnchantmentGetter : INamedMajorRecordGetter
    {
        #region Type
        Enchantment.EnchantmentType Type { get; }
        INotifyingItemGetter<Enchantment.EnchantmentType> Type_Property { get; }

        #endregion
        #region ChargeAmount
        UInt32 ChargeAmount { get; }
        INotifyingItemGetter<UInt32> ChargeAmount_Property { get; }

        #endregion
        #region EnchantCost
        UInt32 EnchantCost { get; }
        INotifyingItemGetter<UInt32> EnchantCost_Property { get; }

        #endregion
        #region Flags
        Enchantment.Flag Flags { get; }
        INotifyingItemGetter<Enchantment.Flag> Flags_Property { get; }

        #endregion
        #region Effects
        INotifyingListGetter<Effect> Effects { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Enchantment_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Type = 6,
        ChargeAmount = 7,
        EnchantCost = 8,
        Flags = 9,
        Effects = 10,
    }
    #endregion

    #region Registration
    public class Enchantment_Registration : ILoquiRegistration
    {
        public static readonly Enchantment_Registration Instance = new Enchantment_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 55,
            version: 0);

        public const string GUID = "70c1ef12-4d5f-4f6a-8899-5518fcba82ed";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(Enchantment_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Enchantment_ErrorMask);

        public static readonly Type ClassType = typeof(Enchantment);

        public static readonly Type GetterType = typeof(IEnchantmentGetter);

        public static readonly Type SetterType = typeof(IEnchantment);

        public static readonly Type CommonType = typeof(EnchantmentCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Enchantment";

        public const string Name = "Enchantment";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TYPE":
                    return (ushort)Enchantment_FieldIndex.Type;
                case "CHARGEAMOUNT":
                    return (ushort)Enchantment_FieldIndex.ChargeAmount;
                case "ENCHANTCOST":
                    return (ushort)Enchantment_FieldIndex.EnchantCost;
                case "FLAGS":
                    return (ushort)Enchantment_FieldIndex.Flags;
                case "EFFECTS":
                    return (ushort)Enchantment_FieldIndex.Effects;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Effects:
                    return true;
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Effects:
                    return true;
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.Effects:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                    return "Type";
                case Enchantment_FieldIndex.ChargeAmount:
                    return "ChargeAmount";
                case Enchantment_FieldIndex.EnchantCost:
                    return "EnchantCost";
                case Enchantment_FieldIndex.Flags:
                    return "Flags";
                case Enchantment_FieldIndex.Effects:
                    return "Effects";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.Effects:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.Effects:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                    return typeof(Enchantment.EnchantmentType);
                case Enchantment_FieldIndex.ChargeAmount:
                    return typeof(UInt32);
                case Enchantment_FieldIndex.EnchantCost:
                    return typeof(UInt32);
                case Enchantment_FieldIndex.Flags:
                    return typeof(Enchantment.Flag);
                case Enchantment_FieldIndex.Effects:
                    return typeof(NotifyingList<Effect>);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType ENIT_HEADER = new RecordType("ENIT");
        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ENCH_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class EnchantmentCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IEnchantment item,
            IEnchantmentGetter rhs,
            IEnchantmentGetter def,
            ErrorMaskBuilder errorMask,
            Enchantment_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Type ?? true)
            {
                errorMask.PushIndex((int)Enchantment_FieldIndex.Type);
                try
                {
                    item.Type_Property.Set(
                        value: rhs.Type,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.ChargeAmount ?? true)
            {
                errorMask.PushIndex((int)Enchantment_FieldIndex.ChargeAmount);
                try
                {
                    item.ChargeAmount_Property.Set(
                        value: rhs.ChargeAmount,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.EnchantCost ?? true)
            {
                errorMask.PushIndex((int)Enchantment_FieldIndex.EnchantCost);
                try
                {
                    item.EnchantCost_Property.Set(
                        value: rhs.EnchantCost,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)Enchantment_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Effects.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Enchantment_FieldIndex.Effects);
                try
                {
                    item.Effects.SetToWithDefault(
                        rhs: rhs.Effects,
                        def: def?.Effects,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Effects.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Effect);
                                    return Effect.Copy(
                                        r,
                                        copyMask?.Effects?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Effects.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IEnchantment obj,
            NotifyingFireParameters cmds = null)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Enchantment_FieldIndex.Effects:
                    obj.Effects.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IEnchantment obj,
            NotifyingUnsetParameters cmds = null)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                    obj.Type = default(Enchantment.EnchantmentType);
                    break;
                case Enchantment_FieldIndex.ChargeAmount:
                    obj.ChargeAmount = default(UInt32);
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    obj.EnchantCost = default(UInt32);
                    break;
                case Enchantment_FieldIndex.Flags:
                    obj.Flags = default(Enchantment.Flag);
                    break;
                case Enchantment_FieldIndex.Effects:
                    obj.Effects.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IEnchantment obj)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                    return true;
                case Enchantment_FieldIndex.Effects:
                    return obj.Effects.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IEnchantmentGetter obj)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                    return obj.Type;
                case Enchantment_FieldIndex.ChargeAmount:
                    return obj.ChargeAmount;
                case Enchantment_FieldIndex.EnchantCost:
                    return obj.EnchantCost;
                case Enchantment_FieldIndex.Flags:
                    return obj.Flags;
                case Enchantment_FieldIndex.Effects:
                    return obj.Effects;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IEnchantment item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Type = default(Enchantment.EnchantmentType);
            item.ChargeAmount = default(UInt32);
            item.EnchantCost = default(UInt32);
            item.Flags = default(Enchantment.Flag);
            item.Effects.Unset(cmds.ToUnsetParams());
        }

        public static Enchantment_Mask<bool> GetEqualsMask(
            this IEnchantmentGetter item,
            IEnchantmentGetter rhs)
        {
            var ret = new Enchantment_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IEnchantmentGetter item,
            IEnchantmentGetter rhs,
            Enchantment_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Type = item.Type == rhs.Type;
            ret.ChargeAmount = item.ChargeAmount == rhs.ChargeAmount;
            ret.EnchantCost = item.EnchantCost == rhs.EnchantCost;
            ret.Flags = item.Flags == rhs.Flags;
            if (item.Effects.HasBeenSet == rhs.Effects.HasBeenSet)
            {
                if (item.Effects.HasBeenSet)
                {
                    ret.Effects = new MaskItem<bool, IEnumerable<MaskItem<bool, Effect_Mask<bool>>>>();
                    ret.Effects.Specific = item.Effects.SelectAgainst<Effect, MaskItem<bool, Effect_Mask<bool>>>(rhs.Effects, ((l, r) =>
                    {
                        MaskItem<bool, Effect_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Effects.Overall);
                    ret.Effects.Overall = ret.Effects.Overall && ret.Effects.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Effects = new MaskItem<bool, IEnumerable<MaskItem<bool, Effect_Mask<bool>>>>();
                    ret.Effects.Overall = true;
                }
            }
            else
            {
                ret.Effects = new MaskItem<bool, IEnumerable<MaskItem<bool, Effect_Mask<bool>>>>();
                ret.Effects.Overall = false;
            }
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IEnchantmentGetter item,
            string name = null,
            Enchantment_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IEnchantmentGetter item,
            FileGeneration fg,
            string name = null,
            Enchantment_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Enchantment)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Enchantment)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
                if (printMask?.ChargeAmount ?? true)
                {
                    fg.AppendLine($"ChargeAmount => {item.ChargeAmount}");
                }
                if (printMask?.EnchantCost ?? true)
                {
                    fg.AppendLine($"EnchantCost => {item.EnchantCost}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Effects?.Overall ?? true)
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Effects)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IEnchantmentGetter item,
            Enchantment_Mask<bool?> checkMask)
        {
            if (checkMask.Effects.Overall.HasValue && checkMask.Effects.Overall.Value != item.Effects.HasBeenSet) return false;
            return true;
        }

        public static Enchantment_Mask<bool> GetHasBeenSetMask(IEnchantmentGetter item)
        {
            var ret = new Enchantment_Mask<bool>();
            ret.Type = true;
            ret.ChargeAmount = true;
            ret.EnchantCost = true;
            ret.Flags = true;
            ret.Effects = new MaskItem<bool, IEnumerable<MaskItem<bool, Effect_Mask<bool>>>>(item.Effects.HasBeenSet, item.Effects.Select((i) => new MaskItem<bool, Effect_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static Enchantment_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Enchantment_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Enchantment_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Enchantment_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Enchantment_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Enchantment_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Enchantment_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Enchantment_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Enchantment_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Enchantment_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Enchantment_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Enchantment_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Enchantment_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Enchantment_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Enchantment_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IEnchantmentGetter item,
            bool doMasks,
            out Enchantment_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IEnchantmentGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Enchantment");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Enchantment");
            }
            EnumXmlTranslation<Enchantment.EnchantmentType>.Instance.Write(
                node: elem,
                name: nameof(item.Type),
                item: item.Type_Property,
                fieldIndex: (int)Enchantment_FieldIndex.Type,
                errorMask: errorMask);
            UInt32XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.ChargeAmount),
                item: item.ChargeAmount_Property,
                fieldIndex: (int)Enchantment_FieldIndex.ChargeAmount,
                errorMask: errorMask);
            UInt32XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.EnchantCost),
                item: item.EnchantCost_Property,
                fieldIndex: (int)Enchantment_FieldIndex.EnchantCost,
                errorMask: errorMask);
            EnumXmlTranslation<Enchantment.Flag>.Instance.Write(
                node: elem,
                name: nameof(item.Flags),
                item: item.Flags_Property,
                fieldIndex: (int)Enchantment_FieldIndex.Flags,
                errorMask: errorMask);
            if (item.Effects.HasBeenSet)
            {
                ListXmlTranslation<Effect>.Instance.Write(
                    node: elem,
                    name: nameof(item.Effects),
                    item: item.Effects,
                    fieldIndex: (int)Enchantment_FieldIndex.Effects,
                    errorMask: errorMask,
                    transl: (XElement subNode, Effect subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<Effect>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Enchantment item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Enchantment_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Enchantment item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Enchantment_Registration.ENCH_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Enchantment item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Enchantment_Registration.ENIT_HEADER)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Enchantment.EnchantmentType>.Instance.Write(
                    writer,
                    item.Type_Property,
                    length: 4,
                    fieldIndex: (int)Enchantment_FieldIndex.Type,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ChargeAmount_Property,
                    fieldIndex: (int)Enchantment_FieldIndex.ChargeAmount,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EnchantCost_Property,
                    fieldIndex: (int)Enchantment_FieldIndex.EnchantCost,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Enchantment.Flag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: 4,
                    fieldIndex: (int)Enchantment_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.Write(
                writer: writer,
                items: item.Effects,
                fieldIndex: (int)Enchantment_FieldIndex.Effects,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<Effect>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Enchantment_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Enchantment_Mask<T>>
    {
        #region Ctors
        public Enchantment_Mask()
        {
        }

        public Enchantment_Mask(T initialValue)
        {
            this.Type = initialValue;
            this.ChargeAmount = initialValue;
            this.EnchantCost = initialValue;
            this.Flags = initialValue;
            this.Effects = new MaskItem<T, IEnumerable<MaskItem<T, Effect_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Type;
        public T ChargeAmount;
        public T EnchantCost;
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItem<T, Effect_Mask<T>>>> Effects;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Enchantment_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Enchantment_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.ChargeAmount, rhs.ChargeAmount)) return false;
            if (!object.Equals(this.EnchantCost, rhs.EnchantCost)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Effects, rhs.Effects)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            ret = ret.CombineHashCode(this.ChargeAmount?.GetHashCode());
            ret = ret.CombineHashCode(this.EnchantCost?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Effects?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Type)) return false;
            if (!eval(this.ChargeAmount)) return false;
            if (!eval(this.EnchantCost)) return false;
            if (!eval(this.Flags)) return false;
            if (this.Effects != null)
            {
                if (!eval(this.Effects.Overall)) return false;
                if (this.Effects.Specific != null)
                {
                    foreach (var item in this.Effects.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Enchantment_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Enchantment_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Enchantment_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Type = eval(this.Type);
            obj.ChargeAmount = eval(this.ChargeAmount);
            obj.EnchantCost = eval(this.EnchantCost);
            obj.Flags = eval(this.Flags);
            if (Effects != null)
            {
                obj.Effects = new MaskItem<R, IEnumerable<MaskItem<R, Effect_Mask<R>>>>();
                obj.Effects.Overall = eval(this.Effects.Overall);
                if (Effects.Specific != null)
                {
                    List<MaskItem<R, Effect_Mask<R>>> l = new List<MaskItem<R, Effect_Mask<R>>>();
                    obj.Effects.Specific = l;
                    foreach (var item in Effects.Specific)
                    {
                        MaskItem<R, Effect_Mask<R>> mask = default(MaskItem<R, Effect_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Effect_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Effects.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Enchantment_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Enchantment_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Enchantment_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
                if (printMask?.ChargeAmount ?? true)
                {
                    fg.AppendLine($"ChargeAmount => {ChargeAmount}");
                }
                if (printMask?.EnchantCost ?? true)
                {
                    fg.AppendLine($"EnchantCost => {EnchantCost}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Effects?.Overall ?? true)
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Effects.Overall != null)
                        {
                            fg.AppendLine(Effects.Overall.ToString());
                        }
                        if (Effects.Specific != null)
                        {
                            foreach (var subItem in Effects.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Enchantment_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Enchantment_ErrorMask>
    {
        #region Members
        public Exception Type;
        public Exception ChargeAmount;
        public Exception EnchantCost;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>> Effects;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                    return Type;
                case Enchantment_FieldIndex.ChargeAmount:
                    return ChargeAmount;
                case Enchantment_FieldIndex.EnchantCost:
                    return EnchantCost;
                case Enchantment_FieldIndex.Flags:
                    return Flags;
                case Enchantment_FieldIndex.Effects:
                    return Effects;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case Enchantment_FieldIndex.ChargeAmount:
                    this.ChargeAmount = ex;
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    this.EnchantCost = ex;
                    break;
                case Enchantment_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Enchantment_FieldIndex.Effects:
                    this.Effects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case Enchantment_FieldIndex.ChargeAmount:
                    this.ChargeAmount = (Exception)obj;
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    this.EnchantCost = (Exception)obj;
                    break;
                case Enchantment_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Enchantment_FieldIndex.Effects:
                    this.Effects = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Type != null) return true;
            if (ChargeAmount != null) return true;
            if (EnchantCost != null) return true;
            if (Flags != null) return true;
            if (Effects != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Enchantment_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Type => {Type}");
            fg.AppendLine($"ChargeAmount => {ChargeAmount}");
            fg.AppendLine($"EnchantCost => {EnchantCost}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Effects =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Effects.Overall != null)
                {
                    fg.AppendLine(Effects.Overall.ToString());
                }
                if (Effects.Specific != null)
                {
                    foreach (var subItem in Effects.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Enchantment_ErrorMask Combine(Enchantment_ErrorMask rhs)
        {
            var ret = new Enchantment_ErrorMask();
            ret.Type = this.Type.Combine(rhs.Type);
            ret.ChargeAmount = this.ChargeAmount.Combine(rhs.ChargeAmount);
            ret.EnchantCost = this.EnchantCost.Combine(rhs.EnchantCost);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Effects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>(this.Effects.Overall.Combine(rhs.Effects.Overall), new List<MaskItem<Exception, Effect_ErrorMask>>(this.Effects.Specific.And(rhs.Effects.Specific)));
            return ret;
        }
        public static Enchantment_ErrorMask Combine(Enchantment_ErrorMask lhs, Enchantment_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Enchantment_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Enchantment_ErrorMask();
        }
        #endregion

    }
    public class Enchantment_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Type;
        public bool ChargeAmount;
        public bool EnchantCost;
        public bool Flags;
        public MaskItem<CopyOption, Effect_CopyMask> Effects;
        #endregion

    }
    #endregion





    #endregion

}
