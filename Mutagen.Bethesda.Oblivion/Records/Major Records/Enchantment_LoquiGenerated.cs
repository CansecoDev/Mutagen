/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Enchantment :
        OblivionMajorRecord,
        IEnchantmentInternal,
        ILoquiObjectSetter<Enchantment>,
        INamed,
        ILinkSubContainer,
        IEquatable<Enchantment>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Enchantment_Registration.Instance;
        public new static Enchantment_Registration Registration => Enchantment_Registration.Instance;
        protected override object CommonInstance => EnchantmentCommon.Instance;

        #region Ctor
        protected Enchantment()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Enchantment_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Enchantment_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IEnchantmentGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IEnchantmentGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Enchantment_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Type
        private Enchantment.EnchantmentType _Type;
        public Enchantment.EnchantmentType Type
        {
            get => this._Type;
            set
            {
                this.ENITDataTypeState |= ENITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Type, value, nameof(Type));
            }
        }
        #endregion
        #region ChargeAmount
        private UInt32 _ChargeAmount;
        public UInt32 ChargeAmount
        {
            get => this._ChargeAmount;
            set
            {
                this.ENITDataTypeState |= ENITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._ChargeAmount, value, nameof(ChargeAmount));
            }
        }
        #endregion
        #region EnchantCost
        private UInt32 _EnchantCost;
        public UInt32 EnchantCost
        {
            get => this._EnchantCost;
            set
            {
                this.ENITDataTypeState |= ENITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._EnchantCost, value, nameof(EnchantCost));
            }
        }
        #endregion
        #region Flags
        private Enchantment.Flag _Flags;
        public Enchantment.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.ENITDataTypeState |= ENITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Effect> _Effects = new SourceSetList<Effect>();
        public ISourceSetList<Effect> Effects => _Effects;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Effect> IEnchantment.Effects => _Effects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IEffectInternalGetter> IEnchantmentGetter.Effects => _Effects;
        #endregion

        #endregion
        #region ENITDataTypeState
        private Enchantment.ENITDataType _ENITDataTypeState;
        public Enchantment.ENITDataType ENITDataTypeState
        {
            get => this._ENITDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._ENITDataTypeState, value, nameof(ENITDataTypeState));
        }
        Enchantment.ENITDataType IEnchantmentInternal.ENITDataTypeState
        {
            get => this.ENITDataTypeState;
            set => this.ENITDataTypeState = value;
        }
        Enchantment.ENITDataType IEnchantmentInternalGetter.ENITDataTypeState
        {
            get => this.ENITDataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEnchantmentInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            EnchantmentMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IEnchantmentInternalGetter rhs)) return false;
            return ((EnchantmentCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(Enchantment obj)
        {
            return ((EnchantmentCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((EnchantmentCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => EnchantmentXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Enchantment CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Enchantment_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Enchantment CreateFromXml(
            XElement node,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true,
            Enchantment_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Enchantment CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Enchantment() : null;
                    break;
                default:
                    break;
            }
            var ret = new Enchantment();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    EnchantmentXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Enchantment CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Enchantment_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Enchantment CreateFromXml(
            string path,
            out Enchantment_ErrorMask errorMask,
            Enchantment_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Enchantment CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Enchantment_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Enchantment CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Enchantment_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Enchantment CreateFromXml(
            Stream stream,
            out Enchantment_ErrorMask errorMask,
            Enchantment_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Enchantment CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Enchantment_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Enchantment item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasENITDataType":
                    item.ENITDataTypeState |= Enchantment.ENITDataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Enchantment_FieldIndex)index)
            {
                case Enchantment_FieldIndex.Name:
                    return _hasBeenSetTracker[index];
                case Enchantment_FieldIndex.Effects:
                    return Effects.HasBeenSet;
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Enchantment_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum ENITDataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Effects.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Effects.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        public Enchantment(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Enchantment(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => EnchantmentBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Enchantment CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Enchantment CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Enchantment CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Enchantment>(
                record: new Enchantment(),
                frame: frame,
                errorMask: errorMask,
                recType: Enchantment_Registration.ENCH_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Enchantment item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Enchantment item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Name);
                }
                case 0x54494E45: // ENIT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.ENITDataTypeState = ENITDataType.Has;
                    }
                    if (EnumBinaryTranslation<Enchantment.EnchantmentType>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out Enchantment.EnchantmentType TypeParse))
                    {
                        item.Type = TypeParse;
                    }
                    else
                    {
                        item.Type = default(Enchantment.EnchantmentType);
                    }
                    item.ChargeAmount = dataFrame.ReadUInt32();
                    item.EnchantCost = dataFrame.ReadUInt32();
                    if (EnumBinaryTranslation<Enchantment.Flag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out Enchantment.Flag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Enchantment.Flag);
                    }
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Flags);
                }
                case 0x44494645: // EFID
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Enchantment_Registration.EFID_HEADER,
                        item: item.Effects,
                        fieldIndex: (int)Enchantment_FieldIndex.Effects,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Effect listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Effect>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Effects);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Enchantment Copy(
            Enchantment_CopyMask copyMask = null,
            Enchantment def = null)
        {
            return Enchantment.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Enchantment Copy(
            Enchantment item,
            Enchantment_CopyMask copyMask = null,
            Enchantment def = null)
        {
            Enchantment ret;
            if (item.GetType().Equals(typeof(Enchantment)))
            {
                ret = new Enchantment();
            }
            else
            {
                ret = (Enchantment)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Enchantment Copy_ToLoqui(
            Enchantment item,
            Enchantment_CopyMask copyMask = null,
            Enchantment def = null)
        {
            Enchantment ret;
            if (item.GetType().Equals(typeof(Enchantment)))
            {
                ret = new Enchantment() as Enchantment;
            }
            else
            {
                ret = (Enchantment)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Enchantment rhs,
            Enchantment_CopyMask copyMask,
            Enchantment def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Enchantment rhs,
            out Enchantment_ErrorMask errorMask,
            Enchantment_CopyMask copyMask = null,
            Enchantment def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EnchantmentCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Enchantment rhs,
            ErrorMaskBuilder errorMask,
            Enchantment_CopyMask copyMask = null,
            Enchantment def = null)
        {
            EnchantmentCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Enchantment_FieldIndex.Type:
                    this.Type = (Enchantment.EnchantmentType)obj;
                    break;
                case Enchantment_FieldIndex.ChargeAmount:
                    this.ChargeAmount = (UInt32)obj;
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    this.EnchantCost = (UInt32)obj;
                    break;
                case Enchantment_FieldIndex.Flags:
                    this.Flags = (Enchantment.Flag)obj;
                    break;
                case Enchantment_FieldIndex.Effects:
                    this._Effects.SetTo((ISetList<Effect>)obj);
                    break;
                case Enchantment_FieldIndex.ENITDataTypeState:
                    this.ENITDataTypeState = (Enchantment.ENITDataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            EnchantmentCommon.Instance.Clear(this);
        }

        public new static Enchantment Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Enchantment();
            foreach (var pair in fields)
            {
                CopyInInternal_Enchantment(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Enchantment(Enchantment obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Enchantment_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Enchantment_FieldIndex.Type:
                    obj.Type = (Enchantment.EnchantmentType)pair.Value;
                    break;
                case Enchantment_FieldIndex.ChargeAmount:
                    obj.ChargeAmount = (UInt32)pair.Value;
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    obj.EnchantCost = (UInt32)pair.Value;
                    break;
                case Enchantment_FieldIndex.Flags:
                    obj.Flags = (Enchantment.Flag)pair.Value;
                    break;
                case Enchantment_FieldIndex.Effects:
                    obj._Effects.SetTo((ISetList<Effect>)pair.Value);
                    break;
                case Enchantment_FieldIndex.ENITDataTypeState:
                    obj.ENITDataTypeState = (Enchantment.ENITDataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IEnchantment :
        IEnchantmentInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IEnchantmentInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new Enchantment.EnchantmentType Type { get; set; }

        new UInt32 ChargeAmount { get; set; }

        new UInt32 EnchantCost { get; set; }

        new Enchantment.Flag Flags { get; set; }

        new ISetList<Effect> Effects { get; }
        void CopyFieldsFrom(
            Enchantment rhs,
            ErrorMaskBuilder errorMask = null,
            Enchantment_CopyMask copyMask = null,
            Enchantment def = null);
    }

    public partial interface IEnchantmentInternal :
        IOblivionMajorRecordInternal,
        IEnchantment,
        IEnchantmentInternalGetter
    {
        new Enchantment.ENITDataType ENITDataTypeState { get; set; }

    }

    public partial interface IEnchantmentGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IEnchantmentInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Type
        Enchantment.EnchantmentType Type { get; }

        #endregion
        #region ChargeAmount
        UInt32 ChargeAmount { get; }

        #endregion
        #region EnchantCost
        UInt32 EnchantCost { get; }

        #endregion
        #region Flags
        Enchantment.Flag Flags { get; }

        #endregion
        #region Effects
        IReadOnlySetList<IEffectInternalGetter> Effects { get; }
        #endregion

    }

    public partial interface IEnchantmentInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IEnchantmentGetter
    {
        #region ENITDataTypeState
        Enchantment.ENITDataType ENITDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class EnchantmentMixIn
    {
        public static void Clear(this IEnchantmentInternal item)
        {
            ((EnchantmentCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static Enchantment_Mask<bool> GetEqualsMask(
            this IEnchantmentInternalGetter item,
            IEnchantmentInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EnchantmentCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IEnchantmentInternalGetter item,
            string name = null,
            Enchantment_Mask<bool> printMask = null)
        {
            return ((EnchantmentCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IEnchantmentInternalGetter item,
            FileGeneration fg,
            string name = null,
            Enchantment_Mask<bool> printMask = null)
        {
            ((EnchantmentCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IEnchantmentInternalGetter item,
            Enchantment_Mask<bool?> checkMask)
        {
            return ((EnchantmentCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Enchantment_Mask<bool> GetHasBeenSetMask(this IEnchantmentInternalGetter item)
        {
            var ret = new Enchantment_Mask<bool>();
            ((EnchantmentCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IEnchantmentInternalGetter item,
            IEnchantmentInternalGetter rhs)
        {
            return ((EnchantmentCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Enchantment_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Type = 6,
        ChargeAmount = 7,
        EnchantCost = 8,
        Flags = 9,
        Effects = 10,
        ENITDataTypeState = 11,
    }
    #endregion

    #region Registration
    public class Enchantment_Registration : ILoquiRegistration
    {
        public static readonly Enchantment_Registration Instance = new Enchantment_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 55,
            version: 0);

        public const string GUID = "70c1ef12-4d5f-4f6a-8899-5518fcba82ed";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(Enchantment_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Enchantment_ErrorMask);

        public static readonly Type ClassType = typeof(Enchantment);

        public static readonly Type GetterType = typeof(IEnchantmentGetter);

        public static readonly Type InternalGetterType = typeof(IEnchantmentInternalGetter);

        public static readonly Type SetterType = typeof(IEnchantment);

        public static readonly Type InternalSetterType = typeof(IEnchantmentInternal);

        public static readonly Type CommonType = typeof(EnchantmentCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Enchantment";

        public const string Name = "Enchantment";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Enchantment_FieldIndex.Name;
                case "TYPE":
                    return (ushort)Enchantment_FieldIndex.Type;
                case "CHARGEAMOUNT":
                    return (ushort)Enchantment_FieldIndex.ChargeAmount;
                case "ENCHANTCOST":
                    return (ushort)Enchantment_FieldIndex.EnchantCost;
                case "FLAGS":
                    return (ushort)Enchantment_FieldIndex.Flags;
                case "EFFECTS":
                    return (ushort)Enchantment_FieldIndex.Effects;
                case "ENITDATATYPESTATE":
                    return (ushort)Enchantment_FieldIndex.ENITDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Effects:
                    return true;
                case Enchantment_FieldIndex.Name:
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Effects:
                    return true;
                case Enchantment_FieldIndex.Name:
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.Effects:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                    return "Name";
                case Enchantment_FieldIndex.Type:
                    return "Type";
                case Enchantment_FieldIndex.ChargeAmount:
                    return "ChargeAmount";
                case Enchantment_FieldIndex.EnchantCost:
                    return "EnchantCost";
                case Enchantment_FieldIndex.Flags:
                    return "Flags";
                case Enchantment_FieldIndex.Effects:
                    return "Effects";
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return "ENITDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.Effects:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                case Enchantment_FieldIndex.Type:
                case Enchantment_FieldIndex.ChargeAmount:
                case Enchantment_FieldIndex.EnchantCost:
                case Enchantment_FieldIndex.Flags:
                case Enchantment_FieldIndex.Effects:
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                    return typeof(String);
                case Enchantment_FieldIndex.Type:
                    return typeof(Enchantment.EnchantmentType);
                case Enchantment_FieldIndex.ChargeAmount:
                    return typeof(UInt32);
                case Enchantment_FieldIndex.EnchantCost:
                    return typeof(UInt32);
                case Enchantment_FieldIndex.Flags:
                    return typeof(Enchantment.Flag);
                case Enchantment_FieldIndex.Effects:
                    return typeof(ISetList<Effect>);
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return typeof(Enchantment.ENITDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(EnchantmentXmlWriteTranslation);
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType ENIT_HEADER = new RecordType("ENIT");
        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ENCH_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(EnchantmentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class EnchantmentCommon : OblivionMajorRecordCommon
    {
        public static readonly EnchantmentCommon Instance = new EnchantmentCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Enchantment item,
            Enchantment rhs,
            Enchantment def,
            ErrorMaskBuilder errorMask,
            Enchantment_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Enchantment_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Type ?? true)
            {
                errorMask?.PushIndex((int)Enchantment_FieldIndex.Type);
                try
                {
                    item.Type = rhs.Type;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ChargeAmount ?? true)
            {
                errorMask?.PushIndex((int)Enchantment_FieldIndex.ChargeAmount);
                try
                {
                    item.ChargeAmount = rhs.ChargeAmount;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EnchantCost ?? true)
            {
                errorMask?.PushIndex((int)Enchantment_FieldIndex.EnchantCost);
                try
                {
                    item.EnchantCost = rhs.EnchantCost;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Enchantment_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Effects.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Enchantment_FieldIndex.Effects);
                try
                {
                    item.Effects.SetToWithDefault<Effect, Effect>(
                        rhs: rhs.Effects,
                        def: def?.Effects,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Effects.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (Effect)r;
                                case CopyOption.MakeCopy:
                                    return Effect.Copy(
                                        r,
                                        copyMask?.Effects?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Effects.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IEnchantmentInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Type = default(Enchantment.EnchantmentType);
            item.ChargeAmount = default(UInt32);
            item.EnchantCost = default(UInt32);
            item.Flags = default(Enchantment.Flag);
            item.Effects.Unset();
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IEnchantmentInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IEnchantmentInternal)item);
        }

        public Enchantment_Mask<bool> GetEqualsMask(
            IEnchantmentInternalGetter item,
            IEnchantmentInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Enchantment_Mask<bool>();
            ((EnchantmentCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IEnchantmentInternalGetter item,
            IEnchantmentInternalGetter rhs,
            Enchantment_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Type = item.Type == rhs.Type;
            ret.ChargeAmount = item.ChargeAmount == rhs.ChargeAmount;
            ret.EnchantCost = item.EnchantCost == rhs.EnchantCost;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IEnchantmentInternalGetter item,
            string name = null,
            Enchantment_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IEnchantmentInternalGetter item,
            FileGeneration fg,
            string name = null,
            Enchantment_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Enchantment =>");
            }
            else
            {
                fg.AppendLine($"{name} (Enchantment) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IEnchantmentInternalGetter item,
            FileGeneration fg,
            Enchantment_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendLine($"Type => {item.Type}");
            }
            if (printMask?.ChargeAmount ?? true)
            {
                fg.AppendLine($"ChargeAmount => {item.ChargeAmount}");
            }
            if (printMask?.EnchantCost ?? true)
            {
                fg.AppendLine($"EnchantCost => {item.EnchantCost}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Effects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.ENITDataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IEnchantmentInternalGetter item,
            Enchantment_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Effects.Overall.HasValue && checkMask.Effects.Overall.Value != item.Effects.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IEnchantmentInternalGetter item,
            Enchantment_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Type = true;
            mask.ChargeAmount = true;
            mask.EnchantCost = true;
            mask.Flags = true;
            mask.Effects = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Effect_Mask<bool>>>>(item.Effects.HasBeenSet, item.Effects.WithIndex().Select((i) => new MaskItemIndexed<bool, Effect_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.ENITDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Enchantment_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Enchantment_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Enchantment_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Enchantment_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Enchantment_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Enchantment_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Enchantment_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Enchantment_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Enchantment_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Enchantment_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Enchantment_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IEnchantmentInternalGetter lhs,
            IEnchantmentInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Type != rhs.Type) return false;
            if (lhs.ChargeAmount != rhs.ChargeAmount) return false;
            if (lhs.EnchantCost != rhs.EnchantCost) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Effects.HasBeenSet != rhs.Effects.HasBeenSet) return false;
            if (lhs.Effects.HasBeenSet)
            {
                if (!lhs.Effects.SequenceEqual(rhs.Effects)) return false;
            }
            if (lhs.ENITDataTypeState != rhs.ENITDataTypeState) return false;
            return true;
        }

        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IEnchantmentInternalGetter)lhs,
                rhs: rhs as IEnchantmentInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IEnchantmentInternalGetter)lhs,
                rhs: rhs as IEnchantmentInternalGetter);
        }

        public virtual int GetHashCode(IEnchantmentInternalGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ChargeAmount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EnchantCost).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            if (item.Effects.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Effects).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.ENITDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IEnchantmentInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IEnchantmentInternalGetter)item);
        }

        #endregion


        #region Mutagen
        partial void PostDuplicate(Enchantment obj, Enchantment rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(IMajorRecordCommon item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Enchantment(getNextFormKey());
            ret.CopyFieldsFrom((Enchantment)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Enchantment)item, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class EnchantmentXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static EnchantmentXmlWriteTranslation Instance = new EnchantmentXmlWriteTranslation();

        public static void WriteToNodeXml(
            IEnchantmentInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Enchantment_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.ENITDataTypeState.HasFlag(Enchantment.ENITDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Type) ?? true))
                {
                    EnumXmlTranslation<Enchantment.EnchantmentType>.Instance.Write(
                        node: node,
                        name: nameof(item.Type),
                        item: item.Type,
                        fieldIndex: (int)Enchantment_FieldIndex.Type,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.ChargeAmount) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ChargeAmount),
                        item: item.ChargeAmount,
                        fieldIndex: (int)Enchantment_FieldIndex.ChargeAmount,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.EnchantCost) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EnchantCost),
                        item: item.EnchantCost,
                        fieldIndex: (int)Enchantment_FieldIndex.EnchantCost,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Enchantment.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Enchantment_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if (item.Effects.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.Effects) ?? true))
            {
                ListXmlTranslation<IEffectInternalGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Effects),
                    item: item.Effects,
                    fieldIndex: (int)Enchantment_FieldIndex.Effects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Enchantment_FieldIndex.Effects),
                    transl: (XElement subNode, IEffectInternalGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((EffectXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Enchantment_FieldIndex.ENITDataTypeState) ?? true))
            {
                EnumXmlTranslation<Enchantment.ENITDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.ENITDataTypeState),
                    item: item.ENITDataTypeState,
                    fieldIndex: (int)Enchantment_FieldIndex.ENITDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IEnchantmentInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Enchantment");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Enchantment");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IEnchantmentInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IEnchantmentInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IEnchantmentInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class EnchantmentXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static EnchantmentXmlCreateTranslation Instance = new EnchantmentXmlCreateTranslation();

        public static void FillPublicXml(
            IEnchantmentInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    EnchantmentXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IEnchantmentInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.Type);
                        if (EnumXmlTranslation<Enchantment.EnchantmentType>.Instance.Parse(
                            node: node,
                            item: out Enchantment.EnchantmentType TypeParse,
                            errorMask: errorMask))
                        {
                            item.Type = TypeParse;
                        }
                        else
                        {
                            item.Type = default(Enchantment.EnchantmentType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.ENITDataTypeState |= Enchantment.ENITDataType.Has;
                    break;
                case "ChargeAmount":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.ChargeAmount);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 ChargeAmountParse,
                            errorMask: errorMask))
                        {
                            item.ChargeAmount = ChargeAmountParse;
                        }
                        else
                        {
                            item.ChargeAmount = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantCost":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.EnchantCost);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 EnchantCostParse,
                            errorMask: errorMask))
                        {
                            item.EnchantCost = EnchantCostParse;
                        }
                        else
                        {
                            item.EnchantCost = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.Flags);
                        if (EnumXmlTranslation<Enchantment.Flag>.Instance.Parse(
                            node: node,
                            item: out Enchantment.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Enchantment.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Effects":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.Effects);
                        if (ListXmlTranslation<Effect>.Instance.Parse(
                            node: node,
                            enumer: out var EffectsItem,
                            transl: LoquiXmlTranslation<Effect>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Effects.SetTo(EffectsItem);
                        }
                        else
                        {
                            item.Effects.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ENITDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Enchantment_FieldIndex.ENITDataTypeState);
                        if (EnumXmlTranslation<Enchantment.ENITDataType>.Instance.Parse(
                            node: node,
                            item: out Enchantment.ENITDataType ENITDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.ENITDataTypeState = ENITDataTypeStateParse;
                        }
                        else
                        {
                            item.ENITDataTypeState = default(Enchantment.ENITDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class EnchantmentXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IEnchantmentInternalGetter item,
            XElement node,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true,
            Enchantment_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((EnchantmentXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IEnchantmentInternalGetter item,
            string path,
            out Enchantment_ErrorMask errorMask,
            Enchantment_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IEnchantmentInternalGetter item,
            Stream stream,
            out Enchantment_ErrorMask errorMask,
            Enchantment_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Enchantment_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Enchantment_Mask<T>>
    {
        #region Ctors
        public Enchantment_Mask()
        {
        }

        public Enchantment_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Type = initialValue;
            this.ChargeAmount = initialValue;
            this.EnchantCost = initialValue;
            this.Flags = initialValue;
            this.Effects = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Effect_Mask<T>>>>(initialValue, null);
            this.ENITDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public T Type;
        public T ChargeAmount;
        public T EnchantCost;
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Effect_Mask<T>>>> Effects;
        public T ENITDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Enchantment_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Enchantment_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.ChargeAmount, rhs.ChargeAmount)) return false;
            if (!object.Equals(this.EnchantCost, rhs.EnchantCost)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Effects, rhs.Effects)) return false;
            if (!object.Equals(this.ENITDataTypeState, rhs.ENITDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            ret = ret.CombineHashCode(this.ChargeAmount?.GetHashCode());
            ret = ret.CombineHashCode(this.EnchantCost?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Effects?.GetHashCode());
            ret = ret.CombineHashCode(this.ENITDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Type)) return false;
            if (!eval(this.ChargeAmount)) return false;
            if (!eval(this.EnchantCost)) return false;
            if (!eval(this.Flags)) return false;
            if (this.Effects != null)
            {
                if (!eval(this.Effects.Overall)) return false;
                if (this.Effects.Specific != null)
                {
                    foreach (var item in this.Effects.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.ENITDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Enchantment_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Enchantment_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Enchantment_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Type = eval(this.Type);
            obj.ChargeAmount = eval(this.ChargeAmount);
            obj.EnchantCost = eval(this.EnchantCost);
            obj.Flags = eval(this.Flags);
            if (Effects != null)
            {
                obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect_Mask<R>>>>();
                obj.Effects.Overall = eval(this.Effects.Overall);
                if (Effects.Specific != null)
                {
                    List<MaskItemIndexed<R, Effect_Mask<R>>> l = new List<MaskItemIndexed<R, Effect_Mask<R>>>();
                    obj.Effects.Specific = l;
                    foreach (var item in Effects.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Effect_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Effect_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.ENITDataTypeState = eval(this.ENITDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Effects.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Enchantment_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Enchantment_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Enchantment_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
                if (printMask?.ChargeAmount ?? true)
                {
                    fg.AppendLine($"ChargeAmount => {ChargeAmount}");
                }
                if (printMask?.EnchantCost ?? true)
                {
                    fg.AppendLine($"EnchantCost => {EnchantCost}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Effects?.Overall ?? true)
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Effects.Overall != null)
                        {
                            fg.AppendLine(Effects.Overall.ToString());
                        }
                        if (Effects.Specific != null)
                        {
                            foreach (var subItem in Effects.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.ENITDataTypeState ?? true)
                {
                    fg.AppendLine($"ENITDataTypeState => {ENITDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Enchantment_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Enchantment_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Type;
        public Exception ChargeAmount;
        public Exception EnchantCost;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>> Effects;
        public Exception ENITDataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                    return Name;
                case Enchantment_FieldIndex.Type:
                    return Type;
                case Enchantment_FieldIndex.ChargeAmount:
                    return ChargeAmount;
                case Enchantment_FieldIndex.EnchantCost:
                    return EnchantCost;
                case Enchantment_FieldIndex.Flags:
                    return Flags;
                case Enchantment_FieldIndex.Effects:
                    return Effects;
                case Enchantment_FieldIndex.ENITDataTypeState:
                    return ENITDataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Enchantment_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case Enchantment_FieldIndex.ChargeAmount:
                    this.ChargeAmount = ex;
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    this.EnchantCost = ex;
                    break;
                case Enchantment_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Enchantment_FieldIndex.Effects:
                    this.Effects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>(ex, null);
                    break;
                case Enchantment_FieldIndex.ENITDataTypeState:
                    this.ENITDataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Enchantment_FieldIndex enu = (Enchantment_FieldIndex)index;
            switch (enu)
            {
                case Enchantment_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Enchantment_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case Enchantment_FieldIndex.ChargeAmount:
                    this.ChargeAmount = (Exception)obj;
                    break;
                case Enchantment_FieldIndex.EnchantCost:
                    this.EnchantCost = (Exception)obj;
                    break;
                case Enchantment_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Enchantment_FieldIndex.Effects:
                    this.Effects = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>)obj;
                    break;
                case Enchantment_FieldIndex.ENITDataTypeState:
                    this.ENITDataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Type != null) return true;
            if (ChargeAmount != null) return true;
            if (EnchantCost != null) return true;
            if (Flags != null) return true;
            if (Effects != null) return true;
            if (ENITDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Enchantment_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Type => {Type}");
            fg.AppendLine($"ChargeAmount => {ChargeAmount}");
            fg.AppendLine($"EnchantCost => {EnchantCost}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Effects =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Effects.Overall != null)
                {
                    fg.AppendLine(Effects.Overall.ToString());
                }
                if (Effects.Specific != null)
                {
                    foreach (var subItem in Effects.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"ENITDataTypeState => {ENITDataTypeState}");
        }
        #endregion

        #region Combine
        public Enchantment_ErrorMask Combine(Enchantment_ErrorMask rhs)
        {
            var ret = new Enchantment_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Type = this.Type.Combine(rhs.Type);
            ret.ChargeAmount = this.ChargeAmount.Combine(rhs.ChargeAmount);
            ret.EnchantCost = this.EnchantCost.Combine(rhs.EnchantCost);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Effects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>(this.Effects.Overall.Combine(rhs.Effects.Overall), new List<MaskItem<Exception, Effect_ErrorMask>>(this.Effects.Specific.And(rhs.Effects.Specific)));
            ret.ENITDataTypeState = this.ENITDataTypeState.Combine(rhs.ENITDataTypeState);
            return ret;
        }
        public static Enchantment_ErrorMask Combine(Enchantment_ErrorMask lhs, Enchantment_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Enchantment_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Enchantment_ErrorMask();
        }
        #endregion

    }
    public class Enchantment_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Enchantment_CopyMask()
        {
        }

        public Enchantment_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Type = defaultOn;
            this.ChargeAmount = defaultOn;
            this.EnchantCost = defaultOn;
            this.Flags = defaultOn;
            this.Effects = new MaskItem<CopyOption, Effect_CopyMask>(deepCopyOption, default);
            this.ENITDataTypeState = defaultOn;
        }

        #region Members
        public bool Name;
        public bool Type;
        public bool ChargeAmount;
        public bool EnchantCost;
        public bool Flags;
        public MaskItem<CopyOption, Effect_CopyMask> Effects;
        public bool ENITDataTypeState;
        #endregion

    }

    public class Enchantment_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public bool Type;
        public bool ChargeAmount;
        public bool EnchantCost;
        public bool Flags;
        public MaskItem<bool, Effect_TranslationMask> Effects;
        public bool ENITDataTypeState;
        #endregion

        #region Ctors
        public Enchantment_TranslationMask()
            : base()
        {
        }

        public Enchantment_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Type = defaultOn;
            this.ChargeAmount = defaultOn;
            this.EnchantCost = defaultOn;
            this.Flags = defaultOn;
            this.Effects = new MaskItem<bool, Effect_TranslationMask>(defaultOn, null);
            this.ENITDataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Type, null));
            ret.Add((ChargeAmount, null));
            ret.Add((EnchantCost, null));
            ret.Add((Flags, null));
            ret.Add((Effects?.Overall ?? true, Effects?.Specific?.GetCrystal()));
            ret.Add((ENITDataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class EnchantmentBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static EnchantmentBinaryWriteTranslation Instance = new EnchantmentBinaryWriteTranslation();

        public static void Write_Embedded(
            IEnchantmentInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IEnchantmentInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Enchantment_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.ENITDataTypeState.HasFlag(Enchantment.ENITDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Enchantment_Registration.ENIT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Enchantment.EnchantmentType>.Instance.Write(
                        writer,
                        item.Type,
                        length: 4);
                    writer.Write(item.ChargeAmount);
                    writer.Write(item.EnchantCost);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Enchantment.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                }
            }
            if (item.Effects.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IEffectInternalGetter>.Instance.Write(
                    writer: writer,
                    items: item.Effects,
                    fieldIndex: (int)Enchantment_FieldIndex.Effects,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IEffectInternalGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((EffectBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IEnchantmentInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Enchantment_Registration.ENCH_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IEnchantmentInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IEnchantmentInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IEnchantmentInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class EnchantmentBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static EnchantmentBinaryCreateTranslation Instance = new EnchantmentBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class EnchantmentBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IEnchantmentInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Enchantment_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((EnchantmentBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Enchantment_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    public partial class EnchantmentBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IEnchantmentInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Enchantment_Registration.Instance;
        public new static Enchantment_Registration Registration => Enchantment_Registration.Instance;
        protected override object CommonInstance => EnchantmentCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEnchantmentInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => EnchantmentXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => EnchantmentBinaryWriteTranslation.Instance;

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        private int? _ENITLocation;
        public Enchantment.ENITDataType ENITDataTypeState { get; private set; }
        #region Type
        private int _TypeLocation => _ENITLocation.Value + 0x0;
        private bool _Type_IsSet => _ENITLocation.HasValue;
        public Enchantment.EnchantmentType Type => _Type_IsSet ? (Enchantment.EnchantmentType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TypeLocation, 4)) : default;
        #endregion
        #region ChargeAmount
        private int _ChargeAmountLocation => _ENITLocation.Value + 0x4;
        private bool _ChargeAmount_IsSet => _ENITLocation.HasValue;
        public UInt32 ChargeAmount => _ChargeAmount_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ChargeAmountLocation, 4)) : default;
        #endregion
        #region EnchantCost
        private int _EnchantCostLocation => _ENITLocation.Value + 0x8;
        private bool _EnchantCost_IsSet => _ENITLocation.HasValue;
        public UInt32 EnchantCost => _EnchantCost_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_EnchantCostLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _ENITLocation.Value + 0xC;
        private bool _Flags_IsSet => _ENITLocation.HasValue;
        public Enchantment.Flag Flags => _Flags_IsSet ? (Enchantment.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        public IReadOnlySetList<IEffectInternalGetter> Effects { get; private set; } = EmptySetList<EffectBinaryWrapper>.Instance;
        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected EnchantmentBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static EnchantmentBinaryWrapper EnchantmentFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new EnchantmentBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(stream, offset);
            UtilityTranslation.FillSubrecordTypesForWrapper(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                meta: ret._package.Meta,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int offset,
            RecordType type,
            int? lastParsed)
        {
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Name);
                }
                case 0x54494E45: // ENIT
                {
                    _ENITLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.ENITDataTypeState = Enchantment.ENITDataType.Has;
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Flags);
                }
                case 0x44494645: // EFID
                {
                    this.Effects = UtilityTranslation.ParseRepeatedTypelessSubrecord<EffectBinaryWrapper>(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null,
                        trigger: Enchantment_Registration.EFID_HEADER,
                        factory:  EffectBinaryWrapper.EffectFactory);
                    return TryGet<int?>.Succeed((int)Enchantment_FieldIndex.Effects);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
    }

    #endregion

    #endregion

}
