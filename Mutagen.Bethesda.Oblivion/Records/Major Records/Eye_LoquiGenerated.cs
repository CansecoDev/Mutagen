/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Eye : 
        MajorRecord,
        IEye,
        ILoquiObject<Eye>,
        ILoquiObjectSetter,
        INamed,
        IPropertySupporter<String>,
        IPropertySupporter<Eye.Flag>,
        IEquatable<Eye>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Eye_Registration.Instance;
        public new static Eye_Registration Registration => Eye_Registration.Instance;

        #region Ctor
        public Eye()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        protected String _Name;
        protected PropertyForwarder<Eye, String> _NameForwarder;
        public INotifyingSetItem<String> Name_Property => _NameForwarder ?? (_NameForwarder = new PropertyForwarder<Eye, String>(this, (int)Eye_FieldIndex.Name));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => this.SetName(value);
        }
        protected void SetName(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Eye_FieldIndex.Name];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Name == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Eye_FieldIndex.Name] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Name;
                _Name = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Eye_FieldIndex.Name,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Name = item;
            }
        }
        protected void UnsetName()
        {
            _hasBeenSetTracker[(int)Eye_FieldIndex.Name] = false;
            Name = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IEye.Name_Property => this.Name_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IEyeGetter.Name_Property => this.Name_Property;
        #endregion
        #region Icon
        protected String _Icon;
        protected PropertyForwarder<Eye, String> _IconForwarder;
        public INotifyingSetItem<String> Icon_Property => _IconForwarder ?? (_IconForwarder = new PropertyForwarder<Eye, String>(this, (int)Eye_FieldIndex.Icon));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => this.SetIcon(value);
        }
        protected void SetIcon(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Eye_FieldIndex.Icon];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Icon == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Eye_FieldIndex.Icon] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Icon;
                _Icon = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Eye_FieldIndex.Icon,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Icon = item;
            }
        }
        protected void UnsetIcon()
        {
            _hasBeenSetTracker[(int)Eye_FieldIndex.Icon] = false;
            Icon = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IEye.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IEyeGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region Flags
        protected Eye.Flag _Flags;
        protected PropertyForwarder<Eye, Eye.Flag> _FlagsForwarder;
        public INotifyingSetItem<Eye.Flag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<Eye, Eye.Flag>(this, (int)Eye_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Eye.Flag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            Eye.Flag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Eye_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Eye_FieldIndex.Flags] = hasBeenSet;
            }
            if (_EyeFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _EyeFlag_subscriptions.FireSubscriptions(
                    index: (int)Eye_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)Eye_FieldIndex.Flags] = false;
            Flags = default(Eye.Flag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Eye.Flag> IEye.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Eye.Flag> IEyeGetter.Flags_Property => this.Flags_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => EyeCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => EyeCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => EyeCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            EyeCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Eye>.GetEqualsMask(Eye rhs) => EyeCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IEyeGetter>.GetEqualsMask(IEyeGetter rhs) => EyeCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return EyeCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Eye_Mask<bool> printMask = null)
        {
            return EyeCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            EyeCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Eye_Mask<bool> GetHasBeenSetMask()
        {
            return EyeCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Eye rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Eye rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_Property.HasBeenSet != rhs.Name_Property.HasBeenSet) return false;
            if (Name_Property.HasBeenSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Eye Create_Xml(
            XElement root,
            Eye_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Eye Create_Xml(
            XElement root,
            out Eye_ErrorMask errorMask,
            bool doMasks = true,
            Eye_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Eye Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Eye();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Eye Create_Xml(
            string path,
            Eye_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Eye Create_Xml(
            string path,
            out Eye_ErrorMask errorMask,
            Eye_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Eye Create_Xml(
            Stream stream,
            Eye_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Eye Create_Xml(
            Stream stream,
            out Eye_ErrorMask errorMask,
            Eye_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Eye_ErrorMask errorMask,
            Eye_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Eye>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Eye_ErrorMask errorMask,
            Eye_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Eye_ErrorMask errorMask,
            Eye_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Eye_ErrorMask errorMask,
            bool doMasks = true,
            Eye_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Eye_ErrorMask errorMask,
            Eye_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Eye_ErrorMask errorMask,
            Eye_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            EyeCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Eye item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Eye_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Eye_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.UnsetIcon();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Eye_FieldIndex.Flags);
                        if (EnumXmlTranslation<Eye.Flag>.Instance.Parse(
                            root: root,
                            item: out Eye.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Eye_FieldIndex)index)
            {
                case Eye_FieldIndex.Name:
                case Eye_FieldIndex.Icon:
                case Eye_FieldIndex.Flags:
                    return _hasBeenSetTracker[index];
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter String
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected override String GetString(int index)
        {
            switch ((Eye_FieldIndex)index)
            {
                case Eye_FieldIndex.Name:
                    return Name;
                case Eye_FieldIndex.Icon:
                    return Icon;
                default:
                    return base.GetString(index: index);
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Eye_FieldIndex)index)
            {
                case Eye_FieldIndex.Name:
                    SetName(item, hasBeenSet, cmds);
                    break;
                case Eye_FieldIndex.Icon:
                    SetIcon(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetString(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Eye_FieldIndex)index)
            {
                case Eye_FieldIndex.Name:
                    SetName(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                case Eye_FieldIndex.Icon:
                    SetIcon(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    base.UnsetString(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected override String DefaultValueString(int index)
        {
            switch ((Eye_FieldIndex)index)
            {
                case Eye_FieldIndex.Name:
                case Eye_FieldIndex.Icon:
                    return default(String);
                default:
                    return base.DefaultValueString(index: index);
            }
        }

        #endregion

        #region IPropertySupporter Eye.Flag
        protected ObjectCentralizationSubscriptions<Eye.Flag> _EyeFlag_subscriptions;
        Eye.Flag IPropertySupporter<Eye.Flag>.Get(int index)
        {
            return GetEyeFlag(index: index);
        }

        protected Eye.Flag GetEyeFlag(int index)
        {
            switch ((Eye_FieldIndex)index)
            {
                case Eye_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type Eye.Flag: {index}");
            }
        }

        void IPropertySupporter<Eye.Flag>.Set(
            int index,
            Eye.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetEyeFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetEyeFlag(
            int index,
            Eye.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Eye_FieldIndex)index)
            {
                case Eye_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Eye.Flag: {index}");
            }
        }

        bool IPropertySupporter<Eye.Flag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Eye.Flag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Eye.Flag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetEyeFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetEyeFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Eye_FieldIndex)index)
            {
                case Eye_FieldIndex.Flags:
                    SetFlags(
                        item: default(Eye.Flag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Eye.Flag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Eye.Flag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Eye.Flag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_EyeFlag_subscriptions == null)
            {
                _EyeFlag_subscriptions = new ObjectCentralizationSubscriptions<Eye.Flag>();
            }
            _EyeFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Eye.Flag>.Unsubscribe(
            int index,
            object owner)
        {
            _EyeFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Eye.Flag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Eye.Flag IPropertySupporter<Eye.Flag>.DefaultValue(int index)
        {
            return DefaultValueEyeFlag(index: index);
        }

        protected Eye.Flag DefaultValueEyeFlag(int index)
        {
            switch ((Eye_FieldIndex)index)
            {
                case Eye_FieldIndex.Flags:
                    return default(Eye.Flag);
                default:
                    throw new ArgumentException($"Unknown index for field type Eye.Flag: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Eye_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Eye Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Eye Create_Binary(
            MutagenFrame frame,
            out Eye_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Eye Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Eye>(
                record: new Eye(),
                frame: frame,
                errorMask: errorMask,
                recType: Eye_Registration.EYES_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Eye Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Eye Create_Binary(
            string path,
            out Eye_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Eye Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Eye Create_Binary(
            Stream stream,
            out Eye_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Eye_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Eye_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Eye_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            EyeCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Eye item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Eye item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Eye_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Eye_FieldIndex.Name);
                case 0x4E4F4349: // ICON
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Eye_FieldIndex.Icon);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.UnsetIcon();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Eye_FieldIndex.Icon);
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Eye_FieldIndex.Flags);
                        if (EnumBinaryTranslation<Eye.Flag>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Eye.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Eye_FieldIndex.Flags);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Eye Copy(
            Eye_CopyMask copyMask = null,
            IEyeGetter def = null)
        {
            return Eye.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Eye Copy(
            IEye item,
            Eye_CopyMask copyMask = null,
            IEyeGetter def = null)
        {
            Eye ret;
            if (item.GetType().Equals(typeof(Eye)))
            {
                ret = new Eye();
            }
            else
            {
                ret = (Eye)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Eye Copy_ToLoqui(
            IEyeGetter item,
            Eye_CopyMask copyMask = null,
            IEyeGetter def = null)
        {
            Eye ret;
            if (item.GetType().Equals(typeof(Eye)))
            {
                ret = new Eye() as Eye;
            }
            else
            {
                ret = (Eye)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IEyeGetter rhs,
            Eye_CopyMask copyMask,
            IEyeGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IEyeGetter rhs,
            out Eye_ErrorMask errorMask,
            Eye_CopyMask copyMask = null,
            IEyeGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EyeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IEyeGetter rhs,
            ErrorMaskBuilder errorMask,
            Eye_CopyMask copyMask = null,
            IEyeGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            EyeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    this.SetName(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Eye_FieldIndex.Icon:
                    this.SetIcon(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Eye_FieldIndex.Flags:
                    this.SetFlags(
                        (Eye.Flag)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            EyeCommon.Clear(this, cmds);
        }


        public new static Eye Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Eye();
            foreach (var pair in fields)
            {
                CopyInInternal_Eye(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Eye(Eye obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Eye_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    obj.SetName(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Eye_FieldIndex.Icon:
                    obj.SetIcon(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Eye_FieldIndex.Flags:
                    obj.SetFlags(
                        (Eye.Flag)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Eye obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IEye : IEyeGetter, IMajorRecord, ILoquiClass<IEye, IEyeGetter>, ILoquiClass<Eye, IEyeGetter>
    {
        new String Name { get; set; }
        new INotifyingSetItem<String> Name_Property { get; }

        new String Icon { get; set; }
        new INotifyingSetItem<String> Icon_Property { get; }

        new Eye.Flag Flags { get; set; }
        new INotifyingSetItem<Eye.Flag> Flags_Property { get; }

    }

    public partial interface IEyeGetter : IMajorRecordGetter
    {
        #region Name
        String Name { get; }
        INotifyingSetItemGetter<String> Name_Property { get; }

        #endregion
        #region Icon
        String Icon { get; }
        INotifyingSetItemGetter<String> Icon_Property { get; }

        #endregion
        #region Flags
        Eye.Flag Flags { get; }
        INotifyingSetItemGetter<Eye.Flag> Flags_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Eye_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Icon = 6,
        Flags = 7,
    }
    #endregion

    #region Registration
    public class Eye_Registration : ILoquiRegistration
    {
        public static readonly Eye_Registration Instance = new Eye_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 29,
            version: 0);

        public const string GUID = "adf54439-4091-4d26-ae99-171e4b211def";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(Eye_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Eye_ErrorMask);

        public static readonly Type ClassType = typeof(Eye);

        public static readonly Type GetterType = typeof(IEyeGetter);

        public static readonly Type SetterType = typeof(IEye);

        public static readonly Type CommonType = typeof(EyeCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Eye";

        public const string Name = "Eye";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Eye_FieldIndex.Name;
                case "ICON":
                    return (ushort)Eye_FieldIndex.Icon;
                case "FLAGS":
                    return (ushort)Eye_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                case Eye_FieldIndex.Icon:
                case Eye_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                case Eye_FieldIndex.Icon:
                case Eye_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                case Eye_FieldIndex.Icon:
                case Eye_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    return "Name";
                case Eye_FieldIndex.Icon:
                    return "Icon";
                case Eye_FieldIndex.Flags:
                    return "Flags";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                case Eye_FieldIndex.Icon:
                case Eye_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                case Eye_FieldIndex.Icon:
                case Eye_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    return typeof(String);
                case Eye_FieldIndex.Icon:
                    return typeof(String);
                case Eye_FieldIndex.Flags:
                    return typeof(Eye.Flag);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = EYES_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class EyeCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IEye item,
            IEyeGetter rhs,
            IEyeGetter def,
            ErrorMaskBuilder errorMask,
            Eye_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask.PushIndex((int)Eye_FieldIndex.Name);
                try
                {
                    item.Name_Property.SetToWithDefault(
                        rhs: rhs.Name_Property,
                        def: def?.Name_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask.PushIndex((int)Eye_FieldIndex.Icon);
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)Eye_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs: rhs.Flags_Property,
                        def: def?.Flags_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IEye obj,
            NotifyingFireParameters cmds = null)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    obj.Name_Property.HasBeenSet = on;
                    break;
                case Eye_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case Eye_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IEye obj,
            NotifyingUnsetParameters cmds = null)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    obj.Name_Property.Unset(cmds);
                    break;
                case Eye_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Eye_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IEye obj)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    return obj.Name_Property.HasBeenSet;
                case Eye_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case Eye_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IEyeGetter obj)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    return obj.Name;
                case Eye_FieldIndex.Icon:
                    return obj.Icon;
                case Eye_FieldIndex.Flags:
                    return obj.Flags;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IEye item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.Flags_Property.Unset(cmds.ToUnsetParams());
        }

        public static Eye_Mask<bool> GetEqualsMask(
            this IEyeGetter item,
            IEyeGetter rhs)
        {
            var ret = new Eye_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IEyeGetter item,
            IEyeGetter rhs,
            Eye_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = item.Name_Property.Equals(rhs.Name_Property, (l, r) => object.Equals(l, r));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IEyeGetter item,
            string name = null,
            Eye_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IEyeGetter item,
            FileGeneration fg,
            string name = null,
            Eye_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Eye)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Eye)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IEyeGetter item,
            Eye_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_Property.HasBeenSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            return true;
        }

        public static Eye_Mask<bool> GetHasBeenSetMask(IEyeGetter item)
        {
            var ret = new Eye_Mask<bool>();
            ret.Name = item.Name_Property.HasBeenSet;
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.Flags = item.Flags_Property.HasBeenSet;
            return ret;
        }

        public static Eye_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Eye_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Eye_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Eye_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Eye_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Eye_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Eye_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            IEyeGetter item,
            bool doMasks,
            out Eye_ErrorMask errorMask,
            Eye_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            IEyeGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Eye");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Eye");
            }
            if (item.Name_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Eye_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name_Property,
                    fieldIndex: (int)Eye_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Icon_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Eye_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Icon),
                    item: item.Icon_Property,
                    fieldIndex: (int)Eye_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Flags_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Eye_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Eye.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags_Property,
                    fieldIndex: (int)Eye_FieldIndex.Flags,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Eye item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Eye_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Eye_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Eye item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Eye_Registration.EYES_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Eye item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name_Property,
                fieldIndex: (int)Eye_FieldIndex.Name,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Eye_Registration.FULL_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)Eye_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Eye_Registration.ICON_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Eye.Flag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: 1,
                fieldIndex: (int)Eye_FieldIndex.Flags,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Eye_Registration.DATA_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Eye_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Eye_Mask<T>>
    {
        #region Ctors
        public Eye_Mask()
        {
        }

        public Eye_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Icon = initialValue;
            this.Flags = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public T Icon;
        public T Flags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Eye_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Eye_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.Flags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Eye_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Eye_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Eye_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Icon = eval(this.Icon);
            obj.Flags = eval(this.Flags);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Eye_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Eye_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Eye_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Eye_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Eye_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Icon;
        public Exception Flags;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    return Name;
                case Eye_FieldIndex.Icon:
                    return Icon;
                case Eye_FieldIndex.Flags:
                    return Flags;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Eye_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Eye_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Eye_FieldIndex enu = (Eye_FieldIndex)index;
            switch (enu)
            {
                case Eye_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Eye_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Eye_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Icon != null) return true;
            if (Flags != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Eye_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Flags => {Flags}");
        }
        #endregion

        #region Combine
        public Eye_ErrorMask Combine(Eye_ErrorMask rhs)
        {
            var ret = new Eye_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            return ret;
        }
        public static Eye_ErrorMask Combine(Eye_ErrorMask lhs, Eye_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Eye_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Eye_ErrorMask();
        }
        #endregion

    }
    public class Eye_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Name;
        public bool Icon;
        public bool Flags;
        #endregion

    }
    public class Eye_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Name;
        public bool Icon;
        public bool Flags;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Icon, null));
            ret.Add((Flags, null));
        }
    }
    #endregion





    #endregion

}
