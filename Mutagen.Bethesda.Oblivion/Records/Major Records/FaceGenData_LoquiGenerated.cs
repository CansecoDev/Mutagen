/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class FaceGenData :
        IFaceGenData,
        ILoquiObjectSetter<FaceGenData>,
        IEquatable<FaceGenData>,
        IEqualsMask
    {
        #region Ctor
        public FaceGenData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SymmetricGeometry
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SymmetricGeometry;
        public MemorySlice<Byte>? SymmetricGeometry
        {
            get => this._SymmetricGeometry;
            set => this._SymmetricGeometry = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFaceGenDataGetter.SymmetricGeometry => this.SymmetricGeometry;
        #endregion
        #region AsymmetricGeometry
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _AsymmetricGeometry;
        public MemorySlice<Byte>? AsymmetricGeometry
        {
            get => this._AsymmetricGeometry;
            set => this._AsymmetricGeometry = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFaceGenDataGetter.AsymmetricGeometry => this.AsymmetricGeometry;
        #endregion
        #region SymmetricTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SymmetricTexture;
        public MemorySlice<Byte>? SymmetricTexture
        {
            get => this._SymmetricTexture;
            set => this._SymmetricTexture = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFaceGenDataGetter.SymmetricTexture => this.SymmetricTexture;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FaceGenDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFaceGenDataGetter rhs)) return false;
            return ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(FaceGenData obj)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => FaceGenDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FaceGenDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static FaceGenData CreateFromXml(
            XElement node,
            FaceGenData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static FaceGenData CreateFromXml(
            XElement node,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FaceGenData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static FaceGenData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new FaceGenData();
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static FaceGenData CreateFromXml(
            string path,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FaceGenData CreateFromXml(
            string path,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FaceGenData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static FaceGenData CreateFromXml(
            Stream stream,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FaceGenData CreateFromXml(
            Stream stream,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FaceGenData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SymmetricGeometry = initialValue;
                this.AsymmetricGeometry = initialValue;
                this.SymmetricTexture = initialValue;
            }

            public Mask(
                TItem SymmetricGeometry,
                TItem AsymmetricGeometry,
                TItem SymmetricTexture)
            {
                this.SymmetricGeometry = SymmetricGeometry;
                this.AsymmetricGeometry = AsymmetricGeometry;
                this.SymmetricTexture = SymmetricTexture;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem SymmetricGeometry;
            public TItem AsymmetricGeometry;
            public TItem SymmetricTexture;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SymmetricGeometry, rhs.SymmetricGeometry)) return false;
                if (!object.Equals(this.AsymmetricGeometry, rhs.AsymmetricGeometry)) return false;
                if (!object.Equals(this.SymmetricTexture, rhs.SymmetricTexture)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SymmetricGeometry);
                hash.Add(this.AsymmetricGeometry);
                hash.Add(this.SymmetricTexture);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.SymmetricGeometry)) return false;
                if (!eval(this.AsymmetricGeometry)) return false;
                if (!eval(this.SymmetricTexture)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.SymmetricGeometry)) return true;
                if (eval(this.AsymmetricGeometry)) return true;
                if (eval(this.SymmetricTexture)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FaceGenData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.SymmetricGeometry = eval(this.SymmetricGeometry);
                obj.AsymmetricGeometry = eval(this.AsymmetricGeometry);
                obj.SymmetricTexture = eval(this.SymmetricTexture);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FaceGenData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FaceGenData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FaceGenData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.SymmetricGeometry ?? true)
                    {
                        fg.AppendItem(SymmetricGeometry, "SymmetricGeometry");
                    }
                    if (printMask?.AsymmetricGeometry ?? true)
                    {
                        fg.AppendItem(AsymmetricGeometry, "AsymmetricGeometry");
                    }
                    if (printMask?.SymmetricTexture ?? true)
                    {
                        fg.AppendItem(SymmetricTexture, "SymmetricTexture");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? SymmetricGeometry;
            public Exception? AsymmetricGeometry;
            public Exception? SymmetricTexture;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
                switch (enu)
                {
                    case FaceGenData_FieldIndex.SymmetricGeometry:
                        return SymmetricGeometry;
                    case FaceGenData_FieldIndex.AsymmetricGeometry:
                        return AsymmetricGeometry;
                    case FaceGenData_FieldIndex.SymmetricTexture:
                        return SymmetricTexture;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
                switch (enu)
                {
                    case FaceGenData_FieldIndex.SymmetricGeometry:
                        this.SymmetricGeometry = ex;
                        break;
                    case FaceGenData_FieldIndex.AsymmetricGeometry:
                        this.AsymmetricGeometry = ex;
                        break;
                    case FaceGenData_FieldIndex.SymmetricTexture:
                        this.SymmetricTexture = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
                switch (enu)
                {
                    case FaceGenData_FieldIndex.SymmetricGeometry:
                        this.SymmetricGeometry = (Exception?)obj;
                        break;
                    case FaceGenData_FieldIndex.AsymmetricGeometry:
                        this.AsymmetricGeometry = (Exception?)obj;
                        break;
                    case FaceGenData_FieldIndex.SymmetricTexture:
                        this.SymmetricTexture = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SymmetricGeometry != null) return true;
                if (AsymmetricGeometry != null) return true;
                if (SymmetricTexture != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(SymmetricGeometry, "SymmetricGeometry");
                fg.AppendItem(AsymmetricGeometry, "AsymmetricGeometry");
                fg.AppendItem(SymmetricTexture, "SymmetricTexture");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SymmetricGeometry = this.SymmetricGeometry.Combine(rhs.SymmetricGeometry);
                ret.AsymmetricGeometry = this.AsymmetricGeometry.Combine(rhs.AsymmetricGeometry);
                ret.SymmetricTexture = this.SymmetricTexture.Combine(rhs.SymmetricTexture);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool SymmetricGeometry;
            public bool AsymmetricGeometry;
            public bool SymmetricTexture;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.SymmetricGeometry = defaultOn;
                this.AsymmetricGeometry = defaultOn;
                this.SymmetricTexture = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SymmetricGeometry, null));
                ret.Add((AsymmetricGeometry, null));
                ret.Add((SymmetricTexture, null));
            }
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FaceGenDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FaceGenDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static FaceGenData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static FaceGenData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FaceGenData();
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFaceGenDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static FaceGenData GetNew()
        {
            return new FaceGenData();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaceGenData :
        IFaceGenDataGetter,
        ILoquiObjectSetter<IFaceGenData>
    {
        new MemorySlice<Byte>? SymmetricGeometry { get; set; }
        new MemorySlice<Byte>? AsymmetricGeometry { get; set; }
        new MemorySlice<Byte>? SymmetricTexture { get; set; }
    }

    public partial interface IFaceGenDataGetter :
        ILoquiObject,
        ILoquiObject<IFaceGenDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => FaceGenData_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? SymmetricGeometry { get; }
        ReadOnlyMemorySlice<Byte>? AsymmetricGeometry { get; }
        ReadOnlyMemorySlice<Byte>? SymmetricTexture { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FaceGenDataMixIn
    {
        public static void Clear(this IFaceGenData item)
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FaceGenData.Mask<bool> GetEqualsMask(
            this IFaceGenDataGetter item,
            IFaceGenDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFaceGenDataGetter item,
            string? name = null,
            FaceGenData.Mask<bool>? printMask = null)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFaceGenDataGetter item,
            FileGeneration fg,
            string? name = null,
            FaceGenData.Mask<bool>? printMask = null)
        {
            ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFaceGenDataGetter item,
            FaceGenData.Mask<bool?> checkMask)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static FaceGenData.Mask<bool> GetHasBeenSetMask(this IFaceGenDataGetter item)
        {
            var ret = new FaceGenData.Mask<bool>(false);
            ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFaceGenDataGetter item,
            IFaceGenDataGetter rhs)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs)
        {
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs,
            FaceGenData.TranslationMask? copyMask = null)
        {
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = FaceGenData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static FaceGenData DeepCopy(
            this IFaceGenDataGetter item,
            FaceGenData.TranslationMask? copyMask = null)
        {
            return ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FaceGenData DeepCopy(
            this IFaceGenDataGetter item,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? copyMask = null)
        {
            return ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FaceGenData DeepCopy(
            this IFaceGenDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFaceGenData item,
            XElement node,
            FaceGenData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFaceGenData item,
            XElement node,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FaceGenData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            string path,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            string path,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            string path,
            ErrorMaskBuilder? errorMask,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            Stream stream,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            Stream stream,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceGenData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FaceGenData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFaceGenData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IFaceGenData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum FaceGenData_FieldIndex
    {
        SymmetricGeometry = 0,
        AsymmetricGeometry = 1,
        SymmetricTexture = 2,
    }
    #endregion

    #region Registration
    public partial class FaceGenData_Registration : ILoquiRegistration
    {
        public static readonly FaceGenData_Registration Instance = new FaceGenData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 38,
            version: 0);

        public const string GUID = "e43c6320-1bd4-466d-b0c0-3e30495b7e41";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(FaceGenData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FaceGenData.ErrorMask);

        public static readonly Type ClassType = typeof(FaceGenData);

        public static readonly Type GetterType = typeof(IFaceGenDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaceGenData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.FaceGenData";

        public const string Name = "FaceGenData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SYMMETRICGEOMETRY":
                    return (ushort)FaceGenData_FieldIndex.SymmetricGeometry;
                case "ASYMMETRICGEOMETRY":
                    return (ushort)FaceGenData_FieldIndex.AsymmetricGeometry;
                case "SYMMETRICTEXTURE":
                    return (ushort)FaceGenData_FieldIndex.SymmetricTexture;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                    return "SymmetricGeometry";
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                    return "AsymmetricGeometry";
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return "SymmetricTexture";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
            switch (enu)
            {
                case FaceGenData_FieldIndex.SymmetricGeometry:
                    return typeof(MemorySlice<Byte>);
                case FaceGenData_FieldIndex.AsymmetricGeometry:
                    return typeof(MemorySlice<Byte>);
                case FaceGenData_FieldIndex.SymmetricTexture:
                    return typeof(MemorySlice<Byte>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FaceGenDataXmlWriteTranslation);
        public static readonly RecordType FGGS_HEADER = new RecordType("FGGS");
        public static readonly RecordType FGGA_HEADER = new RecordType("FGGA");
        public static readonly RecordType FGTS_HEADER = new RecordType("FGTS");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FGGS_HEADER,
                        FGGA_HEADER,
                        FGTS_HEADER
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(FaceGenDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FaceGenDataSetterCommon
    {
        public static readonly FaceGenDataSetterCommon Instance = new FaceGenDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFaceGenData item)
        {
            ClearPartial();
            item.SymmetricGeometry = default;
            item.AsymmetricGeometry = default;
            item.SymmetricTexture = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IFaceGenData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FaceGenDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFaceGenData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FaceGenDataBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FaceGenDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class FaceGenDataCommon
    {
        public static readonly FaceGenDataCommon Instance = new FaceGenDataCommon();

        public FaceGenData.Mask<bool> GetEqualsMask(
            IFaceGenDataGetter item,
            IFaceGenDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FaceGenData.Mask<bool>(false);
            ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFaceGenDataGetter item,
            IFaceGenDataGetter rhs,
            FaceGenData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SymmetricGeometry = MemorySliceExt.Equal(item.SymmetricGeometry, rhs.SymmetricGeometry);
            ret.AsymmetricGeometry = MemorySliceExt.Equal(item.AsymmetricGeometry, rhs.AsymmetricGeometry);
            ret.SymmetricTexture = MemorySliceExt.Equal(item.SymmetricTexture, rhs.SymmetricTexture);
        }
        
        public string ToString(
            IFaceGenDataGetter item,
            string? name = null,
            FaceGenData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFaceGenDataGetter item,
            FileGeneration fg,
            string? name = null,
            FaceGenData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FaceGenData =>");
            }
            else
            {
                fg.AppendLine($"{name} (FaceGenData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFaceGenDataGetter item,
            FileGeneration fg,
            FaceGenData.Mask<bool>? printMask = null)
        {
            if ((printMask?.SymmetricGeometry ?? true)
                && item.SymmetricGeometry.TryGet(out var SymmetricGeometryItem))
            {
                fg.AppendLine($"SymmetricGeometry => {SpanExt.ToHexString(SymmetricGeometryItem)}");
            }
            if ((printMask?.AsymmetricGeometry ?? true)
                && item.AsymmetricGeometry.TryGet(out var AsymmetricGeometryItem))
            {
                fg.AppendLine($"AsymmetricGeometry => {SpanExt.ToHexString(AsymmetricGeometryItem)}");
            }
            if ((printMask?.SymmetricTexture ?? true)
                && item.SymmetricTexture.TryGet(out var SymmetricTextureItem))
            {
                fg.AppendLine($"SymmetricTexture => {SpanExt.ToHexString(SymmetricTextureItem)}");
            }
        }
        
        public bool HasBeenSet(
            IFaceGenDataGetter item,
            FaceGenData.Mask<bool?> checkMask)
        {
            if (checkMask.SymmetricGeometry.HasValue && checkMask.SymmetricGeometry.Value != (item.SymmetricGeometry != null)) return false;
            if (checkMask.AsymmetricGeometry.HasValue && checkMask.AsymmetricGeometry.Value != (item.AsymmetricGeometry != null)) return false;
            if (checkMask.SymmetricTexture.HasValue && checkMask.SymmetricTexture.Value != (item.SymmetricTexture != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IFaceGenDataGetter item,
            FaceGenData.Mask<bool> mask)
        {
            mask.SymmetricGeometry = (item.SymmetricGeometry != null);
            mask.AsymmetricGeometry = (item.AsymmetricGeometry != null);
            mask.SymmetricTexture = (item.SymmetricTexture != null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFaceGenDataGetter? lhs,
            IFaceGenDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!MemorySliceExt.Equal(lhs.SymmetricGeometry, rhs.SymmetricGeometry)) return false;
            if (!MemorySliceExt.Equal(lhs.AsymmetricGeometry, rhs.AsymmetricGeometry)) return false;
            if (!MemorySliceExt.Equal(lhs.SymmetricTexture, rhs.SymmetricTexture)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IFaceGenDataGetter item)
        {
            var hash = new HashCode();
            if (item.SymmetricGeometry.TryGet(out var SymmetricGeometryItem))
            {
                hash.Add(SymmetricGeometryItem);
            }
            if (item.AsymmetricGeometry.TryGet(out var AsymmetricGeometryItem))
            {
                hash.Add(AsymmetricGeometryItem);
            }
            if (item.SymmetricTexture.TryGet(out var SymmetricTextureItem))
            {
                hash.Add(SymmetricTextureItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return FaceGenData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IFaceGenDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IFaceGenDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class FaceGenDataSetterTranslationCommon
    {
        public static readonly FaceGenDataSetterTranslationCommon Instance = new FaceGenDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IFaceGenData item,
            IFaceGenDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricGeometry) ?? true))
            {
                if(rhs.SymmetricGeometry.TryGet(out var SymmetricGeometryrhs))
                {
                    item.SymmetricGeometry = SymmetricGeometryrhs.ToArray();
                }
                else
                {
                    item.SymmetricGeometry = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.AsymmetricGeometry) ?? true))
            {
                if(rhs.AsymmetricGeometry.TryGet(out var AsymmetricGeometryrhs))
                {
                    item.AsymmetricGeometry = AsymmetricGeometryrhs.ToArray();
                }
                else
                {
                    item.AsymmetricGeometry = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricTexture) ?? true))
            {
                if(rhs.SymmetricTexture.TryGet(out var SymmetricTexturerhs))
                {
                    item.SymmetricTexture = SymmetricTexturerhs.ToArray();
                }
                else
                {
                    item.SymmetricTexture = default;
                }
            }
        }
        
        #endregion
        
        public FaceGenData DeepCopy(
            IFaceGenDataGetter item,
            FaceGenData.TranslationMask? copyMask = null)
        {
            FaceGenData ret = (FaceGenData)((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public FaceGenData DeepCopy(
            IFaceGenDataGetter item,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? copyMask = null)
        {
            FaceGenData ret = (FaceGenData)((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public FaceGenData DeepCopy(
            IFaceGenDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FaceGenData ret = (FaceGenData)((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class FaceGenData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceGenData_Registration.Instance;
        public static FaceGenData_Registration Registration => FaceGenData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FaceGenDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return FaceGenDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FaceGenDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFaceGenDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFaceGenDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFaceGenDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FaceGenDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static FaceGenDataXmlWriteTranslation Instance = new FaceGenDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFaceGenDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.SymmetricGeometry != null)
                && (translationMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricGeometry) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SymmetricGeometry),
                    item: item.SymmetricGeometry.Value,
                    fieldIndex: (int)FaceGenData_FieldIndex.SymmetricGeometry,
                    errorMask: errorMask);
            }
            if ((item.AsymmetricGeometry != null)
                && (translationMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.AsymmetricGeometry) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AsymmetricGeometry),
                    item: item.AsymmetricGeometry.Value,
                    fieldIndex: (int)FaceGenData_FieldIndex.AsymmetricGeometry,
                    errorMask: errorMask);
            }
            if ((item.SymmetricTexture != null)
                && (translationMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricTexture) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SymmetricTexture),
                    item: item.SymmetricTexture.Value,
                    fieldIndex: (int)FaceGenData_FieldIndex.SymmetricTexture,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IFaceGenDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.FaceGenData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.FaceGenData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFaceGenDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IFaceGenDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IFaceGenDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class FaceGenDataXmlCreateTranslation
    {
        public readonly static FaceGenDataXmlCreateTranslation Instance = new FaceGenDataXmlCreateTranslation();

        public static void FillPublicXml(
            IFaceGenData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FaceGenDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFaceGenData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "SymmetricGeometry":
                    errorMask?.PushIndex((int)FaceGenData_FieldIndex.SymmetricGeometry);
                    try
                    {
                        item.SymmetricGeometry = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AsymmetricGeometry":
                    errorMask?.PushIndex((int)FaceGenData_FieldIndex.AsymmetricGeometry);
                    try
                    {
                        item.AsymmetricGeometry = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SymmetricTexture":
                    errorMask?.PushIndex((int)FaceGenData_FieldIndex.SymmetricTexture);
                    try
                    {
                        item.SymmetricTexture = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class FaceGenDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFaceGenDataGetter item,
            XElement node,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((FaceGenDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FaceGenData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            string path,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            Stream stream,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((FaceGenDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            XElement node,
            string? name = null,
            FaceGenData.TranslationMask? translationMask = null)
        {
            ((FaceGenDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((FaceGenDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceGenDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((FaceGenDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FaceGenDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static FaceGenDataBinaryWriteTranslation Instance = new FaceGenDataBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IFaceGenDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SymmetricGeometry,
                header: recordTypeConverter.ConvertToCustom(FaceGenData_Registration.FGGS_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AsymmetricGeometry,
                header: recordTypeConverter.ConvertToCustom(FaceGenData_Registration.FGGA_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SymmetricTexture,
                header: recordTypeConverter.ConvertToCustom(FaceGenData_Registration.FGTS_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IFaceGenDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFaceGenDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FaceGenDataBinaryCreateTranslation
    {
        public readonly static FaceGenDataBinaryCreateTranslation Instance = new FaceGenDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IFaceGenData item,
            MutagenFrame frame)
        {
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IFaceGenData item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x53474746: // FGGS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.SymmetricGeometry) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SymmetricGeometry = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.SymmetricGeometry);
                }
                case 0x41474746: // FGGA
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.AsymmetricGeometry) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AsymmetricGeometry = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.AsymmetricGeometry);
                }
                case 0x53544746: // FGTS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.SymmetricTexture) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SymmetricTexture = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.SymmetricTexture);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class FaceGenDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFaceGenDataGetter item,
            MutagenWriter writer)
        {
            ((FaceGenDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class FaceGenDataBinaryOverlay :
        BinaryOverlay,
        IFaceGenDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceGenData_Registration.Instance;
        public static FaceGenData_Registration Registration => FaceGenData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FaceGenDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FaceGenDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFaceGenDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFaceGenDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFaceGenDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFaceGenDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => FaceGenDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FaceGenDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FaceGenDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FaceGenDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region SymmetricGeometry
        private int? _SymmetricGeometryLocation;
        public ReadOnlyMemorySlice<Byte>? SymmetricGeometry => _SymmetricGeometryLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _SymmetricGeometryLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region AsymmetricGeometry
        private int? _AsymmetricGeometryLocation;
        public ReadOnlyMemorySlice<Byte>? AsymmetricGeometry => _AsymmetricGeometryLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _AsymmetricGeometryLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SymmetricTexture
        private int? _SymmetricTextureLocation;
        public ReadOnlyMemorySlice<Byte>? SymmetricTexture => _SymmetricTextureLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _SymmetricTextureLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FaceGenDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static FaceGenDataBinaryOverlay FaceGenDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FaceGenDataBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static FaceGenDataBinaryOverlay FaceGenDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return FaceGenDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x53474746: // FGGS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.SymmetricGeometry) return TryGet<int?>.Failure;
                    _SymmetricGeometryLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.SymmetricGeometry);
                }
                case 0x41474746: // FGGA
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.AsymmetricGeometry) return TryGet<int?>.Failure;
                    _AsymmetricGeometryLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.AsymmetricGeometry);
                }
                case 0x53544746: // FGTS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceGenData_FieldIndex.SymmetricTexture) return TryGet<int?>.Failure;
                    _SymmetricTextureLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)FaceGenData_FieldIndex.SymmetricTexture);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FaceGenDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

