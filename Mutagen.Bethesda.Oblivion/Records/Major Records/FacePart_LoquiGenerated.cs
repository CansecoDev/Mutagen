/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class FacePart : 
        ReactiveObject,
        IFacePart,
        ILoquiObject<FacePart>,
        ILoquiObjectSetter,
        IPropertySupporter<Race.FaceIndex>,
        IPropertySupporter<Model>,
        IPropertySupporter<String>,
        IEquatable<FacePart>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FacePart_Registration.Instance;
        public static FacePart_Registration Registration => FacePart_Registration.Instance;

        #region Ctor
        public FacePart()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        protected Race.FaceIndex _Index;
        protected PropertyForwarder<FacePart, Race.FaceIndex> _IndexForwarder;
        public INotifyingSetItem<Race.FaceIndex> Index_Property => _IndexForwarder ?? (_IndexForwarder = new PropertyForwarder<FacePart, Race.FaceIndex>(this, (int)FacePart_FieldIndex.Index));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Race.FaceIndex Index
        {
            get => this._Index;
            set => this.SetIndex(value);
        }
        protected void SetIndex(
            Race.FaceIndex item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)FacePart_FieldIndex.Index];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Index == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)FacePart_FieldIndex.Index] = hasBeenSet;
            }
            if (_RaceFaceIndex_subscriptions != null)
            {
                var tmp = Index;
                _Index = item;
                _RaceFaceIndex_subscriptions.FireSubscriptions(
                    index: (int)FacePart_FieldIndex.Index,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Index = item;
            }
        }
        protected void UnsetIndex()
        {
            _hasBeenSetTracker[(int)FacePart_FieldIndex.Index] = false;
            Index = default(Race.FaceIndex);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Race.FaceIndex> IFacePart.Index_Property => this.Index_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Race.FaceIndex> IFacePartGetter.Index_Property => this.Index_Property;
        #endregion
        #region Model
        protected Model _Model;
        protected PropertyForwarder<FacePart, Model> _ModelForwarder;
        public INotifyingSetItem<Model> Model_Property => _ModelForwarder ?? (_ModelForwarder = new PropertyForwarder<FacePart, Model>(this, (int)FacePart_FieldIndex.Model));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => this._Model;
            set => this.SetModel(value);
        }
        protected void SetModel(
            Model item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)FacePart_FieldIndex.Model];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Model, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)FacePart_FieldIndex.Model] = hasBeenSet;
            }
            if (_Model_subscriptions != null)
            {
                var tmp = Model;
                _Model = item;
                _Model_subscriptions.FireSubscriptions(
                    index: (int)FacePart_FieldIndex.Model,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Model = item;
            }
        }
        protected void UnsetModel()
        {
            _hasBeenSetTracker[(int)FacePart_FieldIndex.Model] = false;
            Model = default(Model);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IFacePart.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IFacePartGetter.Model_Property => this.Model_Property;
        #endregion
        #region Icon
        protected String _Icon;
        protected PropertyForwarder<FacePart, String> _IconForwarder;
        public INotifyingSetItem<String> Icon_Property => _IconForwarder ?? (_IconForwarder = new PropertyForwarder<FacePart, String>(this, (int)FacePart_FieldIndex.Icon));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => this.SetIcon(value);
        }
        protected void SetIcon(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)FacePart_FieldIndex.Icon];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Icon == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)FacePart_FieldIndex.Icon] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Icon;
                _Icon = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)FacePart_FieldIndex.Icon,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Icon = item;
            }
        }
        protected void UnsetIcon()
        {
            _hasBeenSetTracker[(int)FacePart_FieldIndex.Icon] = false;
            Icon = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IFacePart.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IFacePartGetter.Icon_Property => this.Icon_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => FacePartCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => FacePartCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => FacePartCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            FacePartCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<FacePart>.GetEqualsMask(FacePart rhs) => FacePartCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IFacePartGetter>.GetEqualsMask(IFacePartGetter rhs) => FacePartCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return FacePartCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            FacePart_Mask<bool> printMask = null)
        {
            return FacePartCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            FacePartCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public FacePart_Mask<bool> GetHasBeenSetMask()
        {
            return FacePartCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is FacePart rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(FacePart rhs)
        {
            if (rhs == null) return false;
            if (Index_Property.HasBeenSet != rhs.Index_Property.HasBeenSet) return false;
            if (Index_Property.HasBeenSet)
            {
                if (this.Index != rhs.Index) return false;
            }
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Index_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Index).CombineHashCode(ret);
            }
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static FacePart Create_Xml(
            XElement root,
            FacePart_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static FacePart Create_Xml(
            XElement root,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true,
            FacePart_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static FacePart Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new FacePart();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static FacePart Create_Xml(
            string path,
            FacePart_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static FacePart Create_Xml(
            string path,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FacePart Create_Xml(
            Stream stream,
            FacePart_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static FacePart Create_Xml(
            Stream stream,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<FacePart>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true,
            FacePart_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            FacePart_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            FacePartCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            FacePart item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Index":
                    try
                    {
                        errorMask?.PushIndex((int)FacePart_FieldIndex.Index);
                        if (EnumXmlTranslation<Race.FaceIndex>.Instance.Parse(
                            root: root,
                            item: out Race.FaceIndex IndexParse,
                            errorMask: errorMask))
                        {
                            item.Index = IndexParse;
                        }
                        else
                        {
                            item.UnsetIndex();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)FacePart_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FacePart_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)FacePart_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.UnsetIcon();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Model:
                case FacePart_FieldIndex.Icon:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region IPropertySupporter Race.FaceIndex
        protected ObjectCentralizationSubscriptions<Race.FaceIndex> _RaceFaceIndex_subscriptions;
        Race.FaceIndex IPropertySupporter<Race.FaceIndex>.Get(int index)
        {
            return GetRaceFaceIndex(index: index);
        }

        protected Race.FaceIndex GetRaceFaceIndex(int index)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Index:
                    return Index;
                default:
                    throw new ArgumentException($"Unknown index for field type Race.FaceIndex: {index}");
            }
        }

        void IPropertySupporter<Race.FaceIndex>.Set(
            int index,
            Race.FaceIndex item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetRaceFaceIndex(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetRaceFaceIndex(
            int index,
            Race.FaceIndex item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Index:
                    SetIndex(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Race.FaceIndex: {index}");
            }
        }

        bool IPropertySupporter<Race.FaceIndex>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Race.FaceIndex>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Race.FaceIndex>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetRaceFaceIndex(
                index: index,
                cmds: cmds);
        }

        protected void UnsetRaceFaceIndex(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Index:
                    SetIndex(
                        item: default(Race.FaceIndex),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Race.FaceIndex: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Race.FaceIndex>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Race.FaceIndex> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_RaceFaceIndex_subscriptions == null)
            {
                _RaceFaceIndex_subscriptions = new ObjectCentralizationSubscriptions<Race.FaceIndex>();
            }
            _RaceFaceIndex_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Race.FaceIndex>.Unsubscribe(
            int index,
            object owner)
        {
            _RaceFaceIndex_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Race.FaceIndex>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Race.FaceIndex IPropertySupporter<Race.FaceIndex>.DefaultValue(int index)
        {
            return DefaultValueRaceFaceIndex(index: index);
        }

        protected Race.FaceIndex DefaultValueRaceFaceIndex(int index)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Index:
                    return default(Race.FaceIndex);
                default:
                    throw new ArgumentException($"Unknown index for field type Race.FaceIndex: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Model
        protected ObjectCentralizationSubscriptions<Model> _Model_subscriptions;
        Model IPropertySupporter<Model>.Get(int index)
        {
            return GetModel(index: index);
        }

        protected Model GetModel(int index)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Model:
                    return Model;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        void IPropertySupporter<Model>.Set(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetModel(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetModel(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Model:
                    SetModel(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        bool IPropertySupporter<Model>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Model>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Model>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetModel(
                index: index,
                cmds: cmds);
        }

        protected void UnsetModel(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Model:
                    SetModel(
                        item: default(Model),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Model> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Model_subscriptions == null)
            {
                _Model_subscriptions = new ObjectCentralizationSubscriptions<Model>();
            }
            _Model_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Unsubscribe(
            int index,
            object owner)
        {
            _Model_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Model>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Model IPropertySupporter<Model>.DefaultValue(int index)
        {
            return DefaultValueModel(index: index);
        }

        protected Model DefaultValueModel(int index)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Model:
                    return default(Model);
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        #endregion

        #region IPropertySupporter String
        protected ObjectCentralizationSubscriptions<String> _String_subscriptions;
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected String GetString(int index)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Icon:
                    return Icon;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Icon:
                    SetIcon(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Icon:
                    SetIcon(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected String DefaultValueString(int index)
        {
            switch ((FacePart_FieldIndex)index)
            {
                case FacePart_FieldIndex.Icon:
                    return default(String);
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static FacePart Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static FacePart Create_Binary(
            MutagenFrame frame,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static FacePart Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new FacePart();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static FacePart Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static FacePart Create_Binary(
            string path,
            out FacePart_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static FacePart Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static FacePart Create_Binary(
            Stream stream,
            out FacePart_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out FacePart_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            FacePartCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            FacePart item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            FacePart item,
            MutagenFrame frame,
            int? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x58444E49: // INDX
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FacePart_FieldIndex.Index) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)FacePart_FieldIndex.Index);
                        if (EnumBinaryTranslation<Race.FaceIndex>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Race.FaceIndex IndexParse,
                            errorMask: errorMask))
                        {
                            item.Index = IndexParse;
                        }
                        else
                        {
                            item.UnsetIndex();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)FacePart_FieldIndex.Index);
                case 0x4C444F4D: // MODL
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FacePart_FieldIndex.Model) return TryGet<int?>.Failure;
                    try
                    {
                        errorMask?.PushIndex((int)FacePart_FieldIndex.Model);
                        if (LoquiBinaryTranslation<Model>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)FacePart_FieldIndex.Model);
                case 0x4E4F4349: // ICON
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FacePart_FieldIndex.Icon) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)FacePart_FieldIndex.Icon);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.UnsetIcon();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)FacePart_FieldIndex.Icon);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public FacePart Copy(
            FacePart_CopyMask copyMask = null,
            IFacePartGetter def = null)
        {
            return FacePart.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static FacePart Copy(
            IFacePart item,
            FacePart_CopyMask copyMask = null,
            IFacePartGetter def = null)
        {
            FacePart ret;
            if (item.GetType().Equals(typeof(FacePart)))
            {
                ret = new FacePart();
            }
            else
            {
                ret = (FacePart)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static FacePart Copy_ToLoqui(
            IFacePartGetter item,
            FacePart_CopyMask copyMask = null,
            IFacePartGetter def = null)
        {
            FacePart ret;
            if (item.GetType().Equals(typeof(FacePart)))
            {
                ret = new FacePart() as FacePart;
            }
            else
            {
                ret = (FacePart)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IFacePartGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IFacePartGetter rhs,
            FacePart_CopyMask copyMask,
            IFacePartGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IFacePartGetter rhs,
            out FacePart_ErrorMask errorMask,
            FacePart_CopyMask copyMask = null,
            IFacePartGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FacePartCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IFacePartGetter rhs,
            ErrorMaskBuilder errorMask,
            FacePart_CopyMask copyMask = null,
            IFacePartGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            FacePartCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    this.SetIndex(
                        (Race.FaceIndex)obj,
                        cmds: cmds);
                    break;
                case FacePart_FieldIndex.Model:
                    this.SetModel(
                        (Model)obj,
                        cmds: cmds);
                    break;
                case FacePart_FieldIndex.Icon:
                    this.SetIcon(
                        (String)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            FacePartCommon.Clear(this, cmds);
        }


        public static FacePart Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new FacePart();
            foreach (var pair in fields)
            {
                CopyInInternal_FacePart(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_FacePart(FacePart obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out FacePart_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    obj.SetIndex(
                        (Race.FaceIndex)pair.Value,
                        cmds: null);
                    break;
                case FacePart_FieldIndex.Model:
                    obj.SetModel(
                        (Model)pair.Value,
                        cmds: null);
                    break;
                case FacePart_FieldIndex.Icon:
                    obj.SetIcon(
                        (String)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, FacePart obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IFacePart : IFacePartGetter, ILoquiClass<IFacePart, IFacePartGetter>, ILoquiClass<FacePart, IFacePartGetter>
    {
        new Race.FaceIndex Index { get; set; }
        new INotifyingSetItem<Race.FaceIndex> Index_Property { get; }

        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new String Icon { get; set; }
        new INotifyingSetItem<String> Icon_Property { get; }

    }

    public partial interface IFacePartGetter : ILoquiObject
    {
        #region Index
        Race.FaceIndex Index { get; }
        INotifyingSetItemGetter<Race.FaceIndex> Index_Property { get; }

        #endregion
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Icon
        String Icon { get; }
        INotifyingSetItemGetter<String> Icon_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum FacePart_FieldIndex
    {
        Index = 0,
        Model = 1,
        Icon = 2,
    }
    #endregion

    #region Registration
    public class FacePart_Registration : ILoquiRegistration
    {
        public static readonly FacePart_Registration Instance = new FacePart_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 34,
            version: 0);

        public const string GUID = "82c0ca6f-0e71-4c8f-ac1c-7bf04129339a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(FacePart_Mask<>);

        public static readonly Type ErrorMaskType = typeof(FacePart_ErrorMask);

        public static readonly Type ClassType = typeof(FacePart);

        public static readonly Type GetterType = typeof(IFacePartGetter);

        public static readonly Type SetterType = typeof(IFacePart);

        public static readonly Type CommonType = typeof(FacePartCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.FacePart";

        public const string Name = "FacePart";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "INDEX":
                    return (ushort)FacePart_FieldIndex.Index;
                case "MODEL":
                    return (ushort)FacePart_FieldIndex.Model;
                case "ICON":
                    return (ushort)FacePart_FieldIndex.Icon;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Model:
                case FacePart_FieldIndex.Icon:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Model:
                    return true;
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Icon:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Model:
                case FacePart_FieldIndex.Icon:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    return "Index";
                case FacePart_FieldIndex.Model:
                    return "Model";
                case FacePart_FieldIndex.Icon:
                    return "Icon";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Model:
                case FacePart_FieldIndex.Icon:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                case FacePart_FieldIndex.Model:
                case FacePart_FieldIndex.Icon:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    return typeof(Race.FaceIndex);
                case FacePart_FieldIndex.Model:
                    return typeof(Model);
                case FacePart_FieldIndex.Icon:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        INDX_HEADER,
                        MODL_HEADER,
                        ICON_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class FacePartCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IFacePart item,
            IFacePartGetter rhs,
            IFacePartGetter def,
            ErrorMaskBuilder errorMask,
            FacePart_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Index ?? true)
            {
                errorMask?.PushIndex((int)FacePart_FieldIndex.Index);
                try
                {
                    item.Index_Property.SetToWithDefault(
                        rhs: rhs.Index_Property,
                        def: def?.Index_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)FacePart_FieldIndex.Model);
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)FacePart_FieldIndex.Icon);
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IFacePart obj,
            NotifyingFireParameters cmds = null)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    obj.Index_Property.HasBeenSet = on;
                    break;
                case FacePart_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case FacePart_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IFacePart obj,
            NotifyingUnsetParameters cmds = null)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    obj.Index_Property.Unset(cmds);
                    break;
                case FacePart_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case FacePart_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IFacePart obj)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    return obj.Index_Property.HasBeenSet;
                case FacePart_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case FacePart_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IFacePartGetter obj)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    return obj.Index;
                case FacePart_FieldIndex.Model:
                    return obj.Model;
                case FacePart_FieldIndex.Icon:
                    return obj.Icon;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IFacePart item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Index_Property.Unset(cmds.ToUnsetParams());
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
        }

        public static FacePart_Mask<bool> GetEqualsMask(
            this IFacePartGetter item,
            IFacePartGetter rhs)
        {
            var ret = new FacePart_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IFacePartGetter item,
            IFacePartGetter rhs,
            FacePart_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Index = item.Index_Property.Equals(rhs.Index_Property, (l, r) => l == r);
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
        }

        public static string ToString(
            this IFacePartGetter item,
            string name = null,
            FacePart_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IFacePartGetter item,
            FileGeneration fg,
            string name = null,
            FacePart_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(FacePart)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(FacePart)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Index ?? true)
                {
                    fg.AppendLine($"Index => {item.Index}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IFacePartGetter item,
            FacePart_Mask<bool?> checkMask)
        {
            if (checkMask.Index.HasValue && checkMask.Index.Value != item.Index_Property.HasBeenSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            return true;
        }

        public static FacePart_Mask<bool> GetHasBeenSetMask(IFacePartGetter item)
        {
            var ret = new FacePart_Mask<bool>();
            ret.Index = item.Index_Property.HasBeenSet;
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Icon = item.Icon_Property.HasBeenSet;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            FacePart item,
            bool doMasks,
            out FacePart_ErrorMask errorMask,
            FacePart_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            FacePart item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.FacePart");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.FacePart");
            }
            if (item.Index_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)FacePart_FieldIndex.Index) ?? true))
            {
                EnumXmlTranslation<Race.FaceIndex>.Instance.Write(
                    node: elem,
                    name: nameof(item.Index),
                    item: item.Index_Property,
                    fieldIndex: (int)FacePart_FieldIndex.Index,
                    errorMask: errorMask);
            }
            if (item.Model_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)FacePart_FieldIndex.Model) ?? true))
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.Model_Property,
                    name: nameof(item.Model),
                    fieldIndex: (int)FacePart_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FacePart_FieldIndex.Model));
            }
            if (item.Icon_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)FacePart_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Icon),
                    item: item.Icon_Property,
                    fieldIndex: (int)FacePart_FieldIndex.Icon,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            FacePart item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out FacePart_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = FacePart_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            FacePart item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            FacePart item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Race.FaceIndex>.Instance.Write(
                writer,
                item.Index_Property,
                length: 4,
                fieldIndex: (int)FacePart_FieldIndex.Index,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(FacePart_Registration.INDX_HEADER),
                nullable: false);
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)FacePart_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)FacePart_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(FacePart_Registration.ICON_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class FacePart_Mask<T> : IMask<T>, IEquatable<FacePart_Mask<T>>
    {
        #region Ctors
        public FacePart_Mask()
        {
        }

        public FacePart_Mask(T initialValue)
        {
            this.Index = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
        }
        #endregion

        #region Members
        public T Index;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is FacePart_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(FacePart_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Index, rhs.Index)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Index?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Index)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            return true;
        }
        #endregion

        #region Translate
        public FacePart_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new FacePart_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(FacePart_Mask<R> obj, Func<T, R> eval)
        {
            obj.Index = eval(this.Index);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(FacePart_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, FacePart_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(FacePart_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Index ?? true)
                {
                    fg.AppendLine($"Index => {Index}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class FacePart_ErrorMask : IErrorMask, IErrorMask<FacePart_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Index;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    return Index;
                case FacePart_FieldIndex.Model:
                    return Model;
                case FacePart_FieldIndex.Icon:
                    return Icon;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    this.Index = ex;
                    break;
                case FacePart_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case FacePart_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            FacePart_FieldIndex enu = (FacePart_FieldIndex)index;
            switch (enu)
            {
                case FacePart_FieldIndex.Index:
                    this.Index = (Exception)obj;
                    break;
                case FacePart_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case FacePart_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Index != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("FacePart_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Index => {Index}");
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
        }
        #endregion

        #region Combine
        public FacePart_ErrorMask Combine(FacePart_ErrorMask rhs)
        {
            var ret = new FacePart_ErrorMask();
            ret.Index = this.Index.Combine(rhs.Index);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            return ret;
        }
        public static FacePart_ErrorMask Combine(FacePart_ErrorMask lhs, FacePart_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static FacePart_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new FacePart_ErrorMask();
        }
        #endregion

    }
    public class FacePart_CopyMask
    {
        #region Members
        public bool Index;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        #endregion

    }
    public class FacePart_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Index;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Icon;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Index, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Icon, null));
        }
    }
    #endregion

    #endregion

}
