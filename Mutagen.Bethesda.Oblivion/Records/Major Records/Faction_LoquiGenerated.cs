/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Faction : 
        OblivionMajorRecord,
        IFaction,
        ILoquiObject<Faction>,
        ILoquiObjectSetter,
        INamed,
        IOwner,
        ILinkSubContainer,
        IEquatable<Faction>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static Faction_Registration Registration => Faction_Registration.Instance;

        #region Ctor
        protected Faction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Faction_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Faction_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IFactionGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IFactionGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Faction_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Relation> _Relations = new SourceSetList<Relation>();
        public ISourceSetList<Relation> Relations => _Relations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Relation> RelationsEnumerable
        {
            get => _Relations.Items;
            set => _Relations.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<Relation> IFaction.Relations => _Relations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<Relation> IFactionGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)Faction_FieldIndex.Flags];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Faction_FieldIndex.Flags, nameof(Flags_IsSet));
        }
        bool IFactionGetter.Flags_IsSet => Flags_IsSet;
        private Faction.FactionFlag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Faction.FactionFlag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        Faction.FactionFlag IFactionGetter.Flags => this.Flags;
        public void Flags_Set(
            Faction.FactionFlag value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Flags, value, _hasBeenSetTracker, markSet, (int)Faction_FieldIndex.Flags, nameof(Flags), nameof(Flags_IsSet));
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(Faction.FactionFlag), false);
        }
        #endregion
        #region CrimeGoldMultiplier
        public bool CrimeGoldMultiplier_IsSet
        {
            get => _hasBeenSetTracker[(int)Faction_FieldIndex.CrimeGoldMultiplier];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Faction_FieldIndex.CrimeGoldMultiplier, nameof(CrimeGoldMultiplier_IsSet));
        }
        bool IFactionGetter.CrimeGoldMultiplier_IsSet => CrimeGoldMultiplier_IsSet;
        private Single _CrimeGoldMultiplier;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single CrimeGoldMultiplier
        {
            get => this._CrimeGoldMultiplier;
            set => CrimeGoldMultiplier_Set(value);
        }
        Single IFactionGetter.CrimeGoldMultiplier => this.CrimeGoldMultiplier;
        public void CrimeGoldMultiplier_Set(
            Single value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _CrimeGoldMultiplier, value, _hasBeenSetTracker, markSet, (int)Faction_FieldIndex.CrimeGoldMultiplier, nameof(CrimeGoldMultiplier), nameof(CrimeGoldMultiplier_IsSet));
        }
        public void CrimeGoldMultiplier_Unset()
        {
            this.CrimeGoldMultiplier_Set(default(Single), false);
        }
        #endregion
        #region Ranks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Rank> _Ranks = new SourceSetList<Rank>();
        public ISourceSetList<Rank> Ranks => _Ranks;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Rank> RanksEnumerable
        {
            get => _Ranks.Items;
            set => _Ranks.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<Rank> IFaction.Ranks => _Ranks;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<Rank> IFactionGetter.Ranks => _Ranks;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<Faction>.GetEqualsMask(Faction rhs, EqualsMaskHelper.Include include) => FactionCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IFactionGetter>.GetEqualsMask(IFactionGetter rhs, EqualsMaskHelper.Include include) => FactionCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Faction_Mask<bool> printMask = null)
        {
            return FactionCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            FactionCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Faction_Mask<bool> GetHasBeenSetMask()
        {
            return FactionCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Faction rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Faction rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Relations.HasBeenSet != rhs.Relations.HasBeenSet) return false;
            if (Relations.HasBeenSet)
            {
                if (!this.Relations.SequenceEqual(rhs.Relations)) return false;
            }
            if (Flags_IsSet != rhs.Flags_IsSet) return false;
            if (Flags_IsSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            if (CrimeGoldMultiplier_IsSet != rhs.CrimeGoldMultiplier_IsSet) return false;
            if (CrimeGoldMultiplier_IsSet)
            {
                if (!this.CrimeGoldMultiplier.EqualsWithin(rhs.CrimeGoldMultiplier)) return false;
            }
            if (Ranks.HasBeenSet != rhs.Ranks.HasBeenSet) return false;
            if (Ranks.HasBeenSet)
            {
                if (!this.Ranks.SequenceEqual(rhs.Ranks)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Relations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Relations).CombineHashCode(ret);
            }
            if (Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (CrimeGoldMultiplier_IsSet)
            {
                ret = HashHelper.GetHashCode(CrimeGoldMultiplier).CombineHashCode(ret);
            }
            if (Ranks.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ranks).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Faction Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Faction_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Faction Create_Xml(
            XElement node,
            out Faction_ErrorMask errorMask,
            bool doMasks = true,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Faction Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Faction() : null;
                    break;
                default:
                    break;
            }
            var ret = new Faction();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    FactionCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Faction Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Faction_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Faction Create_Xml(
            string path,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Faction Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Faction Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Faction_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Faction Create_Xml(
            Stream stream,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Faction Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Faction_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Faction_ErrorMask errorMask,
            bool doMasks = true,
            Faction_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            FactionCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            Faction item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Faction_FieldIndex)index)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return _hasBeenSetTracker[index];
                case Faction_FieldIndex.Relations:
                    return Relations.HasBeenSet;
                case Faction_FieldIndex.Ranks:
                    return Ranks.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Faction_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Relations.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Relations.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        public Faction(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(Faction obj, Faction rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Faction(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Faction Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Faction Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Faction_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Faction Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Faction>(
                record: new Faction(),
                frame: frame,
                errorMask: errorMask,
                recType: Faction_Registration.FACT_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Faction_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            FactionCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Faction item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Faction item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Name);
                }
                case 0x4D414E58: // XNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Relation>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Faction_Registration.XNAM_HEADER,
                        item: item.Relations,
                        fieldIndex: (int)Faction_FieldIndex.Relations,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Relation listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Relation>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Relations);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.Flags);
                        if (EnumBinaryTranslation<Faction.FactionFlag>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Faction.FactionFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Faction.FactionFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Flags);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.CrimeGoldMultiplier);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single CrimeGoldMultiplierParse,
                            errorMask: errorMask))
                        {
                            item.CrimeGoldMultiplier = CrimeGoldMultiplierParse;
                        }
                        else
                        {
                            item.CrimeGoldMultiplier = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.CrimeGoldMultiplier);
                }
                case 0x4D414E52: // RNAM
                case 0x4D414E4D: // MNAM
                case 0x4D414E46: // FNAM
                case 0x4D414E49: // INAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Rank>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Rank_Registration.TriggeringRecordTypes,
                        item: item.Ranks,
                        fieldIndex: (int)Faction_FieldIndex.Ranks,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Rank listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Rank>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Ranks);
                }
                default:
                    return OblivionMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Faction Copy(
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null)
        {
            return Faction.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Faction Copy(
            IFaction item,
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null)
        {
            Faction ret;
            if (item.GetType().Equals(typeof(Faction)))
            {
                ret = new Faction();
            }
            else
            {
                ret = (Faction)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Faction Copy_ToLoqui(
            IFactionGetter item,
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null)
        {
            Faction ret;
            if (item.GetType().Equals(typeof(Faction)))
            {
                ret = new Faction() as Faction;
            }
            else
            {
                ret = (Faction)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IFactionGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IFactionGetter rhs,
            Faction_CopyMask copyMask,
            IFactionGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IFactionGetter rhs,
            out Faction_ErrorMask errorMask,
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FactionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IFactionGetter rhs,
            ErrorMaskBuilder errorMask,
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            FactionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Faction_FieldIndex.Relations:
                    this._Relations.SetTo((IEnumerable<Relation>)obj);
                    break;
                case Faction_FieldIndex.Flags:
                    this.Flags = (Faction.FactionFlag)obj;
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    this.CrimeGoldMultiplier = (Single)obj;
                    break;
                case Faction_FieldIndex.Ranks:
                    this._Ranks.SetTo((IEnumerable<Rank>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            FactionCommon.Clear(this, cmds);
        }


        public new static Faction Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Faction();
            foreach (var pair in fields)
            {
                CopyInInternal_Faction(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Faction(Faction obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Faction_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Faction_FieldIndex.Relations:
                    obj._Relations.SetTo((IEnumerable<Relation>)pair.Value);
                    break;
                case Faction_FieldIndex.Flags:
                    obj.Flags = (Faction.FactionFlag)pair.Value;
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    obj.CrimeGoldMultiplier = (Single)pair.Value;
                    break;
                case Faction_FieldIndex.Ranks:
                    obj._Ranks.SetTo((IEnumerable<Rank>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IFaction : IFactionGetter, IOblivionMajorRecord, ILoquiClass<IFaction, IFactionGetter>, ILoquiClass<Faction, IFactionGetter>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String item, bool hasBeenSet = true);
        void Name_Unset();

        new ISourceSetList<Relation> Relations { get; }
        new Faction.FactionFlag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(Faction.FactionFlag item, bool hasBeenSet = true);
        void Flags_Unset();

        new Single CrimeGoldMultiplier { get; set; }
        new bool CrimeGoldMultiplier_IsSet { get; set; }
        void CrimeGoldMultiplier_Set(Single item, bool hasBeenSet = true);
        void CrimeGoldMultiplier_Unset();

        new ISourceSetList<Rank> Ranks { get; }
    }

    public partial interface IFactionGetter : IOblivionMajorRecordGetter
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Relations
        IObservableSetList<Relation> Relations { get; }
        #endregion
        #region Flags
        Faction.FactionFlag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region CrimeGoldMultiplier
        Single CrimeGoldMultiplier { get; }
        bool CrimeGoldMultiplier_IsSet { get; }

        #endregion
        #region Ranks
        IObservableSetList<Rank> Ranks { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Faction_FieldIndex
    {
        FormKey = 0,
        Version = 1,
        EditorID = 2,
        RecordType = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Relations = 6,
        Flags = 7,
        CrimeGoldMultiplier = 8,
        Ranks = 9,
    }
    #endregion

    #region Registration
    public class Faction_Registration : ILoquiRegistration
    {
        public static readonly Faction_Registration Instance = new Faction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 22,
            version: 0);

        public const string GUID = "153fd2c1-b407-450e-af54-30f99328faff";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(Faction_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Faction_ErrorMask);

        public static readonly Type ClassType = typeof(Faction);

        public static readonly Type GetterType = typeof(IFactionGetter);

        public static readonly Type SetterType = typeof(IFaction);

        public static readonly Type CommonType = typeof(FactionCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Faction";

        public const string Name = "Faction";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Faction_FieldIndex.Name;
                case "RELATIONS":
                    return (ushort)Faction_FieldIndex.Relations;
                case "FLAGS":
                    return (ushort)Faction_FieldIndex.Flags;
                case "CRIMEGOLDMULTIPLIER":
                    return (ushort)Faction_FieldIndex.CrimeGoldMultiplier;
                case "RANKS":
                    return (ushort)Faction_FieldIndex.Ranks;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Ranks:
                    return true;
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Ranks:
                    return true;
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                case Faction_FieldIndex.Ranks:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    return "Name";
                case Faction_FieldIndex.Relations:
                    return "Relations";
                case Faction_FieldIndex.Flags:
                    return "Flags";
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return "CrimeGoldMultiplier";
                case Faction_FieldIndex.Ranks:
                    return "Ranks";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                case Faction_FieldIndex.Ranks:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                case Faction_FieldIndex.Ranks:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    return typeof(String);
                case Faction_FieldIndex.Relations:
                    return typeof(SourceSetList<Relation>);
                case Faction_FieldIndex.Flags:
                    return typeof(Faction.FactionFlag);
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return typeof(Single);
                case Faction_FieldIndex.Ranks:
                    return typeof(SourceSetList<Rank>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = FACT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class FactionCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IFaction item,
            IFactionGetter rhs,
            IFactionGetter def,
            ErrorMaskBuilder errorMask,
            Faction_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Relations.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                try
                {
                    item.Relations.SetToWithDefault(
                        rhs: rhs.Relations,
                        def: def?.Relations,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Relations.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return Relation.Copy(
                                        r,
                                        copyMask?.Relations?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Relations.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(Faction.FactionFlag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CrimeGoldMultiplier ?? true)
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.CrimeGoldMultiplier);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.CrimeGoldMultiplier,
                        rhsHasBeenSet: rhs.CrimeGoldMultiplier_IsSet,
                        defItem: def?.CrimeGoldMultiplier ?? default(Single),
                        defHasBeenSet: def?.CrimeGoldMultiplier_IsSet ?? false,
                        outRhsItem: out var rhsCrimeGoldMultiplierItem,
                        outDefItem: out var defCrimeGoldMultiplierItem))
                    {
                        item.CrimeGoldMultiplier = rhsCrimeGoldMultiplierItem;
                    }
                    else
                    {
                        item.CrimeGoldMultiplier_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Ranks.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Ranks);
                try
                {
                    item.Ranks.SetToWithDefault(
                        rhs: rhs.Ranks,
                        def: def?.Ranks,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Ranks.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return Rank.Copy(
                                        r,
                                        copyMask?.Ranks?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Ranks.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(
            IFaction item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Unset();
            item.Relations.Unset();
            item.Flags_Unset();
            item.CrimeGoldMultiplier_Unset();
            item.Ranks.Unset();
        }

        public static Faction_Mask<bool> GetEqualsMask(
            this IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Faction_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            Faction_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && object.Equals(item.Name, rhs.Name);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.CrimeGoldMultiplier = item.CrimeGoldMultiplier_IsSet == rhs.CrimeGoldMultiplier_IsSet && item.CrimeGoldMultiplier.EqualsWithin(rhs.CrimeGoldMultiplier);
            ret.Ranks = item.Ranks.CollectionEqualsHelper(
                rhs.Ranks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            OblivionMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IFactionGetter item,
            string name = null,
            Faction_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IFactionGetter item,
            FileGeneration fg,
            string name = null,
            Faction_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Faction)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Faction)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Relations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.CrimeGoldMultiplier ?? true)
                {
                    fg.AppendLine($"CrimeGoldMultiplier => {item.CrimeGoldMultiplier}");
                }
                if (printMask?.Ranks?.Overall ?? true)
                {
                    fg.AppendLine("Ranks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Ranks)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IFactionGetter item,
            Faction_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Relations.Overall.HasValue && checkMask.Relations.Overall.Value != item.Relations.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.CrimeGoldMultiplier.HasValue && checkMask.CrimeGoldMultiplier.Value != item.CrimeGoldMultiplier_IsSet) return false;
            if (checkMask.Ranks.Overall.HasValue && checkMask.Ranks.Overall.Value != item.Ranks.HasBeenSet) return false;
            return true;
        }

        public static Faction_Mask<bool> GetHasBeenSetMask(IFactionGetter item)
        {
            var ret = new Faction_Mask<bool>();
            ret.Name = item.Name_IsSet;
            ret.Relations = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Relation_Mask<bool>>>>(item.Relations.HasBeenSet, item.Relations.WithIndex().Select((i) => new MaskItemIndexed<bool, Relation_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            ret.Flags = item.Flags_IsSet;
            ret.CrimeGoldMultiplier = item.CrimeGoldMultiplier_IsSet;
            ret.Ranks = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Rank_Mask<bool>>>>(item.Ranks.HasBeenSet, item.Ranks.WithIndex().Select((i) => new MaskItemIndexed<bool, Rank_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        public static Faction_FieldIndex? ConvertFieldIndex(OblivionMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Faction_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Faction_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.RecordType:
                    return (Faction_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Faction_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Faction_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Faction item,
            bool doMasks,
            out Faction_ErrorMask errorMask,
            Faction_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Faction item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Faction");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Faction");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this Faction item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Faction_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Relations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                ListXmlTranslation<Relation>.Instance.Write(
                    node: node,
                    name: nameof(item.Relations),
                    item: item.Relations,
                    fieldIndex: (int)Faction_FieldIndex.Relations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.Relations),
                    transl: (XElement subNode, Relation subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Relation>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Faction.FactionFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Faction_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.CrimeGoldMultiplier_IsSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeGoldMultiplier) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CrimeGoldMultiplier),
                    item: item.CrimeGoldMultiplier,
                    fieldIndex: (int)Faction_FieldIndex.CrimeGoldMultiplier,
                    errorMask: errorMask);
            }
            if (item.Ranks.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Ranks) ?? true))
            {
                ListXmlTranslation<Rank>.Instance.Write(
                    node: node,
                    name: nameof(item.Ranks),
                    item: item.Ranks,
                    fieldIndex: (int)Faction_FieldIndex.Ranks,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.Ranks),
                    transl: (XElement subNode, Rank subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Rank>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml(
            this Faction item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FactionCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Faction item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Relations":
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                        if (ListXmlTranslation<Relation>.Instance.Parse(
                            node: node,
                            enumer: out var RelationsItem,
                            transl: LoquiXmlTranslation<Relation>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Relations.SetTo(RelationsItem);
                        }
                        else
                        {
                            item.Relations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.Flags);
                        if (EnumXmlTranslation<Faction.FactionFlag>.Instance.Parse(
                            node: node,
                            item: out Faction.FactionFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Faction.FactionFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CrimeGoldMultiplier":
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.CrimeGoldMultiplier);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single CrimeGoldMultiplierParse,
                            errorMask: errorMask))
                        {
                            item.CrimeGoldMultiplier = CrimeGoldMultiplierParse;
                        }
                        else
                        {
                            item.CrimeGoldMultiplier = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ranks":
                    try
                    {
                        errorMask?.PushIndex((int)Faction_FieldIndex.Ranks);
                        if (ListXmlTranslation<Rank>.Instance.Parse(
                            node: node,
                            enumer: out var RanksItem,
                            transl: LoquiXmlTranslation<Rank>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Ranks.SetTo(RanksItem);
                        }
                        else
                        {
                            item.Ranks.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Faction item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Faction_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Faction_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Faction item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Faction_Registration.FACT_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Faction item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    fieldIndex: (int)Faction_FieldIndex.Name,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Faction_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Relations.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<Relation>.Instance.Write(
                    writer: writer,
                    items: item.Relations,
                    fieldIndex: (int)Faction_FieldIndex.Relations,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, Relation subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<Relation>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Faction.FactionFlag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    fieldIndex: (int)Faction_FieldIndex.Flags,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Faction_Registration.DATA_HEADER),
                    nullable: false);
            }
            if (item.CrimeGoldMultiplier_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CrimeGoldMultiplier,
                    fieldIndex: (int)Faction_FieldIndex.CrimeGoldMultiplier,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Faction_Registration.CNAM_HEADER),
                    nullable: false);
            }
            if (item.Ranks.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<Rank>.Instance.Write(
                    writer: writer,
                    items: item.Ranks,
                    fieldIndex: (int)Faction_FieldIndex.Ranks,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, Rank subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<Rank>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Faction_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Faction_Mask<T>>
    {
        #region Ctors
        public Faction_Mask()
        {
        }

        public Faction_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Relations = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Relation_Mask<T>>>>(initialValue, null);
            this.Flags = initialValue;
            this.CrimeGoldMultiplier = initialValue;
            this.Ranks = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Rank_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Relation_Mask<T>>>> Relations;
        public T Flags;
        public T CrimeGoldMultiplier;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Rank_Mask<T>>>> Ranks;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Faction_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Faction_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Relations, rhs.Relations)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.CrimeGoldMultiplier, rhs.CrimeGoldMultiplier)) return false;
            if (!object.Equals(this.Ranks, rhs.Ranks)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Relations?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.CrimeGoldMultiplier?.GetHashCode());
            ret = ret.CombineHashCode(this.Ranks?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (this.Relations != null)
            {
                if (!eval(this.Relations.Overall)) return false;
                if (this.Relations.Specific != null)
                {
                    foreach (var item in this.Relations.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.CrimeGoldMultiplier)) return false;
            if (this.Ranks != null)
            {
                if (!eval(this.Ranks.Overall)) return false;
                if (this.Ranks.Specific != null)
                {
                    foreach (var item in this.Ranks.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Faction_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Faction_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Faction_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (Relations != null)
            {
                obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Relation_Mask<R>>>>();
                obj.Relations.Overall = eval(this.Relations.Overall);
                if (Relations.Specific != null)
                {
                    List<MaskItemIndexed<R, Relation_Mask<R>>> l = new List<MaskItemIndexed<R, Relation_Mask<R>>>();
                    obj.Relations.Specific = l;
                    foreach (var item in Relations.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Relation_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Relation_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Flags = eval(this.Flags);
            obj.CrimeGoldMultiplier = eval(this.CrimeGoldMultiplier);
            if (Ranks != null)
            {
                obj.Ranks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Rank_Mask<R>>>>();
                obj.Ranks.Overall = eval(this.Ranks.Overall);
                if (Ranks.Specific != null)
                {
                    List<MaskItemIndexed<R, Rank_Mask<R>>> l = new List<MaskItemIndexed<R, Rank_Mask<R>>>();
                    obj.Ranks.Specific = l;
                    foreach (var item in Ranks.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Rank_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Rank_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Relations.Specific = null;
            this.Ranks.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Faction_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Faction_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Faction_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Relations.Overall != null)
                        {
                            fg.AppendLine(Relations.Overall.ToString());
                        }
                        if (Relations.Specific != null)
                        {
                            foreach (var subItem in Relations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.CrimeGoldMultiplier ?? true)
                {
                    fg.AppendLine($"CrimeGoldMultiplier => {CrimeGoldMultiplier}");
                }
                if (printMask?.Ranks?.Overall ?? true)
                {
                    fg.AppendLine("Ranks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ranks.Overall != null)
                        {
                            fg.AppendLine(Ranks.Overall.ToString());
                        }
                        if (Ranks.Specific != null)
                        {
                            foreach (var subItem in Ranks.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Faction_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Faction_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> Relations;
        public Exception Flags;
        public Exception CrimeGoldMultiplier;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>> Ranks;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    return Name;
                case Faction_FieldIndex.Relations:
                    return Relations;
                case Faction_FieldIndex.Flags:
                    return Flags;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return CrimeGoldMultiplier;
                case Faction_FieldIndex.Ranks:
                    return Ranks;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Faction_FieldIndex.Relations:
                    this.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(ex, null);
                    break;
                case Faction_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    this.CrimeGoldMultiplier = ex;
                    break;
                case Faction_FieldIndex.Ranks:
                    this.Ranks = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Faction_FieldIndex.Relations:
                    this.Relations = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>)obj;
                    break;
                case Faction_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    this.CrimeGoldMultiplier = (Exception)obj;
                    break;
                case Faction_FieldIndex.Ranks:
                    this.Ranks = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Relations != null) return true;
            if (Flags != null) return true;
            if (CrimeGoldMultiplier != null) return true;
            if (Ranks != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Faction_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine("Relations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Relations.Overall != null)
                {
                    fg.AppendLine(Relations.Overall.ToString());
                }
                if (Relations.Specific != null)
                {
                    foreach (var subItem in Relations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"CrimeGoldMultiplier => {CrimeGoldMultiplier}");
            fg.AppendLine("Ranks =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Ranks.Overall != null)
                {
                    fg.AppendLine(Ranks.Overall.ToString());
                }
                if (Ranks.Specific != null)
                {
                    foreach (var subItem in Ranks.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Faction_ErrorMask Combine(Faction_ErrorMask rhs)
        {
            var ret = new Faction_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(this.Relations.Overall.Combine(rhs.Relations.Overall), new List<MaskItem<Exception, Relation_ErrorMask>>(this.Relations.Specific.And(rhs.Relations.Specific)));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.CrimeGoldMultiplier = this.CrimeGoldMultiplier.Combine(rhs.CrimeGoldMultiplier);
            ret.Ranks = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>>(this.Ranks.Overall.Combine(rhs.Ranks.Overall), new List<MaskItem<Exception, Rank_ErrorMask>>(this.Ranks.Specific.And(rhs.Ranks.Specific)));
            return ret;
        }
        public static Faction_ErrorMask Combine(Faction_ErrorMask lhs, Faction_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Faction_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Faction_ErrorMask();
        }
        #endregion

    }
    public class Faction_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Faction_CopyMask()
        {
        }

        public Faction_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Relations = new MaskItem<CopyOption, Relation_CopyMask>(deepCopyOption, default);
            this.Flags = defaultOn;
            this.CrimeGoldMultiplier = defaultOn;
            this.Ranks = new MaskItem<CopyOption, Rank_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool Name;
        public MaskItem<CopyOption, Relation_CopyMask> Relations;
        public bool Flags;
        public bool CrimeGoldMultiplier;
        public MaskItem<CopyOption, Rank_CopyMask> Ranks;
        #endregion

    }

    public class Faction_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Relation_TranslationMask> Relations;
        public bool Flags;
        public bool CrimeGoldMultiplier;
        public MaskItem<bool, Rank_TranslationMask> Ranks;
        #endregion

        #region Ctors
        public Faction_TranslationMask()
            : base()
        {
        }

        public Faction_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Relations = new MaskItem<bool, Relation_TranslationMask>(defaultOn, null);
            this.Flags = defaultOn;
            this.CrimeGoldMultiplier = defaultOn;
            this.Ranks = new MaskItem<bool, Rank_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Relations?.Overall ?? true, Relations?.Specific?.GetCrystal()));
            ret.Add((Flags, null));
            ret.Add((CrimeGoldMultiplier, null));
            ret.Add((Ranks?.Overall ?? true, Ranks?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
