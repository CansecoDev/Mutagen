/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Flora : 
        MajorRecord,
        IFlora,
        ILoquiObject<Flora>,
        ILoquiObjectSetter,
        INamed,
        IPropertySupporter<String>,
        IPropertySupporter<Model>,
        IPropertySupporter<Byte>,
        IEquatable<Flora>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Flora_Registration.Instance;
        public new static Flora_Registration Registration => Flora_Registration.Instance;

        #region Ctor
        public Flora()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        protected String _Name;
        protected PropertyForwarder<Flora, String> _NameForwarder;
        public INotifyingSetItem<String> Name_Property => _NameForwarder ?? (_NameForwarder = new PropertyForwarder<Flora, String>(this, (int)Flora_FieldIndex.Name));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => this.SetName(value);
        }
        protected void SetName(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Flora_FieldIndex.Name];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Name == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Flora_FieldIndex.Name] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Name;
                _Name = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Flora_FieldIndex.Name,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Name = item;
            }
        }
        protected void UnsetName()
        {
            _hasBeenSetTracker[(int)Flora_FieldIndex.Name] = false;
            Name = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IFlora.Name_Property => this.Name_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IFloraGetter.Name_Property => this.Name_Property;
        #endregion
        #region Model
        protected Model _Model;
        protected PropertyForwarder<Flora, Model> _ModelForwarder;
        public INotifyingSetItem<Model> Model_Property => _ModelForwarder ?? (_ModelForwarder = new PropertyForwarder<Flora, Model>(this, (int)Flora_FieldIndex.Model));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => this._Model;
            set => this.SetModel(value);
        }
        protected void SetModel(
            Model item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Flora_FieldIndex.Model];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Model, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Flora_FieldIndex.Model] = hasBeenSet;
            }
            if (_Model_subscriptions != null)
            {
                var tmp = Model;
                _Model = item;
                _Model_subscriptions.FireSubscriptions(
                    index: (int)Flora_FieldIndex.Model,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Model = item;
            }
        }
        protected void UnsetModel()
        {
            _hasBeenSetTracker[(int)Flora_FieldIndex.Model] = false;
            Model = default(Model);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IFlora.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IFloraGetter.Model_Property => this.Model_Property;
        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> IFloraGetter.Script_Property => this.Script_Property;
        #endregion
        #region Ingredient
        public FormIDSetLink<Ingredient> Ingredient_Property { get; } = new FormIDSetLink<Ingredient>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Ingredient Ingredient { get => Ingredient_Property.Item; set => Ingredient_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Ingredient> IFloraGetter.Ingredient_Property => this.Ingredient_Property;
        #endregion
        #region Spring
        protected Byte _Spring;
        protected PropertyForwarder<Flora, Byte> _SpringForwarder;
        public INotifyingSetItem<Byte> Spring_Property => _SpringForwarder ?? (_SpringForwarder = new PropertyForwarder<Flora, Byte>(this, (int)Flora_FieldIndex.Spring));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Spring
        {
            get => this._Spring;
            set => this.SetSpring(value);
        }
        protected void SetSpring(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Flora_FieldIndex.Spring];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Spring == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Flora_FieldIndex.Spring] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Spring;
                _Spring = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Flora_FieldIndex.Spring,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Spring = item;
            }
        }
        protected void UnsetSpring()
        {
            _hasBeenSetTracker[(int)Flora_FieldIndex.Spring] = false;
            Spring = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IFlora.Spring_Property => this.Spring_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IFloraGetter.Spring_Property => this.Spring_Property;
        #endregion
        #region Summer
        protected Byte _Summer;
        protected PropertyForwarder<Flora, Byte> _SummerForwarder;
        public INotifyingSetItem<Byte> Summer_Property => _SummerForwarder ?? (_SummerForwarder = new PropertyForwarder<Flora, Byte>(this, (int)Flora_FieldIndex.Summer));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Summer
        {
            get => this._Summer;
            set => this.SetSummer(value);
        }
        protected void SetSummer(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Flora_FieldIndex.Summer];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Summer == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Flora_FieldIndex.Summer] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Summer;
                _Summer = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Flora_FieldIndex.Summer,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Summer = item;
            }
        }
        protected void UnsetSummer()
        {
            _hasBeenSetTracker[(int)Flora_FieldIndex.Summer] = false;
            Summer = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IFlora.Summer_Property => this.Summer_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IFloraGetter.Summer_Property => this.Summer_Property;
        #endregion
        #region Fall
        protected Byte _Fall;
        protected PropertyForwarder<Flora, Byte> _FallForwarder;
        public INotifyingSetItem<Byte> Fall_Property => _FallForwarder ?? (_FallForwarder = new PropertyForwarder<Flora, Byte>(this, (int)Flora_FieldIndex.Fall));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Fall
        {
            get => this._Fall;
            set => this.SetFall(value);
        }
        protected void SetFall(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Flora_FieldIndex.Fall];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Fall == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Flora_FieldIndex.Fall] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Fall;
                _Fall = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Flora_FieldIndex.Fall,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Fall = item;
            }
        }
        protected void UnsetFall()
        {
            _hasBeenSetTracker[(int)Flora_FieldIndex.Fall] = false;
            Fall = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IFlora.Fall_Property => this.Fall_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IFloraGetter.Fall_Property => this.Fall_Property;
        #endregion
        #region Winter
        protected Byte _Winter;
        protected PropertyForwarder<Flora, Byte> _WinterForwarder;
        public INotifyingSetItem<Byte> Winter_Property => _WinterForwarder ?? (_WinterForwarder = new PropertyForwarder<Flora, Byte>(this, (int)Flora_FieldIndex.Winter));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Winter
        {
            get => this._Winter;
            set => this.SetWinter(value);
        }
        protected void SetWinter(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Flora_FieldIndex.Winter];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Winter == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Flora_FieldIndex.Winter] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Winter;
                _Winter = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Flora_FieldIndex.Winter,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Winter = item;
            }
        }
        protected void UnsetWinter()
        {
            _hasBeenSetTracker[(int)Flora_FieldIndex.Winter] = false;
            Winter = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IFlora.Winter_Property => this.Winter_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IFloraGetter.Winter_Property => this.Winter_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => FloraCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => FloraCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => FloraCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            FloraCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Flora>.GetEqualsMask(Flora rhs) => FloraCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IFloraGetter>.GetEqualsMask(IFloraGetter rhs) => FloraCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return FloraCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Flora_Mask<bool> printMask = null)
        {
            return FloraCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            FloraCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Flora_Mask<bool> GetHasBeenSetMask()
        {
            return FloraCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Flora rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Flora rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_Property.HasBeenSet != rhs.Name_Property.HasBeenSet) return false;
            if (Name_Property.HasBeenSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (Ingredient_Property.HasBeenSet != rhs.Ingredient_Property.HasBeenSet) return false;
            if (Ingredient_Property.HasBeenSet)
            {
                if (!this.Ingredient_Property.Equals(rhs.Ingredient_Property)) return false;
            }
            if (this.Spring != rhs.Spring) return false;
            if (this.Summer != rhs.Summer) return false;
            if (this.Fall != rhs.Fall) return false;
            if (this.Winter != rhs.Winter) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Ingredient_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ingredient).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Spring).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Summer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fall).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Winter).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Flora Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Flora Create_XML(
            XElement root,
            out Flora_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Flora Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Flora();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Flora Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Flora Create_XML(
            string path,
            out Flora_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Flora Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Flora Create_XML(
            Stream stream,
            out Flora_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Flora>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Flora_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<Flora>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Flora_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Flora_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Flora_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Flora_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out Flora_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Flora_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            FloraCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            Flora item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Flora_FieldIndex.Script,
                        item: item.Script_Property,
                        errorMask: errorMask);
                    break;
                case "Ingredient":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)Flora_FieldIndex.Ingredient,
                        item: item.Ingredient_Property,
                        errorMask: errorMask);
                    break;
                case "Spring":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Spring);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte SpringParse,
                            errorMask: errorMask))
                        {
                            item.Spring = SpringParse;
                        }
                        else
                        {
                            item.UnsetSpring();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Summer":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Summer);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte SummerParse,
                            errorMask: errorMask))
                        {
                            item.Summer = SummerParse;
                        }
                        else
                        {
                            item.UnsetSummer();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fall":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Fall);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte FallParse,
                            errorMask: errorMask))
                        {
                            item.Fall = FallParse;
                        }
                        else
                        {
                            item.UnsetFall();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Winter":
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Winter);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte WinterParse,
                            errorMask: errorMask))
                        {
                            item.Winter = WinterParse;
                        }
                        else
                        {
                            item.UnsetWinter();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case Flora_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case Flora_FieldIndex.Ingredient:
                    return Ingredient_Property.HasBeenSet;
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter String
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected override String GetString(int index)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Name:
                    return Name;
                default:
                    return base.GetString(index: index);
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Name:
                    SetName(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetString(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Name:
                    SetName(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    base.UnsetString(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected override String DefaultValueString(int index)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Name:
                    return default(String);
                default:
                    return base.DefaultValueString(index: index);
            }
        }

        #endregion

        #region IPropertySupporter Model
        protected ObjectCentralizationSubscriptions<Model> _Model_subscriptions;
        Model IPropertySupporter<Model>.Get(int index)
        {
            return GetModel(index: index);
        }

        protected Model GetModel(int index)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Model:
                    return Model;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        void IPropertySupporter<Model>.Set(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetModel(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetModel(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Model:
                    SetModel(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        bool IPropertySupporter<Model>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Model>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Model>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetModel(
                index: index,
                cmds: cmds);
        }

        protected void UnsetModel(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Model:
                    SetModel(
                        item: default(Model),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Model> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Model_subscriptions == null)
            {
                _Model_subscriptions = new ObjectCentralizationSubscriptions<Model>();
            }
            _Model_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Unsubscribe(
            int index,
            object owner)
        {
            _Model_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Model>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Model IPropertySupporter<Model>.DefaultValue(int index)
        {
            return DefaultValueModel(index: index);
        }

        protected Model DefaultValueModel(int index)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Model:
                    return default(Model);
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte
        protected ObjectCentralizationSubscriptions<Byte> _Byte_subscriptions;
        Byte IPropertySupporter<Byte>.Get(int index)
        {
            return GetByte(index: index);
        }

        protected Byte GetByte(int index)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Spring:
                    return Spring;
                case Flora_FieldIndex.Summer:
                    return Summer;
                case Flora_FieldIndex.Fall:
                    return Fall;
                case Flora_FieldIndex.Winter:
                    return Winter;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        void IPropertySupporter<Byte>.Set(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByte(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByte(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Spring:
                    SetSpring(item, hasBeenSet, cmds);
                    break;
                case Flora_FieldIndex.Summer:
                    SetSummer(item, hasBeenSet, cmds);
                    break;
                case Flora_FieldIndex.Fall:
                    SetFall(item, hasBeenSet, cmds);
                    break;
                case Flora_FieldIndex.Winter:
                    SetWinter(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        bool IPropertySupporter<Byte>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByte(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByte(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Spring:
                    SetSpring(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Flora_FieldIndex.Summer:
                    SetSummer(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Flora_FieldIndex.Fall:
                    SetFall(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Flora_FieldIndex.Winter:
                    SetWinter(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Byte_subscriptions == null)
            {
                _Byte_subscriptions = new ObjectCentralizationSubscriptions<Byte>();
            }
            _Byte_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Unsubscribe(
            int index,
            object owner)
        {
            _Byte_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte IPropertySupporter<Byte>.DefaultValue(int index)
        {
            return DefaultValueByte(index: index);
        }

        protected Byte DefaultValueByte(int index)
        {
            switch ((Flora_FieldIndex)index)
            {
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                    return default(Byte);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Flora_Registration.TRIGGERING_RECORD_TYPE;
        public PFPCDataType PFPCDataTypeState;
        [Flags]
        public enum PFPCDataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            yield return Ingredient_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Flora Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Flora Create_Binary(
            MutagenFrame frame,
            out Flora_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Flora Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Flora>(
                record: new Flora(),
                frame: frame,
                errorMask: errorMask,
                recType: Flora_Registration.FLOR_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Flora Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Flora Create_Binary(
            string path,
            out Flora_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Flora Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Flora Create_Binary(
            Stream stream,
            out Flora_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Flora_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Flora_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Flora_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            FloraCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Flora item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Flora item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Name);
                case 0x4C444F4D: // MODL
                    try
                    {
                        errorMask?.PushIndex((int)Flora_FieldIndex.Model);
                        if (LoquiBinaryTranslation<Model>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Model);
                case 0x49524353: // SCRI
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Flora_FieldIndex.Script,
                        item: item.Script_Property,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Script);
                case 0x47494650: // PFIG
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Flora_FieldIndex.Ingredient,
                        item: item.Ingredient_Property,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Ingredient);
                case 0x43504650: // PFPC
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.PFPCDataTypeState = PFPCDataType.Has;
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Flora_FieldIndex.Spring);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte SpringParse,
                                errorMask: errorMask))
                            {
                                item.Spring = SpringParse;
                            }
                            else
                            {
                                item.UnsetSpring();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Flora_FieldIndex.Summer);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte SummerParse,
                                errorMask: errorMask))
                            {
                                item.Summer = SummerParse;
                            }
                            else
                            {
                                item.UnsetSummer();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Flora_FieldIndex.Fall);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte FallParse,
                                errorMask: errorMask))
                            {
                                item.Fall = FallParse;
                            }
                            else
                            {
                                item.UnsetFall();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Flora_FieldIndex.Winter);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte WinterParse,
                                errorMask: errorMask))
                            {
                                item.Winter = WinterParse;
                            }
                            else
                            {
                                item.UnsetWinter();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Flora_FieldIndex.Winter);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Flora Copy(
            Flora_CopyMask copyMask = null,
            IFloraGetter def = null)
        {
            return Flora.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Flora Copy(
            IFlora item,
            Flora_CopyMask copyMask = null,
            IFloraGetter def = null)
        {
            Flora ret;
            if (item.GetType().Equals(typeof(Flora)))
            {
                ret = new Flora();
            }
            else
            {
                ret = (Flora)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Flora Copy_ToLoqui(
            IFloraGetter item,
            Flora_CopyMask copyMask = null,
            IFloraGetter def = null)
        {
            Flora ret;
            if (item.GetType().Equals(typeof(Flora)))
            {
                ret = new Flora() as Flora;
            }
            else
            {
                ret = (Flora)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IFloraGetter rhs,
            Flora_CopyMask copyMask,
            IFloraGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IFloraGetter rhs,
            out Flora_ErrorMask errorMask,
            Flora_CopyMask copyMask = null,
            IFloraGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FloraCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IFloraGetter rhs,
            ErrorMaskBuilder errorMask,
            Flora_CopyMask copyMask = null,
            IFloraGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            FloraCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    this.SetName(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Flora_FieldIndex.Model:
                    this.SetModel(
                        (Model)obj,
                        cmds: cmds);
                    break;
                case Flora_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case Flora_FieldIndex.Ingredient:
                    this.Ingredient_Property.Set(
                        (FormIDSetLink<Ingredient>)obj,
                        cmds);
                    break;
                case Flora_FieldIndex.Spring:
                    this.SetSpring(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Flora_FieldIndex.Summer:
                    this.SetSummer(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Flora_FieldIndex.Fall:
                    this.SetFall(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Flora_FieldIndex.Winter:
                    this.SetWinter(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            FloraCommon.Clear(this, cmds);
        }


        public new static Flora Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Flora();
            foreach (var pair in fields)
            {
                CopyInInternal_Flora(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Flora(Flora obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Flora_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    obj.SetName(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Flora_FieldIndex.Model:
                    obj.SetModel(
                        (Model)pair.Value,
                        cmds: null);
                    break;
                case Flora_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case Flora_FieldIndex.Ingredient:
                    obj.Ingredient_Property.Set(
                        (FormIDSetLink<Ingredient>)pair.Value,
                        null);
                    break;
                case Flora_FieldIndex.Spring:
                    obj.SetSpring(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Flora_FieldIndex.Summer:
                    obj.SetSummer(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Flora_FieldIndex.Fall:
                    obj.SetFall(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Flora_FieldIndex.Winter:
                    obj.SetWinter(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Flora obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IFlora : IFloraGetter, IMajorRecord, ILoquiClass<IFlora, IFloraGetter>, ILoquiClass<Flora, IFloraGetter>
    {
        new String Name { get; set; }
        new INotifyingSetItem<String> Name_Property { get; }

        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new Script Script { get; set; }
        new Ingredient Ingredient { get; set; }
        new Byte Spring { get; set; }
        new INotifyingItem<Byte> Spring_Property { get; }

        new Byte Summer { get; set; }
        new INotifyingItem<Byte> Summer_Property { get; }

        new Byte Fall { get; set; }
        new INotifyingItem<Byte> Fall_Property { get; }

        new Byte Winter { get; set; }
        new INotifyingItem<Byte> Winter_Property { get; }

    }

    public partial interface IFloraGetter : IMajorRecordGetter
    {
        #region Name
        String Name { get; }
        INotifyingSetItemGetter<String> Name_Property { get; }

        #endregion
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Ingredient
        Ingredient Ingredient { get; }
        FormIDSetLink<Ingredient> Ingredient_Property { get; }

        #endregion
        #region Spring
        Byte Spring { get; }
        INotifyingItemGetter<Byte> Spring_Property { get; }

        #endregion
        #region Summer
        Byte Summer { get; }
        INotifyingItemGetter<Byte> Summer_Property { get; }

        #endregion
        #region Fall
        Byte Fall { get; }
        INotifyingItemGetter<Byte> Fall_Property { get; }

        #endregion
        #region Winter
        Byte Winter { get; }
        INotifyingItemGetter<Byte> Winter_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Flora_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Model = 6,
        Script = 7,
        Ingredient = 8,
        Spring = 9,
        Summer = 10,
        Fall = 11,
        Winter = 12,
    }
    #endregion

    #region Registration
    public class Flora_Registration : ILoquiRegistration
    {
        public static readonly Flora_Registration Instance = new Flora_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 80,
            version: 0);

        public const string GUID = "5cc7a37a-95ea-4486-8c4c-02c55c3a4566";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(Flora_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Flora_ErrorMask);

        public static readonly Type ClassType = typeof(Flora);

        public static readonly Type GetterType = typeof(IFloraGetter);

        public static readonly Type SetterType = typeof(IFlora);

        public static readonly Type CommonType = typeof(FloraCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Flora";

        public const string Name = "Flora";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Flora_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Flora_FieldIndex.Model;
                case "SCRIPT":
                    return (ushort)Flora_FieldIndex.Script;
                case "INGREDIENT":
                    return (ushort)Flora_FieldIndex.Ingredient;
                case "SPRING":
                    return (ushort)Flora_FieldIndex.Spring;
                case "SUMMER":
                    return (ushort)Flora_FieldIndex.Summer;
                case "FALL":
                    return (ushort)Flora_FieldIndex.Fall;
                case "WINTER":
                    return (ushort)Flora_FieldIndex.Winter;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Model:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Model:
                    return true;
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Model:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    return "Name";
                case Flora_FieldIndex.Model:
                    return "Model";
                case Flora_FieldIndex.Script:
                    return "Script";
                case Flora_FieldIndex.Ingredient:
                    return "Ingredient";
                case Flora_FieldIndex.Spring:
                    return "Spring";
                case Flora_FieldIndex.Summer:
                    return "Summer";
                case Flora_FieldIndex.Fall:
                    return "Fall";
                case Flora_FieldIndex.Winter:
                    return "Winter";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Model:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                case Flora_FieldIndex.Model:
                case Flora_FieldIndex.Script:
                case Flora_FieldIndex.Ingredient:
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    return typeof(String);
                case Flora_FieldIndex.Model:
                    return typeof(Model);
                case Flora_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case Flora_FieldIndex.Ingredient:
                    return typeof(FormIDSetLink<Ingredient>);
                case Flora_FieldIndex.Spring:
                    return typeof(Byte);
                case Flora_FieldIndex.Summer:
                    return typeof(Byte);
                case Flora_FieldIndex.Fall:
                    return typeof(Byte);
                case Flora_FieldIndex.Winter:
                    return typeof(Byte);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType PFIG_HEADER = new RecordType("PFIG");
        public static readonly RecordType PFPC_HEADER = new RecordType("PFPC");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = FLOR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class FloraCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IFlora item,
            IFloraGetter rhs,
            IFloraGetter def,
            ErrorMaskBuilder errorMask,
            Flora_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask.PushIndex((int)Flora_FieldIndex.Name);
                try
                {
                    item.Name_Property.SetToWithDefault(
                        rhs: rhs.Name_Property,
                        def: def?.Name_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Flora_FieldIndex.Model);
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask.PushIndex((int)Flora_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Ingredient ?? true)
            {
                errorMask.PushIndex((int)Flora_FieldIndex.Ingredient);
                try
                {
                    item.Ingredient_Property.SetToWithDefault(
                        rhs: rhs.Ingredient_Property,
                        def: def?.Ingredient_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Spring ?? true)
            {
                errorMask.PushIndex((int)Flora_FieldIndex.Spring);
                try
                {
                    item.Spring_Property.Set(
                        value: rhs.Spring,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Summer ?? true)
            {
                errorMask.PushIndex((int)Flora_FieldIndex.Summer);
                try
                {
                    item.Summer_Property.Set(
                        value: rhs.Summer,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Fall ?? true)
            {
                errorMask.PushIndex((int)Flora_FieldIndex.Fall);
                try
                {
                    item.Fall_Property.Set(
                        value: rhs.Fall,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Winter ?? true)
            {
                errorMask.PushIndex((int)Flora_FieldIndex.Winter);
                try
                {
                    item.Winter_Property.Set(
                        value: rhs.Winter,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IFlora obj,
            NotifyingFireParameters cmds = null)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Flora_FieldIndex.Name:
                    obj.Name_Property.HasBeenSet = on;
                    break;
                case Flora_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case Flora_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case Flora_FieldIndex.Ingredient:
                    obj.Ingredient_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IFlora obj,
            NotifyingUnsetParameters cmds = null)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    obj.Name_Property.Unset(cmds);
                    break;
                case Flora_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Flora_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case Flora_FieldIndex.Ingredient:
                    obj.Ingredient_Property.Unset(cmds);
                    break;
                case Flora_FieldIndex.Spring:
                    obj.Spring = default(Byte);
                    break;
                case Flora_FieldIndex.Summer:
                    obj.Summer = default(Byte);
                    break;
                case Flora_FieldIndex.Fall:
                    obj.Fall = default(Byte);
                    break;
                case Flora_FieldIndex.Winter:
                    obj.Winter = default(Byte);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IFlora obj)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Spring:
                case Flora_FieldIndex.Summer:
                case Flora_FieldIndex.Fall:
                case Flora_FieldIndex.Winter:
                    return true;
                case Flora_FieldIndex.Name:
                    return obj.Name_Property.HasBeenSet;
                case Flora_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case Flora_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case Flora_FieldIndex.Ingredient:
                    return obj.Ingredient_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IFloraGetter obj)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    return obj.Name;
                case Flora_FieldIndex.Model:
                    return obj.Model;
                case Flora_FieldIndex.Script:
                    return obj.Script;
                case Flora_FieldIndex.Ingredient:
                    return obj.Ingredient;
                case Flora_FieldIndex.Spring:
                    return obj.Spring;
                case Flora_FieldIndex.Summer:
                    return obj.Summer;
                case Flora_FieldIndex.Fall:
                    return obj.Fall;
                case Flora_FieldIndex.Winter:
                    return obj.Winter;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IFlora item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Property.Unset(cmds.ToUnsetParams());
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Ingredient_Property.Unset(cmds.ToUnsetParams());
            item.Spring = default(Byte);
            item.Summer = default(Byte);
            item.Fall = default(Byte);
            item.Winter = default(Byte);
        }

        public static Flora_Mask<bool> GetEqualsMask(
            this IFloraGetter item,
            IFloraGetter rhs)
        {
            var ret = new Flora_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IFloraGetter item,
            IFloraGetter rhs,
            Flora_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = item.Name_Property.Equals(rhs.Name_Property, (l, r) => object.Equals(l, r));
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.Ingredient = item.Ingredient_Property.Equals(rhs.Ingredient_Property, (l, r) => l == r);
            ret.Spring = item.Spring == rhs.Spring;
            ret.Summer = item.Summer == rhs.Summer;
            ret.Fall = item.Fall == rhs.Fall;
            ret.Winter = item.Winter == rhs.Winter;
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IFloraGetter item,
            string name = null,
            Flora_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IFloraGetter item,
            FileGeneration fg,
            string name = null,
            Flora_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Flora)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Flora)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.Ingredient ?? true)
                {
                    fg.AppendLine($"Ingredient => {item.Ingredient_Property}");
                }
                if (printMask?.Spring ?? true)
                {
                    fg.AppendLine($"Spring => {item.Spring}");
                }
                if (printMask?.Summer ?? true)
                {
                    fg.AppendLine($"Summer => {item.Summer}");
                }
                if (printMask?.Fall ?? true)
                {
                    fg.AppendLine($"Fall => {item.Fall}");
                }
                if (printMask?.Winter ?? true)
                {
                    fg.AppendLine($"Winter => {item.Winter}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IFloraGetter item,
            Flora_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_Property.HasBeenSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Ingredient.HasValue && checkMask.Ingredient.Value != item.Ingredient_Property.HasBeenSet) return false;
            return true;
        }

        public static Flora_Mask<bool> GetHasBeenSetMask(IFloraGetter item)
        {
            var ret = new Flora_Mask<bool>();
            ret.Name = item.Name_Property.HasBeenSet;
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Ingredient = item.Ingredient_Property.HasBeenSet;
            ret.Spring = true;
            ret.Summer = true;
            ret.Fall = true;
            ret.Winter = true;
            return ret;
        }

        public static Flora_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Flora_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Flora_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Flora_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Flora_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Flora_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Flora_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IFloraGetter item,
            bool doMasks,
            out Flora_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IFloraGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Flora");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Flora");
            }
            if (item.Name_Property.HasBeenSet)
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name_Property,
                    fieldIndex: (int)Flora_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_Property.HasBeenSet)
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.Model_Property,
                    name: nameof(item.Model),
                    fieldIndex: (int)Flora_FieldIndex.Model,
                    errorMask: errorMask);
            }
            if (item.Script_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Script),
                    item: item.Script?.FormID,
                    fieldIndex: (int)Flora_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Ingredient_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Ingredient),
                    item: item.Ingredient?.FormID,
                    fieldIndex: (int)Flora_FieldIndex.Ingredient,
                    errorMask: errorMask);
            }
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Spring),
                item: item.Spring_Property,
                fieldIndex: (int)Flora_FieldIndex.Spring,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Summer),
                item: item.Summer_Property,
                fieldIndex: (int)Flora_FieldIndex.Summer,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Fall),
                item: item.Fall_Property,
                fieldIndex: (int)Flora_FieldIndex.Fall,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Winter),
                item: item.Winter_Property,
                fieldIndex: (int)Flora_FieldIndex.Winter,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Flora item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Flora_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Flora_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Flora item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Flora_Registration.FLOR_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Flora item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name_Property,
                fieldIndex: (int)Flora_FieldIndex.Name,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Flora_Registration.FULL_HEADER),
                nullable: false);
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)Flora_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)Flora_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Flora_Registration.SCRI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Ingredient_Property,
                fieldIndex: (int)Flora_FieldIndex.Ingredient,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Flora_Registration.PFIG_HEADER),
                nullable: false);
            if (item.PFPCDataTypeState.HasFlag(Flora.PFPCDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Flora_Registration.PFPC_HEADER)))
                {
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Spring_Property,
                        fieldIndex: (int)Flora_FieldIndex.Spring,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Summer_Property,
                        fieldIndex: (int)Flora_FieldIndex.Summer,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fall_Property,
                        fieldIndex: (int)Flora_FieldIndex.Fall,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Winter_Property,
                        fieldIndex: (int)Flora_FieldIndex.Winter,
                        errorMask: errorMask);
                }
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Flora_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Flora_Mask<T>>
    {
        #region Ctors
        public Flora_Mask()
        {
        }

        public Flora_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Script = initialValue;
            this.Ingredient = initialValue;
            this.Spring = initialValue;
            this.Summer = initialValue;
            this.Fall = initialValue;
            this.Winter = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Script;
        public T Ingredient;
        public T Spring;
        public T Summer;
        public T Fall;
        public T Winter;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Flora_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Flora_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Ingredient, rhs.Ingredient)) return false;
            if (!object.Equals(this.Spring, rhs.Spring)) return false;
            if (!object.Equals(this.Summer, rhs.Summer)) return false;
            if (!object.Equals(this.Fall, rhs.Fall)) return false;
            if (!object.Equals(this.Winter, rhs.Winter)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Ingredient?.GetHashCode());
            ret = ret.CombineHashCode(this.Spring?.GetHashCode());
            ret = ret.CombineHashCode(this.Summer?.GetHashCode());
            ret = ret.CombineHashCode(this.Fall?.GetHashCode());
            ret = ret.CombineHashCode(this.Winter?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Script)) return false;
            if (!eval(this.Ingredient)) return false;
            if (!eval(this.Spring)) return false;
            if (!eval(this.Summer)) return false;
            if (!eval(this.Fall)) return false;
            if (!eval(this.Winter)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Flora_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Flora_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Flora_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Script = eval(this.Script);
            obj.Ingredient = eval(this.Ingredient);
            obj.Spring = eval(this.Spring);
            obj.Summer = eval(this.Summer);
            obj.Fall = eval(this.Fall);
            obj.Winter = eval(this.Winter);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Flora_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Flora_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Flora_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Ingredient ?? true)
                {
                    fg.AppendLine($"Ingredient => {Ingredient}");
                }
                if (printMask?.Spring ?? true)
                {
                    fg.AppendLine($"Spring => {Spring}");
                }
                if (printMask?.Summer ?? true)
                {
                    fg.AppendLine($"Summer => {Summer}");
                }
                if (printMask?.Fall ?? true)
                {
                    fg.AppendLine($"Fall => {Fall}");
                }
                if (printMask?.Winter ?? true)
                {
                    fg.AppendLine($"Winter => {Winter}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Flora_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Flora_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Script;
        public Exception Ingredient;
        public Exception Spring;
        public Exception Summer;
        public Exception Fall;
        public Exception Winter;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    return Name;
                case Flora_FieldIndex.Model:
                    return Model;
                case Flora_FieldIndex.Script:
                    return Script;
                case Flora_FieldIndex.Ingredient:
                    return Ingredient;
                case Flora_FieldIndex.Spring:
                    return Spring;
                case Flora_FieldIndex.Summer:
                    return Summer;
                case Flora_FieldIndex.Fall:
                    return Fall;
                case Flora_FieldIndex.Winter:
                    return Winter;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Flora_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Flora_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Flora_FieldIndex.Ingredient:
                    this.Ingredient = ex;
                    break;
                case Flora_FieldIndex.Spring:
                    this.Spring = ex;
                    break;
                case Flora_FieldIndex.Summer:
                    this.Summer = ex;
                    break;
                case Flora_FieldIndex.Fall:
                    this.Fall = ex;
                    break;
                case Flora_FieldIndex.Winter:
                    this.Winter = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Flora_FieldIndex enu = (Flora_FieldIndex)index;
            switch (enu)
            {
                case Flora_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Flora_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Flora_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Flora_FieldIndex.Ingredient:
                    this.Ingredient = (Exception)obj;
                    break;
                case Flora_FieldIndex.Spring:
                    this.Spring = (Exception)obj;
                    break;
                case Flora_FieldIndex.Summer:
                    this.Summer = (Exception)obj;
                    break;
                case Flora_FieldIndex.Fall:
                    this.Fall = (Exception)obj;
                    break;
                case Flora_FieldIndex.Winter:
                    this.Winter = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Script != null) return true;
            if (Ingredient != null) return true;
            if (Spring != null) return true;
            if (Summer != null) return true;
            if (Fall != null) return true;
            if (Winter != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Flora_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Ingredient => {Ingredient}");
            fg.AppendLine($"Spring => {Spring}");
            fg.AppendLine($"Summer => {Summer}");
            fg.AppendLine($"Fall => {Fall}");
            fg.AppendLine($"Winter => {Winter}");
        }
        #endregion

        #region Combine
        public Flora_ErrorMask Combine(Flora_ErrorMask rhs)
        {
            var ret = new Flora_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Ingredient = this.Ingredient.Combine(rhs.Ingredient);
            ret.Spring = this.Spring.Combine(rhs.Spring);
            ret.Summer = this.Summer.Combine(rhs.Summer);
            ret.Fall = this.Fall.Combine(rhs.Fall);
            ret.Winter = this.Winter.Combine(rhs.Winter);
            return ret;
        }
        public static Flora_ErrorMask Combine(Flora_ErrorMask lhs, Flora_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Flora_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Flora_ErrorMask();
        }
        #endregion

    }
    public class Flora_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Name;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Script;
        public bool Ingredient;
        public bool Spring;
        public bool Summer;
        public bool Fall;
        public bool Winter;
        #endregion

    }
    #endregion





    #endregion

}
