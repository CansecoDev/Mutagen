/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class GenderedBodyData :
        LoquiNotifyingObject,
        IGenderedBodyDataInternal,
        ILoquiObjectSetter<GenderedBodyData>,
        IEquatable<GenderedBodyData>,
        IEqualsMask
    {
        #region Ctor
        public GenderedBodyData()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Male
        public bool Male_IsSet
        {
            get => _hasBeenSetTracker[(int)GenderedBodyData_FieldIndex.Male];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)GenderedBodyData_FieldIndex.Male, nameof(Male_IsSet));
        }
        bool IGenderedBodyDataGetter.Male_IsSet => Male_IsSet;
        private BodyData _Male;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public BodyData Male
        {
            get => _Male;
            set => Male_Set(value);
        }
        public void Male_Set(
            BodyData value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Male, value, _hasBeenSetTracker, hasBeenSet, (int)GenderedBodyData_FieldIndex.Male, nameof(Male), nameof(Male_IsSet));
        }
        public void Male_Unset()
        {
            this.Male_Set(default(BodyData), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyDataInternalGetter IGenderedBodyDataGetter.Male => this.Male;
        #endregion
        #region Female
        public bool Female_IsSet
        {
            get => _hasBeenSetTracker[(int)GenderedBodyData_FieldIndex.Female];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)GenderedBodyData_FieldIndex.Female, nameof(Female_IsSet));
        }
        bool IGenderedBodyDataGetter.Female_IsSet => Female_IsSet;
        private BodyData _Female;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public BodyData Female
        {
            get => _Female;
            set => Female_Set(value);
        }
        public void Female_Set(
            BodyData value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Female, value, _hasBeenSetTracker, hasBeenSet, (int)GenderedBodyData_FieldIndex.Female, nameof(Female), nameof(Female_IsSet));
        }
        public void Female_Unset()
        {
            this.Female_Set(default(BodyData), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyDataInternalGetter IGenderedBodyDataGetter.Female => this.Female;
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGenderedBodyDataInternalGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            GenderedBodyDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IGenderedBodyDataInternalGetter rhs)) return false;
            return ((GenderedBodyDataCommon)((IGenderedBodyDataInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(GenderedBodyData obj)
        {
            return ((GenderedBodyDataCommon)((IGenderedBodyDataInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((GenderedBodyDataCommon)((IGenderedBodyDataInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => GenderedBodyDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((GenderedBodyDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static GenderedBodyData CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            GenderedBodyData_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static GenderedBodyData CreateFromXml(
            XElement node,
            out GenderedBodyData_ErrorMask errorMask,
            bool doMasks = true,
            GenderedBodyData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = GenderedBodyData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static GenderedBodyData CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new GenderedBodyData() : null;
                    break;
                default:
                    break;
            }
            var ret = new GenderedBodyData();
            try
            {
                foreach (var elem in node.Elements())
                {
                    GenderedBodyDataXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static GenderedBodyData CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            GenderedBodyData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static GenderedBodyData CreateFromXml(
            string path,
            out GenderedBodyData_ErrorMask errorMask,
            GenderedBodyData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GenderedBodyData CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            GenderedBodyData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static GenderedBodyData CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            GenderedBodyData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static GenderedBodyData CreateFromXml(
            Stream stream,
            out GenderedBodyData_ErrorMask errorMask,
            GenderedBodyData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GenderedBodyData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            GenderedBodyData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((GenderedBodyData_FieldIndex)index)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => GenderedBodyDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((GenderedBodyDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static GenderedBodyData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static GenderedBodyData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out GenderedBodyData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = GenderedBodyData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static GenderedBodyData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new GenderedBodyData();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            GenderedBodyData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            GenderedBodyData item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)GenderedBodyData_FieldIndex.Male) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength; // Skip marker
                    try
                    {
                        errorMask?.PushIndex((int)GenderedBodyData_FieldIndex.Male);
                        item.Male = Mutagen.Bethesda.Oblivion.BodyData.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)GenderedBodyData_FieldIndex.Male);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)GenderedBodyData_FieldIndex.Female) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength; // Skip marker
                    try
                    {
                        errorMask?.PushIndex((int)GenderedBodyData_FieldIndex.Female);
                        item.Female = Mutagen.Bethesda.Oblivion.BodyData.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)GenderedBodyData_FieldIndex.Female);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public GenderedBodyData Copy(
            GenderedBodyData_CopyMask copyMask = null,
            GenderedBodyData def = null)
        {
            return GenderedBodyData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static GenderedBodyData Copy(
            GenderedBodyData item,
            GenderedBodyData_CopyMask copyMask = null,
            GenderedBodyData def = null)
        {
            GenderedBodyData ret;
            if (item.GetType().Equals(typeof(GenderedBodyData)))
            {
                ret = new GenderedBodyData();
            }
            else
            {
                ret = (GenderedBodyData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static GenderedBodyData Copy_ToLoqui(
            GenderedBodyData item,
            GenderedBodyData_CopyMask copyMask = null,
            GenderedBodyData def = null)
        {
            GenderedBodyData ret;
            if (item.GetType().Equals(typeof(GenderedBodyData)))
            {
                ret = new GenderedBodyData() as GenderedBodyData;
            }
            else
            {
                ret = (GenderedBodyData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(GenderedBodyData rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            GenderedBodyData rhs,
            GenderedBodyData_CopyMask copyMask,
            GenderedBodyData def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            GenderedBodyData rhs,
            out GenderedBodyData_ErrorMask errorMask,
            GenderedBodyData_CopyMask copyMask = null,
            GenderedBodyData def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GenderedBodyDataSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = GenderedBodyData_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            GenderedBodyData rhs,
            ErrorMaskBuilder errorMask,
            GenderedBodyData_CopyMask copyMask = null,
            GenderedBodyData def = null)
        {
            GenderedBodyDataSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    this.Male = (BodyData)obj;
                    break;
                case GenderedBodyData_FieldIndex.Female:
                    this.Female = (BodyData)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            GenderedBodyDataSetterCommon.Instance.Clear(this);
        }

        public static GenderedBodyData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new GenderedBodyData();
            foreach (var pair in fields)
            {
                CopyInInternal_GenderedBodyData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_GenderedBodyData(GenderedBodyData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out GenderedBodyData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    obj.Male = (BodyData)pair.Value;
                    break;
                case GenderedBodyData_FieldIndex.Female:
                    obj.Female = (BodyData)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IGenderedBodyData :
        IGenderedBodyDataInternalGetter,
        ILoquiObjectSetter<IGenderedBodyDataInternal>
    {
        new BodyData Male { get; set; }
        new bool Male_IsSet { get; set; }
        void Male_Set(BodyData value, bool hasBeenSet = true);
        void Male_Unset();

        new BodyData Female { get; set; }
        new bool Female_IsSet { get; set; }
        void Female_Set(BodyData value, bool hasBeenSet = true);
        void Female_Unset();

        void CopyFieldsFrom(
            GenderedBodyData rhs,
            ErrorMaskBuilder errorMask = null,
            GenderedBodyData_CopyMask copyMask = null,
            GenderedBodyData def = null);
    }

    public partial interface IGenderedBodyDataInternal :
        IGenderedBodyData,
        IGenderedBodyDataInternalGetter
    {
    }

    public partial interface IGenderedBodyDataGetter :
        ILoquiObject,
        ILoquiObject<IGenderedBodyDataInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Male
        IBodyDataInternalGetter Male { get; }
        bool Male_IsSet { get; }

        #endregion
        #region Female
        IBodyDataInternalGetter Female { get; }
        bool Female_IsSet { get; }

        #endregion

    }

    public partial interface IGenderedBodyDataInternalGetter : IGenderedBodyDataGetter
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance();

    }

    #endregion

    #region Common MixIn
    public static class GenderedBodyDataMixIn
    {
        public static void Clear(this IGenderedBodyDataInternal item)
        {
            ((GenderedBodyDataSetterCommon)((IGenderedBodyDataInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static GenderedBodyData_Mask<bool> GetEqualsMask(
            this IGenderedBodyDataInternalGetter item,
            IGenderedBodyDataInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GenderedBodyDataCommon)((IGenderedBodyDataInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IGenderedBodyDataInternalGetter item,
            string name = null,
            GenderedBodyData_Mask<bool> printMask = null)
        {
            return ((GenderedBodyDataCommon)((IGenderedBodyDataInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IGenderedBodyDataInternalGetter item,
            FileGeneration fg,
            string name = null,
            GenderedBodyData_Mask<bool> printMask = null)
        {
            ((GenderedBodyDataCommon)((IGenderedBodyDataInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IGenderedBodyDataInternalGetter item,
            GenderedBodyData_Mask<bool?> checkMask)
        {
            return ((GenderedBodyDataCommon)((IGenderedBodyDataInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static GenderedBodyData_Mask<bool> GetHasBeenSetMask(this IGenderedBodyDataInternalGetter item)
        {
            var ret = new GenderedBodyData_Mask<bool>();
            ((GenderedBodyDataCommon)((IGenderedBodyDataInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IGenderedBodyDataInternalGetter item,
            IGenderedBodyDataInternalGetter rhs)
        {
            return ((GenderedBodyDataCommon)((IGenderedBodyDataInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum GenderedBodyData_FieldIndex
    {
        Male = 0,
        Female = 1,
    }
    #endregion

    #region Registration
    public class GenderedBodyData_Registration : ILoquiRegistration
    {
        public static readonly GenderedBodyData_Registration Instance = new GenderedBodyData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 35,
            version: 0);

        public const string GUID = "5b885494-7571-4e60-a255-76d26bbfd419";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(GenderedBodyData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(GenderedBodyData_ErrorMask);

        public static readonly Type ClassType = typeof(GenderedBodyData);

        public static readonly Type GetterType = typeof(IGenderedBodyDataGetter);

        public static readonly Type InternalGetterType = typeof(IGenderedBodyDataInternalGetter);

        public static readonly Type SetterType = typeof(IGenderedBodyData);

        public static readonly Type InternalSetterType = typeof(IGenderedBodyDataInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.GenderedBodyData";

        public const string Name = "GenderedBodyData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MALE":
                    return (ushort)GenderedBodyData_FieldIndex.Male;
                case "FEMALE":
                    return (ushort)GenderedBodyData_FieldIndex.Female;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    return "Male";
                case GenderedBodyData_FieldIndex.Female:
                    return "Female";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    return typeof(BodyData);
                case GenderedBodyData_FieldIndex.Female:
                    return typeof(BodyData);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(GenderedBodyDataXmlWriteTranslation);
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        MNAM_HEADER,
                        FNAM_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(GenderedBodyDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class GenderedBodyDataSetterCommon
    {
        public static readonly GenderedBodyDataSetterCommon Instance = new GenderedBodyDataSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IGenderedBodyDataInternal item)
        {
            ClearPartial();
            item.Male_Unset();
            item.Female_Unset();
        }
        
        
    }
    public partial class GenderedBodyDataCommon
    {
        public static readonly GenderedBodyDataCommon Instance = new GenderedBodyDataCommon();

        public GenderedBodyData_Mask<bool> GetEqualsMask(
            IGenderedBodyDataInternalGetter item,
            IGenderedBodyDataInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GenderedBodyData_Mask<bool>();
            ((GenderedBodyDataCommon)((IGenderedBodyDataInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGenderedBodyDataInternalGetter item,
            IGenderedBodyDataInternalGetter rhs,
            GenderedBodyData_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Male = EqualsMaskHelper.EqualsHelper(
                item.Male_IsSet,
                rhs.Male_IsSet,
                item.Male,
                rhs.Male,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Female = EqualsMaskHelper.EqualsHelper(
                item.Female_IsSet,
                rhs.Female_IsSet,
                item.Female,
                rhs.Female,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
        }
        
        public string ToString(
            IGenderedBodyDataInternalGetter item,
            string name = null,
            GenderedBodyData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IGenderedBodyDataInternalGetter item,
            FileGeneration fg,
            string name = null,
            GenderedBodyData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"GenderedBodyData =>");
            }
            else
            {
                fg.AppendLine($"{name} (GenderedBodyData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IGenderedBodyDataInternalGetter item,
            FileGeneration fg,
            GenderedBodyData_Mask<bool> printMask = null)
        {
            if (printMask?.Male?.Overall ?? true)
            {
                item.Male?.ToString(fg, "Male");
            }
            if (printMask?.Female?.Overall ?? true)
            {
                item.Female?.ToString(fg, "Female");
            }
        }
        
        public bool HasBeenSet(
            IGenderedBodyDataInternalGetter item,
            GenderedBodyData_Mask<bool?> checkMask)
        {
            if (checkMask.Male.Overall.HasValue && checkMask.Male.Overall.Value != item.Male_IsSet) return false;
            if (checkMask.Male.Specific != null && (item.Male == null || !item.Male.HasBeenSet(checkMask.Male.Specific))) return false;
            if (checkMask.Female.Overall.HasValue && checkMask.Female.Overall.Value != item.Female_IsSet) return false;
            if (checkMask.Female.Specific != null && (item.Female == null || !item.Female.HasBeenSet(checkMask.Female.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IGenderedBodyDataInternalGetter item,
            GenderedBodyData_Mask<bool> mask)
        {
            mask.Male = new MaskItem<bool, BodyData_Mask<bool>>(item.Male_IsSet, item.Male.GetHasBeenSetMask());
            mask.Female = new MaskItem<bool, BodyData_Mask<bool>>(item.Female_IsSet, item.Female.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGenderedBodyDataInternalGetter lhs,
            IGenderedBodyDataInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Male_IsSet != rhs.Male_IsSet) return false;
            if (lhs.Male_IsSet)
            {
                if (!object.Equals(lhs.Male, rhs.Male)) return false;
            }
            if (lhs.Female_IsSet != rhs.Female_IsSet) return false;
            if (lhs.Female_IsSet)
            {
                if (!object.Equals(lhs.Female, rhs.Female)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IGenderedBodyDataInternalGetter item)
        {
            int ret = 0;
            if (item.Male_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Male).CombineHashCode(ret);
            }
            if (item.Female_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Female).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        
    }
    public partial class GenderedBodyDataSetterCopyCommon
    {
        public static readonly GenderedBodyDataSetterCopyCommon Instance = new GenderedBodyDataSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            GenderedBodyData item,
            GenderedBodyData rhs,
            GenderedBodyData def,
            ErrorMaskBuilder errorMask,
            GenderedBodyData_CopyMask copyMask)
        {
            if (copyMask?.Male.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)GenderedBodyData_FieldIndex.Male);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Male,
                        rhsHasBeenSet: rhs.Male_IsSet,
                        defItem: def?.Male,
                        defHasBeenSet: def?.Male_IsSet ?? false,
                        outRhsItem: out var rhsMaleItem,
                        outDefItem: out var defMaleItem))
                    {
                        switch (copyMask?.Male.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                BodyDataSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Male,
                                    rhs: rhs.Male,
                                    def: def?.Male,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Male.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Male = BodyData.Copy(
                                    rhsMaleItem,
                                    copyMask?.Male?.Specific,
                                    def: defMaleItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Male?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Male_Set(
                            value: default(BodyData),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Female.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)GenderedBodyData_FieldIndex.Female);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Female,
                        rhsHasBeenSet: rhs.Female_IsSet,
                        defItem: def?.Female,
                        defHasBeenSet: def?.Female_IsSet ?? false,
                        outRhsItem: out var rhsFemaleItem,
                        outDefItem: out var defFemaleItem))
                    {
                        switch (copyMask?.Female.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                BodyDataSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Female,
                                    rhs: rhs.Female,
                                    def: def?.Female,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Female.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Female = BodyData.Copy(
                                    rhsFemaleItem,
                                    copyMask?.Female?.Specific,
                                    def: defFemaleItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Female?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Female_Set(
                            value: default(BodyData),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        
    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class GenderedBodyDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static GenderedBodyDataXmlWriteTranslation Instance = new GenderedBodyDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IGenderedBodyDataInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.Male_IsSet
                && (translationMask?.GetShouldTranslate((int)GenderedBodyData_FieldIndex.Male) ?? true))
            {
                var loquiItem = item.Male;
                ((BodyDataXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Male),
                    fieldIndex: (int)GenderedBodyData_FieldIndex.Male,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)GenderedBodyData_FieldIndex.Male));
            }
            if (item.Female_IsSet
                && (translationMask?.GetShouldTranslate((int)GenderedBodyData_FieldIndex.Female) ?? true))
            {
                var loquiItem = item.Female;
                ((BodyDataXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Female),
                    fieldIndex: (int)GenderedBodyData_FieldIndex.Female,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)GenderedBodyData_FieldIndex.Female));
            }
        }

        public void Write(
            XElement node,
            IGenderedBodyDataInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.GenderedBodyData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.GenderedBodyData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGenderedBodyDataInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IGenderedBodyDataInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IGenderedBodyDataInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class GenderedBodyDataXmlCreateTranslation
    {
        public readonly static GenderedBodyDataXmlCreateTranslation Instance = new GenderedBodyDataXmlCreateTranslation();

        public static void FillPublicXml(
            IGenderedBodyDataInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GenderedBodyDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IGenderedBodyDataInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Male":
                    try
                    {
                        errorMask?.PushIndex((int)GenderedBodyData_FieldIndex.Male);
                        if (LoquiXmlTranslation<BodyData>.Instance.Parse(
                            node: node,
                            item: out BodyData MaleParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)GenderedBodyData_FieldIndex.Male)))
                        {
                            item.Male = MaleParse;
                        }
                        else
                        {
                            item.Male = default(BodyData);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Female":
                    try
                    {
                        errorMask?.PushIndex((int)GenderedBodyData_FieldIndex.Female);
                        if (LoquiXmlTranslation<BodyData>.Instance.Parse(
                            node: node,
                            item: out BodyData FemaleParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)GenderedBodyData_FieldIndex.Female)))
                        {
                            item.Female = FemaleParse;
                        }
                        else
                        {
                            item.Female = default(BodyData);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class GenderedBodyDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IGenderedBodyDataInternalGetter item,
            XElement node,
            out GenderedBodyData_ErrorMask errorMask,
            bool doMasks = true,
            GenderedBodyData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((GenderedBodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GenderedBodyData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IGenderedBodyDataInternalGetter item,
            string path,
            out GenderedBodyData_ErrorMask errorMask,
            GenderedBodyData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IGenderedBodyDataInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IGenderedBodyDataInternalGetter item,
            Stream stream,
            out GenderedBodyData_ErrorMask errorMask,
            GenderedBodyData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IGenderedBodyDataInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IGenderedBodyDataInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((GenderedBodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IGenderedBodyDataInternalGetter item,
            XElement node,
            string name = null,
            GenderedBodyData_TranslationMask translationMask = null)
        {
            ((GenderedBodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IGenderedBodyDataInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((GenderedBodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IGenderedBodyDataInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((GenderedBodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class GenderedBodyData_Mask<T> : IMask<T>, IEquatable<GenderedBodyData_Mask<T>>
    {
        #region Ctors
        public GenderedBodyData_Mask()
        {
        }

        public GenderedBodyData_Mask(T initialValue)
        {
            this.Male = new MaskItem<T, BodyData_Mask<T>>(initialValue, new BodyData_Mask<T>(initialValue));
            this.Female = new MaskItem<T, BodyData_Mask<T>>(initialValue, new BodyData_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, BodyData_Mask<T>> Male { get; set; }
        public MaskItem<T, BodyData_Mask<T>> Female { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is GenderedBodyData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(GenderedBodyData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Male, rhs.Male)) return false;
            if (!object.Equals(this.Female, rhs.Female)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Male?.GetHashCode());
            ret = ret.CombineHashCode(this.Female?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (Male != null)
            {
                if (!eval(this.Male.Overall)) return false;
                if (this.Male.Specific != null && !this.Male.Specific.AllEqual(eval)) return false;
            }
            if (Female != null)
            {
                if (!eval(this.Female.Overall)) return false;
                if (this.Female.Specific != null && !this.Female.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public GenderedBodyData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new GenderedBodyData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(GenderedBodyData_Mask<R> obj, Func<T, R> eval)
        {
            if (this.Male != null)
            {
                obj.Male = new MaskItem<R, BodyData_Mask<R>>();
                obj.Male.Overall = eval(this.Male.Overall);
                if (this.Male.Specific != null)
                {
                    obj.Male.Specific = this.Male.Specific.Translate(eval);
                }
            }
            if (this.Female != null)
            {
                obj.Female = new MaskItem<R, BodyData_Mask<R>>();
                obj.Female.Overall = eval(this.Female.Overall);
                if (this.Female.Specific != null)
                {
                    obj.Female.Specific = this.Female.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(GenderedBodyData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, GenderedBodyData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(GenderedBodyData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male?.Overall ?? true)
                {
                    Male?.ToString(fg);
                }
                if (printMask?.Female?.Overall ?? true)
                {
                    Female?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class GenderedBodyData_ErrorMask : IErrorMask, IErrorMask<GenderedBodyData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, BodyData_ErrorMask> Male;
        public MaskItem<Exception, BodyData_ErrorMask> Female;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    return Male;
                case GenderedBodyData_FieldIndex.Female:
                    return Female;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    this.Male = new MaskItem<Exception, BodyData_ErrorMask>(ex, null);
                    break;
                case GenderedBodyData_FieldIndex.Female:
                    this.Female = new MaskItem<Exception, BodyData_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    this.Male = (MaskItem<Exception, BodyData_ErrorMask>)obj;
                    break;
                case GenderedBodyData_FieldIndex.Female:
                    this.Female = (MaskItem<Exception, BodyData_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Male != null) return true;
            if (Female != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("GenderedBodyData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            Male?.ToString(fg);
            Female?.ToString(fg);
        }
        #endregion

        #region Combine
        public GenderedBodyData_ErrorMask Combine(GenderedBodyData_ErrorMask rhs)
        {
            var ret = new GenderedBodyData_ErrorMask();
            ret.Male = new MaskItem<Exception, BodyData_ErrorMask>(this.Male.Overall.Combine(rhs.Male.Overall), ((IErrorMask<BodyData_ErrorMask>)this.Male.Specific).Combine(rhs.Male.Specific));
            ret.Female = new MaskItem<Exception, BodyData_ErrorMask>(this.Female.Overall.Combine(rhs.Female.Overall), ((IErrorMask<BodyData_ErrorMask>)this.Female.Specific).Combine(rhs.Female.Specific));
            return ret;
        }
        public static GenderedBodyData_ErrorMask Combine(GenderedBodyData_ErrorMask lhs, GenderedBodyData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static GenderedBodyData_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new GenderedBodyData_ErrorMask();
        }
        #endregion

    }
    public class GenderedBodyData_CopyMask
    {
        public GenderedBodyData_CopyMask()
        {
        }

        public GenderedBodyData_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Male = new MaskItem<CopyOption, BodyData_CopyMask>(deepCopyOption, default);
            this.Female = new MaskItem<CopyOption, BodyData_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public MaskItem<CopyOption, BodyData_CopyMask> Male;
        public MaskItem<CopyOption, BodyData_CopyMask> Female;
        #endregion

    }

    public class GenderedBodyData_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, BodyData_TranslationMask> Male;
        public MaskItem<bool, BodyData_TranslationMask> Female;
        #endregion

        #region Ctors
        public GenderedBodyData_TranslationMask()
        {
        }

        public GenderedBodyData_TranslationMask(bool defaultOn)
        {
            this.Male = new MaskItem<bool, BodyData_TranslationMask>(defaultOn, null);
            this.Female = new MaskItem<bool, BodyData_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Male?.Overall ?? true, Male?.Specific?.GetCrystal()));
            ret.Add((Female?.Overall ?? true, Female?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #region Binary Translation
    public partial class GenderedBodyDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static GenderedBodyDataBinaryWriteTranslation Instance = new GenderedBodyDataBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IGenderedBodyDataInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.Male_IsSet)
            {
                using (HeaderExport.ExportHeader(writer, GenderedBodyData_Registration.MNAM_HEADER, ObjectType.Subrecord)) { }
                var loquiItem = item.Male;
                ((BodyDataBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Female_IsSet)
            {
                using (HeaderExport.ExportHeader(writer, GenderedBodyData_Registration.FNAM_HEADER, ObjectType.Subrecord)) { }
                var loquiItem = item.Female;
                ((BodyDataBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
        }

        public void Write(
            MutagenWriter writer,
            IGenderedBodyDataInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IGenderedBodyDataInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class GenderedBodyDataBinaryCreateTranslation
    {
        public readonly static GenderedBodyDataBinaryCreateTranslation Instance = new GenderedBodyDataBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class GenderedBodyDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IGenderedBodyDataInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out GenderedBodyData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((GenderedBodyDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = GenderedBodyData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IGenderedBodyDataInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((GenderedBodyDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IGenderedBodyDataInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((GenderedBodyDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    public partial class GenderedBodyDataBinaryWrapper :
        BinaryWrapper,
        IGenderedBodyDataInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GenderedBodyData_Registration.Instance;
        public static GenderedBodyData_Registration Registration => GenderedBodyData_Registration.Instance;
        protected object CommonInstance()
        {
            return GenderedBodyDataCommon.Instance;
        }
        object IGenderedBodyDataInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IGenderedBodyDataInternalGetter.CommonSetterInstance()
        {
            return null;
        }
        object IGenderedBodyDataInternalGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGenderedBodyDataInternalGetter)rhs, include);

        protected object XmlWriteTranslator => GenderedBodyDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((GenderedBodyDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => GenderedBodyDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((GenderedBodyDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Male
        public IBodyDataInternalGetter Male { get; private set; }
        public bool Male_IsSet => Male != null;
        #endregion
        #region Female
        public IBodyDataInternalGetter Female { get; private set; }
        public bool Female_IsSet => Female != null;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected GenderedBodyDataBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static GenderedBodyDataBinaryWrapper GenderedBodyDataFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new GenderedBodyDataBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)GenderedBodyData_FieldIndex.Male) return TryGet<int?>.Failure;
                    stream.Position += _package.Meta.SubConstants.HeaderLength; // Skip marker
                    this.Male = BodyDataBinaryWrapper.BodyDataFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)GenderedBodyData_FieldIndex.Male);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)GenderedBodyData_FieldIndex.Female) return TryGet<int?>.Failure;
                    stream.Position += _package.Meta.SubConstants.HeaderLength; // Skip marker
                    this.Female = BodyDataBinaryWrapper.BodyDataFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)GenderedBodyData_FieldIndex.Female);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

    #endregion

    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class GenderedBodyData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GenderedBodyData_Registration.Instance;
        public static GenderedBodyData_Registration Registration => GenderedBodyData_Registration.Instance;
        protected object CommonInstance()
        {
            return GenderedBodyDataCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return GenderedBodyDataSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return GenderedBodyDataSetterCopyCommon.Instance;
        }
        object IGenderedBodyDataInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IGenderedBodyDataInternalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IGenderedBodyDataInternalGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}
