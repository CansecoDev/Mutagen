/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class GenderedBodyData : IGenderedBodyData, ILoquiObjectSetter, IEquatable<GenderedBodyData>
    {
        ILoquiRegistration ILoquiObject.Registration => GenderedBodyData_Registration.Instance;
        public static GenderedBodyData_Registration Registration => GenderedBodyData_Registration.Instance;

        #region Ctor
        public GenderedBodyData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Male
        private readonly INotifyingSetItem<BodyData> _Male = new NotifyingSetItem<BodyData>();
        public INotifyingSetItem<BodyData> Male_Property => this._Male;
        BodyData IGenderedBodyDataGetter.Male => this.Male;
        public BodyData Male { get => _Male.Item; set => _Male.Item = value; }
        INotifyingSetItem<BodyData> IGenderedBodyData.Male_Property => this.Male_Property;
        INotifyingSetItemGetter<BodyData> IGenderedBodyDataGetter.Male_Property => this.Male_Property;
        #endregion
        #region Female
        private readonly INotifyingSetItem<BodyData> _Female = new NotifyingSetItem<BodyData>();
        public INotifyingSetItem<BodyData> Female_Property => this._Female;
        BodyData IGenderedBodyDataGetter.Female => this.Female;
        public BodyData Female { get => _Female.Item; set => _Female.Item = value; }
        INotifyingSetItem<BodyData> IGenderedBodyData.Female_Property => this.Female_Property;
        INotifyingSetItemGetter<BodyData> IGenderedBodyDataGetter.Female_Property => this.Female_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => GenderedBodyDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => GenderedBodyDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => GenderedBodyDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            GenderedBodyDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return GenderedBodyDataCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            GenderedBodyData_Mask<bool> printMask = null)
        {
            return GenderedBodyDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            GenderedBodyDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public GenderedBodyData_Mask<bool> GetHasBeenSetMask()
        {
            return GenderedBodyDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is GenderedBodyData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(GenderedBodyData rhs)
        {
            if (rhs == null) return false;
            if (Male_Property.HasBeenSet != rhs.Male_Property.HasBeenSet) return false;
            if (Male_Property.HasBeenSet)
            {
                if (!object.Equals(Male, rhs.Male)) return false;
            }
            if (Female_Property.HasBeenSet != rhs.Female_Property.HasBeenSet) return false;
            if (Female_Property.HasBeenSet)
            {
                if (!object.Equals(Female, rhs.Female)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Male_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Male).CombineHashCode(ret);
            }
            if (Female_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Female).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static GenderedBodyData Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static GenderedBodyData Create_XML(
            XElement root,
            out GenderedBodyData_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static GenderedBodyData Create_XML(
            XElement root,
            bool doMasks,
            out GenderedBodyData_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (GenderedBodyData Object, GenderedBodyData_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            GenderedBodyData_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new GenderedBodyData_ErrorMask()) : default(Func<GenderedBodyData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static GenderedBodyData Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static GenderedBodyData Create_XML(
            string path,
            out GenderedBodyData_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static GenderedBodyData Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static GenderedBodyData Create_XML(
            Stream stream,
            out GenderedBodyData_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out GenderedBodyData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out GenderedBodyData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out GenderedBodyData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out GenderedBodyData_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (GenderedBodyData_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out GenderedBodyData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out GenderedBodyData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            GenderedBodyDataCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static GenderedBodyData Create_XML_Internal(
            XElement root,
            Func<GenderedBodyData_ErrorMask> errorMask)
        {
            var ret = new GenderedBodyData();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            GenderedBodyData item,
            XElement root,
            string name,
            Func<GenderedBodyData_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Male":
                    item._Male.SetIfSucceeded(LoquiXmlTranslation<BodyData, BodyData_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)GenderedBodyData_FieldIndex.Male,
                        errorMask: errorMask));
                    break;
                case "Female":
                    item._Female.SetIfSucceeded(LoquiXmlTranslation<BodyData, BodyData_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)GenderedBodyData_FieldIndex.Female,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static GenderedBodyData Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static GenderedBodyData Create_Binary(
            MutagenFrame frame,
            out GenderedBodyData_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static GenderedBodyData Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out GenderedBodyData_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (GenderedBodyData Object, GenderedBodyData_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            GenderedBodyData_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new GenderedBodyData_ErrorMask()) : default(Func<GenderedBodyData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static GenderedBodyData Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static GenderedBodyData Create_Binary(
            string path,
            out GenderedBodyData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static GenderedBodyData Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static GenderedBodyData Create_Binary(
            Stream stream,
            out GenderedBodyData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out GenderedBodyData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out GenderedBodyData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out GenderedBodyData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out GenderedBodyData_ErrorMask errorMask)
        {
            errorMask = (GenderedBodyData_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out GenderedBodyData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out GenderedBodyData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            GenderedBodyDataCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static GenderedBodyData Create_Binary_Internal(
            MutagenFrame frame,
            Func<GenderedBodyData_ErrorMask> errorMask)
        {
            var ret = new GenderedBodyData();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    GenderedBodyData_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            GenderedBodyData item,
            MutagenFrame frame,
            Func<GenderedBodyData_ErrorMask> errorMask)
        {
        }

        protected static TryGet<GenderedBodyData_FieldIndex?> Fill_Binary_RecordTypes(
            GenderedBodyData item,
            MutagenFrame frame,
            GenderedBodyData_FieldIndex? lastParsed,
            Func<GenderedBodyData_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "MNAM":
                    if (lastParsed.HasValue && lastParsed.Value >= GenderedBodyData_FieldIndex.Male) return TryGet<GenderedBodyData_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    item._Male.SetIfSucceeded(LoquiBinaryTranslation<BodyData, BodyData_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)GenderedBodyData_FieldIndex.Male,
                        errorMask: errorMask));
                    return TryGet<GenderedBodyData_FieldIndex?>.Succeed(GenderedBodyData_FieldIndex.Male);
                case "FNAM":
                    if (lastParsed.HasValue && lastParsed.Value >= GenderedBodyData_FieldIndex.Female) return TryGet<GenderedBodyData_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    item._Female.SetIfSucceeded(LoquiBinaryTranslation<BodyData, BodyData_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)GenderedBodyData_FieldIndex.Female,
                        errorMask: errorMask));
                    return TryGet<GenderedBodyData_FieldIndex?>.Succeed(GenderedBodyData_FieldIndex.Female);
                default:
                    return TryGet<GenderedBodyData_FieldIndex?>.Failure;
            }
        }

        #endregion

        public GenderedBodyData Copy(
            GenderedBodyData_CopyMask copyMask = null,
            IGenderedBodyDataGetter def = null)
        {
            return GenderedBodyData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static GenderedBodyData Copy(
            IGenderedBodyData item,
            GenderedBodyData_CopyMask copyMask = null,
            IGenderedBodyDataGetter def = null)
        {
            GenderedBodyData ret;
            if (item.GetType().Equals(typeof(GenderedBodyData)))
            {
                ret = new GenderedBodyData();
            }
            else
            {
                ret = (GenderedBodyData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            GenderedBodyData_CopyMask copyMask = null,
            IGenderedBodyDataGetter def = null)
            where CopyType : class, IGenderedBodyData
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(GenderedBodyData)))
            {
                ret = new GenderedBodyData() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static GenderedBodyData Copy_ToLoqui(
            IGenderedBodyDataGetter item,
            GenderedBodyData_CopyMask copyMask = null,
            IGenderedBodyDataGetter def = null)
        {
            GenderedBodyData ret;
            if (item.GetType().Equals(typeof(GenderedBodyData)))
            {
                ret = new GenderedBodyData() as GenderedBodyData;
            }
            else
            {
                ret = (GenderedBodyData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    this._Male.Set(
                        (BodyData)obj,
                        cmds);
                    break;
                case GenderedBodyData_FieldIndex.Female:
                    this._Female.Set(
                        (BodyData)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            GenderedBodyDataCommon.Clear(this, cmds);
        }


        public static GenderedBodyData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new GenderedBodyData();
            foreach (var pair in fields)
            {
                CopyInInternal_GenderedBodyData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_GenderedBodyData(GenderedBodyData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out GenderedBodyData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    obj._Male.Set(
                        (BodyData)pair.Value,
                        null);
                    break;
                case GenderedBodyData_FieldIndex.Female:
                    obj._Female.Set(
                        (BodyData)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, GenderedBodyData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IGenderedBodyData : IGenderedBodyDataGetter, ILoquiClass<IGenderedBodyData, IGenderedBodyDataGetter>, ILoquiClass<GenderedBodyData, IGenderedBodyDataGetter>
    {
        new BodyData Male { get; set; }
        new INotifyingSetItem<BodyData> Male_Property { get; }

        new BodyData Female { get; set; }
        new INotifyingSetItem<BodyData> Female_Property { get; }

    }

    public interface IGenderedBodyDataGetter : ILoquiObject
    {
        #region Male
        BodyData Male { get; }
        INotifyingSetItemGetter<BodyData> Male_Property { get; }

        #endregion
        #region Female
        BodyData Female { get; }
        INotifyingSetItemGetter<BodyData> Female_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum GenderedBodyData_FieldIndex
    {
        Male = 0,
        Female = 1,
    }
    #endregion

    #region Registration
    public class GenderedBodyData_Registration : ILoquiRegistration
    {
        public static readonly GenderedBodyData_Registration Instance = new GenderedBodyData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 35,
            version: 0);

        public const string GUID = "5b885494-7571-4e60-a255-76d26bbfd419";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(GenderedBodyData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(GenderedBodyData_ErrorMask);

        public static readonly Type ClassType = typeof(GenderedBodyData);

        public static readonly Type GetterType = typeof(IGenderedBodyDataGetter);

        public static readonly Type SetterType = typeof(IGenderedBodyData);

        public static readonly Type CommonType = typeof(GenderedBodyDataCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.GenderedBodyData";

        public const string Name = "GenderedBodyData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MALE":
                    return (ushort)GenderedBodyData_FieldIndex.Male;
                case "FEMALE":
                    return (ushort)GenderedBodyData_FieldIndex.Female;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    return "Male";
                case GenderedBodyData_FieldIndex.Female:
                    return "Female";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                case GenderedBodyData_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    return typeof(BodyData);
                case GenderedBodyData_FieldIndex.Female:
                    return typeof(BodyData);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        MNAM_HEADER,
                        FNAM_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class GenderedBodyDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IGenderedBodyData item,
            IGenderedBodyDataGetter rhs,
            GenderedBodyData_CopyMask copyMask = null,
            IGenderedBodyDataGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            GenderedBodyDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IGenderedBodyData item,
            IGenderedBodyDataGetter rhs,
            out GenderedBodyData_ErrorMask errorMask,
            GenderedBodyData_CopyMask copyMask = null,
            IGenderedBodyDataGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            GenderedBodyDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IGenderedBodyData item,
            IGenderedBodyDataGetter rhs,
            IGenderedBodyDataGetter def,
            bool doMasks,
            out GenderedBodyData_ErrorMask errorMask,
            GenderedBodyData_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            GenderedBodyData_ErrorMask retErrorMask = null;
            Func<GenderedBodyData_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new GenderedBodyData_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IGenderedBodyData item,
            IGenderedBodyDataGetter rhs,
            IGenderedBodyDataGetter def,
            bool doMasks,
            Func<GenderedBodyData_ErrorMask> errorMask,
            GenderedBodyData_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Male.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Male_Property.SetToWithDefault(
                        rhs.Male_Property,
                        def?.Male_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Male.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    BodyDataCommon.CopyFieldsFrom(
                                        item: item.Male,
                                        rhs: rhs.Male,
                                        def: def?.Male,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<BodyData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Male.Specific == null)
                                            {
                                                baseMask.Male = new MaskItem<Exception, BodyData_ErrorMask>(null, new BodyData_ErrorMask());
                                            }
                                            return baseMask.Male.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Male.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(BodyData);
                                    return BodyData.Copy(
                                        r,
                                        copyMask?.Male?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Male?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)GenderedBodyData_FieldIndex.Male, ex);
                }
            }
            if (copyMask?.Female.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Female_Property.SetToWithDefault(
                        rhs.Female_Property,
                        def?.Female_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Female.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    BodyDataCommon.CopyFieldsFrom(
                                        item: item.Female,
                                        rhs: rhs.Female,
                                        def: def?.Female,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<BodyData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Female.Specific == null)
                                            {
                                                baseMask.Female = new MaskItem<Exception, BodyData_ErrorMask>(null, new BodyData_ErrorMask());
                                            }
                                            return baseMask.Female.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Female.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(BodyData);
                                    return BodyData.Copy(
                                        r,
                                        copyMask?.Female?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Female?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)GenderedBodyData_FieldIndex.Female, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IGenderedBodyData obj,
            NotifyingFireParameters? cmds = null)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    obj.Male_Property.HasBeenSet = on;
                    break;
                case GenderedBodyData_FieldIndex.Female:
                    obj.Female_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IGenderedBodyData obj,
            NotifyingUnsetParameters? cmds = null)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    obj.Male_Property.Unset(cmds);
                    break;
                case GenderedBodyData_FieldIndex.Female:
                    obj.Female_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IGenderedBodyData obj)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    return obj.Male_Property.HasBeenSet;
                case GenderedBodyData_FieldIndex.Female:
                    return obj.Female_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IGenderedBodyDataGetter obj)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    return obj.Male;
                case GenderedBodyData_FieldIndex.Female:
                    return obj.Female;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IGenderedBodyData item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Male_Property.Unset(cmds.ToUnsetParams());
            item.Female_Property.Unset(cmds.ToUnsetParams());
        }

        public static GenderedBodyData_Mask<bool> GetEqualsMask(
            this IGenderedBodyDataGetter item,
            IGenderedBodyDataGetter rhs)
        {
            var ret = new GenderedBodyData_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IGenderedBodyDataGetter item,
            IGenderedBodyDataGetter rhs,
            GenderedBodyData_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Male = item.Male_Property.LoquiEqualsHelper(rhs.Male_Property, (loqLhs, loqRhs) => BodyDataCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Female = item.Female_Property.LoquiEqualsHelper(rhs.Female_Property, (loqLhs, loqRhs) => BodyDataCommon.GetEqualsMask(loqLhs, loqRhs));
        }

        public static string ToString(
            this IGenderedBodyDataGetter item,
            string name = null,
            GenderedBodyData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IGenderedBodyDataGetter item,
            FileGeneration fg,
            string name = null,
            GenderedBodyData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(GenderedBodyData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(GenderedBodyData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male?.Overall ?? true)
                {
                    item.Male?.ToString(fg, "Male");
                }
                if (printMask?.Female?.Overall ?? true)
                {
                    item.Female?.ToString(fg, "Female");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IGenderedBodyDataGetter item,
            GenderedBodyData_Mask<bool?> checkMask)
        {
            if (checkMask.Male.Overall.HasValue && checkMask.Male.Overall.Value != item.Male_Property.HasBeenSet) return false;
            if (checkMask.Male.Specific != null && (item.Male_Property.Item == null || !item.Male_Property.Item.HasBeenSet(checkMask.Male.Specific))) return false;
            if (checkMask.Female.Overall.HasValue && checkMask.Female.Overall.Value != item.Female_Property.HasBeenSet) return false;
            if (checkMask.Female.Specific != null && (item.Female_Property.Item == null || !item.Female_Property.Item.HasBeenSet(checkMask.Female.Specific))) return false;
            return true;
        }

        public static GenderedBodyData_Mask<bool> GetHasBeenSetMask(IGenderedBodyDataGetter item)
        {
            var ret = new GenderedBodyData_Mask<bool>();
            ret.Male = new MaskItem<bool, BodyData_Mask<bool>>(item.Male_Property.HasBeenSet, BodyDataCommon.GetHasBeenSetMask(item.Male_Property.Item));
            ret.Female = new MaskItem<bool, BodyData_Mask<bool>>(item.Female_Property.HasBeenSet, BodyDataCommon.GetHasBeenSetMask(item.Female_Property.Item));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IGenderedBodyDataGetter item,
            bool doMasks,
            out GenderedBodyData_ErrorMask errorMask,
            string name = null)
        {
            GenderedBodyData_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new GenderedBodyData_ErrorMask()) : default(Func<GenderedBodyData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IGenderedBodyDataGetter item,
            Func<GenderedBodyData_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.GenderedBodyData"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.GenderedBodyData");
                    }
                    if (item.Male_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<BodyData, BodyData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Male_Property,
                            name: nameof(item.Male),
                            fieldIndex: (int)GenderedBodyData_FieldIndex.Male,
                            errorMask: errorMask);
                    }
                    if (item.Female_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<BodyData, BodyData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Female_Property,
                            name: nameof(item.Female),
                            fieldIndex: (int)GenderedBodyData_FieldIndex.Female,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IGenderedBodyDataGetter item,
            bool doMasks,
            out GenderedBodyData_ErrorMask errorMask)
        {
            GenderedBodyData_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new GenderedBodyData_ErrorMask()) : default(Func<GenderedBodyData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IGenderedBodyDataGetter item,
            Func<GenderedBodyData_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IGenderedBodyDataGetter item,
            MutagenWriter writer,
            Func<GenderedBodyData_ErrorMask> errorMask)
        {
            using (HeaderExport.ExportHeader(writer, GenderedBodyData_Registration.MNAM_HEADER, ObjectType.Subrecord)) { }
            LoquiBinaryTranslation<BodyData, BodyData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Male_Property,
                fieldIndex: (int)GenderedBodyData_FieldIndex.Male,
                errorMask: errorMask);
            using (HeaderExport.ExportHeader(writer, GenderedBodyData_Registration.FNAM_HEADER, ObjectType.Subrecord)) { }
            LoquiBinaryTranslation<BodyData, BodyData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Female_Property,
                fieldIndex: (int)GenderedBodyData_FieldIndex.Female,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class GenderedBodyData_Mask<T> : IMask<T>, IEquatable<GenderedBodyData_Mask<T>>
    {
        #region Ctors
        public GenderedBodyData_Mask()
        {
        }

        public GenderedBodyData_Mask(T initialValue)
        {
            this.Male = new MaskItem<T, BodyData_Mask<T>>(initialValue, new BodyData_Mask<T>(initialValue));
            this.Female = new MaskItem<T, BodyData_Mask<T>>(initialValue, new BodyData_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, BodyData_Mask<T>> Male { get; set; }
        public MaskItem<T, BodyData_Mask<T>> Female { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is GenderedBodyData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(GenderedBodyData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Male, rhs.Male)) return false;
            if (!object.Equals(this.Female, rhs.Female)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Male?.GetHashCode());
            ret = ret.CombineHashCode(this.Female?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (Male != null)
            {
                if (!eval(this.Male.Overall)) return false;
                if (this.Male.Specific != null && !this.Male.Specific.AllEqual(eval)) return false;
            }
            if (Female != null)
            {
                if (!eval(this.Female.Overall)) return false;
                if (this.Female.Specific != null && !this.Female.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public GenderedBodyData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new GenderedBodyData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(GenderedBodyData_Mask<R> obj, Func<T, R> eval)
        {
            if (this.Male != null)
            {
                obj.Male = new MaskItem<R, BodyData_Mask<R>>();
                obj.Male.Overall = eval(this.Male.Overall);
                if (this.Male.Specific != null)
                {
                    obj.Male.Specific = this.Male.Specific.Translate(eval);
                }
            }
            if (this.Female != null)
            {
                obj.Female = new MaskItem<R, BodyData_Mask<R>>();
                obj.Female.Overall = eval(this.Female.Overall);
                if (this.Female.Specific != null)
                {
                    obj.Female.Specific = this.Female.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(GenderedBodyData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, GenderedBodyData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(GenderedBodyData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male?.Overall ?? true)
                {
                    Male?.ToString(fg);
                }
                if (printMask?.Female?.Overall ?? true)
                {
                    Female?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class GenderedBodyData_ErrorMask : IErrorMask, IErrorMask<GenderedBodyData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, BodyData_ErrorMask> Male;
        public MaskItem<Exception, BodyData_ErrorMask> Female;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    this.Male = new MaskItem<Exception, BodyData_ErrorMask>(ex, null);
                    break;
                case GenderedBodyData_FieldIndex.Female:
                    this.Female = new MaskItem<Exception, BodyData_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            GenderedBodyData_FieldIndex enu = (GenderedBodyData_FieldIndex)index;
            switch (enu)
            {
                case GenderedBodyData_FieldIndex.Male:
                    this.Male = (MaskItem<Exception, BodyData_ErrorMask>)obj;
                    break;
                case GenderedBodyData_FieldIndex.Female:
                    this.Female = (MaskItem<Exception, BodyData_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Male != null) return true;
            if (Female != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("GenderedBodyData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            Male?.ToString(fg);
            Female?.ToString(fg);
        }
        #endregion

        #region Combine
        public GenderedBodyData_ErrorMask Combine(GenderedBodyData_ErrorMask rhs)
        {
            var ret = new GenderedBodyData_ErrorMask();
            ret.Male = new MaskItem<Exception, BodyData_ErrorMask>(this.Male.Overall.Combine(rhs.Male.Overall), ((IErrorMask<BodyData_ErrorMask>)this.Male.Specific).Combine(rhs.Male.Specific));
            ret.Female = new MaskItem<Exception, BodyData_ErrorMask>(this.Female.Overall.Combine(rhs.Female.Overall), ((IErrorMask<BodyData_ErrorMask>)this.Female.Specific).Combine(rhs.Female.Specific));
            return ret;
        }
        public static GenderedBodyData_ErrorMask Combine(GenderedBodyData_ErrorMask lhs, GenderedBodyData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class GenderedBodyData_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, BodyData_CopyMask> Male;
        public MaskItem<CopyOption, BodyData_CopyMask> Female;
        #endregion

    }
    #endregion




    #endregion

}
