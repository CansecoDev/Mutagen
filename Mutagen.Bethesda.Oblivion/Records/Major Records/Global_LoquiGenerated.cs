/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class Global : 
        MajorRecord,
        IGlobal,
        ILoquiObject<Global>,
        ILoquiObjectSetter,
        IPropertySupporter<Char>,
        IPropertySupporter<Single>,
        IEquatable<Global>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Global_Registration.Instance;
        public new static Global_Registration Registration => Global_Registration.Instance;

        #region Ctor
        public Global()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TypeChar
        protected Char _TypeChar;
        protected PropertyForwarder<Global, Char> _TypeCharForwarder;
        public INotifyingSetItemGetter<Char> TypeChar_Property => _TypeCharForwarder ?? (_TypeCharForwarder = new PropertyForwarder<Global, Char>(this, (int)Global_FieldIndex.TypeChar));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Char TypeChar
        {
            get => this._TypeChar;
            protected set => this.SetTypeChar(value);
        }
        protected void SetTypeChar(
            Char item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Global_FieldIndex.TypeChar];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && TypeChar == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Global_FieldIndex.TypeChar] = hasBeenSet;
            }
            if (_Char_subscriptions != null)
            {
                var tmp = TypeChar;
                _TypeChar = item;
                _Char_subscriptions.FireSubscriptions(
                    index: (int)Global_FieldIndex.TypeChar,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _TypeChar = item;
            }
        }
        protected void UnsetTypeChar()
        {
            _hasBeenSetTracker[(int)Global_FieldIndex.TypeChar] = false;
            TypeChar = default(Char);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Char> IGlobalGetter.TypeChar_Property => this.TypeChar_Property;
        #endregion
        #region RawFloat
        protected Single _RawFloat;
        protected PropertyForwarder<Global, Single> _RawFloatForwarder;
        public INotifyingSetItem<Single> RawFloat_Property => _RawFloatForwarder ?? (_RawFloatForwarder = new PropertyForwarder<Global, Single>(this, (int)Global_FieldIndex.RawFloat));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single RawFloat
        {
            get => this._RawFloat;
            set => this.SetRawFloat(value);
        }
        protected void SetRawFloat(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Global_FieldIndex.RawFloat];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && RawFloat == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Global_FieldIndex.RawFloat] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = RawFloat;
                _RawFloat = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Global_FieldIndex.RawFloat,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _RawFloat = item;
            }
        }
        protected void UnsetRawFloat()
        {
            _hasBeenSetTracker[(int)Global_FieldIndex.RawFloat] = false;
            RawFloat = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> IGlobal.RawFloat_Property => this.RawFloat_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> IGlobalGetter.RawFloat_Property => this.RawFloat_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => GlobalCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => GlobalCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => GlobalCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            GlobalCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Global>.GetEqualsMask(Global rhs) => GlobalCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IGlobalGetter>.GetEqualsMask(IGlobalGetter rhs) => GlobalCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return GlobalCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Global_Mask<bool> printMask = null)
        {
            return GlobalCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            GlobalCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Global_Mask<bool> GetHasBeenSetMask()
        {
            return GlobalCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Global rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Global rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (TypeChar_Property.HasBeenSet != rhs.TypeChar_Property.HasBeenSet) return false;
            if (TypeChar_Property.HasBeenSet)
            {
                if (this.TypeChar != rhs.TypeChar) return false;
            }
            if (RawFloat_Property.HasBeenSet != rhs.RawFloat_Property.HasBeenSet) return false;
            if (RawFloat_Property.HasBeenSet)
            {
                if (!this.RawFloat.EqualsWithin(rhs.RawFloat)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (TypeChar_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TypeChar).CombineHashCode(ret);
            }
            if (RawFloat_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RawFloat).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Global>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Global_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<Global>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = Global_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Global_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Global_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Global_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Global_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = Global_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out Global_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Global_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            GlobalCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            Global item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "RawFloat":
                    try
                    {
                        errorMask?.PushIndex((int)Global_FieldIndex.RawFloat);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single RawFloatParse,
                            errorMask: errorMask))
                        {
                            item.RawFloat = RawFloatParse;
                        }
                        else
                        {
                            item.UnsetRawFloat();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter Char
        protected ObjectCentralizationSubscriptions<Char> _Char_subscriptions;
        Char IPropertySupporter<Char>.Get(int index)
        {
            return GetChar(index: index);
        }

        protected Char GetChar(int index)
        {
            switch ((Global_FieldIndex)index)
            {
                case Global_FieldIndex.TypeChar:
                    return TypeChar;
                default:
                    throw new ArgumentException($"Unknown index for field type Char: {index}");
            }
        }

        void IPropertySupporter<Char>.Set(
            int index,
            Char item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetChar(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetChar(
            int index,
            Char item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Global_FieldIndex)index)
            {
                case Global_FieldIndex.TypeChar:
                    SetTypeChar(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Char: {index}");
            }
        }

        bool IPropertySupporter<Char>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Char>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Char>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetChar(
                index: index,
                cmds: cmds);
        }

        protected void UnsetChar(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Global_FieldIndex)index)
            {
                case Global_FieldIndex.TypeChar:
                    _hasBeenSetTracker[index] = false;
                    TypeChar = default(Char);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Char: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Char>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Char> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Char_subscriptions == null)
            {
                _Char_subscriptions = new ObjectCentralizationSubscriptions<Char>();
            }
            _Char_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Char>.Unsubscribe(
            int index,
            object owner)
        {
            _Char_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Char>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Char IPropertySupporter<Char>.DefaultValue(int index)
        {
            return DefaultValueChar(index: index);
        }

        protected Char DefaultValueChar(int index)
        {
            switch ((Global_FieldIndex)index)
            {
                case Global_FieldIndex.TypeChar:
                    return default(Char);
                default:
                    throw new ArgumentException($"Unknown index for field type Char: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected virtual Single GetSingle(int index)
        {
            switch ((Global_FieldIndex)index)
            {
                case Global_FieldIndex.RawFloat:
                    return RawFloat;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected virtual void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Global_FieldIndex)index)
            {
                case Global_FieldIndex.RawFloat:
                    SetRawFloat(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected virtual void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Global_FieldIndex)index)
            {
                case Global_FieldIndex.RawFloat:
                    _hasBeenSetTracker[index] = false;
                    RawFloat = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected virtual Single DefaultValueSingle(int index)
        {
            switch ((Global_FieldIndex)index)
            {
                case Global_FieldIndex.RawFloat:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Global_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Global_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Global_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Global_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Global_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            GlobalCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_TypeChar_Custom(
            MutagenFrame frame,
            Global item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_TypeChar_Custom(
            MutagenWriter writer,
            Global item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_TypeChar(
            MutagenWriter writer,
            Global item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_TypeChar_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Global item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "FNAM":
                    using (var subFrame = frame.SpawnWithLength(Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                    {
                        FillBinary_TypeChar_Custom(
                            frame: subFrame,
                            item: item,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)Global_FieldIndex.TypeChar);
                case "FLTV":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Global_FieldIndex.RawFloat);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single RawFloatParse,
                            errorMask: errorMask))
                        {
                            item.RawFloat = RawFloatParse;
                        }
                        else
                        {
                            item.UnsetRawFloat();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Global_FieldIndex.RawFloat);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Global Copy(
            Global_CopyMask copyMask = null,
            IGlobalGetter def = null)
        {
            return Global.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Global Copy(
            IGlobal item,
            Global_CopyMask copyMask = null,
            IGlobalGetter def = null)
        {
            Global ret = (Global)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Global Copy_ToLoqui(
            IGlobalGetter item,
            Global_CopyMask copyMask = null,
            IGlobalGetter def = null)
        {
            Global ret = (Global)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IGlobalGetter rhs,
            Global_CopyMask copyMask,
            IGlobalGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IGlobalGetter rhs,
            out Global_ErrorMask errorMask,
            Global_CopyMask copyMask = null,
            IGlobalGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GlobalCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Global_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IGlobalGetter rhs,
            ErrorMaskBuilder errorMask,
            Global_CopyMask copyMask = null,
            IGlobalGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            GlobalCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case Global_FieldIndex.RawFloat:
                    this.SetRawFloat(
                        (Single)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            GlobalCommon.Clear(this, cmds);
        }


        protected new static void CopyInInternal_Global(Global obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Global_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Global_FieldIndex.RawFloat:
                    obj.SetRawFloat(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Global obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IGlobal : IGlobalGetter, IMajorRecord, ILoquiClass<IGlobal, IGlobalGetter>, ILoquiClass<Global, IGlobalGetter>
    {
        new Single RawFloat { get; set; }
        new INotifyingSetItem<Single> RawFloat_Property { get; }

    }

    public partial interface IGlobalGetter : IMajorRecordGetter
    {
        #region TypeChar
        Char TypeChar { get; }
        INotifyingSetItemGetter<Char> TypeChar_Property { get; }

        #endregion
        #region RawFloat
        Single RawFloat { get; }
        INotifyingSetItemGetter<Single> RawFloat_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Global_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        TypeChar = 5,
        RawFloat = 6,
    }
    #endregion

    #region Registration
    public class Global_Registration : ILoquiRegistration
    {
        public static readonly Global_Registration Instance = new Global_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 12,
            version: 0);

        public const string GUID = "072ceda7-3182-4314-a4e3-927e68f39c3f";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(Global_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Global_ErrorMask);

        public static readonly Type ClassType = typeof(Global);

        public static readonly Type GetterType = typeof(IGlobalGetter);

        public static readonly Type SetterType = typeof(IGlobal);

        public static readonly Type CommonType = typeof(GlobalCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Global";

        public const string Name = "Global";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TYPECHAR":
                    return (ushort)Global_FieldIndex.TypeChar;
                case "RAWFLOAT":
                    return (ushort)Global_FieldIndex.RawFloat;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                case Global_FieldIndex.RawFloat:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                case Global_FieldIndex.RawFloat:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                case Global_FieldIndex.RawFloat:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    return "TypeChar";
                case Global_FieldIndex.RawFloat:
                    return "RawFloat";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    return true;
                case Global_FieldIndex.RawFloat:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    return true;
                case Global_FieldIndex.RawFloat:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    return typeof(Char);
                case Global_FieldIndex.RawFloat:
                    return typeof(Single);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType FLTV_HEADER = new RecordType("FLTV");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GLOB_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class GlobalCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IGlobal item,
            IGlobalGetter rhs,
            IGlobalGetter def,
            ErrorMaskBuilder errorMask,
            Global_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.RawFloat ?? true)
            {
                errorMask.PushIndex((int)Global_FieldIndex.RawFloat);
                try
                {
                    item.RawFloat_Property.SetToWithDefault(
                        rhs: rhs.RawFloat_Property,
                        def: def?.RawFloat_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IGlobal obj,
            NotifyingFireParameters cmds = null)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case Global_FieldIndex.RawFloat:
                    obj.RawFloat_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IGlobal obj,
            NotifyingUnsetParameters cmds = null)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    throw new ArgumentException($"Tried to unset at a derivative index {index}");
                case Global_FieldIndex.RawFloat:
                    obj.RawFloat_Property.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IGlobal obj)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    return obj.TypeChar_Property.HasBeenSet;
                case Global_FieldIndex.RawFloat:
                    return obj.RawFloat_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IGlobalGetter obj)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    return obj.TypeChar;
                case Global_FieldIndex.RawFloat:
                    return obj.RawFloat;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IGlobal item,
            NotifyingUnsetParameters cmds = null)
        {
            item.RawFloat_Property.Unset(cmds.ToUnsetParams());
        }

        public static Global_Mask<bool> GetEqualsMask(
            this IGlobalGetter item,
            IGlobalGetter rhs)
        {
            var ret = new Global_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IGlobalGetter item,
            IGlobalGetter rhs,
            Global_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.TypeChar = item.TypeChar_Property.Equals(rhs.TypeChar_Property, (l, r) => l == r);
            ret.RawFloat = item.RawFloat_Property.Equals(rhs.RawFloat_Property, (l, r) => l == r);
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IGlobalGetter item,
            string name = null,
            Global_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IGlobalGetter item,
            FileGeneration fg,
            string name = null,
            Global_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Global)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Global)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TypeChar ?? true)
                {
                    fg.AppendLine($"TypeChar => {item.TypeChar}");
                }
                if (printMask?.RawFloat ?? true)
                {
                    fg.AppendLine($"RawFloat => {item.RawFloat}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IGlobalGetter item,
            Global_Mask<bool?> checkMask)
        {
            if (checkMask.TypeChar.HasValue && checkMask.TypeChar.Value != item.TypeChar_Property.HasBeenSet) return false;
            if (checkMask.RawFloat.HasValue && checkMask.RawFloat.Value != item.RawFloat_Property.HasBeenSet) return false;
            return true;
        }

        public static Global_Mask<bool> GetHasBeenSetMask(IGlobalGetter item)
        {
            var ret = new Global_Mask<bool>();
            ret.TypeChar = item.TypeChar_Property.HasBeenSet;
            ret.RawFloat = item.RawFloat_Property.HasBeenSet;
            return ret;
        }

        public static Global_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Global_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Global_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Global_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Global_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Global_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Global_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IGlobalGetter item,
            bool doMasks,
            out Global_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = Global_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IGlobalGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Global");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Global");
            }
            if (item.RawFloat_Property.HasBeenSet)
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RawFloat),
                    item: item.RawFloat_Property,
                    fieldIndex: (int)Global_FieldIndex.RawFloat,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Global item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Global_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Global_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Global item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Global_Registration.GLOB_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Global item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Global.WriteBinary_TypeChar(
                writer: writer,
                item: item,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RawFloat_Property,
                fieldIndex: (int)Global_FieldIndex.RawFloat,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Global_Registration.FLTV_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Global_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Global_Mask<T>>
    {
        #region Ctors
        public Global_Mask()
        {
        }

        public Global_Mask(T initialValue)
        {
            this.TypeChar = initialValue;
            this.RawFloat = initialValue;
        }
        #endregion

        #region Members
        public T TypeChar;
        public T RawFloat;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Global_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Global_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.TypeChar, rhs.TypeChar)) return false;
            if (!object.Equals(this.RawFloat, rhs.RawFloat)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TypeChar?.GetHashCode());
            ret = ret.CombineHashCode(this.RawFloat?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.TypeChar)) return false;
            if (!eval(this.RawFloat)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Global_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Global_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Global_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.TypeChar = eval(this.TypeChar);
            obj.RawFloat = eval(this.RawFloat);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Global_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Global_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Global_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TypeChar ?? true)
                {
                    fg.AppendLine($"TypeChar => {TypeChar}");
                }
                if (printMask?.RawFloat ?? true)
                {
                    fg.AppendLine($"RawFloat => {RawFloat}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Global_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Global_ErrorMask>
    {
        #region Members
        public Exception TypeChar;
        public Exception RawFloat;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    return TypeChar;
                case Global_FieldIndex.RawFloat:
                    return RawFloat;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    this.TypeChar = ex;
                    break;
                case Global_FieldIndex.RawFloat:
                    this.RawFloat = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Global_FieldIndex enu = (Global_FieldIndex)index;
            switch (enu)
            {
                case Global_FieldIndex.TypeChar:
                    this.TypeChar = (Exception)obj;
                    break;
                case Global_FieldIndex.RawFloat:
                    this.RawFloat = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (TypeChar != null) return true;
            if (RawFloat != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Global_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"TypeChar => {TypeChar}");
            fg.AppendLine($"RawFloat => {RawFloat}");
        }
        #endregion

        #region Combine
        public Global_ErrorMask Combine(Global_ErrorMask rhs)
        {
            var ret = new Global_ErrorMask();
            ret.TypeChar = this.TypeChar.Combine(rhs.TypeChar);
            ret.RawFloat = this.RawFloat.Combine(rhs.RawFloat);
            return ret;
        }
        public static Global_ErrorMask Combine(Global_ErrorMask lhs, Global_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Global_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Global_ErrorMask();
        }
        #endregion

    }
    public class Global_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool TypeChar;
        public bool RawFloat;
        #endregion

    }
    #endregion





    #endregion

}
