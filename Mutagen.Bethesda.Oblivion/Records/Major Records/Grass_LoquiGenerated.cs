/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Grass : 
        OblivionMajorRecord,
        IGrass,
        IGrassInternal,
        ILoquiObject<Grass>,
        ILoquiObjectSetter,
        IEquatable<Grass>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Grass_Registration.Instance;
        public new static Grass_Registration Registration => Grass_Registration.Instance;

        #region Ctor
        protected Grass()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Grass_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Grass_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool IGrassGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, markSet, (int)Grass_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model IGrassGetter.Model => this.Model;
        #endregion
        #region Density
        private Byte _Density;
        public Byte Density
        {
            get => this._Density;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Density, value, nameof(Density));
            }
        }
        #endregion
        #region MinSlope
        private Byte _MinSlope;
        public Byte MinSlope
        {
            get => this._MinSlope;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._MinSlope, value, nameof(MinSlope));
            }
        }
        #endregion
        #region MaxSlope
        private Byte _MaxSlope;
        public Byte MaxSlope
        {
            get => this._MaxSlope;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._MaxSlope, value, nameof(MaxSlope));
            }
        }
        #endregion
        #region Fluff1
        private Byte _Fluff1;
        public Byte Fluff1
        {
            get => this._Fluff1;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Fluff1, value, nameof(Fluff1));
            }
        }
        #endregion
        #region UnitFromWaterAmount
        private UInt16 _UnitFromWaterAmount;
        public UInt16 UnitFromWaterAmount
        {
            get => this._UnitFromWaterAmount;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._UnitFromWaterAmount, value, nameof(UnitFromWaterAmount));
            }
        }
        #endregion
        #region Fluff2
        private UInt16 _Fluff2;
        public UInt16 Fluff2
        {
            get => this._Fluff2;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Fluff2, value, nameof(Fluff2));
            }
        }
        #endregion
        #region UnitFromWaterMode
        private Grass.UnitFromWaterType _UnitFromWaterMode;
        public Grass.UnitFromWaterType UnitFromWaterMode
        {
            get => this._UnitFromWaterMode;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._UnitFromWaterMode, value, nameof(UnitFromWaterMode));
            }
        }
        #endregion
        #region PositionRange
        private Single _PositionRange;
        public Single PositionRange
        {
            get => this._PositionRange;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._PositionRange, value, nameof(PositionRange));
            }
        }
        #endregion
        #region HeightRange
        private Single _HeightRange;
        public Single HeightRange
        {
            get => this._HeightRange;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._HeightRange, value, nameof(HeightRange));
            }
        }
        #endregion
        #region ColorRange
        private Single _ColorRange;
        public Single ColorRange
        {
            get => this._ColorRange;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._ColorRange, value, nameof(ColorRange));
            }
        }
        #endregion
        #region WavePeriod
        private Single _WavePeriod;
        public Single WavePeriod
        {
            get => this._WavePeriod;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._WavePeriod, value, nameof(WavePeriod));
            }
        }
        #endregion
        #region Flags
        private Grass.GrassFlag _Flags;
        public Grass.GrassFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region DATADataTypeState
        private Grass.DATADataType _DATADataTypeState;
        public Grass.DATADataType DATADataTypeState
        {
            get => this._DATADataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._DATADataTypeState, value, nameof(DATADataTypeState));
        }
        Grass.DATADataType IGrassInternal.DATADataTypeState
        {
            get => this.DATADataTypeState;
            set => this.DATADataTypeState = value;
        }
        Grass.DATADataType IGrassInternalGetter.DATADataTypeState
        {
            get => this.DATADataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask<Grass>.GetEqualsMask(Grass rhs, EqualsMaskHelper.Include include) => GrassCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IGrassGetter>.GetEqualsMask(IGrassGetter rhs, EqualsMaskHelper.Include include) => GrassCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Grass_Mask<bool> printMask = null)
        {
            return GrassCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            GrassCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Grass_Mask<bool> GetHasBeenSetMask()
        {
            return GrassCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Grass rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Grass rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_IsSet != rhs.Model_IsSet) return false;
            if (Model_IsSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (this.Density != rhs.Density) return false;
            if (this.MinSlope != rhs.MinSlope) return false;
            if (this.MaxSlope != rhs.MaxSlope) return false;
            if (this.Fluff1 != rhs.Fluff1) return false;
            if (this.UnitFromWaterAmount != rhs.UnitFromWaterAmount) return false;
            if (this.Fluff2 != rhs.Fluff2) return false;
            if (this.UnitFromWaterMode != rhs.UnitFromWaterMode) return false;
            if (!this.PositionRange.EqualsWithin(rhs.PositionRange)) return false;
            if (!this.HeightRange.EqualsWithin(rhs.HeightRange)) return false;
            if (!this.ColorRange.EqualsWithin(rhs.ColorRange)) return false;
            if (!this.WavePeriod.EqualsWithin(rhs.WavePeriod)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (this.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_IsSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Density).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MinSlope).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaxSlope).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UnitFromWaterAmount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UnitFromWaterMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PositionRange).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HeightRange).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorRange).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(WavePeriod).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Grass Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Grass_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Grass Create_Xml(
            XElement node,
            out Grass_ErrorMask errorMask,
            bool doMasks = true,
            Grass_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Grass Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Grass() : null;
                    break;
                default:
                    break;
            }
            var ret = new Grass();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    GrassCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Grass Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Grass_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Grass Create_Xml(
            string path,
            out Grass_ErrorMask errorMask,
            Grass_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Grass Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Grass_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Grass Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Grass_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Grass Create_Xml(
            Stream stream,
            out Grass_ErrorMask errorMask,
            Grass_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Grass Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Grass_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Grass_ErrorMask errorMask,
            bool doMasks = true,
            Grass_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            GrassXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Grass_ErrorMask errorMask,
            Grass_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Grass_ErrorMask errorMask,
            Grass_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            GrassXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            GrassXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            GrassXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            Grass item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Grass.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Grass_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public Grass(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(Grass obj, Grass rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Grass(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Grass Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Grass Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Grass_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Grass Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Grass>(
                record: new Grass(),
                frame: frame,
                errorMask: errorMask,
                recType: Grass_Registration.GRAS_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Grass_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            GrassBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            GrassBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            GrassBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            GrassBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Grass item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Grass item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.Create_Binary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Grass_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    item.Density = dataFrame.ReadUInt8();
                    item.MinSlope = dataFrame.ReadUInt8();
                    item.MaxSlope = dataFrame.ReadUInt8();
                    item.Fluff1 = dataFrame.ReadUInt8();
                    item.UnitFromWaterAmount = dataFrame.ReadUInt16();
                    item.Fluff2 = dataFrame.ReadUInt16();
                    if (EnumBinaryTranslation<Grass.UnitFromWaterType>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out Grass.UnitFromWaterType UnitFromWaterModeParse))
                    {
                        item.UnitFromWaterMode = UnitFromWaterModeParse;
                    }
                    else
                    {
                        item.UnitFromWaterMode = default(Grass.UnitFromWaterType);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single PositionRangeParse))
                    {
                        item.PositionRange = PositionRangeParse;
                    }
                    else
                    {
                        item.PositionRange = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single HeightRangeParse))
                    {
                        item.HeightRange = HeightRangeParse;
                    }
                    else
                    {
                        item.HeightRange = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single ColorRangeParse))
                    {
                        item.ColorRange = ColorRangeParse;
                    }
                    else
                    {
                        item.ColorRange = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single WavePeriodParse))
                    {
                        item.WavePeriod = WavePeriodParse;
                    }
                    else
                    {
                        item.WavePeriod = default(Single);
                    }
                    if (EnumBinaryTranslation<Grass.GrassFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out Grass.GrassFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Grass.GrassFlag);
                    }
                    return TryGet<int?>.Succeed((int)Grass_FieldIndex.Flags);
                }
                default:
                    return OblivionMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Grass Copy(
            Grass_CopyMask copyMask = null,
            IGrassGetter def = null)
        {
            return Grass.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Grass Copy(
            IGrass item,
            Grass_CopyMask copyMask = null,
            IGrassGetter def = null)
        {
            Grass ret;
            if (item.GetType().Equals(typeof(Grass)))
            {
                ret = new Grass();
            }
            else
            {
                ret = (Grass)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Grass Copy_ToLoqui(
            IGrassGetter item,
            Grass_CopyMask copyMask = null,
            IGrassGetter def = null)
        {
            Grass ret;
            if (item.GetType().Equals(typeof(Grass)))
            {
                ret = new Grass() as Grass;
            }
            else
            {
                ret = (Grass)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IMajorRecordGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IGrassGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IGrassGetter rhs,
            Grass_CopyMask copyMask,
            IGrassGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IGrassGetter rhs,
            out Grass_ErrorMask errorMask,
            Grass_CopyMask copyMask = null,
            IGrassGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GrassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IGrassGetter rhs,
            ErrorMaskBuilder errorMask,
            Grass_CopyMask copyMask = null,
            IGrassGetter def = null,
            bool doMasks = true)
        {
            GrassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case Grass_FieldIndex.Density:
                    this.Density = (Byte)obj;
                    break;
                case Grass_FieldIndex.MinSlope:
                    this.MinSlope = (Byte)obj;
                    break;
                case Grass_FieldIndex.MaxSlope:
                    this.MaxSlope = (Byte)obj;
                    break;
                case Grass_FieldIndex.Fluff1:
                    this.Fluff1 = (Byte)obj;
                    break;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    this.UnitFromWaterAmount = (UInt16)obj;
                    break;
                case Grass_FieldIndex.Fluff2:
                    this.Fluff2 = (UInt16)obj;
                    break;
                case Grass_FieldIndex.UnitFromWaterMode:
                    this.UnitFromWaterMode = (Grass.UnitFromWaterType)obj;
                    break;
                case Grass_FieldIndex.PositionRange:
                    this.PositionRange = (Single)obj;
                    break;
                case Grass_FieldIndex.HeightRange:
                    this.HeightRange = (Single)obj;
                    break;
                case Grass_FieldIndex.ColorRange:
                    this.ColorRange = (Single)obj;
                    break;
                case Grass_FieldIndex.WavePeriod:
                    this.WavePeriod = (Single)obj;
                    break;
                case Grass_FieldIndex.Flags:
                    this.Flags = (Grass.GrassFlag)obj;
                    break;
                case Grass_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Grass.DATADataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            GrassCommon.Clear(this);
        }


        public new static Grass Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Grass();
            foreach (var pair in fields)
            {
                CopyInInternal_Grass(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Grass(Grass obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Grass_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case Grass_FieldIndex.Density:
                    obj.Density = (Byte)pair.Value;
                    break;
                case Grass_FieldIndex.MinSlope:
                    obj.MinSlope = (Byte)pair.Value;
                    break;
                case Grass_FieldIndex.MaxSlope:
                    obj.MaxSlope = (Byte)pair.Value;
                    break;
                case Grass_FieldIndex.Fluff1:
                    obj.Fluff1 = (Byte)pair.Value;
                    break;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    obj.UnitFromWaterAmount = (UInt16)pair.Value;
                    break;
                case Grass_FieldIndex.Fluff2:
                    obj.Fluff2 = (UInt16)pair.Value;
                    break;
                case Grass_FieldIndex.UnitFromWaterMode:
                    obj.UnitFromWaterMode = (Grass.UnitFromWaterType)pair.Value;
                    break;
                case Grass_FieldIndex.PositionRange:
                    obj.PositionRange = (Single)pair.Value;
                    break;
                case Grass_FieldIndex.HeightRange:
                    obj.HeightRange = (Single)pair.Value;
                    break;
                case Grass_FieldIndex.ColorRange:
                    obj.ColorRange = (Single)pair.Value;
                    break;
                case Grass_FieldIndex.WavePeriod:
                    obj.WavePeriod = (Single)pair.Value;
                    break;
                case Grass_FieldIndex.Flags:
                    obj.Flags = (Grass.GrassFlag)pair.Value;
                    break;
                case Grass_FieldIndex.DATADataTypeState:
                    obj.DATADataTypeState = (Grass.DATADataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IGrass : IGrassGetter, IOblivionMajorRecord, ILoquiClass<IGrass, IGrassGetter>, ILoquiClass<Grass, IGrassGetter>
    {
        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model item, bool hasBeenSet = true);
        void Model_Unset();

        new Byte Density { get; set; }

        new Byte MinSlope { get; set; }

        new Byte MaxSlope { get; set; }

        new Byte Fluff1 { get; set; }

        new UInt16 UnitFromWaterAmount { get; set; }

        new UInt16 Fluff2 { get; set; }

        new Grass.UnitFromWaterType UnitFromWaterMode { get; set; }

        new Single PositionRange { get; set; }

        new Single HeightRange { get; set; }

        new Single ColorRange { get; set; }

        new Single WavePeriod { get; set; }

        new Grass.GrassFlag Flags { get; set; }

    }

    public partial interface IGrassInternal : IGrass, IGrassInternalGetter, IOblivionMajorRecordInternal
    {
        new Grass.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IGrassGetter : IOblivionMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Density
        Byte Density { get; }

        #endregion
        #region MinSlope
        Byte MinSlope { get; }

        #endregion
        #region MaxSlope
        Byte MaxSlope { get; }

        #endregion
        #region Fluff1
        Byte Fluff1 { get; }

        #endregion
        #region UnitFromWaterAmount
        UInt16 UnitFromWaterAmount { get; }

        #endregion
        #region Fluff2
        UInt16 Fluff2 { get; }

        #endregion
        #region UnitFromWaterMode
        Grass.UnitFromWaterType UnitFromWaterMode { get; }

        #endregion
        #region PositionRange
        Single PositionRange { get; }

        #endregion
        #region HeightRange
        Single HeightRange { get; }

        #endregion
        #region ColorRange
        Single ColorRange { get; }

        #endregion
        #region WavePeriod
        Single WavePeriod { get; }

        #endregion
        #region Flags
        Grass.GrassFlag Flags { get; }

        #endregion

    }

    public partial interface IGrassInternalGetter : IGrassGetter, IOblivionMajorRecordInternalGetter
    {
        #region DATADataTypeState
        Grass.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Grass_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        OblivionMajorRecordFlags = 5,
        Model = 6,
        Density = 7,
        MinSlope = 8,
        MaxSlope = 9,
        Fluff1 = 10,
        UnitFromWaterAmount = 11,
        Fluff2 = 12,
        UnitFromWaterMode = 13,
        PositionRange = 14,
        HeightRange = 15,
        ColorRange = 16,
        WavePeriod = 17,
        Flags = 18,
        DATADataTypeState = 19,
    }
    #endregion

    #region Registration
    public class Grass_Registration : ILoquiRegistration
    {
        public static readonly Grass_Registration Instance = new Grass_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 58,
            version: 0);

        public const string GUID = "08091e89-54fe-4950-b16d-c11d6c7faef3";

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(Grass_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Grass_ErrorMask);

        public static readonly Type ClassType = typeof(Grass);

        public static readonly Type GetterType = typeof(IGrassGetter);

        public static readonly Type InternalGetterType = typeof(IGrassInternalGetter);

        public static readonly Type SetterType = typeof(IGrass);

        public static readonly Type InternalSetterType = typeof(IGrassInternal);

        public static readonly Type CommonType = typeof(GrassCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Grass";

        public const string Name = "Grass";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Grass_FieldIndex.Model;
                case "DENSITY":
                    return (ushort)Grass_FieldIndex.Density;
                case "MINSLOPE":
                    return (ushort)Grass_FieldIndex.MinSlope;
                case "MAXSLOPE":
                    return (ushort)Grass_FieldIndex.MaxSlope;
                case "FLUFF1":
                    return (ushort)Grass_FieldIndex.Fluff1;
                case "UNITFROMWATERAMOUNT":
                    return (ushort)Grass_FieldIndex.UnitFromWaterAmount;
                case "FLUFF2":
                    return (ushort)Grass_FieldIndex.Fluff2;
                case "UNITFROMWATERMODE":
                    return (ushort)Grass_FieldIndex.UnitFromWaterMode;
                case "POSITIONRANGE":
                    return (ushort)Grass_FieldIndex.PositionRange;
                case "HEIGHTRANGE":
                    return (ushort)Grass_FieldIndex.HeightRange;
                case "COLORRANGE":
                    return (ushort)Grass_FieldIndex.ColorRange;
                case "WAVEPERIOD":
                    return (ushort)Grass_FieldIndex.WavePeriod;
                case "FLAGS":
                    return (ushort)Grass_FieldIndex.Flags;
                case "DATADATATYPESTATE":
                    return (ushort)Grass_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return true;
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return "Model";
                case Grass_FieldIndex.Density:
                    return "Density";
                case Grass_FieldIndex.MinSlope:
                    return "MinSlope";
                case Grass_FieldIndex.MaxSlope:
                    return "MaxSlope";
                case Grass_FieldIndex.Fluff1:
                    return "Fluff1";
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return "UnitFromWaterAmount";
                case Grass_FieldIndex.Fluff2:
                    return "Fluff2";
                case Grass_FieldIndex.UnitFromWaterMode:
                    return "UnitFromWaterMode";
                case Grass_FieldIndex.PositionRange:
                    return "PositionRange";
                case Grass_FieldIndex.HeightRange:
                    return "HeightRange";
                case Grass_FieldIndex.ColorRange:
                    return "ColorRange";
                case Grass_FieldIndex.WavePeriod:
                    return "WavePeriod";
                case Grass_FieldIndex.Flags:
                    return "Flags";
                case Grass_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return typeof(Model);
                case Grass_FieldIndex.Density:
                    return typeof(Byte);
                case Grass_FieldIndex.MinSlope:
                    return typeof(Byte);
                case Grass_FieldIndex.MaxSlope:
                    return typeof(Byte);
                case Grass_FieldIndex.Fluff1:
                    return typeof(Byte);
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return typeof(UInt16);
                case Grass_FieldIndex.Fluff2:
                    return typeof(UInt16);
                case Grass_FieldIndex.UnitFromWaterMode:
                    return typeof(Grass.UnitFromWaterType);
                case Grass_FieldIndex.PositionRange:
                    return typeof(Single);
                case Grass_FieldIndex.HeightRange:
                    return typeof(Single);
                case Grass_FieldIndex.ColorRange:
                    return typeof(Single);
                case Grass_FieldIndex.WavePeriod:
                    return typeof(Single);
                case Grass_FieldIndex.Flags:
                    return typeof(Grass.GrassFlag);
                case Grass_FieldIndex.DATADataTypeState:
                    return typeof(Grass.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GRAS_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class GrassCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IGrass item,
            IGrassGetter rhs,
            IGrassGetter def,
            ErrorMaskBuilder errorMask,
            Grass_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.Model = rhsModelItem;
                                break;
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            item: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Density ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.Density);
                try
                {
                    item.Density = rhs.Density;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MinSlope ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.MinSlope);
                try
                {
                    item.MinSlope = rhs.MinSlope;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaxSlope ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.MaxSlope);
                try
                {
                    item.MaxSlope = rhs.MaxSlope;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff1 ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.Fluff1);
                try
                {
                    item.Fluff1 = rhs.Fluff1;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.UnitFromWaterAmount ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.UnitFromWaterAmount);
                try
                {
                    item.UnitFromWaterAmount = rhs.UnitFromWaterAmount;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff2 ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.Fluff2);
                try
                {
                    item.Fluff2 = rhs.Fluff2;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.UnitFromWaterMode ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.UnitFromWaterMode);
                try
                {
                    item.UnitFromWaterMode = rhs.UnitFromWaterMode;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PositionRange ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.PositionRange);
                try
                {
                    item.PositionRange = rhs.PositionRange;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HeightRange ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.HeightRange);
                try
                {
                    item.HeightRange = rhs.HeightRange;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ColorRange ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.ColorRange);
                try
                {
                    item.ColorRange = rhs.ColorRange;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.WavePeriod ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.WavePeriod);
                try
                {
                    item.WavePeriod = rhs.WavePeriod;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IGrass item)
        {
            item.Model_Unset();
            item.Density = default(Byte);
            item.MinSlope = default(Byte);
            item.MaxSlope = default(Byte);
            item.Fluff1 = default(Byte);
            item.UnitFromWaterAmount = default(UInt16);
            item.Fluff2 = default(UInt16);
            item.UnitFromWaterMode = default(Grass.UnitFromWaterType);
            item.PositionRange = default(Single);
            item.HeightRange = default(Single);
            item.ColorRange = default(Single);
            item.WavePeriod = default(Single);
            item.Flags = default(Grass.GrassFlag);
        }

        public static Grass_Mask<bool> GetEqualsMask(
            this IGrassGetter item,
            IGrassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Grass_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IGrassGetter item,
            IGrassGetter rhs,
            Grass_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Density = item.Density == rhs.Density;
            ret.MinSlope = item.MinSlope == rhs.MinSlope;
            ret.MaxSlope = item.MaxSlope == rhs.MaxSlope;
            ret.Fluff1 = item.Fluff1 == rhs.Fluff1;
            ret.UnitFromWaterAmount = item.UnitFromWaterAmount == rhs.UnitFromWaterAmount;
            ret.Fluff2 = item.Fluff2 == rhs.Fluff2;
            ret.UnitFromWaterMode = item.UnitFromWaterMode == rhs.UnitFromWaterMode;
            ret.PositionRange = item.PositionRange.EqualsWithin(rhs.PositionRange);
            ret.HeightRange = item.HeightRange.EqualsWithin(rhs.HeightRange);
            ret.ColorRange = item.ColorRange.EqualsWithin(rhs.ColorRange);
            ret.WavePeriod = item.WavePeriod.EqualsWithin(rhs.WavePeriod);
            ret.Flags = item.Flags == rhs.Flags;
            OblivionMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IGrassGetter item,
            string name = null,
            Grass_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IGrassGetter item,
            FileGeneration fg,
            string name = null,
            Grass_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Grass)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Grass)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Density ?? true)
                {
                    fg.AppendLine($"Density => {item.Density}");
                }
                if (printMask?.MinSlope ?? true)
                {
                    fg.AppendLine($"MinSlope => {item.MinSlope}");
                }
                if (printMask?.MaxSlope ?? true)
                {
                    fg.AppendLine($"MaxSlope => {item.MaxSlope}");
                }
                if (printMask?.Fluff1 ?? true)
                {
                    fg.AppendLine($"Fluff1 => {item.Fluff1}");
                }
                if (printMask?.UnitFromWaterAmount ?? true)
                {
                    fg.AppendLine($"UnitFromWaterAmount => {item.UnitFromWaterAmount}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {item.Fluff2}");
                }
                if (printMask?.UnitFromWaterMode ?? true)
                {
                    fg.AppendLine($"UnitFromWaterMode => {item.UnitFromWaterMode}");
                }
                if (printMask?.PositionRange ?? true)
                {
                    fg.AppendLine($"PositionRange => {item.PositionRange}");
                }
                if (printMask?.HeightRange ?? true)
                {
                    fg.AppendLine($"HeightRange => {item.HeightRange}");
                }
                if (printMask?.ColorRange ?? true)
                {
                    fg.AppendLine($"ColorRange => {item.ColorRange}");
                }
                if (printMask?.WavePeriod ?? true)
                {
                    fg.AppendLine($"WavePeriod => {item.WavePeriod}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IGrassGetter item,
            Grass_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            return true;
        }

        public static Grass_Mask<bool> GetHasBeenSetMask(IGrassGetter item)
        {
            var ret = new Grass_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Density = true;
            ret.MinSlope = true;
            ret.MaxSlope = true;
            ret.Fluff1 = true;
            ret.UnitFromWaterAmount = true;
            ret.Fluff2 = true;
            ret.UnitFromWaterMode = true;
            ret.PositionRange = true;
            ret.HeightRange = true;
            ret.ColorRange = true;
            ret.WavePeriod = true;
            ret.Flags = true;
            ret.DATADataTypeState = true;
            return ret;
        }

        public static Grass_FieldIndex? ConvertFieldIndex(OblivionMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Grass_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Grass_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Grass_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Grass_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Grass_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.RecordType:
                    return (Grass_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Grass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Grass_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Grass_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Grass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        public static void FillPublic_Xml(
            this Grass item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GrassCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Grass item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Grass_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Density":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.Density);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte DensityParse,
                            errorMask: errorMask))
                        {
                            item.Density = DensityParse;
                        }
                        else
                        {
                            item.Density = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Grass.DATADataType.Has;
                    break;
                case "MinSlope":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.MinSlope);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MinSlopeParse,
                            errorMask: errorMask))
                        {
                            item.MinSlope = MinSlopeParse;
                        }
                        else
                        {
                            item.MinSlope = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxSlope":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.MaxSlope);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MaxSlopeParse,
                            errorMask: errorMask))
                        {
                            item.MaxSlope = MaxSlopeParse;
                        }
                        else
                        {
                            item.MaxSlope = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff1":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.Fluff1);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte Fluff1Parse,
                            errorMask: errorMask))
                        {
                            item.Fluff1 = Fluff1Parse;
                        }
                        else
                        {
                            item.Fluff1 = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnitFromWaterAmount":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.UnitFromWaterAmount);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 UnitFromWaterAmountParse,
                            errorMask: errorMask))
                        {
                            item.UnitFromWaterAmount = UnitFromWaterAmountParse;
                        }
                        else
                        {
                            item.UnitFromWaterAmount = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff2":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.Fluff2);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 Fluff2Parse,
                            errorMask: errorMask))
                        {
                            item.Fluff2 = Fluff2Parse;
                        }
                        else
                        {
                            item.Fluff2 = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnitFromWaterMode":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.UnitFromWaterMode);
                        if (EnumXmlTranslation<Grass.UnitFromWaterType>.Instance.Parse(
                            node: node,
                            item: out Grass.UnitFromWaterType UnitFromWaterModeParse,
                            errorMask: errorMask))
                        {
                            item.UnitFromWaterMode = UnitFromWaterModeParse;
                        }
                        else
                        {
                            item.UnitFromWaterMode = default(Grass.UnitFromWaterType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PositionRange":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.PositionRange);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single PositionRangeParse,
                            errorMask: errorMask))
                        {
                            item.PositionRange = PositionRangeParse;
                        }
                        else
                        {
                            item.PositionRange = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeightRange":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.HeightRange);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single HeightRangeParse,
                            errorMask: errorMask))
                        {
                            item.HeightRange = HeightRangeParse;
                        }
                        else
                        {
                            item.HeightRange = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorRange":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.ColorRange);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ColorRangeParse,
                            errorMask: errorMask))
                        {
                            item.ColorRange = ColorRangeParse;
                        }
                        else
                        {
                            item.ColorRange = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WavePeriod":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.WavePeriod);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WavePeriodParse,
                            errorMask: errorMask))
                        {
                            item.WavePeriod = WavePeriodParse;
                        }
                        else
                        {
                            item.WavePeriod = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.Flags);
                        if (EnumXmlTranslation<Grass.GrassFlag>.Instance.Parse(
                            node: node,
                            item: out Grass.GrassFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Grass.GrassFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<Grass.DATADataType>.Instance.Parse(
                            node: node,
                            item: out Grass.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(Grass.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class GrassXmlTranslation : OblivionMajorRecordXmlTranslation
    {
        public new readonly static GrassXmlTranslation Instance = new GrassXmlTranslation();

        public static void WriteToNode_Xml(
            IGrassInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlTranslation.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Grass_FieldIndex.Model) ?? true))
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: node,
                    item: item.Model,
                    name: nameof(item.Model),
                    fieldIndex: (int)Grass_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Grass_FieldIndex.Model));
            }
            if (item.DATADataTypeState.HasFlag(Grass.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.Density) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Density),
                        item: item.Density,
                        fieldIndex: (int)Grass_FieldIndex.Density,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.MinSlope) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MinSlope),
                        item: item.MinSlope,
                        fieldIndex: (int)Grass_FieldIndex.MinSlope,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.MaxSlope) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaxSlope),
                        item: item.MaxSlope,
                        fieldIndex: (int)Grass_FieldIndex.MaxSlope,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.Fluff1) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff1),
                        item: item.Fluff1,
                        fieldIndex: (int)Grass_FieldIndex.Fluff1,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.UnitFromWaterAmount) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.UnitFromWaterAmount),
                        item: item.UnitFromWaterAmount,
                        fieldIndex: (int)Grass_FieldIndex.UnitFromWaterAmount,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.Fluff2) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff2),
                        item: item.Fluff2,
                        fieldIndex: (int)Grass_FieldIndex.Fluff2,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.UnitFromWaterMode) ?? true))
                {
                    EnumXmlTranslation<Grass.UnitFromWaterType>.Instance.Write(
                        node: node,
                        name: nameof(item.UnitFromWaterMode),
                        item: item.UnitFromWaterMode,
                        fieldIndex: (int)Grass_FieldIndex.UnitFromWaterMode,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.PositionRange) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PositionRange),
                        item: item.PositionRange,
                        fieldIndex: (int)Grass_FieldIndex.PositionRange,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.HeightRange) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HeightRange),
                        item: item.HeightRange,
                        fieldIndex: (int)Grass_FieldIndex.HeightRange,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.ColorRange) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ColorRange),
                        item: item.ColorRange,
                        fieldIndex: (int)Grass_FieldIndex.ColorRange,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.WavePeriod) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.WavePeriod),
                        item: item.WavePeriod,
                        fieldIndex: (int)Grass_FieldIndex.WavePeriod,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Grass.GrassFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Grass_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Grass.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Grass_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        #region Xml Write
        public void Write_Xml(
            XElement node,
            IGrassInternalGetter item,
            bool doMasks,
            out Grass_ErrorMask errorMask,
            Grass_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Xml(
            XElement node,
            IGrassInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Grass");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Grass");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

    }
    #endregion

    #region Mask
    public class Grass_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Grass_Mask<T>>
    {
        #region Ctors
        public Grass_Mask()
        {
        }

        public Grass_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Density = initialValue;
            this.MinSlope = initialValue;
            this.MaxSlope = initialValue;
            this.Fluff1 = initialValue;
            this.UnitFromWaterAmount = initialValue;
            this.Fluff2 = initialValue;
            this.UnitFromWaterMode = initialValue;
            this.PositionRange = initialValue;
            this.HeightRange = initialValue;
            this.ColorRange = initialValue;
            this.WavePeriod = initialValue;
            this.Flags = initialValue;
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Density;
        public T MinSlope;
        public T MaxSlope;
        public T Fluff1;
        public T UnitFromWaterAmount;
        public T Fluff2;
        public T UnitFromWaterMode;
        public T PositionRange;
        public T HeightRange;
        public T ColorRange;
        public T WavePeriod;
        public T Flags;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Grass_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Grass_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Density, rhs.Density)) return false;
            if (!object.Equals(this.MinSlope, rhs.MinSlope)) return false;
            if (!object.Equals(this.MaxSlope, rhs.MaxSlope)) return false;
            if (!object.Equals(this.Fluff1, rhs.Fluff1)) return false;
            if (!object.Equals(this.UnitFromWaterAmount, rhs.UnitFromWaterAmount)) return false;
            if (!object.Equals(this.Fluff2, rhs.Fluff2)) return false;
            if (!object.Equals(this.UnitFromWaterMode, rhs.UnitFromWaterMode)) return false;
            if (!object.Equals(this.PositionRange, rhs.PositionRange)) return false;
            if (!object.Equals(this.HeightRange, rhs.HeightRange)) return false;
            if (!object.Equals(this.ColorRange, rhs.ColorRange)) return false;
            if (!object.Equals(this.WavePeriod, rhs.WavePeriod)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Density?.GetHashCode());
            ret = ret.CombineHashCode(this.MinSlope?.GetHashCode());
            ret = ret.CombineHashCode(this.MaxSlope?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff1?.GetHashCode());
            ret = ret.CombineHashCode(this.UnitFromWaterAmount?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff2?.GetHashCode());
            ret = ret.CombineHashCode(this.UnitFromWaterMode?.GetHashCode());
            ret = ret.CombineHashCode(this.PositionRange?.GetHashCode());
            ret = ret.CombineHashCode(this.HeightRange?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorRange?.GetHashCode());
            ret = ret.CombineHashCode(this.WavePeriod?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Density)) return false;
            if (!eval(this.MinSlope)) return false;
            if (!eval(this.MaxSlope)) return false;
            if (!eval(this.Fluff1)) return false;
            if (!eval(this.UnitFromWaterAmount)) return false;
            if (!eval(this.Fluff2)) return false;
            if (!eval(this.UnitFromWaterMode)) return false;
            if (!eval(this.PositionRange)) return false;
            if (!eval(this.HeightRange)) return false;
            if (!eval(this.ColorRange)) return false;
            if (!eval(this.WavePeriod)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Grass_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Grass_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Grass_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Density = eval(this.Density);
            obj.MinSlope = eval(this.MinSlope);
            obj.MaxSlope = eval(this.MaxSlope);
            obj.Fluff1 = eval(this.Fluff1);
            obj.UnitFromWaterAmount = eval(this.UnitFromWaterAmount);
            obj.Fluff2 = eval(this.Fluff2);
            obj.UnitFromWaterMode = eval(this.UnitFromWaterMode);
            obj.PositionRange = eval(this.PositionRange);
            obj.HeightRange = eval(this.HeightRange);
            obj.ColorRange = eval(this.ColorRange);
            obj.WavePeriod = eval(this.WavePeriod);
            obj.Flags = eval(this.Flags);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Grass_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Grass_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Grass_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Density ?? true)
                {
                    fg.AppendLine($"Density => {Density}");
                }
                if (printMask?.MinSlope ?? true)
                {
                    fg.AppendLine($"MinSlope => {MinSlope}");
                }
                if (printMask?.MaxSlope ?? true)
                {
                    fg.AppendLine($"MaxSlope => {MaxSlope}");
                }
                if (printMask?.Fluff1 ?? true)
                {
                    fg.AppendLine($"Fluff1 => {Fluff1}");
                }
                if (printMask?.UnitFromWaterAmount ?? true)
                {
                    fg.AppendLine($"UnitFromWaterAmount => {UnitFromWaterAmount}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {Fluff2}");
                }
                if (printMask?.UnitFromWaterMode ?? true)
                {
                    fg.AppendLine($"UnitFromWaterMode => {UnitFromWaterMode}");
                }
                if (printMask?.PositionRange ?? true)
                {
                    fg.AppendLine($"PositionRange => {PositionRange}");
                }
                if (printMask?.HeightRange ?? true)
                {
                    fg.AppendLine($"HeightRange => {HeightRange}");
                }
                if (printMask?.ColorRange ?? true)
                {
                    fg.AppendLine($"ColorRange => {ColorRange}");
                }
                if (printMask?.WavePeriod ?? true)
                {
                    fg.AppendLine($"WavePeriod => {WavePeriod}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Grass_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Grass_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Density;
        public Exception MinSlope;
        public Exception MaxSlope;
        public Exception Fluff1;
        public Exception UnitFromWaterAmount;
        public Exception Fluff2;
        public Exception UnitFromWaterMode;
        public Exception PositionRange;
        public Exception HeightRange;
        public Exception ColorRange;
        public Exception WavePeriod;
        public Exception Flags;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return Model;
                case Grass_FieldIndex.Density:
                    return Density;
                case Grass_FieldIndex.MinSlope:
                    return MinSlope;
                case Grass_FieldIndex.MaxSlope:
                    return MaxSlope;
                case Grass_FieldIndex.Fluff1:
                    return Fluff1;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return UnitFromWaterAmount;
                case Grass_FieldIndex.Fluff2:
                    return Fluff2;
                case Grass_FieldIndex.UnitFromWaterMode:
                    return UnitFromWaterMode;
                case Grass_FieldIndex.PositionRange:
                    return PositionRange;
                case Grass_FieldIndex.HeightRange:
                    return HeightRange;
                case Grass_FieldIndex.ColorRange:
                    return ColorRange;
                case Grass_FieldIndex.WavePeriod:
                    return WavePeriod;
                case Grass_FieldIndex.Flags:
                    return Flags;
                case Grass_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Grass_FieldIndex.Density:
                    this.Density = ex;
                    break;
                case Grass_FieldIndex.MinSlope:
                    this.MinSlope = ex;
                    break;
                case Grass_FieldIndex.MaxSlope:
                    this.MaxSlope = ex;
                    break;
                case Grass_FieldIndex.Fluff1:
                    this.Fluff1 = ex;
                    break;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    this.UnitFromWaterAmount = ex;
                    break;
                case Grass_FieldIndex.Fluff2:
                    this.Fluff2 = ex;
                    break;
                case Grass_FieldIndex.UnitFromWaterMode:
                    this.UnitFromWaterMode = ex;
                    break;
                case Grass_FieldIndex.PositionRange:
                    this.PositionRange = ex;
                    break;
                case Grass_FieldIndex.HeightRange:
                    this.HeightRange = ex;
                    break;
                case Grass_FieldIndex.ColorRange:
                    this.ColorRange = ex;
                    break;
                case Grass_FieldIndex.WavePeriod:
                    this.WavePeriod = ex;
                    break;
                case Grass_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Grass_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Grass_FieldIndex.Density:
                    this.Density = (Exception)obj;
                    break;
                case Grass_FieldIndex.MinSlope:
                    this.MinSlope = (Exception)obj;
                    break;
                case Grass_FieldIndex.MaxSlope:
                    this.MaxSlope = (Exception)obj;
                    break;
                case Grass_FieldIndex.Fluff1:
                    this.Fluff1 = (Exception)obj;
                    break;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    this.UnitFromWaterAmount = (Exception)obj;
                    break;
                case Grass_FieldIndex.Fluff2:
                    this.Fluff2 = (Exception)obj;
                    break;
                case Grass_FieldIndex.UnitFromWaterMode:
                    this.UnitFromWaterMode = (Exception)obj;
                    break;
                case Grass_FieldIndex.PositionRange:
                    this.PositionRange = (Exception)obj;
                    break;
                case Grass_FieldIndex.HeightRange:
                    this.HeightRange = (Exception)obj;
                    break;
                case Grass_FieldIndex.ColorRange:
                    this.ColorRange = (Exception)obj;
                    break;
                case Grass_FieldIndex.WavePeriod:
                    this.WavePeriod = (Exception)obj;
                    break;
                case Grass_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Grass_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Density != null) return true;
            if (MinSlope != null) return true;
            if (MaxSlope != null) return true;
            if (Fluff1 != null) return true;
            if (UnitFromWaterAmount != null) return true;
            if (Fluff2 != null) return true;
            if (UnitFromWaterMode != null) return true;
            if (PositionRange != null) return true;
            if (HeightRange != null) return true;
            if (ColorRange != null) return true;
            if (WavePeriod != null) return true;
            if (Flags != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Grass_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"Density => {Density}");
            fg.AppendLine($"MinSlope => {MinSlope}");
            fg.AppendLine($"MaxSlope => {MaxSlope}");
            fg.AppendLine($"Fluff1 => {Fluff1}");
            fg.AppendLine($"UnitFromWaterAmount => {UnitFromWaterAmount}");
            fg.AppendLine($"Fluff2 => {Fluff2}");
            fg.AppendLine($"UnitFromWaterMode => {UnitFromWaterMode}");
            fg.AppendLine($"PositionRange => {PositionRange}");
            fg.AppendLine($"HeightRange => {HeightRange}");
            fg.AppendLine($"ColorRange => {ColorRange}");
            fg.AppendLine($"WavePeriod => {WavePeriod}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Grass_ErrorMask Combine(Grass_ErrorMask rhs)
        {
            var ret = new Grass_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Density = this.Density.Combine(rhs.Density);
            ret.MinSlope = this.MinSlope.Combine(rhs.MinSlope);
            ret.MaxSlope = this.MaxSlope.Combine(rhs.MaxSlope);
            ret.Fluff1 = this.Fluff1.Combine(rhs.Fluff1);
            ret.UnitFromWaterAmount = this.UnitFromWaterAmount.Combine(rhs.UnitFromWaterAmount);
            ret.Fluff2 = this.Fluff2.Combine(rhs.Fluff2);
            ret.UnitFromWaterMode = this.UnitFromWaterMode.Combine(rhs.UnitFromWaterMode);
            ret.PositionRange = this.PositionRange.Combine(rhs.PositionRange);
            ret.HeightRange = this.HeightRange.Combine(rhs.HeightRange);
            ret.ColorRange = this.ColorRange.Combine(rhs.ColorRange);
            ret.WavePeriod = this.WavePeriod.Combine(rhs.WavePeriod);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Grass_ErrorMask Combine(Grass_ErrorMask lhs, Grass_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Grass_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Grass_ErrorMask();
        }
        #endregion

    }
    public class Grass_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Grass_CopyMask()
        {
        }

        public Grass_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Density = defaultOn;
            this.MinSlope = defaultOn;
            this.MaxSlope = defaultOn;
            this.Fluff1 = defaultOn;
            this.UnitFromWaterAmount = defaultOn;
            this.Fluff2 = defaultOn;
            this.UnitFromWaterMode = defaultOn;
            this.PositionRange = defaultOn;
            this.HeightRange = defaultOn;
            this.ColorRange = defaultOn;
            this.WavePeriod = defaultOn;
            this.Flags = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Density;
        public bool MinSlope;
        public bool MaxSlope;
        public bool Fluff1;
        public bool UnitFromWaterAmount;
        public bool Fluff2;
        public bool UnitFromWaterMode;
        public bool PositionRange;
        public bool HeightRange;
        public bool ColorRange;
        public bool WavePeriod;
        public bool Flags;
        public bool DATADataTypeState;
        #endregion

    }

    public class Grass_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Density;
        public bool MinSlope;
        public bool MaxSlope;
        public bool Fluff1;
        public bool UnitFromWaterAmount;
        public bool Fluff2;
        public bool UnitFromWaterMode;
        public bool PositionRange;
        public bool HeightRange;
        public bool ColorRange;
        public bool WavePeriod;
        public bool Flags;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Grass_TranslationMask()
            : base()
        {
        }

        public Grass_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Density = defaultOn;
            this.MinSlope = defaultOn;
            this.MaxSlope = defaultOn;
            this.Fluff1 = defaultOn;
            this.UnitFromWaterAmount = defaultOn;
            this.Fluff2 = defaultOn;
            this.UnitFromWaterMode = defaultOn;
            this.PositionRange = defaultOn;
            this.HeightRange = defaultOn;
            this.ColorRange = defaultOn;
            this.WavePeriod = defaultOn;
            this.Flags = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Density, null));
            ret.Add((MinSlope, null));
            ret.Add((MaxSlope, null));
            ret.Add((Fluff1, null));
            ret.Add((UnitFromWaterAmount, null));
            ret.Add((Fluff2, null));
            ret.Add((UnitFromWaterMode, null));
            ret.Add((PositionRange, null));
            ret.Add((HeightRange, null));
            ret.Add((ColorRange, null));
            ret.Add((WavePeriod, null));
            ret.Add((Flags, null));
            ret.Add((DATADataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class GrassBinaryTranslation : OblivionMajorRecordBinaryTranslation
    {
        public new readonly static GrassBinaryTranslation Instance = new GrassBinaryTranslation();

        public static void Write_Binary_Embedded(
            IGrassInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryTranslation.Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_Binary_RecordTypes(
            IGrassInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryTranslation.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Model_IsSet)
            {
                LoquiBinaryTranslation<Model>.Instance.Write(
                    writer: writer,
                    item: item.Model,
                    fieldIndex: (int)Grass_FieldIndex.Model,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.DATADataTypeState.HasFlag(Grass.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Grass_Registration.DATA_HEADER)))
                {
                    writer.Write(item.Density);
                    writer.Write(item.MinSlope);
                    writer.Write(item.MaxSlope);
                    writer.Write(item.Fluff1);
                    writer.Write(item.UnitFromWaterAmount);
                    writer.Write(item.Fluff2);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Grass.UnitFromWaterType>.Instance.Write(
                        writer,
                        item.UnitFromWaterMode,
                        length: 4);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.PositionRange);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HeightRange);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.ColorRange);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.WavePeriod);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Grass.GrassFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                }
            }
        }

        #region Binary Write
        public void Write_Binary(
            MutagenWriter writer,
            IGrassInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Grass_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            IGrassInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Grass_Registration.GRAS_HEADER,
                type: ObjectType.Record))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

    }
    #endregion

    #endregion

}
