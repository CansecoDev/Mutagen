/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Grass : 
        MajorRecord,
        IGrass,
        ILoquiObject<Grass>,
        ILoquiObjectSetter,
        IPropertySupporter<Model>,
        IPropertySupporter<Byte>,
        IPropertySupporter<UInt16>,
        IPropertySupporter<Grass.UnitFromWaterType>,
        IPropertySupporter<Single>,
        IPropertySupporter<Grass.GrassFlag>,
        IEquatable<Grass>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Grass_Registration.Instance;
        public new static Grass_Registration Registration => Grass_Registration.Instance;

        #region Ctor
        public Grass()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        protected Model _Model;
        protected PropertyForwarder<Grass, Model> _ModelForwarder;
        public INotifyingSetItem<Model> Model_Property => _ModelForwarder ?? (_ModelForwarder = new PropertyForwarder<Grass, Model>(this, (int)Grass_FieldIndex.Model));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => this._Model;
            set => this.SetModel(value);
        }
        protected void SetModel(
            Model item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.Model];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Model, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.Model] = hasBeenSet;
            }
            if (_Model_subscriptions != null)
            {
                var tmp = Model;
                _Model = item;
                _Model_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.Model,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Model = item;
            }
        }
        protected void UnsetModel()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.Model] = false;
            Model = default(Model);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Model> IGrass.Model_Property => this.Model_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Model> IGrassGetter.Model_Property => this.Model_Property;
        #endregion
        #region Density
        protected Byte _Density;
        protected PropertyForwarder<Grass, Byte> _DensityForwarder;
        public INotifyingSetItem<Byte> Density_Property => _DensityForwarder ?? (_DensityForwarder = new PropertyForwarder<Grass, Byte>(this, (int)Grass_FieldIndex.Density));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Density
        {
            get => this._Density;
            set => this.SetDensity(value);
        }
        protected void SetDensity(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.Density];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Density == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.Density] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Density;
                _Density = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.Density,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Density = item;
            }
        }
        protected void UnsetDensity()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.Density] = false;
            Density = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IGrass.Density_Property => this.Density_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IGrassGetter.Density_Property => this.Density_Property;
        #endregion
        #region MinSlope
        protected Byte _MinSlope;
        protected PropertyForwarder<Grass, Byte> _MinSlopeForwarder;
        public INotifyingSetItem<Byte> MinSlope_Property => _MinSlopeForwarder ?? (_MinSlopeForwarder = new PropertyForwarder<Grass, Byte>(this, (int)Grass_FieldIndex.MinSlope));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte MinSlope
        {
            get => this._MinSlope;
            set => this.SetMinSlope(value);
        }
        protected void SetMinSlope(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.MinSlope];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MinSlope == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.MinSlope] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = MinSlope;
                _MinSlope = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.MinSlope,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MinSlope = item;
            }
        }
        protected void UnsetMinSlope()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.MinSlope] = false;
            MinSlope = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IGrass.MinSlope_Property => this.MinSlope_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IGrassGetter.MinSlope_Property => this.MinSlope_Property;
        #endregion
        #region MaxSlope
        protected Byte _MaxSlope;
        protected PropertyForwarder<Grass, Byte> _MaxSlopeForwarder;
        public INotifyingSetItem<Byte> MaxSlope_Property => _MaxSlopeForwarder ?? (_MaxSlopeForwarder = new PropertyForwarder<Grass, Byte>(this, (int)Grass_FieldIndex.MaxSlope));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte MaxSlope
        {
            get => this._MaxSlope;
            set => this.SetMaxSlope(value);
        }
        protected void SetMaxSlope(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.MaxSlope];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MaxSlope == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.MaxSlope] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = MaxSlope;
                _MaxSlope = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.MaxSlope,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MaxSlope = item;
            }
        }
        protected void UnsetMaxSlope()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.MaxSlope] = false;
            MaxSlope = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IGrass.MaxSlope_Property => this.MaxSlope_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IGrassGetter.MaxSlope_Property => this.MaxSlope_Property;
        #endregion
        #region UnitFromWaterAmount
        protected UInt16 _UnitFromWaterAmount;
        protected PropertyForwarder<Grass, UInt16> _UnitFromWaterAmountForwarder;
        public INotifyingSetItem<UInt16> UnitFromWaterAmount_Property => _UnitFromWaterAmountForwarder ?? (_UnitFromWaterAmountForwarder = new PropertyForwarder<Grass, UInt16>(this, (int)Grass_FieldIndex.UnitFromWaterAmount));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 UnitFromWaterAmount
        {
            get => this._UnitFromWaterAmount;
            set => this.SetUnitFromWaterAmount(value);
        }
        protected void SetUnitFromWaterAmount(
            UInt16 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.UnitFromWaterAmount];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && UnitFromWaterAmount == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.UnitFromWaterAmount] = hasBeenSet;
            }
            if (_UInt16_subscriptions != null)
            {
                var tmp = UnitFromWaterAmount;
                _UnitFromWaterAmount = item;
                _UInt16_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.UnitFromWaterAmount,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _UnitFromWaterAmount = item;
            }
        }
        protected void UnsetUnitFromWaterAmount()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.UnitFromWaterAmount] = false;
            UnitFromWaterAmount = default(UInt16);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> IGrass.UnitFromWaterAmount_Property => this.UnitFromWaterAmount_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> IGrassGetter.UnitFromWaterAmount_Property => this.UnitFromWaterAmount_Property;
        #endregion
        #region UnitFromWaterMode
        protected Grass.UnitFromWaterType _UnitFromWaterMode;
        protected PropertyForwarder<Grass, Grass.UnitFromWaterType> _UnitFromWaterModeForwarder;
        public INotifyingSetItem<Grass.UnitFromWaterType> UnitFromWaterMode_Property => _UnitFromWaterModeForwarder ?? (_UnitFromWaterModeForwarder = new PropertyForwarder<Grass, Grass.UnitFromWaterType>(this, (int)Grass_FieldIndex.UnitFromWaterMode));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Grass.UnitFromWaterType UnitFromWaterMode
        {
            get => this._UnitFromWaterMode;
            set => this.SetUnitFromWaterMode(value);
        }
        protected void SetUnitFromWaterMode(
            Grass.UnitFromWaterType item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.UnitFromWaterMode];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && UnitFromWaterMode == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.UnitFromWaterMode] = hasBeenSet;
            }
            if (_GrassUnitFromWaterType_subscriptions != null)
            {
                var tmp = UnitFromWaterMode;
                _UnitFromWaterMode = item;
                _GrassUnitFromWaterType_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.UnitFromWaterMode,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _UnitFromWaterMode = item;
            }
        }
        protected void UnsetUnitFromWaterMode()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.UnitFromWaterMode] = false;
            UnitFromWaterMode = default(Grass.UnitFromWaterType);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Grass.UnitFromWaterType> IGrass.UnitFromWaterMode_Property => this.UnitFromWaterMode_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Grass.UnitFromWaterType> IGrassGetter.UnitFromWaterMode_Property => this.UnitFromWaterMode_Property;
        #endregion
        #region PositionRange
        protected Single _PositionRange;
        protected PropertyForwarder<Grass, Single> _PositionRangeForwarder;
        public INotifyingSetItem<Single> PositionRange_Property => _PositionRangeForwarder ?? (_PositionRangeForwarder = new PropertyForwarder<Grass, Single>(this, (int)Grass_FieldIndex.PositionRange));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single PositionRange
        {
            get => this._PositionRange;
            set => this.SetPositionRange(value);
        }
        protected void SetPositionRange(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.PositionRange];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && PositionRange == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.PositionRange] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = PositionRange;
                _PositionRange = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.PositionRange,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _PositionRange = item;
            }
        }
        protected void UnsetPositionRange()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.PositionRange] = false;
            PositionRange = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IGrass.PositionRange_Property => this.PositionRange_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IGrassGetter.PositionRange_Property => this.PositionRange_Property;
        #endregion
        #region HeightRange
        protected Single _HeightRange;
        protected PropertyForwarder<Grass, Single> _HeightRangeForwarder;
        public INotifyingSetItem<Single> HeightRange_Property => _HeightRangeForwarder ?? (_HeightRangeForwarder = new PropertyForwarder<Grass, Single>(this, (int)Grass_FieldIndex.HeightRange));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HeightRange
        {
            get => this._HeightRange;
            set => this.SetHeightRange(value);
        }
        protected void SetHeightRange(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.HeightRange];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && HeightRange == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.HeightRange] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = HeightRange;
                _HeightRange = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.HeightRange,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _HeightRange = item;
            }
        }
        protected void UnsetHeightRange()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.HeightRange] = false;
            HeightRange = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IGrass.HeightRange_Property => this.HeightRange_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IGrassGetter.HeightRange_Property => this.HeightRange_Property;
        #endregion
        #region ColorRange
        protected Single _ColorRange;
        protected PropertyForwarder<Grass, Single> _ColorRangeForwarder;
        public INotifyingSetItem<Single> ColorRange_Property => _ColorRangeForwarder ?? (_ColorRangeForwarder = new PropertyForwarder<Grass, Single>(this, (int)Grass_FieldIndex.ColorRange));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single ColorRange
        {
            get => this._ColorRange;
            set => this.SetColorRange(value);
        }
        protected void SetColorRange(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.ColorRange];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ColorRange == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.ColorRange] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = ColorRange;
                _ColorRange = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.ColorRange,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ColorRange = item;
            }
        }
        protected void UnsetColorRange()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.ColorRange] = false;
            ColorRange = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IGrass.ColorRange_Property => this.ColorRange_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IGrassGetter.ColorRange_Property => this.ColorRange_Property;
        #endregion
        #region WavePeriod
        protected Single _WavePeriod;
        protected PropertyForwarder<Grass, Single> _WavePeriodForwarder;
        public INotifyingSetItem<Single> WavePeriod_Property => _WavePeriodForwarder ?? (_WavePeriodForwarder = new PropertyForwarder<Grass, Single>(this, (int)Grass_FieldIndex.WavePeriod));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single WavePeriod
        {
            get => this._WavePeriod;
            set => this.SetWavePeriod(value);
        }
        protected void SetWavePeriod(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.WavePeriod];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && WavePeriod == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.WavePeriod] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = WavePeriod;
                _WavePeriod = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.WavePeriod,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _WavePeriod = item;
            }
        }
        protected void UnsetWavePeriod()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.WavePeriod] = false;
            WavePeriod = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IGrass.WavePeriod_Property => this.WavePeriod_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IGrassGetter.WavePeriod_Property => this.WavePeriod_Property;
        #endregion
        #region Flags
        protected Grass.GrassFlag _Flags;
        protected PropertyForwarder<Grass, Grass.GrassFlag> _FlagsForwarder;
        public INotifyingSetItem<Grass.GrassFlag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<Grass, Grass.GrassFlag>(this, (int)Grass_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Grass.GrassFlag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            Grass.GrassFlag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Grass_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Grass_FieldIndex.Flags] = hasBeenSet;
            }
            if (_GrassGrassFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _GrassGrassFlag_subscriptions.FireSubscriptions(
                    index: (int)Grass_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)Grass_FieldIndex.Flags] = false;
            Flags = default(Grass.GrassFlag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Grass.GrassFlag> IGrass.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Grass.GrassFlag> IGrassGetter.Flags_Property => this.Flags_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => GrassCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => GrassCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => GrassCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            GrassCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Grass>.GetEqualsMask(Grass rhs) => GrassCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IGrassGetter>.GetEqualsMask(IGrassGetter rhs) => GrassCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return GrassCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Grass_Mask<bool> printMask = null)
        {
            return GrassCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            GrassCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Grass_Mask<bool> GetHasBeenSetMask()
        {
            return GrassCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Grass rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Grass rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (this.Density != rhs.Density) return false;
            if (this.MinSlope != rhs.MinSlope) return false;
            if (this.MaxSlope != rhs.MaxSlope) return false;
            if (this.UnitFromWaterAmount != rhs.UnitFromWaterAmount) return false;
            if (this.UnitFromWaterMode != rhs.UnitFromWaterMode) return false;
            if (!this.PositionRange.EqualsWithin(rhs.PositionRange)) return false;
            if (!this.HeightRange.EqualsWithin(rhs.HeightRange)) return false;
            if (!this.ColorRange.EqualsWithin(rhs.ColorRange)) return false;
            if (!this.WavePeriod.EqualsWithin(rhs.WavePeriod)) return false;
            if (this.Flags != rhs.Flags) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Density).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MinSlope).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaxSlope).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UnitFromWaterAmount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UnitFromWaterMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PositionRange).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HeightRange).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ColorRange).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(WavePeriod).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Grass Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Grass Create_XML(
            XElement root,
            out Grass_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Grass Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Grass();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Grass Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Grass Create_XML(
            string path,
            out Grass_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Grass Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Grass Create_XML(
            Stream stream,
            out Grass_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Grass>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Grass_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<Grass>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Grass_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Grass_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Grass_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Grass_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out Grass_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Grass_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            GrassCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            Grass item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            root: root,
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Density":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.Density);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte DensityParse,
                            errorMask: errorMask))
                        {
                            item.Density = DensityParse;
                        }
                        else
                        {
                            item.UnsetDensity();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MinSlope":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.MinSlope);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte MinSlopeParse,
                            errorMask: errorMask))
                        {
                            item.MinSlope = MinSlopeParse;
                        }
                        else
                        {
                            item.UnsetMinSlope();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxSlope":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.MaxSlope);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte MaxSlopeParse,
                            errorMask: errorMask))
                        {
                            item.MaxSlope = MaxSlopeParse;
                        }
                        else
                        {
                            item.UnsetMaxSlope();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnitFromWaterAmount":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.UnitFromWaterAmount);
                        if (UInt16XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt16 UnitFromWaterAmountParse,
                            errorMask: errorMask))
                        {
                            item.UnitFromWaterAmount = UnitFromWaterAmountParse;
                        }
                        else
                        {
                            item.UnsetUnitFromWaterAmount();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnitFromWaterMode":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.UnitFromWaterMode);
                        if (EnumXmlTranslation<Grass.UnitFromWaterType>.Instance.Parse(
                            root: root,
                            item: out Grass.UnitFromWaterType UnitFromWaterModeParse,
                            errorMask: errorMask))
                        {
                            item.UnitFromWaterMode = UnitFromWaterModeParse;
                        }
                        else
                        {
                            item.UnsetUnitFromWaterMode();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PositionRange":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.PositionRange);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single PositionRangeParse,
                            errorMask: errorMask))
                        {
                            item.PositionRange = PositionRangeParse;
                        }
                        else
                        {
                            item.UnsetPositionRange();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeightRange":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.HeightRange);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single HeightRangeParse,
                            errorMask: errorMask))
                        {
                            item.HeightRange = HeightRangeParse;
                        }
                        else
                        {
                            item.UnsetHeightRange();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorRange":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.ColorRange);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single ColorRangeParse,
                            errorMask: errorMask))
                        {
                            item.ColorRange = ColorRangeParse;
                        }
                        else
                        {
                            item.UnsetColorRange();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WavePeriod":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.WavePeriod);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single WavePeriodParse,
                            errorMask: errorMask))
                        {
                            item.WavePeriod = WavePeriodParse;
                        }
                        else
                        {
                            item.UnsetWavePeriod();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.Flags);
                        if (EnumXmlTranslation<Grass.GrassFlag>.Instance.Parse(
                            root: root,
                            item: out Grass.GrassFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Model:
                    return _hasBeenSetTracker[index];
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter Model
        protected ObjectCentralizationSubscriptions<Model> _Model_subscriptions;
        Model IPropertySupporter<Model>.Get(int index)
        {
            return GetModel(index: index);
        }

        protected Model GetModel(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Model:
                    return Model;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        void IPropertySupporter<Model>.Set(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetModel(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetModel(
            int index,
            Model item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Model:
                    SetModel(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        bool IPropertySupporter<Model>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Model>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Model>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetModel(
                index: index,
                cmds: cmds);
        }

        protected void UnsetModel(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Model:
                    SetModel(
                        item: default(Model),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Model> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Model_subscriptions == null)
            {
                _Model_subscriptions = new ObjectCentralizationSubscriptions<Model>();
            }
            _Model_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Model>.Unsubscribe(
            int index,
            object owner)
        {
            _Model_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Model>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Model IPropertySupporter<Model>.DefaultValue(int index)
        {
            return DefaultValueModel(index: index);
        }

        protected Model DefaultValueModel(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Model:
                    return default(Model);
                default:
                    throw new ArgumentException($"Unknown index for field type Model: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte
        protected ObjectCentralizationSubscriptions<Byte> _Byte_subscriptions;
        Byte IPropertySupporter<Byte>.Get(int index)
        {
            return GetByte(index: index);
        }

        protected Byte GetByte(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Density:
                    return Density;
                case Grass_FieldIndex.MinSlope:
                    return MinSlope;
                case Grass_FieldIndex.MaxSlope:
                    return MaxSlope;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        void IPropertySupporter<Byte>.Set(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByte(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByte(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Density:
                    SetDensity(item, hasBeenSet, cmds);
                    break;
                case Grass_FieldIndex.MinSlope:
                    SetMinSlope(item, hasBeenSet, cmds);
                    break;
                case Grass_FieldIndex.MaxSlope:
                    SetMaxSlope(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        bool IPropertySupporter<Byte>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByte(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByte(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Density:
                    SetDensity(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Grass_FieldIndex.MinSlope:
                    SetMinSlope(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case Grass_FieldIndex.MaxSlope:
                    SetMaxSlope(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Byte_subscriptions == null)
            {
                _Byte_subscriptions = new ObjectCentralizationSubscriptions<Byte>();
            }
            _Byte_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Unsubscribe(
            int index,
            object owner)
        {
            _Byte_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte IPropertySupporter<Byte>.DefaultValue(int index)
        {
            return DefaultValueByte(index: index);
        }

        protected Byte DefaultValueByte(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                    return default(Byte);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        #endregion

        #region IPropertySupporter UInt16
        protected ObjectCentralizationSubscriptions<UInt16> _UInt16_subscriptions;
        UInt16 IPropertySupporter<UInt16>.Get(int index)
        {
            return GetUInt16(index: index);
        }

        protected UInt16 GetUInt16(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return UnitFromWaterAmount;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        void IPropertySupporter<UInt16>.Set(
            int index,
            UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt16(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt16(
            int index,
            UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.UnitFromWaterAmount:
                    SetUnitFromWaterAmount(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        bool IPropertySupporter<UInt16>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<UInt16>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt16>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt16(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt16(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.UnitFromWaterAmount:
                    SetUnitFromWaterAmount(
                        item: default(UInt16),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt16>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt16> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt16_subscriptions == null)
            {
                _UInt16_subscriptions = new ObjectCentralizationSubscriptions<UInt16>();
            }
            _UInt16_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt16>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt16_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt16>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt16 IPropertySupporter<UInt16>.DefaultValue(int index)
        {
            return DefaultValueUInt16(index: index);
        }

        protected UInt16 DefaultValueUInt16(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return default(UInt16);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Grass.UnitFromWaterType
        protected ObjectCentralizationSubscriptions<Grass.UnitFromWaterType> _GrassUnitFromWaterType_subscriptions;
        Grass.UnitFromWaterType IPropertySupporter<Grass.UnitFromWaterType>.Get(int index)
        {
            return GetGrassUnitFromWaterType(index: index);
        }

        protected Grass.UnitFromWaterType GetGrassUnitFromWaterType(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.UnitFromWaterMode:
                    return UnitFromWaterMode;
                default:
                    throw new ArgumentException($"Unknown index for field type Grass.UnitFromWaterType: {index}");
            }
        }

        void IPropertySupporter<Grass.UnitFromWaterType>.Set(
            int index,
            Grass.UnitFromWaterType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetGrassUnitFromWaterType(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetGrassUnitFromWaterType(
            int index,
            Grass.UnitFromWaterType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.UnitFromWaterMode:
                    SetUnitFromWaterMode(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Grass.UnitFromWaterType: {index}");
            }
        }

        bool IPropertySupporter<Grass.UnitFromWaterType>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Grass.UnitFromWaterType>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Grass.UnitFromWaterType>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetGrassUnitFromWaterType(
                index: index,
                cmds: cmds);
        }

        protected void UnsetGrassUnitFromWaterType(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.UnitFromWaterMode:
                    SetUnitFromWaterMode(
                        item: default(Grass.UnitFromWaterType),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Grass.UnitFromWaterType: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Grass.UnitFromWaterType>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Grass.UnitFromWaterType> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_GrassUnitFromWaterType_subscriptions == null)
            {
                _GrassUnitFromWaterType_subscriptions = new ObjectCentralizationSubscriptions<Grass.UnitFromWaterType>();
            }
            _GrassUnitFromWaterType_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Grass.UnitFromWaterType>.Unsubscribe(
            int index,
            object owner)
        {
            _GrassUnitFromWaterType_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Grass.UnitFromWaterType>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Grass.UnitFromWaterType IPropertySupporter<Grass.UnitFromWaterType>.DefaultValue(int index)
        {
            return DefaultValueGrassUnitFromWaterType(index: index);
        }

        protected Grass.UnitFromWaterType DefaultValueGrassUnitFromWaterType(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.UnitFromWaterMode:
                    return default(Grass.UnitFromWaterType);
                default:
                    throw new ArgumentException($"Unknown index for field type Grass.UnitFromWaterType: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.PositionRange:
                    return PositionRange;
                case Grass_FieldIndex.HeightRange:
                    return HeightRange;
                case Grass_FieldIndex.ColorRange:
                    return ColorRange;
                case Grass_FieldIndex.WavePeriod:
                    return WavePeriod;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.PositionRange:
                    SetPositionRange(item, hasBeenSet, cmds);
                    break;
                case Grass_FieldIndex.HeightRange:
                    SetHeightRange(item, hasBeenSet, cmds);
                    break;
                case Grass_FieldIndex.ColorRange:
                    SetColorRange(item, hasBeenSet, cmds);
                    break;
                case Grass_FieldIndex.WavePeriod:
                    SetWavePeriod(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.PositionRange:
                    SetPositionRange(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Grass_FieldIndex.HeightRange:
                    SetHeightRange(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Grass_FieldIndex.ColorRange:
                    SetColorRange(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case Grass_FieldIndex.WavePeriod:
                    SetWavePeriod(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Grass.GrassFlag
        protected ObjectCentralizationSubscriptions<Grass.GrassFlag> _GrassGrassFlag_subscriptions;
        Grass.GrassFlag IPropertySupporter<Grass.GrassFlag>.Get(int index)
        {
            return GetGrassGrassFlag(index: index);
        }

        protected Grass.GrassFlag GetGrassGrassFlag(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type Grass.GrassFlag: {index}");
            }
        }

        void IPropertySupporter<Grass.GrassFlag>.Set(
            int index,
            Grass.GrassFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetGrassGrassFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetGrassGrassFlag(
            int index,
            Grass.GrassFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Grass.GrassFlag: {index}");
            }
        }

        bool IPropertySupporter<Grass.GrassFlag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Grass.GrassFlag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Grass.GrassFlag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetGrassGrassFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetGrassGrassFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Flags:
                    SetFlags(
                        item: default(Grass.GrassFlag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Grass.GrassFlag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Grass.GrassFlag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Grass.GrassFlag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_GrassGrassFlag_subscriptions == null)
            {
                _GrassGrassFlag_subscriptions = new ObjectCentralizationSubscriptions<Grass.GrassFlag>();
            }
            _GrassGrassFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Grass.GrassFlag>.Unsubscribe(
            int index,
            object owner)
        {
            _GrassGrassFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Grass.GrassFlag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Grass.GrassFlag IPropertySupporter<Grass.GrassFlag>.DefaultValue(int index)
        {
            return DefaultValueGrassGrassFlag(index: index);
        }

        protected Grass.GrassFlag DefaultValueGrassGrassFlag(int index)
        {
            switch ((Grass_FieldIndex)index)
            {
                case Grass_FieldIndex.Flags:
                    return default(Grass.GrassFlag);
                default:
                    throw new ArgumentException($"Unknown index for field type Grass.GrassFlag: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Grass_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Grass Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Grass Create_Binary(
            MutagenFrame frame,
            out Grass_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Grass Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Grass>(
                record: new Grass(),
                frame: frame,
                errorMask: errorMask,
                recType: Grass_Registration.GRAS_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Grass Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Grass Create_Binary(
            string path,
            out Grass_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Grass Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Grass Create_Binary(
            Stream stream,
            out Grass_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Grass_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Grass_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Grass_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            GrassCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_MaxSlope_Custom(
            MutagenFrame frame,
            Grass item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_MaxSlope_Custom(
            MutagenWriter writer,
            Grass item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_MaxSlope(
            MutagenWriter writer,
            Grass item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_MaxSlope_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        static partial void FillBinary_UnitFromWaterAmount_Custom(
            MutagenFrame frame,
            Grass item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_UnitFromWaterAmount_Custom(
            MutagenWriter writer,
            Grass item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_UnitFromWaterAmount(
            MutagenWriter writer,
            Grass item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_UnitFromWaterAmount_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            Grass item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Grass item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                    try
                    {
                        errorMask?.PushIndex((int)Grass_FieldIndex.Model);
                        if (LoquiBinaryTranslation<Model>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            item: out Model ModelParse,
                            errorMask: errorMask))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.UnsetModel();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Grass_FieldIndex.Model);
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Grass_FieldIndex.Density);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte DensityParse,
                                errorMask: errorMask))
                            {
                                item.Density = DensityParse;
                            }
                            else
                            {
                                item.UnsetDensity();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Grass_FieldIndex.MinSlope);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte MinSlopeParse,
                                errorMask: errorMask))
                            {
                                item.MinSlope = MinSlopeParse;
                            }
                            else
                            {
                                item.UnsetMinSlope();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        FillBinary_MaxSlope_Custom(
                            frame: dataFrame,
                            item: item,
                            errorMask: errorMask);
                        FillBinary_UnitFromWaterAmount_Custom(
                            frame: dataFrame,
                            item: item,
                            errorMask: errorMask);
                        try
                        {
                            errorMask?.PushIndex((int)Grass_FieldIndex.UnitFromWaterMode);
                            if (EnumBinaryTranslation<Grass.UnitFromWaterType>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Grass.UnitFromWaterType UnitFromWaterModeParse,
                                errorMask: errorMask))
                            {
                                item.UnitFromWaterMode = UnitFromWaterModeParse;
                            }
                            else
                            {
                                item.UnsetUnitFromWaterMode();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Grass_FieldIndex.PositionRange);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single PositionRangeParse,
                                errorMask: errorMask))
                            {
                                item.PositionRange = PositionRangeParse;
                            }
                            else
                            {
                                item.UnsetPositionRange();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Grass_FieldIndex.HeightRange);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single HeightRangeParse,
                                errorMask: errorMask))
                            {
                                item.HeightRange = HeightRangeParse;
                            }
                            else
                            {
                                item.UnsetHeightRange();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Grass_FieldIndex.ColorRange);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single ColorRangeParse,
                                errorMask: errorMask))
                            {
                                item.ColorRange = ColorRangeParse;
                            }
                            else
                            {
                                item.UnsetColorRange();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Grass_FieldIndex.WavePeriod);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single WavePeriodParse,
                                errorMask: errorMask))
                            {
                                item.WavePeriod = WavePeriodParse;
                            }
                            else
                            {
                                item.UnsetWavePeriod();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Grass_FieldIndex.Flags);
                            if (EnumBinaryTranslation<Grass.GrassFlag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Grass.GrassFlag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.UnsetFlags();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Grass_FieldIndex.Flags);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Grass Copy(
            Grass_CopyMask copyMask = null,
            IGrassGetter def = null)
        {
            return Grass.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Grass Copy(
            IGrass item,
            Grass_CopyMask copyMask = null,
            IGrassGetter def = null)
        {
            Grass ret;
            if (item.GetType().Equals(typeof(Grass)))
            {
                ret = new Grass();
            }
            else
            {
                ret = (Grass)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Grass Copy_ToLoqui(
            IGrassGetter item,
            Grass_CopyMask copyMask = null,
            IGrassGetter def = null)
        {
            Grass ret;
            if (item.GetType().Equals(typeof(Grass)))
            {
                ret = new Grass() as Grass;
            }
            else
            {
                ret = (Grass)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IGrassGetter rhs,
            Grass_CopyMask copyMask,
            IGrassGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IGrassGetter rhs,
            out Grass_ErrorMask errorMask,
            Grass_CopyMask copyMask = null,
            IGrassGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GrassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IGrassGetter rhs,
            ErrorMaskBuilder errorMask,
            Grass_CopyMask copyMask = null,
            IGrassGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            GrassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    this.SetModel(
                        (Model)obj,
                        cmds: cmds);
                    break;
                case Grass_FieldIndex.Density:
                    this.SetDensity(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Grass_FieldIndex.MinSlope:
                    this.SetMinSlope(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Grass_FieldIndex.MaxSlope:
                    this.SetMaxSlope(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    this.SetUnitFromWaterAmount(
                        (UInt16)obj,
                        cmds: cmds);
                    break;
                case Grass_FieldIndex.UnitFromWaterMode:
                    this.SetUnitFromWaterMode(
                        (Grass.UnitFromWaterType)obj,
                        cmds: cmds);
                    break;
                case Grass_FieldIndex.PositionRange:
                    this.SetPositionRange(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Grass_FieldIndex.HeightRange:
                    this.SetHeightRange(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Grass_FieldIndex.ColorRange:
                    this.SetColorRange(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Grass_FieldIndex.WavePeriod:
                    this.SetWavePeriod(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case Grass_FieldIndex.Flags:
                    this.SetFlags(
                        (Grass.GrassFlag)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            GrassCommon.Clear(this, cmds);
        }


        public new static Grass Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Grass();
            foreach (var pair in fields)
            {
                CopyInInternal_Grass(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Grass(Grass obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Grass_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    obj.SetModel(
                        (Model)pair.Value,
                        cmds: null);
                    break;
                case Grass_FieldIndex.Density:
                    obj.SetDensity(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Grass_FieldIndex.MinSlope:
                    obj.SetMinSlope(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Grass_FieldIndex.MaxSlope:
                    obj.SetMaxSlope(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    obj.SetUnitFromWaterAmount(
                        (UInt16)pair.Value,
                        cmds: null);
                    break;
                case Grass_FieldIndex.UnitFromWaterMode:
                    obj.SetUnitFromWaterMode(
                        (Grass.UnitFromWaterType)pair.Value,
                        cmds: null);
                    break;
                case Grass_FieldIndex.PositionRange:
                    obj.SetPositionRange(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Grass_FieldIndex.HeightRange:
                    obj.SetHeightRange(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Grass_FieldIndex.ColorRange:
                    obj.SetColorRange(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Grass_FieldIndex.WavePeriod:
                    obj.SetWavePeriod(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case Grass_FieldIndex.Flags:
                    obj.SetFlags(
                        (Grass.GrassFlag)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Grass obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IGrass : IGrassGetter, IMajorRecord, ILoquiClass<IGrass, IGrassGetter>, ILoquiClass<Grass, IGrassGetter>
    {
        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new Byte Density { get; set; }
        new INotifyingItem<Byte> Density_Property { get; }

        new Byte MinSlope { get; set; }
        new INotifyingItem<Byte> MinSlope_Property { get; }

        new Byte MaxSlope { get; set; }
        new INotifyingItem<Byte> MaxSlope_Property { get; }

        new UInt16 UnitFromWaterAmount { get; set; }
        new INotifyingItem<UInt16> UnitFromWaterAmount_Property { get; }

        new Grass.UnitFromWaterType UnitFromWaterMode { get; set; }
        new INotifyingItem<Grass.UnitFromWaterType> UnitFromWaterMode_Property { get; }

        new Single PositionRange { get; set; }
        new INotifyingItem<Single> PositionRange_Property { get; }

        new Single HeightRange { get; set; }
        new INotifyingItem<Single> HeightRange_Property { get; }

        new Single ColorRange { get; set; }
        new INotifyingItem<Single> ColorRange_Property { get; }

        new Single WavePeriod { get; set; }
        new INotifyingItem<Single> WavePeriod_Property { get; }

        new Grass.GrassFlag Flags { get; set; }
        new INotifyingItem<Grass.GrassFlag> Flags_Property { get; }

    }

    public partial interface IGrassGetter : IMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Density
        Byte Density { get; }
        INotifyingItemGetter<Byte> Density_Property { get; }

        #endregion
        #region MinSlope
        Byte MinSlope { get; }
        INotifyingItemGetter<Byte> MinSlope_Property { get; }

        #endregion
        #region MaxSlope
        Byte MaxSlope { get; }
        INotifyingItemGetter<Byte> MaxSlope_Property { get; }

        #endregion
        #region UnitFromWaterAmount
        UInt16 UnitFromWaterAmount { get; }
        INotifyingItemGetter<UInt16> UnitFromWaterAmount_Property { get; }

        #endregion
        #region UnitFromWaterMode
        Grass.UnitFromWaterType UnitFromWaterMode { get; }
        INotifyingItemGetter<Grass.UnitFromWaterType> UnitFromWaterMode_Property { get; }

        #endregion
        #region PositionRange
        Single PositionRange { get; }
        INotifyingItemGetter<Single> PositionRange_Property { get; }

        #endregion
        #region HeightRange
        Single HeightRange { get; }
        INotifyingItemGetter<Single> HeightRange_Property { get; }

        #endregion
        #region ColorRange
        Single ColorRange { get; }
        INotifyingItemGetter<Single> ColorRange_Property { get; }

        #endregion
        #region WavePeriod
        Single WavePeriod { get; }
        INotifyingItemGetter<Single> WavePeriod_Property { get; }

        #endregion
        #region Flags
        Grass.GrassFlag Flags { get; }
        INotifyingItemGetter<Grass.GrassFlag> Flags_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Grass_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Model = 5,
        Density = 6,
        MinSlope = 7,
        MaxSlope = 8,
        UnitFromWaterAmount = 9,
        UnitFromWaterMode = 10,
        PositionRange = 11,
        HeightRange = 12,
        ColorRange = 13,
        WavePeriod = 14,
        Flags = 15,
    }
    #endregion

    #region Registration
    public class Grass_Registration : ILoquiRegistration
    {
        public static readonly Grass_Registration Instance = new Grass_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 58,
            version: 0);

        public const string GUID = "08091e89-54fe-4950-b16d-c11d6c7faef3";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(Grass_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Grass_ErrorMask);

        public static readonly Type ClassType = typeof(Grass);

        public static readonly Type GetterType = typeof(IGrassGetter);

        public static readonly Type SetterType = typeof(IGrass);

        public static readonly Type CommonType = typeof(GrassCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Grass";

        public const string Name = "Grass";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Grass_FieldIndex.Model;
                case "DENSITY":
                    return (ushort)Grass_FieldIndex.Density;
                case "MINSLOPE":
                    return (ushort)Grass_FieldIndex.MinSlope;
                case "MAXSLOPE":
                    return (ushort)Grass_FieldIndex.MaxSlope;
                case "UNITFROMWATERAMOUNT":
                    return (ushort)Grass_FieldIndex.UnitFromWaterAmount;
                case "UNITFROMWATERMODE":
                    return (ushort)Grass_FieldIndex.UnitFromWaterMode;
                case "POSITIONRANGE":
                    return (ushort)Grass_FieldIndex.PositionRange;
                case "HEIGHTRANGE":
                    return (ushort)Grass_FieldIndex.HeightRange;
                case "COLORRANGE":
                    return (ushort)Grass_FieldIndex.ColorRange;
                case "WAVEPERIOD":
                    return (ushort)Grass_FieldIndex.WavePeriod;
                case "FLAGS":
                    return (ushort)Grass_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return true;
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return "Model";
                case Grass_FieldIndex.Density:
                    return "Density";
                case Grass_FieldIndex.MinSlope:
                    return "MinSlope";
                case Grass_FieldIndex.MaxSlope:
                    return "MaxSlope";
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return "UnitFromWaterAmount";
                case Grass_FieldIndex.UnitFromWaterMode:
                    return "UnitFromWaterMode";
                case Grass_FieldIndex.PositionRange:
                    return "PositionRange";
                case Grass_FieldIndex.HeightRange:
                    return "HeightRange";
                case Grass_FieldIndex.ColorRange:
                    return "ColorRange";
                case Grass_FieldIndex.WavePeriod:
                    return "WavePeriod";
                case Grass_FieldIndex.Flags:
                    return "Flags";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return typeof(Model);
                case Grass_FieldIndex.Density:
                    return typeof(Byte);
                case Grass_FieldIndex.MinSlope:
                    return typeof(Byte);
                case Grass_FieldIndex.MaxSlope:
                    return typeof(Byte);
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return typeof(UInt16);
                case Grass_FieldIndex.UnitFromWaterMode:
                    return typeof(Grass.UnitFromWaterType);
                case Grass_FieldIndex.PositionRange:
                    return typeof(Single);
                case Grass_FieldIndex.HeightRange:
                    return typeof(Single);
                case Grass_FieldIndex.ColorRange:
                    return typeof(Single);
                case Grass_FieldIndex.WavePeriod:
                    return typeof(Single);
                case Grass_FieldIndex.Flags:
                    return typeof(Grass.GrassFlag);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GRAS_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class GrassCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IGrass item,
            IGrassGetter rhs,
            IGrassGetter def,
            ErrorMaskBuilder errorMask,
            Grass_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.Model);
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Density ?? true)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.Density);
                try
                {
                    item.Density_Property.Set(
                        value: rhs.Density,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MinSlope ?? true)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.MinSlope);
                try
                {
                    item.MinSlope_Property.Set(
                        value: rhs.MinSlope,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MaxSlope ?? true)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.MaxSlope);
                try
                {
                    item.MaxSlope_Property.Set(
                        value: rhs.MaxSlope,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.UnitFromWaterAmount ?? true)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.UnitFromWaterAmount);
                try
                {
                    item.UnitFromWaterAmount_Property.Set(
                        value: rhs.UnitFromWaterAmount,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.UnitFromWaterMode ?? true)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.UnitFromWaterMode);
                try
                {
                    item.UnitFromWaterMode_Property.Set(
                        value: rhs.UnitFromWaterMode,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.PositionRange ?? true)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.PositionRange);
                try
                {
                    item.PositionRange_Property.Set(
                        value: rhs.PositionRange,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.HeightRange ?? true)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.HeightRange);
                try
                {
                    item.HeightRange_Property.Set(
                        value: rhs.HeightRange,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.ColorRange ?? true)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.ColorRange);
                try
                {
                    item.ColorRange_Property.Set(
                        value: rhs.ColorRange,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.WavePeriod ?? true)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.WavePeriod);
                try
                {
                    item.WavePeriod_Property.Set(
                        value: rhs.WavePeriod,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)Grass_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IGrass obj,
            NotifyingFireParameters cmds = null)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Grass_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IGrass obj,
            NotifyingUnsetParameters cmds = null)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Grass_FieldIndex.Density:
                    obj.Density = default(Byte);
                    break;
                case Grass_FieldIndex.MinSlope:
                    obj.MinSlope = default(Byte);
                    break;
                case Grass_FieldIndex.MaxSlope:
                    obj.MaxSlope = default(Byte);
                    break;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    obj.UnitFromWaterAmount = default(UInt16);
                    break;
                case Grass_FieldIndex.UnitFromWaterMode:
                    obj.UnitFromWaterMode = default(Grass.UnitFromWaterType);
                    break;
                case Grass_FieldIndex.PositionRange:
                    obj.PositionRange = default(Single);
                    break;
                case Grass_FieldIndex.HeightRange:
                    obj.HeightRange = default(Single);
                    break;
                case Grass_FieldIndex.ColorRange:
                    obj.ColorRange = default(Single);
                    break;
                case Grass_FieldIndex.WavePeriod:
                    obj.WavePeriod = default(Single);
                    break;
                case Grass_FieldIndex.Flags:
                    obj.Flags = default(Grass.GrassFlag);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IGrass obj)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                    return true;
                case Grass_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IGrassGetter obj)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return obj.Model;
                case Grass_FieldIndex.Density:
                    return obj.Density;
                case Grass_FieldIndex.MinSlope:
                    return obj.MinSlope;
                case Grass_FieldIndex.MaxSlope:
                    return obj.MaxSlope;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return obj.UnitFromWaterAmount;
                case Grass_FieldIndex.UnitFromWaterMode:
                    return obj.UnitFromWaterMode;
                case Grass_FieldIndex.PositionRange:
                    return obj.PositionRange;
                case Grass_FieldIndex.HeightRange:
                    return obj.HeightRange;
                case Grass_FieldIndex.ColorRange:
                    return obj.ColorRange;
                case Grass_FieldIndex.WavePeriod:
                    return obj.WavePeriod;
                case Grass_FieldIndex.Flags:
                    return obj.Flags;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IGrass item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Density = default(Byte);
            item.MinSlope = default(Byte);
            item.MaxSlope = default(Byte);
            item.UnitFromWaterAmount = default(UInt16);
            item.UnitFromWaterMode = default(Grass.UnitFromWaterType);
            item.PositionRange = default(Single);
            item.HeightRange = default(Single);
            item.ColorRange = default(Single);
            item.WavePeriod = default(Single);
            item.Flags = default(Grass.GrassFlag);
        }

        public static Grass_Mask<bool> GetEqualsMask(
            this IGrassGetter item,
            IGrassGetter rhs)
        {
            var ret = new Grass_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IGrassGetter item,
            IGrassGetter rhs,
            Grass_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Density = item.Density == rhs.Density;
            ret.MinSlope = item.MinSlope == rhs.MinSlope;
            ret.MaxSlope = item.MaxSlope == rhs.MaxSlope;
            ret.UnitFromWaterAmount = item.UnitFromWaterAmount == rhs.UnitFromWaterAmount;
            ret.UnitFromWaterMode = item.UnitFromWaterMode == rhs.UnitFromWaterMode;
            ret.PositionRange = item.PositionRange == rhs.PositionRange;
            ret.HeightRange = item.HeightRange == rhs.HeightRange;
            ret.ColorRange = item.ColorRange == rhs.ColorRange;
            ret.WavePeriod = item.WavePeriod == rhs.WavePeriod;
            ret.Flags = item.Flags == rhs.Flags;
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IGrassGetter item,
            string name = null,
            Grass_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IGrassGetter item,
            FileGeneration fg,
            string name = null,
            Grass_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Grass)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Grass)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Density ?? true)
                {
                    fg.AppendLine($"Density => {item.Density}");
                }
                if (printMask?.MinSlope ?? true)
                {
                    fg.AppendLine($"MinSlope => {item.MinSlope}");
                }
                if (printMask?.MaxSlope ?? true)
                {
                    fg.AppendLine($"MaxSlope => {item.MaxSlope}");
                }
                if (printMask?.UnitFromWaterAmount ?? true)
                {
                    fg.AppendLine($"UnitFromWaterAmount => {item.UnitFromWaterAmount}");
                }
                if (printMask?.UnitFromWaterMode ?? true)
                {
                    fg.AppendLine($"UnitFromWaterMode => {item.UnitFromWaterMode}");
                }
                if (printMask?.PositionRange ?? true)
                {
                    fg.AppendLine($"PositionRange => {item.PositionRange}");
                }
                if (printMask?.HeightRange ?? true)
                {
                    fg.AppendLine($"HeightRange => {item.HeightRange}");
                }
                if (printMask?.ColorRange ?? true)
                {
                    fg.AppendLine($"ColorRange => {item.ColorRange}");
                }
                if (printMask?.WavePeriod ?? true)
                {
                    fg.AppendLine($"WavePeriod => {item.WavePeriod}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IGrassGetter item,
            Grass_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            return true;
        }

        public static Grass_Mask<bool> GetHasBeenSetMask(IGrassGetter item)
        {
            var ret = new Grass_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model));
            ret.Density = true;
            ret.MinSlope = true;
            ret.MaxSlope = true;
            ret.UnitFromWaterAmount = true;
            ret.UnitFromWaterMode = true;
            ret.PositionRange = true;
            ret.HeightRange = true;
            ret.ColorRange = true;
            ret.WavePeriod = true;
            ret.Flags = true;
            return ret;
        }

        public static Grass_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Grass_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Grass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IGrassGetter item,
            bool doMasks,
            out Grass_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IGrassGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Grass");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Grass");
            }
            if (item.Model_Property.HasBeenSet)
            {
                LoquiXmlTranslation<Model>.Instance.Write(
                    node: elem,
                    item: item.Model_Property,
                    name: nameof(item.Model),
                    fieldIndex: (int)Grass_FieldIndex.Model,
                    errorMask: errorMask);
            }
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Density),
                item: item.Density_Property,
                fieldIndex: (int)Grass_FieldIndex.Density,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.MinSlope),
                item: item.MinSlope_Property,
                fieldIndex: (int)Grass_FieldIndex.MinSlope,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.MaxSlope),
                item: item.MaxSlope_Property,
                fieldIndex: (int)Grass_FieldIndex.MaxSlope,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.UnitFromWaterAmount),
                item: item.UnitFromWaterAmount_Property,
                fieldIndex: (int)Grass_FieldIndex.UnitFromWaterAmount,
                errorMask: errorMask);
            EnumXmlTranslation<Grass.UnitFromWaterType>.Instance.Write(
                node: elem,
                name: nameof(item.UnitFromWaterMode),
                item: item.UnitFromWaterMode_Property,
                fieldIndex: (int)Grass_FieldIndex.UnitFromWaterMode,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.PositionRange),
                item: item.PositionRange_Property,
                fieldIndex: (int)Grass_FieldIndex.PositionRange,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.HeightRange),
                item: item.HeightRange_Property,
                fieldIndex: (int)Grass_FieldIndex.HeightRange,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.ColorRange),
                item: item.ColorRange_Property,
                fieldIndex: (int)Grass_FieldIndex.ColorRange,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.WavePeriod),
                item: item.WavePeriod_Property,
                fieldIndex: (int)Grass_FieldIndex.WavePeriod,
                errorMask: errorMask);
            EnumXmlTranslation<Grass.GrassFlag>.Instance.Write(
                node: elem,
                name: nameof(item.Flags),
                item: item.Flags_Property,
                fieldIndex: (int)Grass_FieldIndex.Flags,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Grass item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Grass_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Grass_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Grass item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Grass_Registration.GRAS_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Grass item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)Grass_FieldIndex.Model,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Grass_Registration.DATA_HEADER)))
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Density_Property,
                    fieldIndex: (int)Grass_FieldIndex.Density,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MinSlope_Property,
                    fieldIndex: (int)Grass_FieldIndex.MinSlope,
                    errorMask: errorMask);
                Grass.WriteBinary_MaxSlope(
                    writer: writer,
                    item: item,
                    errorMask: errorMask);
                Grass.WriteBinary_UnitFromWaterAmount(
                    writer: writer,
                    item: item,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Grass.UnitFromWaterType>.Instance.Write(
                    writer,
                    item.UnitFromWaterMode_Property,
                    length: 4,
                    fieldIndex: (int)Grass_FieldIndex.UnitFromWaterMode,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PositionRange_Property,
                    fieldIndex: (int)Grass_FieldIndex.PositionRange,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HeightRange_Property,
                    fieldIndex: (int)Grass_FieldIndex.HeightRange,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorRange_Property,
                    fieldIndex: (int)Grass_FieldIndex.ColorRange,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.WavePeriod_Property,
                    fieldIndex: (int)Grass_FieldIndex.WavePeriod,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Grass.GrassFlag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: 4,
                    fieldIndex: (int)Grass_FieldIndex.Flags,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Grass_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Grass_Mask<T>>
    {
        #region Ctors
        public Grass_Mask()
        {
        }

        public Grass_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Density = initialValue;
            this.MinSlope = initialValue;
            this.MaxSlope = initialValue;
            this.UnitFromWaterAmount = initialValue;
            this.UnitFromWaterMode = initialValue;
            this.PositionRange = initialValue;
            this.HeightRange = initialValue;
            this.ColorRange = initialValue;
            this.WavePeriod = initialValue;
            this.Flags = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Density;
        public T MinSlope;
        public T MaxSlope;
        public T UnitFromWaterAmount;
        public T UnitFromWaterMode;
        public T PositionRange;
        public T HeightRange;
        public T ColorRange;
        public T WavePeriod;
        public T Flags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Grass_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Grass_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Density, rhs.Density)) return false;
            if (!object.Equals(this.MinSlope, rhs.MinSlope)) return false;
            if (!object.Equals(this.MaxSlope, rhs.MaxSlope)) return false;
            if (!object.Equals(this.UnitFromWaterAmount, rhs.UnitFromWaterAmount)) return false;
            if (!object.Equals(this.UnitFromWaterMode, rhs.UnitFromWaterMode)) return false;
            if (!object.Equals(this.PositionRange, rhs.PositionRange)) return false;
            if (!object.Equals(this.HeightRange, rhs.HeightRange)) return false;
            if (!object.Equals(this.ColorRange, rhs.ColorRange)) return false;
            if (!object.Equals(this.WavePeriod, rhs.WavePeriod)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Density?.GetHashCode());
            ret = ret.CombineHashCode(this.MinSlope?.GetHashCode());
            ret = ret.CombineHashCode(this.MaxSlope?.GetHashCode());
            ret = ret.CombineHashCode(this.UnitFromWaterAmount?.GetHashCode());
            ret = ret.CombineHashCode(this.UnitFromWaterMode?.GetHashCode());
            ret = ret.CombineHashCode(this.PositionRange?.GetHashCode());
            ret = ret.CombineHashCode(this.HeightRange?.GetHashCode());
            ret = ret.CombineHashCode(this.ColorRange?.GetHashCode());
            ret = ret.CombineHashCode(this.WavePeriod?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Density)) return false;
            if (!eval(this.MinSlope)) return false;
            if (!eval(this.MaxSlope)) return false;
            if (!eval(this.UnitFromWaterAmount)) return false;
            if (!eval(this.UnitFromWaterMode)) return false;
            if (!eval(this.PositionRange)) return false;
            if (!eval(this.HeightRange)) return false;
            if (!eval(this.ColorRange)) return false;
            if (!eval(this.WavePeriod)) return false;
            if (!eval(this.Flags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Grass_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Grass_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Grass_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Density = eval(this.Density);
            obj.MinSlope = eval(this.MinSlope);
            obj.MaxSlope = eval(this.MaxSlope);
            obj.UnitFromWaterAmount = eval(this.UnitFromWaterAmount);
            obj.UnitFromWaterMode = eval(this.UnitFromWaterMode);
            obj.PositionRange = eval(this.PositionRange);
            obj.HeightRange = eval(this.HeightRange);
            obj.ColorRange = eval(this.ColorRange);
            obj.WavePeriod = eval(this.WavePeriod);
            obj.Flags = eval(this.Flags);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Grass_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Grass_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Grass_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Density ?? true)
                {
                    fg.AppendLine($"Density => {Density}");
                }
                if (printMask?.MinSlope ?? true)
                {
                    fg.AppendLine($"MinSlope => {MinSlope}");
                }
                if (printMask?.MaxSlope ?? true)
                {
                    fg.AppendLine($"MaxSlope => {MaxSlope}");
                }
                if (printMask?.UnitFromWaterAmount ?? true)
                {
                    fg.AppendLine($"UnitFromWaterAmount => {UnitFromWaterAmount}");
                }
                if (printMask?.UnitFromWaterMode ?? true)
                {
                    fg.AppendLine($"UnitFromWaterMode => {UnitFromWaterMode}");
                }
                if (printMask?.PositionRange ?? true)
                {
                    fg.AppendLine($"PositionRange => {PositionRange}");
                }
                if (printMask?.HeightRange ?? true)
                {
                    fg.AppendLine($"HeightRange => {HeightRange}");
                }
                if (printMask?.ColorRange ?? true)
                {
                    fg.AppendLine($"ColorRange => {ColorRange}");
                }
                if (printMask?.WavePeriod ?? true)
                {
                    fg.AppendLine($"WavePeriod => {WavePeriod}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Grass_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Grass_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Density;
        public Exception MinSlope;
        public Exception MaxSlope;
        public Exception UnitFromWaterAmount;
        public Exception UnitFromWaterMode;
        public Exception PositionRange;
        public Exception HeightRange;
        public Exception ColorRange;
        public Exception WavePeriod;
        public Exception Flags;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return Model;
                case Grass_FieldIndex.Density:
                    return Density;
                case Grass_FieldIndex.MinSlope:
                    return MinSlope;
                case Grass_FieldIndex.MaxSlope:
                    return MaxSlope;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return UnitFromWaterAmount;
                case Grass_FieldIndex.UnitFromWaterMode:
                    return UnitFromWaterMode;
                case Grass_FieldIndex.PositionRange:
                    return PositionRange;
                case Grass_FieldIndex.HeightRange:
                    return HeightRange;
                case Grass_FieldIndex.ColorRange:
                    return ColorRange;
                case Grass_FieldIndex.WavePeriod:
                    return WavePeriod;
                case Grass_FieldIndex.Flags:
                    return Flags;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Grass_FieldIndex.Density:
                    this.Density = ex;
                    break;
                case Grass_FieldIndex.MinSlope:
                    this.MinSlope = ex;
                    break;
                case Grass_FieldIndex.MaxSlope:
                    this.MaxSlope = ex;
                    break;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    this.UnitFromWaterAmount = ex;
                    break;
                case Grass_FieldIndex.UnitFromWaterMode:
                    this.UnitFromWaterMode = ex;
                    break;
                case Grass_FieldIndex.PositionRange:
                    this.PositionRange = ex;
                    break;
                case Grass_FieldIndex.HeightRange:
                    this.HeightRange = ex;
                    break;
                case Grass_FieldIndex.ColorRange:
                    this.ColorRange = ex;
                    break;
                case Grass_FieldIndex.WavePeriod:
                    this.WavePeriod = ex;
                    break;
                case Grass_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Grass_FieldIndex.Density:
                    this.Density = (Exception)obj;
                    break;
                case Grass_FieldIndex.MinSlope:
                    this.MinSlope = (Exception)obj;
                    break;
                case Grass_FieldIndex.MaxSlope:
                    this.MaxSlope = (Exception)obj;
                    break;
                case Grass_FieldIndex.UnitFromWaterAmount:
                    this.UnitFromWaterAmount = (Exception)obj;
                    break;
                case Grass_FieldIndex.UnitFromWaterMode:
                    this.UnitFromWaterMode = (Exception)obj;
                    break;
                case Grass_FieldIndex.PositionRange:
                    this.PositionRange = (Exception)obj;
                    break;
                case Grass_FieldIndex.HeightRange:
                    this.HeightRange = (Exception)obj;
                    break;
                case Grass_FieldIndex.ColorRange:
                    this.ColorRange = (Exception)obj;
                    break;
                case Grass_FieldIndex.WavePeriod:
                    this.WavePeriod = (Exception)obj;
                    break;
                case Grass_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Density != null) return true;
            if (MinSlope != null) return true;
            if (MaxSlope != null) return true;
            if (UnitFromWaterAmount != null) return true;
            if (UnitFromWaterMode != null) return true;
            if (PositionRange != null) return true;
            if (HeightRange != null) return true;
            if (ColorRange != null) return true;
            if (WavePeriod != null) return true;
            if (Flags != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Grass_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"Density => {Density}");
            fg.AppendLine($"MinSlope => {MinSlope}");
            fg.AppendLine($"MaxSlope => {MaxSlope}");
            fg.AppendLine($"UnitFromWaterAmount => {UnitFromWaterAmount}");
            fg.AppendLine($"UnitFromWaterMode => {UnitFromWaterMode}");
            fg.AppendLine($"PositionRange => {PositionRange}");
            fg.AppendLine($"HeightRange => {HeightRange}");
            fg.AppendLine($"ColorRange => {ColorRange}");
            fg.AppendLine($"WavePeriod => {WavePeriod}");
            fg.AppendLine($"Flags => {Flags}");
        }
        #endregion

        #region Combine
        public Grass_ErrorMask Combine(Grass_ErrorMask rhs)
        {
            var ret = new Grass_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Density = this.Density.Combine(rhs.Density);
            ret.MinSlope = this.MinSlope.Combine(rhs.MinSlope);
            ret.MaxSlope = this.MaxSlope.Combine(rhs.MaxSlope);
            ret.UnitFromWaterAmount = this.UnitFromWaterAmount.Combine(rhs.UnitFromWaterAmount);
            ret.UnitFromWaterMode = this.UnitFromWaterMode.Combine(rhs.UnitFromWaterMode);
            ret.PositionRange = this.PositionRange.Combine(rhs.PositionRange);
            ret.HeightRange = this.HeightRange.Combine(rhs.HeightRange);
            ret.ColorRange = this.ColorRange.Combine(rhs.ColorRange);
            ret.WavePeriod = this.WavePeriod.Combine(rhs.WavePeriod);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            return ret;
        }
        public static Grass_ErrorMask Combine(Grass_ErrorMask lhs, Grass_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Grass_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Grass_ErrorMask();
        }
        #endregion

    }
    public class Grass_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Density;
        public bool MinSlope;
        public bool MaxSlope;
        public bool UnitFromWaterAmount;
        public bool UnitFromWaterMode;
        public bool PositionRange;
        public bool HeightRange;
        public bool ColorRange;
        public bool WavePeriod;
        public bool Flags;
        #endregion

    }
    #endregion





    #endregion

}
