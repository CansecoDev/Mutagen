/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class HDRData :
        IHDRData,
        ILoquiObjectSetter<HDRData>,
        IEquatable<HDRData>,
        IEqualsMask
    {
        #region Ctor
        public HDRData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EyeAdaptSpeed
        public Single EyeAdaptSpeed { get; set; } = default;
        #endregion
        #region BlurRadius
        public Single BlurRadius { get; set; } = default;
        #endregion
        #region BlurPasses
        public Single BlurPasses { get; set; } = default;
        #endregion
        #region EmissiveMult
        public Single EmissiveMult { get; set; } = default;
        #endregion
        #region TargetLum
        public Single TargetLum { get; set; } = default;
        #endregion
        #region UpperLumClamp
        public Single UpperLumClamp { get; set; } = default;
        #endregion
        #region BrightScale
        public Single BrightScale { get; set; } = default;
        #endregion
        #region BrightClamp
        public Single BrightClamp { get; set; } = default;
        #endregion
        #region LumRampNoTex
        public Single LumRampNoTex { get; set; } = default;
        #endregion
        #region LumRampMin
        public Single LumRampMin { get; set; } = default;
        #endregion
        #region LumRampMax
        public Single LumRampMax { get; set; } = default;
        #endregion
        #region SunlightDimmer
        public Single SunlightDimmer { get; set; } = default;
        #endregion
        #region GrassDimmer
        public Single GrassDimmer { get; set; } = default;
        #endregion
        #region TreeDimmer
        public Single TreeDimmer { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HDRDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IHDRDataGetter rhs)) return false;
            return ((HDRDataCommon)((IHDRDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(HDRData obj)
        {
            return ((HDRDataCommon)((IHDRDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((HDRDataCommon)((IHDRDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => HDRDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((HDRDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static HDRData CreateFromXml(
            XElement node,
            HDRData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static HDRData CreateFromXml(
            XElement node,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HDRData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static HDRData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new HDRData();
            ((HDRDataSetterCommon)((IHDRDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static HDRData CreateFromXml(
            string path,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static HDRData CreateFromXml(
            string path,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static HDRData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static HDRData CreateFromXml(
            Stream stream,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static HDRData CreateFromXml(
            Stream stream,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static HDRData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.EyeAdaptSpeed = initialValue;
                this.BlurRadius = initialValue;
                this.BlurPasses = initialValue;
                this.EmissiveMult = initialValue;
                this.TargetLum = initialValue;
                this.UpperLumClamp = initialValue;
                this.BrightScale = initialValue;
                this.BrightClamp = initialValue;
                this.LumRampNoTex = initialValue;
                this.LumRampMin = initialValue;
                this.LumRampMax = initialValue;
                this.SunlightDimmer = initialValue;
                this.GrassDimmer = initialValue;
                this.TreeDimmer = initialValue;
            }

            public Mask(
                TItem EyeAdaptSpeed,
                TItem BlurRadius,
                TItem BlurPasses,
                TItem EmissiveMult,
                TItem TargetLum,
                TItem UpperLumClamp,
                TItem BrightScale,
                TItem BrightClamp,
                TItem LumRampNoTex,
                TItem LumRampMin,
                TItem LumRampMax,
                TItem SunlightDimmer,
                TItem GrassDimmer,
                TItem TreeDimmer)
            {
                this.EyeAdaptSpeed = EyeAdaptSpeed;
                this.BlurRadius = BlurRadius;
                this.BlurPasses = BlurPasses;
                this.EmissiveMult = EmissiveMult;
                this.TargetLum = TargetLum;
                this.UpperLumClamp = UpperLumClamp;
                this.BrightScale = BrightScale;
                this.BrightClamp = BrightClamp;
                this.LumRampNoTex = LumRampNoTex;
                this.LumRampMin = LumRampMin;
                this.LumRampMax = LumRampMax;
                this.SunlightDimmer = SunlightDimmer;
                this.GrassDimmer = GrassDimmer;
                this.TreeDimmer = TreeDimmer;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem EyeAdaptSpeed;
            public TItem BlurRadius;
            public TItem BlurPasses;
            public TItem EmissiveMult;
            public TItem TargetLum;
            public TItem UpperLumClamp;
            public TItem BrightScale;
            public TItem BrightClamp;
            public TItem LumRampNoTex;
            public TItem LumRampMin;
            public TItem LumRampMax;
            public TItem SunlightDimmer;
            public TItem GrassDimmer;
            public TItem TreeDimmer;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.EyeAdaptSpeed, rhs.EyeAdaptSpeed)) return false;
                if (!object.Equals(this.BlurRadius, rhs.BlurRadius)) return false;
                if (!object.Equals(this.BlurPasses, rhs.BlurPasses)) return false;
                if (!object.Equals(this.EmissiveMult, rhs.EmissiveMult)) return false;
                if (!object.Equals(this.TargetLum, rhs.TargetLum)) return false;
                if (!object.Equals(this.UpperLumClamp, rhs.UpperLumClamp)) return false;
                if (!object.Equals(this.BrightScale, rhs.BrightScale)) return false;
                if (!object.Equals(this.BrightClamp, rhs.BrightClamp)) return false;
                if (!object.Equals(this.LumRampNoTex, rhs.LumRampNoTex)) return false;
                if (!object.Equals(this.LumRampMin, rhs.LumRampMin)) return false;
                if (!object.Equals(this.LumRampMax, rhs.LumRampMax)) return false;
                if (!object.Equals(this.SunlightDimmer, rhs.SunlightDimmer)) return false;
                if (!object.Equals(this.GrassDimmer, rhs.GrassDimmer)) return false;
                if (!object.Equals(this.TreeDimmer, rhs.TreeDimmer)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.EyeAdaptSpeed);
                hash.Add(this.BlurRadius);
                hash.Add(this.BlurPasses);
                hash.Add(this.EmissiveMult);
                hash.Add(this.TargetLum);
                hash.Add(this.UpperLumClamp);
                hash.Add(this.BrightScale);
                hash.Add(this.BrightClamp);
                hash.Add(this.LumRampNoTex);
                hash.Add(this.LumRampMin);
                hash.Add(this.LumRampMax);
                hash.Add(this.SunlightDimmer);
                hash.Add(this.GrassDimmer);
                hash.Add(this.TreeDimmer);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.EyeAdaptSpeed)) return false;
                if (!eval(this.BlurRadius)) return false;
                if (!eval(this.BlurPasses)) return false;
                if (!eval(this.EmissiveMult)) return false;
                if (!eval(this.TargetLum)) return false;
                if (!eval(this.UpperLumClamp)) return false;
                if (!eval(this.BrightScale)) return false;
                if (!eval(this.BrightClamp)) return false;
                if (!eval(this.LumRampNoTex)) return false;
                if (!eval(this.LumRampMin)) return false;
                if (!eval(this.LumRampMax)) return false;
                if (!eval(this.SunlightDimmer)) return false;
                if (!eval(this.GrassDimmer)) return false;
                if (!eval(this.TreeDimmer)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.EyeAdaptSpeed)) return true;
                if (eval(this.BlurRadius)) return true;
                if (eval(this.BlurPasses)) return true;
                if (eval(this.EmissiveMult)) return true;
                if (eval(this.TargetLum)) return true;
                if (eval(this.UpperLumClamp)) return true;
                if (eval(this.BrightScale)) return true;
                if (eval(this.BrightClamp)) return true;
                if (eval(this.LumRampNoTex)) return true;
                if (eval(this.LumRampMin)) return true;
                if (eval(this.LumRampMax)) return true;
                if (eval(this.SunlightDimmer)) return true;
                if (eval(this.GrassDimmer)) return true;
                if (eval(this.TreeDimmer)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HDRData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.EyeAdaptSpeed = eval(this.EyeAdaptSpeed);
                obj.BlurRadius = eval(this.BlurRadius);
                obj.BlurPasses = eval(this.BlurPasses);
                obj.EmissiveMult = eval(this.EmissiveMult);
                obj.TargetLum = eval(this.TargetLum);
                obj.UpperLumClamp = eval(this.UpperLumClamp);
                obj.BrightScale = eval(this.BrightScale);
                obj.BrightClamp = eval(this.BrightClamp);
                obj.LumRampNoTex = eval(this.LumRampNoTex);
                obj.LumRampMin = eval(this.LumRampMin);
                obj.LumRampMax = eval(this.LumRampMax);
                obj.SunlightDimmer = eval(this.SunlightDimmer);
                obj.GrassDimmer = eval(this.GrassDimmer);
                obj.TreeDimmer = eval(this.TreeDimmer);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(HDRData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, HDRData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(HDRData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.EyeAdaptSpeed ?? true)
                    {
                        fg.AppendItem(EyeAdaptSpeed, "EyeAdaptSpeed");
                    }
                    if (printMask?.BlurRadius ?? true)
                    {
                        fg.AppendItem(BlurRadius, "BlurRadius");
                    }
                    if (printMask?.BlurPasses ?? true)
                    {
                        fg.AppendItem(BlurPasses, "BlurPasses");
                    }
                    if (printMask?.EmissiveMult ?? true)
                    {
                        fg.AppendItem(EmissiveMult, "EmissiveMult");
                    }
                    if (printMask?.TargetLum ?? true)
                    {
                        fg.AppendItem(TargetLum, "TargetLum");
                    }
                    if (printMask?.UpperLumClamp ?? true)
                    {
                        fg.AppendItem(UpperLumClamp, "UpperLumClamp");
                    }
                    if (printMask?.BrightScale ?? true)
                    {
                        fg.AppendItem(BrightScale, "BrightScale");
                    }
                    if (printMask?.BrightClamp ?? true)
                    {
                        fg.AppendItem(BrightClamp, "BrightClamp");
                    }
                    if (printMask?.LumRampNoTex ?? true)
                    {
                        fg.AppendItem(LumRampNoTex, "LumRampNoTex");
                    }
                    if (printMask?.LumRampMin ?? true)
                    {
                        fg.AppendItem(LumRampMin, "LumRampMin");
                    }
                    if (printMask?.LumRampMax ?? true)
                    {
                        fg.AppendItem(LumRampMax, "LumRampMax");
                    }
                    if (printMask?.SunlightDimmer ?? true)
                    {
                        fg.AppendItem(SunlightDimmer, "SunlightDimmer");
                    }
                    if (printMask?.GrassDimmer ?? true)
                    {
                        fg.AppendItem(GrassDimmer, "GrassDimmer");
                    }
                    if (printMask?.TreeDimmer ?? true)
                    {
                        fg.AppendItem(TreeDimmer, "TreeDimmer");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? EyeAdaptSpeed;
            public Exception? BlurRadius;
            public Exception? BlurPasses;
            public Exception? EmissiveMult;
            public Exception? TargetLum;
            public Exception? UpperLumClamp;
            public Exception? BrightScale;
            public Exception? BrightClamp;
            public Exception? LumRampNoTex;
            public Exception? LumRampMin;
            public Exception? LumRampMax;
            public Exception? SunlightDimmer;
            public Exception? GrassDimmer;
            public Exception? TreeDimmer;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
                switch (enu)
                {
                    case HDRData_FieldIndex.EyeAdaptSpeed:
                        return EyeAdaptSpeed;
                    case HDRData_FieldIndex.BlurRadius:
                        return BlurRadius;
                    case HDRData_FieldIndex.BlurPasses:
                        return BlurPasses;
                    case HDRData_FieldIndex.EmissiveMult:
                        return EmissiveMult;
                    case HDRData_FieldIndex.TargetLum:
                        return TargetLum;
                    case HDRData_FieldIndex.UpperLumClamp:
                        return UpperLumClamp;
                    case HDRData_FieldIndex.BrightScale:
                        return BrightScale;
                    case HDRData_FieldIndex.BrightClamp:
                        return BrightClamp;
                    case HDRData_FieldIndex.LumRampNoTex:
                        return LumRampNoTex;
                    case HDRData_FieldIndex.LumRampMin:
                        return LumRampMin;
                    case HDRData_FieldIndex.LumRampMax:
                        return LumRampMax;
                    case HDRData_FieldIndex.SunlightDimmer:
                        return SunlightDimmer;
                    case HDRData_FieldIndex.GrassDimmer:
                        return GrassDimmer;
                    case HDRData_FieldIndex.TreeDimmer:
                        return TreeDimmer;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
                switch (enu)
                {
                    case HDRData_FieldIndex.EyeAdaptSpeed:
                        this.EyeAdaptSpeed = ex;
                        break;
                    case HDRData_FieldIndex.BlurRadius:
                        this.BlurRadius = ex;
                        break;
                    case HDRData_FieldIndex.BlurPasses:
                        this.BlurPasses = ex;
                        break;
                    case HDRData_FieldIndex.EmissiveMult:
                        this.EmissiveMult = ex;
                        break;
                    case HDRData_FieldIndex.TargetLum:
                        this.TargetLum = ex;
                        break;
                    case HDRData_FieldIndex.UpperLumClamp:
                        this.UpperLumClamp = ex;
                        break;
                    case HDRData_FieldIndex.BrightScale:
                        this.BrightScale = ex;
                        break;
                    case HDRData_FieldIndex.BrightClamp:
                        this.BrightClamp = ex;
                        break;
                    case HDRData_FieldIndex.LumRampNoTex:
                        this.LumRampNoTex = ex;
                        break;
                    case HDRData_FieldIndex.LumRampMin:
                        this.LumRampMin = ex;
                        break;
                    case HDRData_FieldIndex.LumRampMax:
                        this.LumRampMax = ex;
                        break;
                    case HDRData_FieldIndex.SunlightDimmer:
                        this.SunlightDimmer = ex;
                        break;
                    case HDRData_FieldIndex.GrassDimmer:
                        this.GrassDimmer = ex;
                        break;
                    case HDRData_FieldIndex.TreeDimmer:
                        this.TreeDimmer = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
                switch (enu)
                {
                    case HDRData_FieldIndex.EyeAdaptSpeed:
                        this.EyeAdaptSpeed = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.BlurRadius:
                        this.BlurRadius = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.BlurPasses:
                        this.BlurPasses = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.EmissiveMult:
                        this.EmissiveMult = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.TargetLum:
                        this.TargetLum = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.UpperLumClamp:
                        this.UpperLumClamp = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.BrightScale:
                        this.BrightScale = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.BrightClamp:
                        this.BrightClamp = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.LumRampNoTex:
                        this.LumRampNoTex = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.LumRampMin:
                        this.LumRampMin = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.LumRampMax:
                        this.LumRampMax = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.SunlightDimmer:
                        this.SunlightDimmer = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.GrassDimmer:
                        this.GrassDimmer = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.TreeDimmer:
                        this.TreeDimmer = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (EyeAdaptSpeed != null) return true;
                if (BlurRadius != null) return true;
                if (BlurPasses != null) return true;
                if (EmissiveMult != null) return true;
                if (TargetLum != null) return true;
                if (UpperLumClamp != null) return true;
                if (BrightScale != null) return true;
                if (BrightClamp != null) return true;
                if (LumRampNoTex != null) return true;
                if (LumRampMin != null) return true;
                if (LumRampMax != null) return true;
                if (SunlightDimmer != null) return true;
                if (GrassDimmer != null) return true;
                if (TreeDimmer != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(EyeAdaptSpeed, "EyeAdaptSpeed");
                fg.AppendItem(BlurRadius, "BlurRadius");
                fg.AppendItem(BlurPasses, "BlurPasses");
                fg.AppendItem(EmissiveMult, "EmissiveMult");
                fg.AppendItem(TargetLum, "TargetLum");
                fg.AppendItem(UpperLumClamp, "UpperLumClamp");
                fg.AppendItem(BrightScale, "BrightScale");
                fg.AppendItem(BrightClamp, "BrightClamp");
                fg.AppendItem(LumRampNoTex, "LumRampNoTex");
                fg.AppendItem(LumRampMin, "LumRampMin");
                fg.AppendItem(LumRampMax, "LumRampMax");
                fg.AppendItem(SunlightDimmer, "SunlightDimmer");
                fg.AppendItem(GrassDimmer, "GrassDimmer");
                fg.AppendItem(TreeDimmer, "TreeDimmer");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.EyeAdaptSpeed = this.EyeAdaptSpeed.Combine(rhs.EyeAdaptSpeed);
                ret.BlurRadius = this.BlurRadius.Combine(rhs.BlurRadius);
                ret.BlurPasses = this.BlurPasses.Combine(rhs.BlurPasses);
                ret.EmissiveMult = this.EmissiveMult.Combine(rhs.EmissiveMult);
                ret.TargetLum = this.TargetLum.Combine(rhs.TargetLum);
                ret.UpperLumClamp = this.UpperLumClamp.Combine(rhs.UpperLumClamp);
                ret.BrightScale = this.BrightScale.Combine(rhs.BrightScale);
                ret.BrightClamp = this.BrightClamp.Combine(rhs.BrightClamp);
                ret.LumRampNoTex = this.LumRampNoTex.Combine(rhs.LumRampNoTex);
                ret.LumRampMin = this.LumRampMin.Combine(rhs.LumRampMin);
                ret.LumRampMax = this.LumRampMax.Combine(rhs.LumRampMax);
                ret.SunlightDimmer = this.SunlightDimmer.Combine(rhs.SunlightDimmer);
                ret.GrassDimmer = this.GrassDimmer.Combine(rhs.GrassDimmer);
                ret.TreeDimmer = this.TreeDimmer.Combine(rhs.TreeDimmer);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool EyeAdaptSpeed;
            public bool BlurRadius;
            public bool BlurPasses;
            public bool EmissiveMult;
            public bool TargetLum;
            public bool UpperLumClamp;
            public bool BrightScale;
            public bool BrightClamp;
            public bool LumRampNoTex;
            public bool LumRampMin;
            public bool LumRampMax;
            public bool SunlightDimmer;
            public bool GrassDimmer;
            public bool TreeDimmer;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.EyeAdaptSpeed = defaultOn;
                this.BlurRadius = defaultOn;
                this.BlurPasses = defaultOn;
                this.EmissiveMult = defaultOn;
                this.TargetLum = defaultOn;
                this.UpperLumClamp = defaultOn;
                this.BrightScale = defaultOn;
                this.BrightClamp = defaultOn;
                this.LumRampNoTex = defaultOn;
                this.LumRampMin = defaultOn;
                this.LumRampMax = defaultOn;
                this.SunlightDimmer = defaultOn;
                this.GrassDimmer = defaultOn;
                this.TreeDimmer = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((EyeAdaptSpeed, null));
                ret.Add((BlurRadius, null));
                ret.Add((BlurPasses, null));
                ret.Add((EmissiveMult, null));
                ret.Add((TargetLum, null));
                ret.Add((UpperLumClamp, null));
                ret.Add((BrightScale, null));
                ret.Add((BrightClamp, null));
                ret.Add((LumRampNoTex, null));
                ret.Add((LumRampMin, null));
                ret.Add((LumRampMax, null));
                ret.Add((SunlightDimmer, null));
                ret.Add((GrassDimmer, null));
                ret.Add((TreeDimmer, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = HDRData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HDRDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HDRDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static HDRData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static HDRData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new HDRData();
            ((HDRDataSetterCommon)((IHDRDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out HDRData item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IHDRDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((HDRDataSetterCommon)((IHDRDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static HDRData GetNew()
        {
            return new HDRData();
        }

    }
    #endregion

    #region Interface
    public partial interface IHDRData :
        IHDRDataGetter,
        ILoquiObjectSetter<IHDRData>
    {
        new Single EyeAdaptSpeed { get; set; }
        new Single BlurRadius { get; set; }
        new Single BlurPasses { get; set; }
        new Single EmissiveMult { get; set; }
        new Single TargetLum { get; set; }
        new Single UpperLumClamp { get; set; }
        new Single BrightScale { get; set; }
        new Single BrightClamp { get; set; }
        new Single LumRampNoTex { get; set; }
        new Single LumRampMin { get; set; }
        new Single LumRampMax { get; set; }
        new Single SunlightDimmer { get; set; }
        new Single GrassDimmer { get; set; }
        new Single TreeDimmer { get; set; }
    }

    public partial interface IHDRDataGetter :
        ILoquiObject,
        ILoquiObject<IHDRDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => HDRData_Registration.Instance;
        Single EyeAdaptSpeed { get; }
        Single BlurRadius { get; }
        Single BlurPasses { get; }
        Single EmissiveMult { get; }
        Single TargetLum { get; }
        Single UpperLumClamp { get; }
        Single BrightScale { get; }
        Single BrightClamp { get; }
        Single LumRampNoTex { get; }
        Single LumRampMin { get; }
        Single LumRampMax { get; }
        Single SunlightDimmer { get; }
        Single GrassDimmer { get; }
        Single TreeDimmer { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HDRDataMixIn
    {
        public static void Clear(this IHDRData item)
        {
            ((HDRDataSetterCommon)((IHDRDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HDRData.Mask<bool> GetEqualsMask(
            this IHDRDataGetter item,
            IHDRDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IHDRDataGetter item,
            string? name = null,
            HDRData.Mask<bool>? printMask = null)
        {
            return ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IHDRDataGetter item,
            FileGeneration fg,
            string? name = null,
            HDRData.Mask<bool>? printMask = null)
        {
            ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IHDRDataGetter item,
            HDRData.Mask<bool?> checkMask)
        {
            return ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static HDRData.Mask<bool> GetHasBeenSetMask(this IHDRDataGetter item)
        {
            var ret = new HDRData.Mask<bool>(false);
            ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IHDRDataGetter item,
            IHDRDataGetter rhs)
        {
            return ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IHDRData lhs,
            IHDRDataGetter rhs)
        {
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IHDRData lhs,
            IHDRDataGetter rhs,
            HDRData.TranslationMask? copyMask = null)
        {
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IHDRData lhs,
            IHDRDataGetter rhs,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = HDRData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHDRData lhs,
            IHDRDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static HDRData DeepCopy(
            this IHDRDataGetter item,
            HDRData.TranslationMask? copyMask = null)
        {
            return ((HDRDataSetterTranslationCommon)((IHDRDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HDRData DeepCopy(
            this IHDRDataGetter item,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? copyMask = null)
        {
            return ((HDRDataSetterTranslationCommon)((IHDRDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HDRData DeepCopy(
            this IHDRDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HDRDataSetterTranslationCommon)((IHDRDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IHDRData item,
            XElement node,
            HDRData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IHDRData item,
            XElement node,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HDRData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IHDRData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((HDRDataSetterCommon)((IHDRDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHDRData item,
            string path,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHDRData item,
            string path,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHDRData item,
            string path,
            ErrorMaskBuilder? errorMask,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IHDRData item,
            Stream stream,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHDRData item,
            Stream stream,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHDRData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            HDRData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IHDRData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IHDRData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HDRDataSetterCommon)((IHDRDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum HDRData_FieldIndex
    {
        EyeAdaptSpeed = 0,
        BlurRadius = 1,
        BlurPasses = 2,
        EmissiveMult = 3,
        TargetLum = 4,
        UpperLumClamp = 5,
        BrightScale = 6,
        BrightClamp = 7,
        LumRampNoTex = 8,
        LumRampMin = 9,
        LumRampMax = 10,
        SunlightDimmer = 11,
        GrassDimmer = 12,
        TreeDimmer = 13,
    }
    #endregion

    #region Registration
    public partial class HDRData_Registration : ILoquiRegistration
    {
        public static readonly HDRData_Registration Instance = new HDRData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 217,
            version: 0);

        public const string GUID = "4c7c0391-9e6d-4059-9077-52a182a9c366";

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(HDRData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HDRData.ErrorMask);

        public static readonly Type ClassType = typeof(HDRData);

        public static readonly Type GetterType = typeof(IHDRDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHDRData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.HDRData";

        public const string Name = "HDRData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "EYEADAPTSPEED":
                    return (ushort)HDRData_FieldIndex.EyeAdaptSpeed;
                case "BLURRADIUS":
                    return (ushort)HDRData_FieldIndex.BlurRadius;
                case "BLURPASSES":
                    return (ushort)HDRData_FieldIndex.BlurPasses;
                case "EMISSIVEMULT":
                    return (ushort)HDRData_FieldIndex.EmissiveMult;
                case "TARGETLUM":
                    return (ushort)HDRData_FieldIndex.TargetLum;
                case "UPPERLUMCLAMP":
                    return (ushort)HDRData_FieldIndex.UpperLumClamp;
                case "BRIGHTSCALE":
                    return (ushort)HDRData_FieldIndex.BrightScale;
                case "BRIGHTCLAMP":
                    return (ushort)HDRData_FieldIndex.BrightClamp;
                case "LUMRAMPNOTEX":
                    return (ushort)HDRData_FieldIndex.LumRampNoTex;
                case "LUMRAMPMIN":
                    return (ushort)HDRData_FieldIndex.LumRampMin;
                case "LUMRAMPMAX":
                    return (ushort)HDRData_FieldIndex.LumRampMax;
                case "SUNLIGHTDIMMER":
                    return (ushort)HDRData_FieldIndex.SunlightDimmer;
                case "GRASSDIMMER":
                    return (ushort)HDRData_FieldIndex.GrassDimmer;
                case "TREEDIMMER":
                    return (ushort)HDRData_FieldIndex.TreeDimmer;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
            switch (enu)
            {
                case HDRData_FieldIndex.EyeAdaptSpeed:
                case HDRData_FieldIndex.BlurRadius:
                case HDRData_FieldIndex.BlurPasses:
                case HDRData_FieldIndex.EmissiveMult:
                case HDRData_FieldIndex.TargetLum:
                case HDRData_FieldIndex.UpperLumClamp:
                case HDRData_FieldIndex.BrightScale:
                case HDRData_FieldIndex.BrightClamp:
                case HDRData_FieldIndex.LumRampNoTex:
                case HDRData_FieldIndex.LumRampMin:
                case HDRData_FieldIndex.LumRampMax:
                case HDRData_FieldIndex.SunlightDimmer:
                case HDRData_FieldIndex.GrassDimmer:
                case HDRData_FieldIndex.TreeDimmer:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
            switch (enu)
            {
                case HDRData_FieldIndex.EyeAdaptSpeed:
                case HDRData_FieldIndex.BlurRadius:
                case HDRData_FieldIndex.BlurPasses:
                case HDRData_FieldIndex.EmissiveMult:
                case HDRData_FieldIndex.TargetLum:
                case HDRData_FieldIndex.UpperLumClamp:
                case HDRData_FieldIndex.BrightScale:
                case HDRData_FieldIndex.BrightClamp:
                case HDRData_FieldIndex.LumRampNoTex:
                case HDRData_FieldIndex.LumRampMin:
                case HDRData_FieldIndex.LumRampMax:
                case HDRData_FieldIndex.SunlightDimmer:
                case HDRData_FieldIndex.GrassDimmer:
                case HDRData_FieldIndex.TreeDimmer:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
            switch (enu)
            {
                case HDRData_FieldIndex.EyeAdaptSpeed:
                case HDRData_FieldIndex.BlurRadius:
                case HDRData_FieldIndex.BlurPasses:
                case HDRData_FieldIndex.EmissiveMult:
                case HDRData_FieldIndex.TargetLum:
                case HDRData_FieldIndex.UpperLumClamp:
                case HDRData_FieldIndex.BrightScale:
                case HDRData_FieldIndex.BrightClamp:
                case HDRData_FieldIndex.LumRampNoTex:
                case HDRData_FieldIndex.LumRampMin:
                case HDRData_FieldIndex.LumRampMax:
                case HDRData_FieldIndex.SunlightDimmer:
                case HDRData_FieldIndex.GrassDimmer:
                case HDRData_FieldIndex.TreeDimmer:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
            switch (enu)
            {
                case HDRData_FieldIndex.EyeAdaptSpeed:
                    return "EyeAdaptSpeed";
                case HDRData_FieldIndex.BlurRadius:
                    return "BlurRadius";
                case HDRData_FieldIndex.BlurPasses:
                    return "BlurPasses";
                case HDRData_FieldIndex.EmissiveMult:
                    return "EmissiveMult";
                case HDRData_FieldIndex.TargetLum:
                    return "TargetLum";
                case HDRData_FieldIndex.UpperLumClamp:
                    return "UpperLumClamp";
                case HDRData_FieldIndex.BrightScale:
                    return "BrightScale";
                case HDRData_FieldIndex.BrightClamp:
                    return "BrightClamp";
                case HDRData_FieldIndex.LumRampNoTex:
                    return "LumRampNoTex";
                case HDRData_FieldIndex.LumRampMin:
                    return "LumRampMin";
                case HDRData_FieldIndex.LumRampMax:
                    return "LumRampMax";
                case HDRData_FieldIndex.SunlightDimmer:
                    return "SunlightDimmer";
                case HDRData_FieldIndex.GrassDimmer:
                    return "GrassDimmer";
                case HDRData_FieldIndex.TreeDimmer:
                    return "TreeDimmer";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
            switch (enu)
            {
                case HDRData_FieldIndex.EyeAdaptSpeed:
                case HDRData_FieldIndex.BlurRadius:
                case HDRData_FieldIndex.BlurPasses:
                case HDRData_FieldIndex.EmissiveMult:
                case HDRData_FieldIndex.TargetLum:
                case HDRData_FieldIndex.UpperLumClamp:
                case HDRData_FieldIndex.BrightScale:
                case HDRData_FieldIndex.BrightClamp:
                case HDRData_FieldIndex.LumRampNoTex:
                case HDRData_FieldIndex.LumRampMin:
                case HDRData_FieldIndex.LumRampMax:
                case HDRData_FieldIndex.SunlightDimmer:
                case HDRData_FieldIndex.GrassDimmer:
                case HDRData_FieldIndex.TreeDimmer:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
            switch (enu)
            {
                case HDRData_FieldIndex.EyeAdaptSpeed:
                case HDRData_FieldIndex.BlurRadius:
                case HDRData_FieldIndex.BlurPasses:
                case HDRData_FieldIndex.EmissiveMult:
                case HDRData_FieldIndex.TargetLum:
                case HDRData_FieldIndex.UpperLumClamp:
                case HDRData_FieldIndex.BrightScale:
                case HDRData_FieldIndex.BrightClamp:
                case HDRData_FieldIndex.LumRampNoTex:
                case HDRData_FieldIndex.LumRampMin:
                case HDRData_FieldIndex.LumRampMax:
                case HDRData_FieldIndex.SunlightDimmer:
                case HDRData_FieldIndex.GrassDimmer:
                case HDRData_FieldIndex.TreeDimmer:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
            switch (enu)
            {
                case HDRData_FieldIndex.EyeAdaptSpeed:
                    return typeof(Single);
                case HDRData_FieldIndex.BlurRadius:
                    return typeof(Single);
                case HDRData_FieldIndex.BlurPasses:
                    return typeof(Single);
                case HDRData_FieldIndex.EmissiveMult:
                    return typeof(Single);
                case HDRData_FieldIndex.TargetLum:
                    return typeof(Single);
                case HDRData_FieldIndex.UpperLumClamp:
                    return typeof(Single);
                case HDRData_FieldIndex.BrightScale:
                    return typeof(Single);
                case HDRData_FieldIndex.BrightClamp:
                    return typeof(Single);
                case HDRData_FieldIndex.LumRampNoTex:
                    return typeof(Single);
                case HDRData_FieldIndex.LumRampMin:
                    return typeof(Single);
                case HDRData_FieldIndex.LumRampMax:
                    return typeof(Single);
                case HDRData_FieldIndex.SunlightDimmer:
                    return typeof(Single);
                case HDRData_FieldIndex.GrassDimmer:
                    return typeof(Single);
                case HDRData_FieldIndex.TreeDimmer:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(HDRDataXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.HNAM;
        public static readonly Type BinaryWriteTranslation = typeof(HDRDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class HDRDataSetterCommon
    {
        public static readonly HDRDataSetterCommon Instance = new HDRDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHDRData item)
        {
            ClearPartial();
            item.EyeAdaptSpeed = default;
            item.BlurRadius = default;
            item.BlurPasses = default;
            item.EmissiveMult = default;
            item.TargetLum = default;
            item.UpperLumClamp = default;
            item.BrightScale = default;
            item.BrightClamp = default;
            item.LumRampNoTex = default;
            item.LumRampMin = default;
            item.LumRampMax = default;
            item.SunlightDimmer = default;
            item.GrassDimmer = default;
            item.TreeDimmer = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IHDRData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    HDRDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHDRData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.HNAM)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: HDRDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class HDRDataCommon
    {
        public static readonly HDRDataCommon Instance = new HDRDataCommon();

        public HDRData.Mask<bool> GetEqualsMask(
            IHDRDataGetter item,
            IHDRDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HDRData.Mask<bool>(false);
            ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHDRDataGetter item,
            IHDRDataGetter rhs,
            HDRData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.EyeAdaptSpeed = item.EyeAdaptSpeed.EqualsWithin(rhs.EyeAdaptSpeed);
            ret.BlurRadius = item.BlurRadius.EqualsWithin(rhs.BlurRadius);
            ret.BlurPasses = item.BlurPasses.EqualsWithin(rhs.BlurPasses);
            ret.EmissiveMult = item.EmissiveMult.EqualsWithin(rhs.EmissiveMult);
            ret.TargetLum = item.TargetLum.EqualsWithin(rhs.TargetLum);
            ret.UpperLumClamp = item.UpperLumClamp.EqualsWithin(rhs.UpperLumClamp);
            ret.BrightScale = item.BrightScale.EqualsWithin(rhs.BrightScale);
            ret.BrightClamp = item.BrightClamp.EqualsWithin(rhs.BrightClamp);
            ret.LumRampNoTex = item.LumRampNoTex.EqualsWithin(rhs.LumRampNoTex);
            ret.LumRampMin = item.LumRampMin.EqualsWithin(rhs.LumRampMin);
            ret.LumRampMax = item.LumRampMax.EqualsWithin(rhs.LumRampMax);
            ret.SunlightDimmer = item.SunlightDimmer.EqualsWithin(rhs.SunlightDimmer);
            ret.GrassDimmer = item.GrassDimmer.EqualsWithin(rhs.GrassDimmer);
            ret.TreeDimmer = item.TreeDimmer.EqualsWithin(rhs.TreeDimmer);
        }
        
        public string ToString(
            IHDRDataGetter item,
            string? name = null,
            HDRData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IHDRDataGetter item,
            FileGeneration fg,
            string? name = null,
            HDRData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"HDRData =>");
            }
            else
            {
                fg.AppendLine($"{name} (HDRData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IHDRDataGetter item,
            FileGeneration fg,
            HDRData.Mask<bool>? printMask = null)
        {
            if (printMask?.EyeAdaptSpeed ?? true)
            {
                fg.AppendItem(item.EyeAdaptSpeed, "EyeAdaptSpeed");
            }
            if (printMask?.BlurRadius ?? true)
            {
                fg.AppendItem(item.BlurRadius, "BlurRadius");
            }
            if (printMask?.BlurPasses ?? true)
            {
                fg.AppendItem(item.BlurPasses, "BlurPasses");
            }
            if (printMask?.EmissiveMult ?? true)
            {
                fg.AppendItem(item.EmissiveMult, "EmissiveMult");
            }
            if (printMask?.TargetLum ?? true)
            {
                fg.AppendItem(item.TargetLum, "TargetLum");
            }
            if (printMask?.UpperLumClamp ?? true)
            {
                fg.AppendItem(item.UpperLumClamp, "UpperLumClamp");
            }
            if (printMask?.BrightScale ?? true)
            {
                fg.AppendItem(item.BrightScale, "BrightScale");
            }
            if (printMask?.BrightClamp ?? true)
            {
                fg.AppendItem(item.BrightClamp, "BrightClamp");
            }
            if (printMask?.LumRampNoTex ?? true)
            {
                fg.AppendItem(item.LumRampNoTex, "LumRampNoTex");
            }
            if (printMask?.LumRampMin ?? true)
            {
                fg.AppendItem(item.LumRampMin, "LumRampMin");
            }
            if (printMask?.LumRampMax ?? true)
            {
                fg.AppendItem(item.LumRampMax, "LumRampMax");
            }
            if (printMask?.SunlightDimmer ?? true)
            {
                fg.AppendItem(item.SunlightDimmer, "SunlightDimmer");
            }
            if (printMask?.GrassDimmer ?? true)
            {
                fg.AppendItem(item.GrassDimmer, "GrassDimmer");
            }
            if (printMask?.TreeDimmer ?? true)
            {
                fg.AppendItem(item.TreeDimmer, "TreeDimmer");
            }
        }
        
        public bool HasBeenSet(
            IHDRDataGetter item,
            HDRData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IHDRDataGetter item,
            HDRData.Mask<bool> mask)
        {
            mask.EyeAdaptSpeed = true;
            mask.BlurRadius = true;
            mask.BlurPasses = true;
            mask.EmissiveMult = true;
            mask.TargetLum = true;
            mask.UpperLumClamp = true;
            mask.BrightScale = true;
            mask.BrightClamp = true;
            mask.LumRampNoTex = true;
            mask.LumRampMin = true;
            mask.LumRampMax = true;
            mask.SunlightDimmer = true;
            mask.GrassDimmer = true;
            mask.TreeDimmer = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHDRDataGetter? lhs,
            IHDRDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.EyeAdaptSpeed.EqualsWithin(rhs.EyeAdaptSpeed)) return false;
            if (!lhs.BlurRadius.EqualsWithin(rhs.BlurRadius)) return false;
            if (!lhs.BlurPasses.EqualsWithin(rhs.BlurPasses)) return false;
            if (!lhs.EmissiveMult.EqualsWithin(rhs.EmissiveMult)) return false;
            if (!lhs.TargetLum.EqualsWithin(rhs.TargetLum)) return false;
            if (!lhs.UpperLumClamp.EqualsWithin(rhs.UpperLumClamp)) return false;
            if (!lhs.BrightScale.EqualsWithin(rhs.BrightScale)) return false;
            if (!lhs.BrightClamp.EqualsWithin(rhs.BrightClamp)) return false;
            if (!lhs.LumRampNoTex.EqualsWithin(rhs.LumRampNoTex)) return false;
            if (!lhs.LumRampMin.EqualsWithin(rhs.LumRampMin)) return false;
            if (!lhs.LumRampMax.EqualsWithin(rhs.LumRampMax)) return false;
            if (!lhs.SunlightDimmer.EqualsWithin(rhs.SunlightDimmer)) return false;
            if (!lhs.GrassDimmer.EqualsWithin(rhs.GrassDimmer)) return false;
            if (!lhs.TreeDimmer.EqualsWithin(rhs.TreeDimmer)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IHDRDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.EyeAdaptSpeed);
            hash.Add(item.BlurRadius);
            hash.Add(item.BlurPasses);
            hash.Add(item.EmissiveMult);
            hash.Add(item.TargetLum);
            hash.Add(item.UpperLumClamp);
            hash.Add(item.BrightScale);
            hash.Add(item.BrightClamp);
            hash.Add(item.LumRampNoTex);
            hash.Add(item.LumRampMin);
            hash.Add(item.LumRampMax);
            hash.Add(item.SunlightDimmer);
            hash.Add(item.GrassDimmer);
            hash.Add(item.TreeDimmer);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return HDRData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IHDRDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IHDRDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class HDRDataSetterTranslationCommon
    {
        public static readonly HDRDataSetterTranslationCommon Instance = new HDRDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IHDRData item,
            IHDRDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.EyeAdaptSpeed) ?? true))
            {
                item.EyeAdaptSpeed = rhs.EyeAdaptSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.BlurRadius) ?? true))
            {
                item.BlurRadius = rhs.BlurRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.BlurPasses) ?? true))
            {
                item.BlurPasses = rhs.BlurPasses;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.EmissiveMult) ?? true))
            {
                item.EmissiveMult = rhs.EmissiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.TargetLum) ?? true))
            {
                item.TargetLum = rhs.TargetLum;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.UpperLumClamp) ?? true))
            {
                item.UpperLumClamp = rhs.UpperLumClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.BrightScale) ?? true))
            {
                item.BrightScale = rhs.BrightScale;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.BrightClamp) ?? true))
            {
                item.BrightClamp = rhs.BrightClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampNoTex) ?? true))
            {
                item.LumRampNoTex = rhs.LumRampNoTex;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampMin) ?? true))
            {
                item.LumRampMin = rhs.LumRampMin;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampMax) ?? true))
            {
                item.LumRampMax = rhs.LumRampMax;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.SunlightDimmer) ?? true))
            {
                item.SunlightDimmer = rhs.SunlightDimmer;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.GrassDimmer) ?? true))
            {
                item.GrassDimmer = rhs.GrassDimmer;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.TreeDimmer) ?? true))
            {
                item.TreeDimmer = rhs.TreeDimmer;
            }
        }
        
        #endregion
        
        public HDRData DeepCopy(
            IHDRDataGetter item,
            HDRData.TranslationMask? copyMask = null)
        {
            HDRData ret = (HDRData)((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public HDRData DeepCopy(
            IHDRDataGetter item,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? copyMask = null)
        {
            HDRData ret = (HDRData)((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public HDRData DeepCopy(
            IHDRDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HDRData ret = (HDRData)((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class HDRData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HDRData_Registration.Instance;
        public static HDRData_Registration Registration => HDRData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HDRDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return HDRDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HDRDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHDRDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IHDRDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IHDRDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class HDRDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static HDRDataXmlWriteTranslation Instance = new HDRDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IHDRDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.EyeAdaptSpeed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EyeAdaptSpeed),
                    item: item.EyeAdaptSpeed,
                    fieldIndex: (int)HDRData_FieldIndex.EyeAdaptSpeed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.BlurRadius) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlurRadius),
                    item: item.BlurRadius,
                    fieldIndex: (int)HDRData_FieldIndex.BlurRadius,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.BlurPasses) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlurPasses),
                    item: item.BlurPasses,
                    fieldIndex: (int)HDRData_FieldIndex.BlurPasses,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.EmissiveMult) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EmissiveMult),
                    item: item.EmissiveMult,
                    fieldIndex: (int)HDRData_FieldIndex.EmissiveMult,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.TargetLum) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TargetLum),
                    item: item.TargetLum,
                    fieldIndex: (int)HDRData_FieldIndex.TargetLum,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.UpperLumClamp) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UpperLumClamp),
                    item: item.UpperLumClamp,
                    fieldIndex: (int)HDRData_FieldIndex.UpperLumClamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.BrightScale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BrightScale),
                    item: item.BrightScale,
                    fieldIndex: (int)HDRData_FieldIndex.BrightScale,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.BrightClamp) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BrightClamp),
                    item: item.BrightClamp,
                    fieldIndex: (int)HDRData_FieldIndex.BrightClamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampNoTex) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LumRampNoTex),
                    item: item.LumRampNoTex,
                    fieldIndex: (int)HDRData_FieldIndex.LumRampNoTex,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampMin) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LumRampMin),
                    item: item.LumRampMin,
                    fieldIndex: (int)HDRData_FieldIndex.LumRampMin,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LumRampMax),
                    item: item.LumRampMax,
                    fieldIndex: (int)HDRData_FieldIndex.LumRampMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.SunlightDimmer) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SunlightDimmer),
                    item: item.SunlightDimmer,
                    fieldIndex: (int)HDRData_FieldIndex.SunlightDimmer,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.GrassDimmer) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GrassDimmer),
                    item: item.GrassDimmer,
                    fieldIndex: (int)HDRData_FieldIndex.GrassDimmer,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)HDRData_FieldIndex.TreeDimmer) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TreeDimmer),
                    item: item.TreeDimmer,
                    fieldIndex: (int)HDRData_FieldIndex.TreeDimmer,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IHDRDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.HDRData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.HDRData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IHDRDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IHDRDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IHDRDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class HDRDataXmlCreateTranslation
    {
        public readonly static HDRDataXmlCreateTranslation Instance = new HDRDataXmlCreateTranslation();

        public static void FillPublicXml(
            IHDRData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    HDRDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IHDRData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "EyeAdaptSpeed":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.EyeAdaptSpeed);
                    try
                    {
                        item.EyeAdaptSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlurRadius":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.BlurRadius);
                    try
                    {
                        item.BlurRadius = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlurPasses":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.BlurPasses);
                    try
                    {
                        item.BlurPasses = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EmissiveMult":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.EmissiveMult);
                    try
                    {
                        item.EmissiveMult = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TargetLum":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.TargetLum);
                    try
                    {
                        item.TargetLum = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UpperLumClamp":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.UpperLumClamp);
                    try
                    {
                        item.UpperLumClamp = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BrightScale":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.BrightScale);
                    try
                    {
                        item.BrightScale = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BrightClamp":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.BrightClamp);
                    try
                    {
                        item.BrightClamp = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LumRampNoTex":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.LumRampNoTex);
                    try
                    {
                        item.LumRampNoTex = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LumRampMin":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.LumRampMin);
                    try
                    {
                        item.LumRampMin = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LumRampMax":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.LumRampMax);
                    try
                    {
                        item.LumRampMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunlightDimmer":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.SunlightDimmer);
                    try
                    {
                        item.SunlightDimmer = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GrassDimmer":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.GrassDimmer);
                    try
                    {
                        item.GrassDimmer = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TreeDimmer":
                    errorMask?.PushIndex((int)HDRData_FieldIndex.TreeDimmer);
                    try
                    {
                        item.TreeDimmer = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class HDRDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IHDRDataGetter item,
            XElement node,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((HDRDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HDRData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IHDRDataGetter item,
            string path,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHDRDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHDRDataGetter item,
            Stream stream,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IHDRDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IHDRDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((HDRDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IHDRDataGetter item,
            XElement node,
            string? name = null,
            HDRData.TranslationMask? translationMask = null)
        {
            ((HDRDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IHDRDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((HDRDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHDRDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((HDRDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class HDRDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static HDRDataBinaryWriteTranslation Instance = new HDRDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IHDRDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EyeAdaptSpeed);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BlurRadius);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BlurPasses);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EmissiveMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TargetLum);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UpperLumClamp);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BrightScale);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BrightClamp);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LumRampNoTex);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LumRampMin);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LumRampMax);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SunlightDimmer);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GrassDimmer);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TreeDimmer);
        }

        public void Write(
            MutagenWriter writer,
            IHDRDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.HNAM),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IHDRDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class HDRDataBinaryCreateTranslation
    {
        public readonly static HDRDataBinaryCreateTranslation Instance = new HDRDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IHDRData item,
            MutagenFrame frame)
        {
            item.EyeAdaptSpeed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BlurRadius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BlurPasses = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EmissiveMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.TargetLum = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.UpperLumClamp = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BrightScale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BrightClamp = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.LumRampNoTex = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.LumRampMin = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.LumRampMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.SunlightDimmer = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.GrassDimmer = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.TreeDimmer = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class HDRDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IHDRDataGetter item,
            MutagenWriter writer)
        {
            ((HDRDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class HDRDataBinaryOverlay :
        BinaryOverlay,
        IHDRDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HDRData_Registration.Instance;
        public static HDRData_Registration Registration => HDRData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HDRDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HDRDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHDRDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IHDRDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IHDRDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IHDRDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => HDRDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((HDRDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HDRDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HDRDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Single EyeAdaptSpeed => SpanExt.GetFloat(_data.Slice(0x0, 0x4));
        public Single BlurRadius => SpanExt.GetFloat(_data.Slice(0x4, 0x4));
        public Single BlurPasses => SpanExt.GetFloat(_data.Slice(0x8, 0x4));
        public Single EmissiveMult => SpanExt.GetFloat(_data.Slice(0xC, 0x4));
        public Single TargetLum => SpanExt.GetFloat(_data.Slice(0x10, 0x4));
        public Single UpperLumClamp => SpanExt.GetFloat(_data.Slice(0x14, 0x4));
        public Single BrightScale => SpanExt.GetFloat(_data.Slice(0x18, 0x4));
        public Single BrightClamp => SpanExt.GetFloat(_data.Slice(0x1C, 0x4));
        public Single LumRampNoTex => SpanExt.GetFloat(_data.Slice(0x20, 0x4));
        public Single LumRampMin => SpanExt.GetFloat(_data.Slice(0x24, 0x4));
        public Single LumRampMax => SpanExt.GetFloat(_data.Slice(0x28, 0x4));
        public Single SunlightDimmer => SpanExt.GetFloat(_data.Slice(0x2C, 0x4));
        public Single GrassDimmer => SpanExt.GetFloat(_data.Slice(0x30, 0x4));
        public Single TreeDimmer => SpanExt.GetFloat(_data.Slice(0x34, 0x4));
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HDRDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static HDRDataBinaryOverlay HDRDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new HDRDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x38 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static HDRDataBinaryOverlay HDRDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return HDRDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HDRDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

