/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class HavokData : IHavokData, ILoquiObjectSetter, IEquatable<HavokData>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HavokData_Registration.Instance;
        public static HavokData_Registration Registration => HavokData_Registration.Instance;

        #region Ctor
        public HavokData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Material
        protected readonly INotifyingItem<HavokData.MaterialType> _Material = NotifyingItem.Factory<HavokData.MaterialType>();
        public INotifyingItem<HavokData.MaterialType> Material_Property => _Material;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public HavokData.MaterialType Material
        {
            get => this._Material.Item;
            set => this._Material.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<HavokData.MaterialType> IHavokData.Material_Property => this.Material_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<HavokData.MaterialType> IHavokDataGetter.Material_Property => this.Material_Property;
        #endregion
        #region Friction
        protected readonly INotifyingItem<Byte> _Friction = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Friction_Property => _Friction;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Friction
        {
            get => this._Friction.Item;
            set => this._Friction.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IHavokData.Friction_Property => this.Friction_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IHavokDataGetter.Friction_Property => this.Friction_Property;
        #endregion
        #region Restitution
        protected readonly INotifyingItem<Byte> _Restitution = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Restitution_Property => _Restitution;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Restitution
        {
            get => this._Restitution.Item;
            set => this._Restitution.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IHavokData.Restitution_Property => this.Restitution_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IHavokDataGetter.Restitution_Property => this.Restitution_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => HavokDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => HavokDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => HavokDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            HavokDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return HavokDataCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            HavokData_Mask<bool> printMask = null)
        {
            return HavokDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            HavokDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public HavokData_Mask<bool> GetHasBeenSetMask()
        {
            return HavokDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is HavokData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(HavokData rhs)
        {
            if (rhs == null) return false;
            if (Material != rhs.Material) return false;
            if (Friction != rhs.Friction) return false;
            if (Restitution != rhs.Restitution) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Material).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Friction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Restitution).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static HavokData Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static HavokData Create_XML(
            XElement root,
            out HavokData_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static HavokData Create_XML(
            XElement root,
            bool doMasks,
            out HavokData_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (HavokData Object, HavokData_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            HavokData_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new HavokData_ErrorMask()) : default(Func<HavokData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static HavokData Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static HavokData Create_XML(
            string path,
            out HavokData_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static HavokData Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static HavokData Create_XML(
            Stream stream,
            out HavokData_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<HavokData, HavokData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out HavokData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<HavokData, HavokData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out HavokData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out HavokData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out HavokData_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (HavokData_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out HavokData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out HavokData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            HavokDataCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                writer: writer,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static HavokData Create_XML_Internal(
            XElement root,
            Func<HavokData_ErrorMask> errorMask)
        {
            var ret = new HavokData();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            HavokData item,
            XElement root,
            string name,
            Func<HavokData_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Material":
                    item._Material.SetIfSucceeded(EnumXmlTranslation<HavokData.MaterialType>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)HavokData_FieldIndex.Material,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Friction":
                    item._Friction.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)HavokData_FieldIndex.Friction,
                        errorMask: errorMask));
                    break;
                case "Restitution":
                    item._Restitution.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)HavokData_FieldIndex.Restitution,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static HavokData Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static HavokData Create_Binary(
            MutagenFrame frame,
            out HavokData_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static HavokData Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out HavokData_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (HavokData Object, HavokData_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            HavokData_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new HavokData_ErrorMask()) : default(Func<HavokData_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static HavokData Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static HavokData Create_Binary(
            string path,
            out HavokData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static HavokData Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static HavokData Create_Binary(
            Stream stream,
            out HavokData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out HavokData_ErrorMask errorMask)
        {
            errorMask = (HavokData_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out HavokData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out HavokData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            HavokDataCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static HavokData Create_Binary_Internal(
            MutagenFrame frame,
            Func<HavokData_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new HavokData();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    HavokData_Registration.HNAM_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            HavokData item,
            MutagenFrame frame,
            Func<HavokData_ErrorMask> errorMask)
        {
            item._Material.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<HavokData.MaterialType>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(1)),
                fieldIndex: (int)HavokData_FieldIndex.Material,
                errorMask: errorMask));
            item._Friction.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)HavokData_FieldIndex.Friction,
                errorMask: errorMask));
            item._Restitution.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)HavokData_FieldIndex.Restitution,
                errorMask: errorMask));
        }

        #endregion

        public HavokData Copy(
            HavokData_CopyMask copyMask = null,
            IHavokDataGetter def = null)
        {
            return HavokData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static HavokData Copy(
            IHavokData item,
            HavokData_CopyMask copyMask = null,
            IHavokDataGetter def = null)
        {
            HavokData ret;
            if (item.GetType().Equals(typeof(HavokData)))
            {
                ret = new HavokData();
            }
            else
            {
                ret = (HavokData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            HavokData_CopyMask copyMask = null,
            IHavokDataGetter def = null)
            where CopyType : class, IHavokData
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(HavokData)))
            {
                ret = new HavokData() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static HavokData Copy_ToLoqui(
            IHavokDataGetter item,
            HavokData_CopyMask copyMask = null,
            IHavokDataGetter def = null)
        {
            HavokData ret;
            if (item.GetType().Equals(typeof(HavokData)))
            {
                ret = new HavokData() as HavokData;
            }
            else
            {
                ret = (HavokData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                    this._Material.Set(
                        (HavokData.MaterialType)obj,
                        cmds);
                    break;
                case HavokData_FieldIndex.Friction:
                    this._Friction.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case HavokData_FieldIndex.Restitution:
                    this._Restitution.Set(
                        (Byte)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            HavokDataCommon.Clear(this, cmds);
        }


        public static HavokData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new HavokData();
            foreach (var pair in fields)
            {
                CopyInInternal_HavokData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_HavokData(HavokData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out HavokData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                    obj._Material.Set(
                        (HavokData.MaterialType)pair.Value,
                        null);
                    break;
                case HavokData_FieldIndex.Friction:
                    obj._Friction.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case HavokData_FieldIndex.Restitution:
                    obj._Restitution.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, HavokData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IHavokData : IHavokDataGetter, ILoquiClass<IHavokData, IHavokDataGetter>, ILoquiClass<HavokData, IHavokDataGetter>
    {
        new HavokData.MaterialType Material { get; set; }
        new INotifyingItem<HavokData.MaterialType> Material_Property { get; }

        new Byte Friction { get; set; }
        new INotifyingItem<Byte> Friction_Property { get; }

        new Byte Restitution { get; set; }
        new INotifyingItem<Byte> Restitution_Property { get; }

    }

    public interface IHavokDataGetter : ILoquiObject
    {
        #region Material
        HavokData.MaterialType Material { get; }
        INotifyingItemGetter<HavokData.MaterialType> Material_Property { get; }

        #endregion
        #region Friction
        Byte Friction { get; }
        INotifyingItemGetter<Byte> Friction_Property { get; }

        #endregion
        #region Restitution
        Byte Restitution { get; }
        INotifyingItemGetter<Byte> Restitution_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum HavokData_FieldIndex
    {
        Material = 0,
        Friction = 1,
        Restitution = 2,
    }
    #endregion

    #region Registration
    public class HavokData_Registration : ILoquiRegistration
    {
        public static readonly HavokData_Registration Instance = new HavokData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 52,
            version: 0);

        public const string GUID = "f6f11f54-031d-4243-9a36-a9ccf61f08c1";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(HavokData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(HavokData_ErrorMask);

        public static readonly Type ClassType = typeof(HavokData);

        public static readonly Type GetterType = typeof(IHavokDataGetter);

        public static readonly Type SetterType = typeof(IHavokData);

        public static readonly Type CommonType = typeof(HavokDataCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.HavokData";

        public const string Name = "HavokData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MATERIAL":
                    return (ushort)HavokData_FieldIndex.Material;
                case "FRICTION":
                    return (ushort)HavokData_FieldIndex.Friction;
                case "RESTITUTION":
                    return (ushort)HavokData_FieldIndex.Restitution;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                case HavokData_FieldIndex.Friction:
                case HavokData_FieldIndex.Restitution:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                case HavokData_FieldIndex.Friction:
                case HavokData_FieldIndex.Restitution:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                case HavokData_FieldIndex.Friction:
                case HavokData_FieldIndex.Restitution:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                    return "Material";
                case HavokData_FieldIndex.Friction:
                    return "Friction";
                case HavokData_FieldIndex.Restitution:
                    return "Restitution";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                case HavokData_FieldIndex.Friction:
                case HavokData_FieldIndex.Restitution:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                case HavokData_FieldIndex.Friction:
                case HavokData_FieldIndex.Restitution:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                    return typeof(HavokData.MaterialType);
                case HavokData_FieldIndex.Friction:
                    return typeof(Byte);
                case HavokData_FieldIndex.Restitution:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = HNAM_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class HavokDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IHavokData item,
            IHavokDataGetter rhs,
            HavokData_CopyMask copyMask = null,
            IHavokDataGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            HavokDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IHavokData item,
            IHavokDataGetter rhs,
            out HavokData_ErrorMask errorMask,
            HavokData_CopyMask copyMask = null,
            IHavokDataGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            HavokDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IHavokData item,
            IHavokDataGetter rhs,
            IHavokDataGetter def,
            bool doMasks,
            out HavokData_ErrorMask errorMask,
            HavokData_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            HavokData_ErrorMask retErrorMask = null;
            Func<HavokData_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new HavokData_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IHavokData item,
            IHavokDataGetter rhs,
            IHavokDataGetter def,
            bool doMasks,
            Func<HavokData_ErrorMask> errorMask,
            HavokData_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Material ?? true)
            {
                try
                {
                    item.Material_Property.Set(
                        value: rhs.Material,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)HavokData_FieldIndex.Material, ex);
                }
            }
            if (copyMask?.Friction ?? true)
            {
                try
                {
                    item.Friction_Property.Set(
                        value: rhs.Friction,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)HavokData_FieldIndex.Friction, ex);
                }
            }
            if (copyMask?.Restitution ?? true)
            {
                try
                {
                    item.Restitution_Property.Set(
                        value: rhs.Restitution,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)HavokData_FieldIndex.Restitution, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IHavokData obj,
            NotifyingFireParameters cmds = null)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                case HavokData_FieldIndex.Friction:
                case HavokData_FieldIndex.Restitution:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IHavokData obj,
            NotifyingUnsetParameters cmds = null)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                    obj.Material = default(HavokData.MaterialType);
                    break;
                case HavokData_FieldIndex.Friction:
                    obj.Friction = default(Byte);
                    break;
                case HavokData_FieldIndex.Restitution:
                    obj.Restitution = default(Byte);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IHavokData obj)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                case HavokData_FieldIndex.Friction:
                case HavokData_FieldIndex.Restitution:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IHavokDataGetter obj)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                    return obj.Material;
                case HavokData_FieldIndex.Friction:
                    return obj.Friction;
                case HavokData_FieldIndex.Restitution:
                    return obj.Restitution;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IHavokData item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Material = default(HavokData.MaterialType);
            item.Friction = default(Byte);
            item.Restitution = default(Byte);
        }

        public static HavokData_Mask<bool> GetEqualsMask(
            this IHavokDataGetter item,
            IHavokDataGetter rhs)
        {
            var ret = new HavokData_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IHavokDataGetter item,
            IHavokDataGetter rhs,
            HavokData_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Material = item.Material == rhs.Material;
            ret.Friction = item.Friction == rhs.Friction;
            ret.Restitution = item.Restitution == rhs.Restitution;
        }

        public static string ToString(
            this IHavokDataGetter item,
            string name = null,
            HavokData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IHavokDataGetter item,
            FileGeneration fg,
            string name = null,
            HavokData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(HavokData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(HavokData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Material ?? true)
                {
                    fg.AppendLine($"Material => {item.Material}");
                }
                if (printMask?.Friction ?? true)
                {
                    fg.AppendLine($"Friction => {item.Friction}");
                }
                if (printMask?.Restitution ?? true)
                {
                    fg.AppendLine($"Restitution => {item.Restitution}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IHavokDataGetter item,
            HavokData_Mask<bool?> checkMask)
        {
            return true;
        }

        public static HavokData_Mask<bool> GetHasBeenSetMask(IHavokDataGetter item)
        {
            var ret = new HavokData_Mask<bool>();
            ret.Material = true;
            ret.Friction = true;
            ret.Restitution = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IHavokDataGetter item,
            bool doMasks,
            out HavokData_ErrorMask errorMask,
            string name = null)
        {
            HavokData_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new HavokData_ErrorMask()) : default(Func<HavokData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IHavokDataGetter item,
            Func<HavokData_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.HavokData"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.HavokData");
                    }
                    EnumXmlTranslation<HavokData.MaterialType>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Material),
                        item: item.Material_Property,
                        fieldIndex: (int)HavokData_FieldIndex.Material,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Friction),
                        item: item.Friction_Property,
                        fieldIndex: (int)HavokData_FieldIndex.Friction,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Restitution),
                        item: item.Restitution_Property,
                        fieldIndex: (int)HavokData_FieldIndex.Restitution,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            HavokData item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out HavokData_ErrorMask errorMask)
        {
            HavokData_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new HavokData_ErrorMask()) : default(Func<HavokData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            HavokData item,
            RecordTypeConverter recordTypeConverter,
            Func<HavokData_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: HavokData_Registration.HNAM_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            HavokData item,
            MutagenWriter writer,
            Func<HavokData_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<HavokData.MaterialType>.Instance.Write(
                writer,
                item.Material_Property,
                length: new ContentLength(1),
                fieldIndex: (int)HavokData_FieldIndex.Material,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Friction_Property,
                fieldIndex: (int)HavokData_FieldIndex.Friction,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Restitution_Property,
                fieldIndex: (int)HavokData_FieldIndex.Restitution,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class HavokData_Mask<T> : IMask<T>, IEquatable<HavokData_Mask<T>>
    {
        #region Ctors
        public HavokData_Mask()
        {
        }

        public HavokData_Mask(T initialValue)
        {
            this.Material = initialValue;
            this.Friction = initialValue;
            this.Restitution = initialValue;
        }
        #endregion

        #region Members
        public T Material;
        public T Friction;
        public T Restitution;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is HavokData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(HavokData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Material, rhs.Material)) return false;
            if (!object.Equals(this.Friction, rhs.Friction)) return false;
            if (!object.Equals(this.Restitution, rhs.Restitution)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Material?.GetHashCode());
            ret = ret.CombineHashCode(this.Friction?.GetHashCode());
            ret = ret.CombineHashCode(this.Restitution?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Material)) return false;
            if (!eval(this.Friction)) return false;
            if (!eval(this.Restitution)) return false;
            return true;
        }
        #endregion

        #region Translate
        public HavokData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new HavokData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(HavokData_Mask<R> obj, Func<T, R> eval)
        {
            obj.Material = eval(this.Material);
            obj.Friction = eval(this.Friction);
            obj.Restitution = eval(this.Restitution);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(HavokData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, HavokData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(HavokData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Material ?? true)
                {
                    fg.AppendLine($"Material => {Material}");
                }
                if (printMask?.Friction ?? true)
                {
                    fg.AppendLine($"Friction => {Friction}");
                }
                if (printMask?.Restitution ?? true)
                {
                    fg.AppendLine($"Restitution => {Restitution}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class HavokData_ErrorMask : IErrorMask, IErrorMask<HavokData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Material;
        public Exception Friction;
        public Exception Restitution;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                    this.Material = ex;
                    break;
                case HavokData_FieldIndex.Friction:
                    this.Friction = ex;
                    break;
                case HavokData_FieldIndex.Restitution:
                    this.Restitution = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            HavokData_FieldIndex enu = (HavokData_FieldIndex)index;
            switch (enu)
            {
                case HavokData_FieldIndex.Material:
                    this.Material = (Exception)obj;
                    break;
                case HavokData_FieldIndex.Friction:
                    this.Friction = (Exception)obj;
                    break;
                case HavokData_FieldIndex.Restitution:
                    this.Restitution = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Material != null) return true;
            if (Friction != null) return true;
            if (Restitution != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("HavokData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Material => {Material}");
            fg.AppendLine($"Friction => {Friction}");
            fg.AppendLine($"Restitution => {Restitution}");
        }
        #endregion

        #region Combine
        public HavokData_ErrorMask Combine(HavokData_ErrorMask rhs)
        {
            var ret = new HavokData_ErrorMask();
            ret.Material = this.Material.Combine(rhs.Material);
            ret.Friction = this.Friction.Combine(rhs.Friction);
            ret.Restitution = this.Restitution.Combine(rhs.Restitution);
            return ret;
        }
        public static HavokData_ErrorMask Combine(HavokData_ErrorMask lhs, HavokData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class HavokData_CopyMask
    {
        #region Members
        public bool Material;
        public bool Friction;
        public bool Restitution;
        #endregion

    }
    #endregion




    #endregion

}
