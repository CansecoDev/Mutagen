/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class IdleAnimation :
        OblivionMajorRecord,
        IIdleAnimationInternal,
        ILoquiObjectSetter<IdleAnimation>,
        ILinkSubContainer,
        IEquatable<IdleAnimation>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleAnimation_Registration.Instance;
        public new static IdleAnimation_Registration Registration => IdleAnimation_Registration.Instance;
        protected override object CommonInstance => IdleAnimationCommon.Instance;

        #region Ctor
        protected IdleAnimation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)IdleAnimation_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)IdleAnimation_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool IIdleAnimationGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, hasBeenSet, (int)IdleAnimation_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IIdleAnimationGetter.Model => this.Model;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Condition> _Conditions = new SourceSetList<Condition>();
        public ISourceSetList<Condition> Conditions => _Conditions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Condition> IIdleAnimation.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IConditionGetter> IIdleAnimationGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region AnimationGroupSection
        public bool AnimationGroupSection_IsSet
        {
            get => _hasBeenSetTracker[(int)IdleAnimation_FieldIndex.AnimationGroupSection];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)IdleAnimation_FieldIndex.AnimationGroupSection, nameof(AnimationGroupSection_IsSet));
        }
        bool IIdleAnimationGetter.AnimationGroupSection_IsSet => AnimationGroupSection_IsSet;
        private IdleAnimation.AnimationGroupSectionEnum _AnimationGroupSection;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IdleAnimation.AnimationGroupSectionEnum AnimationGroupSection
        {
            get => this._AnimationGroupSection;
            set => AnimationGroupSection_Set(value);
        }
        IdleAnimation.AnimationGroupSectionEnum IIdleAnimationGetter.AnimationGroupSection => this.AnimationGroupSection;
        public void AnimationGroupSection_Set(
            IdleAnimation.AnimationGroupSectionEnum value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _AnimationGroupSection, value, _hasBeenSetTracker, markSet, (int)IdleAnimation_FieldIndex.AnimationGroupSection, nameof(AnimationGroupSection), nameof(AnimationGroupSection_IsSet));
        }
        public void AnimationGroupSection_Unset()
        {
            this.AnimationGroupSection_Set(default(IdleAnimation.AnimationGroupSectionEnum), false);
        }
        #endregion
        #region RelatedIdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IFormIDLink<IdleAnimation>> _RelatedIdleAnimations = new SourceSetList<IFormIDLink<IdleAnimation>>();
        public ISourceSetList<IFormIDLink<IdleAnimation>> RelatedIdleAnimations => _RelatedIdleAnimations;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<IdleAnimation>> IIdleAnimation.RelatedIdleAnimations => _RelatedIdleAnimations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IIdleAnimationInternalGetter>> IIdleAnimationGetter.RelatedIdleAnimations => _RelatedIdleAnimations;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIdleAnimationInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            IdleAnimationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IIdleAnimationInternalGetter rhs)) return false;
            return ((IdleAnimationCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(IdleAnimation obj)
        {
            return ((IdleAnimationCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((IdleAnimationCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => IdleAnimationXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static IdleAnimation CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            IdleAnimation_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static IdleAnimation CreateFromXml(
            XElement node,
            out IdleAnimation_ErrorMask errorMask,
            bool doMasks = true,
            IdleAnimation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = IdleAnimation_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static IdleAnimation CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new IdleAnimation() : null;
                    break;
                default:
                    break;
            }
            var ret = new IdleAnimation();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    IdleAnimationXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static IdleAnimation CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            IdleAnimation_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static IdleAnimation CreateFromXml(
            string path,
            out IdleAnimation_ErrorMask errorMask,
            IdleAnimation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static IdleAnimation CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            IdleAnimation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static IdleAnimation CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            IdleAnimation_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static IdleAnimation CreateFromXml(
            Stream stream,
            out IdleAnimation_ErrorMask errorMask,
            IdleAnimation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static IdleAnimation CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            IdleAnimation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            IdleAnimation item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((IdleAnimation_FieldIndex)index)
            {
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    return _hasBeenSetTracker[index];
                case IdleAnimation_FieldIndex.Conditions:
                    return Conditions.HasBeenSet;
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return RelatedIdleAnimations.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = IdleAnimation_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in RelatedIdleAnimations)
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in RelatedIdleAnimations)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        public IdleAnimation(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public IdleAnimation(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => IdleAnimationBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static IdleAnimation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static IdleAnimation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out IdleAnimation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = IdleAnimation_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static IdleAnimation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<IdleAnimation>(
                record: new IdleAnimation(),
                frame: frame,
                errorMask: errorMask,
                recType: IdleAnimation_Registration.IDLE_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            IdleAnimation item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            IdleAnimation item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.Model);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)IdleAnimation_FieldIndex.Conditions,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Condition listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.Conditions);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<IdleAnimation.AnimationGroupSectionEnum>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out IdleAnimation.AnimationGroupSectionEnum AnimationGroupSectionParse))
                    {
                        item.AnimationGroupSection = AnimationGroupSectionParse;
                    }
                    else
                    {
                        item.AnimationGroupSection = default(IdleAnimation.AnimationGroupSectionEnum);
                    }
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.AnimationGroupSection);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<IdleAnimation>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.RelatedIdleAnimations,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.RelatedIdleAnimations);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public IdleAnimation Copy(
            IdleAnimation_CopyMask copyMask = null,
            IdleAnimation def = null)
        {
            return IdleAnimation.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static IdleAnimation Copy(
            IdleAnimation item,
            IdleAnimation_CopyMask copyMask = null,
            IdleAnimation def = null)
        {
            IdleAnimation ret;
            if (item.GetType().Equals(typeof(IdleAnimation)))
            {
                ret = new IdleAnimation();
            }
            else
            {
                ret = (IdleAnimation)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static IdleAnimation Copy_ToLoqui(
            IdleAnimation item,
            IdleAnimation_CopyMask copyMask = null,
            IdleAnimation def = null)
        {
            IdleAnimation ret;
            if (item.GetType().Equals(typeof(IdleAnimation)))
            {
                ret = new IdleAnimation() as IdleAnimation;
            }
            else
            {
                ret = (IdleAnimation)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IdleAnimation rhs,
            IdleAnimation_CopyMask copyMask,
            IdleAnimation def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IdleAnimation rhs,
            out IdleAnimation_ErrorMask errorMask,
            IdleAnimation_CopyMask copyMask = null,
            IdleAnimation def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            IdleAnimationCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = IdleAnimation_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IdleAnimation rhs,
            ErrorMaskBuilder errorMask,
            IdleAnimation_CopyMask copyMask = null,
            IdleAnimation def = null)
        {
            IdleAnimationCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case IdleAnimation_FieldIndex.Conditions:
                    this._Conditions.SetTo((ISetList<Condition>)obj);
                    break;
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    this.AnimationGroupSection = (IdleAnimation.AnimationGroupSectionEnum)obj;
                    break;
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    this._RelatedIdleAnimations.SetTo((ISetList<IFormIDLink<IdleAnimation>>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            IdleAnimationCommon.Instance.Clear(this);
        }

        public new static IdleAnimation Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new IdleAnimation();
            foreach (var pair in fields)
            {
                CopyInInternal_IdleAnimation(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_IdleAnimation(IdleAnimation obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out IdleAnimation_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case IdleAnimation_FieldIndex.Conditions:
                    obj._Conditions.SetTo((ISetList<Condition>)pair.Value);
                    break;
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    obj.AnimationGroupSection = (IdleAnimation.AnimationGroupSectionEnum)pair.Value;
                    break;
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    obj._RelatedIdleAnimations.SetTo((ISetList<IFormIDLink<IdleAnimation>>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IIdleAnimation :
        IIdleAnimationInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IIdleAnimationInternal>
    {
        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new ISetList<Condition> Conditions { get; }
        new IdleAnimation.AnimationGroupSectionEnum AnimationGroupSection { get; set; }
        new bool AnimationGroupSection_IsSet { get; set; }
        void AnimationGroupSection_Set(IdleAnimation.AnimationGroupSectionEnum value, bool hasBeenSet = true);
        void AnimationGroupSection_Unset();

        new ISetList<IFormIDLink<IdleAnimation>> RelatedIdleAnimations { get; }
        void CopyFieldsFrom(
            IdleAnimation rhs,
            ErrorMaskBuilder errorMask = null,
            IdleAnimation_CopyMask copyMask = null,
            IdleAnimation def = null);
    }

    public partial interface IIdleAnimationInternal :
        IOblivionMajorRecordInternal,
        IIdleAnimation,
        IIdleAnimationInternalGetter
    {
    }

    public partial interface IIdleAnimationGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IIdleAnimationInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Conditions
        IReadOnlySetList<IConditionGetter> Conditions { get; }
        #endregion
        #region AnimationGroupSection
        IdleAnimation.AnimationGroupSectionEnum AnimationGroupSection { get; }
        bool AnimationGroupSection_IsSet { get; }

        #endregion
        #region RelatedIdleAnimations
        IReadOnlySetList<IFormIDLinkGetter<IIdleAnimationInternalGetter>> RelatedIdleAnimations { get; }
        #endregion

    }

    public partial interface IIdleAnimationInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IIdleAnimationGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class IdleAnimationMixIn
    {
        public static void Clear(this IIdleAnimationInternal item)
        {
            ((IdleAnimationCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static IdleAnimation_Mask<bool> GetEqualsMask(
            this IIdleAnimationInternalGetter item,
            IIdleAnimationInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IdleAnimationCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IIdleAnimationInternalGetter item,
            string name = null,
            IdleAnimation_Mask<bool> printMask = null)
        {
            return ((IdleAnimationCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IIdleAnimationInternalGetter item,
            FileGeneration fg,
            string name = null,
            IdleAnimation_Mask<bool> printMask = null)
        {
            ((IdleAnimationCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IIdleAnimationInternalGetter item,
            IdleAnimation_Mask<bool?> checkMask)
        {
            return ((IdleAnimationCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static IdleAnimation_Mask<bool> GetHasBeenSetMask(this IIdleAnimationInternalGetter item)
        {
            var ret = new IdleAnimation_Mask<bool>();
            ((IdleAnimationCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IIdleAnimationInternalGetter item,
            IIdleAnimationInternalGetter rhs)
        {
            return ((IdleAnimationCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum IdleAnimation_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Model = 5,
        Conditions = 6,
        AnimationGroupSection = 7,
        RelatedIdleAnimations = 8,
    }
    #endregion

    #region Registration
    public class IdleAnimation_Registration : ILoquiRegistration
    {
        public static readonly IdleAnimation_Registration Instance = new IdleAnimation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 156,
            version: 0);

        public const string GUID = "899444e1-4339-4d2c-8fdc-f6c32c68050b";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(IdleAnimation_Mask<>);

        public static readonly Type ErrorMaskType = typeof(IdleAnimation_ErrorMask);

        public static readonly Type ClassType = typeof(IdleAnimation);

        public static readonly Type GetterType = typeof(IIdleAnimationGetter);

        public static readonly Type InternalGetterType = typeof(IIdleAnimationInternalGetter);

        public static readonly Type SetterType = typeof(IIdleAnimation);

        public static readonly Type InternalSetterType = typeof(IIdleAnimationInternal);

        public static readonly Type CommonType = typeof(IdleAnimationCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.IdleAnimation";

        public const string Name = "IdleAnimation";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)IdleAnimation_FieldIndex.Model;
                case "CONDITIONS":
                    return (ushort)IdleAnimation_FieldIndex.Conditions;
                case "ANIMATIONGROUPSECTION":
                    return (ushort)IdleAnimation_FieldIndex.AnimationGroupSection;
                case "RELATEDIDLEANIMATIONS":
                    return (ushort)IdleAnimation_FieldIndex.RelatedIdleAnimations;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Conditions:
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return true;
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.Conditions:
                    return true;
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.Conditions:
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                    return "Model";
                case IdleAnimation_FieldIndex.Conditions:
                    return "Conditions";
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    return "AnimationGroupSection";
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return "RelatedIdleAnimations";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.Conditions:
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                case IdleAnimation_FieldIndex.Conditions:
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                    return typeof(Model);
                case IdleAnimation_FieldIndex.Conditions:
                    return typeof(ISetList<Condition>);
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    return typeof(IdleAnimation.AnimationGroupSectionEnum);
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return typeof(ISetList<IFormIDLink<IdleAnimation>>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(IdleAnimationXmlWriteTranslation);
        public static readonly RecordType IDLE_HEADER = new RecordType("IDLE");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = IDLE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(IdleAnimationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class IdleAnimationCommon : OblivionMajorRecordCommon
    {
        public static readonly IdleAnimationCommon Instance = new IdleAnimationCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            IdleAnimation item,
            IdleAnimation rhs,
            IdleAnimation def,
            ErrorMaskBuilder errorMask,
            IdleAnimation_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Conditions.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetToWithDefault<Condition, Condition>(
                        rhs: rhs.Conditions,
                        def: def?.Conditions,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Conditions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (Condition)r;
                                case CopyOption.MakeCopy:
                                    return Condition.Copy(
                                        r,
                                        copyMask?.Conditions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Conditions.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AnimationGroupSection ?? true)
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.AnimationGroupSection);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.AnimationGroupSection,
                        rhsHasBeenSet: rhs.AnimationGroupSection_IsSet,
                        defItem: def?.AnimationGroupSection ?? default(IdleAnimation.AnimationGroupSectionEnum),
                        defHasBeenSet: def?.AnimationGroupSection_IsSet ?? false,
                        outRhsItem: out var rhsAnimationGroupSectionItem,
                        outDefItem: out var defAnimationGroupSectionItem))
                    {
                        item.AnimationGroupSection = rhsAnimationGroupSectionItem;
                    }
                    else
                    {
                        item.AnimationGroupSection_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RelatedIdleAnimations != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.RelatedIdleAnimations);
                try
                {
                    item.RelatedIdleAnimations.SetToWithDefault(
                        rhs.RelatedIdleAnimations,
                        def?.RelatedIdleAnimations);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IIdleAnimationInternal item)
        {
            ClearPartial();
            item.Model_Unset();
            item.Conditions.Unset();
            item.AnimationGroupSection_Unset();
            item.RelatedIdleAnimations.Unset();
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IIdleAnimationInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IIdleAnimationInternal)item);
        }

        public IdleAnimation_Mask<bool> GetEqualsMask(
            IIdleAnimationInternalGetter item,
            IIdleAnimationInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new IdleAnimation_Mask<bool>();
            ((IdleAnimationCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IIdleAnimationInternalGetter item,
            IIdleAnimationInternalGetter rhs,
            IdleAnimation_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AnimationGroupSection = item.AnimationGroupSection_IsSet == rhs.AnimationGroupSection_IsSet && item.AnimationGroupSection == rhs.AnimationGroupSection;
            ret.RelatedIdleAnimations = item.RelatedIdleAnimations.CollectionEqualsHelper(
                rhs.RelatedIdleAnimations,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IIdleAnimationInternalGetter item,
            string name = null,
            IdleAnimation_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IIdleAnimationInternalGetter item,
            FileGeneration fg,
            string name = null,
            IdleAnimation_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"IdleAnimation =>");
            }
            else
            {
                fg.AppendLine($"{name} (IdleAnimation) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IIdleAnimationInternalGetter item,
            FileGeneration fg,
            IdleAnimation_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.AnimationGroupSection ?? true)
            {
                fg.AppendLine($"AnimationGroupSection => {item.AnimationGroupSection}");
            }
            if (printMask?.RelatedIdleAnimations?.Overall ?? true)
            {
                fg.AppendLine("RelatedIdleAnimations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.RelatedIdleAnimations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }

        public bool HasBeenSet(
            IIdleAnimationInternalGetter item,
            IdleAnimation_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            if (checkMask.AnimationGroupSection.HasValue && checkMask.AnimationGroupSection.Value != item.AnimationGroupSection_IsSet) return false;
            if (checkMask.RelatedIdleAnimations.Overall.HasValue && checkMask.RelatedIdleAnimations.Overall.Value != item.RelatedIdleAnimations.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IIdleAnimationInternalGetter item,
            IdleAnimation_Mask<bool> mask)
        {
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.AnimationGroupSection = item.AnimationGroupSection_IsSet;
            mask.RelatedIdleAnimations = new MaskItem<bool, IEnumerable<(int, bool)>>(item.RelatedIdleAnimations.HasBeenSet, null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static IdleAnimation_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleAnimation_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (IdleAnimation_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (IdleAnimation_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (IdleAnimation_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (IdleAnimation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static IdleAnimation_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (IdleAnimation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IIdleAnimationInternalGetter lhs,
            IIdleAnimationInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (lhs.Conditions.HasBeenSet)
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            if (lhs.AnimationGroupSection_IsSet != rhs.AnimationGroupSection_IsSet) return false;
            if (lhs.AnimationGroupSection_IsSet)
            {
                if (lhs.AnimationGroupSection != rhs.AnimationGroupSection) return false;
            }
            if (lhs.RelatedIdleAnimations.HasBeenSet != rhs.RelatedIdleAnimations.HasBeenSet) return false;
            if (lhs.RelatedIdleAnimations.HasBeenSet)
            {
                if (!lhs.RelatedIdleAnimations.SequenceEqual(rhs.RelatedIdleAnimations)) return false;
            }
            return true;
        }

        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IIdleAnimationInternalGetter)lhs,
                rhs: rhs as IIdleAnimationInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IIdleAnimationInternalGetter)lhs,
                rhs: rhs as IIdleAnimationInternalGetter);
        }

        public virtual int GetHashCode(IIdleAnimationInternalGetter item)
        {
            int ret = 0;
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            if (item.Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Conditions).CombineHashCode(ret);
            }
            if (item.AnimationGroupSection_IsSet)
            {
                ret = HashHelper.GetHashCode(item.AnimationGroupSection).CombineHashCode(ret);
            }
            if (item.RelatedIdleAnimations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.RelatedIdleAnimations).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IIdleAnimationInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IIdleAnimationInternalGetter)item);
        }

        #endregion


        #region Mutagen
        partial void PostDuplicate(IdleAnimation obj, IdleAnimation rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new IdleAnimation(getNextFormKey());
            ret.CopyFieldsFrom((IdleAnimation)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (IdleAnimation)item, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class IdleAnimationXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static IdleAnimationXmlWriteTranslation Instance = new IdleAnimationXmlWriteTranslation();

        public static void WriteToNodeXml(
            IIdleAnimationInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)IdleAnimation_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.Model));
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)IdleAnimation_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((ConditionXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.AnimationGroupSection_IsSet
                && (translationMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationGroupSection) ?? true))
            {
                EnumXmlTranslation<IdleAnimation.AnimationGroupSectionEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.AnimationGroupSection),
                    item: item.AnimationGroupSection,
                    fieldIndex: (int)IdleAnimation_FieldIndex.AnimationGroupSection,
                    errorMask: errorMask);
            }
            if (item.RelatedIdleAnimations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.RelatedIdleAnimations) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IIdleAnimationInternalGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.RelatedIdleAnimations),
                    item: item.RelatedIdleAnimations,
                    fieldIndex: (int)IdleAnimation_FieldIndex.RelatedIdleAnimations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.RelatedIdleAnimations),
                    transl: (XElement subNode, IFormIDLinkGetter<IIdleAnimationInternalGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IIdleAnimationInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.IdleAnimation");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.IdleAnimation");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IIdleAnimationInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IIdleAnimationInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IIdleAnimationInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class IdleAnimationXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static IdleAnimationXmlCreateTranslation Instance = new IdleAnimationXmlCreateTranslation();

        public static void FillPublicXml(
            IIdleAnimationInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    IdleAnimationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IIdleAnimationInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AnimationGroupSection":
                    try
                    {
                        errorMask?.PushIndex((int)IdleAnimation_FieldIndex.AnimationGroupSection);
                        if (EnumXmlTranslation<IdleAnimation.AnimationGroupSectionEnum>.Instance.Parse(
                            node: node,
                            item: out IdleAnimation.AnimationGroupSectionEnum AnimationGroupSectionParse,
                            errorMask: errorMask))
                        {
                            item.AnimationGroupSection = AnimationGroupSectionParse;
                        }
                        else
                        {
                            item.AnimationGroupSection = default(IdleAnimation.AnimationGroupSectionEnum);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RelatedIdleAnimations":
                    try
                    {
                        errorMask?.PushIndex((int)IdleAnimation_FieldIndex.RelatedIdleAnimations);
                        if (ListXmlTranslation<IFormIDLink<IdleAnimation>>.Instance.Parse(
                            node: node,
                            enumer: out var RelatedIdleAnimationsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.RelatedIdleAnimations.SetTo(RelatedIdleAnimationsItem);
                        }
                        else
                        {
                            item.RelatedIdleAnimations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class IdleAnimationXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IIdleAnimationInternalGetter item,
            XElement node,
            out IdleAnimation_ErrorMask errorMask,
            bool doMasks = true,
            IdleAnimation_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((IdleAnimationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = IdleAnimation_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IIdleAnimationInternalGetter item,
            string path,
            out IdleAnimation_ErrorMask errorMask,
            IdleAnimation_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IIdleAnimationInternalGetter item,
            Stream stream,
            out IdleAnimation_ErrorMask errorMask,
            IdleAnimation_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class IdleAnimation_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<IdleAnimation_Mask<T>>
    {
        #region Ctors
        public IdleAnimation_Mask()
        {
        }

        public IdleAnimation_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Conditions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>>(initialValue, null);
            this.AnimationGroupSection = initialValue;
            this.RelatedIdleAnimations = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>> Conditions;
        public T AnimationGroupSection;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> RelatedIdleAnimations;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is IdleAnimation_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(IdleAnimation_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            if (!object.Equals(this.AnimationGroupSection, rhs.AnimationGroupSection)) return false;
            if (!object.Equals(this.RelatedIdleAnimations, rhs.RelatedIdleAnimations)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            ret = ret.CombineHashCode(this.AnimationGroupSection?.GetHashCode());
            ret = ret.CombineHashCode(this.RelatedIdleAnimations?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.AnimationGroupSection)) return false;
            if (this.RelatedIdleAnimations != null)
            {
                if (!eval(this.RelatedIdleAnimations.Overall)) return false;
                if (this.RelatedIdleAnimations.Specific != null)
                {
                    foreach (var item in this.RelatedIdleAnimations.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new IdleAnimation_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new IdleAnimation_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(IdleAnimation_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItemIndexed<R, Condition_Mask<R>>> l = new List<MaskItemIndexed<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Condition_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Condition_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.AnimationGroupSection = eval(this.AnimationGroupSection);
            if (RelatedIdleAnimations != null)
            {
                obj.RelatedIdleAnimations = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.RelatedIdleAnimations.Overall = eval(this.RelatedIdleAnimations.Overall);
                if (RelatedIdleAnimations.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.RelatedIdleAnimations.Specific = l;
                    foreach (var item in RelatedIdleAnimations.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Conditions.Specific = null;
            this.RelatedIdleAnimations.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(IdleAnimation_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, IdleAnimation_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(IdleAnimation_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.AnimationGroupSection ?? true)
                {
                    fg.AppendLine($"AnimationGroupSection => {AnimationGroupSection}");
                }
                if (printMask?.RelatedIdleAnimations?.Overall ?? true)
                {
                    fg.AppendLine("RelatedIdleAnimations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RelatedIdleAnimations.Overall != null)
                        {
                            fg.AppendLine(RelatedIdleAnimations.Overall.ToString());
                        }
                        if (RelatedIdleAnimations.Specific != null)
                        {
                            foreach (var subItem in RelatedIdleAnimations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class IdleAnimation_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<IdleAnimation_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        public Exception AnimationGroupSection;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> RelatedIdleAnimations;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                    return Model;
                case IdleAnimation_FieldIndex.Conditions:
                    return Conditions;
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    return AnimationGroupSection;
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    return RelatedIdleAnimations;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case IdleAnimation_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    this.AnimationGroupSection = ex;
                    break;
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    this.RelatedIdleAnimations = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
            switch (enu)
            {
                case IdleAnimation_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case IdleAnimation_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                case IdleAnimation_FieldIndex.AnimationGroupSection:
                    this.AnimationGroupSection = (Exception)obj;
                    break;
                case IdleAnimation_FieldIndex.RelatedIdleAnimations:
                    this.RelatedIdleAnimations = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (Conditions != null) return true;
            if (AnimationGroupSection != null) return true;
            if (RelatedIdleAnimations != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("IdleAnimation_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"AnimationGroupSection => {AnimationGroupSection}");
            fg.AppendLine("RelatedIdleAnimations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (RelatedIdleAnimations.Overall != null)
                {
                    fg.AppendLine(RelatedIdleAnimations.Overall.ToString());
                }
                if (RelatedIdleAnimations.Specific != null)
                {
                    foreach (var subItem in RelatedIdleAnimations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public IdleAnimation_ErrorMask Combine(IdleAnimation_ErrorMask rhs)
        {
            var ret = new IdleAnimation_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            ret.AnimationGroupSection = this.AnimationGroupSection.Combine(rhs.AnimationGroupSection);
            ret.RelatedIdleAnimations = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.RelatedIdleAnimations.Overall.Combine(rhs.RelatedIdleAnimations.Overall), new List<(int Index, Exception Value)>(this.RelatedIdleAnimations.Specific.And(rhs.RelatedIdleAnimations.Specific)));
            return ret;
        }
        public static IdleAnimation_ErrorMask Combine(IdleAnimation_ErrorMask lhs, IdleAnimation_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static IdleAnimation_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new IdleAnimation_ErrorMask();
        }
        #endregion

    }
    public class IdleAnimation_CopyMask : OblivionMajorRecord_CopyMask
    {
        public IdleAnimation_CopyMask()
        {
        }

        public IdleAnimation_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Conditions = new MaskItem<CopyOption, Condition_CopyMask>(deepCopyOption, default);
            this.AnimationGroupSection = defaultOn;
            this.RelatedIdleAnimations = deepCopyOption;
        }

        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public MaskItem<CopyOption, Condition_CopyMask> Conditions;
        public bool AnimationGroupSection;
        public CopyOption RelatedIdleAnimations;
        #endregion

    }

    public class IdleAnimation_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public MaskItem<bool, Model_TranslationMask> Model;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        public bool AnimationGroupSection;
        public bool RelatedIdleAnimations;
        #endregion

        #region Ctors
        public IdleAnimation_TranslationMask()
            : base()
        {
        }

        public IdleAnimation_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Conditions = new MaskItem<bool, Condition_TranslationMask>(defaultOn, null);
            this.AnimationGroupSection = defaultOn;
            this.RelatedIdleAnimations = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            ret.Add((AnimationGroupSection, null));
            ret.Add((RelatedIdleAnimations, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class IdleAnimationBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static IdleAnimationBinaryWriteTranslation Instance = new IdleAnimationBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IIdleAnimationInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Conditions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                    writer: writer,
                    items: item.Conditions,
                    fieldIndex: (int)IdleAnimation_FieldIndex.Conditions,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IConditionGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((ConditionBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.AnimationGroupSection_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<IdleAnimation.AnimationGroupSectionEnum>.Instance.Write(
                    writer,
                    item.AnimationGroupSection,
                    length: 1,
                    header: recordTypeConverter.ConvertToCustom(IdleAnimation_Registration.ANAM_HEADER),
                    nullable: false);
            }
            if (item.RelatedIdleAnimations.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IIdleAnimationInternalGetter>>.Instance.Write(
                    writer: writer,
                    items: item.RelatedIdleAnimations,
                    recordType: IdleAnimation_Registration.DATA_HEADER,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<IIdleAnimationInternalGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            masterReferences: masterReferences);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IIdleAnimationInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: IdleAnimation_Registration.IDLE_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IIdleAnimationInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IIdleAnimationInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IIdleAnimationInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class IdleAnimationBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static IdleAnimationBinaryCreateTranslation Instance = new IdleAnimationBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class IdleAnimationBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IIdleAnimationInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out IdleAnimation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((IdleAnimationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = IdleAnimation_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    public partial class IdleAnimationBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IIdleAnimationInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleAnimation_Registration.Instance;
        public new static IdleAnimation_Registration Registration => IdleAnimation_Registration.Instance;
        protected override object CommonInstance => IdleAnimationCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIdleAnimationInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => IdleAnimationXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => IdleAnimationBinaryWriteTranslation.Instance;

        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        public IReadOnlySetList<IConditionGetter> Conditions { get; private set; } = EmptySetList<ConditionBinaryWrapper>.Instance;
        #region AnimationGroupSection
        private int? _AnimationGroupSectionLocation;
        public bool AnimationGroupSection_IsSet => _AnimationGroupSectionLocation.HasValue;
        public IdleAnimation.AnimationGroupSectionEnum AnimationGroupSection => (IdleAnimation.AnimationGroupSectionEnum)HeaderTranslation.ExtractSubrecordSpan(_data.Slice(0), _AnimationGroupSectionLocation.Value, _package.Meta)[0];
        #endregion
        public IReadOnlySetList<IFormIDLinkGetter<IIdleAnimationInternalGetter>> RelatedIdleAnimations { get; private set; } = EmptySetList<IFormIDLinkGetter<IIdleAnimationInternalGetter>>.Instance;
        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected IdleAnimationBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static IdleAnimationBinaryWrapper IdleAnimationFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new IdleAnimationBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(stream, offset);
            UtilityTranslation.FillSubrecordTypesForWrapper(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                meta: ret._package.Meta,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int offset,
            RecordType type,
            int? lastParsed)
        {
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.Model);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    this.Conditions = BinaryWrapperSetList<ConditionBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ConditionBinaryWrapper.ConditionFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: UtilityTranslation.ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.Conditions);
                }
                case 0x4D414E41: // ANAM
                {
                    _AnimationGroupSectionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.AnimationGroupSection);
                }
                case 0x41544144: // DATA
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.RelatedIdleAnimations = BinaryWrapperSetList<IFormIDLinkGetter<IIdleAnimationInternalGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormIDLink<IIdleAnimationInternalGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)IdleAnimation_FieldIndex.RelatedIdleAnimations);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
    }

    #endregion

    #endregion

}
