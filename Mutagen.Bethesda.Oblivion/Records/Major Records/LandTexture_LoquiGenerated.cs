/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LandTexture : MajorRecord, ILandTexture, ILoquiObject<LandTexture>, ILoquiObjectSetter, IEquatable<LandTexture>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LandTexture_Registration.Instance;
        public new static LandTexture_Registration Registration => LandTexture_Registration.Instance;

        #region Ctor
        public LandTexture()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<FilePath> _Icon = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> Icon_Property => _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FilePath Icon
        {
            get => this._Icon.Item;
            set => this._Icon.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FilePath> ILandTexture.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FilePath> ILandTextureGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region Havok
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<HavokData> _Havok = new NotifyingSetItem<HavokData>();
        public INotifyingSetItem<HavokData> Havok_Property => this._Havok;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        HavokData ILandTextureGetter.Havok => this.Havok;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public HavokData Havok { get => _Havok.Item; set => _Havok.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<HavokData> ILandTexture.Havok_Property => this.Havok_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<HavokData> ILandTextureGetter.Havok_Property => this.Havok_Property;
        #endregion
        #region TextureSpecularExponent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Byte> _TextureSpecularExponent = NotifyingSetItem.Factory<Byte>(markAsSet: false);
        public INotifyingSetItem<Byte> TextureSpecularExponent_Property => _TextureSpecularExponent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte TextureSpecularExponent
        {
            get => this._TextureSpecularExponent.Item;
            set => this._TextureSpecularExponent.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte> ILandTexture.TextureSpecularExponent_Property => this.TextureSpecularExponent_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte> ILandTextureGetter.TextureSpecularExponent_Property => this.TextureSpecularExponent_Property;
        #endregion
        #region PotentialGrass
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDSetLink<Grass>> _PotentialGrass = new NotifyingList<FormIDSetLink<Grass>>();
        public INotifyingList<FormIDSetLink<Grass>> PotentialGrass => _PotentialGrass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<Grass>> PotentialGrassEnumerable
        {
            get => _PotentialGrass;
            set => _PotentialGrass.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDSetLink<Grass>> ILandTexture.PotentialGrass => _PotentialGrass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDSetLink<Grass>> ILandTextureGetter.PotentialGrass => _PotentialGrass;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => LandTextureCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => LandTextureCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => LandTextureCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            LandTextureCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<LandTexture>.GetEqualsMask(LandTexture rhs) => LandTextureCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ILandTextureGetter>.GetEqualsMask(ILandTextureGetter rhs) => LandTextureCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return LandTextureCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            LandTexture_Mask<bool> printMask = null)
        {
            return LandTextureCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            LandTextureCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new LandTexture_Mask<bool> GetHasBeenSetMask()
        {
            return LandTextureCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LandTexture rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LandTexture rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (Havok_Property.HasBeenSet != rhs.Havok_Property.HasBeenSet) return false;
            if (Havok_Property.HasBeenSet)
            {
                if (!object.Equals(this.Havok, rhs.Havok)) return false;
            }
            if (TextureSpecularExponent_Property.HasBeenSet != rhs.TextureSpecularExponent_Property.HasBeenSet) return false;
            if (TextureSpecularExponent_Property.HasBeenSet)
            {
                if (this.TextureSpecularExponent != rhs.TextureSpecularExponent) return false;
            }
            if (PotentialGrass.HasBeenSet != rhs.PotentialGrass.HasBeenSet) return false;
            if (PotentialGrass.HasBeenSet)
            {
                if (!this.PotentialGrass.SequenceEqual(rhs.PotentialGrass)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Havok_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Havok).CombineHashCode(ret);
            }
            if (TextureSpecularExponent_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TextureSpecularExponent).CombineHashCode(ret);
            }
            if (PotentialGrass.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(PotentialGrass).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static LandTexture Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LandTexture Create_XML(
            XElement root,
            out LandTexture_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = LandTexture_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static LandTexture Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new LandTexture();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static LandTexture Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static LandTexture Create_XML(
            string path,
            out LandTexture_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static LandTexture Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static LandTexture Create_XML(
            Stream stream,
            out LandTexture_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LandTexture>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out LandTexture_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<LandTexture>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = LandTexture_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out LandTexture_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out LandTexture_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out LandTexture_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out LandTexture_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as LandTexture_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out LandTexture_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out LandTexture_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            LandTextureCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_XML_Internal(
            LandTexture item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Icon":
                    FilePathXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)LandTexture_FieldIndex.Icon,
                        item: item._Icon,
                        errorMask: errorMask);
                    break;
                case "Havok":
                    try
                    {
                        errorMask?.PushIndex((int)LandTexture_FieldIndex.Havok);
                        if (LoquiXmlTranslation<HavokData>.Instance.Parse(
                            root: root,
                            item: out var HavokParse,
                            errorMask: errorMask))
                        {
                            item._Havok.Item = HavokParse;
                        }
                        else
                        {
                            item._Havok.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureSpecularExponent":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)LandTexture_FieldIndex.TextureSpecularExponent,
                        item: item._TextureSpecularExponent,
                        errorMask: errorMask);
                    break;
                case "PotentialGrass":
                    ListXmlTranslation<FormIDSetLink<Grass>>.Instance.ParseInto(
                        root: root,
                        item: item._PotentialGrass,
                        fieldIndex: (int)LandTexture_FieldIndex.PotentialGrass,
                        errorMask: errorMask,
                        transl: FormIDXmlTranslation.Instance.Parse);
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LandTexture_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static LandTexture Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LandTexture Create_Binary(
            MutagenFrame frame,
            out LandTexture_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LandTexture_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static LandTexture Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<LandTexture, LandTexture_FieldIndex>(
                record: new LandTexture(),
                frame: frame,
                errorMask: errorMask,
                recType: LandTexture_Registration.LTEX_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static LandTexture Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LandTexture Create_Binary(
            string path,
            out LandTexture_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static LandTexture Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LandTexture Create_Binary(
            Stream stream,
            out LandTexture_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out LandTexture_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as LandTexture_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out LandTexture_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out LandTexture_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            LandTextureCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_Binary_Structs(
            LandTexture item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<LandTexture_FieldIndex?> Fill_Binary_RecordTypes(
            LandTexture item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._Icon,
                        fieldIndex: (int)LandTexture_FieldIndex.Icon,
                        errorMask: errorMask);
                    return TryGet<LandTexture_FieldIndex?>.Succeed(LandTexture_FieldIndex.Icon);
                case "HNAM":
                    LoquiBinaryTranslation<HavokData>.Instance.ParseInto(
                        frame: frame,
                        fieldIndex: (int)LandTexture_FieldIndex.Havok,
                        errorMask: errorMask,
                        item: item._Havok);
                    return TryGet<LandTexture_FieldIndex?>.Succeed(LandTexture_FieldIndex.Havok);
                case "SNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._TextureSpecularExponent,
                        fieldIndex: (int)LandTexture_FieldIndex.TextureSpecularExponent,
                        errorMask: errorMask);
                    return TryGet<LandTexture_FieldIndex?>.Succeed(LandTexture_FieldIndex.TextureSpecularExponent);
                case "GNAM":
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Grass>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LandTexture_Registration.GNAM_HEADER,
                        item: item._PotentialGrass,
                        fieldIndex: (int)LandTexture_FieldIndex.PotentialGrass,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormIDBinaryTranslation.Instance.Parse);
                    return TryGet<LandTexture_FieldIndex?>.Succeed(LandTexture_FieldIndex.PotentialGrass);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => LandTextureCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public LandTexture Copy(
            LandTexture_CopyMask copyMask = null,
            ILandTextureGetter def = null)
        {
            return LandTexture.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LandTexture Copy(
            ILandTexture item,
            LandTexture_CopyMask copyMask = null,
            ILandTextureGetter def = null)
        {
            LandTexture ret;
            if (item.GetType().Equals(typeof(LandTexture)))
            {
                ret = new LandTexture();
            }
            else
            {
                ret = (LandTexture)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static LandTexture Copy_ToLoqui(
            ILandTextureGetter item,
            LandTexture_CopyMask copyMask = null,
            ILandTextureGetter def = null)
        {
            LandTexture ret;
            if (item.GetType().Equals(typeof(LandTexture)))
            {
                ret = new LandTexture() as LandTexture;
            }
            else
            {
                ret = (LandTexture)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ILandTextureGetter rhs,
            LandTexture_CopyMask copyMask,
            ILandTextureGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ILandTextureGetter rhs,
            out LandTexture_ErrorMask errorMask,
            LandTexture_CopyMask copyMask = null,
            ILandTextureGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LandTextureCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = LandTexture_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ILandTextureGetter rhs,
            ErrorMaskBuilder errorMask,
            LandTexture_CopyMask copyMask = null,
            ILandTextureGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            LandTextureCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    this._Icon.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case LandTexture_FieldIndex.Havok:
                    this._Havok.Set(
                        (HavokData)obj,
                        cmds);
                    break;
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    this._TextureSpecularExponent.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case LandTexture_FieldIndex.PotentialGrass:
                    this._PotentialGrass.SetTo((IEnumerable<FormIDSetLink<Grass>>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            LandTextureCommon.Clear(this, cmds);
        }


        public new static LandTexture Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LandTexture();
            foreach (var pair in fields)
            {
                CopyInInternal_LandTexture(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_LandTexture(LandTexture obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LandTexture_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    obj._Icon.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case LandTexture_FieldIndex.Havok:
                    obj._Havok.Set(
                        (HavokData)pair.Value,
                        null);
                    break;
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    obj._TextureSpecularExponent.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case LandTexture_FieldIndex.PotentialGrass:
                    obj._PotentialGrass.SetTo((IEnumerable<FormIDSetLink<Grass>>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, LandTexture obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ILandTexture : ILandTextureGetter, IMajorRecord, ILoquiClass<ILandTexture, ILandTextureGetter>, ILoquiClass<LandTexture, ILandTextureGetter>
    {
        new FilePath Icon { get; set; }
        new INotifyingSetItem<FilePath> Icon_Property { get; }

        new HavokData Havok { get; set; }
        new INotifyingSetItem<HavokData> Havok_Property { get; }

        new Byte TextureSpecularExponent { get; set; }
        new INotifyingSetItem<Byte> TextureSpecularExponent_Property { get; }

        new INotifyingList<FormIDSetLink<Grass>> PotentialGrass { get; }
    }

    public partial interface ILandTextureGetter : IMajorRecordGetter
    {
        #region Icon
        FilePath Icon { get; }
        INotifyingSetItemGetter<FilePath> Icon_Property { get; }

        #endregion
        #region Havok
        HavokData Havok { get; }
        INotifyingSetItemGetter<HavokData> Havok_Property { get; }

        #endregion
        #region TextureSpecularExponent
        Byte TextureSpecularExponent { get; }
        INotifyingSetItemGetter<Byte> TextureSpecularExponent_Property { get; }

        #endregion
        #region PotentialGrass
        INotifyingListGetter<FormIDSetLink<Grass>> PotentialGrass { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LandTexture_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Icon = 5,
        Havok = 6,
        TextureSpecularExponent = 7,
        PotentialGrass = 8,
    }
    #endregion

    #region Registration
    public class LandTexture_Registration : ILoquiRegistration
    {
        public static readonly LandTexture_Registration Instance = new LandTexture_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 51,
            version: 0);

        public const string GUID = "528c071e-b61d-4149-b96a-a28f0d96e87e";

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(LandTexture_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LandTexture_ErrorMask);

        public static readonly Type ClassType = typeof(LandTexture);

        public static readonly Type GetterType = typeof(ILandTextureGetter);

        public static readonly Type SetterType = typeof(ILandTexture);

        public static readonly Type CommonType = typeof(LandTextureCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LandTexture";

        public const string Name = "LandTexture";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ICON":
                    return (ushort)LandTexture_FieldIndex.Icon;
                case "HAVOK":
                    return (ushort)LandTexture_FieldIndex.Havok;
                case "TEXTURESPECULAREXPONENT":
                    return (ushort)LandTexture_FieldIndex.TextureSpecularExponent;
                case "POTENTIALGRASS":
                    return (ushort)LandTexture_FieldIndex.PotentialGrass;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.PotentialGrass:
                    return true;
                case LandTexture_FieldIndex.Icon:
                case LandTexture_FieldIndex.Havok:
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Havok:
                    return true;
                case LandTexture_FieldIndex.Icon:
                case LandTexture_FieldIndex.TextureSpecularExponent:
                case LandTexture_FieldIndex.PotentialGrass:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                case LandTexture_FieldIndex.Havok:
                case LandTexture_FieldIndex.TextureSpecularExponent:
                case LandTexture_FieldIndex.PotentialGrass:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    return "Icon";
                case LandTexture_FieldIndex.Havok:
                    return "Havok";
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    return "TextureSpecularExponent";
                case LandTexture_FieldIndex.PotentialGrass:
                    return "PotentialGrass";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                case LandTexture_FieldIndex.Havok:
                case LandTexture_FieldIndex.TextureSpecularExponent:
                case LandTexture_FieldIndex.PotentialGrass:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                case LandTexture_FieldIndex.Havok:
                case LandTexture_FieldIndex.TextureSpecularExponent:
                case LandTexture_FieldIndex.PotentialGrass:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    return typeof(FilePath);
                case LandTexture_FieldIndex.Havok:
                    return typeof(HavokData);
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    return typeof(Byte);
                case LandTexture_FieldIndex.PotentialGrass:
                    return typeof(NotifyingList<FormIDSetLink<Grass>>);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LTEX_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LandTextureCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ILandTexture item,
            ILandTextureGetter rhs,
            ILandTextureGetter def,
            ErrorMaskBuilder errorMask,
            LandTexture_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Icon ?? true)
            {
                errorMask.PushIndex((int)LandTexture_FieldIndex.Icon);
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Havok.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)LandTexture_FieldIndex.Havok);
                try
                {
                    item.Havok_Property.SetToWithDefault(
                        rhs.Havok_Property,
                        def?.Havok_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Havok.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    HavokDataCommon.CopyFieldsFrom(
                                        item: item.Havok,
                                        rhs: rhs.Havok,
                                        def: def?.Havok,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Havok.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(HavokData);
                                    return HavokData.Copy(
                                        r,
                                        copyMask?.Havok?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Havok?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.TextureSpecularExponent ?? true)
            {
                errorMask.PushIndex((int)LandTexture_FieldIndex.TextureSpecularExponent);
                try
                {
                    item.TextureSpecularExponent_Property.SetToWithDefault(
                        rhs: rhs.TextureSpecularExponent_Property,
                        def: def?.TextureSpecularExponent_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.PotentialGrass != CopyOption.Skip)
            {
                errorMask.PushIndex((int)LandTexture_FieldIndex.PotentialGrass);
                try
                {
                    item.PotentialGrass.SetToWithDefault(
                        rhs.PotentialGrass,
                        def?.PotentialGrass,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ILandTexture obj,
            NotifyingFireParameters cmds = null)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case LandTexture_FieldIndex.Havok:
                    obj.Havok_Property.HasBeenSet = on;
                    break;
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    obj.TextureSpecularExponent_Property.HasBeenSet = on;
                    break;
                case LandTexture_FieldIndex.PotentialGrass:
                    obj.PotentialGrass.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ILandTexture obj,
            NotifyingUnsetParameters cmds = null)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case LandTexture_FieldIndex.Havok:
                    obj.Havok_Property.Unset(cmds);
                    break;
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    obj.TextureSpecularExponent_Property.Unset(cmds);
                    break;
                case LandTexture_FieldIndex.PotentialGrass:
                    obj.PotentialGrass.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ILandTexture obj)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case LandTexture_FieldIndex.Havok:
                    return obj.Havok_Property.HasBeenSet;
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    return obj.TextureSpecularExponent_Property.HasBeenSet;
                case LandTexture_FieldIndex.PotentialGrass:
                    return obj.PotentialGrass.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ILandTextureGetter obj)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    return obj.Icon;
                case LandTexture_FieldIndex.Havok:
                    return obj.Havok;
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    return obj.TextureSpecularExponent;
                case LandTexture_FieldIndex.PotentialGrass:
                    return obj.PotentialGrass;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ILandTexture item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.Havok_Property.Unset(cmds.ToUnsetParams());
            item.TextureSpecularExponent_Property.Unset(cmds.ToUnsetParams());
            item.PotentialGrass.Unset(cmds.ToUnsetParams());
        }

        public static LandTexture_Mask<bool> GetEqualsMask(
            this ILandTextureGetter item,
            ILandTextureGetter rhs)
        {
            var ret = new LandTexture_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ILandTextureGetter item,
            ILandTextureGetter rhs,
            LandTexture_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.Havok = item.Havok_Property.LoquiEqualsHelper(rhs.Havok_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.TextureSpecularExponent = item.TextureSpecularExponent_Property.Equals(rhs.TextureSpecularExponent_Property, (l, r) => l == r);
            if (item.PotentialGrass.HasBeenSet == rhs.PotentialGrass.HasBeenSet)
            {
                if (item.PotentialGrass.HasBeenSet)
                {
                    ret.PotentialGrass = new MaskItem<bool, IEnumerable<bool>>();
                    ret.PotentialGrass.Specific = item.PotentialGrass.SelectAgainst<FormIDSetLink<Grass>, bool>(rhs.PotentialGrass, ((l, r) => object.Equals(l, r)), out ret.PotentialGrass.Overall);
                    ret.PotentialGrass.Overall = ret.PotentialGrass.Overall && ret.PotentialGrass.Specific.All((b) => b);
                }
                else
                {
                    ret.PotentialGrass = new MaskItem<bool, IEnumerable<bool>>();
                    ret.PotentialGrass.Overall = true;
                }
            }
            else
            {
                ret.PotentialGrass = new MaskItem<bool, IEnumerable<bool>>();
                ret.PotentialGrass.Overall = false;
            }
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ILandTextureGetter item,
            string name = null,
            LandTexture_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILandTextureGetter item,
            FileGeneration fg,
            string name = null,
            LandTexture_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LandTexture)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LandTexture)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Havok?.Overall ?? true)
                {
                    item.Havok?.ToString(fg, "Havok");
                }
                if (printMask?.TextureSpecularExponent ?? true)
                {
                    fg.AppendLine($"TextureSpecularExponent => {item.TextureSpecularExponent}");
                }
                if (printMask?.PotentialGrass?.Overall ?? true)
                {
                    fg.AppendLine("PotentialGrass =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.PotentialGrass)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILandTextureGetter item,
            LandTexture_Mask<bool?> checkMask)
        {
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.Havok.Overall.HasValue && checkMask.Havok.Overall.Value != item.Havok_Property.HasBeenSet) return false;
            if (checkMask.Havok.Specific != null && (item.Havok == null || !item.Havok.HasBeenSet(checkMask.Havok.Specific))) return false;
            if (checkMask.TextureSpecularExponent.HasValue && checkMask.TextureSpecularExponent.Value != item.TextureSpecularExponent_Property.HasBeenSet) return false;
            if (checkMask.PotentialGrass.Overall.HasValue && checkMask.PotentialGrass.Overall.Value != item.PotentialGrass.HasBeenSet) return false;
            return true;
        }

        public static LandTexture_Mask<bool> GetHasBeenSetMask(ILandTextureGetter item)
        {
            var ret = new LandTexture_Mask<bool>();
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.Havok = new MaskItem<bool, HavokData_Mask<bool>>(item.Havok_Property.HasBeenSet, HavokDataCommon.GetHasBeenSetMask(item.Havok));
            ret.TextureSpecularExponent = item.TextureSpecularExponent_Property.HasBeenSet;
            ret.PotentialGrass = new MaskItem<bool, IEnumerable<bool>>(item.PotentialGrass.HasBeenSet, null);
            return ret;
        }

        public static LandTexture_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static LandTexture_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (LandTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (LandTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LandTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LandTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (LandTexture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ILandTextureGetter item,
            bool doMasks,
            out LandTexture_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = LandTexture_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_XML_Internal(
            XElement node,
            ILandTextureGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LandTexture");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LandTexture");
            }
            if (item.Icon_Property.HasBeenSet)
            {
                FilePathXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Icon),
                    item: item.Icon_Property,
                    fieldIndex: (int)LandTexture_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Havok_Property.HasBeenSet)
            {
                LoquiXmlTranslation<HavokData>.Instance.Write(
                    node: elem,
                    item: item.Havok_Property,
                    name: nameof(item.Havok),
                    fieldIndex: (int)LandTexture_FieldIndex.Havok,
                    errorMask: errorMask);
            }
            if (item.TextureSpecularExponent_Property.HasBeenSet)
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.TextureSpecularExponent),
                    item: item.TextureSpecularExponent_Property,
                    fieldIndex: (int)LandTexture_FieldIndex.TextureSpecularExponent,
                    errorMask: errorMask);
            }
            if (item.PotentialGrass.HasBeenSet)
            {
                ListXmlTranslation<FormIDSetLink<Grass>>.Instance.Write(
                    node: elem,
                    name: nameof(item.PotentialGrass),
                    item: item.PotentialGrass,
                    fieldIndex: (int)LandTexture_FieldIndex.PotentialGrass,
                    errorMask: errorMask,
                    transl: (XElement subNode, FormIDSetLink<Grass> subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        FormIDXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem?.FormID,
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            LandTexture item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LandTexture_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = LandTexture_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            LandTexture item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LandTexture_Registration.LTEX_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            LandTexture item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)LandTexture_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(LandTexture_Registration.ICON_HEADER),
                nullable: false);
            LoquiBinaryTranslation<HavokData>.Instance.Write(
                writer: writer,
                item: item.Havok_Property,
                fieldIndex: (int)LandTexture_FieldIndex.Havok,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TextureSpecularExponent_Property,
                fieldIndex: (int)LandTexture_FieldIndex.TextureSpecularExponent,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(LandTexture_Registration.SNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Grass>>.Instance.Write(
                writer: writer,
                items: item.PotentialGrass,
                fieldIndex: (int)LandTexture_FieldIndex.PotentialGrass,
                errorMask: errorMask,
                transl: FormIDBinaryTranslation.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class LandTexture_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<LandTexture_Mask<T>>
    {
        #region Ctors
        public LandTexture_Mask()
        {
        }

        public LandTexture_Mask(T initialValue)
        {
            this.Icon = initialValue;
            this.Havok = new MaskItem<T, HavokData_Mask<T>>(initialValue, new HavokData_Mask<T>(initialValue));
            this.TextureSpecularExponent = initialValue;
            this.PotentialGrass = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Icon;
        public MaskItem<T, HavokData_Mask<T>> Havok { get; set; }
        public T TextureSpecularExponent;
        public MaskItem<T, IEnumerable<T>> PotentialGrass;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LandTexture_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LandTexture_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Havok, rhs.Havok)) return false;
            if (!object.Equals(this.TextureSpecularExponent, rhs.TextureSpecularExponent)) return false;
            if (!object.Equals(this.PotentialGrass, rhs.PotentialGrass)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Havok?.GetHashCode());
            ret = ret.CombineHashCode(this.TextureSpecularExponent?.GetHashCode());
            ret = ret.CombineHashCode(this.PotentialGrass?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Icon)) return false;
            if (Havok != null)
            {
                if (!eval(this.Havok.Overall)) return false;
                if (this.Havok.Specific != null && !this.Havok.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.TextureSpecularExponent)) return false;
            if (this.PotentialGrass != null)
            {
                if (!eval(this.PotentialGrass.Overall)) return false;
                if (this.PotentialGrass.Specific != null)
                {
                    foreach (var item in this.PotentialGrass.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new LandTexture_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LandTexture_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LandTexture_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Icon = eval(this.Icon);
            if (this.Havok != null)
            {
                obj.Havok = new MaskItem<R, HavokData_Mask<R>>();
                obj.Havok.Overall = eval(this.Havok.Overall);
                if (this.Havok.Specific != null)
                {
                    obj.Havok.Specific = this.Havok.Specific.Translate(eval);
                }
            }
            obj.TextureSpecularExponent = eval(this.TextureSpecularExponent);
            if (PotentialGrass != null)
            {
                obj.PotentialGrass = new MaskItem<R, IEnumerable<R>>();
                obj.PotentialGrass.Overall = eval(this.PotentialGrass.Overall);
                if (PotentialGrass.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.PotentialGrass.Specific = l;
                    foreach (var item in PotentialGrass.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.PotentialGrass.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LandTexture_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LandTexture_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LandTexture_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Havok?.Overall ?? true)
                {
                    Havok?.ToString(fg);
                }
                if (printMask?.TextureSpecularExponent ?? true)
                {
                    fg.AppendLine($"TextureSpecularExponent => {TextureSpecularExponent}");
                }
                if (printMask?.PotentialGrass?.Overall ?? true)
                {
                    fg.AppendLine("PotentialGrass =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (PotentialGrass.Overall != null)
                        {
                            fg.AppendLine(PotentialGrass.Overall.ToString());
                        }
                        if (PotentialGrass.Specific != null)
                        {
                            foreach (var subItem in PotentialGrass.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LandTexture_ErrorMask : MajorRecord_ErrorMask, IErrorMask<LandTexture_ErrorMask>
    {
        #region Members
        public Exception Icon;
        public MaskItem<Exception, HavokData_ErrorMask> Havok;
        public Exception TextureSpecularExponent;
        public MaskItem<Exception, IEnumerable<Exception>> PotentialGrass;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    return Icon;
                case LandTexture_FieldIndex.Havok:
                    return Havok;
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    return TextureSpecularExponent;
                case LandTexture_FieldIndex.PotentialGrass:
                    return PotentialGrass;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case LandTexture_FieldIndex.Havok:
                    this.Havok = new MaskItem<Exception, HavokData_ErrorMask>(ex, null);
                    break;
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    this.TextureSpecularExponent = ex;
                    break;
                case LandTexture_FieldIndex.PotentialGrass:
                    this.PotentialGrass = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case LandTexture_FieldIndex.Havok:
                    this.Havok = (MaskItem<Exception, HavokData_ErrorMask>)obj;
                    break;
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    this.TextureSpecularExponent = (Exception)obj;
                    break;
                case LandTexture_FieldIndex.PotentialGrass:
                    this.PotentialGrass = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Icon != null) return true;
            if (Havok != null) return true;
            if (TextureSpecularExponent != null) return true;
            if (PotentialGrass != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("LandTexture_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Icon => {Icon}");
            Havok?.ToString(fg);
            fg.AppendLine($"TextureSpecularExponent => {TextureSpecularExponent}");
            fg.AppendLine("PotentialGrass =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (PotentialGrass.Overall != null)
                {
                    fg.AppendLine(PotentialGrass.Overall.ToString());
                }
                if (PotentialGrass.Specific != null)
                {
                    foreach (var subItem in PotentialGrass.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public LandTexture_ErrorMask Combine(LandTexture_ErrorMask rhs)
        {
            var ret = new LandTexture_ErrorMask();
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Havok = new MaskItem<Exception, HavokData_ErrorMask>(this.Havok.Overall.Combine(rhs.Havok.Overall), ((IErrorMask<HavokData_ErrorMask>)this.Havok.Specific).Combine(rhs.Havok.Specific));
            ret.TextureSpecularExponent = this.TextureSpecularExponent.Combine(rhs.TextureSpecularExponent);
            ret.PotentialGrass = new MaskItem<Exception, IEnumerable<Exception>>(this.PotentialGrass.Overall.Combine(rhs.PotentialGrass.Overall), new List<Exception>(this.PotentialGrass.Specific.And(rhs.PotentialGrass.Specific)));
            return ret;
        }
        public static LandTexture_ErrorMask Combine(LandTexture_ErrorMask lhs, LandTexture_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LandTexture_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LandTexture_ErrorMask();
        }
        #endregion

    }
    public class LandTexture_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Icon;
        public MaskItem<CopyOption, HavokData_CopyMask> Havok;
        public bool TextureSpecularExponent;
        public CopyOption PotentialGrass;
        #endregion

    }
    #endregion




    #endregion

}
