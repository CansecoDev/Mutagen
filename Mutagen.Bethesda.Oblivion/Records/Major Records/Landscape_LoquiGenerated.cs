/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Landscape : 
        Placed,
        ILandscape,
        ILoquiObject<Landscape>,
        ILoquiObjectSetter,
        IPropertySupporter<Byte[]>,
        IEquatable<Landscape>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Landscape_Registration.Instance;
        public new static Landscape_Registration Registration => Landscape_Registration.Instance;

        #region Ctor
        public Landscape()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown
        protected Byte[] _Unknown;
        protected PropertyForwarder<Landscape, Byte[]> _UnknownForwarder;
        public INotifyingSetItem<Byte[]> Unknown_Property => _UnknownForwarder ?? (_UnknownForwarder = new PropertyForwarder<Landscape, Byte[]>(this, (int)Landscape_FieldIndex.Unknown));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Unknown
        {
            get => this._Unknown;
            set => this.SetUnknown(value);
        }
        protected void SetUnknown(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Landscape_FieldIndex.Unknown];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Unknown, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Landscape_FieldIndex.Unknown] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = Unknown;
                _Unknown = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)Landscape_FieldIndex.Unknown,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Unknown = item;
            }
        }
        protected void UnsetUnknown()
        {
            SetUnknown(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> ILandscape.Unknown_Property => this.Unknown_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> ILandscapeGetter.Unknown_Property => this.Unknown_Property;
        #endregion
        #region VertexNormals
        protected Byte[] _VertexNormals;
        protected PropertyForwarder<Landscape, Byte[]> _VertexNormalsForwarder;
        public INotifyingSetItem<Byte[]> VertexNormals_Property => _VertexNormalsForwarder ?? (_VertexNormalsForwarder = new PropertyForwarder<Landscape, Byte[]>(this, (int)Landscape_FieldIndex.VertexNormals));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] VertexNormals
        {
            get => this._VertexNormals;
            set => this.SetVertexNormals(value);
        }
        protected void SetVertexNormals(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexNormals];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(VertexNormals, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexNormals] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = VertexNormals;
                _VertexNormals = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)Landscape_FieldIndex.VertexNormals,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _VertexNormals = item;
            }
        }
        protected void UnsetVertexNormals()
        {
            SetVertexNormals(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> ILandscape.VertexNormals_Property => this.VertexNormals_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> ILandscapeGetter.VertexNormals_Property => this.VertexNormals_Property;
        #endregion
        #region VertexHeightMap
        protected Byte[] _VertexHeightMap;
        protected PropertyForwarder<Landscape, Byte[]> _VertexHeightMapForwarder;
        public INotifyingSetItem<Byte[]> VertexHeightMap_Property => _VertexHeightMapForwarder ?? (_VertexHeightMapForwarder = new PropertyForwarder<Landscape, Byte[]>(this, (int)Landscape_FieldIndex.VertexHeightMap));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] VertexHeightMap
        {
            get => this._VertexHeightMap;
            set => this.SetVertexHeightMap(value);
        }
        protected void SetVertexHeightMap(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexHeightMap];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(VertexHeightMap, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexHeightMap] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = VertexHeightMap;
                _VertexHeightMap = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)Landscape_FieldIndex.VertexHeightMap,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _VertexHeightMap = item;
            }
        }
        protected void UnsetVertexHeightMap()
        {
            SetVertexHeightMap(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> ILandscape.VertexHeightMap_Property => this.VertexHeightMap_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> ILandscapeGetter.VertexHeightMap_Property => this.VertexHeightMap_Property;
        #endregion
        #region VertexColors
        protected Byte[] _VertexColors;
        protected PropertyForwarder<Landscape, Byte[]> _VertexColorsForwarder;
        public INotifyingSetItem<Byte[]> VertexColors_Property => _VertexColorsForwarder ?? (_VertexColorsForwarder = new PropertyForwarder<Landscape, Byte[]>(this, (int)Landscape_FieldIndex.VertexColors));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] VertexColors
        {
            get => this._VertexColors;
            set => this.SetVertexColors(value);
        }
        protected void SetVertexColors(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexColors];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(VertexColors, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Landscape_FieldIndex.VertexColors] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = VertexColors;
                _VertexColors = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)Landscape_FieldIndex.VertexColors,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _VertexColors = item;
            }
        }
        protected void UnsetVertexColors()
        {
            SetVertexColors(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> ILandscape.VertexColors_Property => this.VertexColors_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> ILandscapeGetter.VertexColors_Property => this.VertexColors_Property;
        #endregion
        #region Layers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<BaseLayer> _Layers = new NotifyingList<BaseLayer>();
        public INotifyingList<BaseLayer> Layers => _Layers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<BaseLayer> LayersEnumerable
        {
            get => _Layers;
            set => _Layers.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<BaseLayer> ILandscape.Layers => _Layers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<BaseLayer> ILandscapeGetter.Layers => _Layers;
        #endregion

        #endregion
        #region Textures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDLink<LandTexture>> _Textures = new NotifyingList<FormIDLink<LandTexture>>();
        public INotifyingList<FormIDLink<LandTexture>> Textures => _Textures;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDLink<LandTexture>> TexturesEnumerable
        {
            get => _Textures;
            set => _Textures.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDLink<LandTexture>> ILandscape.Textures => _Textures;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDLink<LandTexture>> ILandscapeGetter.Textures => _Textures;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => LandscapeCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => LandscapeCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => LandscapeCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            LandscapeCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Landscape>.GetEqualsMask(Landscape rhs) => LandscapeCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ILandscapeGetter>.GetEqualsMask(ILandscapeGetter rhs) => LandscapeCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return LandscapeCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Landscape_Mask<bool> printMask = null)
        {
            return LandscapeCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            LandscapeCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Landscape_Mask<bool> GetHasBeenSetMask()
        {
            return LandscapeCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Landscape rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Landscape rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Unknown_Property.HasBeenSet != rhs.Unknown_Property.HasBeenSet) return false;
            if (Unknown_Property.HasBeenSet)
            {
                if (!this.Unknown.EqualsFast(rhs.Unknown)) return false;
            }
            if (VertexNormals_Property.HasBeenSet != rhs.VertexNormals_Property.HasBeenSet) return false;
            if (VertexNormals_Property.HasBeenSet)
            {
                if (!this.VertexNormals.EqualsFast(rhs.VertexNormals)) return false;
            }
            if (VertexHeightMap_Property.HasBeenSet != rhs.VertexHeightMap_Property.HasBeenSet) return false;
            if (VertexHeightMap_Property.HasBeenSet)
            {
                if (!this.VertexHeightMap.EqualsFast(rhs.VertexHeightMap)) return false;
            }
            if (VertexColors_Property.HasBeenSet != rhs.VertexColors_Property.HasBeenSet) return false;
            if (VertexColors_Property.HasBeenSet)
            {
                if (!this.VertexColors.EqualsFast(rhs.VertexColors)) return false;
            }
            if (Layers.HasBeenSet != rhs.Layers.HasBeenSet) return false;
            if (Layers.HasBeenSet)
            {
                if (!this.Layers.SequenceEqual(rhs.Layers)) return false;
            }
            if (Textures.HasBeenSet != rhs.Textures.HasBeenSet) return false;
            if (Textures.HasBeenSet)
            {
                if (!this.Textures.SequenceEqual(rhs.Textures)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Unknown_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Unknown).CombineHashCode(ret);
            }
            if (VertexNormals_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(VertexNormals).CombineHashCode(ret);
            }
            if (VertexHeightMap_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(VertexHeightMap).CombineHashCode(ret);
            }
            if (VertexColors_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(VertexColors).CombineHashCode(ret);
            }
            if (Layers.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Layers).CombineHashCode(ret);
            }
            if (Textures.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Textures).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Landscape Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Landscape Create_XML(
            XElement root,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Landscape Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Landscape();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Landscape Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Landscape Create_XML(
            string path,
            out Landscape_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Landscape Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Landscape Create_XML(
            Stream stream,
            out Landscape_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Landscape>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Landscape_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<Landscape>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Landscape_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Landscape_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out Placed_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Landscape_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Landscape_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            LandscapeCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            Landscape item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Unknown":
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.Unknown);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] UnknownParse,
                            errorMask: errorMask))
                        {
                            item.Unknown = UnknownParse;
                        }
                        else
                        {
                            item.UnsetUnknown();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VertexNormals":
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.VertexNormals);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] VertexNormalsParse,
                            errorMask: errorMask))
                        {
                            item.VertexNormals = VertexNormalsParse;
                        }
                        else
                        {
                            item.UnsetVertexNormals();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VertexHeightMap":
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.VertexHeightMap);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] VertexHeightMapParse,
                            errorMask: errorMask))
                        {
                            item.VertexHeightMap = VertexHeightMapParse;
                        }
                        else
                        {
                            item.UnsetVertexHeightMap();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VertexColors":
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.VertexColors);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] VertexColorsParse,
                            errorMask: errorMask))
                        {
                            item.VertexColors = VertexColorsParse;
                        }
                        else
                        {
                            item.UnsetVertexColors();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Layers":
                    ListXmlTranslation<BaseLayer>.Instance.ParseInto(
                        root: root,
                        item: item.Layers,
                        fieldIndex: (int)Landscape_FieldIndex.Layers,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<BaseLayer>.Instance.Parse);
                    break;
                case "Textures":
                    ListXmlTranslation<FormIDLink<LandTexture>>.Instance.ParseInto(
                        root: root,
                        item: item.Textures,
                        fieldIndex: (int)Landscape_FieldIndex.Textures,
                        errorMask: errorMask,
                        transl: FormIDXmlTranslation.Instance.Parse);
                    break;
                default:
                    Placed.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Landscape_FieldIndex)index)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Layers:
                    return _hasBeenSetTracker[index];
                case Landscape_FieldIndex.Textures:
                    return Textures.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter Byte[]
        Byte[] IPropertySupporter<Byte[]>.Get(int index)
        {
            return GetByteArr(index: index);
        }

        protected override Byte[] GetByteArr(int index)
        {
            switch ((Landscape_FieldIndex)index)
            {
                case Landscape_FieldIndex.Unknown:
                    return Unknown;
                case Landscape_FieldIndex.VertexNormals:
                    return VertexNormals;
                case Landscape_FieldIndex.VertexHeightMap:
                    return VertexHeightMap;
                case Landscape_FieldIndex.VertexColors:
                    return VertexColors;
                default:
                    return base.GetByteArr(index: index);
            }
        }

        void IPropertySupporter<Byte[]>.Set(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByteArr(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetByteArr(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Landscape_FieldIndex)index)
            {
                case Landscape_FieldIndex.Unknown:
                    SetUnknown(item, hasBeenSet, cmds);
                    break;
                case Landscape_FieldIndex.VertexNormals:
                    SetVertexNormals(item, hasBeenSet, cmds);
                    break;
                case Landscape_FieldIndex.VertexHeightMap:
                    SetVertexHeightMap(item, hasBeenSet, cmds);
                    break;
                case Landscape_FieldIndex.VertexColors:
                    SetVertexColors(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetByteArr(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<Byte[]>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte[]>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte[]>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByteArr(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetByteArr(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Landscape_FieldIndex)index)
            {
                case Landscape_FieldIndex.Unknown:
                    SetUnknown(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                case Landscape_FieldIndex.VertexNormals:
                    SetVertexNormals(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                case Landscape_FieldIndex.VertexHeightMap:
                    SetVertexHeightMap(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                case Landscape_FieldIndex.VertexColors:
                    SetVertexColors(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                default:
                    base.UnsetByteArr(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte[]> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ByteArr_subscriptions == null)
            {
                _ByteArr_subscriptions = new ObjectCentralizationSubscriptions<Byte[]>();
            }
            _ByteArr_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Unsubscribe(
            int index,
            object owner)
        {
            _ByteArr_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte[]>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte[] IPropertySupporter<Byte[]>.DefaultValue(int index)
        {
            return DefaultValueByteArr(index: index);
        }

        protected override Byte[] DefaultValueByteArr(int index)
        {
            switch ((Landscape_FieldIndex)index)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                    return default(Byte[]);
                default:
                    return base.DefaultValueByteArr(index: index);
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Landscape_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Layers.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Landscape Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Landscape Create_Binary(
            MutagenFrame frame,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Landscape Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Landscape>(
                record: new Landscape(),
                frame: frame,
                errorMask: errorMask,
                recType: Landscape_Registration.LAND_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Landscape Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Landscape Create_Binary(
            string path,
            out Landscape_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Landscape Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Landscape Create_Binary(
            Stream stream,
            out Landscape_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Landscape_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            LandscapeCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Landscape item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            Placed.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Landscape item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.Unknown);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] UnknownParse,
                            errorMask: errorMask))
                        {
                            item.Unknown = UnknownParse;
                        }
                        else
                        {
                            item.UnsetUnknown();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Unknown);
                case 0x4C4D4E56: // VNML
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.VertexNormals);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] VertexNormalsParse,
                            errorMask: errorMask))
                        {
                            item.VertexNormals = VertexNormalsParse;
                        }
                        else
                        {
                            item.UnsetVertexNormals();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexNormals);
                case 0x54474856: // VHGT
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.VertexHeightMap);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] VertexHeightMapParse,
                            errorMask: errorMask))
                        {
                            item.VertexHeightMap = VertexHeightMapParse;
                        }
                        else
                        {
                            item.UnsetVertexHeightMap();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexHeightMap);
                case 0x524C4356: // VCLR
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Landscape_FieldIndex.VertexColors);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] VertexColorsParse,
                            errorMask: errorMask))
                        {
                            item.VertexColors = VertexColorsParse;
                        }
                        else
                        {
                            item.UnsetVertexColors();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexColors);
                case 0x54585442: // BTXT
                case 0x54585441: // ATXT
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<BaseLayer>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: BaseLayer_Registration.TriggeringRecordTypes,
                        item: item.Layers,
                        fieldIndex: (int)Landscape_FieldIndex.Layers,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, RecordType header, out BaseLayer listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            switch (header.TypeInt)
                            {
                                case 0x54585442: // BTXT
                                    return LoquiBinaryTranslation<BaseLayer>.Instance.Parse(
                                        frame: r.Spawn(snapToFinalPosition: false),
                                        item: out listSubItem,
                                        errorMask: listErrMask);
                                case 0x54585441: // ATXT
                                    return LoquiBinaryTranslation<AlphaLayer>.Instance.Parse(
                                        frame: r.Spawn(snapToFinalPosition: false),
                                        item: out listSubItem,
                                        errorMask: listErrMask);
                                default:
                                    throw new NotImplementedException();
                            }
                        }
                        );
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Layers);
                case 0x58455456: // VTEX
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<LandTexture>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Textures,
                        fieldIndex: (int)Landscape_FieldIndex.Textures,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormIDBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Textures);
                default:
                    return Placed.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Landscape Copy(
            Landscape_CopyMask copyMask = null,
            ILandscapeGetter def = null)
        {
            return Landscape.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Landscape Copy(
            ILandscape item,
            Landscape_CopyMask copyMask = null,
            ILandscapeGetter def = null)
        {
            Landscape ret;
            if (item.GetType().Equals(typeof(Landscape)))
            {
                ret = new Landscape();
            }
            else
            {
                ret = (Landscape)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Landscape Copy_ToLoqui(
            ILandscapeGetter item,
            Landscape_CopyMask copyMask = null,
            ILandscapeGetter def = null)
        {
            Landscape ret;
            if (item.GetType().Equals(typeof(Landscape)))
            {
                ret = new Landscape() as Landscape;
            }
            else
            {
                ret = (Landscape)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ILandscapeGetter rhs,
            Landscape_CopyMask copyMask,
            ILandscapeGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ILandscapeGetter rhs,
            out Landscape_ErrorMask errorMask,
            Landscape_CopyMask copyMask = null,
            ILandscapeGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LandscapeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ILandscapeGetter rhs,
            ErrorMaskBuilder errorMask,
            Landscape_CopyMask copyMask = null,
            ILandscapeGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            LandscapeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    this.SetUnknown(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case Landscape_FieldIndex.VertexNormals:
                    this.SetVertexNormals(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case Landscape_FieldIndex.VertexHeightMap:
                    this.SetVertexHeightMap(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case Landscape_FieldIndex.VertexColors:
                    this.SetVertexColors(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case Landscape_FieldIndex.Layers:
                    this._Layers.SetTo((IEnumerable<BaseLayer>)obj, cmds);
                    break;
                case Landscape_FieldIndex.Textures:
                    this._Textures.SetTo((IEnumerable<FormIDLink<LandTexture>>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            LandscapeCommon.Clear(this, cmds);
        }


        public new static Landscape Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Landscape();
            foreach (var pair in fields)
            {
                CopyInInternal_Landscape(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Landscape(Landscape obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Landscape_FieldIndex enu))
            {
                CopyInInternal_Placed(obj, pair);
            }
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    obj.SetUnknown(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case Landscape_FieldIndex.VertexNormals:
                    obj.SetVertexNormals(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case Landscape_FieldIndex.VertexHeightMap:
                    obj.SetVertexHeightMap(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case Landscape_FieldIndex.VertexColors:
                    obj.SetVertexColors(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case Landscape_FieldIndex.Layers:
                    obj._Layers.SetTo((IEnumerable<BaseLayer>)pair.Value, null);
                    break;
                case Landscape_FieldIndex.Textures:
                    obj._Textures.SetTo((IEnumerable<FormIDLink<LandTexture>>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Landscape obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ILandscape : ILandscapeGetter, IPlaced, ILoquiClass<ILandscape, ILandscapeGetter>, ILoquiClass<Landscape, ILandscapeGetter>
    {
        new Byte[] Unknown { get; set; }
        new INotifyingSetItem<Byte[]> Unknown_Property { get; }

        new Byte[] VertexNormals { get; set; }
        new INotifyingSetItem<Byte[]> VertexNormals_Property { get; }

        new Byte[] VertexHeightMap { get; set; }
        new INotifyingSetItem<Byte[]> VertexHeightMap_Property { get; }

        new Byte[] VertexColors { get; set; }
        new INotifyingSetItem<Byte[]> VertexColors_Property { get; }

        new INotifyingList<BaseLayer> Layers { get; }
        new INotifyingList<FormIDLink<LandTexture>> Textures { get; }
    }

    public partial interface ILandscapeGetter : IPlacedGetter
    {
        #region Unknown
        Byte[] Unknown { get; }
        INotifyingSetItemGetter<Byte[]> Unknown_Property { get; }

        #endregion
        #region VertexNormals
        Byte[] VertexNormals { get; }
        INotifyingSetItemGetter<Byte[]> VertexNormals_Property { get; }

        #endregion
        #region VertexHeightMap
        Byte[] VertexHeightMap { get; }
        INotifyingSetItemGetter<Byte[]> VertexHeightMap_Property { get; }

        #endregion
        #region VertexColors
        Byte[] VertexColors { get; }
        INotifyingSetItemGetter<Byte[]> VertexColors_Property { get; }

        #endregion
        #region Layers
        INotifyingListGetter<BaseLayer> Layers { get; }
        #endregion
        #region Textures
        INotifyingListGetter<FormIDLink<LandTexture>> Textures { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Landscape_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Unknown = 5,
        VertexNormals = 6,
        VertexHeightMap = 7,
        VertexColors = 8,
        Layers = 9,
        Textures = 10,
    }
    #endregion

    #region Registration
    public class Landscape_Registration : ILoquiRegistration
    {
        public static readonly Landscape_Registration Instance = new Landscape_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 143,
            version: 0);

        public const string GUID = "f03a09c7-ce1f-4764-ac9a-bccccfa481d4";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(Landscape_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Landscape_ErrorMask);

        public static readonly Type ClassType = typeof(Landscape);

        public static readonly Type GetterType = typeof(ILandscapeGetter);

        public static readonly Type SetterType = typeof(ILandscape);

        public static readonly Type CommonType = typeof(LandscapeCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Landscape";

        public const string Name = "Landscape";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "UNKNOWN":
                    return (ushort)Landscape_FieldIndex.Unknown;
                case "VERTEXNORMALS":
                    return (ushort)Landscape_FieldIndex.VertexNormals;
                case "VERTEXHEIGHTMAP":
                    return (ushort)Landscape_FieldIndex.VertexHeightMap;
                case "VERTEXCOLORS":
                    return (ushort)Landscape_FieldIndex.VertexColors;
                case "LAYERS":
                    return (ushort)Landscape_FieldIndex.Layers;
                case "TEXTURES":
                    return (ushort)Landscape_FieldIndex.Textures;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return true;
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                    return false;
                default:
                    return Placed_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Layers:
                    return true;
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return Placed_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return Placed_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    return "Unknown";
                case Landscape_FieldIndex.VertexNormals:
                    return "VertexNormals";
                case Landscape_FieldIndex.VertexHeightMap:
                    return "VertexHeightMap";
                case Landscape_FieldIndex.VertexColors:
                    return "VertexColors";
                case Landscape_FieldIndex.Layers:
                    return "Layers";
                case Landscape_FieldIndex.Textures:
                    return "Textures";
                default:
                    return Placed_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return Placed_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return Placed_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.VertexNormals:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.VertexHeightMap:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.VertexColors:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.Layers:
                    return typeof(NotifyingList<BaseLayer>);
                case Landscape_FieldIndex.Textures:
                    return typeof(NotifyingList<FormIDLink<LandTexture>>);
                default:
                    return Placed_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType VNML_HEADER = new RecordType("VNML");
        public static readonly RecordType VHGT_HEADER = new RecordType("VHGT");
        public static readonly RecordType VCLR_HEADER = new RecordType("VCLR");
        public static readonly RecordType BTXT_HEADER = new RecordType("BTXT");
        public static readonly RecordType ATXT_HEADER = new RecordType("ATXT");
        public static readonly RecordType VTEX_HEADER = new RecordType("VTEX");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LAND_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LandscapeCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ILandscape item,
            ILandscapeGetter rhs,
            ILandscapeGetter def,
            ErrorMaskBuilder errorMask,
            Landscape_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            PlacedCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Unknown ?? true)
            {
                errorMask.PushIndex((int)Landscape_FieldIndex.Unknown);
                try
                {
                    item.Unknown_Property.SetToWithDefault(
                        rhs: rhs.Unknown_Property,
                        def: def?.Unknown_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.VertexNormals ?? true)
            {
                errorMask.PushIndex((int)Landscape_FieldIndex.VertexNormals);
                try
                {
                    item.VertexNormals_Property.SetToWithDefault(
                        rhs: rhs.VertexNormals_Property,
                        def: def?.VertexNormals_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.VertexHeightMap ?? true)
            {
                errorMask.PushIndex((int)Landscape_FieldIndex.VertexHeightMap);
                try
                {
                    item.VertexHeightMap_Property.SetToWithDefault(
                        rhs: rhs.VertexHeightMap_Property,
                        def: def?.VertexHeightMap_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.VertexColors ?? true)
            {
                errorMask.PushIndex((int)Landscape_FieldIndex.VertexColors);
                try
                {
                    item.VertexColors_Property.SetToWithDefault(
                        rhs: rhs.VertexColors_Property,
                        def: def?.VertexColors_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Layers.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Landscape_FieldIndex.Layers);
                try
                {
                    item.Layers.SetToWithDefault(
                        rhs: rhs.Layers,
                        def: def?.Layers,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Layers.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(BaseLayer);
                                    return BaseLayer.Copy(
                                        r,
                                        copyMask?.Layers?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Layers.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Textures != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Landscape_FieldIndex.Textures);
                try
                {
                    item.Textures.SetToWithDefault(
                        rhs.Textures,
                        def?.Textures,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ILandscape obj,
            NotifyingFireParameters cmds = null)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    obj.Unknown_Property.HasBeenSet = on;
                    break;
                case Landscape_FieldIndex.VertexNormals:
                    obj.VertexNormals_Property.HasBeenSet = on;
                    break;
                case Landscape_FieldIndex.VertexHeightMap:
                    obj.VertexHeightMap_Property.HasBeenSet = on;
                    break;
                case Landscape_FieldIndex.VertexColors:
                    obj.VertexColors_Property.HasBeenSet = on;
                    break;
                case Landscape_FieldIndex.Layers:
                    obj.Layers.HasBeenSet = on;
                    break;
                case Landscape_FieldIndex.Textures:
                    obj.Textures.HasBeenSet = on;
                    break;
                default:
                    PlacedCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ILandscape obj,
            NotifyingUnsetParameters cmds = null)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    obj.Unknown_Property.Unset(cmds);
                    break;
                case Landscape_FieldIndex.VertexNormals:
                    obj.VertexNormals_Property.Unset(cmds);
                    break;
                case Landscape_FieldIndex.VertexHeightMap:
                    obj.VertexHeightMap_Property.Unset(cmds);
                    break;
                case Landscape_FieldIndex.VertexColors:
                    obj.VertexColors_Property.Unset(cmds);
                    break;
                case Landscape_FieldIndex.Layers:
                    obj.Layers.Unset(cmds);
                    break;
                case Landscape_FieldIndex.Textures:
                    obj.Textures.Unset(cmds);
                    break;
                default:
                    PlacedCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ILandscape obj)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    return obj.Unknown_Property.HasBeenSet;
                case Landscape_FieldIndex.VertexNormals:
                    return obj.VertexNormals_Property.HasBeenSet;
                case Landscape_FieldIndex.VertexHeightMap:
                    return obj.VertexHeightMap_Property.HasBeenSet;
                case Landscape_FieldIndex.VertexColors:
                    return obj.VertexColors_Property.HasBeenSet;
                case Landscape_FieldIndex.Layers:
                    return obj.Layers.HasBeenSet;
                case Landscape_FieldIndex.Textures:
                    return obj.Textures.HasBeenSet;
                default:
                    return PlacedCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ILandscapeGetter obj)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    return obj.Unknown;
                case Landscape_FieldIndex.VertexNormals:
                    return obj.VertexNormals;
                case Landscape_FieldIndex.VertexHeightMap:
                    return obj.VertexHeightMap;
                case Landscape_FieldIndex.VertexColors:
                    return obj.VertexColors;
                case Landscape_FieldIndex.Layers:
                    return obj.Layers;
                case Landscape_FieldIndex.Textures:
                    return obj.Textures;
                default:
                    return PlacedCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ILandscape item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Unknown_Property.Unset(cmds.ToUnsetParams());
            item.VertexNormals_Property.Unset(cmds.ToUnsetParams());
            item.VertexHeightMap_Property.Unset(cmds.ToUnsetParams());
            item.VertexColors_Property.Unset(cmds.ToUnsetParams());
            item.Layers.Unset(cmds.ToUnsetParams());
            item.Textures.Unset(cmds.ToUnsetParams());
        }

        public static Landscape_Mask<bool> GetEqualsMask(
            this ILandscapeGetter item,
            ILandscapeGetter rhs)
        {
            var ret = new Landscape_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ILandscapeGetter item,
            ILandscapeGetter rhs,
            Landscape_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Unknown = item.Unknown_Property.Equals(rhs.Unknown_Property, (l, r) => l.EqualsFast(r));
            ret.VertexNormals = item.VertexNormals_Property.Equals(rhs.VertexNormals_Property, (l, r) => l.EqualsFast(r));
            ret.VertexHeightMap = item.VertexHeightMap_Property.Equals(rhs.VertexHeightMap_Property, (l, r) => l.EqualsFast(r));
            ret.VertexColors = item.VertexColors_Property.Equals(rhs.VertexColors_Property, (l, r) => l.EqualsFast(r));
            if (item.Layers.HasBeenSet == rhs.Layers.HasBeenSet)
            {
                if (item.Layers.HasBeenSet)
                {
                    ret.Layers = new MaskItem<bool, IEnumerable<MaskItem<bool, BaseLayer_Mask<bool>>>>();
                    ret.Layers.Specific = item.Layers.SelectAgainst<BaseLayer, MaskItem<bool, BaseLayer_Mask<bool>>>(rhs.Layers, ((l, r) =>
                    {
                        MaskItem<bool, BaseLayer_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Layers.Overall);
                    ret.Layers.Overall = ret.Layers.Overall && ret.Layers.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Layers = new MaskItem<bool, IEnumerable<MaskItem<bool, BaseLayer_Mask<bool>>>>();
                    ret.Layers.Overall = true;
                }
            }
            else
            {
                ret.Layers = new MaskItem<bool, IEnumerable<MaskItem<bool, BaseLayer_Mask<bool>>>>();
                ret.Layers.Overall = false;
            }
            if (item.Textures.HasBeenSet == rhs.Textures.HasBeenSet)
            {
                if (item.Textures.HasBeenSet)
                {
                    ret.Textures = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Textures.Specific = item.Textures.SelectAgainst<FormIDLink<LandTexture>, bool>(rhs.Textures, ((l, r) => object.Equals(l, r)), out ret.Textures.Overall);
                    ret.Textures.Overall = ret.Textures.Overall && ret.Textures.Specific.All((b) => b);
                }
                else
                {
                    ret.Textures = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Textures.Overall = true;
                }
            }
            else
            {
                ret.Textures = new MaskItem<bool, IEnumerable<bool>>();
                ret.Textures.Overall = false;
            }
            PlacedCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ILandscapeGetter item,
            string name = null,
            Landscape_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILandscapeGetter item,
            FileGeneration fg,
            string name = null,
            Landscape_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Landscape)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Landscape)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {item.Unknown}");
                }
                if (printMask?.VertexNormals ?? true)
                {
                    fg.AppendLine($"VertexNormals => {item.VertexNormals}");
                }
                if (printMask?.VertexHeightMap ?? true)
                {
                    fg.AppendLine($"VertexHeightMap => {item.VertexHeightMap}");
                }
                if (printMask?.VertexColors ?? true)
                {
                    fg.AppendLine($"VertexColors => {item.VertexColors}");
                }
                if (printMask?.Layers?.Overall ?? true)
                {
                    fg.AppendLine("Layers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Layers)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Textures?.Overall ?? true)
                {
                    fg.AppendLine("Textures =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Textures)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILandscapeGetter item,
            Landscape_Mask<bool?> checkMask)
        {
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_Property.HasBeenSet) return false;
            if (checkMask.VertexNormals.HasValue && checkMask.VertexNormals.Value != item.VertexNormals_Property.HasBeenSet) return false;
            if (checkMask.VertexHeightMap.HasValue && checkMask.VertexHeightMap.Value != item.VertexHeightMap_Property.HasBeenSet) return false;
            if (checkMask.VertexColors.HasValue && checkMask.VertexColors.Value != item.VertexColors_Property.HasBeenSet) return false;
            if (checkMask.Layers.Overall.HasValue && checkMask.Layers.Overall.Value != item.Layers.HasBeenSet) return false;
            if (checkMask.Textures.Overall.HasValue && checkMask.Textures.Overall.Value != item.Textures.HasBeenSet) return false;
            return true;
        }

        public static Landscape_Mask<bool> GetHasBeenSetMask(ILandscapeGetter item)
        {
            var ret = new Landscape_Mask<bool>();
            ret.Unknown = item.Unknown_Property.HasBeenSet;
            ret.VertexNormals = item.VertexNormals_Property.HasBeenSet;
            ret.VertexHeightMap = item.VertexHeightMap_Property.HasBeenSet;
            ret.VertexColors = item.VertexColors_Property.HasBeenSet;
            ret.Layers = new MaskItem<bool, IEnumerable<MaskItem<bool, BaseLayer_Mask<bool>>>>(item.Layers.HasBeenSet, item.Layers.Select((i) => new MaskItem<bool, BaseLayer_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Textures = new MaskItem<bool, IEnumerable<bool>>(item.Textures.HasBeenSet, null);
            return ret;
        }

        public static Landscape_FieldIndex? ConvertFieldIndex(Placed_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Landscape_FieldIndex ConvertFieldIndex(Placed_FieldIndex index)
        {
            switch (index)
            {
                case Placed_FieldIndex.MajorRecordFlags:
                    return (Landscape_FieldIndex)((int)index);
                case Placed_FieldIndex.FormID:
                    return (Landscape_FieldIndex)((int)index);
                case Placed_FieldIndex.Version:
                    return (Landscape_FieldIndex)((int)index);
                case Placed_FieldIndex.EditorID:
                    return (Landscape_FieldIndex)((int)index);
                case Placed_FieldIndex.RecordType:
                    return (Landscape_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Landscape_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Landscape_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Landscape_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ILandscapeGetter item,
            bool doMasks,
            out Landscape_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            ILandscapeGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Landscape");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Landscape");
            }
            if (item.Unknown_Property.HasBeenSet)
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Unknown),
                    item: item.Unknown_Property,
                    fieldIndex: (int)Landscape_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if (item.VertexNormals_Property.HasBeenSet)
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.VertexNormals),
                    item: item.VertexNormals_Property,
                    fieldIndex: (int)Landscape_FieldIndex.VertexNormals,
                    errorMask: errorMask);
            }
            if (item.VertexHeightMap_Property.HasBeenSet)
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.VertexHeightMap),
                    item: item.VertexHeightMap_Property,
                    fieldIndex: (int)Landscape_FieldIndex.VertexHeightMap,
                    errorMask: errorMask);
            }
            if (item.VertexColors_Property.HasBeenSet)
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.VertexColors),
                    item: item.VertexColors_Property,
                    fieldIndex: (int)Landscape_FieldIndex.VertexColors,
                    errorMask: errorMask);
            }
            if (item.Layers.HasBeenSet)
            {
                ListXmlTranslation<BaseLayer>.Instance.Write(
                    node: elem,
                    name: nameof(item.Layers),
                    item: item.Layers,
                    fieldIndex: (int)Landscape_FieldIndex.Layers,
                    errorMask: errorMask,
                    transl: (XElement subNode, BaseLayer subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<BaseLayer>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Textures.HasBeenSet)
            {
                ListXmlTranslation<FormIDLink<LandTexture>>.Instance.Write(
                    node: elem,
                    name: nameof(item.Textures),
                    item: item.Textures,
                    fieldIndex: (int)Landscape_FieldIndex.Textures,
                    errorMask: errorMask,
                    transl: (XElement subNode, FormIDLink<LandTexture> subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        FormIDXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem?.FormID,
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Landscape item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Landscape_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Landscape_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Landscape item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Landscape_Registration.LAND_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Landscape item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown_Property,
                fieldIndex: (int)Landscape_FieldIndex.Unknown,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Landscape_Registration.DATA_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VertexNormals_Property,
                fieldIndex: (int)Landscape_FieldIndex.VertexNormals,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Landscape_Registration.VNML_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VertexHeightMap_Property,
                fieldIndex: (int)Landscape_FieldIndex.VertexHeightMap,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Landscape_Registration.VHGT_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VertexColors_Property,
                fieldIndex: (int)Landscape_FieldIndex.VertexColors,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Landscape_Registration.VCLR_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<BaseLayer>.Instance.Write(
                writer: writer,
                items: item.Layers,
                fieldIndex: (int)Landscape_FieldIndex.Layers,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<BaseLayer>.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<LandTexture>>.Instance.Write(
                writer: writer,
                items: item.Textures,
                fieldIndex: (int)Landscape_FieldIndex.Textures,
                recordType: Landscape_Registration.VTEX_HEADER,
                errorMask: errorMask,
                transl: FormIDBinaryTranslation.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Landscape_Mask<T> : Placed_Mask<T>, IMask<T>, IEquatable<Landscape_Mask<T>>
    {
        #region Ctors
        public Landscape_Mask()
        {
        }

        public Landscape_Mask(T initialValue)
        {
            this.Unknown = initialValue;
            this.VertexNormals = initialValue;
            this.VertexHeightMap = initialValue;
            this.VertexColors = initialValue;
            this.Layers = new MaskItem<T, IEnumerable<MaskItem<T, BaseLayer_Mask<T>>>>(initialValue, null);
            this.Textures = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Unknown;
        public T VertexNormals;
        public T VertexHeightMap;
        public T VertexColors;
        public MaskItem<T, IEnumerable<MaskItem<T, BaseLayer_Mask<T>>>> Layers;
        public MaskItem<T, IEnumerable<T>> Textures;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Landscape_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Landscape_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            if (!object.Equals(this.VertexNormals, rhs.VertexNormals)) return false;
            if (!object.Equals(this.VertexHeightMap, rhs.VertexHeightMap)) return false;
            if (!object.Equals(this.VertexColors, rhs.VertexColors)) return false;
            if (!object.Equals(this.Layers, rhs.Layers)) return false;
            if (!object.Equals(this.Textures, rhs.Textures)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(this.VertexNormals?.GetHashCode());
            ret = ret.CombineHashCode(this.VertexHeightMap?.GetHashCode());
            ret = ret.CombineHashCode(this.VertexColors?.GetHashCode());
            ret = ret.CombineHashCode(this.Layers?.GetHashCode());
            ret = ret.CombineHashCode(this.Textures?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Unknown)) return false;
            if (!eval(this.VertexNormals)) return false;
            if (!eval(this.VertexHeightMap)) return false;
            if (!eval(this.VertexColors)) return false;
            if (this.Layers != null)
            {
                if (!eval(this.Layers.Overall)) return false;
                if (this.Layers.Specific != null)
                {
                    foreach (var item in this.Layers.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Textures != null)
            {
                if (!eval(this.Textures.Overall)) return false;
                if (this.Textures.Specific != null)
                {
                    foreach (var item in this.Textures.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Landscape_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Landscape_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Landscape_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Unknown = eval(this.Unknown);
            obj.VertexNormals = eval(this.VertexNormals);
            obj.VertexHeightMap = eval(this.VertexHeightMap);
            obj.VertexColors = eval(this.VertexColors);
            if (Layers != null)
            {
                obj.Layers = new MaskItem<R, IEnumerable<MaskItem<R, BaseLayer_Mask<R>>>>();
                obj.Layers.Overall = eval(this.Layers.Overall);
                if (Layers.Specific != null)
                {
                    List<MaskItem<R, BaseLayer_Mask<R>>> l = new List<MaskItem<R, BaseLayer_Mask<R>>>();
                    obj.Layers.Specific = l;
                    foreach (var item in Layers.Specific)
                    {
                        MaskItem<R, BaseLayer_Mask<R>> mask = default(MaskItem<R, BaseLayer_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, BaseLayer_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Textures != null)
            {
                obj.Textures = new MaskItem<R, IEnumerable<R>>();
                obj.Textures.Overall = eval(this.Textures.Overall);
                if (Textures.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Textures.Specific = l;
                    foreach (var item in Textures.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Layers.Specific = null;
            this.Textures.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Landscape_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Landscape_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Landscape_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
                if (printMask?.VertexNormals ?? true)
                {
                    fg.AppendLine($"VertexNormals => {VertexNormals}");
                }
                if (printMask?.VertexHeightMap ?? true)
                {
                    fg.AppendLine($"VertexHeightMap => {VertexHeightMap}");
                }
                if (printMask?.VertexColors ?? true)
                {
                    fg.AppendLine($"VertexColors => {VertexColors}");
                }
                if (printMask?.Layers?.Overall ?? true)
                {
                    fg.AppendLine("Layers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Layers.Overall != null)
                        {
                            fg.AppendLine(Layers.Overall.ToString());
                        }
                        if (Layers.Specific != null)
                        {
                            foreach (var subItem in Layers.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Textures?.Overall ?? true)
                {
                    fg.AppendLine("Textures =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Textures.Overall != null)
                        {
                            fg.AppendLine(Textures.Overall.ToString());
                        }
                        if (Textures.Specific != null)
                        {
                            foreach (var subItem in Textures.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Landscape_ErrorMask : Placed_ErrorMask, IErrorMask<Landscape_ErrorMask>
    {
        #region Members
        public Exception Unknown;
        public Exception VertexNormals;
        public Exception VertexHeightMap;
        public Exception VertexColors;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, BaseLayer_ErrorMask>>> Layers;
        public MaskItem<Exception, IEnumerable<Exception>> Textures;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    return Unknown;
                case Landscape_FieldIndex.VertexNormals:
                    return VertexNormals;
                case Landscape_FieldIndex.VertexHeightMap:
                    return VertexHeightMap;
                case Landscape_FieldIndex.VertexColors:
                    return VertexColors;
                case Landscape_FieldIndex.Layers:
                    return Layers;
                case Landscape_FieldIndex.Textures:
                    return Textures;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                case Landscape_FieldIndex.VertexNormals:
                    this.VertexNormals = ex;
                    break;
                case Landscape_FieldIndex.VertexHeightMap:
                    this.VertexHeightMap = ex;
                    break;
                case Landscape_FieldIndex.VertexColors:
                    this.VertexColors = ex;
                    break;
                case Landscape_FieldIndex.Layers:
                    this.Layers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, BaseLayer_ErrorMask>>>(ex, null);
                    break;
                case Landscape_FieldIndex.Textures:
                    this.Textures = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                case Landscape_FieldIndex.VertexNormals:
                    this.VertexNormals = (Exception)obj;
                    break;
                case Landscape_FieldIndex.VertexHeightMap:
                    this.VertexHeightMap = (Exception)obj;
                    break;
                case Landscape_FieldIndex.VertexColors:
                    this.VertexColors = (Exception)obj;
                    break;
                case Landscape_FieldIndex.Layers:
                    this.Layers = (MaskItem<Exception, IEnumerable<MaskItem<Exception, BaseLayer_ErrorMask>>>)obj;
                    break;
                case Landscape_FieldIndex.Textures:
                    this.Textures = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Unknown != null) return true;
            if (VertexNormals != null) return true;
            if (VertexHeightMap != null) return true;
            if (VertexColors != null) return true;
            if (Layers != null) return true;
            if (Textures != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Landscape_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Unknown => {Unknown}");
            fg.AppendLine($"VertexNormals => {VertexNormals}");
            fg.AppendLine($"VertexHeightMap => {VertexHeightMap}");
            fg.AppendLine($"VertexColors => {VertexColors}");
            fg.AppendLine("Layers =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Layers.Overall != null)
                {
                    fg.AppendLine(Layers.Overall.ToString());
                }
                if (Layers.Specific != null)
                {
                    foreach (var subItem in Layers.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Textures =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Textures.Overall != null)
                {
                    fg.AppendLine(Textures.Overall.ToString());
                }
                if (Textures.Specific != null)
                {
                    foreach (var subItem in Textures.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Landscape_ErrorMask Combine(Landscape_ErrorMask rhs)
        {
            var ret = new Landscape_ErrorMask();
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            ret.VertexNormals = this.VertexNormals.Combine(rhs.VertexNormals);
            ret.VertexHeightMap = this.VertexHeightMap.Combine(rhs.VertexHeightMap);
            ret.VertexColors = this.VertexColors.Combine(rhs.VertexColors);
            ret.Layers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, BaseLayer_ErrorMask>>>(this.Layers.Overall.Combine(rhs.Layers.Overall), new List<MaskItem<Exception, BaseLayer_ErrorMask>>(this.Layers.Specific.And(rhs.Layers.Specific)));
            ret.Textures = new MaskItem<Exception, IEnumerable<Exception>>(this.Textures.Overall.Combine(rhs.Textures.Overall), new List<Exception>(this.Textures.Specific.And(rhs.Textures.Specific)));
            return ret;
        }
        public static Landscape_ErrorMask Combine(Landscape_ErrorMask lhs, Landscape_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Landscape_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Landscape_ErrorMask();
        }
        #endregion

    }
    public class Landscape_CopyMask : Placed_CopyMask
    {
        #region Members
        public bool Unknown;
        public bool VertexNormals;
        public bool VertexHeightMap;
        public bool VertexColors;
        public MaskItem<CopyOption, BaseLayer_CopyMask> Layers;
        public CopyOption Textures;
        #endregion

    }
    #endregion





    #endregion

}
