/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LeveledCreatureEntry : ILeveledCreatureEntry, ILoquiObjectSetter, IEquatable<LeveledCreatureEntry>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledCreatureEntry_Registration.Instance;
        public static LeveledCreatureEntry_Registration Registration => LeveledCreatureEntry_Registration.Instance;

        #region Ctor
        public LeveledCreatureEntry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Level
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Int16> _Level = NotifyingItem.Factory<Int16>();
        public INotifyingItem<Int16> Level_Property => _Level;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int16 Level
        {
            get => this._Level.Item;
            set => this._Level.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int16> ILeveledCreatureEntry.Level_Property => this.Level_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int16> ILeveledCreatureEntryGetter.Level_Property => this.Level_Property;
        #endregion
        #region Fluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Byte[]> _Fluff = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[2]);
        public INotifyingItem<Byte[]> Fluff_Property => _Fluff;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Fluff
        {
            get => this._Fluff.Item;
            set => this._Fluff.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> ILeveledCreatureEntry.Fluff_Property => this.Fluff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> ILeveledCreatureEntryGetter.Fluff_Property => this.Fluff_Property;
        #endregion
        #region Reference
        public FormIDLink<NPCSpawn> Reference_Property { get; } = new FormIDLink<NPCSpawn>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public NPCSpawn Reference { get => Reference_Property.Item; set => Reference_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<NPCSpawn> ILeveledCreatureEntryGetter.Reference_Property => this.Reference_Property;
        #endregion
        #region Count
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Int16> _Count = NotifyingItem.Factory<Int16>();
        public INotifyingItem<Int16> Count_Property => _Count;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int16 Count
        {
            get => this._Count.Item;
            set => this._Count.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int16> ILeveledCreatureEntry.Count_Property => this.Count_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int16> ILeveledCreatureEntryGetter.Count_Property => this.Count_Property;
        #endregion
        #region Fluff2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Byte[]> _Fluff2 = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[2]);
        public INotifyingItem<Byte[]> Fluff2_Property => _Fluff2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Fluff2
        {
            get => this._Fluff2.Item;
            set => this._Fluff2.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> ILeveledCreatureEntry.Fluff2_Property => this.Fluff2_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> ILeveledCreatureEntryGetter.Fluff2_Property => this.Fluff2_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => LeveledCreatureEntryCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => LeveledCreatureEntryCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => LeveledCreatureEntryCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            LeveledCreatureEntryCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return LeveledCreatureEntryCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            LeveledCreatureEntry_Mask<bool> printMask = null)
        {
            return LeveledCreatureEntryCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            LeveledCreatureEntryCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public LeveledCreatureEntry_Mask<bool> GetHasBeenSetMask()
        {
            return LeveledCreatureEntryCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledCreatureEntry rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledCreatureEntry rhs)
        {
            if (rhs == null) return false;
            if (Level != rhs.Level) return false;
            if (!Fluff.EqualsFast(rhs.Fluff)) return false;
            if (Reference != rhs.Reference) return false;
            if (Count != rhs.Count) return false;
            if (!Fluff2.EqualsFast(rhs.Fluff2)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Level).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Reference).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Count).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff2).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static LeveledCreatureEntry Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static LeveledCreatureEntry Create_XML(
            XElement root,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static LeveledCreatureEntry Create_XML(
            XElement root,
            bool doMasks,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (LeveledCreatureEntry Object, LeveledCreatureEntry_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            LeveledCreatureEntry_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledCreatureEntry_ErrorMask()) : default(Func<LeveledCreatureEntry_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static LeveledCreatureEntry Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static LeveledCreatureEntry Create_XML(
            string path,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static LeveledCreatureEntry Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static LeveledCreatureEntry Create_XML(
            Stream stream,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LeveledCreatureEntry, LeveledCreatureEntry_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out LeveledCreatureEntry_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LeveledCreatureEntry, LeveledCreatureEntry_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out LeveledCreatureEntry_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out LeveledCreatureEntry_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out LeveledCreatureEntry_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (LeveledCreatureEntry_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out LeveledCreatureEntry_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out LeveledCreatureEntry_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            LeveledCreatureEntryCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static LeveledCreatureEntry Create_XML_Internal(
            XElement root,
            Func<LeveledCreatureEntry_ErrorMask> errorMask)
        {
            var ret = new LeveledCreatureEntry();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            LeveledCreatureEntry item,
            XElement root,
            string name,
            Func<LeveledCreatureEntry_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Level":
                    item._Level.SetIfSucceeded(Int16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Level,
                        errorMask: errorMask));
                    break;
                case "Fluff":
                    item._Fluff.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Fluff,
                        errorMask: errorMask));
                    break;
                case "Reference":
                    item.Reference_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Reference,
                        errorMask: errorMask));
                    break;
                case "Count":
                    item._Count.SetIfSucceeded(Int16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Count,
                        errorMask: errorMask));
                    break;
                case "Fluff2":
                    item._Fluff2.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Fluff2,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static LeveledCreatureEntry Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static LeveledCreatureEntry Create_Binary(
            MutagenFrame frame,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static LeveledCreatureEntry Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (LeveledCreatureEntry Object, LeveledCreatureEntry_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            LeveledCreatureEntry_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledCreatureEntry_ErrorMask()) : default(Func<LeveledCreatureEntry_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static LeveledCreatureEntry Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LeveledCreatureEntry Create_Binary(
            string path,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static LeveledCreatureEntry Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LeveledCreatureEntry Create_Binary(
            Stream stream,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<LeveledCreatureEntry, LeveledCreatureEntry_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out LeveledCreatureEntry_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<LeveledCreatureEntry, LeveledCreatureEntry_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out LeveledCreatureEntry_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out LeveledCreatureEntry_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            errorMask = (LeveledCreatureEntry_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            LeveledCreatureEntryCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static LeveledCreatureEntry Create_Binary_Internal(
            MutagenFrame frame,
            Func<LeveledCreatureEntry_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new LeveledCreatureEntry();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    LeveledCreatureEntry_Registration.LVLO_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            LeveledCreatureEntry item,
            MutagenFrame frame,
            Func<LeveledCreatureEntry_ErrorMask> errorMask)
        {
            item._Level.SetIfSucceeded(Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Level,
                errorMask: errorMask));
            var FlufftryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.Spawn(new ContentLength(2)),
                fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Fluff,
                errorMask: errorMask);
            item._Fluff.SetIfSucceeded(FlufftryGet);
            item.Reference_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Reference,
                errorMask: errorMask));
            item._Count.SetIfSucceeded(Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Count,
                errorMask: errorMask));
            var Fluff2tryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.Spawn(new ContentLength(2)),
                fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Fluff2,
                errorMask: errorMask);
            item._Fluff2.SetIfSucceeded(Fluff2tryGet);
        }

        #endregion

        public LeveledCreatureEntry Copy(
            LeveledCreatureEntry_CopyMask copyMask = null,
            ILeveledCreatureEntryGetter def = null)
        {
            return LeveledCreatureEntry.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LeveledCreatureEntry Copy(
            ILeveledCreatureEntry item,
            LeveledCreatureEntry_CopyMask copyMask = null,
            ILeveledCreatureEntryGetter def = null)
        {
            LeveledCreatureEntry ret;
            if (item.GetType().Equals(typeof(LeveledCreatureEntry)))
            {
                ret = new LeveledCreatureEntry();
            }
            else
            {
                ret = (LeveledCreatureEntry)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            LeveledCreatureEntry_CopyMask copyMask = null,
            ILeveledCreatureEntryGetter def = null)
            where CopyType : class, ILeveledCreatureEntry
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(LeveledCreatureEntry)))
            {
                ret = new LeveledCreatureEntry() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static LeveledCreatureEntry Copy_ToLoqui(
            ILeveledCreatureEntryGetter item,
            LeveledCreatureEntry_CopyMask copyMask = null,
            ILeveledCreatureEntryGetter def = null)
        {
            LeveledCreatureEntry ret;
            if (item.GetType().Equals(typeof(LeveledCreatureEntry)))
            {
                ret = new LeveledCreatureEntry() as LeveledCreatureEntry;
            }
            else
            {
                ret = (LeveledCreatureEntry)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                    this._Level.Set(
                        (Int16)obj,
                        cmds);
                    break;
                case LeveledCreatureEntry_FieldIndex.Fluff:
                    this._Fluff.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case LeveledCreatureEntry_FieldIndex.Reference:
                    this.Reference_Property.Set(
                        (FormIDLink<NPCSpawn>)obj,
                        cmds);
                    break;
                case LeveledCreatureEntry_FieldIndex.Count:
                    this._Count.Set(
                        (Int16)obj,
                        cmds);
                    break;
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    this._Fluff2.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            LeveledCreatureEntryCommon.Clear(this, cmds);
        }


        public static LeveledCreatureEntry Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LeveledCreatureEntry();
            foreach (var pair in fields)
            {
                CopyInInternal_LeveledCreatureEntry(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_LeveledCreatureEntry(LeveledCreatureEntry obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LeveledCreatureEntry_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                    obj._Level.Set(
                        (Int16)pair.Value,
                        null);
                    break;
                case LeveledCreatureEntry_FieldIndex.Fluff:
                    obj._Fluff.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case LeveledCreatureEntry_FieldIndex.Reference:
                    obj.Reference_Property.Set(
                        (FormIDLink<NPCSpawn>)pair.Value,
                        null);
                    break;
                case LeveledCreatureEntry_FieldIndex.Count:
                    obj._Count.Set(
                        (Int16)pair.Value,
                        null);
                    break;
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    obj._Fluff2.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, LeveledCreatureEntry obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ILeveledCreatureEntry : ILeveledCreatureEntryGetter, ILoquiClass<ILeveledCreatureEntry, ILeveledCreatureEntryGetter>, ILoquiClass<LeveledCreatureEntry, ILeveledCreatureEntryGetter>
    {
        new Int16 Level { get; set; }
        new INotifyingItem<Int16> Level_Property { get; }

        new Byte[] Fluff { get; set; }
        new INotifyingItem<Byte[]> Fluff_Property { get; }

        new NPCSpawn Reference { get; set; }
        new Int16 Count { get; set; }
        new INotifyingItem<Int16> Count_Property { get; }

        new Byte[] Fluff2 { get; set; }
        new INotifyingItem<Byte[]> Fluff2_Property { get; }

    }

    public interface ILeveledCreatureEntryGetter : ILoquiObject
    {
        #region Level
        Int16 Level { get; }
        INotifyingItemGetter<Int16> Level_Property { get; }

        #endregion
        #region Fluff
        Byte[] Fluff { get; }
        INotifyingItemGetter<Byte[]> Fluff_Property { get; }

        #endregion
        #region Reference
        NPCSpawn Reference { get; }
        FormIDLink<NPCSpawn> Reference_Property { get; }

        #endregion
        #region Count
        Int16 Count { get; }
        INotifyingItemGetter<Int16> Count_Property { get; }

        #endregion
        #region Fluff2
        Byte[] Fluff2 { get; }
        INotifyingItemGetter<Byte[]> Fluff2_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LeveledCreatureEntry_FieldIndex
    {
        Level = 0,
        Fluff = 1,
        Reference = 2,
        Count = 3,
        Fluff2 = 4,
    }
    #endregion

    #region Registration
    public class LeveledCreatureEntry_Registration : ILoquiRegistration
    {
        public static readonly LeveledCreatureEntry_Registration Instance = new LeveledCreatureEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 92,
            version: 0);

        public const string GUID = "d73c0730-8b50-4574-9144-4738f8a8f73d";

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(LeveledCreatureEntry_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledCreatureEntry_ErrorMask);

        public static readonly Type ClassType = typeof(LeveledCreatureEntry);

        public static readonly Type GetterType = typeof(ILeveledCreatureEntryGetter);

        public static readonly Type SetterType = typeof(ILeveledCreatureEntry);

        public static readonly Type CommonType = typeof(LeveledCreatureEntryCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LeveledCreatureEntry";

        public const string Name = "LeveledCreatureEntry";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "LEVEL":
                    return (ushort)LeveledCreatureEntry_FieldIndex.Level;
                case "FLUFF":
                    return (ushort)LeveledCreatureEntry_FieldIndex.Fluff;
                case "REFERENCE":
                    return (ushort)LeveledCreatureEntry_FieldIndex.Reference;
                case "COUNT":
                    return (ushort)LeveledCreatureEntry_FieldIndex.Count;
                case "FLUFF2":
                    return (ushort)LeveledCreatureEntry_FieldIndex.Fluff2;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                case LeveledCreatureEntry_FieldIndex.Fluff:
                case LeveledCreatureEntry_FieldIndex.Reference:
                case LeveledCreatureEntry_FieldIndex.Count:
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                case LeveledCreatureEntry_FieldIndex.Fluff:
                case LeveledCreatureEntry_FieldIndex.Reference:
                case LeveledCreatureEntry_FieldIndex.Count:
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                case LeveledCreatureEntry_FieldIndex.Fluff:
                case LeveledCreatureEntry_FieldIndex.Reference:
                case LeveledCreatureEntry_FieldIndex.Count:
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                    return "Level";
                case LeveledCreatureEntry_FieldIndex.Fluff:
                    return "Fluff";
                case LeveledCreatureEntry_FieldIndex.Reference:
                    return "Reference";
                case LeveledCreatureEntry_FieldIndex.Count:
                    return "Count";
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    return "Fluff2";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                case LeveledCreatureEntry_FieldIndex.Fluff:
                case LeveledCreatureEntry_FieldIndex.Reference:
                case LeveledCreatureEntry_FieldIndex.Count:
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                case LeveledCreatureEntry_FieldIndex.Fluff:
                case LeveledCreatureEntry_FieldIndex.Reference:
                case LeveledCreatureEntry_FieldIndex.Count:
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                    return typeof(Int16);
                case LeveledCreatureEntry_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case LeveledCreatureEntry_FieldIndex.Reference:
                    return typeof(FormIDLink<NPCSpawn>);
                case LeveledCreatureEntry_FieldIndex.Count:
                    return typeof(Int16);
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType LVLO_HEADER = new RecordType("LVLO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LVLO_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LeveledCreatureEntryCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ILeveledCreatureEntry item,
            ILeveledCreatureEntryGetter rhs,
            LeveledCreatureEntry_CopyMask copyMask = null,
            ILeveledCreatureEntryGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            LeveledCreatureEntryCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ILeveledCreatureEntry item,
            ILeveledCreatureEntryGetter rhs,
            out LeveledCreatureEntry_ErrorMask errorMask,
            LeveledCreatureEntry_CopyMask copyMask = null,
            ILeveledCreatureEntryGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            LeveledCreatureEntryCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ILeveledCreatureEntry item,
            ILeveledCreatureEntryGetter rhs,
            ILeveledCreatureEntryGetter def,
            bool doMasks,
            out LeveledCreatureEntry_ErrorMask errorMask,
            LeveledCreatureEntry_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            LeveledCreatureEntry_ErrorMask retErrorMask = null;
            Func<LeveledCreatureEntry_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new LeveledCreatureEntry_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ILeveledCreatureEntry item,
            ILeveledCreatureEntryGetter rhs,
            ILeveledCreatureEntryGetter def,
            bool doMasks,
            Func<LeveledCreatureEntry_ErrorMask> errorMask,
            LeveledCreatureEntry_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Level ?? true)
            {
                try
                {
                    item.Level_Property.Set(
                        value: rhs.Level,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledCreatureEntry_FieldIndex.Level, ex);
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                try
                {
                    item.Fluff_Property.Set(
                        value: rhs.Fluff,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledCreatureEntry_FieldIndex.Fluff, ex);
                }
            }
            if (copyMask?.Reference ?? true)
            {
                try
                {
                    item.Reference_Property.Set(
                        value: rhs.Reference,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledCreatureEntry_FieldIndex.Reference, ex);
                }
            }
            if (copyMask?.Count ?? true)
            {
                try
                {
                    item.Count_Property.Set(
                        value: rhs.Count,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledCreatureEntry_FieldIndex.Count, ex);
                }
            }
            if (copyMask?.Fluff2 ?? true)
            {
                try
                {
                    item.Fluff2_Property.Set(
                        value: rhs.Fluff2,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledCreatureEntry_FieldIndex.Fluff2, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ILeveledCreatureEntry obj,
            NotifyingFireParameters cmds = null)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                case LeveledCreatureEntry_FieldIndex.Fluff:
                case LeveledCreatureEntry_FieldIndex.Reference:
                case LeveledCreatureEntry_FieldIndex.Count:
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ILeveledCreatureEntry obj,
            NotifyingUnsetParameters cmds = null)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                    obj.Level = default(Int16);
                    break;
                case LeveledCreatureEntry_FieldIndex.Fluff:
                    obj.Fluff = default(Byte[]);
                    break;
                case LeveledCreatureEntry_FieldIndex.Reference:
                    obj.Reference = default(FormIDLink<NPCSpawn>);
                    break;
                case LeveledCreatureEntry_FieldIndex.Count:
                    obj.Count = default(Int16);
                    break;
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    obj.Fluff2 = default(Byte[]);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ILeveledCreatureEntry obj)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                case LeveledCreatureEntry_FieldIndex.Fluff:
                case LeveledCreatureEntry_FieldIndex.Reference:
                case LeveledCreatureEntry_FieldIndex.Count:
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ILeveledCreatureEntryGetter obj)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                    return obj.Level;
                case LeveledCreatureEntry_FieldIndex.Fluff:
                    return obj.Fluff;
                case LeveledCreatureEntry_FieldIndex.Reference:
                    return obj.Reference;
                case LeveledCreatureEntry_FieldIndex.Count:
                    return obj.Count;
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    return obj.Fluff2;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ILeveledCreatureEntry item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Level = default(Int16);
            item.Fluff = default(Byte[]);
            item.Reference = default(FormIDLink<NPCSpawn>);
            item.Count = default(Int16);
            item.Fluff2 = default(Byte[]);
        }

        public static LeveledCreatureEntry_Mask<bool> GetEqualsMask(
            this ILeveledCreatureEntryGetter item,
            ILeveledCreatureEntryGetter rhs)
        {
            var ret = new LeveledCreatureEntry_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ILeveledCreatureEntryGetter item,
            ILeveledCreatureEntryGetter rhs,
            LeveledCreatureEntry_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Level = item.Level == rhs.Level;
            ret.Fluff = item.Fluff.EqualsFast(rhs.Fluff);
            ret.Reference = item.Reference == rhs.Reference;
            ret.Count = item.Count == rhs.Count;
            ret.Fluff2 = item.Fluff2.EqualsFast(rhs.Fluff2);
        }

        public static string ToString(
            this ILeveledCreatureEntryGetter item,
            string name = null,
            LeveledCreatureEntry_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILeveledCreatureEntryGetter item,
            FileGeneration fg,
            string name = null,
            LeveledCreatureEntry_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LeveledCreatureEntry)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LeveledCreatureEntry)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Level ?? true)
                {
                    fg.AppendLine($"Level => {item.Level}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {item.Reference}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {item.Count}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {item.Fluff2}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILeveledCreatureEntryGetter item,
            LeveledCreatureEntry_Mask<bool?> checkMask)
        {
            return true;
        }

        public static LeveledCreatureEntry_Mask<bool> GetHasBeenSetMask(ILeveledCreatureEntryGetter item)
        {
            var ret = new LeveledCreatureEntry_Mask<bool>();
            ret.Level = true;
            ret.Fluff = true;
            ret.Reference = true;
            ret.Count = true;
            ret.Fluff2 = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ILeveledCreatureEntryGetter item,
            bool doMasks,
            out LeveledCreatureEntry_ErrorMask errorMask,
            string name = null)
        {
            LeveledCreatureEntry_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledCreatureEntry_ErrorMask()) : default(Func<LeveledCreatureEntry_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ILeveledCreatureEntryGetter item,
            Func<LeveledCreatureEntry_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.LeveledCreatureEntry"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.LeveledCreatureEntry");
                    }
                    Int16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Level),
                        item: item.Level_Property,
                        fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Level,
                        errorMask: errorMask);
                    ByteArrayXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Fluff),
                        item: item.Fluff_Property,
                        fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Fluff,
                        errorMask: errorMask);
                    FormIDXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Reference),
                        item: item.Reference?.FormID,
                        fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Reference,
                        errorMask: errorMask);
                    Int16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Count),
                        item: item.Count_Property,
                        fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Count,
                        errorMask: errorMask);
                    ByteArrayXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Fluff2),
                        item: item.Fluff2_Property,
                        fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Fluff2,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            LeveledCreatureEntry item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LeveledCreatureEntry_ErrorMask errorMask)
        {
            LeveledCreatureEntry_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledCreatureEntry_ErrorMask()) : default(Func<LeveledCreatureEntry_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            LeveledCreatureEntry item,
            RecordTypeConverter recordTypeConverter,
            Func<LeveledCreatureEntry_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: LeveledCreatureEntry_Registration.LVLO_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            LeveledCreatureEntry item,
            MutagenWriter writer,
            Func<LeveledCreatureEntry_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Level_Property,
                fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Level,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff_Property,
                fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Fluff,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Reference_Property,
                fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Reference,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Count_Property,
                fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Count,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff2_Property,
                fieldIndex: (int)LeveledCreatureEntry_FieldIndex.Fluff2,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class LeveledCreatureEntry_Mask<T> : IMask<T>, IEquatable<LeveledCreatureEntry_Mask<T>>
    {
        #region Ctors
        public LeveledCreatureEntry_Mask()
        {
        }

        public LeveledCreatureEntry_Mask(T initialValue)
        {
            this.Level = initialValue;
            this.Fluff = initialValue;
            this.Reference = initialValue;
            this.Count = initialValue;
            this.Fluff2 = initialValue;
        }
        #endregion

        #region Members
        public T Level;
        public T Fluff;
        public T Reference;
        public T Count;
        public T Fluff2;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledCreatureEntry_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledCreatureEntry_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Level, rhs.Level)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.Reference, rhs.Reference)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            if (!object.Equals(this.Fluff2, rhs.Fluff2)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Level?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.Reference?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff2?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Level)) return false;
            if (!eval(this.Fluff)) return false;
            if (!eval(this.Reference)) return false;
            if (!eval(this.Count)) return false;
            if (!eval(this.Fluff2)) return false;
            return true;
        }
        #endregion

        #region Translate
        public LeveledCreatureEntry_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LeveledCreatureEntry_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LeveledCreatureEntry_Mask<R> obj, Func<T, R> eval)
        {
            obj.Level = eval(this.Level);
            obj.Fluff = eval(this.Fluff);
            obj.Reference = eval(this.Reference);
            obj.Count = eval(this.Count);
            obj.Fluff2 = eval(this.Fluff2);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LeveledCreatureEntry_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LeveledCreatureEntry_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LeveledCreatureEntry_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Level ?? true)
                {
                    fg.AppendLine($"Level => {Level}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {Reference}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {Count}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {Fluff2}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LeveledCreatureEntry_ErrorMask : IErrorMask, IErrorMask<LeveledCreatureEntry_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Level;
        public Exception Fluff;
        public Exception Reference;
        public Exception Count;
        public Exception Fluff2;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                    this.Level = ex;
                    break;
                case LeveledCreatureEntry_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case LeveledCreatureEntry_FieldIndex.Reference:
                    this.Reference = ex;
                    break;
                case LeveledCreatureEntry_FieldIndex.Count:
                    this.Count = ex;
                    break;
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    this.Fluff2 = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            LeveledCreatureEntry_FieldIndex enu = (LeveledCreatureEntry_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreatureEntry_FieldIndex.Level:
                    this.Level = (Exception)obj;
                    break;
                case LeveledCreatureEntry_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case LeveledCreatureEntry_FieldIndex.Reference:
                    this.Reference = (Exception)obj;
                    break;
                case LeveledCreatureEntry_FieldIndex.Count:
                    this.Count = (Exception)obj;
                    break;
                case LeveledCreatureEntry_FieldIndex.Fluff2:
                    this.Fluff2 = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Level != null) return true;
            if (Fluff != null) return true;
            if (Reference != null) return true;
            if (Count != null) return true;
            if (Fluff2 != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("LeveledCreatureEntry_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Level => {Level}");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"Reference => {Reference}");
            fg.AppendLine($"Count => {Count}");
            fg.AppendLine($"Fluff2 => {Fluff2}");
        }
        #endregion

        #region Combine
        public LeveledCreatureEntry_ErrorMask Combine(LeveledCreatureEntry_ErrorMask rhs)
        {
            var ret = new LeveledCreatureEntry_ErrorMask();
            ret.Level = this.Level.Combine(rhs.Level);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.Reference = this.Reference.Combine(rhs.Reference);
            ret.Count = this.Count.Combine(rhs.Count);
            ret.Fluff2 = this.Fluff2.Combine(rhs.Fluff2);
            return ret;
        }
        public static LeveledCreatureEntry_ErrorMask Combine(LeveledCreatureEntry_ErrorMask lhs, LeveledCreatureEntry_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class LeveledCreatureEntry_CopyMask
    {
        #region Members
        public bool Level;
        public bool Fluff;
        public bool Reference;
        public bool Count;
        public bool Fluff2;
        #endregion

    }
    #endregion




    #endregion

}
