/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LeveledCreature :
        ANpcSpawn,
        ILeveledCreatureInternal,
        ILoquiObjectSetter<LeveledCreature>,
        IEquatable<ILeveledCreatureGetter>
    {
        #region Ctor
        protected LeveledCreature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ChanceNone
        public Byte? ChanceNone { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? ILeveledCreatureGetter.ChanceNone => this.ChanceNone;
        #endregion
        #region Flags
        public LeveledFlag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        LeveledFlag? ILeveledCreatureGetter.Flags => this.Flags;
        #endregion
        #region Entries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<LeveledEntry<ANpcSpawn>> _Entries = new ExtendedList<LeveledEntry<ANpcSpawn>>();
        public IExtendedList<LeveledEntry<ANpcSpawn>> Entries
        {
            get => this._Entries;
            protected set => this._Entries = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILeveledEntryGetter<IANpcSpawnGetter>> ILeveledCreatureGetter.Entries => _Entries;
        #endregion

        #endregion
        #region Script
        public FormLinkNullable<Script> Script { get; set; } = new FormLinkNullable<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormLinkNullable<IScriptGetter> ILeveledCreatureGetter.Script => this.Script.ToGetter<Script, IScriptGetter>();
        #endregion
        #region Template
        public FormLinkNullable<ANpc> Template { get; set; } = new FormLinkNullable<ANpc>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormLinkNullable<IANpcGetter> ILeveledCreatureGetter.Template => this.Template.ToGetter<ANpc, IANpcGetter>();
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LeveledCreatureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILeveledCreatureGetter rhs)) return false;
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILeveledCreatureGetter? obj)
        {
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LeveledCreatureCommon)((ILeveledCreatureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ANpcSpawn.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ChanceNone = initialValue;
                this.Flags = initialValue;
                this.Entries = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LeveledEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LeveledEntry.Mask<TItem>?>>());
                this.Script = initialValue;
                this.Template = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem ChanceNone,
                TItem Flags,
                TItem Entries,
                TItem Script,
                TItem Template)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.ChanceNone = ChanceNone;
                this.Flags = Flags;
                this.Entries = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LeveledEntry.Mask<TItem>?>>?>(Entries, Enumerable.Empty<MaskItemIndexed<TItem, LeveledEntry.Mask<TItem>?>>());
                this.Script = Script;
                this.Template = Template;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ChanceNone;
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LeveledEntry.Mask<TItem>?>>?>? Entries;
            public TItem Script;
            public TItem Template;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ChanceNone, rhs.ChanceNone)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Entries, rhs.Entries)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Template, rhs.Template)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ChanceNone);
                hash.Add(this.Flags);
                hash.Add(this.Entries);
                hash.Add(this.Script);
                hash.Add(this.Template);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ChanceNone)) return false;
                if (!eval(this.Flags)) return false;
                if (this.Entries != null)
                {
                    if (!eval(this.Entries.Overall)) return false;
                    if (this.Entries.Specific != null)
                    {
                        foreach (var item in this.Entries.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Script)) return false;
                if (!eval(this.Template)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ChanceNone)) return true;
                if (eval(this.Flags)) return true;
                if (this.Entries != null)
                {
                    if (eval(this.Entries.Overall)) return true;
                    if (this.Entries.Specific != null)
                    {
                        foreach (var item in this.Entries.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Script)) return true;
                if (eval(this.Template)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LeveledCreature.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ChanceNone = eval(this.ChanceNone);
                obj.Flags = eval(this.Flags);
                if (Entries != null)
                {
                    obj.Entries = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LeveledEntry.Mask<R>?>>?>(eval(this.Entries.Overall), Enumerable.Empty<MaskItemIndexed<R, LeveledEntry.Mask<R>?>>());
                    if (Entries.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LeveledEntry.Mask<R>?>>();
                        obj.Entries.Specific = l;
                        foreach (var item in Entries.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, LeveledEntry.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, LeveledEntry.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Script = eval(this.Script);
                obj.Template = eval(this.Template);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LeveledCreature.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LeveledCreature.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LeveledCreature.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ChanceNone ?? true)
                    {
                        fg.AppendItem(ChanceNone, "ChanceNone");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Entries?.Overall ?? true)
                        && Entries.TryGet(out var EntriesItem))
                    {
                        fg.AppendLine("Entries =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EntriesItem.Overall);
                            if (EntriesItem.Specific != null)
                            {
                                foreach (var subItem in EntriesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.Template ?? true)
                    {
                        fg.AppendItem(Template, "Template");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ANpcSpawn.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ChanceNone;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LeveledEntry.ErrorMask<ANpcSpawn.ErrorMask>?>>?>? Entries;
            public Exception? Script;
            public Exception? Template;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
                switch (enu)
                {
                    case LeveledCreature_FieldIndex.ChanceNone:
                        return ChanceNone;
                    case LeveledCreature_FieldIndex.Flags:
                        return Flags;
                    case LeveledCreature_FieldIndex.Entries:
                        return Entries;
                    case LeveledCreature_FieldIndex.Script:
                        return Script;
                    case LeveledCreature_FieldIndex.Template:
                        return Template;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
                switch (enu)
                {
                    case LeveledCreature_FieldIndex.ChanceNone:
                        this.ChanceNone = ex;
                        break;
                    case LeveledCreature_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case LeveledCreature_FieldIndex.Entries:
                        this.Entries = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LeveledEntry.ErrorMask<ANpcSpawn.ErrorMask>?>>?>(ex, null);
                        break;
                    case LeveledCreature_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case LeveledCreature_FieldIndex.Template:
                        this.Template = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
                switch (enu)
                {
                    case LeveledCreature_FieldIndex.ChanceNone:
                        this.ChanceNone = (Exception?)obj;
                        break;
                    case LeveledCreature_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case LeveledCreature_FieldIndex.Entries:
                        this.Entries = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LeveledEntry.ErrorMask<ANpcSpawn.ErrorMask>?>>?>)obj;
                        break;
                    case LeveledCreature_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case LeveledCreature_FieldIndex.Template:
                        this.Template = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ChanceNone != null) return true;
                if (Flags != null) return true;
                if (Entries != null) return true;
                if (Script != null) return true;
                if (Template != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(ChanceNone, "ChanceNone");
                fg.AppendItem(Flags, "Flags");
                if (Entries.TryGet(out var EntriesItem))
                {
                    fg.AppendLine("Entries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EntriesItem.Overall);
                        if (EntriesItem.Specific != null)
                        {
                            foreach (var subItem in EntriesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Script, "Script");
                fg.AppendItem(Template, "Template");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ChanceNone = this.ChanceNone.Combine(rhs.ChanceNone);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Entries = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LeveledEntry.ErrorMask<ANpcSpawn.ErrorMask>?>>?>(ExceptionExt.Combine(this.Entries?.Overall, rhs.Entries?.Overall), ExceptionExt.Combine(this.Entries?.Specific, rhs.Entries?.Specific));
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Template = this.Template.Combine(rhs.Template);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ANpcSpawn.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ChanceNone;
            public bool Flags;
            public LeveledEntry.TranslationMask<ANpcSpawn.TranslationMask>? Entries;
            public bool Script;
            public bool Template;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ChanceNone = defaultOn;
                this.Flags = defaultOn;
                this.Script = defaultOn;
                this.Template = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ChanceNone, null));
                ret.Add((Flags, null));
                ret.Add((Entries != null || DefaultOn, Entries?.GetCrystal()));
                ret.Add((Script, null));
                ret.Add((Template, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = LeveledCreature_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => LeveledCreatureCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => LeveledCreatureCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LeveledCreatureCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LeveledCreatureCommon.Instance.RemapLinks(this, mapping);
        public LeveledCreature(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public LeveledCreature(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public LeveledCreature(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LeveledCreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledCreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static LeveledCreature CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LeveledCreature();
            ((LeveledCreatureSetterCommon)((ILeveledCreatureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LeveledCreature item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LeveledCreatureSetterCommon)((ILeveledCreatureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LeveledCreature GetNew()
        {
            return new LeveledCreature();
        }

    }
    #endregion

    #region Interface
    public partial interface ILeveledCreature :
        ILeveledCreatureGetter,
        IANpcSpawn,
        ILoquiObjectSetter<ILeveledCreatureInternal>,
        ILinkedFormKeyContainer
    {
        new Byte? ChanceNone { get; set; }
        new LeveledFlag? Flags { get; set; }
        new IExtendedList<LeveledEntry<ANpcSpawn>> Entries { get; }
        new FormLinkNullable<Script> Script { get; set; }
        new FormLinkNullable<ANpc> Template { get; set; }
    }

    public partial interface ILeveledCreatureInternal :
        IANpcSpawnInternal,
        ILeveledCreature,
        ILeveledCreatureGetter
    {
    }

    public partial interface ILeveledCreatureGetter :
        IANpcSpawnGetter,
        ILoquiObject<ILeveledCreatureGetter>,
        ILinkedFormKeyContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => LeveledCreature_Registration.Instance;
        Byte? ChanceNone { get; }
        LeveledFlag? Flags { get; }
        IReadOnlyList<ILeveledEntryGetter<IANpcSpawnGetter>> Entries { get; }
        FormLinkNullable<IScriptGetter> Script { get; }
        FormLinkNullable<IANpcGetter> Template { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LeveledCreatureMixIn
    {
        public static void Clear(this ILeveledCreatureInternal item)
        {
            ((LeveledCreatureSetterCommon)((ILeveledCreatureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LeveledCreature.Mask<bool> GetEqualsMask(
            this ILeveledCreatureGetter item,
            ILeveledCreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILeveledCreatureGetter item,
            string? name = null,
            LeveledCreature.Mask<bool>? printMask = null)
        {
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILeveledCreatureGetter item,
            FileGeneration fg,
            string? name = null,
            LeveledCreature.Mask<bool>? printMask = null)
        {
            ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILeveledCreatureGetter item,
            ILeveledCreatureGetter rhs)
        {
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILeveledCreatureInternal lhs,
            ILeveledCreatureGetter rhs,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LeveledCreature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILeveledCreatureInternal lhs,
            ILeveledCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LeveledCreature DeepCopy(
            this ILeveledCreatureGetter item,
            LeveledCreature.TranslationMask? copyMask = null)
        {
            return ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LeveledCreature DeepCopy(
            this ILeveledCreatureGetter item,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? copyMask = null)
        {
            return ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LeveledCreature DeepCopy(
            this ILeveledCreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILeveledCreatureInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledCreatureSetterCommon)((ILeveledCreatureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LeveledCreature_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        ChanceNone = 5,
        Flags = 6,
        Entries = 7,
        Script = 8,
        Template = 9,
    }
    #endregion

    #region Registration
    public partial class LeveledCreature_Registration : ILoquiRegistration
    {
        public static readonly LeveledCreature_Registration Instance = new LeveledCreature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 93,
            version: 0);

        public const string GUID = "3b7a7716-fb68-4925-94fc-7ec66bea9349";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(LeveledCreature.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledCreature.ErrorMask);

        public static readonly Type ClassType = typeof(LeveledCreature);

        public static readonly Type GetterType = typeof(ILeveledCreatureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILeveledCreature);

        public static readonly Type? InternalSetterType = typeof(ILeveledCreatureInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LeveledCreature";

        public const string Name = "LeveledCreature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CHANCENONE":
                    return (ushort)LeveledCreature_FieldIndex.ChanceNone;
                case "FLAGS":
                    return (ushort)LeveledCreature_FieldIndex.Flags;
                case "ENTRIES":
                    return (ushort)LeveledCreature_FieldIndex.Entries;
                case "SCRIPT":
                    return (ushort)LeveledCreature_FieldIndex.Script;
                case "TEMPLATE":
                    return (ushort)LeveledCreature_FieldIndex.Template;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.Entries:
                    return true;
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return ANpcSpawn_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.Entries:
                    return true;
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return ANpcSpawn_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Entries:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return ANpcSpawn_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return "ChanceNone";
                case LeveledCreature_FieldIndex.Flags:
                    return "Flags";
                case LeveledCreature_FieldIndex.Entries:
                    return "Entries";
                case LeveledCreature_FieldIndex.Script:
                    return "Script";
                case LeveledCreature_FieldIndex.Template:
                    return "Template";
                default:
                    return ANpcSpawn_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Entries:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return ANpcSpawn_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Entries:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return ANpcSpawn_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return typeof(Byte);
                case LeveledCreature_FieldIndex.Flags:
                    return typeof(LeveledFlag);
                case LeveledCreature_FieldIndex.Entries:
                    return typeof(IExtendedList<LeveledEntry<ANpcSpawn>>);
                case LeveledCreature_FieldIndex.Script:
                    return typeof(FormLinkNullable<Script>);
                case LeveledCreature_FieldIndex.Template:
                    return typeof(FormLinkNullable<ANpc>);
                default:
                    return ANpcSpawn_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType TriggeringRecordType = RecordTypes.LVLC;
        public static readonly Type BinaryWriteTranslation = typeof(LeveledCreatureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LeveledCreatureSetterCommon : ANpcSpawnSetterCommon
    {
        public new static readonly LeveledCreatureSetterCommon Instance = new LeveledCreatureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILeveledCreatureInternal item)
        {
            ClearPartial();
            item.ChanceNone = default;
            item.Flags = default;
            item.Entries.Clear();
            item.Script = FormLinkNullable<Script>.Null;
            item.Template = FormLinkNullable<ANpc>.Null;
            base.Clear(item);
        }
        
        public override void Clear(IANpcSpawnInternal item)
        {
            Clear(item: (ILeveledCreatureInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILeveledCreatureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILeveledCreatureInternal)item);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILeveledCreatureInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ILeveledCreatureInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LeveledCreatureBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LeveledCreatureBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IANpcSpawnInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (LeveledCreature)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (LeveledCreature)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (LeveledCreature)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class LeveledCreatureCommon : ANpcSpawnCommon
    {
        public new static readonly LeveledCreatureCommon Instance = new LeveledCreatureCommon();

        public LeveledCreature.Mask<bool> GetEqualsMask(
            ILeveledCreatureGetter item,
            ILeveledCreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LeveledCreature.Mask<bool>(false);
            ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILeveledCreatureGetter item,
            ILeveledCreatureGetter rhs,
            LeveledCreature.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ChanceNone = item.ChanceNone == rhs.ChanceNone;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Entries = item.Entries.CollectionEqualsHelper(
                rhs.Entries,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Script = item.Script.Equals(rhs.Script);
            ret.Template = item.Template.Equals(rhs.Template);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILeveledCreatureGetter item,
            string? name = null,
            LeveledCreature.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILeveledCreatureGetter item,
            FileGeneration fg,
            string? name = null,
            LeveledCreature.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LeveledCreature =>");
            }
            else
            {
                fg.AppendLine($"{name} (LeveledCreature) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILeveledCreatureGetter item,
            FileGeneration fg,
            LeveledCreature.Mask<bool>? printMask = null)
        {
            ANpcSpawnCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.ChanceNone ?? true)
                && item.ChanceNone.TryGet(out var ChanceNoneItem))
            {
                fg.AppendItem(ChanceNoneItem, "ChanceNone");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.Entries?.Overall ?? true)
            {
                fg.AppendLine("Entries =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Entries)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendItem(item.Script.FormKey, "Script");
            }
            if (printMask?.Template ?? true)
            {
                fg.AppendItem(item.Template.FormKey, "Template");
            }
        }
        
        public static LeveledCreature_FieldIndex ConvertFieldIndex(ANpcSpawn_FieldIndex index)
        {
            switch (index)
            {
                case ANpcSpawn_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledCreature_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.FormKey:
                    return (LeveledCreature_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.VersionControl:
                    return (LeveledCreature_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.EditorID:
                    return (LeveledCreature_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.OblivionMajorRecordFlags:
                    return (LeveledCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LeveledCreature_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (LeveledCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (LeveledCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (LeveledCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (LeveledCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LeveledCreature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LeveledCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (LeveledCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LeveledCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILeveledCreatureGetter? lhs,
            ILeveledCreatureGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IANpcSpawnGetter)lhs, (IANpcSpawnGetter)rhs)) return false;
            if (lhs.ChanceNone != rhs.ChanceNone) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Entries.SequenceEqualNullable(rhs.Entries)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.Template.Equals(rhs.Template)) return false;
            return true;
        }
        
        public override bool Equals(
            IANpcSpawnGetter? lhs,
            IANpcSpawnGetter? rhs)
        {
            return Equals(
                lhs: (ILeveledCreatureGetter?)lhs,
                rhs: rhs as ILeveledCreatureGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILeveledCreatureGetter?)lhs,
                rhs: rhs as ILeveledCreatureGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILeveledCreatureGetter?)lhs,
                rhs: rhs as ILeveledCreatureGetter);
        }
        
        public virtual int GetHashCode(ILeveledCreatureGetter item)
        {
            var hash = new HashCode();
            if (item.ChanceNone.TryGet(out var ChanceNoneitem))
            {
                hash.Add(ChanceNoneitem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Entries);
            hash.Add(item.Script);
            hash.Add(item.Template);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IANpcSpawnGetter item)
        {
            return GetHashCode(item: (ILeveledCreatureGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ILeveledCreatureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILeveledCreatureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LeveledCreature.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ILeveledCreatureGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Entries.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.Script.FormKey.TryGet(out var ScriptKey))
            {
                yield return ScriptKey;
            }
            if (obj.Template.FormKey.TryGet(out var TemplateKey))
            {
                yield return TemplateKey;
            }
            yield break;
        }
        
        public void RemapLinks(ILeveledCreatureGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(LeveledCreature obj, LeveledCreature rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new LeveledCreature(getNextFormKey());
            ret.DeepCopyIn((LeveledCreature)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (LeveledCreature)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LeveledCreatureSetterTranslationCommon : ANpcSpawnSetterTranslationCommon
    {
        public new static readonly LeveledCreatureSetterTranslationCommon Instance = new LeveledCreatureSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILeveledCreatureInternal item,
            ILeveledCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILeveledCreature item,
            ILeveledCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IANpcSpawn)item,
                (IANpcSpawnGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.ChanceNone) ?? true))
            {
                item.ChanceNone = rhs.ChanceNone;
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Entries) ?? true))
            {
                errorMask?.PushIndex((int)LeveledCreature_FieldIndex.Entries);
                try
                {
                    item.Entries.SetTo(
                        rhs.Entries
                        .Select(r =>
                        {
                            return r.DeepCopy<ANpcSpawn, IANpcSpawnGetter>(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Script) ?? true))
            {
                item.Script = new FormLinkNullable<Script>(rhs.Script.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Template) ?? true))
            {
                item.Template = new FormLinkNullable<ANpc>(rhs.Template.FormKey);
            }
        }
        
        public override void DeepCopyIn(
            IANpcSpawnInternal item,
            IANpcSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILeveledCreatureInternal)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IANpcSpawn item,
            IANpcSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILeveledCreature)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILeveledCreatureInternal)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILeveledCreature)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILeveledCreatureInternal)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILeveledCreature)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public LeveledCreature DeepCopy(
            ILeveledCreatureGetter item,
            LeveledCreature.TranslationMask? copyMask = null)
        {
            LeveledCreature ret = (LeveledCreature)((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).GetNew();
            ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LeveledCreature DeepCopy(
            ILeveledCreatureGetter item,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LeveledCreature ret = (LeveledCreature)((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).GetNew();
            ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LeveledCreature.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LeveledCreature DeepCopy(
            ILeveledCreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LeveledCreature ret = (LeveledCreature)((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).GetNew();
            ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LeveledCreature
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledCreature_Registration.Instance;
        public new static LeveledCreature_Registration Registration => LeveledCreature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LeveledCreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LeveledCreatureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LeveledCreatureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledCreatureBinaryWriteTranslation :
        ANpcSpawnBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LeveledCreatureBinaryWriteTranslation Instance = new LeveledCreatureBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILeveledCreatureGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ChanceNone,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.LVLD));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<LeveledFlag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.LVLF));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ILeveledEntryGetter<IANpcSpawnGetter>>.Instance.Write(
                writer: writer,
                items: item.Entries,
                transl: (MutagenWriter subWriter, ILeveledEntryGetter<IANpcSpawnGetter> subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((LeveledEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write<IANpcSpawnGetter>(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SCRI));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Template,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM));
        }

        public void Write(
            MutagenWriter writer,
            ILeveledCreatureGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.LVLC),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                writer.MetaData.FormVersion = null;
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IANpcSpawnGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LeveledCreatureBinaryCreateTranslation : ANpcSpawnBinaryCreateTranslation
    {
        public new readonly static LeveledCreatureBinaryCreateTranslation Instance = new LeveledCreatureBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LVLC;
        public static void FillBinaryStructs(
            ILeveledCreatureInternal item,
            MutagenFrame frame)
        {
            ANpcSpawnBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ILeveledCreatureInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.LVLD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ChanceNone = frame.ReadUInt8();
                    return (int)LeveledCreature_FieldIndex.ChanceNone;
                }
                case RecordTypeInts.LVLF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<LeveledFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)LeveledCreature_FieldIndex.Flags;
                }
                case RecordTypeInts.LVLO:
                {
                    item.Entries.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<LeveledEntry<ANpcSpawn>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.LVLO,
                            recordTypeConverter: recordTypeConverter,
                            transl: LeveledEntry<ANpcSpawn>.TryCreateFromBinary));
                    return (int)LeveledCreature_FieldIndex.Entries;
                }
                case RecordTypeInts.SCRI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Script = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)LeveledCreature_FieldIndex.Script;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Template = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)LeveledCreature_FieldIndex.Template;
                }
                default:
                    return ANpcSpawnBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LeveledCreatureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledCreatureBinaryOverlay :
        ANpcSpawnBinaryOverlay,
        ILeveledCreatureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledCreature_Registration.Instance;
        public new static LeveledCreature_Registration Registration => LeveledCreature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LeveledCreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LeveledCreatureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => LeveledCreatureCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => LeveledCreatureCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LeveledCreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledCreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ChanceNone
        private int? _ChanceNoneLocation;
        public Byte? ChanceNone => _ChanceNoneLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ChanceNoneLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public LeveledFlag? Flags => _FlagsLocation.HasValue ? (LeveledFlag)HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(LeveledFlag?);
        #endregion
        public IReadOnlyList<ILeveledEntryGetter<IANpcSpawnGetter>> Entries { get; private set; } = ListExt.Empty<LeveledEntryBinaryOverlay<IANpcSpawnGetter>>();
        #region Script
        private int? _ScriptLocation;
        public FormLinkNullable<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ScriptLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IScriptGetter>.Null;
        #endregion
        #region Template
        private int? _TemplateLocation;
        public FormLinkNullable<IANpcGetter> Template => _TemplateLocation.HasValue ? new FormLinkNullable<IANpcGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TemplateLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IANpcGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LeveledCreatureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LeveledCreatureBinaryOverlay LeveledCreatureFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new LeveledCreatureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LeveledCreatureBinaryOverlay LeveledCreatureFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LeveledCreatureFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.LVLD:
                {
                    _ChanceNoneLocation = (stream.Position - offset);
                    return (int)LeveledCreature_FieldIndex.ChanceNone;
                }
                case RecordTypeInts.LVLF:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)LeveledCreature_FieldIndex.Flags;
                }
                case RecordTypeInts.LVLO:
                {
                    this.Entries = BinaryOverlayList.FactoryByArray<LeveledEntryBinaryOverlay<IANpcSpawnGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => LeveledEntryBinaryOverlay<IANpcSpawnGetter>.LeveledEntryFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)LeveledCreature_FieldIndex.Entries;
                }
                case RecordTypeInts.SCRI:
                {
                    _ScriptLocation = (stream.Position - offset);
                    return (int)LeveledCreature_FieldIndex.Script;
                }
                case RecordTypeInts.TNAM:
                {
                    _TemplateLocation = (stream.Position - offset);
                    return (int)LeveledCreature_FieldIndex.Template;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LeveledCreatureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILeveledCreatureGetter rhs)) return false;
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILeveledCreatureGetter? obj)
        {
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LeveledCreatureCommon)((ILeveledCreatureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

