/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LeveledCreature : 
        NPCSpawn,
        ILeveledCreature,
        ILoquiObject<LeveledCreature>,
        ILoquiObjectSetter,
        IPropertySupporter<Byte>,
        IPropertySupporter<LeveledFlag>,
        IEquatable<LeveledCreature>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledCreature_Registration.Instance;
        public new static LeveledCreature_Registration Registration => LeveledCreature_Registration.Instance;

        #region Ctor
        public LeveledCreature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ChanceNone
        protected Byte _ChanceNone;
        protected PropertyForwarder<LeveledCreature, Byte> _ChanceNoneForwarder;
        public INotifyingSetItem<Byte> ChanceNone_Property => _ChanceNoneForwarder ?? (_ChanceNoneForwarder = new PropertyForwarder<LeveledCreature, Byte>(this, (int)LeveledCreature_FieldIndex.ChanceNone));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte ChanceNone
        {
            get => this._ChanceNone;
            set => this.SetChanceNone(value);
        }
        protected void SetChanceNone(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)LeveledCreature_FieldIndex.ChanceNone];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ChanceNone == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)LeveledCreature_FieldIndex.ChanceNone] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = ChanceNone;
                _ChanceNone = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)LeveledCreature_FieldIndex.ChanceNone,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ChanceNone = item;
            }
        }
        protected void UnsetChanceNone()
        {
            _hasBeenSetTracker[(int)LeveledCreature_FieldIndex.ChanceNone] = false;
            ChanceNone = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte> ILeveledCreature.ChanceNone_Property => this.ChanceNone_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte> ILeveledCreatureGetter.ChanceNone_Property => this.ChanceNone_Property;
        #endregion
        #region Flags
        protected LeveledFlag _Flags;
        protected PropertyForwarder<LeveledCreature, LeveledFlag> _FlagsForwarder;
        public INotifyingSetItem<LeveledFlag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<LeveledCreature, LeveledFlag>(this, (int)LeveledCreature_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LeveledFlag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            LeveledFlag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)LeveledCreature_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)LeveledCreature_FieldIndex.Flags] = hasBeenSet;
            }
            if (_LeveledFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _LeveledFlag_subscriptions.FireSubscriptions(
                    index: (int)LeveledCreature_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)LeveledCreature_FieldIndex.Flags] = false;
            Flags = default(LeveledFlag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<LeveledFlag> ILeveledCreature.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<LeveledFlag> ILeveledCreatureGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Entries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<LeveledEntry<NPCSpawn>> _Entries = new NotifyingList<LeveledEntry<NPCSpawn>>();
        public INotifyingList<LeveledEntry<NPCSpawn>> Entries => _Entries;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<LeveledEntry<NPCSpawn>> EntriesEnumerable
        {
            get => _Entries;
            set => _Entries.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<LeveledEntry<NPCSpawn>> ILeveledCreature.Entries => _Entries;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<LeveledEntry<NPCSpawn>> ILeveledCreatureGetter.Entries => _Entries;
        #endregion

        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> ILeveledCreatureGetter.Script_Property => this.Script_Property;
        #endregion
        #region Template
        public FormIDSetLink<NPCAbstract> Template_Property { get; } = new FormIDSetLink<NPCAbstract>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public NPCAbstract Template { get => Template_Property.Item; set => Template_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<NPCAbstract> ILeveledCreatureGetter.Template_Property => this.Template_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => LeveledCreatureCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => LeveledCreatureCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => LeveledCreatureCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            LeveledCreatureCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<LeveledCreature>.GetEqualsMask(LeveledCreature rhs) => LeveledCreatureCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ILeveledCreatureGetter>.GetEqualsMask(ILeveledCreatureGetter rhs) => LeveledCreatureCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return LeveledCreatureCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            LeveledCreature_Mask<bool> printMask = null)
        {
            return LeveledCreatureCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            LeveledCreatureCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new LeveledCreature_Mask<bool> GetHasBeenSetMask()
        {
            return LeveledCreatureCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledCreature rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledCreature rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (ChanceNone_Property.HasBeenSet != rhs.ChanceNone_Property.HasBeenSet) return false;
            if (ChanceNone_Property.HasBeenSet)
            {
                if (this.ChanceNone != rhs.ChanceNone) return false;
            }
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            if (Entries.HasBeenSet != rhs.Entries.HasBeenSet) return false;
            if (Entries.HasBeenSet)
            {
                if (!this.Entries.SequenceEqual(rhs.Entries)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (Template_Property.HasBeenSet != rhs.Template_Property.HasBeenSet) return false;
            if (Template_Property.HasBeenSet)
            {
                if (!this.Template_Property.Equals(rhs.Template_Property)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (ChanceNone_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ChanceNone).CombineHashCode(ret);
            }
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (Entries.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Entries).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Template_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Template).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static LeveledCreature Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LeveledCreature Create_XML(
            XElement root,
            out LeveledCreature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = LeveledCreature_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static LeveledCreature Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new LeveledCreature();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static LeveledCreature Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static LeveledCreature Create_XML(
            string path,
            out LeveledCreature_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static LeveledCreature Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static LeveledCreature Create_XML(
            Stream stream,
            out LeveledCreature_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LeveledCreature>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out LeveledCreature_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<LeveledCreature>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = LeveledCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out LeveledCreature_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out LeveledCreature_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NPCSpawn_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out LeveledCreature_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out LeveledCreature_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out LeveledCreature_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = LeveledCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out LeveledCreature_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out LeveledCreature_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            LeveledCreatureCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            LeveledCreature item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "ChanceNone":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledCreature_FieldIndex.ChanceNone);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte ChanceNoneParse,
                            errorMask: errorMask))
                        {
                            item.ChanceNone = ChanceNoneParse;
                        }
                        else
                        {
                            item.UnsetChanceNone();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledCreature_FieldIndex.Flags);
                        if (EnumXmlTranslation<LeveledFlag>.Instance.Parse(
                            root: root,
                            item: out LeveledFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Entries":
                    ListXmlTranslation<LeveledEntry<NPCSpawn>>.Instance.ParseInto(
                        root: root,
                        item: item.Entries,
                        fieldIndex: (int)LeveledCreature_FieldIndex.Entries,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<LeveledEntry<NPCSpawn>>.Instance.Parse);
                    break;
                case "Script":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)LeveledCreature_FieldIndex.Script,
                        item: item.Script_Property,
                        errorMask: errorMask);
                    break;
                case "Template":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)LeveledCreature_FieldIndex.Template,
                        item: item.Template_Property,
                        errorMask: errorMask);
                    break;
                default:
                    NPCSpawn.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter Byte
        protected ObjectCentralizationSubscriptions<Byte> _Byte_subscriptions;
        Byte IPropertySupporter<Byte>.Get(int index)
        {
            return GetByte(index: index);
        }

        protected Byte GetByte(int index)
        {
            switch ((LeveledCreature_FieldIndex)index)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return ChanceNone;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        void IPropertySupporter<Byte>.Set(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByte(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByte(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((LeveledCreature_FieldIndex)index)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    SetChanceNone(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        bool IPropertySupporter<Byte>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Byte>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByte(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByte(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((LeveledCreature_FieldIndex)index)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    _hasBeenSetTracker[index] = false;
                    ChanceNone = default(Byte);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Byte_subscriptions == null)
            {
                _Byte_subscriptions = new ObjectCentralizationSubscriptions<Byte>();
            }
            _Byte_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Unsubscribe(
            int index,
            object owner)
        {
            _Byte_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte IPropertySupporter<Byte>.DefaultValue(int index)
        {
            return DefaultValueByte(index: index);
        }

        protected Byte DefaultValueByte(int index)
        {
            switch ((LeveledCreature_FieldIndex)index)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return default(Byte);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        #endregion

        #region IPropertySupporter LeveledFlag
        protected ObjectCentralizationSubscriptions<LeveledFlag> _LeveledFlag_subscriptions;
        LeveledFlag IPropertySupporter<LeveledFlag>.Get(int index)
        {
            return GetLeveledFlag(index: index);
        }

        protected LeveledFlag GetLeveledFlag(int index)
        {
            switch ((LeveledCreature_FieldIndex)index)
            {
                case LeveledCreature_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type LeveledFlag: {index}");
            }
        }

        void IPropertySupporter<LeveledFlag>.Set(
            int index,
            LeveledFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetLeveledFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetLeveledFlag(
            int index,
            LeveledFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((LeveledCreature_FieldIndex)index)
            {
                case LeveledCreature_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type LeveledFlag: {index}");
            }
        }

        bool IPropertySupporter<LeveledFlag>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<LeveledFlag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<LeveledFlag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetLeveledFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetLeveledFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((LeveledCreature_FieldIndex)index)
            {
                case LeveledCreature_FieldIndex.Flags:
                    _hasBeenSetTracker[index] = false;
                    Flags = default(LeveledFlag);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type LeveledFlag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<LeveledFlag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<LeveledFlag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_LeveledFlag_subscriptions == null)
            {
                _LeveledFlag_subscriptions = new ObjectCentralizationSubscriptions<LeveledFlag>();
            }
            _LeveledFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<LeveledFlag>.Unsubscribe(
            int index,
            object owner)
        {
            _LeveledFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<LeveledFlag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        LeveledFlag IPropertySupporter<LeveledFlag>.DefaultValue(int index)
        {
            return DefaultValueLeveledFlag(index: index);
        }

        protected LeveledFlag DefaultValueLeveledFlag(int index)
        {
            switch ((LeveledCreature_FieldIndex)index)
            {
                case LeveledCreature_FieldIndex.Flags:
                    return default(LeveledFlag);
                default:
                    throw new ArgumentException($"Unknown index for field type LeveledFlag: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LeveledCreature_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Entries.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield return Script_Property;
            yield return Template_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static LeveledCreature Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LeveledCreature Create_Binary(
            MutagenFrame frame,
            out LeveledCreature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LeveledCreature_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static LeveledCreature Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<LeveledCreature>(
                record: new LeveledCreature(),
                frame: frame,
                errorMask: errorMask,
                recType: LeveledCreature_Registration.LVLC_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static LeveledCreature Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LeveledCreature Create_Binary(
            string path,
            out LeveledCreature_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static LeveledCreature Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LeveledCreature Create_Binary(
            Stream stream,
            out LeveledCreature_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out LeveledCreature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LeveledCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out LeveledCreature_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out LeveledCreature_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            LeveledCreatureCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            LeveledCreature item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            NPCSpawn.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            LeveledCreature item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "LVLD":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)LeveledCreature_FieldIndex.ChanceNone);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte ChanceNoneParse,
                            errorMask: errorMask))
                        {
                            item.ChanceNone = ChanceNoneParse;
                        }
                        else
                        {
                            item.UnsetChanceNone();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.ChanceNone);
                case "LVLF":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)LeveledCreature_FieldIndex.Flags);
                        if (EnumBinaryTranslation<LeveledFlag>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out LeveledFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Flags);
                case "LVLO":
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<LeveledEntry<NPCSpawn>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LeveledCreature_Registration.LVLO_HEADER,
                        item: item.Entries,
                        fieldIndex: (int)LeveledCreature_FieldIndex.Entries,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<LeveledEntry<NPCSpawn>>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Entries);
                case "SCRI":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)LeveledCreature_FieldIndex.Script,
                        item: item.Script_Property,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Script);
                case "TNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)LeveledCreature_FieldIndex.Template,
                        item: item.Template_Property,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Template);
                default:
                    return NPCSpawn.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public LeveledCreature Copy(
            LeveledCreature_CopyMask copyMask = null,
            ILeveledCreatureGetter def = null)
        {
            return LeveledCreature.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LeveledCreature Copy(
            ILeveledCreature item,
            LeveledCreature_CopyMask copyMask = null,
            ILeveledCreatureGetter def = null)
        {
            LeveledCreature ret;
            if (item.GetType().Equals(typeof(LeveledCreature)))
            {
                ret = new LeveledCreature();
            }
            else
            {
                ret = (LeveledCreature)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static LeveledCreature Copy_ToLoqui(
            ILeveledCreatureGetter item,
            LeveledCreature_CopyMask copyMask = null,
            ILeveledCreatureGetter def = null)
        {
            LeveledCreature ret;
            if (item.GetType().Equals(typeof(LeveledCreature)))
            {
                ret = new LeveledCreature() as LeveledCreature;
            }
            else
            {
                ret = (LeveledCreature)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ILeveledCreatureGetter rhs,
            LeveledCreature_CopyMask copyMask,
            ILeveledCreatureGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ILeveledCreatureGetter rhs,
            out LeveledCreature_ErrorMask errorMask,
            LeveledCreature_CopyMask copyMask = null,
            ILeveledCreatureGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LeveledCreatureCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = LeveledCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ILeveledCreatureGetter rhs,
            ErrorMaskBuilder errorMask,
            LeveledCreature_CopyMask copyMask = null,
            ILeveledCreatureGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            LeveledCreatureCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    this.SetChanceNone(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case LeveledCreature_FieldIndex.Flags:
                    this.SetFlags(
                        (LeveledFlag)obj,
                        cmds: cmds);
                    break;
                case LeveledCreature_FieldIndex.Entries:
                    this._Entries.SetTo((IEnumerable<LeveledEntry<NPCSpawn>>)obj, cmds);
                    break;
                case LeveledCreature_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case LeveledCreature_FieldIndex.Template:
                    this.Template_Property.Set(
                        (FormIDSetLink<NPCAbstract>)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            LeveledCreatureCommon.Clear(this, cmds);
        }


        public new static LeveledCreature Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LeveledCreature();
            foreach (var pair in fields)
            {
                CopyInInternal_LeveledCreature(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_LeveledCreature(LeveledCreature obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LeveledCreature_FieldIndex enu))
            {
                CopyInInternal_NPCSpawn(obj, pair);
            }
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    obj.SetChanceNone(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case LeveledCreature_FieldIndex.Flags:
                    obj.SetFlags(
                        (LeveledFlag)pair.Value,
                        cmds: null);
                    break;
                case LeveledCreature_FieldIndex.Entries:
                    obj._Entries.SetTo((IEnumerable<LeveledEntry<NPCSpawn>>)pair.Value, null);
                    break;
                case LeveledCreature_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case LeveledCreature_FieldIndex.Template:
                    obj.Template_Property.Set(
                        (FormIDSetLink<NPCAbstract>)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, LeveledCreature obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ILeveledCreature : ILeveledCreatureGetter, INPCSpawn, ILoquiClass<ILeveledCreature, ILeveledCreatureGetter>, ILoquiClass<LeveledCreature, ILeveledCreatureGetter>
    {
        new Byte ChanceNone { get; set; }
        new INotifyingSetItem<Byte> ChanceNone_Property { get; }

        new LeveledFlag Flags { get; set; }
        new INotifyingSetItem<LeveledFlag> Flags_Property { get; }

        new INotifyingList<LeveledEntry<NPCSpawn>> Entries { get; }
        new Script Script { get; set; }
        new NPCAbstract Template { get; set; }
    }

    public partial interface ILeveledCreatureGetter : INPCSpawnGetter
    {
        #region ChanceNone
        Byte ChanceNone { get; }
        INotifyingSetItemGetter<Byte> ChanceNone_Property { get; }

        #endregion
        #region Flags
        LeveledFlag Flags { get; }
        INotifyingSetItemGetter<LeveledFlag> Flags_Property { get; }

        #endregion
        #region Entries
        INotifyingListGetter<LeveledEntry<NPCSpawn>> Entries { get; }
        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Template
        NPCAbstract Template { get; }
        FormIDSetLink<NPCAbstract> Template_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LeveledCreature_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        ChanceNone = 5,
        Flags = 6,
        Entries = 7,
        Script = 8,
        Template = 9,
    }
    #endregion

    #region Registration
    public class LeveledCreature_Registration : ILoquiRegistration
    {
        public static readonly LeveledCreature_Registration Instance = new LeveledCreature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 93,
            version: 0);

        public const string GUID = "3b7a7716-fb68-4925-94fc-7ec66bea9349";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(LeveledCreature_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledCreature_ErrorMask);

        public static readonly Type ClassType = typeof(LeveledCreature);

        public static readonly Type GetterType = typeof(ILeveledCreatureGetter);

        public static readonly Type SetterType = typeof(ILeveledCreature);

        public static readonly Type CommonType = typeof(LeveledCreatureCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LeveledCreature";

        public const string Name = "LeveledCreature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CHANCENONE":
                    return (ushort)LeveledCreature_FieldIndex.ChanceNone;
                case "FLAGS":
                    return (ushort)LeveledCreature_FieldIndex.Flags;
                case "ENTRIES":
                    return (ushort)LeveledCreature_FieldIndex.Entries;
                case "SCRIPT":
                    return (ushort)LeveledCreature_FieldIndex.Script;
                case "TEMPLATE":
                    return (ushort)LeveledCreature_FieldIndex.Template;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.Entries:
                    return true;
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return NPCSpawn_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.Entries:
                    return true;
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return NPCSpawn_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Entries:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return NPCSpawn_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return "ChanceNone";
                case LeveledCreature_FieldIndex.Flags:
                    return "Flags";
                case LeveledCreature_FieldIndex.Entries:
                    return "Entries";
                case LeveledCreature_FieldIndex.Script:
                    return "Script";
                case LeveledCreature_FieldIndex.Template:
                    return "Template";
                default:
                    return NPCSpawn_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Entries:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return NPCSpawn_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Entries:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return NPCSpawn_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return typeof(Byte);
                case LeveledCreature_FieldIndex.Flags:
                    return typeof(LeveledFlag);
                case LeveledCreature_FieldIndex.Entries:
                    return typeof(NotifyingList<LeveledEntry<NPCSpawn>>);
                case LeveledCreature_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case LeveledCreature_FieldIndex.Template:
                    return typeof(FormIDSetLink<NPCAbstract>);
                default:
                    return NPCSpawn_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType LVLC_HEADER = new RecordType("LVLC");
        public static readonly RecordType LVLD_HEADER = new RecordType("LVLD");
        public static readonly RecordType LVLF_HEADER = new RecordType("LVLF");
        public static readonly RecordType LVLO_HEADER = new RecordType("LVLO");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LVLC_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LeveledCreatureCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ILeveledCreature item,
            ILeveledCreatureGetter rhs,
            ILeveledCreatureGetter def,
            ErrorMaskBuilder errorMask,
            LeveledCreature_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NPCSpawnCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.ChanceNone ?? true)
            {
                errorMask.PushIndex((int)LeveledCreature_FieldIndex.ChanceNone);
                try
                {
                    item.ChanceNone_Property.SetToWithDefault(
                        rhs: rhs.ChanceNone_Property,
                        def: def?.ChanceNone_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)LeveledCreature_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs: rhs.Flags_Property,
                        def: def?.Flags_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Entries.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)LeveledCreature_FieldIndex.Entries);
                try
                {
                    item.Entries.SetToWithDefault(
                        rhs: rhs.Entries,
                        def: def?.Entries,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Entries.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(LeveledEntry<NPCSpawn>);
                                    return LeveledEntry<NPCSpawn>.Copy(
                                        r,
                                        copyMask?.Entries?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Entries.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask.PushIndex((int)LeveledCreature_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Template ?? true)
            {
                errorMask.PushIndex((int)LeveledCreature_FieldIndex.Template);
                try
                {
                    item.Template_Property.SetToWithDefault(
                        rhs: rhs.Template_Property,
                        def: def?.Template_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ILeveledCreature obj,
            NotifyingFireParameters cmds = null)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    obj.ChanceNone_Property.HasBeenSet = on;
                    break;
                case LeveledCreature_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                case LeveledCreature_FieldIndex.Entries:
                    obj.Entries.HasBeenSet = on;
                    break;
                case LeveledCreature_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case LeveledCreature_FieldIndex.Template:
                    obj.Template_Property.HasBeenSet = on;
                    break;
                default:
                    NPCSpawnCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ILeveledCreature obj,
            NotifyingUnsetParameters cmds = null)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    obj.ChanceNone_Property.Unset(cmds);
                    break;
                case LeveledCreature_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                case LeveledCreature_FieldIndex.Entries:
                    obj.Entries.Unset(cmds);
                    break;
                case LeveledCreature_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case LeveledCreature_FieldIndex.Template:
                    obj.Template_Property.Unset(cmds);
                    break;
                default:
                    NPCSpawnCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ILeveledCreature obj)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return obj.ChanceNone_Property.HasBeenSet;
                case LeveledCreature_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                case LeveledCreature_FieldIndex.Entries:
                    return obj.Entries.HasBeenSet;
                case LeveledCreature_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case LeveledCreature_FieldIndex.Template:
                    return obj.Template_Property.HasBeenSet;
                default:
                    return NPCSpawnCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ILeveledCreatureGetter obj)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return obj.ChanceNone;
                case LeveledCreature_FieldIndex.Flags:
                    return obj.Flags;
                case LeveledCreature_FieldIndex.Entries:
                    return obj.Entries;
                case LeveledCreature_FieldIndex.Script:
                    return obj.Script;
                case LeveledCreature_FieldIndex.Template:
                    return obj.Template;
                default:
                    return NPCSpawnCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ILeveledCreature item,
            NotifyingUnsetParameters cmds = null)
        {
            item.ChanceNone_Property.Unset(cmds.ToUnsetParams());
            item.Flags_Property.Unset(cmds.ToUnsetParams());
            item.Entries.Unset(cmds.ToUnsetParams());
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Template_Property.Unset(cmds.ToUnsetParams());
        }

        public static LeveledCreature_Mask<bool> GetEqualsMask(
            this ILeveledCreatureGetter item,
            ILeveledCreatureGetter rhs)
        {
            var ret = new LeveledCreature_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ILeveledCreatureGetter item,
            ILeveledCreatureGetter rhs,
            LeveledCreature_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.ChanceNone = item.ChanceNone_Property.Equals(rhs.ChanceNone_Property, (l, r) => l == r);
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            if (item.Entries.HasBeenSet == rhs.Entries.HasBeenSet)
            {
                if (item.Entries.HasBeenSet)
                {
                    ret.Entries = new MaskItem<bool, IEnumerable<MaskItem<bool, LeveledEntry_Mask<bool>>>>();
                    ret.Entries.Specific = item.Entries.SelectAgainst<LeveledEntry<NPCSpawn>, MaskItem<bool, LeveledEntry_Mask<bool>>>(rhs.Entries, ((l, r) =>
                    {
                        MaskItem<bool, LeveledEntry_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Entries.Overall);
                    ret.Entries.Overall = ret.Entries.Overall && ret.Entries.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Entries = new MaskItem<bool, IEnumerable<MaskItem<bool, LeveledEntry_Mask<bool>>>>();
                    ret.Entries.Overall = true;
                }
            }
            else
            {
                ret.Entries = new MaskItem<bool, IEnumerable<MaskItem<bool, LeveledEntry_Mask<bool>>>>();
                ret.Entries.Overall = false;
            }
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.Template = item.Template_Property.Equals(rhs.Template_Property, (l, r) => l == r);
            NPCSpawnCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ILeveledCreatureGetter item,
            string name = null,
            LeveledCreature_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILeveledCreatureGetter item,
            FileGeneration fg,
            string name = null,
            LeveledCreature_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LeveledCreature)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LeveledCreature)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ChanceNone ?? true)
                {
                    fg.AppendLine($"ChanceNone => {item.ChanceNone}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Entries?.Overall ?? true)
                {
                    fg.AppendLine("Entries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Entries)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.Template ?? true)
                {
                    fg.AppendLine($"Template => {item.Template_Property}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILeveledCreatureGetter item,
            LeveledCreature_Mask<bool?> checkMask)
        {
            if (checkMask.ChanceNone.HasValue && checkMask.ChanceNone.Value != item.ChanceNone_Property.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            if (checkMask.Entries.Overall.HasValue && checkMask.Entries.Overall.Value != item.Entries.HasBeenSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Template.HasValue && checkMask.Template.Value != item.Template_Property.HasBeenSet) return false;
            return true;
        }

        public static LeveledCreature_Mask<bool> GetHasBeenSetMask(ILeveledCreatureGetter item)
        {
            var ret = new LeveledCreature_Mask<bool>();
            ret.ChanceNone = item.ChanceNone_Property.HasBeenSet;
            ret.Flags = item.Flags_Property.HasBeenSet;
            ret.Entries = new MaskItem<bool, IEnumerable<MaskItem<bool, LeveledEntry_Mask<bool>>>>(item.Entries.HasBeenSet, item.Entries.Select((i) => new MaskItem<bool, LeveledEntry_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Template = item.Template_Property.HasBeenSet;
            return ret;
        }

        public static LeveledCreature_FieldIndex? ConvertFieldIndex(NPCSpawn_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static LeveledCreature_FieldIndex ConvertFieldIndex(NPCSpawn_FieldIndex index)
        {
            switch (index)
            {
                case NPCSpawn_FieldIndex.MajorRecordFlags:
                    return (LeveledCreature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.FormID:
                    return (LeveledCreature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.Version:
                    return (LeveledCreature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.EditorID:
                    return (LeveledCreature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.RecordType:
                    return (LeveledCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static LeveledCreature_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static LeveledCreature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (LeveledCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (LeveledCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LeveledCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LeveledCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (LeveledCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ILeveledCreatureGetter item,
            bool doMasks,
            out LeveledCreature_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = LeveledCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            ILeveledCreatureGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LeveledCreature");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LeveledCreature");
            }
            if (item.ChanceNone_Property.HasBeenSet)
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ChanceNone),
                    item: item.ChanceNone_Property,
                    fieldIndex: (int)LeveledCreature_FieldIndex.ChanceNone,
                    errorMask: errorMask);
            }
            if (item.Flags_Property.HasBeenSet)
            {
                EnumXmlTranslation<LeveledFlag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags_Property,
                    fieldIndex: (int)LeveledCreature_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Entries.HasBeenSet)
            {
                ListXmlTranslation<LeveledEntry<NPCSpawn>>.Instance.Write(
                    node: elem,
                    name: nameof(item.Entries),
                    item: item.Entries,
                    fieldIndex: (int)LeveledCreature_FieldIndex.Entries,
                    errorMask: errorMask,
                    transl: (XElement subNode, LeveledEntry<NPCSpawn> subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<LeveledEntry<NPCSpawn>>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Script_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Script),
                    item: item.Script?.FormID,
                    fieldIndex: (int)LeveledCreature_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Template_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Template),
                    item: item.Template?.FormID,
                    fieldIndex: (int)LeveledCreature_FieldIndex.Template,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            LeveledCreature item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LeveledCreature_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = LeveledCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            LeveledCreature item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LeveledCreature_Registration.LVLC_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            LeveledCreature item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ChanceNone_Property,
                fieldIndex: (int)LeveledCreature_FieldIndex.ChanceNone,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(LeveledCreature_Registration.LVLD_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<LeveledFlag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: 1,
                fieldIndex: (int)LeveledCreature_FieldIndex.Flags,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(LeveledCreature_Registration.LVLF_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<LeveledEntry<NPCSpawn>>.Instance.Write(
                writer: writer,
                items: item.Entries,
                fieldIndex: (int)LeveledCreature_FieldIndex.Entries,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<LeveledEntry<NPCSpawn>>.Instance.Write);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)LeveledCreature_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(LeveledCreature_Registration.SCRI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Template_Property,
                fieldIndex: (int)LeveledCreature_FieldIndex.Template,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(LeveledCreature_Registration.TNAM_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class LeveledCreature_Mask<T> : NPCSpawn_Mask<T>, IMask<T>, IEquatable<LeveledCreature_Mask<T>>
    {
        #region Ctors
        public LeveledCreature_Mask()
        {
        }

        public LeveledCreature_Mask(T initialValue)
        {
            this.ChanceNone = initialValue;
            this.Flags = initialValue;
            this.Entries = new MaskItem<T, IEnumerable<MaskItem<T, LeveledEntry_Mask<T>>>>(initialValue, null);
            this.Script = initialValue;
            this.Template = initialValue;
        }
        #endregion

        #region Members
        public T ChanceNone;
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItem<T, LeveledEntry_Mask<T>>>> Entries;
        public T Script;
        public T Template;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledCreature_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledCreature_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.ChanceNone, rhs.ChanceNone)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Entries, rhs.Entries)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Template, rhs.Template)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ChanceNone?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Entries?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Template?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.ChanceNone)) return false;
            if (!eval(this.Flags)) return false;
            if (this.Entries != null)
            {
                if (!eval(this.Entries.Overall)) return false;
                if (this.Entries.Specific != null)
                {
                    foreach (var item in this.Entries.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Script)) return false;
            if (!eval(this.Template)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new LeveledCreature_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LeveledCreature_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LeveledCreature_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.ChanceNone = eval(this.ChanceNone);
            obj.Flags = eval(this.Flags);
            if (Entries != null)
            {
                obj.Entries = new MaskItem<R, IEnumerable<MaskItem<R, LeveledEntry_Mask<R>>>>();
                obj.Entries.Overall = eval(this.Entries.Overall);
                if (Entries.Specific != null)
                {
                    List<MaskItem<R, LeveledEntry_Mask<R>>> l = new List<MaskItem<R, LeveledEntry_Mask<R>>>();
                    obj.Entries.Specific = l;
                    foreach (var item in Entries.Specific)
                    {
                        MaskItem<R, LeveledEntry_Mask<R>> mask = default(MaskItem<R, LeveledEntry_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, LeveledEntry_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Script = eval(this.Script);
            obj.Template = eval(this.Template);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Entries.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LeveledCreature_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LeveledCreature_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LeveledCreature_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ChanceNone ?? true)
                {
                    fg.AppendLine($"ChanceNone => {ChanceNone}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Entries?.Overall ?? true)
                {
                    fg.AppendLine("Entries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Entries.Overall != null)
                        {
                            fg.AppendLine(Entries.Overall.ToString());
                        }
                        if (Entries.Specific != null)
                        {
                            foreach (var subItem in Entries.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Template ?? true)
                {
                    fg.AppendLine($"Template => {Template}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LeveledCreature_ErrorMask : NPCSpawn_ErrorMask, IErrorMask<LeveledCreature_ErrorMask>
    {
        #region Members
        public Exception ChanceNone;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<NPCSpawn_ErrorMask>>>> Entries;
        public Exception Script;
        public Exception Template;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return ChanceNone;
                case LeveledCreature_FieldIndex.Flags:
                    return Flags;
                case LeveledCreature_FieldIndex.Entries:
                    return Entries;
                case LeveledCreature_FieldIndex.Script:
                    return Script;
                case LeveledCreature_FieldIndex.Template:
                    return Template;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    this.ChanceNone = ex;
                    break;
                case LeveledCreature_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case LeveledCreature_FieldIndex.Entries:
                    this.Entries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<NPCSpawn_ErrorMask>>>>(ex, null);
                    break;
                case LeveledCreature_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case LeveledCreature_FieldIndex.Template:
                    this.Template = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    this.ChanceNone = (Exception)obj;
                    break;
                case LeveledCreature_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case LeveledCreature_FieldIndex.Entries:
                    this.Entries = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<NPCSpawn_ErrorMask>>>>)obj;
                    break;
                case LeveledCreature_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case LeveledCreature_FieldIndex.Template:
                    this.Template = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (ChanceNone != null) return true;
            if (Flags != null) return true;
            if (Entries != null) return true;
            if (Script != null) return true;
            if (Template != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("LeveledCreature_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"ChanceNone => {ChanceNone}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Entries =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Entries.Overall != null)
                {
                    fg.AppendLine(Entries.Overall.ToString());
                }
                if (Entries.Specific != null)
                {
                    foreach (var subItem in Entries.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Template => {Template}");
        }
        #endregion

        #region Combine
        public LeveledCreature_ErrorMask Combine(LeveledCreature_ErrorMask rhs)
        {
            var ret = new LeveledCreature_ErrorMask();
            ret.ChanceNone = this.ChanceNone.Combine(rhs.ChanceNone);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Entries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<NPCSpawn_ErrorMask>>>>(this.Entries.Overall.Combine(rhs.Entries.Overall), new List<MaskItem<Exception, LeveledEntry_ErrorMask<NPCSpawn_ErrorMask>>>(this.Entries.Specific.And(rhs.Entries.Specific)));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Template = this.Template.Combine(rhs.Template);
            return ret;
        }
        public static LeveledCreature_ErrorMask Combine(LeveledCreature_ErrorMask lhs, LeveledCreature_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LeveledCreature_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LeveledCreature_ErrorMask();
        }
        #endregion

    }
    public class LeveledCreature_CopyMask : NPCSpawn_CopyMask
    {
        #region Members
        public bool ChanceNone;
        public bool Flags;
        public MaskItem<CopyOption, LeveledEntry_CopyMask<NPCSpawn_CopyMask>> Entries;
        public bool Script;
        public bool Template;
        #endregion

    }
    #endregion





    #endregion

}
