/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LeveledItem : MajorRecord, ILeveledItem, ILoquiObject<LeveledItem>, ILoquiObjectSetter, IEquatable<LeveledItem>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledItem_Registration.Instance;
        public new static LeveledItem_Registration Registration => LeveledItem_Registration.Instance;

        #region Ctor
        public LeveledItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ChanceNone
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Byte> _ChanceNone = NotifyingSetItem.Factory<Byte>(markAsSet: false);
        public INotifyingSetItem<Byte> ChanceNone_Property => _ChanceNone;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte ChanceNone
        {
            get => this._ChanceNone.Item;
            set => this._ChanceNone.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte> ILeveledItem.ChanceNone_Property => this.ChanceNone_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte> ILeveledItemGetter.ChanceNone_Property => this.ChanceNone_Property;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<LeveledFlag> _Flags = NotifyingSetItem.Factory<LeveledFlag>(markAsSet: false);
        public INotifyingSetItem<LeveledFlag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LeveledFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<LeveledFlag> ILeveledItem.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<LeveledFlag> ILeveledItemGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Entries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<LeveledEntry<ItemAbstract>> _Entries = new NotifyingList<LeveledEntry<ItemAbstract>>();
        public INotifyingList<LeveledEntry<ItemAbstract>> Entries => _Entries;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<LeveledEntry<ItemAbstract>> EntriesEnumerable
        {
            get => _Entries;
            set => _Entries.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<LeveledEntry<ItemAbstract>> ILeveledItem.Entries => _Entries;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<LeveledEntry<ItemAbstract>> ILeveledItemGetter.Entries => _Entries;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => LeveledItemCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => LeveledItemCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => LeveledItemCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            LeveledItemCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<LeveledItem>.GetEqualsMask(LeveledItem rhs) => LeveledItemCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ILeveledItemGetter>.GetEqualsMask(ILeveledItemGetter rhs) => LeveledItemCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return LeveledItemCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            LeveledItem_Mask<bool> printMask = null)
        {
            return LeveledItemCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            LeveledItemCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new LeveledItem_Mask<bool> GetHasBeenSetMask()
        {
            return LeveledItemCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledItem rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledItem rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (ChanceNone_Property.HasBeenSet != rhs.ChanceNone_Property.HasBeenSet) return false;
            if (ChanceNone_Property.HasBeenSet)
            {
                if (ChanceNone != rhs.ChanceNone) return false;
            }
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (Flags != rhs.Flags) return false;
            }
            if (Entries.HasBeenSet != rhs.Entries.HasBeenSet) return false;
            if (Entries.HasBeenSet)
            {
                if (!Entries.SequenceEqual(rhs.Entries)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (ChanceNone_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ChanceNone).CombineHashCode(ret);
            }
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (Entries.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Entries).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static LeveledItem Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static LeveledItem Create_XML(
            XElement root,
            out LeveledItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (LeveledItem Object, LeveledItem_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            LeveledItem_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledItem_ErrorMask()) : default(Func<LeveledItem_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static LeveledItem Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static LeveledItem Create_XML(
            string path,
            out LeveledItem_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static LeveledItem Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static LeveledItem Create_XML(
            Stream stream,
            out LeveledItem_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LeveledItem, LeveledItem_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out LeveledItem_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LeveledItem, LeveledItem_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out LeveledItem_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out LeveledItem_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out LeveledItem_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out LeveledItem_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as LeveledItem_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out LeveledItem_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out LeveledItem_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            LeveledItemCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static LeveledItem Create_XML_Internal(
            XElement root,
            Func<LeveledItem_ErrorMask> errorMask)
        {
            var ret = new LeveledItem();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            LeveledItem item,
            XElement root,
            string name,
            Func<LeveledItem_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "ChanceNone":
                    item._ChanceNone.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)LeveledItem_FieldIndex.ChanceNone,
                        errorMask: errorMask));
                    break;
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<LeveledFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)LeveledItem_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Entries":
                    item._Entries.SetIfSucceeded(ListXmlTranslation<LeveledEntry<ItemAbstract>, MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)LeveledItem_FieldIndex.Entries,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>> listSubMask) =>
                        {
                            return LoquiXmlTranslation<LeveledEntry<ItemAbstract>, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LeveledItem_Registration.TRIGGERING_RECORD_TYPE;
        static partial void SpecialParse_Vestigial(
            LeveledItem item,
            MutagenFrame frame,
            Func<LeveledItem_ErrorMask> errorMask);
        static partial void SpecialWrite_Vestigial(
            ILeveledItemGetter item,
            MutagenWriter writer,
            Func<LeveledItem_ErrorMask> errorMask);
        internal static void SpecialWrite_Vestigial_Internal(
            ILeveledItemGetter item,
            MutagenWriter writer,
            Func<LeveledItem_ErrorMask> errorMask)
        {
            SpecialWrite_Vestigial(
                item: item,
                writer: writer,
                errorMask: errorMask);
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Entries.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static LeveledItem Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static LeveledItem Create_Binary(
            MutagenFrame frame,
            out LeveledItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (LeveledItem Object, LeveledItem_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            LeveledItem_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledItem_ErrorMask()) : default(Func<LeveledItem_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static LeveledItem Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LeveledItem Create_Binary(
            string path,
            out LeveledItem_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static LeveledItem Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LeveledItem Create_Binary(
            Stream stream,
            out LeveledItem_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out LeveledItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as LeveledItem_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out LeveledItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out LeveledItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            LeveledItemCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static LeveledItem Create_Binary_Internal(
            MutagenFrame frame,
            Func<LeveledItem_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<LeveledItem, LeveledItem_ErrorMask, LeveledItem_FieldIndex>(
                record: new LeveledItem(),
                frame: frame,
                errorMask: errorMask,
                recType: LeveledItem_Registration.LVLI_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            LeveledItem item,
            MutagenFrame frame,
            Func<LeveledItem_ErrorMask> errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<LeveledItem_FieldIndex?> Fill_Binary_RecordTypes(
            LeveledItem item,
            MutagenFrame frame,
            Func<LeveledItem_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "LVLD":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._ChanceNone.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)LeveledItem_FieldIndex.ChanceNone,
                        errorMask: errorMask));
                    return TryGet<LeveledItem_FieldIndex?>.Succeed(LeveledItem_FieldIndex.ChanceNone);
                case "LVLF":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Flags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<LeveledFlag>.Instance.Parse(
                        frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)LeveledItem_FieldIndex.Flags,
                        errorMask: errorMask));
                    return TryGet<LeveledItem_FieldIndex?>.Succeed(LeveledItem_FieldIndex.Flags);
                case "LVLO":
                    var EntriestryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<LeveledEntry<ItemAbstract>, MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LeveledItem_Registration.LVLO_HEADER,
                        fieldIndex: (int)LeveledItem_FieldIndex.Entries,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<LeveledEntry<ItemAbstract>, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Entries.SetIfSucceeded(EntriestryGet);
                    return TryGet<LeveledItem_FieldIndex?>.Succeed(LeveledItem_FieldIndex.Entries);
                case "DATA":
                    SpecialParse_Vestigial(
                        item: item,
                        frame: frame,
                        errorMask: errorMask);
                    return TryGet<LeveledItem_FieldIndex?>.Succeed(null);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => LeveledItemCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public LeveledItem Copy(
            LeveledItem_CopyMask copyMask = null,
            ILeveledItemGetter def = null)
        {
            return LeveledItem.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LeveledItem Copy(
            ILeveledItem item,
            LeveledItem_CopyMask copyMask = null,
            ILeveledItemGetter def = null)
        {
            LeveledItem ret;
            if (item.GetType().Equals(typeof(LeveledItem)))
            {
                ret = new LeveledItem();
            }
            else
            {
                ret = (LeveledItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static LeveledItem Copy_ToLoqui(
            ILeveledItemGetter item,
            LeveledItem_CopyMask copyMask = null,
            ILeveledItemGetter def = null)
        {
            LeveledItem ret;
            if (item.GetType().Equals(typeof(LeveledItem)))
            {
                ret = new LeveledItem() as LeveledItem;
            }
            else
            {
                ret = (LeveledItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ILeveledItemGetter rhs,
            LeveledItem_CopyMask copyMask,
            ILeveledItemGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ILeveledItemGetter rhs,
            out LeveledItem_ErrorMask errorMask,
            LeveledItem_CopyMask copyMask = null,
            ILeveledItemGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            LeveledItem_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new LeveledItem_ErrorMask();
                }
                return retErrorMask;
            };
            LeveledItemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    this._ChanceNone.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case LeveledItem_FieldIndex.Flags:
                    this._Flags.Set(
                        (LeveledFlag)obj,
                        cmds);
                    break;
                case LeveledItem_FieldIndex.Entries:
                    this._Entries.SetTo((IEnumerable<LeveledEntry<ItemAbstract>>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            LeveledItemCommon.Clear(this, cmds);
        }


        public new static LeveledItem Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LeveledItem();
            foreach (var pair in fields)
            {
                CopyInInternal_LeveledItem(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_LeveledItem(LeveledItem obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LeveledItem_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    obj._ChanceNone.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case LeveledItem_FieldIndex.Flags:
                    obj._Flags.Set(
                        (LeveledFlag)pair.Value,
                        null);
                    break;
                case LeveledItem_FieldIndex.Entries:
                    obj._Entries.SetTo((IEnumerable<LeveledEntry<ItemAbstract>>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, LeveledItem obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ILeveledItem : ILeveledItemGetter, IMajorRecord, ILoquiClass<ILeveledItem, ILeveledItemGetter>, ILoquiClass<LeveledItem, ILeveledItemGetter>
    {
        new Byte ChanceNone { get; set; }
        new INotifyingSetItem<Byte> ChanceNone_Property { get; }

        new LeveledFlag Flags { get; set; }
        new INotifyingSetItem<LeveledFlag> Flags_Property { get; }

        new INotifyingList<LeveledEntry<ItemAbstract>> Entries { get; }
    }

    public partial interface ILeveledItemGetter : IMajorRecordGetter
    {
        #region ChanceNone
        Byte ChanceNone { get; }
        INotifyingSetItemGetter<Byte> ChanceNone_Property { get; }

        #endregion
        #region Flags
        LeveledFlag Flags { get; }
        INotifyingSetItemGetter<LeveledFlag> Flags_Property { get; }

        #endregion
        #region Entries
        INotifyingListGetter<LeveledEntry<ItemAbstract>> Entries { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LeveledItem_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        ChanceNone = 5,
        Flags = 6,
        Entries = 7,
    }
    #endregion

    #region Registration
    public class LeveledItem_Registration : ILoquiRegistration
    {
        public static readonly LeveledItem_Registration Instance = new LeveledItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 101,
            version: 0);

        public const string GUID = "cf615d0b-eccd-4f4d-ac20-6c771930fb98";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(LeveledItem_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledItem_ErrorMask);

        public static readonly Type ClassType = typeof(LeveledItem);

        public static readonly Type GetterType = typeof(ILeveledItemGetter);

        public static readonly Type SetterType = typeof(ILeveledItem);

        public static readonly Type CommonType = typeof(LeveledItemCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LeveledItem";

        public const string Name = "LeveledItem";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CHANCENONE":
                    return (ushort)LeveledItem_FieldIndex.ChanceNone;
                case "FLAGS":
                    return (ushort)LeveledItem_FieldIndex.Flags;
                case "ENTRIES":
                    return (ushort)LeveledItem_FieldIndex.Entries;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.Entries:
                    return true;
                case LeveledItem_FieldIndex.ChanceNone:
                case LeveledItem_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.Entries:
                    return true;
                case LeveledItem_FieldIndex.ChanceNone:
                case LeveledItem_FieldIndex.Flags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                case LeveledItem_FieldIndex.Flags:
                case LeveledItem_FieldIndex.Entries:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    return "ChanceNone";
                case LeveledItem_FieldIndex.Flags:
                    return "Flags";
                case LeveledItem_FieldIndex.Entries:
                    return "Entries";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                case LeveledItem_FieldIndex.Flags:
                case LeveledItem_FieldIndex.Entries:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                case LeveledItem_FieldIndex.Flags:
                case LeveledItem_FieldIndex.Entries:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    return typeof(Byte);
                case LeveledItem_FieldIndex.Flags:
                    return typeof(LeveledFlag);
                case LeveledItem_FieldIndex.Entries:
                    return typeof(NotifyingList<LeveledEntry<ItemAbstract>>);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType LVLI_HEADER = new RecordType("LVLI");
        public static readonly RecordType LVLD_HEADER = new RecordType("LVLD");
        public static readonly RecordType LVLF_HEADER = new RecordType("LVLF");
        public static readonly RecordType LVLO_HEADER = new RecordType("LVLO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LVLI_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LeveledItemCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ILeveledItem item,
            ILeveledItemGetter rhs,
            ILeveledItemGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            LeveledItem_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.ChanceNone ?? true)
            {
                try
                {
                    item.ChanceNone_Property.SetToWithDefault(
                        rhs: rhs.ChanceNone_Property,
                        def: def?.ChanceNone_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledItem_FieldIndex.ChanceNone, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs: rhs.Flags_Property,
                        def: def?.Flags_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledItem_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.Entries.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Entries.SetToWithDefault(
                        rhs: rhs.Entries,
                        def: def?.Entries,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Entries.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(LeveledEntry<ItemAbstract>);
                                    return LeveledEntry<ItemAbstract>.Copy(
                                        r,
                                        copyMask?.Entries?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Entries.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LeveledItem_FieldIndex.Entries, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ILeveledItem obj,
            NotifyingFireParameters cmds = null)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    obj.ChanceNone_Property.HasBeenSet = on;
                    break;
                case LeveledItem_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                case LeveledItem_FieldIndex.Entries:
                    obj.Entries.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ILeveledItem obj,
            NotifyingUnsetParameters cmds = null)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    obj.ChanceNone_Property.Unset(cmds);
                    break;
                case LeveledItem_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                case LeveledItem_FieldIndex.Entries:
                    obj.Entries.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ILeveledItem obj)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    return obj.ChanceNone_Property.HasBeenSet;
                case LeveledItem_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                case LeveledItem_FieldIndex.Entries:
                    return obj.Entries.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ILeveledItemGetter obj)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    return obj.ChanceNone;
                case LeveledItem_FieldIndex.Flags:
                    return obj.Flags;
                case LeveledItem_FieldIndex.Entries:
                    return obj.Entries;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ILeveledItem item,
            NotifyingUnsetParameters cmds = null)
        {
            item.ChanceNone_Property.Unset(cmds.ToUnsetParams());
            item.Flags_Property.Unset(cmds.ToUnsetParams());
            item.Entries.Unset(cmds.ToUnsetParams());
        }

        public static LeveledItem_Mask<bool> GetEqualsMask(
            this ILeveledItemGetter item,
            ILeveledItemGetter rhs)
        {
            var ret = new LeveledItem_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ILeveledItemGetter item,
            ILeveledItemGetter rhs,
            LeveledItem_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.ChanceNone = item.ChanceNone_Property.Equals(rhs.ChanceNone_Property, (l, r) => l == r);
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            if (item.Entries.HasBeenSet == rhs.Entries.HasBeenSet)
            {
                if (item.Entries.HasBeenSet)
                {
                    ret.Entries = new MaskItem<bool, IEnumerable<MaskItem<bool, LeveledEntry_Mask<bool>>>>();
                    ret.Entries.Specific = item.Entries.SelectAgainst<LeveledEntry<ItemAbstract>, MaskItem<bool, LeveledEntry_Mask<bool>>>(rhs.Entries, ((l, r) =>
                    {
                        MaskItem<bool, LeveledEntry_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Entries.Overall);
                    ret.Entries.Overall = ret.Entries.Overall && ret.Entries.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Entries = new MaskItem<bool, IEnumerable<MaskItem<bool, LeveledEntry_Mask<bool>>>>();
                    ret.Entries.Overall = true;
                }
            }
            else
            {
                ret.Entries = new MaskItem<bool, IEnumerable<MaskItem<bool, LeveledEntry_Mask<bool>>>>();
                ret.Entries.Overall = false;
            }
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ILeveledItemGetter item,
            string name = null,
            LeveledItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILeveledItemGetter item,
            FileGeneration fg,
            string name = null,
            LeveledItem_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LeveledItem)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LeveledItem)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ChanceNone ?? true)
                {
                    fg.AppendLine($"ChanceNone => {item.ChanceNone}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Entries?.Overall ?? true)
                {
                    fg.AppendLine("Entries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Entries)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILeveledItemGetter item,
            LeveledItem_Mask<bool?> checkMask)
        {
            if (checkMask.ChanceNone.HasValue && checkMask.ChanceNone.Value != item.ChanceNone_Property.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            if (checkMask.Entries.Overall.HasValue && checkMask.Entries.Overall.Value != item.Entries.HasBeenSet) return false;
            return true;
        }

        public static LeveledItem_Mask<bool> GetHasBeenSetMask(ILeveledItemGetter item)
        {
            var ret = new LeveledItem_Mask<bool>();
            ret.ChanceNone = item.ChanceNone_Property.HasBeenSet;
            ret.Flags = item.Flags_Property.HasBeenSet;
            ret.Entries = new MaskItem<bool, IEnumerable<MaskItem<bool, LeveledEntry_Mask<bool>>>>(item.Entries.HasBeenSet, item.Entries.Select((i) => new MaskItem<bool, LeveledEntry_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static LeveledItem_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static LeveledItem_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (LeveledItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (LeveledItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LeveledItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LeveledItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (LeveledItem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ILeveledItemGetter item,
            bool doMasks,
            out LeveledItem_ErrorMask errorMask,
            string name = null)
        {
            LeveledItem_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledItem_ErrorMask()) : default(Func<LeveledItem_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            ILeveledItemGetter item,
            Func<LeveledItem_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LeveledItem");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LeveledItem");
                }
                if (item.ChanceNone_Property.HasBeenSet)
                {
                    ByteXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.ChanceNone),
                        item: item.ChanceNone_Property,
                        fieldIndex: (int)LeveledItem_FieldIndex.ChanceNone,
                        errorMask: errorMask);
                }
                if (item.Flags_Property.HasBeenSet)
                {
                    EnumXmlTranslation<LeveledFlag>.Instance.Write(
                        node: elem,
                        name: nameof(item.Flags),
                        item: item.Flags_Property,
                        fieldIndex: (int)LeveledItem_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if (item.Entries.HasBeenSet)
                {
                    ListXmlTranslation<LeveledEntry<ItemAbstract>, MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>>.Instance.Write(
                        node: elem,
                        name: nameof(item.Entries),
                        item: item.Entries,
                        fieldIndex: (int)LeveledItem_FieldIndex.Entries,
                        errorMask: errorMask,
                        transl: (XElement subNode, LeveledEntry<ItemAbstract> subItem, bool listDoMasks, out MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>> listSubMask) =>
                        {
                            LoquiXmlTranslation<LeveledEntry<ItemAbstract>, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>.Instance.Write(
                                node: subNode,
                                item: subItem,
                                name: "Item",
                                doMasks: errorMask != null,
                                errorMask: out listSubMask);
                        }
                        );
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            LeveledItem item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LeveledItem_ErrorMask errorMask)
        {
            LeveledItem_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LeveledItem_ErrorMask()) : default(Func<LeveledItem_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            LeveledItem item,
            RecordTypeConverter recordTypeConverter,
            Func<LeveledItem_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: LeveledItem_Registration.LVLI_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            LeveledItem item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<LeveledItem_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ChanceNone_Property,
                fieldIndex: (int)LeveledItem_FieldIndex.ChanceNone,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(LeveledItem_Registration.LVLD_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<LeveledFlag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: 1,
                fieldIndex: (int)LeveledItem_FieldIndex.Flags,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(LeveledItem_Registration.LVLF_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<LeveledEntry<ItemAbstract>, MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>>.Instance.Write(
                writer: writer,
                item: item.Entries,
                fieldIndex: (int)LeveledItem_FieldIndex.Entries,
                errorMask: errorMask,
                transl: (MutagenWriter subWriter, LeveledEntry<ItemAbstract> subItem, bool listDoMasks, out MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>> listSubMask) =>
                {
                    LoquiBinaryTranslation<LeveledEntry<ItemAbstract>, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            LeveledItem.SpecialWrite_Vestigial_Internal(
                item: item,
                writer: writer,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class LeveledItem_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<LeveledItem_Mask<T>>
    {
        #region Ctors
        public LeveledItem_Mask()
        {
        }

        public LeveledItem_Mask(T initialValue)
        {
            this.ChanceNone = initialValue;
            this.Flags = initialValue;
            this.Entries = new MaskItem<T, IEnumerable<MaskItem<T, LeveledEntry_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T ChanceNone;
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItem<T, LeveledEntry_Mask<T>>>> Entries;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledItem_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledItem_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.ChanceNone, rhs.ChanceNone)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Entries, rhs.Entries)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ChanceNone?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Entries?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.ChanceNone)) return false;
            if (!eval(this.Flags)) return false;
            if (this.Entries != null)
            {
                if (!eval(this.Entries.Overall)) return false;
                if (this.Entries.Specific != null)
                {
                    foreach (var item in this.Entries.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new LeveledItem_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LeveledItem_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LeveledItem_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.ChanceNone = eval(this.ChanceNone);
            obj.Flags = eval(this.Flags);
            if (Entries != null)
            {
                obj.Entries = new MaskItem<R, IEnumerable<MaskItem<R, LeveledEntry_Mask<R>>>>();
                obj.Entries.Overall = eval(this.Entries.Overall);
                if (Entries.Specific != null)
                {
                    List<MaskItem<R, LeveledEntry_Mask<R>>> l = new List<MaskItem<R, LeveledEntry_Mask<R>>>();
                    obj.Entries.Specific = l;
                    foreach (var item in Entries.Specific)
                    {
                        MaskItem<R, LeveledEntry_Mask<R>> mask = default(MaskItem<R, LeveledEntry_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, LeveledEntry_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Entries.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LeveledItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LeveledItem_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LeveledItem_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ChanceNone ?? true)
                {
                    fg.AppendLine($"ChanceNone => {ChanceNone}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Entries?.Overall ?? true)
                {
                    fg.AppendLine("Entries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Entries.Overall != null)
                        {
                            fg.AppendLine(Entries.Overall.ToString());
                        }
                        if (Entries.Specific != null)
                        {
                            foreach (var subItem in Entries.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LeveledItem_ErrorMask : MajorRecord_ErrorMask, IErrorMask<LeveledItem_ErrorMask>
    {
        #region Members
        public Exception ChanceNone;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>>> Entries;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    return ChanceNone;
                case LeveledItem_FieldIndex.Flags:
                    return Flags;
                case LeveledItem_FieldIndex.Entries:
                    return Entries;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    this.ChanceNone = ex;
                    break;
                case LeveledItem_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case LeveledItem_FieldIndex.Entries:
                    this.Entries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            LeveledItem_FieldIndex enu = (LeveledItem_FieldIndex)index;
            switch (enu)
            {
                case LeveledItem_FieldIndex.ChanceNone:
                    this.ChanceNone = (Exception)obj;
                    break;
                case LeveledItem_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case LeveledItem_FieldIndex.Entries:
                    this.Entries = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (ChanceNone != null) return true;
            if (Flags != null) return true;
            if (Entries != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("LeveledItem_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"ChanceNone => {ChanceNone}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Entries =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Entries.Overall != null)
                {
                    fg.AppendLine(Entries.Overall.ToString());
                }
                if (Entries.Specific != null)
                {
                    foreach (var subItem in Entries.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public LeveledItem_ErrorMask Combine(LeveledItem_ErrorMask rhs)
        {
            var ret = new LeveledItem_ErrorMask();
            ret.ChanceNone = this.ChanceNone.Combine(rhs.ChanceNone);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Entries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>>>(this.Entries.Overall.Combine(rhs.Entries.Overall), new List<MaskItem<Exception, LeveledEntry_ErrorMask<ItemAbstract_ErrorMask>>>(this.Entries.Specific.And(rhs.Entries.Specific)));
            return ret;
        }
        public static LeveledItem_ErrorMask Combine(LeveledItem_ErrorMask lhs, LeveledItem_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class LeveledItem_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool ChanceNone;
        public bool Flags;
        public MaskItem<CopyOption, LeveledEntry_CopyMask<ItemAbstract_CopyMask>> Entries;
        #endregion

    }
    #endregion




    #endregion

}
