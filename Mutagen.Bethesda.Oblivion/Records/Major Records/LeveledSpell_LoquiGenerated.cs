/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LeveledSpell :
        SpellAbstract,
        ILeveledSpellInternal,
        ILoquiObjectSetter<LeveledSpell>,
        ILinkSubContainer,
        IEquatable<LeveledSpell>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledSpell_Registration.Instance;
        public new static LeveledSpell_Registration Registration => LeveledSpell_Registration.Instance;
        protected override object CommonInstance => LeveledSpellCommon.Instance;

        #region Ctor
        protected LeveledSpell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ChanceNone
        public bool ChanceNone_IsSet
        {
            get => _hasBeenSetTracker[(int)LeveledSpell_FieldIndex.ChanceNone];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)LeveledSpell_FieldIndex.ChanceNone, nameof(ChanceNone_IsSet));
        }
        bool ILeveledSpellGetter.ChanceNone_IsSet => ChanceNone_IsSet;
        private Byte _ChanceNone;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte ChanceNone
        {
            get => this._ChanceNone;
            set => ChanceNone_Set(value);
        }
        Byte ILeveledSpellGetter.ChanceNone => this.ChanceNone;
        public void ChanceNone_Set(
            Byte value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _ChanceNone, value, _hasBeenSetTracker, markSet, (int)LeveledSpell_FieldIndex.ChanceNone, nameof(ChanceNone), nameof(ChanceNone_IsSet));
        }
        public void ChanceNone_Unset()
        {
            this.ChanceNone_Set(default(Byte), false);
        }
        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)LeveledSpell_FieldIndex.Flags];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)LeveledSpell_FieldIndex.Flags, nameof(Flags_IsSet));
        }
        bool ILeveledSpellGetter.Flags_IsSet => Flags_IsSet;
        private LeveledFlag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LeveledFlag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        LeveledFlag ILeveledSpellGetter.Flags => this.Flags;
        public void Flags_Set(
            LeveledFlag value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Flags, value, _hasBeenSetTracker, markSet, (int)LeveledSpell_FieldIndex.Flags, nameof(Flags), nameof(Flags_IsSet));
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(LeveledFlag), false);
        }
        #endregion
        #region Entries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<LeveledEntry<SpellAbstract>> _Entries = new SourceSetList<LeveledEntry<SpellAbstract>>();
        public ISourceSetList<LeveledEntry<SpellAbstract>> Entries => _Entries;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<LeveledEntry<SpellAbstract>> ILeveledSpell.Entries => _Entries;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<ILeveledEntryGetter<ISpellAbstractInternalGetter>> ILeveledSpellGetter.Entries => _Entries;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILeveledSpellInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            LeveledSpellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledSpell rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledSpell rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (ChanceNone_IsSet != rhs.ChanceNone_IsSet) return false;
            if (ChanceNone_IsSet)
            {
                if (this.ChanceNone != rhs.ChanceNone) return false;
            }
            if (Flags_IsSet != rhs.Flags_IsSet) return false;
            if (Flags_IsSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            if (Entries.HasBeenSet != rhs.Entries.HasBeenSet) return false;
            if (Entries.HasBeenSet)
            {
                if (!this.Entries.SequenceEqual(rhs.Entries)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (ChanceNone_IsSet)
            {
                ret = HashHelper.GetHashCode(ChanceNone).CombineHashCode(ret);
            }
            if (Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (Entries.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Entries).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override IXmlWriteTranslator XmlWriteTranslator => LeveledSpellXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static LeveledSpell Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LeveledSpell_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LeveledSpell Create_Xml(
            XElement node,
            out LeveledSpell_ErrorMask errorMask,
            bool doMasks = true,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LeveledSpell_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LeveledSpell Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new LeveledSpell() : null;
                    break;
                default:
                    break;
            }
            var ret = new LeveledSpell();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LeveledSpellXmlCreateTranslation.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static LeveledSpell Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            LeveledSpell_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LeveledSpell Create_Xml(
            string path,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LeveledSpell Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LeveledSpell Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LeveledSpell_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LeveledSpell Create_Xml(
            Stream stream,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LeveledSpell Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElement_Xml(
            LeveledSpell item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    SpellAbstract.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((LeveledSpell_FieldIndex)index)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                    return _hasBeenSetTracker[index];
                case LeveledSpell_FieldIndex.Entries:
                    return Entries.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LeveledSpell_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Entries.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Entries.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        public LeveledSpell(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public LeveledSpell(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(LeveledSpell obj, LeveledSpell rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new LeveledSpell(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override IBinaryWriteTranslator BinaryWriteTranslator => LeveledSpellBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static LeveledSpell Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LeveledSpell Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out LeveledSpell_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LeveledSpell_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LeveledSpell Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<LeveledSpell>(
                record: new LeveledSpell(),
                frame: frame,
                errorMask: errorMask,
                recType: LeveledSpell_Registration.LVSP_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        #endregion

        protected static void Fill_Binary_Structs(
            LeveledSpell item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            SpellAbstract.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            LeveledSpell item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444C564C: // LVLD
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    item.ChanceNone = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)LeveledSpell_FieldIndex.ChanceNone);
                }
                case 0x464C564C: // LVLF
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (EnumBinaryTranslation<LeveledFlag>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out LeveledFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(LeveledFlag);
                    }
                    return TryGet<int?>.Succeed((int)LeveledSpell_FieldIndex.Flags);
                }
                case 0x4F4C564C: // LVLO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<LeveledEntry<SpellAbstract>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LeveledSpell_Registration.LVLO_HEADER,
                        item: item.Entries,
                        fieldIndex: (int)LeveledSpell_FieldIndex.Entries,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out LeveledEntry<SpellAbstract> listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<LeveledEntry<SpellAbstract>>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)LeveledSpell_FieldIndex.Entries);
                }
                default:
                    return SpellAbstract.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public LeveledSpell Copy(
            LeveledSpell_CopyMask copyMask = null,
            LeveledSpell def = null)
        {
            return LeveledSpell.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LeveledSpell Copy(
            LeveledSpell item,
            LeveledSpell_CopyMask copyMask = null,
            LeveledSpell def = null)
        {
            LeveledSpell ret;
            if (item.GetType().Equals(typeof(LeveledSpell)))
            {
                ret = new LeveledSpell();
            }
            else
            {
                ret = (LeveledSpell)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static LeveledSpell Copy_ToLoqui(
            LeveledSpell item,
            LeveledSpell_CopyMask copyMask = null,
            LeveledSpell def = null)
        {
            LeveledSpell ret;
            if (item.GetType().Equals(typeof(LeveledSpell)))
            {
                ret = new LeveledSpell() as LeveledSpell;
            }
            else
            {
                ret = (LeveledSpell)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            LeveledSpell rhs,
            LeveledSpell_CopyMask copyMask,
            LeveledSpell def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            LeveledSpell rhs,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_CopyMask copyMask = null,
            LeveledSpell def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LeveledSpellCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = LeveledSpell_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            LeveledSpell rhs,
            ErrorMaskBuilder errorMask,
            LeveledSpell_CopyMask copyMask = null,
            LeveledSpell def = null)
        {
            LeveledSpellCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    this.ChanceNone = (Byte)obj;
                    break;
                case LeveledSpell_FieldIndex.Flags:
                    this.Flags = (LeveledFlag)obj;
                    break;
                case LeveledSpell_FieldIndex.Entries:
                    this._Entries.SetTo((IEnumerable<LeveledEntry<SpellAbstract>>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            LeveledSpellCommon.Instance.Clear(this);
        }

        public new static LeveledSpell Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LeveledSpell();
            foreach (var pair in fields)
            {
                CopyInInternal_LeveledSpell(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_LeveledSpell(LeveledSpell obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LeveledSpell_FieldIndex enu))
            {
                CopyInInternal_SpellAbstract(obj, pair);
            }
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    obj.ChanceNone = (Byte)pair.Value;
                    break;
                case LeveledSpell_FieldIndex.Flags:
                    obj.Flags = (LeveledFlag)pair.Value;
                    break;
                case LeveledSpell_FieldIndex.Entries:
                    obj._Entries.SetTo((IEnumerable<LeveledEntry<SpellAbstract>>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ILeveledSpell :
        ILeveledSpellGetter,
        ISpellAbstract,
        ILoquiObjectSetter<ILeveledSpellInternal>
    {
        new Byte ChanceNone { get; set; }
        new bool ChanceNone_IsSet { get; set; }
        void ChanceNone_Set(Byte value, bool hasBeenSet = true);
        void ChanceNone_Unset();

        new LeveledFlag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(LeveledFlag value, bool hasBeenSet = true);
        void Flags_Unset();

        new ISetList<LeveledEntry<SpellAbstract>> Entries { get; }
        void CopyFieldsFrom(
            LeveledSpell rhs,
            ErrorMaskBuilder errorMask = null,
            LeveledSpell_CopyMask copyMask = null,
            LeveledSpell def = null);
    }

    public partial interface ILeveledSpellInternal :
        ISpellAbstractInternal,
        ILeveledSpell,
        ILeveledSpellInternalGetter
    {
    }

    public partial interface ILeveledSpellGetter :
        ISpellAbstractGetter,
        ILoquiObject<ILeveledSpellInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region ChanceNone
        Byte ChanceNone { get; }
        bool ChanceNone_IsSet { get; }

        #endregion
        #region Flags
        LeveledFlag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region Entries
        IReadOnlySetList<ILeveledEntryGetter<ISpellAbstractInternalGetter>> Entries { get; }
        #endregion

    }

    public partial interface ILeveledSpellInternalGetter :
        ISpellAbstractInternalGetter,
        ILeveledSpellGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class LeveledSpellMixIn
    {
        public static void Clear(this ILeveledSpellInternal item)
        {
            ((LeveledSpellCommon)item.CommonInstance).Clear(item: item);
        }

        public static LeveledSpell_Mask<bool> GetEqualsMask(
            this ILeveledSpellInternalGetter item,
            ILeveledSpellInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LeveledSpellCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILeveledSpellInternalGetter item,
            string name = null,
            LeveledSpell_Mask<bool> printMask = null)
        {
            return ((LeveledSpellCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILeveledSpellInternalGetter item,
            FileGeneration fg,
            string name = null,
            LeveledSpell_Mask<bool> printMask = null)
        {
            ((LeveledSpellCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILeveledSpellInternalGetter item,
            LeveledSpell_Mask<bool?> checkMask)
        {
            return ((LeveledSpellCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LeveledSpell_Mask<bool> GetHasBeenSetMask(this ILeveledSpellInternalGetter item)
        {
            var ret = new LeveledSpell_Mask<bool>();
            ((LeveledSpellCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LeveledSpell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        ChanceNone = 5,
        Flags = 6,
        Entries = 7,
    }
    #endregion

    #region Registration
    public class LeveledSpell_Registration : ILoquiRegistration
    {
        public static readonly LeveledSpell_Registration Instance = new LeveledSpell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 164,
            version: 0);

        public const string GUID = "ebf4d53e-7995-458e-b9a8-5521f7d86bd5";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(LeveledSpell_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledSpell_ErrorMask);

        public static readonly Type ClassType = typeof(LeveledSpell);

        public static readonly Type GetterType = typeof(ILeveledSpellGetter);

        public static readonly Type InternalGetterType = typeof(ILeveledSpellInternalGetter);

        public static readonly Type SetterType = typeof(ILeveledSpell);

        public static readonly Type InternalSetterType = typeof(ILeveledSpellInternal);

        public static readonly Type CommonType = typeof(LeveledSpellCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LeveledSpell";

        public const string Name = "LeveledSpell";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CHANCENONE":
                    return (ushort)LeveledSpell_FieldIndex.ChanceNone;
                case "FLAGS":
                    return (ushort)LeveledSpell_FieldIndex.Flags;
                case "ENTRIES":
                    return (ushort)LeveledSpell_FieldIndex.Entries;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.Entries:
                    return true;
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                    return false;
                default:
                    return SpellAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.Entries:
                    return true;
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                    return false;
                default:
                    return SpellAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                case LeveledSpell_FieldIndex.Entries:
                    return false;
                default:
                    return SpellAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    return "ChanceNone";
                case LeveledSpell_FieldIndex.Flags:
                    return "Flags";
                case LeveledSpell_FieldIndex.Entries:
                    return "Entries";
                default:
                    return SpellAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                case LeveledSpell_FieldIndex.Entries:
                    return false;
                default:
                    return SpellAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                case LeveledSpell_FieldIndex.Flags:
                case LeveledSpell_FieldIndex.Entries:
                    return false;
                default:
                    return SpellAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    return typeof(Byte);
                case LeveledSpell_FieldIndex.Flags:
                    return typeof(LeveledFlag);
                case LeveledSpell_FieldIndex.Entries:
                    return typeof(SourceSetList<LeveledEntry<SpellAbstract>>);
                default:
                    return SpellAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlTranslation = typeof(LeveledSpellXmlWriteTranslation);
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType LVLD_HEADER = new RecordType("LVLD");
        public static readonly RecordType LVLF_HEADER = new RecordType("LVLF");
        public static readonly RecordType LVLO_HEADER = new RecordType("LVLO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LVSP_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryTranslation = typeof(LeveledSpellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LeveledSpellCommon : SpellAbstractCommon
    {
        public static readonly LeveledSpellCommon Instance = new LeveledSpellCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            LeveledSpell item,
            LeveledSpell rhs,
            LeveledSpell def,
            ErrorMaskBuilder errorMask,
            LeveledSpell_CopyMask copyMask)
        {
            SpellAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.ChanceNone ?? true)
            {
                errorMask?.PushIndex((int)LeveledSpell_FieldIndex.ChanceNone);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ChanceNone,
                        rhsHasBeenSet: rhs.ChanceNone_IsSet,
                        defItem: def?.ChanceNone ?? default(Byte),
                        defHasBeenSet: def?.ChanceNone_IsSet ?? false,
                        outRhsItem: out var rhsChanceNoneItem,
                        outDefItem: out var defChanceNoneItem))
                    {
                        item.ChanceNone = rhsChanceNoneItem;
                    }
                    else
                    {
                        item.ChanceNone_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)LeveledSpell_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(LeveledFlag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Entries.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)LeveledSpell_FieldIndex.Entries);
                try
                {
                    item.Entries.SetToWithDefault<LeveledEntry<SpellAbstract>, LeveledEntry<SpellAbstract>>(
                        rhs: rhs.Entries,
                        def: def?.Entries,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Entries.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (LeveledEntry<SpellAbstract>)r;
                                case CopyOption.MakeCopy:
                                    return LeveledEntry<SpellAbstract>.Copy(
                                        r,
                                        copyMask?.Entries?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Entries.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(ILeveledSpellInternal item)
        {
            ClearPartial();
            item.ChanceNone_Unset();
            item.Flags_Unset();
            item.Entries.Unset();
            base.Clear(item);
        }

        public override void Clear(ISpellAbstractInternal item)
        {
            Clear(item: (ILeveledSpellInternal)item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILeveledSpellInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILeveledSpellInternal)item);
        }

        public LeveledSpell_Mask<bool> GetEqualsMask(
            ILeveledSpellInternalGetter item,
            ILeveledSpellInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LeveledSpell_Mask<bool>();
            ((LeveledSpellCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            ILeveledSpellInternalGetter item,
            ILeveledSpellInternalGetter rhs,
            LeveledSpell_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ChanceNone = item.ChanceNone_IsSet == rhs.ChanceNone_IsSet && item.ChanceNone == rhs.ChanceNone;
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.Entries = item.Entries.CollectionEqualsHelper(
                rhs.Entries,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            ILeveledSpellInternalGetter item,
            string name = null,
            LeveledSpell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            ILeveledSpellInternalGetter item,
            FileGeneration fg,
            string name = null,
            LeveledSpell_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LeveledSpell =>");
            }
            else
            {
                fg.AppendLine($"{name} (LeveledSpell) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            ILeveledSpellInternalGetter item,
            FileGeneration fg,
            LeveledSpell_Mask<bool> printMask = null)
        {
            SpellAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ChanceNone ?? true)
            {
                fg.AppendLine($"ChanceNone => {item.ChanceNone}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Entries?.Overall ?? true)
            {
                fg.AppendLine("Entries =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Entries)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }

        public bool HasBeenSet(
            ILeveledSpellInternalGetter item,
            LeveledSpell_Mask<bool?> checkMask)
        {
            if (checkMask.ChanceNone.HasValue && checkMask.ChanceNone.Value != item.ChanceNone_IsSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.Entries.Overall.HasValue && checkMask.Entries.Overall.Value != item.Entries.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            ILeveledSpellInternalGetter item,
            LeveledSpell_Mask<bool> mask)
        {
            mask.ChanceNone = item.ChanceNone_IsSet;
            mask.Flags = item.Flags_IsSet;
            mask.Entries = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, LeveledEntry_Mask<bool>>>>(item.Entries.HasBeenSet, item.Entries.WithIndex().Select((i) => new MaskItemIndexed<bool, LeveledEntry_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static LeveledSpell_FieldIndex ConvertFieldIndex(SpellAbstract_FieldIndex index)
        {
            switch (index)
            {
                case SpellAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledSpell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.FormKey:
                    return (LeveledSpell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.Version:
                    return (LeveledSpell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.EditorID:
                    return (LeveledSpell_FieldIndex)((int)index);
                case SpellAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (LeveledSpell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static LeveledSpell_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledSpell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (LeveledSpell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (LeveledSpell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (LeveledSpell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (LeveledSpell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static LeveledSpell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledSpell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LeveledSpell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LeveledSpell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LeveledSpell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class LeveledSpellXmlWriteTranslation :
        SpellAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LeveledSpellXmlWriteTranslation Instance = new LeveledSpellXmlWriteTranslation();

        public static void WriteToNode_Xml(
            ILeveledSpellInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            SpellAbstractXmlWriteTranslation.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.ChanceNone_IsSet
                && (translationMask?.GetShouldTranslate((int)LeveledSpell_FieldIndex.ChanceNone) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ChanceNone),
                    item: item.ChanceNone,
                    fieldIndex: (int)LeveledSpell_FieldIndex.ChanceNone,
                    errorMask: errorMask);
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)LeveledSpell_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<LeveledFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)LeveledSpell_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Entries.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)LeveledSpell_FieldIndex.Entries) ?? true))
            {
                ListXmlTranslation<ILeveledEntryGetter<ISpellAbstractInternalGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Entries),
                    item: item.Entries,
                    fieldIndex: (int)LeveledSpell_FieldIndex.Entries,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LeveledSpell_FieldIndex.Entries),
                    transl: (XElement subNode, ILeveledEntryGetter<ISpellAbstractInternalGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        ((LeveledEntryXmlWriteTranslation<ISpellAbstractInternalGetter>)((IXmlItem)subItem).XmlWriteTranslator).Write(
                            item: subItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ILeveledSpellInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LeveledSpell");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LeveledSpell");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILeveledSpellInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISpellAbstractInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILeveledSpellInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILeveledSpellInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILeveledSpellInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LeveledSpellXmlCreateTranslation : SpellAbstractXmlCreateTranslation
    {
        public new readonly static LeveledSpellXmlCreateTranslation Instance = new LeveledSpellXmlCreateTranslation();

        public static void FillPublic_Xml(
            ILeveledSpellInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LeveledSpellXmlCreateTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            ILeveledSpellInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ChanceNone":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledSpell_FieldIndex.ChanceNone);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ChanceNoneParse,
                            errorMask: errorMask))
                        {
                            item.ChanceNone = ChanceNoneParse;
                        }
                        else
                        {
                            item.ChanceNone = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledSpell_FieldIndex.Flags);
                        if (EnumXmlTranslation<LeveledFlag>.Instance.Parse(
                            node: node,
                            item: out LeveledFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(LeveledFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Entries":
                    try
                    {
                        errorMask?.PushIndex((int)LeveledSpell_FieldIndex.Entries);
                        if (ListXmlTranslation<LeveledEntry<SpellAbstract>>.Instance.Parse(
                            node: node,
                            enumer: out var EntriesItem,
                            transl: LoquiXmlTranslation<LeveledEntry<SpellAbstract>>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Entries.SetTo(EntriesItem);
                        }
                        else
                        {
                            item.Entries.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SpellAbstractXmlCreateTranslation.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class LeveledSpellXmlTranslationMixIn
    {
        public static void Write_Xml(
            this ILeveledSpellInternalGetter item,
            XElement node,
            out LeveledSpell_ErrorMask errorMask,
            bool doMasks = true,
            LeveledSpell_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LeveledSpellXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LeveledSpell_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this ILeveledSpellInternalGetter item,
            string path,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ILeveledSpellInternalGetter item,
            Stream stream,
            out LeveledSpell_ErrorMask errorMask,
            LeveledSpell_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class LeveledSpell_Mask<T> : SpellAbstract_Mask<T>, IMask<T>, IEquatable<LeveledSpell_Mask<T>>
    {
        #region Ctors
        public LeveledSpell_Mask()
        {
        }

        public LeveledSpell_Mask(T initialValue)
        {
            this.ChanceNone = initialValue;
            this.Flags = initialValue;
            this.Entries = new MaskItem<T, IEnumerable<MaskItemIndexed<T, LeveledEntry_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T ChanceNone;
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, LeveledEntry_Mask<T>>>> Entries;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LeveledSpell_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LeveledSpell_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.ChanceNone, rhs.ChanceNone)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Entries, rhs.Entries)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ChanceNone?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Entries?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.ChanceNone)) return false;
            if (!eval(this.Flags)) return false;
            if (this.Entries != null)
            {
                if (!eval(this.Entries.Overall)) return false;
                if (this.Entries.Specific != null)
                {
                    foreach (var item in this.Entries.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new LeveledSpell_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LeveledSpell_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LeveledSpell_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.ChanceNone = eval(this.ChanceNone);
            obj.Flags = eval(this.Flags);
            if (Entries != null)
            {
                obj.Entries = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LeveledEntry_Mask<R>>>>();
                obj.Entries.Overall = eval(this.Entries.Overall);
                if (Entries.Specific != null)
                {
                    List<MaskItemIndexed<R, LeveledEntry_Mask<R>>> l = new List<MaskItemIndexed<R, LeveledEntry_Mask<R>>>();
                    obj.Entries.Specific = l;
                    foreach (var item in Entries.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, LeveledEntry_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, LeveledEntry_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Entries.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LeveledSpell_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LeveledSpell_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LeveledSpell_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ChanceNone ?? true)
                {
                    fg.AppendLine($"ChanceNone => {ChanceNone}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Entries?.Overall ?? true)
                {
                    fg.AppendLine("Entries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Entries.Overall != null)
                        {
                            fg.AppendLine(Entries.Overall.ToString());
                        }
                        if (Entries.Specific != null)
                        {
                            foreach (var subItem in Entries.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LeveledSpell_ErrorMask : SpellAbstract_ErrorMask, IErrorMask<LeveledSpell_ErrorMask>
    {
        #region Members
        public Exception ChanceNone;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<SpellAbstract_ErrorMask>>>> Entries;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    return ChanceNone;
                case LeveledSpell_FieldIndex.Flags:
                    return Flags;
                case LeveledSpell_FieldIndex.Entries:
                    return Entries;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    this.ChanceNone = ex;
                    break;
                case LeveledSpell_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case LeveledSpell_FieldIndex.Entries:
                    this.Entries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<SpellAbstract_ErrorMask>>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            LeveledSpell_FieldIndex enu = (LeveledSpell_FieldIndex)index;
            switch (enu)
            {
                case LeveledSpell_FieldIndex.ChanceNone:
                    this.ChanceNone = (Exception)obj;
                    break;
                case LeveledSpell_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case LeveledSpell_FieldIndex.Entries:
                    this.Entries = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<SpellAbstract_ErrorMask>>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (ChanceNone != null) return true;
            if (Flags != null) return true;
            if (Entries != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("LeveledSpell_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"ChanceNone => {ChanceNone}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Entries =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Entries.Overall != null)
                {
                    fg.AppendLine(Entries.Overall.ToString());
                }
                if (Entries.Specific != null)
                {
                    foreach (var subItem in Entries.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public LeveledSpell_ErrorMask Combine(LeveledSpell_ErrorMask rhs)
        {
            var ret = new LeveledSpell_ErrorMask();
            ret.ChanceNone = this.ChanceNone.Combine(rhs.ChanceNone);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Entries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LeveledEntry_ErrorMask<SpellAbstract_ErrorMask>>>>(this.Entries.Overall.Combine(rhs.Entries.Overall), new List<MaskItem<Exception, LeveledEntry_ErrorMask<SpellAbstract_ErrorMask>>>(this.Entries.Specific.And(rhs.Entries.Specific)));
            return ret;
        }
        public static LeveledSpell_ErrorMask Combine(LeveledSpell_ErrorMask lhs, LeveledSpell_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LeveledSpell_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LeveledSpell_ErrorMask();
        }
        #endregion

    }
    public class LeveledSpell_CopyMask : SpellAbstract_CopyMask
    {
        public LeveledSpell_CopyMask()
        {
        }

        public LeveledSpell_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.ChanceNone = defaultOn;
            this.Flags = defaultOn;
            this.Entries = new MaskItem<CopyOption, LeveledEntry_CopyMask<SpellAbstract_CopyMask>>(deepCopyOption, default);
        }

        #region Members
        public bool ChanceNone;
        public bool Flags;
        public MaskItem<CopyOption, LeveledEntry_CopyMask<SpellAbstract_CopyMask>> Entries;
        #endregion

    }

    public class LeveledSpell_TranslationMask : SpellAbstract_TranslationMask
    {
        #region Members
        public bool ChanceNone;
        public bool Flags;
        public MaskItem<bool, LeveledEntry_TranslationMask<SpellAbstract_TranslationMask>> Entries;
        #endregion

        #region Ctors
        public LeveledSpell_TranslationMask()
            : base()
        {
        }

        public LeveledSpell_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.ChanceNone = defaultOn;
            this.Flags = defaultOn;
            this.Entries = new MaskItem<bool, LeveledEntry_TranslationMask<SpellAbstract_TranslationMask>>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((ChanceNone, null));
            ret.Add((Flags, null));
            ret.Add((Entries?.Overall ?? true, Entries?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #region Binary Translation
    public partial class LeveledSpellBinaryWriteTranslation :
        SpellAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LeveledSpellBinaryWriteTranslation Instance = new LeveledSpellBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ILeveledSpellInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.ChanceNone_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ChanceNone,
                    header: recordTypeConverter.ConvertToCustom(LeveledSpell_Registration.LVLD_HEADER),
                    nullable: false);
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<LeveledFlag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    header: recordTypeConverter.ConvertToCustom(LeveledSpell_Registration.LVLF_HEADER),
                    nullable: false);
            }
            if (item.Entries.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<ILeveledEntryGetter<ISpellAbstractInternalGetter>>.Instance.Write(
                    writer: writer,
                    items: item.Entries,
                    fieldIndex: (int)LeveledSpell_FieldIndex.Entries,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, ILeveledEntryGetter<ISpellAbstractInternalGetter> subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        ((LeveledEntryBinaryWriteTranslation<SpellAbstract>)((IBinaryItem)subItem).BinaryWriteTranslator).Write(
                            item: subItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            ILeveledSpellInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LeveledSpell_Registration.LVSP_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILeveledSpellInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            ISpellAbstractInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILeveledSpellInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILeveledSpellInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILeveledSpellInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class LeveledSpellBinaryCreateTranslation : SpellAbstractBinaryCreateTranslation
    {
        public new readonly static LeveledSpellBinaryCreateTranslation Instance = new LeveledSpellBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class LeveledSpellBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this ILeveledSpellInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out LeveledSpell_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LeveledSpellBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LeveledSpell_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
