/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LoadScreenLocation :
        LoquiNotifyingObject,
        ILoadScreenLocation,
        ILoquiObjectSetter<LoadScreenLocation>,
        ILinkSubContainer,
        IEquatable<LoadScreenLocation>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreenLocation_Registration.Instance;
        public static LoadScreenLocation_Registration Registration => LoadScreenLocation_Registration.Instance;
        protected object CommonInstance => LoadScreenLocationCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public LoadScreenLocation()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Direct
        public IFormIDLink<Place> Direct_Property { get; } = new FormIDLink<Place>();
        public Place Direct { get => Direct_Property.Item; set => Direct_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLink<Place> ILoadScreenLocation.Direct_Property => this.Direct_Property;
        IPlaceInternalGetter ILoadScreenLocationGetter.Direct => this.Direct_Property.Item;
        IFormIDLinkGetter<Place> ILoadScreenLocationGetter.Direct_Property => this.Direct_Property;
        #endregion
        #region Indirect
        public IFormIDLink<Worldspace> Indirect_Property { get; } = new FormIDLink<Worldspace>();
        public Worldspace Indirect { get => Indirect_Property.Item; set => Indirect_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLink<Worldspace> ILoadScreenLocation.Indirect_Property => this.Indirect_Property;
        IWorldspaceInternalGetter ILoadScreenLocationGetter.Indirect => this.Indirect_Property.Item;
        IFormIDLinkGetter<Worldspace> ILoadScreenLocationGetter.Indirect_Property => this.Indirect_Property;
        #endregion
        #region GridPoint
        private P2Int16 _GridPoint;
        public P2Int16 GridPoint
        {
            get => this._GridPoint;
            set => this.RaiseAndSetIfChanged(ref this._GridPoint, value, nameof(GridPoint));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILoadScreenLocationGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            LoadScreenLocationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LoadScreenLocation rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LoadScreenLocation rhs)
        {
            if (rhs == null) return false;
            if (!this.Direct_Property.Equals(rhs.Direct_Property)) return false;
            if (!this.Indirect_Property.Equals(rhs.Indirect_Property)) return false;
            if (!this.GridPoint.Equals(rhs.GridPoint)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Direct).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Indirect).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(GridPoint).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected object XmlWriteTranslator => LoadScreenLocationXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static LoadScreenLocation CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LoadScreenLocation_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LoadScreenLocation CreateFromXml(
            XElement node,
            out LoadScreenLocation_ErrorMask errorMask,
            bool doMasks = true,
            LoadScreenLocation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LoadScreenLocation_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LoadScreenLocation CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new LoadScreenLocation() : null;
                    break;
                default:
                    break;
            }
            var ret = new LoadScreenLocation();
            try
            {
                foreach (var elem in node.Elements())
                {
                    LoadScreenLocationXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static LoadScreenLocation CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            LoadScreenLocation_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LoadScreenLocation CreateFromXml(
            string path,
            out LoadScreenLocation_ErrorMask errorMask,
            LoadScreenLocation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LoadScreenLocation CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            LoadScreenLocation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LoadScreenLocation CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LoadScreenLocation_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LoadScreenLocation CreateFromXml(
            Stream stream,
            out LoadScreenLocation_ErrorMask errorMask,
            LoadScreenLocation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LoadScreenLocation CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            LoadScreenLocation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((LoadScreenLocation_FieldIndex)index)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LoadScreenLocation_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Direct_Property;
            yield return Indirect_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
            Direct_Property.Link(
                modList,
                sourceMod);
            Indirect_Property.Link(
                modList,
                sourceMod);
        }

        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => LoadScreenLocationBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static LoadScreenLocation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LoadScreenLocation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out LoadScreenLocation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LoadScreenLocation_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LoadScreenLocation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new LoadScreenLocation();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(LoadScreenLocation_Registration.LNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            LoadScreenLocation item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.Direct_Property);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.Indirect_Property);
            if (Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(
                frame: frame,
                item: out P2Int16 GridPointParse))
            {
                item.GridPoint = GridPointParse;
            }
            else
            {
                item.GridPoint = default(P2Int16);
            }
        }

        #endregion

        public LoadScreenLocation Copy(
            LoadScreenLocation_CopyMask copyMask = null,
            LoadScreenLocation def = null)
        {
            return LoadScreenLocation.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LoadScreenLocation Copy(
            LoadScreenLocation item,
            LoadScreenLocation_CopyMask copyMask = null,
            LoadScreenLocation def = null)
        {
            LoadScreenLocation ret;
            if (item.GetType().Equals(typeof(LoadScreenLocation)))
            {
                ret = new LoadScreenLocation();
            }
            else
            {
                ret = (LoadScreenLocation)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static LoadScreenLocation Copy_ToLoqui(
            LoadScreenLocation item,
            LoadScreenLocation_CopyMask copyMask = null,
            LoadScreenLocation def = null)
        {
            LoadScreenLocation ret;
            if (item.GetType().Equals(typeof(LoadScreenLocation)))
            {
                ret = new LoadScreenLocation() as LoadScreenLocation;
            }
            else
            {
                ret = (LoadScreenLocation)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(LoadScreenLocation rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            LoadScreenLocation rhs,
            LoadScreenLocation_CopyMask copyMask,
            LoadScreenLocation def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            LoadScreenLocation rhs,
            out LoadScreenLocation_ErrorMask errorMask,
            LoadScreenLocation_CopyMask copyMask = null,
            LoadScreenLocation def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LoadScreenLocationCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = LoadScreenLocation_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            LoadScreenLocation rhs,
            ErrorMaskBuilder errorMask,
            LoadScreenLocation_CopyMask copyMask = null,
            LoadScreenLocation def = null)
        {
            LoadScreenLocationCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                    this.Direct_Property.Set((IFormIDLink<Place>)obj);
                    break;
                case LoadScreenLocation_FieldIndex.Indirect:
                    this.Indirect_Property.Set((IFormIDLink<Worldspace>)obj);
                    break;
                case LoadScreenLocation_FieldIndex.GridPoint:
                    this.GridPoint = (P2Int16)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            LoadScreenLocationCommon.Instance.Clear(this);
        }

        public static LoadScreenLocation Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LoadScreenLocation();
            foreach (var pair in fields)
            {
                CopyInInternal_LoadScreenLocation(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_LoadScreenLocation(LoadScreenLocation obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LoadScreenLocation_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                    obj.Direct_Property.Set((IFormIDLink<Place>)pair.Value);
                    break;
                case LoadScreenLocation_FieldIndex.Indirect:
                    obj.Indirect_Property.Set((IFormIDLink<Worldspace>)pair.Value);
                    break;
                case LoadScreenLocation_FieldIndex.GridPoint:
                    obj.GridPoint = (P2Int16)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ILoadScreenLocation :
        ILoadScreenLocationGetter,
        ILoquiObjectSetter<ILoadScreenLocation>
    {
        new Place Direct { get; set; }
        new IFormIDLink<Place> Direct_Property { get; }
        new Worldspace Indirect { get; set; }
        new IFormIDLink<Worldspace> Indirect_Property { get; }
        new P2Int16 GridPoint { get; set; }

        void CopyFieldsFrom(
            LoadScreenLocation rhs,
            ErrorMaskBuilder errorMask = null,
            LoadScreenLocation_CopyMask copyMask = null,
            LoadScreenLocation def = null);
    }

    public partial interface ILoadScreenLocationGetter :
        ILoquiObject,
        ILoquiObject<ILoadScreenLocationGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Direct
        IPlaceInternalGetter Direct { get; }
        IFormIDLinkGetter<Place> Direct_Property { get; }

        #endregion
        #region Indirect
        IWorldspaceInternalGetter Indirect { get; }
        IFormIDLinkGetter<Worldspace> Indirect_Property { get; }

        #endregion
        #region GridPoint
        P2Int16 GridPoint { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class LoadScreenLocationMixIn
    {
        public static void Clear(this ILoadScreenLocation item)
        {
            ((LoadScreenLocationCommon)item.CommonInstance).Clear(item: item);
        }

        public static LoadScreenLocation_Mask<bool> GetEqualsMask(
            this ILoadScreenLocationGetter item,
            ILoadScreenLocationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LoadScreenLocationCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILoadScreenLocationGetter item,
            string name = null,
            LoadScreenLocation_Mask<bool> printMask = null)
        {
            return ((LoadScreenLocationCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILoadScreenLocationGetter item,
            FileGeneration fg,
            string name = null,
            LoadScreenLocation_Mask<bool> printMask = null)
        {
            ((LoadScreenLocationCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILoadScreenLocationGetter item,
            LoadScreenLocation_Mask<bool?> checkMask)
        {
            return ((LoadScreenLocationCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LoadScreenLocation_Mask<bool> GetHasBeenSetMask(this ILoadScreenLocationGetter item)
        {
            var ret = new LoadScreenLocation_Mask<bool>();
            ((LoadScreenLocationCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LoadScreenLocation_FieldIndex
    {
        Direct = 0,
        Indirect = 1,
        GridPoint = 2,
    }
    #endregion

    #region Registration
    public class LoadScreenLocation_Registration : ILoquiRegistration
    {
        public static readonly LoadScreenLocation_Registration Instance = new LoadScreenLocation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 162,
            version: 0);

        public const string GUID = "20b31ea8-66df-4668-9f33-8a69f340c592";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(LoadScreenLocation_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LoadScreenLocation_ErrorMask);

        public static readonly Type ClassType = typeof(LoadScreenLocation);

        public static readonly Type GetterType = typeof(ILoadScreenLocationGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILoadScreenLocation);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(LoadScreenLocationCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LoadScreenLocation";

        public const string Name = "LoadScreenLocation";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DIRECT":
                    return (ushort)LoadScreenLocation_FieldIndex.Direct;
                case "INDIRECT":
                    return (ushort)LoadScreenLocation_FieldIndex.Indirect;
                case "GRIDPOINT":
                    return (ushort)LoadScreenLocation_FieldIndex.GridPoint;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                    return "Direct";
                case LoadScreenLocation_FieldIndex.Indirect:
                    return "Indirect";
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return "GridPoint";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                    return typeof(IFormIDLink<Place>);
                case LoadScreenLocation_FieldIndex.Indirect:
                    return typeof(IFormIDLink<Worldspace>);
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return typeof(P2Int16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LoadScreenLocationXmlWriteTranslation);
        public static readonly RecordType LNAM_HEADER = new RecordType("LNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LNAM_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(LoadScreenLocationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LoadScreenLocationCommon
    {
        public static readonly LoadScreenLocationCommon Instance = new LoadScreenLocationCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            LoadScreenLocation item,
            LoadScreenLocation rhs,
            LoadScreenLocation def,
            ErrorMaskBuilder errorMask,
            LoadScreenLocation_CopyMask copyMask)
        {
            if (copyMask?.Direct ?? true)
            {
                errorMask?.PushIndex((int)LoadScreenLocation_FieldIndex.Direct);
                try
                {
                    item.Direct_Property.SetLink(value: rhs.Direct_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Indirect ?? true)
            {
                errorMask?.PushIndex((int)LoadScreenLocation_FieldIndex.Indirect);
                try
                {
                    item.Indirect_Property.SetLink(value: rhs.Indirect_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.GridPoint ?? true)
            {
                errorMask?.PushIndex((int)LoadScreenLocation_FieldIndex.GridPoint);
                try
                {
                    item.GridPoint = rhs.GridPoint;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(ILoadScreenLocation item)
        {
            ClearPartial();
            item.Direct = default(Place);
            item.Indirect = default(Worldspace);
            item.GridPoint = default(P2Int16);
        }

        public LoadScreenLocation_Mask<bool> GetEqualsMask(
            ILoadScreenLocationGetter item,
            ILoadScreenLocationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LoadScreenLocation_Mask<bool>();
            ((LoadScreenLocationCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            ILoadScreenLocationGetter item,
            ILoadScreenLocationGetter rhs,
            LoadScreenLocation_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Direct = item.Direct_Property.FormKey == rhs.Direct_Property.FormKey;
            ret.Indirect = item.Indirect_Property.FormKey == rhs.Indirect_Property.FormKey;
            ret.GridPoint = item.GridPoint.Equals(rhs.GridPoint);
        }

        public string ToString(
            ILoadScreenLocationGetter item,
            string name = null,
            LoadScreenLocation_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            ILoadScreenLocationGetter item,
            FileGeneration fg,
            string name = null,
            LoadScreenLocation_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LoadScreenLocation =>");
            }
            else
            {
                fg.AppendLine($"{name} (LoadScreenLocation) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            ILoadScreenLocationGetter item,
            FileGeneration fg,
            LoadScreenLocation_Mask<bool> printMask = null)
        {
            if (printMask?.Direct ?? true)
            {
                fg.AppendLine($"Direct => {item.Direct_Property}");
            }
            if (printMask?.Indirect ?? true)
            {
                fg.AppendLine($"Indirect => {item.Indirect_Property}");
            }
            if (printMask?.GridPoint ?? true)
            {
                fg.AppendLine($"GridPoint => {item.GridPoint}");
            }
        }

        public bool HasBeenSet(
            ILoadScreenLocationGetter item,
            LoadScreenLocation_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            ILoadScreenLocationGetter item,
            LoadScreenLocation_Mask<bool> mask)
        {
            mask.Direct = true;
            mask.Indirect = true;
            mask.GridPoint = true;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class LoadScreenLocationXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static LoadScreenLocationXmlWriteTranslation Instance = new LoadScreenLocationXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILoadScreenLocationGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)LoadScreenLocation_FieldIndex.Direct) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Direct),
                    item: item.Direct_Property?.FormKey,
                    fieldIndex: (int)LoadScreenLocation_FieldIndex.Direct,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LoadScreenLocation_FieldIndex.Indirect) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Indirect),
                    item: item.Indirect_Property?.FormKey,
                    fieldIndex: (int)LoadScreenLocation_FieldIndex.Indirect,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LoadScreenLocation_FieldIndex.GridPoint) ?? true))
            {
                P2Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GridPoint),
                    item: item.GridPoint,
                    fieldIndex: (int)LoadScreenLocation_FieldIndex.GridPoint,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ILoadScreenLocationGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LoadScreenLocation");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LoadScreenLocation");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ILoadScreenLocationGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ILoadScreenLocationGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ILoadScreenLocationGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class LoadScreenLocationXmlCreateTranslation
    {
        public readonly static LoadScreenLocationXmlCreateTranslation Instance = new LoadScreenLocationXmlCreateTranslation();

        public static void FillPublicXml(
            ILoadScreenLocation item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LoadScreenLocationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILoadScreenLocation item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Direct":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Direct_Property,
                        fieldIndex: (int)LoadScreenLocation_FieldIndex.Direct,
                        errorMask: errorMask);
                    break;
                case "Indirect":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Indirect_Property,
                        fieldIndex: (int)LoadScreenLocation_FieldIndex.Indirect,
                        errorMask: errorMask);
                    break;
                case "GridPoint":
                    try
                    {
                        errorMask?.PushIndex((int)LoadScreenLocation_FieldIndex.GridPoint);
                        if (P2Int16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out P2Int16 GridPointParse,
                            errorMask: errorMask))
                        {
                            item.GridPoint = GridPointParse;
                        }
                        else
                        {
                            item.GridPoint = default(P2Int16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class LoadScreenLocationXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            XElement node,
            out LoadScreenLocation_ErrorMask errorMask,
            bool doMasks = true,
            LoadScreenLocation_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LoadScreenLocationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreenLocation_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            string path,
            out LoadScreenLocation_ErrorMask errorMask,
            LoadScreenLocation_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            Stream stream,
            out LoadScreenLocation_ErrorMask errorMask,
            LoadScreenLocation_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((LoadScreenLocationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            XElement node,
            string name = null,
            LoadScreenLocation_TranslationMask translationMask = null)
        {
            ((LoadScreenLocationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((LoadScreenLocationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((LoadScreenLocationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class LoadScreenLocation_Mask<T> : IMask<T>, IEquatable<LoadScreenLocation_Mask<T>>
    {
        #region Ctors
        public LoadScreenLocation_Mask()
        {
        }

        public LoadScreenLocation_Mask(T initialValue)
        {
            this.Direct = initialValue;
            this.Indirect = initialValue;
            this.GridPoint = initialValue;
        }
        #endregion

        #region Members
        public T Direct;
        public T Indirect;
        public T GridPoint;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LoadScreenLocation_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LoadScreenLocation_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Direct, rhs.Direct)) return false;
            if (!object.Equals(this.Indirect, rhs.Indirect)) return false;
            if (!object.Equals(this.GridPoint, rhs.GridPoint)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Direct?.GetHashCode());
            ret = ret.CombineHashCode(this.Indirect?.GetHashCode());
            ret = ret.CombineHashCode(this.GridPoint?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Direct)) return false;
            if (!eval(this.Indirect)) return false;
            if (!eval(this.GridPoint)) return false;
            return true;
        }
        #endregion

        #region Translate
        public LoadScreenLocation_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LoadScreenLocation_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LoadScreenLocation_Mask<R> obj, Func<T, R> eval)
        {
            obj.Direct = eval(this.Direct);
            obj.Indirect = eval(this.Indirect);
            obj.GridPoint = eval(this.GridPoint);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LoadScreenLocation_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LoadScreenLocation_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LoadScreenLocation_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Direct ?? true)
                {
                    fg.AppendLine($"Direct => {Direct}");
                }
                if (printMask?.Indirect ?? true)
                {
                    fg.AppendLine($"Indirect => {Indirect}");
                }
                if (printMask?.GridPoint ?? true)
                {
                    fg.AppendLine($"GridPoint => {GridPoint}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LoadScreenLocation_ErrorMask : IErrorMask, IErrorMask<LoadScreenLocation_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Direct;
        public Exception Indirect;
        public Exception GridPoint;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                    return Direct;
                case LoadScreenLocation_FieldIndex.Indirect:
                    return Indirect;
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return GridPoint;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                    this.Direct = ex;
                    break;
                case LoadScreenLocation_FieldIndex.Indirect:
                    this.Indirect = ex;
                    break;
                case LoadScreenLocation_FieldIndex.GridPoint:
                    this.GridPoint = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                    this.Direct = (Exception)obj;
                    break;
                case LoadScreenLocation_FieldIndex.Indirect:
                    this.Indirect = (Exception)obj;
                    break;
                case LoadScreenLocation_FieldIndex.GridPoint:
                    this.GridPoint = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Direct != null) return true;
            if (Indirect != null) return true;
            if (GridPoint != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("LoadScreenLocation_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Direct => {Direct}");
            fg.AppendLine($"Indirect => {Indirect}");
            fg.AppendLine($"GridPoint => {GridPoint}");
        }
        #endregion

        #region Combine
        public LoadScreenLocation_ErrorMask Combine(LoadScreenLocation_ErrorMask rhs)
        {
            var ret = new LoadScreenLocation_ErrorMask();
            ret.Direct = this.Direct.Combine(rhs.Direct);
            ret.Indirect = this.Indirect.Combine(rhs.Indirect);
            ret.GridPoint = this.GridPoint.Combine(rhs.GridPoint);
            return ret;
        }
        public static LoadScreenLocation_ErrorMask Combine(LoadScreenLocation_ErrorMask lhs, LoadScreenLocation_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LoadScreenLocation_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LoadScreenLocation_ErrorMask();
        }
        #endregion

    }
    public class LoadScreenLocation_CopyMask
    {
        public LoadScreenLocation_CopyMask()
        {
        }

        public LoadScreenLocation_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Direct = defaultOn;
            this.Indirect = defaultOn;
            this.GridPoint = defaultOn;
        }

        #region Members
        public bool Direct;
        public bool Indirect;
        public bool GridPoint;
        #endregion

    }

    public class LoadScreenLocation_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Direct;
        public bool Indirect;
        public bool GridPoint;
        #endregion

        #region Ctors
        public LoadScreenLocation_TranslationMask()
        {
        }

        public LoadScreenLocation_TranslationMask(bool defaultOn)
        {
            this.Direct = defaultOn;
            this.Indirect = defaultOn;
            this.GridPoint = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Direct, null));
            ret.Add((Indirect, null));
            ret.Add((GridPoint, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class LoadScreenLocationBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LoadScreenLocationBinaryWriteTranslation Instance = new LoadScreenLocationBinaryWriteTranslation();

        public static void Write_Embedded(
            ILoadScreenLocationGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Direct_Property,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Indirect_Property,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GridPoint);
        }

        public void Write(
            MutagenWriter writer,
            ILoadScreenLocationGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LoadScreenLocation_Registration.LNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ILoadScreenLocationGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class LoadScreenLocationBinaryCreateTranslation
    {
        public readonly static LoadScreenLocationBinaryCreateTranslation Instance = new LoadScreenLocationBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class LoadScreenLocationBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILoadScreenLocationGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out LoadScreenLocation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((LoadScreenLocationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LoadScreenLocation_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this ILoadScreenLocationGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((LoadScreenLocationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this ILoadScreenLocationGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((LoadScreenLocationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
