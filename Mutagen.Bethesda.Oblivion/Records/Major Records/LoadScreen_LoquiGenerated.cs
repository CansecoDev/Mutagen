/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LoadScreen : 
        OblivionMajorRecord,
        ILoadScreen,
        ILoquiObject<LoadScreen>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<LoadScreen>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreen_Registration.Instance;
        public new static LoadScreen_Registration Registration => LoadScreen_Registration.Instance;

        #region Ctor
        protected LoadScreen()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)LoadScreen_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)LoadScreen_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool ILoadScreenGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String ILoadScreenGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)LoadScreen_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)LoadScreen_FieldIndex.Description];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)LoadScreen_FieldIndex.Description, nameof(Description_IsSet));
        }
        bool ILoadScreenGetter.Description_IsSet => Description_IsSet;
        private String _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        String ILoadScreenGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Description, value, _hasBeenSetTracker, markSet, (int)LoadScreen_FieldIndex.Description, nameof(Description), nameof(Description_IsSet));
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region Locations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<LoadScreenLocation> _Locations = new SourceSetList<LoadScreenLocation>();
        public ISourceSetList<LoadScreenLocation> Locations => _Locations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<LoadScreenLocation> LocationsEnumerable
        {
            get => _Locations.Items;
            set => _Locations.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<LoadScreenLocation> ILoadScreen.Locations => _Locations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<LoadScreenLocation> ILoadScreenGetter.Locations => _Locations;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<LoadScreen>.GetEqualsMask(LoadScreen rhs, EqualsMaskHelper.Include include) => LoadScreenCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ILoadScreenGetter>.GetEqualsMask(ILoadScreenGetter rhs, EqualsMaskHelper.Include include) => LoadScreenCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            LoadScreen_Mask<bool> printMask = null)
        {
            return LoadScreenCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            LoadScreenCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new LoadScreen_Mask<bool> GetHasBeenSetMask()
        {
            return LoadScreenCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LoadScreen rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LoadScreen rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Icon_IsSet != rhs.Icon_IsSet) return false;
            if (Icon_IsSet)
            {
                if (!string.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (Description_IsSet != rhs.Description_IsSet) return false;
            if (Description_IsSet)
            {
                if (!string.Equals(this.Description, rhs.Description)) return false;
            }
            if (Locations.HasBeenSet != rhs.Locations.HasBeenSet) return false;
            if (Locations.HasBeenSet)
            {
                if (!this.Locations.SequenceEqual(rhs.Locations)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Description_IsSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Locations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Locations).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static LoadScreen Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LoadScreen_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LoadScreen Create_Xml(
            XElement node,
            out LoadScreen_ErrorMask errorMask,
            bool doMasks = true,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LoadScreen Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new LoadScreen() : null;
                    break;
                default:
                    break;
            }
            var ret = new LoadScreen();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LoadScreenCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static LoadScreen Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            LoadScreen_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LoadScreen Create_Xml(
            string path,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LoadScreen Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LoadScreen Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LoadScreen_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LoadScreen Create_Xml(
            Stream stream,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LoadScreen Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            LoadScreen_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out LoadScreen_ErrorMask errorMask,
            bool doMasks = true,
            LoadScreen_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            LoadScreenCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            LoadScreen item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((LoadScreen_FieldIndex)index)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                    return _hasBeenSetTracker[index];
                case LoadScreen_FieldIndex.Locations:
                    return Locations.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LoadScreen_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Locations.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Locations.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        public LoadScreen(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(LoadScreen obj, LoadScreen rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new LoadScreen(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static LoadScreen Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LoadScreen Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out LoadScreen_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LoadScreen Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<LoadScreen>(
                record: new LoadScreen(),
                frame: frame,
                errorMask: errorMask,
                recType: LoadScreen_Registration.LSCR_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out LoadScreen_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            LoadScreenCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            LoadScreen item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            LoadScreen item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Icon);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String DescriptionParse))
                    {
                        item.Description = DescriptionParse;
                    }
                    else
                    {
                        item.Description = default(String);
                    }
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Description);
                }
                case 0x4D414E4C: // LNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<LoadScreenLocation>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LoadScreen_Registration.LNAM_HEADER,
                        item: item.Locations,
                        fieldIndex: (int)LoadScreen_FieldIndex.Locations,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out LoadScreenLocation listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<LoadScreenLocation>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Locations);
                }
                default:
                    return OblivionMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public LoadScreen Copy(
            LoadScreen_CopyMask copyMask = null,
            ILoadScreenGetter def = null)
        {
            return LoadScreen.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LoadScreen Copy(
            ILoadScreen item,
            LoadScreen_CopyMask copyMask = null,
            ILoadScreenGetter def = null)
        {
            LoadScreen ret;
            if (item.GetType().Equals(typeof(LoadScreen)))
            {
                ret = new LoadScreen();
            }
            else
            {
                ret = (LoadScreen)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static LoadScreen Copy_ToLoqui(
            ILoadScreenGetter item,
            LoadScreen_CopyMask copyMask = null,
            ILoadScreenGetter def = null)
        {
            LoadScreen ret;
            if (item.GetType().Equals(typeof(LoadScreen)))
            {
                ret = new LoadScreen() as LoadScreen;
            }
            else
            {
                ret = (LoadScreen)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IMajorRecordGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ILoadScreenGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ILoadScreenGetter rhs,
            LoadScreen_CopyMask copyMask,
            ILoadScreenGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ILoadScreenGetter rhs,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_CopyMask copyMask = null,
            ILoadScreenGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LoadScreenCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ILoadScreenGetter rhs,
            ErrorMaskBuilder errorMask,
            LoadScreen_CopyMask copyMask = null,
            ILoadScreenGetter def = null,
            bool doMasks = true)
        {
            LoadScreenCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case LoadScreen_FieldIndex.Description:
                    this.Description = (String)obj;
                    break;
                case LoadScreen_FieldIndex.Locations:
                    this._Locations.SetTo((IEnumerable<LoadScreenLocation>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            LoadScreenCommon.Clear(this);
        }


        public new static LoadScreen Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LoadScreen();
            foreach (var pair in fields)
            {
                CopyInInternal_LoadScreen(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_LoadScreen(LoadScreen obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LoadScreen_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case LoadScreen_FieldIndex.Description:
                    obj.Description = (String)pair.Value;
                    break;
                case LoadScreen_FieldIndex.Locations:
                    obj._Locations.SetTo((IEnumerable<LoadScreenLocation>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ILoadScreen : ILoadScreenGetter, IOblivionMajorRecord, ILoquiClass<ILoadScreen, ILoadScreenGetter>, ILoquiClass<LoadScreen, ILoadScreenGetter>
    {
        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String item, bool hasBeenSet = true);
        void Icon_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String item, bool hasBeenSet = true);
        void Description_Unset();

        new ISourceSetList<LoadScreenLocation> Locations { get; }
    }

    public partial interface ILoadScreenGetter : IOblivionMajorRecordGetter
    {
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region Locations
        IObservableSetList<LoadScreenLocation> Locations { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LoadScreen_FieldIndex
    {
        FormKey = 0,
        Version = 1,
        EditorID = 2,
        RecordType = 3,
        OblivionMajorRecordFlags = 4,
        Icon = 5,
        Description = 6,
        Locations = 7,
    }
    #endregion

    #region Registration
    public class LoadScreen_Registration : ILoquiRegistration
    {
        public static readonly LoadScreen_Registration Instance = new LoadScreen_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 161,
            version: 0);

        public const string GUID = "12f93621-ba01-4a56-89b2-13d84e7a6972";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(LoadScreen_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LoadScreen_ErrorMask);

        public static readonly Type ClassType = typeof(LoadScreen);

        public static readonly Type GetterType = typeof(ILoadScreenGetter);

        public static readonly Type SetterType = typeof(ILoadScreen);

        public static readonly Type CommonType = typeof(LoadScreenCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LoadScreen";

        public const string Name = "LoadScreen";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ICON":
                    return (ushort)LoadScreen_FieldIndex.Icon;
                case "DESCRIPTION":
                    return (ushort)LoadScreen_FieldIndex.Description;
                case "LOCATIONS":
                    return (ushort)LoadScreen_FieldIndex.Locations;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Locations:
                    return true;
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Locations:
                    return true;
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                case LoadScreen_FieldIndex.Locations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    return "Icon";
                case LoadScreen_FieldIndex.Description:
                    return "Description";
                case LoadScreen_FieldIndex.Locations:
                    return "Locations";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                case LoadScreen_FieldIndex.Locations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                case LoadScreen_FieldIndex.Locations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    return typeof(String);
                case LoadScreen_FieldIndex.Description:
                    return typeof(String);
                case LoadScreen_FieldIndex.Locations:
                    return typeof(SourceSetList<LoadScreenLocation>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType LSCR_HEADER = new RecordType("LSCR");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType LNAM_HEADER = new RecordType("LNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LSCR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LoadScreenCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ILoadScreen item,
            ILoadScreenGetter rhs,
            ILoadScreenGetter def,
            ErrorMaskBuilder errorMask,
            LoadScreen_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Description ?? true)
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Description);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Description,
                        rhsHasBeenSet: rhs.Description_IsSet,
                        defItem: def?.Description ?? default(String),
                        defHasBeenSet: def?.Description_IsSet ?? false,
                        outRhsItem: out var rhsDescriptionItem,
                        outDefItem: out var defDescriptionItem))
                    {
                        item.Description = rhsDescriptionItem;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Locations.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Locations);
                try
                {
                    item.Locations.SetToWithDefault(
                        rhs: rhs.Locations,
                        def: def?.Locations,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Locations.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return LoadScreenLocation.Copy(
                                        r,
                                        copyMask?.Locations?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Locations.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ILoadScreen item)
        {
            item.Icon_Unset();
            item.Description_Unset();
            item.Locations.Unset();
        }

        public static LoadScreen_Mask<bool> GetEqualsMask(
            this ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LoadScreen_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            LoadScreen_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && string.Equals(item.Description, rhs.Description);
            ret.Locations = item.Locations.CollectionEqualsHelper(
                rhs.Locations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            OblivionMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ILoadScreenGetter item,
            string name = null,
            LoadScreen_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILoadScreenGetter item,
            FileGeneration fg,
            string name = null,
            LoadScreen_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LoadScreen)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LoadScreen)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Locations?.Overall ?? true)
                {
                    fg.AppendLine("Locations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Locations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILoadScreenGetter item,
            LoadScreen_Mask<bool?> checkMask)
        {
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            if (checkMask.Locations.Overall.HasValue && checkMask.Locations.Overall.Value != item.Locations.HasBeenSet) return false;
            return true;
        }

        public static LoadScreen_Mask<bool> GetHasBeenSetMask(ILoadScreenGetter item)
        {
            var ret = new LoadScreen_Mask<bool>();
            ret.Icon = item.Icon_IsSet;
            ret.Description = item.Description_IsSet;
            ret.Locations = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, LoadScreenLocation_Mask<bool>>>>(item.Locations.HasBeenSet, item.Locations.WithIndex().Select((i) => new MaskItemIndexed<bool, LoadScreenLocation_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        public static LoadScreen_FieldIndex? ConvertFieldIndex(OblivionMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static LoadScreen_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.RecordType:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (LoadScreen_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static LoadScreen_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static LoadScreen_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.FormKey:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (LoadScreen_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            LoadScreen item,
            bool doMasks,
            out LoadScreen_ErrorMask errorMask,
            LoadScreen_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            LoadScreen item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LoadScreen");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LoadScreen");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this LoadScreen item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)LoadScreen_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)LoadScreen_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.Locations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Locations) ?? true))
            {
                ListXmlTranslation<LoadScreenLocation>.Instance.Write(
                    node: node,
                    name: nameof(item.Locations),
                    item: item.Locations,
                    fieldIndex: (int)LoadScreen_FieldIndex.Locations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LoadScreen_FieldIndex.Locations),
                    transl: (XElement subNode, LoadScreenLocation subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<LoadScreenLocation>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml(
            this LoadScreen item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LoadScreenCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this LoadScreen item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)LoadScreen_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)LoadScreen_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Locations":
                    try
                    {
                        errorMask?.PushIndex((int)LoadScreen_FieldIndex.Locations);
                        if (ListXmlTranslation<LoadScreenLocation>.Instance.Parse(
                            node: node,
                            enumer: out var LocationsItem,
                            transl: LoquiXmlTranslation<LoadScreenLocation>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Locations.SetTo(LocationsItem);
                        }
                        else
                        {
                            item.Locations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            LoadScreen item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LoadScreen_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = LoadScreen_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            LoadScreen item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LoadScreen_Registration.LSCR_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            LoadScreen item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(LoadScreen_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    header: recordTypeConverter.ConvertToCustom(LoadScreen_Registration.DESC_HEADER),
                    nullable: false);
            }
            if (item.Locations.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<LoadScreenLocation>.Instance.Write(
                    writer: writer,
                    items: item.Locations,
                    fieldIndex: (int)LoadScreen_FieldIndex.Locations,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, LoadScreenLocation subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<LoadScreenLocation>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class LoadScreen_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<LoadScreen_Mask<T>>
    {
        #region Ctors
        public LoadScreen_Mask()
        {
        }

        public LoadScreen_Mask(T initialValue)
        {
            this.Icon = initialValue;
            this.Description = initialValue;
            this.Locations = new MaskItem<T, IEnumerable<MaskItemIndexed<T, LoadScreenLocation_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Icon;
        public T Description;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, LoadScreenLocation_Mask<T>>>> Locations;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LoadScreen_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LoadScreen_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Locations, rhs.Locations)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Locations?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.Description)) return false;
            if (this.Locations != null)
            {
                if (!eval(this.Locations.Overall)) return false;
                if (this.Locations.Specific != null)
                {
                    foreach (var item in this.Locations.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new LoadScreen_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LoadScreen_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LoadScreen_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Icon = eval(this.Icon);
            obj.Description = eval(this.Description);
            if (Locations != null)
            {
                obj.Locations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LoadScreenLocation_Mask<R>>>>();
                obj.Locations.Overall = eval(this.Locations.Overall);
                if (Locations.Specific != null)
                {
                    List<MaskItemIndexed<R, LoadScreenLocation_Mask<R>>> l = new List<MaskItemIndexed<R, LoadScreenLocation_Mask<R>>>();
                    obj.Locations.Specific = l;
                    foreach (var item in Locations.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, LoadScreenLocation_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, LoadScreenLocation_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Locations.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LoadScreen_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LoadScreen_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LoadScreen_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Locations?.Overall ?? true)
                {
                    fg.AppendLine("Locations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Locations.Overall != null)
                        {
                            fg.AppendLine(Locations.Overall.ToString());
                        }
                        if (Locations.Specific != null)
                        {
                            foreach (var subItem in Locations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LoadScreen_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<LoadScreen_ErrorMask>
    {
        #region Members
        public Exception Icon;
        public Exception Description;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LoadScreenLocation_ErrorMask>>> Locations;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    return Icon;
                case LoadScreen_FieldIndex.Description:
                    return Description;
                case LoadScreen_FieldIndex.Locations:
                    return Locations;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case LoadScreen_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case LoadScreen_FieldIndex.Locations:
                    this.Locations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LoadScreenLocation_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case LoadScreen_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case LoadScreen_FieldIndex.Locations:
                    this.Locations = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LoadScreenLocation_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Icon != null) return true;
            if (Description != null) return true;
            if (Locations != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("LoadScreen_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine("Locations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Locations.Overall != null)
                {
                    fg.AppendLine(Locations.Overall.ToString());
                }
                if (Locations.Specific != null)
                {
                    foreach (var subItem in Locations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public LoadScreen_ErrorMask Combine(LoadScreen_ErrorMask rhs)
        {
            var ret = new LoadScreen_ErrorMask();
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Locations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LoadScreenLocation_ErrorMask>>>(this.Locations.Overall.Combine(rhs.Locations.Overall), new List<MaskItem<Exception, LoadScreenLocation_ErrorMask>>(this.Locations.Specific.And(rhs.Locations.Specific)));
            return ret;
        }
        public static LoadScreen_ErrorMask Combine(LoadScreen_ErrorMask lhs, LoadScreen_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LoadScreen_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LoadScreen_ErrorMask();
        }
        #endregion

    }
    public class LoadScreen_CopyMask : OblivionMajorRecord_CopyMask
    {
        public LoadScreen_CopyMask()
        {
        }

        public LoadScreen_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Icon = defaultOn;
            this.Description = defaultOn;
            this.Locations = new MaskItem<CopyOption, LoadScreenLocation_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool Icon;
        public bool Description;
        public MaskItem<CopyOption, LoadScreenLocation_CopyMask> Locations;
        #endregion

    }

    public class LoadScreen_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Icon;
        public bool Description;
        public MaskItem<bool, LoadScreenLocation_TranslationMask> Locations;
        #endregion

        #region Ctors
        public LoadScreen_TranslationMask()
            : base()
        {
        }

        public LoadScreen_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Icon = defaultOn;
            this.Description = defaultOn;
            this.Locations = new MaskItem<bool, LoadScreenLocation_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Icon, null));
            ret.Add((Description, null));
            ret.Add((Locations?.Overall ?? true, Locations?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
