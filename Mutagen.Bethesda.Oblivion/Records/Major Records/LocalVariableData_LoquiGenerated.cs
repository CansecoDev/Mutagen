/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LocalVariableData :
        ILocalVariableData,
        ILoquiObjectSetter<LocalVariableData>,
        IEquatable<LocalVariableData>,
        IEqualsMask
    {
        #region Ctor
        public LocalVariableData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        public Int32 Index { get; set; } = default;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown = new byte[12];
        public MemorySlice<Byte> Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ILocalVariableDataGetter.Unknown => this.Unknown;
        #endregion
        #region Flags
        public Script.LocalVariableFlag Flags { get; set; } = default;
        #endregion
        #region Unknown2
        public Int32 Unknown2 { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LocalVariableDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILocalVariableDataGetter rhs)) return false;
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(LocalVariableData? obj)
        {
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LocalVariableDataCommon)((ILocalVariableDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => LocalVariableDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LocalVariableDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static LocalVariableData CreateFromXml(
            XElement node,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LocalVariableData CreateFromXml(
            XElement node,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LocalVariableData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LocalVariableData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new LocalVariableData();
            ((LocalVariableDataSetterCommon)((ILocalVariableDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LocalVariableData CreateFromXml(
            string path,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LocalVariableData CreateFromXml(
            string path,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LocalVariableData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LocalVariableData CreateFromXml(
            Stream stream,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LocalVariableData CreateFromXml(
            Stream stream,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LocalVariableData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Index = initialValue;
                this.Unknown = initialValue;
                this.Flags = initialValue;
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem Index,
                TItem Unknown,
                TItem Flags,
                TItem Unknown2)
            {
                this.Index = Index;
                this.Unknown = Unknown;
                this.Flags = Flags;
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Index;
            public TItem Unknown;
            public TItem Flags;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Index);
                hash.Add(this.Unknown);
                hash.Add(this.Flags);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Index)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Index)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LocalVariableData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Index = eval(this.Index);
                obj.Unknown = eval(this.Unknown);
                obj.Flags = eval(this.Flags);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LocalVariableData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LocalVariableData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LocalVariableData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Index;
            public Exception? Unknown;
            public Exception? Flags;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
                switch (enu)
                {
                    case LocalVariableData_FieldIndex.Index:
                        return Index;
                    case LocalVariableData_FieldIndex.Unknown:
                        return Unknown;
                    case LocalVariableData_FieldIndex.Flags:
                        return Flags;
                    case LocalVariableData_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
                switch (enu)
                {
                    case LocalVariableData_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case LocalVariableData_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case LocalVariableData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case LocalVariableData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
                switch (enu)
                {
                    case LocalVariableData_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case LocalVariableData_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case LocalVariableData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case LocalVariableData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Index != null) return true;
                if (Unknown != null) return true;
                if (Flags != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Index, "Index");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Unknown2, "Unknown2");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Index = this.Index.Combine(rhs.Index);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Index;
            public bool Unknown;
            public bool Flags;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Index = defaultOn;
                this.Unknown = defaultOn;
                this.Flags = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Index, null));
                ret.Add((Unknown, null));
                ret.Add((Flags, null));
                ret.Add((Unknown2, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = LocalVariableData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocalVariableDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LocalVariableDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static LocalVariableData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static LocalVariableData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LocalVariableData();
            ((LocalVariableDataSetterCommon)((ILocalVariableDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LocalVariableData item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILocalVariableDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LocalVariableDataSetterCommon)((ILocalVariableDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LocalVariableData GetNew()
        {
            return new LocalVariableData();
        }

    }
    #endregion

    #region Interface
    public partial interface ILocalVariableData :
        ILocalVariableDataGetter,
        ILoquiObjectSetter<ILocalVariableData>
    {
        new Int32 Index { get; set; }
        new MemorySlice<Byte> Unknown { get; set; }
        new Script.LocalVariableFlag Flags { get; set; }
        new Int32 Unknown2 { get; set; }
    }

    public partial interface ILocalVariableDataGetter :
        ILoquiObject,
        ILoquiObject<ILocalVariableDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => LocalVariableData_Registration.Instance;
        Int32 Index { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }
        Script.LocalVariableFlag Flags { get; }
        Int32 Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LocalVariableDataMixIn
    {
        public static void Clear(this ILocalVariableData item)
        {
            ((LocalVariableDataSetterCommon)((ILocalVariableDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LocalVariableData.Mask<bool> GetEqualsMask(
            this ILocalVariableDataGetter item,
            ILocalVariableDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILocalVariableDataGetter item,
            string? name = null,
            LocalVariableData.Mask<bool>? printMask = null)
        {
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILocalVariableDataGetter item,
            FileGeneration fg,
            string? name = null,
            LocalVariableData.Mask<bool>? printMask = null)
        {
            ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILocalVariableDataGetter item,
            LocalVariableData.Mask<bool?> checkMask)
        {
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LocalVariableData.Mask<bool> GetHasBeenSetMask(this ILocalVariableDataGetter item)
        {
            var ret = new LocalVariableData.Mask<bool>(false);
            ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILocalVariableDataGetter item,
            ILocalVariableDataGetter rhs)
        {
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILocalVariableData lhs,
            ILocalVariableDataGetter rhs)
        {
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ILocalVariableData lhs,
            ILocalVariableDataGetter rhs,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILocalVariableData lhs,
            ILocalVariableDataGetter rhs,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LocalVariableData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILocalVariableData lhs,
            ILocalVariableDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LocalVariableData DeepCopy(
            this ILocalVariableDataGetter item,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            return ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LocalVariableData DeepCopy(
            this ILocalVariableDataGetter item,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            return ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LocalVariableData DeepCopy(
            this ILocalVariableDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILocalVariableData item,
            XElement node,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILocalVariableData item,
            XElement node,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LocalVariableData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILocalVariableData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((LocalVariableDataSetterCommon)((ILocalVariableDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILocalVariableData item,
            string path,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILocalVariableData item,
            string path,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILocalVariableData item,
            string path,
            ErrorMaskBuilder? errorMask,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILocalVariableData item,
            Stream stream,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILocalVariableData item,
            Stream stream,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILocalVariableData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILocalVariableData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILocalVariableData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LocalVariableDataSetterCommon)((ILocalVariableDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LocalVariableData_FieldIndex
    {
        Index = 0,
        Unknown = 1,
        Flags = 2,
        Unknown2 = 3,
    }
    #endregion

    #region Registration
    public partial class LocalVariableData_Registration : ILoquiRegistration
    {
        public static readonly LocalVariableData_Registration Instance = new LocalVariableData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 207,
            version: 0);

        public const string GUID = "02fb12f0-9bb2-4675-9624-502859e58bd6";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(LocalVariableData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LocalVariableData.ErrorMask);

        public static readonly Type ClassType = typeof(LocalVariableData);

        public static readonly Type GetterType = typeof(ILocalVariableDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILocalVariableData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.LocalVariableData";

        public const string Name = "LocalVariableData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "INDEX":
                    return (ushort)LocalVariableData_FieldIndex.Index;
                case "UNKNOWN":
                    return (ushort)LocalVariableData_FieldIndex.Unknown;
                case "FLAGS":
                    return (ushort)LocalVariableData_FieldIndex.Flags;
                case "UNKNOWN2":
                    return (ushort)LocalVariableData_FieldIndex.Unknown2;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Index:
                case LocalVariableData_FieldIndex.Unknown:
                case LocalVariableData_FieldIndex.Flags:
                case LocalVariableData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Index:
                case LocalVariableData_FieldIndex.Unknown:
                case LocalVariableData_FieldIndex.Flags:
                case LocalVariableData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Index:
                case LocalVariableData_FieldIndex.Unknown:
                case LocalVariableData_FieldIndex.Flags:
                case LocalVariableData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Index:
                    return "Index";
                case LocalVariableData_FieldIndex.Unknown:
                    return "Unknown";
                case LocalVariableData_FieldIndex.Flags:
                    return "Flags";
                case LocalVariableData_FieldIndex.Unknown2:
                    return "Unknown2";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Index:
                case LocalVariableData_FieldIndex.Unknown:
                case LocalVariableData_FieldIndex.Flags:
                case LocalVariableData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Index:
                case LocalVariableData_FieldIndex.Unknown:
                case LocalVariableData_FieldIndex.Flags:
                case LocalVariableData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Index:
                    return typeof(Int32);
                case LocalVariableData_FieldIndex.Unknown:
                    return typeof(MemorySlice<Byte>);
                case LocalVariableData_FieldIndex.Flags:
                    return typeof(Script.LocalVariableFlag);
                case LocalVariableData_FieldIndex.Unknown2:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LocalVariableDataXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.SLSD;
        public static readonly Type BinaryWriteTranslation = typeof(LocalVariableDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LocalVariableDataSetterCommon
    {
        public static readonly LocalVariableDataSetterCommon Instance = new LocalVariableDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILocalVariableData item)
        {
            ClearPartial();
            item.Index = default;
            item.Unknown = new byte[12];
            item.Flags = default;
            item.Unknown2 = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ILocalVariableData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LocalVariableDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILocalVariableData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.SLSD)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LocalVariableDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class LocalVariableDataCommon
    {
        public static readonly LocalVariableDataCommon Instance = new LocalVariableDataCommon();

        public LocalVariableData.Mask<bool> GetEqualsMask(
            ILocalVariableDataGetter item,
            ILocalVariableDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LocalVariableData.Mask<bool>(false);
            ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILocalVariableDataGetter item,
            ILocalVariableDataGetter rhs,
            LocalVariableData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Index = item.Index == rhs.Index;
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
        }
        
        public string ToString(
            ILocalVariableDataGetter item,
            string? name = null,
            LocalVariableData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILocalVariableDataGetter item,
            FileGeneration fg,
            string? name = null,
            LocalVariableData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LocalVariableData =>");
            }
            else
            {
                fg.AppendLine($"{name} (LocalVariableData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILocalVariableDataGetter item,
            FileGeneration fg,
            LocalVariableData.Mask<bool>? printMask = null)
        {
            if (printMask?.Index ?? true)
            {
                fg.AppendItem(item.Index, "Index");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
        }
        
        public bool HasBeenSet(
            ILocalVariableDataGetter item,
            LocalVariableData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ILocalVariableDataGetter item,
            LocalVariableData.Mask<bool> mask)
        {
            mask.Index = true;
            mask.Unknown = true;
            mask.Flags = true;
            mask.Unknown2 = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILocalVariableDataGetter? lhs,
            ILocalVariableDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Index != rhs.Index) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            return true;
        }
        
        public virtual int GetHashCode(ILocalVariableDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Index);
            hash.Add(item.Unknown);
            hash.Add(item.Flags);
            hash.Add(item.Unknown2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LocalVariableData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ILocalVariableDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(ILocalVariableDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class LocalVariableDataSetterTranslationCommon
    {
        public static readonly LocalVariableDataSetterTranslationCommon Instance = new LocalVariableDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILocalVariableData item,
            ILocalVariableDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
        }
        
        #endregion
        
        public LocalVariableData DeepCopy(
            ILocalVariableDataGetter item,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            LocalVariableData ret = (LocalVariableData)((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LocalVariableData DeepCopy(
            ILocalVariableDataGetter item,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            LocalVariableData ret = (LocalVariableData)((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LocalVariableData DeepCopy(
            ILocalVariableDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LocalVariableData ret = (LocalVariableData)((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LocalVariableData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocalVariableData_Registration.Instance;
        public static LocalVariableData_Registration Registration => LocalVariableData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocalVariableDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LocalVariableDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocalVariableDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocalVariableDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILocalVariableDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILocalVariableDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LocalVariableDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static LocalVariableDataXmlWriteTranslation Instance = new LocalVariableDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILocalVariableDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Index) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Index),
                    item: item.Index,
                    fieldIndex: (int)LocalVariableData_FieldIndex.Index,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)LocalVariableData_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Script.LocalVariableFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)LocalVariableData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Unknown2) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2,
                    fieldIndex: (int)LocalVariableData_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ILocalVariableDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LocalVariableData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LocalVariableData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILocalVariableDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ILocalVariableDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ILocalVariableDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class LocalVariableDataXmlCreateTranslation
    {
        public readonly static LocalVariableDataXmlCreateTranslation Instance = new LocalVariableDataXmlCreateTranslation();

        public static void FillPublicXml(
            ILocalVariableData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LocalVariableDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILocalVariableData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Index":
                    errorMask?.PushIndex((int)LocalVariableData_FieldIndex.Index);
                    try
                    {
                        item.Index = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)LocalVariableData_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 12,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)LocalVariableData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Script.LocalVariableFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown2":
                    errorMask?.PushIndex((int)LocalVariableData_FieldIndex.Unknown2);
                    try
                    {
                        item.Unknown2 = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LocalVariableDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILocalVariableDataGetter item,
            XElement node,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((LocalVariableDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LocalVariableData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILocalVariableDataGetter item,
            string path,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILocalVariableDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILocalVariableDataGetter item,
            Stream stream,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILocalVariableDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILocalVariableDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((LocalVariableDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ILocalVariableDataGetter item,
            XElement node,
            string? name = null,
            LocalVariableData.TranslationMask? translationMask = null)
        {
            ((LocalVariableDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ILocalVariableDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((LocalVariableDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILocalVariableDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((LocalVariableDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LocalVariableDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LocalVariableDataBinaryWriteTranslation Instance = new LocalVariableDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            ILocalVariableDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Index);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Script.LocalVariableFlag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            writer.Write(item.Unknown2);
        }

        public void Write(
            MutagenWriter writer,
            ILocalVariableDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.SLSD),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILocalVariableDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LocalVariableDataBinaryCreateTranslation
    {
        public readonly static LocalVariableDataBinaryCreateTranslation Instance = new LocalVariableDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILocalVariableData item,
            MutagenFrame frame)
        {
            item.Index = frame.ReadInt32();
            item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(12));
            item.Flags = EnumBinaryTranslation<Script.LocalVariableFlag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.Unknown2 = frame.ReadInt32();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LocalVariableDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILocalVariableDataGetter item,
            MutagenWriter writer)
        {
            ((LocalVariableDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LocalVariableDataBinaryOverlay :
        BinaryOverlay,
        ILocalVariableDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocalVariableData_Registration.Instance;
        public static LocalVariableData_Registration Registration => LocalVariableData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocalVariableDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocalVariableDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocalVariableDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILocalVariableDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILocalVariableDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILocalVariableDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => LocalVariableDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LocalVariableDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocalVariableDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LocalVariableDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Int32 Index => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x0, 0x4));
        public ReadOnlyMemorySlice<Byte> Unknown => _data.Span.Slice(0x4, 0xC).ToArray();
        public Script.LocalVariableFlag Flags => (Script.LocalVariableFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x10, 0x4));
        public Int32 Unknown2 => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x14, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LocalVariableDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LocalVariableDataBinaryOverlay LocalVariableDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LocalVariableDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x18 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static LocalVariableDataBinaryOverlay LocalVariableDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LocalVariableDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LocalVariableDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

