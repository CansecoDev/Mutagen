/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LocalVariableData : ILocalVariableData, ILoquiObject<LocalVariableData>, ILoquiObjectSetter, IEquatable<LocalVariableData>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocalVariableData_Registration.Instance;
        public static LocalVariableData_Registration Registration => LocalVariableData_Registration.Instance;

        #region Ctor
        public LocalVariableData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        protected INotifyingItem<Byte[]> _Data = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[24]);
        public INotifyingItem<Byte[]> Data_Property => _Data;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Data
        {
            get => this._Data.Item;
            set => this._Data.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> ILocalVariableData.Data_Property => this.Data_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> ILocalVariableDataGetter.Data_Property => this.Data_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => LocalVariableDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => LocalVariableDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => LocalVariableDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            LocalVariableDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<LocalVariableData>.GetEqualsMask(LocalVariableData rhs) => LocalVariableDataCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ILocalVariableDataGetter>.GetEqualsMask(ILocalVariableDataGetter rhs) => LocalVariableDataCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return LocalVariableDataCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            LocalVariableData_Mask<bool> printMask = null)
        {
            return LocalVariableDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            LocalVariableDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public LocalVariableData_Mask<bool> GetHasBeenSetMask()
        {
            return LocalVariableDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LocalVariableData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LocalVariableData rhs)
        {
            if (rhs == null) return false;
            if (!Data.EqualsFast(rhs.Data)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Data).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static LocalVariableData Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static LocalVariableData Create_XML(
            XElement root,
            out LocalVariableData_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (LocalVariableData Object, LocalVariableData_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            LocalVariableData_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LocalVariableData_ErrorMask()) : default(Func<LocalVariableData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static LocalVariableData Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static LocalVariableData Create_XML(
            string path,
            out LocalVariableData_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static LocalVariableData Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static LocalVariableData Create_XML(
            Stream stream,
            out LocalVariableData_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LocalVariableData, LocalVariableData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out LocalVariableData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LocalVariableData, LocalVariableData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out LocalVariableData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out LocalVariableData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out LocalVariableData_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as LocalVariableData_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out LocalVariableData_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out LocalVariableData_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            LocalVariableDataCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static LocalVariableData Create_XML_Internal(
            XElement root,
            Func<LocalVariableData_ErrorMask> errorMask)
        {
            var ret = new LocalVariableData();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            LocalVariableData item,
            XElement root,
            string name,
            Func<LocalVariableData_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Data":
                    item._Data.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)LocalVariableData_FieldIndex.Data,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LocalVariableData_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static LocalVariableData Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static LocalVariableData Create_Binary(
            MutagenFrame frame,
            out LocalVariableData_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (LocalVariableData Object, LocalVariableData_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            LocalVariableData_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LocalVariableData_ErrorMask()) : default(Func<LocalVariableData_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static LocalVariableData Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LocalVariableData Create_Binary(
            string path,
            out LocalVariableData_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static LocalVariableData Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LocalVariableData Create_Binary(
            Stream stream,
            out LocalVariableData_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out LocalVariableData_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as LocalVariableData_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out LocalVariableData_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out LocalVariableData_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            LocalVariableDataCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static LocalVariableData Create_Binary_Internal(
            MutagenFrame frame,
            Func<LocalVariableData_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new LocalVariableData();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    LocalVariableData_Registration.SLSD_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            LocalVariableData item,
            MutagenFrame frame,
            Func<LocalVariableData_ErrorMask> errorMask)
        {
            var DatatryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.SpawnWithLength(24),
                fieldIndex: (int)LocalVariableData_FieldIndex.Data,
                errorMask: errorMask);
            item._Data.SetIfSucceeded(DatatryGet);
        }

        #endregion

        public LocalVariableData Copy(
            LocalVariableData_CopyMask copyMask = null,
            ILocalVariableDataGetter def = null)
        {
            return LocalVariableData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LocalVariableData Copy(
            ILocalVariableData item,
            LocalVariableData_CopyMask copyMask = null,
            ILocalVariableDataGetter def = null)
        {
            LocalVariableData ret;
            if (item.GetType().Equals(typeof(LocalVariableData)))
            {
                ret = new LocalVariableData();
            }
            else
            {
                ret = (LocalVariableData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static LocalVariableData Copy_ToLoqui(
            ILocalVariableDataGetter item,
            LocalVariableData_CopyMask copyMask = null,
            ILocalVariableDataGetter def = null)
        {
            LocalVariableData ret;
            if (item.GetType().Equals(typeof(LocalVariableData)))
            {
                ret = new LocalVariableData() as LocalVariableData;
            }
            else
            {
                ret = (LocalVariableData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ILocalVariableDataGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ILocalVariableDataGetter rhs,
            LocalVariableData_CopyMask copyMask,
            ILocalVariableDataGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ILocalVariableDataGetter rhs,
            out LocalVariableData_ErrorMask errorMask,
            LocalVariableData_CopyMask copyMask = null,
            ILocalVariableDataGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            LocalVariableData_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new LocalVariableData_ErrorMask();
                }
                return retErrorMask;
            };
            LocalVariableDataCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    this._Data.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            LocalVariableDataCommon.Clear(this, cmds);
        }


        public static LocalVariableData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LocalVariableData();
            foreach (var pair in fields)
            {
                CopyInInternal_LocalVariableData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_LocalVariableData(LocalVariableData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LocalVariableData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    obj._Data.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, LocalVariableData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ILocalVariableData : ILocalVariableDataGetter, ILoquiClass<ILocalVariableData, ILocalVariableDataGetter>, ILoquiClass<LocalVariableData, ILocalVariableDataGetter>
    {
        new Byte[] Data { get; set; }
        new INotifyingItem<Byte[]> Data_Property { get; }

    }

    public partial interface ILocalVariableDataGetter : ILoquiObject
    {
        #region Data
        Byte[] Data { get; }
        INotifyingItemGetter<Byte[]> Data_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LocalVariableData_FieldIndex
    {
        Data = 0,
    }
    #endregion

    #region Registration
    public class LocalVariableData_Registration : ILoquiRegistration
    {
        public static readonly LocalVariableData_Registration Instance = new LocalVariableData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 49,
            version: 0);

        public const string GUID = "8a8822b6-e11c-400b-827d-6ca21f641629";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(LocalVariableData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LocalVariableData_ErrorMask);

        public static readonly Type ClassType = typeof(LocalVariableData);

        public static readonly Type GetterType = typeof(ILocalVariableDataGetter);

        public static readonly Type SetterType = typeof(ILocalVariableData);

        public static readonly Type CommonType = typeof(LocalVariableDataCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LocalVariableData";

        public const string Name = "LocalVariableData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DATA":
                    return (ushort)LocalVariableData_FieldIndex.Data;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    return "Data";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType SLSD_HEADER = new RecordType("SLSD");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SLSD_HEADER;
        public const int NumStructFields = 1;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LocalVariableDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ILocalVariableData item,
            ILocalVariableDataGetter rhs,
            ILocalVariableDataGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            LocalVariableData_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Data ?? true)
            {
                try
                {
                    item.Data_Property.Set(
                        value: rhs.Data,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LocalVariableData_FieldIndex.Data, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ILocalVariableData obj,
            NotifyingFireParameters cmds = null)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ILocalVariableData obj,
            NotifyingUnsetParameters cmds = null)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    obj.Data = default(Byte[]);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ILocalVariableData obj)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ILocalVariableDataGetter obj)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    return obj.Data;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ILocalVariableData item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Data = default(Byte[]);
        }

        public static LocalVariableData_Mask<bool> GetEqualsMask(
            this ILocalVariableDataGetter item,
            ILocalVariableDataGetter rhs)
        {
            var ret = new LocalVariableData_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ILocalVariableDataGetter item,
            ILocalVariableDataGetter rhs,
            LocalVariableData_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Data = item.Data.EqualsFast(rhs.Data);
        }

        public static string ToString(
            this ILocalVariableDataGetter item,
            string name = null,
            LocalVariableData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILocalVariableDataGetter item,
            FileGeneration fg,
            string name = null,
            LocalVariableData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LocalVariableData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LocalVariableData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Data ?? true)
                {
                    fg.AppendLine($"Data => {item.Data}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILocalVariableDataGetter item,
            LocalVariableData_Mask<bool?> checkMask)
        {
            return true;
        }

        public static LocalVariableData_Mask<bool> GetHasBeenSetMask(ILocalVariableDataGetter item)
        {
            var ret = new LocalVariableData_Mask<bool>();
            ret.Data = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ILocalVariableDataGetter item,
            bool doMasks,
            out LocalVariableData_ErrorMask errorMask,
            string name = null)
        {
            LocalVariableData_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LocalVariableData_ErrorMask()) : default(Func<LocalVariableData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            ILocalVariableDataGetter item,
            Func<LocalVariableData_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LocalVariableData");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LocalVariableData");
                }
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Data),
                    item: item.Data_Property,
                    fieldIndex: (int)LocalVariableData_FieldIndex.Data,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            LocalVariableData item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LocalVariableData_ErrorMask errorMask)
        {
            LocalVariableData_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LocalVariableData_ErrorMask()) : default(Func<LocalVariableData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            LocalVariableData item,
            RecordTypeConverter recordTypeConverter,
            Func<LocalVariableData_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: LocalVariableData_Registration.SLSD_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            LocalVariableData item,
            MutagenWriter writer,
            Func<LocalVariableData_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Data_Property,
                fieldIndex: (int)LocalVariableData_FieldIndex.Data,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class LocalVariableData_Mask<T> : IMask<T>, IEquatable<LocalVariableData_Mask<T>>
    {
        #region Ctors
        public LocalVariableData_Mask()
        {
        }

        public LocalVariableData_Mask(T initialValue)
        {
            this.Data = initialValue;
        }
        #endregion

        #region Members
        public T Data;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LocalVariableData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LocalVariableData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Data, rhs.Data)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Data?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Data)) return false;
            return true;
        }
        #endregion

        #region Translate
        public LocalVariableData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LocalVariableData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LocalVariableData_Mask<R> obj, Func<T, R> eval)
        {
            obj.Data = eval(this.Data);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LocalVariableData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LocalVariableData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LocalVariableData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Data ?? true)
                {
                    fg.AppendLine($"Data => {Data}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LocalVariableData_ErrorMask : IErrorMask, IErrorMask<LocalVariableData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Data;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    return Data;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    this.Data = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
            switch (enu)
            {
                case LocalVariableData_FieldIndex.Data:
                    this.Data = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Data != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("LocalVariableData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Data => {Data}");
        }
        #endregion

        #region Combine
        public LocalVariableData_ErrorMask Combine(LocalVariableData_ErrorMask rhs)
        {
            var ret = new LocalVariableData_ErrorMask();
            ret.Data = this.Data.Combine(rhs.Data);
            return ret;
        }
        public static LocalVariableData_ErrorMask Combine(LocalVariableData_ErrorMask lhs, LocalVariableData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class LocalVariableData_CopyMask
    {
        #region Members
        public bool Data;
        #endregion

    }
    #endregion




    #endregion

}
