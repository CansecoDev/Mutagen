/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LocalVariable : ILocalVariable, ILoquiObjectSetter, IEquatable<LocalVariable>
    {
        ILoquiRegistration ILoquiObject.Registration => LocalVariable_Registration.Instance;
        public static LocalVariable_Registration Registration => LocalVariable_Registration.Instance;

        #region Ctor
        public LocalVariable()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        private readonly INotifyingSetItem<LocalVariableData> _Data = new NotifyingSetItem<LocalVariableData>();
        public INotifyingSetItem<LocalVariableData> Data_Property => this._Data;
        LocalVariableData ILocalVariableGetter.Data => this.Data;
        public LocalVariableData Data { get => _Data.Item; set => _Data.Item = value; }
        INotifyingSetItem<LocalVariableData> ILocalVariable.Data_Property => this.Data_Property;
        INotifyingSetItemGetter<LocalVariableData> ILocalVariableGetter.Data_Property => this.Data_Property;
        #endregion
        #region Name
        protected readonly INotifyingSetItem<String> _Name = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> Name_Property => _Name;
        public String Name
        {
            get => this._Name.Item;
            set => this._Name.Set(value);
        }
        INotifyingSetItem<String> ILocalVariable.Name_Property => this.Name_Property;
        INotifyingSetItemGetter<String> ILocalVariableGetter.Name_Property => this.Name_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => LocalVariableCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => LocalVariableCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => LocalVariableCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            LocalVariableCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return LocalVariableCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            LocalVariable_Mask<bool> printMask = null)
        {
            return LocalVariableCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            LocalVariableCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public LocalVariable_Mask<bool> GetHasBeenSetMask()
        {
            return LocalVariableCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LocalVariable rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LocalVariable rhs)
        {
            if (rhs == null) return false;
            if (Data_Property.HasBeenSet != rhs.Data_Property.HasBeenSet) return false;
            if (Data_Property.HasBeenSet)
            {
                if (!object.Equals(Data, rhs.Data)) return false;
            }
            if (Name_Property.HasBeenSet != rhs.Name_Property.HasBeenSet) return false;
            if (Name_Property.HasBeenSet)
            {
                if (!object.Equals(Name, rhs.Name)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Data_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Data).CombineHashCode(ret);
            }
            if (Name_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static LocalVariable Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static LocalVariable Create_XML(
            XElement root,
            out LocalVariable_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static LocalVariable Create_XML(
            XElement root,
            bool doMasks,
            out LocalVariable_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (LocalVariable Object, LocalVariable_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            LocalVariable_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LocalVariable_ErrorMask()) : default(Func<LocalVariable_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static LocalVariable Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static LocalVariable Create_XML(
            string path,
            out LocalVariable_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static LocalVariable Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static LocalVariable Create_XML(
            Stream stream,
            out LocalVariable_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<LocalVariable, LocalVariable_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out LocalVariable_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<LocalVariable, LocalVariable_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out LocalVariable_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out LocalVariable_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out LocalVariable_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (LocalVariable_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out LocalVariable_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out LocalVariable_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            LocalVariableCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static LocalVariable Create_XML_Internal(
            XElement root,
            Func<LocalVariable_ErrorMask> errorMask)
        {
            var ret = new LocalVariable();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            LocalVariable item,
            XElement root,
            string name,
            Func<LocalVariable_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Data":
                    item._Data.SetIfSucceeded(LoquiXmlTranslation<LocalVariableData, LocalVariableData_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)LocalVariable_FieldIndex.Data,
                        errorMask: errorMask));
                    break;
                case "Name":
                    item._Name.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)LocalVariable_FieldIndex.Name,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static LocalVariable Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static LocalVariable Create_Binary(
            MutagenFrame frame,
            out LocalVariable_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static LocalVariable Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out LocalVariable_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (LocalVariable Object, LocalVariable_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            LocalVariable_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LocalVariable_ErrorMask()) : default(Func<LocalVariable_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static LocalVariable Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LocalVariable Create_Binary(
            string path,
            out LocalVariable_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static LocalVariable Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LocalVariable Create_Binary(
            Stream stream,
            out LocalVariable_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<LocalVariable, LocalVariable_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out LocalVariable_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<LocalVariable, LocalVariable_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out LocalVariable_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out LocalVariable_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out LocalVariable_ErrorMask errorMask)
        {
            errorMask = (LocalVariable_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out LocalVariable_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out LocalVariable_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            LocalVariableCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static LocalVariable Create_Binary_Internal(
            MutagenFrame frame,
            Func<LocalVariable_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new LocalVariable();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    LocalVariable_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            LocalVariable item,
            MutagenFrame frame,
            Func<LocalVariable_ErrorMask> errorMask)
        {
        }

        protected static TryGet<LocalVariable_FieldIndex?> Fill_Binary_RecordTypes(
            LocalVariable item,
            MutagenFrame frame,
            LocalVariable_FieldIndex? lastParsed,
            Func<LocalVariable_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "SLSD":
                    if (lastParsed.HasValue && lastParsed.Value >= LocalVariable_FieldIndex.Data) return TryGet<LocalVariable_FieldIndex?>.Failure;
                    item._Data.SetIfSucceeded(LoquiBinaryTranslation<LocalVariableData, LocalVariableData_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)LocalVariable_FieldIndex.Data,
                        errorMask: errorMask));
                    return TryGet<LocalVariable_FieldIndex?>.Succeed(LocalVariable_FieldIndex.Data);
                case "SCVR":
                    if (lastParsed.HasValue && lastParsed.Value >= LocalVariable_FieldIndex.Name) return TryGet<LocalVariable_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var NametryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)LocalVariable_FieldIndex.Name,
                        errorMask: errorMask);
                    item._Name.SetIfSucceeded(NametryGet);
                    return TryGet<LocalVariable_FieldIndex?>.Succeed(LocalVariable_FieldIndex.Name);
                default:
                    return TryGet<LocalVariable_FieldIndex?>.Failure;
            }
        }

        #endregion

        public LocalVariable Copy(
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null)
        {
            return LocalVariable.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LocalVariable Copy(
            ILocalVariable item,
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null)
        {
            LocalVariable ret;
            if (item.GetType().Equals(typeof(LocalVariable)))
            {
                ret = new LocalVariable();
            }
            else
            {
                ret = (LocalVariable)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null)
            where CopyType : class, ILocalVariable
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(LocalVariable)))
            {
                ret = new LocalVariable() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static LocalVariable Copy_ToLoqui(
            ILocalVariableGetter item,
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null)
        {
            LocalVariable ret;
            if (item.GetType().Equals(typeof(LocalVariable)))
            {
                ret = new LocalVariable() as LocalVariable;
            }
            else
            {
                ret = (LocalVariable)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    this._Data.Set(
                        (LocalVariableData)obj,
                        cmds);
                    break;
                case LocalVariable_FieldIndex.Name:
                    this._Name.Set(
                        (String)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            LocalVariableCommon.Clear(this, cmds);
        }


        public static LocalVariable Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LocalVariable();
            foreach (var pair in fields)
            {
                CopyInInternal_LocalVariable(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_LocalVariable(LocalVariable obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LocalVariable_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    obj._Data.Set(
                        (LocalVariableData)pair.Value,
                        null);
                    break;
                case LocalVariable_FieldIndex.Name:
                    obj._Name.Set(
                        (String)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, LocalVariable obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ILocalVariable : ILocalVariableGetter, ILoquiClass<ILocalVariable, ILocalVariableGetter>, ILoquiClass<LocalVariable, ILocalVariableGetter>
    {
        new LocalVariableData Data { get; set; }
        new INotifyingSetItem<LocalVariableData> Data_Property { get; }

        new String Name { get; set; }
        new INotifyingSetItem<String> Name_Property { get; }

    }

    public interface ILocalVariableGetter : ILoquiObject
    {
        #region Data
        LocalVariableData Data { get; }
        INotifyingSetItemGetter<LocalVariableData> Data_Property { get; }

        #endregion
        #region Name
        String Name { get; }
        INotifyingSetItemGetter<String> Name_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LocalVariable_FieldIndex
    {
        Data = 0,
        Name = 1,
    }
    #endregion

    #region Registration
    public class LocalVariable_Registration : ILoquiRegistration
    {
        public static readonly LocalVariable_Registration Instance = new LocalVariable_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 48,
            version: 0);

        public const string GUID = "b77aa416-b182-4265-8276-44b34bace18f";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(LocalVariable_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LocalVariable_ErrorMask);

        public static readonly Type ClassType = typeof(LocalVariable);

        public static readonly Type GetterType = typeof(ILocalVariableGetter);

        public static readonly Type SetterType = typeof(ILocalVariable);

        public static readonly Type CommonType = typeof(LocalVariableCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LocalVariable";

        public const string Name = "LocalVariable";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DATA":
                    return (ushort)LocalVariable_FieldIndex.Data;
                case "NAME":
                    return (ushort)LocalVariable_FieldIndex.Name;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                case LocalVariable_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    return true;
                case LocalVariable_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                case LocalVariable_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    return "Data";
                case LocalVariable_FieldIndex.Name:
                    return "Name";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                case LocalVariable_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                case LocalVariable_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    return typeof(LocalVariableData);
                case LocalVariable_FieldIndex.Name:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType SLSD_HEADER = new RecordType("SLSD");
        public static readonly RecordType SCVR_HEADER = new RecordType("SCVR");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        SLSD_HEADER,
                        SCVR_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LocalVariableCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ILocalVariable item,
            ILocalVariableGetter rhs,
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            LocalVariableCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ILocalVariable item,
            ILocalVariableGetter rhs,
            out LocalVariable_ErrorMask errorMask,
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            LocalVariableCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ILocalVariable item,
            ILocalVariableGetter rhs,
            ILocalVariableGetter def,
            bool doMasks,
            out LocalVariable_ErrorMask errorMask,
            LocalVariable_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            LocalVariable_ErrorMask retErrorMask = null;
            Func<LocalVariable_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new LocalVariable_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ILocalVariable item,
            ILocalVariableGetter rhs,
            ILocalVariableGetter def,
            bool doMasks,
            Func<LocalVariable_ErrorMask> errorMask,
            LocalVariable_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Data.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Data_Property.SetToWithDefault(
                        rhs.Data_Property,
                        def?.Data_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Data.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    LocalVariableDataCommon.CopyFieldsFrom(
                                        item: item.Data,
                                        rhs: rhs.Data,
                                        def: def?.Data,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<LocalVariableData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Data.Specific == null)
                                            {
                                                baseMask.Data = new MaskItem<Exception, LocalVariableData_ErrorMask>(null, new LocalVariableData_ErrorMask());
                                            }
                                            return baseMask.Data.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Data.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(LocalVariableData);
                                    return LocalVariableData.Copy(
                                        r,
                                        copyMask?.Data?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Data?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LocalVariable_FieldIndex.Data, ex);
                }
            }
            if (copyMask?.Name ?? true)
            {
                try
                {
                    item.Name_Property.SetToWithDefault(
                        rhs: rhs.Name_Property,
                        def: def?.Name_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)LocalVariable_FieldIndex.Name, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ILocalVariable obj,
            NotifyingFireParameters? cmds = null)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    obj.Data_Property.HasBeenSet = on;
                    break;
                case LocalVariable_FieldIndex.Name:
                    obj.Name_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ILocalVariable obj,
            NotifyingUnsetParameters? cmds = null)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    obj.Data_Property.Unset(cmds);
                    break;
                case LocalVariable_FieldIndex.Name:
                    obj.Name_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ILocalVariable obj)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    return obj.Data_Property.HasBeenSet;
                case LocalVariable_FieldIndex.Name:
                    return obj.Name_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ILocalVariableGetter obj)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    return obj.Data;
                case LocalVariable_FieldIndex.Name:
                    return obj.Name;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ILocalVariable item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Data_Property.Unset(cmds.ToUnsetParams());
            item.Name_Property.Unset(cmds.ToUnsetParams());
        }

        public static LocalVariable_Mask<bool> GetEqualsMask(
            this ILocalVariableGetter item,
            ILocalVariableGetter rhs)
        {
            var ret = new LocalVariable_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ILocalVariableGetter item,
            ILocalVariableGetter rhs,
            LocalVariable_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Data = item.Data_Property.LoquiEqualsHelper(rhs.Data_Property, (loqLhs, loqRhs) => LocalVariableDataCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Name = item.Name_Property.Equals(rhs.Name_Property, (l, r) => object.Equals(l, r));
        }

        public static string ToString(
            this ILocalVariableGetter item,
            string name = null,
            LocalVariable_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILocalVariableGetter item,
            FileGeneration fg,
            string name = null,
            LocalVariable_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LocalVariable)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LocalVariable)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Data?.Overall ?? true)
                {
                    item.Data?.ToString(fg, "Data");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILocalVariableGetter item,
            LocalVariable_Mask<bool?> checkMask)
        {
            if (checkMask.Data.Overall.HasValue && checkMask.Data.Overall.Value != item.Data_Property.HasBeenSet) return false;
            if (checkMask.Data.Specific != null && (item.Data_Property.Item == null || !item.Data_Property.Item.HasBeenSet(checkMask.Data.Specific))) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_Property.HasBeenSet) return false;
            return true;
        }

        public static LocalVariable_Mask<bool> GetHasBeenSetMask(ILocalVariableGetter item)
        {
            var ret = new LocalVariable_Mask<bool>();
            ret.Data = new MaskItem<bool, LocalVariableData_Mask<bool>>(item.Data_Property.HasBeenSet, LocalVariableDataCommon.GetHasBeenSetMask(item.Data_Property.Item));
            ret.Name = item.Name_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ILocalVariableGetter item,
            bool doMasks,
            out LocalVariable_ErrorMask errorMask,
            string name = null)
        {
            LocalVariable_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LocalVariable_ErrorMask()) : default(Func<LocalVariable_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ILocalVariableGetter item,
            Func<LocalVariable_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.LocalVariable"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.LocalVariable");
                    }
                    if (item.Data_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<LocalVariableData, LocalVariableData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Data_Property,
                            name: nameof(item.Data),
                            fieldIndex: (int)LocalVariable_FieldIndex.Data,
                            errorMask: errorMask);
                    }
                    if (item.Name_Property.HasBeenSet)
                    {
                        StringXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Name),
                            item: item.Name_Property,
                            fieldIndex: (int)LocalVariable_FieldIndex.Name,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            LocalVariable item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LocalVariable_ErrorMask errorMask)
        {
            LocalVariable_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new LocalVariable_ErrorMask()) : default(Func<LocalVariable_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            LocalVariable item,
            RecordTypeConverter recordTypeConverter,
            Func<LocalVariable_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            LocalVariable item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<LocalVariable_ErrorMask> errorMask)
        {
            LoquiBinaryTranslation<LocalVariableData, LocalVariableData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Data_Property,
                fieldIndex: (int)LocalVariable_FieldIndex.Data,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name_Property,
                fieldIndex: (int)LocalVariable_FieldIndex.Name,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(LocalVariable_Registration.SCVR_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class LocalVariable_Mask<T> : IMask<T>, IEquatable<LocalVariable_Mask<T>>
    {
        #region Ctors
        public LocalVariable_Mask()
        {
        }

        public LocalVariable_Mask(T initialValue)
        {
            this.Data = new MaskItem<T, LocalVariableData_Mask<T>>(initialValue, new LocalVariableData_Mask<T>(initialValue));
            this.Name = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, LocalVariableData_Mask<T>> Data { get; set; }
        public T Name;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LocalVariable_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LocalVariable_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Data, rhs.Data)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Data?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (Data != null)
            {
                if (!eval(this.Data.Overall)) return false;
                if (this.Data.Specific != null && !this.Data.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Name)) return false;
            return true;
        }
        #endregion

        #region Translate
        public LocalVariable_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LocalVariable_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LocalVariable_Mask<R> obj, Func<T, R> eval)
        {
            if (this.Data != null)
            {
                obj.Data = new MaskItem<R, LocalVariableData_Mask<R>>();
                obj.Data.Overall = eval(this.Data.Overall);
                if (this.Data.Specific != null)
                {
                    obj.Data.Specific = this.Data.Specific.Translate(eval);
                }
            }
            obj.Name = eval(this.Name);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LocalVariable_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LocalVariable_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LocalVariable_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Data?.Overall ?? true)
                {
                    Data?.ToString(fg);
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LocalVariable_ErrorMask : IErrorMask, IErrorMask<LocalVariable_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, LocalVariableData_ErrorMask> Data;
        public Exception Name;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    this.Data = new MaskItem<Exception, LocalVariableData_ErrorMask>(ex, null);
                    break;
                case LocalVariable_FieldIndex.Name:
                    this.Name = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Data:
                    this.Data = (MaskItem<Exception, LocalVariableData_ErrorMask>)obj;
                    break;
                case LocalVariable_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Data != null) return true;
            if (Name != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("LocalVariable_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            Data?.ToString(fg);
            fg.AppendLine($"Name => {Name}");
        }
        #endregion

        #region Combine
        public LocalVariable_ErrorMask Combine(LocalVariable_ErrorMask rhs)
        {
            var ret = new LocalVariable_ErrorMask();
            ret.Data = new MaskItem<Exception, LocalVariableData_ErrorMask>(this.Data.Overall.Combine(rhs.Data.Overall), ((IErrorMask<LocalVariableData_ErrorMask>)this.Data.Specific).Combine(rhs.Data.Specific));
            ret.Name = this.Name.Combine(rhs.Name);
            return ret;
        }
        public static LocalVariable_ErrorMask Combine(LocalVariable_ErrorMask lhs, LocalVariable_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class LocalVariable_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, LocalVariableData_CopyMask> Data;
        public bool Name;
        #endregion

    }
    #endregion




    #endregion

}
