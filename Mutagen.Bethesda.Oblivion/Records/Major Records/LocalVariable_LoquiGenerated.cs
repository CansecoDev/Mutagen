/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LocalVariable : 
        LoquiNotifyingObject,
        ILocalVariable,
        ILoquiObject<LocalVariable>,
        ILoquiObjectSetter,
        IEquatable<LocalVariable>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocalVariable_Registration.Instance;
        public static LocalVariable_Registration Registration => LocalVariable_Registration.Instance;

        #region Ctor
        public LocalVariable()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        private Int32 _Index;
        public Int32 Index
        {
            get => this._Index;
            set
            {
                this.SLSDDataTypeState |= SLSDDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Index, value, nameof(Index));
            }
        }
        #endregion
        #region Fluff
        private Byte[] _Fluff = new byte[12];
        public Byte[] Fluff
        {
            get => _Fluff;
            set
            {
                this._Fluff = value;
                if (value == null)
                {
                    this._Fluff = new byte[12];
                }
            }
        }
        #endregion
        #region Flags
        private Script.LocalVariableFlag _Flags;
        public Script.LocalVariableFlag Flags
        {
            get => this._Flags;
            set
            {
                this.SLSDDataTypeState |= SLSDDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region Fluff2
        private Byte[] _Fluff2 = new byte[4];
        public Byte[] Fluff2
        {
            get => _Fluff2;
            set
            {
                this._Fluff2 = value;
                if (value == null)
                {
                    this._Fluff2 = new byte[4];
                }
            }
        }
        #endregion
        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)LocalVariable_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)LocalVariable_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool ILocalVariableGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String ILocalVariableGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)LocalVariable_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion

        IMask<bool> IEqualsMask<LocalVariable>.GetEqualsMask(LocalVariable rhs, EqualsMaskHelper.Include include) => LocalVariableCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ILocalVariableGetter>.GetEqualsMask(ILocalVariableGetter rhs, EqualsMaskHelper.Include include) => LocalVariableCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            LocalVariable_Mask<bool> printMask = null)
        {
            return LocalVariableCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            LocalVariableCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public LocalVariable_Mask<bool> GetHasBeenSetMask()
        {
            return LocalVariableCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LocalVariable rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LocalVariable rhs)
        {
            if (rhs == null) return false;
            if (this.Index != rhs.Index) return false;
            if (!ByteExt.EqualsFast(this.Fluff, rhs.Fluff)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (!ByteExt.EqualsFast(this.Fluff2, rhs.Fluff2)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!string.Equals(this.Name, rhs.Name)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Index).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff2).CombineHashCode(ret);
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static LocalVariable Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            LocalVariable_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LocalVariable Create_Xml(
            XElement node,
            out LocalVariable_ErrorMask errorMask,
            bool doMasks = true,
            LocalVariable_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LocalVariable_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LocalVariable Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new LocalVariable() : null;
                    break;
                default:
                    break;
            }
            var ret = new LocalVariable();
            try
            {
                foreach (var elem in node.Elements())
                {
                    LocalVariableCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static LocalVariable Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            LocalVariable_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LocalVariable Create_Xml(
            string path,
            out LocalVariable_ErrorMask errorMask,
            LocalVariable_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LocalVariable Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            LocalVariable_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LocalVariable Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            LocalVariable_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static LocalVariable Create_Xml(
            Stream stream,
            out LocalVariable_ErrorMask errorMask,
            LocalVariable_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LocalVariable Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            LocalVariable_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out LocalVariable_ErrorMask errorMask,
            bool doMasks = true,
            LocalVariable_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LocalVariable_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out LocalVariable_ErrorMask errorMask,
            LocalVariable_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out LocalVariable_ErrorMask errorMask,
            LocalVariable_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            LocalVariable_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            LocalVariableCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((LocalVariable_FieldIndex)index)
            {
                case LocalVariable_FieldIndex.Name:
                    return _hasBeenSetTracker[index];
                case LocalVariable_FieldIndex.Index:
                case LocalVariable_FieldIndex.Fluff:
                case LocalVariable_FieldIndex.Flags:
                case LocalVariable_FieldIndex.Fluff2:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LocalVariable_Registration.TRIGGERING_RECORD_TYPE;
        public SLSDDataType SLSDDataTypeState;
        [Flags]
        public enum SLSDDataType
        {
            Has = 1
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static LocalVariable Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LocalVariable Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out LocalVariable_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LocalVariable_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LocalVariable Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new LocalVariable();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out LocalVariable_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LocalVariable_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            LocalVariableCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            LocalVariable item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            LocalVariable item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44534C53: // SLSD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LocalVariable_FieldIndex.Fluff2) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.SLSDDataTypeState = SLSDDataType.Has;
                    }
                    if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Int32 IndexParse))
                    {
                        item.Index = IndexParse;
                    }
                    else
                    {
                        item.Index = default(Int32);
                    }
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(12),
                        item: out Byte[] FluffParse))
                    {
                        item.Fluff = FluffParse;
                    }
                    else
                    {
                        item.Fluff = default(Byte[]);
                    }
                    if (EnumBinaryTranslation<Script.LocalVariableFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out Script.LocalVariableFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Script.LocalVariableFlag);
                    }
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out Byte[] Fluff2Parse))
                    {
                        item.Fluff2 = Fluff2Parse;
                    }
                    else
                    {
                        item.Fluff2 = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)LocalVariable_FieldIndex.Fluff2);
                }
                case 0x52564353: // SCVR
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)LocalVariable_FieldIndex.Name);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public LocalVariable Copy(
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null)
        {
            return LocalVariable.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LocalVariable Copy(
            ILocalVariable item,
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null)
        {
            LocalVariable ret;
            if (item.GetType().Equals(typeof(LocalVariable)))
            {
                ret = new LocalVariable();
            }
            else
            {
                ret = (LocalVariable)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static LocalVariable Copy_ToLoqui(
            ILocalVariableGetter item,
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null)
        {
            LocalVariable ret;
            if (item.GetType().Equals(typeof(LocalVariable)))
            {
                ret = new LocalVariable() as LocalVariable;
            }
            else
            {
                ret = (LocalVariable)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(ILocalVariableGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ILocalVariableGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ILocalVariableGetter rhs,
            LocalVariable_CopyMask copyMask,
            ILocalVariableGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ILocalVariableGetter rhs,
            out LocalVariable_ErrorMask errorMask,
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LocalVariableCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = LocalVariable_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ILocalVariableGetter rhs,
            ErrorMaskBuilder errorMask,
            LocalVariable_CopyMask copyMask = null,
            ILocalVariableGetter def = null,
            bool doMasks = true)
        {
            LocalVariableCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                    this.Index = (Int32)obj;
                    break;
                case LocalVariable_FieldIndex.Fluff:
                    this.Fluff = (Byte[])obj;
                    break;
                case LocalVariable_FieldIndex.Flags:
                    this.Flags = (Script.LocalVariableFlag)obj;
                    break;
                case LocalVariable_FieldIndex.Fluff2:
                    this.Fluff2 = (Byte[])obj;
                    break;
                case LocalVariable_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            LocalVariableCommon.Clear(this);
        }


        public static LocalVariable Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LocalVariable();
            foreach (var pair in fields)
            {
                CopyInInternal_LocalVariable(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_LocalVariable(LocalVariable obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LocalVariable_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                    obj.Index = (Int32)pair.Value;
                    break;
                case LocalVariable_FieldIndex.Fluff:
                    obj.Fluff = (Byte[])pair.Value;
                    break;
                case LocalVariable_FieldIndex.Flags:
                    obj.Flags = (Script.LocalVariableFlag)pair.Value;
                    break;
                case LocalVariable_FieldIndex.Fluff2:
                    obj.Fluff2 = (Byte[])pair.Value;
                    break;
                case LocalVariable_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ILocalVariable : ILocalVariableGetter, ILoquiClass<ILocalVariable, ILocalVariableGetter>, ILoquiClass<LocalVariable, ILocalVariableGetter>
    {
        new Int32 Index { get; set; }

        new Byte[] Fluff { get; set; }

        new Script.LocalVariableFlag Flags { get; set; }

        new Byte[] Fluff2 { get; set; }

        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String item, bool hasBeenSet = true);
        void Name_Unset();

    }

    public partial interface ILocalVariableGetter : ILoquiObject
    {
        #region Index
        Int32 Index { get; }

        #endregion
        #region Fluff
        Byte[] Fluff { get; }

        #endregion
        #region Flags
        Script.LocalVariableFlag Flags { get; }

        #endregion
        #region Fluff2
        Byte[] Fluff2 { get; }

        #endregion
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LocalVariable_FieldIndex
    {
        Index = 0,
        Fluff = 1,
        Flags = 2,
        Fluff2 = 3,
        Name = 4,
    }
    #endregion

    #region Registration
    public class LocalVariable_Registration : ILoquiRegistration
    {
        public static readonly LocalVariable_Registration Instance = new LocalVariable_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 48,
            version: 0);

        public const string GUID = "b77aa416-b182-4265-8276-44b34bace18f";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(LocalVariable_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LocalVariable_ErrorMask);

        public static readonly Type ClassType = typeof(LocalVariable);

        public static readonly Type GetterType = typeof(ILocalVariableGetter);

        public static readonly Type SetterType = typeof(ILocalVariable);

        public static readonly Type CommonType = typeof(LocalVariableCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LocalVariable";

        public const string Name = "LocalVariable";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "INDEX":
                    return (ushort)LocalVariable_FieldIndex.Index;
                case "FLUFF":
                    return (ushort)LocalVariable_FieldIndex.Fluff;
                case "FLAGS":
                    return (ushort)LocalVariable_FieldIndex.Flags;
                case "FLUFF2":
                    return (ushort)LocalVariable_FieldIndex.Fluff2;
                case "NAME":
                    return (ushort)LocalVariable_FieldIndex.Name;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                case LocalVariable_FieldIndex.Fluff:
                case LocalVariable_FieldIndex.Flags:
                case LocalVariable_FieldIndex.Fluff2:
                case LocalVariable_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                case LocalVariable_FieldIndex.Fluff:
                case LocalVariable_FieldIndex.Flags:
                case LocalVariable_FieldIndex.Fluff2:
                case LocalVariable_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                case LocalVariable_FieldIndex.Fluff:
                case LocalVariable_FieldIndex.Flags:
                case LocalVariable_FieldIndex.Fluff2:
                case LocalVariable_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                    return "Index";
                case LocalVariable_FieldIndex.Fluff:
                    return "Fluff";
                case LocalVariable_FieldIndex.Flags:
                    return "Flags";
                case LocalVariable_FieldIndex.Fluff2:
                    return "Fluff2";
                case LocalVariable_FieldIndex.Name:
                    return "Name";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                case LocalVariable_FieldIndex.Fluff:
                case LocalVariable_FieldIndex.Flags:
                case LocalVariable_FieldIndex.Fluff2:
                case LocalVariable_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                case LocalVariable_FieldIndex.Fluff:
                case LocalVariable_FieldIndex.Flags:
                case LocalVariable_FieldIndex.Fluff2:
                case LocalVariable_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                    return typeof(Int32);
                case LocalVariable_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case LocalVariable_FieldIndex.Flags:
                    return typeof(Script.LocalVariableFlag);
                case LocalVariable_FieldIndex.Fluff2:
                    return typeof(Byte[]);
                case LocalVariable_FieldIndex.Name:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType SLSD_HEADER = new RecordType("SLSD");
        public static readonly RecordType SCVR_HEADER = new RecordType("SCVR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SLSD_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LocalVariableCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ILocalVariable item,
            ILocalVariableGetter rhs,
            ILocalVariableGetter def,
            ErrorMaskBuilder errorMask,
            LocalVariable_CopyMask copyMask)
        {
            if (copyMask?.Index ?? true)
            {
                errorMask?.PushIndex((int)LocalVariable_FieldIndex.Index);
                try
                {
                    item.Index = rhs.Index;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                errorMask?.PushIndex((int)LocalVariable_FieldIndex.Fluff);
                try
                {
                    item.Fluff = rhs.Fluff;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)LocalVariable_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff2 ?? true)
            {
                errorMask?.PushIndex((int)LocalVariable_FieldIndex.Fluff2);
                try
                {
                    item.Fluff2 = rhs.Fluff2;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)LocalVariable_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ILocalVariable item)
        {
            item.Index = default(Int32);
            item.Fluff = default(Byte[]);
            item.Flags = default(Script.LocalVariableFlag);
            item.Fluff2 = default(Byte[]);
            item.Name_Unset();
        }

        public static LocalVariable_Mask<bool> GetEqualsMask(
            this ILocalVariableGetter item,
            ILocalVariableGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LocalVariable_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ILocalVariableGetter item,
            ILocalVariableGetter rhs,
            LocalVariable_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Index = item.Index == rhs.Index;
            ret.Fluff = ByteExt.EqualsFast(item.Fluff, rhs.Fluff);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Fluff2 = ByteExt.EqualsFast(item.Fluff2, rhs.Fluff2);
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
        }

        public static string ToString(
            this ILocalVariableGetter item,
            string name = null,
            LocalVariable_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILocalVariableGetter item,
            FileGeneration fg,
            string name = null,
            LocalVariable_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LocalVariable)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LocalVariable)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Index ?? true)
                {
                    fg.AppendLine($"Index => {item.Index}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {item.Fluff2}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILocalVariableGetter item,
            LocalVariable_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            return true;
        }

        public static LocalVariable_Mask<bool> GetHasBeenSetMask(ILocalVariableGetter item)
        {
            var ret = new LocalVariable_Mask<bool>();
            ret.Index = true;
            ret.Fluff = true;
            ret.Flags = true;
            ret.Fluff2 = true;
            ret.Name = item.Name_IsSet;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            LocalVariable item,
            bool doMasks,
            out LocalVariable_ErrorMask errorMask,
            LocalVariable_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LocalVariable_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            LocalVariable item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LocalVariable");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LocalVariable");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this LocalVariable item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.SLSDDataTypeState.HasFlag(LocalVariable.SLSDDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)LocalVariable_FieldIndex.Index) ?? true))
                {
                    Int32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Index),
                        item: item.Index,
                        fieldIndex: (int)LocalVariable_FieldIndex.Index,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)LocalVariable_FieldIndex.Fluff) ?? true))
                {
                    ByteArrayXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff),
                        item: item.Fluff,
                        fieldIndex: (int)LocalVariable_FieldIndex.Fluff,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)LocalVariable_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Script.LocalVariableFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)LocalVariable_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)LocalVariable_FieldIndex.Fluff2) ?? true))
                {
                    ByteArrayXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff2),
                        item: item.Fluff2,
                        fieldIndex: (int)LocalVariable_FieldIndex.Fluff2,
                        errorMask: errorMask);
                }
            }
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)LocalVariable_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)LocalVariable_FieldIndex.Name,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this LocalVariable item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LocalVariableCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this LocalVariable item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Index":
                    try
                    {
                        errorMask?.PushIndex((int)LocalVariable_FieldIndex.Index);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 IndexParse,
                            errorMask: errorMask))
                        {
                            item.Index = IndexParse;
                        }
                        else
                        {
                            item.Index = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.SLSDDataTypeState |= LocalVariable.SLSDDataType.Has;
                    break;
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)LocalVariable_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.Fluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)LocalVariable_FieldIndex.Flags);
                        if (EnumXmlTranslation<Script.LocalVariableFlag>.Instance.Parse(
                            node: node,
                            item: out Script.LocalVariableFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Script.LocalVariableFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff2":
                    try
                    {
                        errorMask?.PushIndex((int)LocalVariable_FieldIndex.Fluff2);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] Fluff2Parse,
                            errorMask: errorMask))
                        {
                            item.Fluff2 = Fluff2Parse;
                        }
                        else
                        {
                            item.Fluff2 = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)LocalVariable_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            LocalVariable item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LocalVariable_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = LocalVariable_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            LocalVariable item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            LocalVariable item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.SLSDDataTypeState.HasFlag(LocalVariable.SLSDDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(LocalVariable_Registration.SLSD_HEADER)))
                {
                    Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Index);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fluff);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Script.LocalVariableFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fluff2);
                }
            }
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(LocalVariable_Registration.SCVR_HEADER),
                    nullable: false);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class LocalVariable_Mask<T> : IMask<T>, IEquatable<LocalVariable_Mask<T>>
    {
        #region Ctors
        public LocalVariable_Mask()
        {
        }

        public LocalVariable_Mask(T initialValue)
        {
            this.Index = initialValue;
            this.Fluff = initialValue;
            this.Flags = initialValue;
            this.Fluff2 = initialValue;
            this.Name = initialValue;
        }
        #endregion

        #region Members
        public T Index;
        public T Fluff;
        public T Flags;
        public T Fluff2;
        public T Name;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LocalVariable_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LocalVariable_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Index, rhs.Index)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Fluff2, rhs.Fluff2)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Index?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff2?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Index)) return false;
            if (!eval(this.Fluff)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Fluff2)) return false;
            if (!eval(this.Name)) return false;
            return true;
        }
        #endregion

        #region Translate
        public LocalVariable_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LocalVariable_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LocalVariable_Mask<R> obj, Func<T, R> eval)
        {
            obj.Index = eval(this.Index);
            obj.Fluff = eval(this.Fluff);
            obj.Flags = eval(this.Flags);
            obj.Fluff2 = eval(this.Fluff2);
            obj.Name = eval(this.Name);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LocalVariable_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LocalVariable_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LocalVariable_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Index ?? true)
                {
                    fg.AppendLine($"Index => {Index}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Fluff2 ?? true)
                {
                    fg.AppendLine($"Fluff2 => {Fluff2}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LocalVariable_ErrorMask : IErrorMask, IErrorMask<LocalVariable_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Index;
        public Exception Fluff;
        public Exception Flags;
        public Exception Fluff2;
        public Exception Name;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                    return Index;
                case LocalVariable_FieldIndex.Fluff:
                    return Fluff;
                case LocalVariable_FieldIndex.Flags:
                    return Flags;
                case LocalVariable_FieldIndex.Fluff2:
                    return Fluff2;
                case LocalVariable_FieldIndex.Name:
                    return Name;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                    this.Index = ex;
                    break;
                case LocalVariable_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case LocalVariable_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case LocalVariable_FieldIndex.Fluff2:
                    this.Fluff2 = ex;
                    break;
                case LocalVariable_FieldIndex.Name:
                    this.Name = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            LocalVariable_FieldIndex enu = (LocalVariable_FieldIndex)index;
            switch (enu)
            {
                case LocalVariable_FieldIndex.Index:
                    this.Index = (Exception)obj;
                    break;
                case LocalVariable_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case LocalVariable_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case LocalVariable_FieldIndex.Fluff2:
                    this.Fluff2 = (Exception)obj;
                    break;
                case LocalVariable_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Index != null) return true;
            if (Fluff != null) return true;
            if (Flags != null) return true;
            if (Fluff2 != null) return true;
            if (Name != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("LocalVariable_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Index => {Index}");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Fluff2 => {Fluff2}");
            fg.AppendLine($"Name => {Name}");
        }
        #endregion

        #region Combine
        public LocalVariable_ErrorMask Combine(LocalVariable_ErrorMask rhs)
        {
            var ret = new LocalVariable_ErrorMask();
            ret.Index = this.Index.Combine(rhs.Index);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Fluff2 = this.Fluff2.Combine(rhs.Fluff2);
            ret.Name = this.Name.Combine(rhs.Name);
            return ret;
        }
        public static LocalVariable_ErrorMask Combine(LocalVariable_ErrorMask lhs, LocalVariable_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LocalVariable_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LocalVariable_ErrorMask();
        }
        #endregion

    }
    public class LocalVariable_CopyMask
    {
        public LocalVariable_CopyMask()
        {
        }

        public LocalVariable_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Index = defaultOn;
            this.Fluff = defaultOn;
            this.Flags = defaultOn;
            this.Fluff2 = defaultOn;
            this.Name = defaultOn;
        }

        #region Members
        public bool Index;
        public bool Fluff;
        public bool Flags;
        public bool Fluff2;
        public bool Name;
        #endregion

    }

    public class LocalVariable_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Index;
        public bool Fluff;
        public bool Flags;
        public bool Fluff2;
        public bool Name;
        #endregion

        #region Ctors
        public LocalVariable_TranslationMask()
        {
        }

        public LocalVariable_TranslationMask(bool defaultOn)
        {
            this.Index = defaultOn;
            this.Fluff = defaultOn;
            this.Flags = defaultOn;
            this.Fluff2 = defaultOn;
            this.Name = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Index, null));
            ret.Add((Fluff, null));
            ret.Add((Flags, null));
            ret.Add((Fluff2, null));
            ret.Add((Name, null));
        }
    }
    #endregion

    #endregion

}
