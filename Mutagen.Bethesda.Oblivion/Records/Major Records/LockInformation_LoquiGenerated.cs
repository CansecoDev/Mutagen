/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LockInformation : ILockInformation, ILoquiObject<LockInformation>, ILoquiObjectSetter, IEquatable<LockInformation>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LockInformation_Registration.Instance;
        public static LockInformation_Registration Registration => LockInformation_Registration.Instance;

        #region Ctor
        public LockInformation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LockLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _LockLevel = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> LockLevel_Property => _LockLevel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte LockLevel
        {
            get => this._LockLevel.Item;
            set => this._LockLevel.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> ILockInformation.LockLevel_Property => this.LockLevel_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> ILockInformationGetter.LockLevel_Property => this.LockLevel_Property;
        #endregion
        #region Fluff
        protected INotifyingItem<Byte[]> _Fluff = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[3]);
        public INotifyingItem<Byte[]> Fluff_Property => _Fluff;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Fluff
        {
            get => this._Fluff.Item;
            set => this._Fluff.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> ILockInformation.Fluff_Property => this.Fluff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> ILockInformationGetter.Fluff_Property => this.Fluff_Property;
        #endregion
        #region Key
        public FormIDLink<Key> Key_Property { get; } = new FormIDLink<Key>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Key Key { get => Key_Property.Item; set => Key_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Key> ILockInformationGetter.Key_Property => this.Key_Property;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<LockInformation.Flag> _Flags = NotifyingItem.Factory<LockInformation.Flag>();
        public INotifyingItem<LockInformation.Flag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LockInformation.Flag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<LockInformation.Flag> ILockInformation.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<LockInformation.Flag> ILockInformationGetter.Flags_Property => this.Flags_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => LockInformationCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => LockInformationCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => LockInformationCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            LockInformationCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<LockInformation>.GetEqualsMask(LockInformation rhs) => LockInformationCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ILockInformationGetter>.GetEqualsMask(ILockInformationGetter rhs) => LockInformationCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return LockInformationCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            LockInformation_Mask<bool> printMask = null)
        {
            return LockInformationCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            LockInformationCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public LockInformation_Mask<bool> GetHasBeenSetMask()
        {
            return LockInformationCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LockInformation rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LockInformation rhs)
        {
            if (rhs == null) return false;
            if (this.LockLevel != rhs.LockLevel) return false;
            if (!this.Fluff.EqualsFast(rhs.Fluff)) return false;
            if (!this.Key_Property.Equals(rhs.Key_Property)) return false;
            if (this.Flags != rhs.Flags) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(LockLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Key).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static LockInformation Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LockInformation Create_XML(
            XElement root,
            out LockInformation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = LockInformation_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static LockInformation Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new LockInformation();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static LockInformation Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static LockInformation Create_XML(
            string path,
            out LockInformation_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static LockInformation Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static LockInformation Create_XML(
            Stream stream,
            out LockInformation_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LockInformation>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out LockInformation_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<LockInformation>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = LockInformation_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out LockInformation_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out LockInformation_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out LockInformation_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = LockInformation_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out LockInformation_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out LockInformation_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            LockInformationCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            LockInformation item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "LockLevel":
                    ByteXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)LockInformation_FieldIndex.LockLevel,
                        item: item._LockLevel,
                        errorMask: errorMask);
                    break;
                case "Fluff":
                    ByteArrayXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)LockInformation_FieldIndex.Fluff,
                        item: item._Fluff,
                        errorMask: errorMask);
                    break;
                case "Key":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)LockInformation_FieldIndex.Key,
                        item: item.Key_Property,
                        errorMask: errorMask);
                    break;
                case "Flags":
                    EnumXmlTranslation<LockInformation.Flag>.Instance.ParseInto(
                        root,
                        fieldIndex: (int)LockInformation_FieldIndex.Flags,
                        item: item._Flags,
                        errorMask: errorMask);
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LockInformation_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Key_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static LockInformation Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LockInformation Create_Binary(
            MutagenFrame frame,
            out LockInformation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LockInformation_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static LockInformation Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new LockInformation();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    LockInformation_Registration.XLOC_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static LockInformation Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LockInformation Create_Binary(
            string path,
            out LockInformation_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static LockInformation Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static LockInformation Create_Binary(
            Stream stream,
            out LockInformation_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out LockInformation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LockInformation_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out LockInformation_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out LockInformation_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            LockInformationCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            LockInformation item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.ParseInto(
                frame: frame,
                item: item._LockLevel,
                fieldIndex: (int)LockInformation_FieldIndex.LockLevel,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.ParseInto(
                frame: frame.SpawnWithLength(3),
                item: item._Fluff,
                fieldIndex: (int)LockInformation_FieldIndex.Fluff,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                frame: frame,
                item: item.Key_Property,
                fieldIndex: (int)LockInformation_FieldIndex.Key,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<LockInformation.Flag>.Instance.ParseInto(
                frame: frame.SpawnWithLength(4),
                item: item._Flags,
                fieldIndex: (int)LockInformation_FieldIndex.Flags,
                errorMask: errorMask);
        }

        #endregion

        public LockInformation Copy(
            LockInformation_CopyMask copyMask = null,
            ILockInformationGetter def = null)
        {
            return LockInformation.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LockInformation Copy(
            ILockInformation item,
            LockInformation_CopyMask copyMask = null,
            ILockInformationGetter def = null)
        {
            LockInformation ret;
            if (item.GetType().Equals(typeof(LockInformation)))
            {
                ret = new LockInformation();
            }
            else
            {
                ret = (LockInformation)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static LockInformation Copy_ToLoqui(
            ILockInformationGetter item,
            LockInformation_CopyMask copyMask = null,
            ILockInformationGetter def = null)
        {
            LockInformation ret;
            if (item.GetType().Equals(typeof(LockInformation)))
            {
                ret = new LockInformation() as LockInformation;
            }
            else
            {
                ret = (LockInformation)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ILockInformationGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ILockInformationGetter rhs,
            LockInformation_CopyMask copyMask,
            ILockInformationGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ILockInformationGetter rhs,
            out LockInformation_ErrorMask errorMask,
            LockInformation_CopyMask copyMask = null,
            ILockInformationGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LockInformationCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = LockInformation_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ILockInformationGetter rhs,
            ErrorMaskBuilder errorMask,
            LockInformation_CopyMask copyMask = null,
            ILockInformationGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            LockInformationCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                    this._LockLevel.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case LockInformation_FieldIndex.Fluff:
                    this._Fluff.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case LockInformation_FieldIndex.Key:
                    this.Key_Property.Set(
                        (FormIDLink<Key>)obj,
                        cmds);
                    break;
                case LockInformation_FieldIndex.Flags:
                    this._Flags.Set(
                        (LockInformation.Flag)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            LockInformationCommon.Clear(this, cmds);
        }


        public static LockInformation Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LockInformation();
            foreach (var pair in fields)
            {
                CopyInInternal_LockInformation(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_LockInformation(LockInformation obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LockInformation_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                    obj._LockLevel.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case LockInformation_FieldIndex.Fluff:
                    obj._Fluff.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case LockInformation_FieldIndex.Key:
                    obj.Key_Property.Set(
                        (FormIDLink<Key>)pair.Value,
                        null);
                    break;
                case LockInformation_FieldIndex.Flags:
                    obj._Flags.Set(
                        (LockInformation.Flag)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, LockInformation obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ILockInformation : ILockInformationGetter, ILoquiClass<ILockInformation, ILockInformationGetter>, ILoquiClass<LockInformation, ILockInformationGetter>
    {
        new Byte LockLevel { get; set; }
        new INotifyingItem<Byte> LockLevel_Property { get; }

        new Byte[] Fluff { get; set; }
        new INotifyingItem<Byte[]> Fluff_Property { get; }

        new Key Key { get; set; }
        new LockInformation.Flag Flags { get; set; }
        new INotifyingItem<LockInformation.Flag> Flags_Property { get; }

    }

    public partial interface ILockInformationGetter : ILoquiObject
    {
        #region LockLevel
        Byte LockLevel { get; }
        INotifyingItemGetter<Byte> LockLevel_Property { get; }

        #endregion
        #region Fluff
        Byte[] Fluff { get; }
        INotifyingItemGetter<Byte[]> Fluff_Property { get; }

        #endregion
        #region Key
        Key Key { get; }
        FormIDLink<Key> Key_Property { get; }

        #endregion
        #region Flags
        LockInformation.Flag Flags { get; }
        INotifyingItemGetter<LockInformation.Flag> Flags_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LockInformation_FieldIndex
    {
        LockLevel = 0,
        Fluff = 1,
        Key = 2,
        Flags = 3,
    }
    #endregion

    #region Registration
    public class LockInformation_Registration : ILoquiRegistration
    {
        public static readonly LockInformation_Registration Instance = new LockInformation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 123,
            version: 0);

        public const string GUID = "46a1b7ce-4f49-4017-8beb-bef9481e5fd2";

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(LockInformation_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LockInformation_ErrorMask);

        public static readonly Type ClassType = typeof(LockInformation);

        public static readonly Type GetterType = typeof(ILockInformationGetter);

        public static readonly Type SetterType = typeof(ILockInformation);

        public static readonly Type CommonType = typeof(LockInformationCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LockInformation";

        public const string Name = "LockInformation";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "LOCKLEVEL":
                    return (ushort)LockInformation_FieldIndex.LockLevel;
                case "FLUFF":
                    return (ushort)LockInformation_FieldIndex.Fluff;
                case "KEY":
                    return (ushort)LockInformation_FieldIndex.Key;
                case "FLAGS":
                    return (ushort)LockInformation_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                case LockInformation_FieldIndex.Fluff:
                case LockInformation_FieldIndex.Key:
                case LockInformation_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                case LockInformation_FieldIndex.Fluff:
                case LockInformation_FieldIndex.Key:
                case LockInformation_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                case LockInformation_FieldIndex.Fluff:
                case LockInformation_FieldIndex.Key:
                case LockInformation_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                    return "LockLevel";
                case LockInformation_FieldIndex.Fluff:
                    return "Fluff";
                case LockInformation_FieldIndex.Key:
                    return "Key";
                case LockInformation_FieldIndex.Flags:
                    return "Flags";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                case LockInformation_FieldIndex.Fluff:
                case LockInformation_FieldIndex.Key:
                case LockInformation_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                case LockInformation_FieldIndex.Fluff:
                case LockInformation_FieldIndex.Key:
                case LockInformation_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                    return typeof(Byte);
                case LockInformation_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case LockInformation_FieldIndex.Key:
                    return typeof(FormIDLink<Key>);
                case LockInformation_FieldIndex.Flags:
                    return typeof(LockInformation.Flag);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType XLOC_HEADER = new RecordType("XLOC");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = XLOC_HEADER;
        public const int NumStructFields = 4;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LockInformationCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ILockInformation item,
            ILockInformationGetter rhs,
            ILockInformationGetter def,
            ErrorMaskBuilder errorMask,
            LockInformation_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.LockLevel ?? true)
            {
                errorMask.PushIndex((int)LockInformation_FieldIndex.LockLevel);
                try
                {
                    item.LockLevel_Property.Set(
                        value: rhs.LockLevel,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                errorMask.PushIndex((int)LockInformation_FieldIndex.Fluff);
                try
                {
                    item.Fluff_Property.Set(
                        value: rhs.Fluff,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Key ?? true)
            {
                errorMask.PushIndex((int)LockInformation_FieldIndex.Key);
                try
                {
                    item.Key_Property.Set(
                        value: rhs.Key,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)LockInformation_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ILockInformation obj,
            NotifyingFireParameters cmds = null)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                case LockInformation_FieldIndex.Fluff:
                case LockInformation_FieldIndex.Key:
                case LockInformation_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ILockInformation obj,
            NotifyingUnsetParameters cmds = null)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                    obj.LockLevel = default(Byte);
                    break;
                case LockInformation_FieldIndex.Fluff:
                    obj.Fluff = default(Byte[]);
                    break;
                case LockInformation_FieldIndex.Key:
                    obj.Key = default(FormIDLink<Key>);
                    break;
                case LockInformation_FieldIndex.Flags:
                    obj.Flags = default(LockInformation.Flag);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ILockInformation obj)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                case LockInformation_FieldIndex.Fluff:
                case LockInformation_FieldIndex.Key:
                case LockInformation_FieldIndex.Flags:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ILockInformationGetter obj)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                    return obj.LockLevel;
                case LockInformation_FieldIndex.Fluff:
                    return obj.Fluff;
                case LockInformation_FieldIndex.Key:
                    return obj.Key;
                case LockInformation_FieldIndex.Flags:
                    return obj.Flags;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ILockInformation item,
            NotifyingUnsetParameters cmds = null)
        {
            item.LockLevel = default(Byte);
            item.Fluff = default(Byte[]);
            item.Key = default(FormIDLink<Key>);
            item.Flags = default(LockInformation.Flag);
        }

        public static LockInformation_Mask<bool> GetEqualsMask(
            this ILockInformationGetter item,
            ILockInformationGetter rhs)
        {
            var ret = new LockInformation_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ILockInformationGetter item,
            ILockInformationGetter rhs,
            LockInformation_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.LockLevel = item.LockLevel == rhs.LockLevel;
            ret.Fluff = item.Fluff.EqualsFast(rhs.Fluff);
            ret.Key = item.Key == rhs.Key;
            ret.Flags = item.Flags == rhs.Flags;
        }

        public static string ToString(
            this ILockInformationGetter item,
            string name = null,
            LockInformation_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILockInformationGetter item,
            FileGeneration fg,
            string name = null,
            LockInformation_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LockInformation)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LockInformation)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.LockLevel ?? true)
                {
                    fg.AppendLine($"LockLevel => {item.LockLevel}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.Key ?? true)
                {
                    fg.AppendLine($"Key => {item.Key_Property}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILockInformationGetter item,
            LockInformation_Mask<bool?> checkMask)
        {
            return true;
        }

        public static LockInformation_Mask<bool> GetHasBeenSetMask(ILockInformationGetter item)
        {
            var ret = new LockInformation_Mask<bool>();
            ret.LockLevel = true;
            ret.Fluff = true;
            ret.Key = true;
            ret.Flags = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            ILockInformationGetter item,
            bool doMasks,
            out LockInformation_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = LockInformation_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            ILockInformationGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LockInformation");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LockInformation");
            }
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.LockLevel),
                item: item.LockLevel_Property,
                fieldIndex: (int)LockInformation_FieldIndex.LockLevel,
                errorMask: errorMask);
            ByteArrayXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Fluff),
                item: item.Fluff_Property,
                fieldIndex: (int)LockInformation_FieldIndex.Fluff,
                errorMask: errorMask);
            FormIDXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Key),
                item: item.Key?.FormID,
                fieldIndex: (int)LockInformation_FieldIndex.Key,
                errorMask: errorMask);
            EnumXmlTranslation<LockInformation.Flag>.Instance.Write(
                node: elem,
                name: nameof(item.Flags),
                item: item.Flags_Property,
                fieldIndex: (int)LockInformation_FieldIndex.Flags,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            LockInformation item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LockInformation_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = LockInformation_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            LockInformation item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LockInformation_Registration.XLOC_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            LockInformation item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LockLevel_Property,
                fieldIndex: (int)LockInformation_FieldIndex.LockLevel,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff_Property,
                fieldIndex: (int)LockInformation_FieldIndex.Fluff,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Key_Property,
                fieldIndex: (int)LockInformation_FieldIndex.Key,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<LockInformation.Flag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: 4,
                fieldIndex: (int)LockInformation_FieldIndex.Flags,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class LockInformation_Mask<T> : IMask<T>, IEquatable<LockInformation_Mask<T>>
    {
        #region Ctors
        public LockInformation_Mask()
        {
        }

        public LockInformation_Mask(T initialValue)
        {
            this.LockLevel = initialValue;
            this.Fluff = initialValue;
            this.Key = initialValue;
            this.Flags = initialValue;
        }
        #endregion

        #region Members
        public T LockLevel;
        public T Fluff;
        public T Key;
        public T Flags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LockInformation_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LockInformation_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.LockLevel, rhs.LockLevel)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.Key, rhs.Key)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.LockLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.Key?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.LockLevel)) return false;
            if (!eval(this.Fluff)) return false;
            if (!eval(this.Key)) return false;
            if (!eval(this.Flags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public LockInformation_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LockInformation_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LockInformation_Mask<R> obj, Func<T, R> eval)
        {
            obj.LockLevel = eval(this.LockLevel);
            obj.Fluff = eval(this.Fluff);
            obj.Key = eval(this.Key);
            obj.Flags = eval(this.Flags);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LockInformation_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LockInformation_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LockInformation_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.LockLevel ?? true)
                {
                    fg.AppendLine($"LockLevel => {LockLevel}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.Key ?? true)
                {
                    fg.AppendLine($"Key => {Key}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LockInformation_ErrorMask : IErrorMask, IErrorMask<LockInformation_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception LockLevel;
        public Exception Fluff;
        public Exception Key;
        public Exception Flags;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                    return LockLevel;
                case LockInformation_FieldIndex.Fluff:
                    return Fluff;
                case LockInformation_FieldIndex.Key:
                    return Key;
                case LockInformation_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                    this.LockLevel = ex;
                    break;
                case LockInformation_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case LockInformation_FieldIndex.Key:
                    this.Key = ex;
                    break;
                case LockInformation_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            LockInformation_FieldIndex enu = (LockInformation_FieldIndex)index;
            switch (enu)
            {
                case LockInformation_FieldIndex.LockLevel:
                    this.LockLevel = (Exception)obj;
                    break;
                case LockInformation_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case LockInformation_FieldIndex.Key:
                    this.Key = (Exception)obj;
                    break;
                case LockInformation_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (LockLevel != null) return true;
            if (Fluff != null) return true;
            if (Key != null) return true;
            if (Flags != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("LockInformation_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"LockLevel => {LockLevel}");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"Key => {Key}");
            fg.AppendLine($"Flags => {Flags}");
        }
        #endregion

        #region Combine
        public LockInformation_ErrorMask Combine(LockInformation_ErrorMask rhs)
        {
            var ret = new LockInformation_ErrorMask();
            ret.LockLevel = this.LockLevel.Combine(rhs.LockLevel);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.Key = this.Key.Combine(rhs.Key);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            return ret;
        }
        public static LockInformation_ErrorMask Combine(LockInformation_ErrorMask lhs, LockInformation_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LockInformation_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LockInformation_ErrorMask();
        }
        #endregion

    }
    public class LockInformation_CopyMask
    {
        #region Members
        public bool LockLevel;
        public bool Fluff;
        public bool Key;
        public bool Flags;
        #endregion

    }
    #endregion




    #endregion

}
