/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LogEntry : 
        LoquiNotifyingObject,
        ILogEntry,
        ILoquiObject<LogEntry>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<LogEntry>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LogEntry_Registration.Instance;
        public static LogEntry_Registration Registration => LogEntry_Registration.Instance;

        #region Ctor
        public LogEntry()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)LogEntry_FieldIndex.Flags];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)LogEntry_FieldIndex.Flags, nameof(Flags_IsSet));
        }
        bool ILogEntryGetter.Flags_IsSet => Flags_IsSet;
        private LogEntry.Flag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LogEntry.Flag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        LogEntry.Flag ILogEntryGetter.Flags => this.Flags;
        public void Flags_Set(
            LogEntry.Flag value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Flags, value, _hasBeenSetTracker, markSet, (int)LogEntry_FieldIndex.Flags, nameof(Flags), nameof(Flags_IsSet));
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(LogEntry.Flag), false);
        }
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Condition> _Conditions = new SourceSetList<Condition>();
        public ISourceSetList<Condition> Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Condition> ConditionsEnumerable
        {
            get => _Conditions.Items;
            set => _Conditions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<Condition> ILogEntry.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<Condition> ILogEntryGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Entry
        public bool Entry_IsSet
        {
            get => _hasBeenSetTracker[(int)LogEntry_FieldIndex.Entry];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)LogEntry_FieldIndex.Entry, nameof(Entry_IsSet));
        }
        bool ILogEntryGetter.Entry_IsSet => Entry_IsSet;
        private String _Entry;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Entry
        {
            get => this._Entry;
            set => Entry_Set(value);
        }
        String ILogEntryGetter.Entry => this.Entry;
        public void Entry_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Entry, value, _hasBeenSetTracker, markSet, (int)LogEntry_FieldIndex.Entry, nameof(Entry), nameof(Entry_IsSet));
        }
        public void Entry_Unset()
        {
            this.Entry_Set(default(String), false);
        }
        #endregion
        #region ResultScript
        public bool ResultScript_IsSet
        {
            get => _hasBeenSetTracker[(int)LogEntry_FieldIndex.ResultScript];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)LogEntry_FieldIndex.ResultScript, nameof(ResultScript_IsSet));
        }
        bool ILogEntryGetter.ResultScript_IsSet => ResultScript_IsSet;
        private ScriptFields _ResultScript;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ScriptFields ResultScript
        {
            get => _ResultScript;
            set => ResultScript_Set(value);
        }
        public void ResultScript_Set(
            ScriptFields value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _ResultScript, value, _hasBeenSetTracker, markSet, (int)LogEntry_FieldIndex.ResultScript, nameof(ResultScript), nameof(ResultScript_IsSet));
        }
        public void ResultScript_Unset()
        {
            this.ResultScript_Set(default(ScriptFields), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ScriptFields ILogEntryGetter.ResultScript => this.ResultScript;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => LogEntryCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => LogEntryCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => LogEntryCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            LogEntryCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<LogEntry>.GetEqualsMask(LogEntry rhs) => LogEntryCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ILogEntryGetter>.GetEqualsMask(ILogEntryGetter rhs) => LogEntryCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            LogEntry_Mask<bool> printMask = null)
        {
            return LogEntryCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            LogEntryCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public LogEntry_Mask<bool> GetHasBeenSetMask()
        {
            return LogEntryCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is LogEntry rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LogEntry rhs)
        {
            if (rhs == null) return false;
            if (Flags_IsSet != rhs.Flags_IsSet) return false;
            if (Flags_IsSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            if (Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (Conditions.HasBeenSet)
            {
                if (!this.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            if (Entry_IsSet != rhs.Entry_IsSet) return false;
            if (Entry_IsSet)
            {
                if (!object.Equals(this.Entry, rhs.Entry)) return false;
            }
            if (ResultScript_IsSet != rhs.ResultScript_IsSet) return false;
            if (ResultScript_IsSet)
            {
                if (!object.Equals(this.ResultScript, rhs.ResultScript)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Conditions).CombineHashCode(ret);
            }
            if (Entry_IsSet)
            {
                ret = HashHelper.GetHashCode(Entry).CombineHashCode(ret);
            }
            if (ResultScript_IsSet)
            {
                ret = HashHelper.GetHashCode(ResultScript).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static LogEntry Create_Xml(
            XElement root,
            LogEntry_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LogEntry Create_Xml(
            XElement root,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true,
            LogEntry_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LogEntry Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new LogEntry();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static LogEntry Create_Xml(
            string path,
            LogEntry_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static LogEntry Create_Xml(
            string path,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LogEntry Create_Xml(
            Stream stream,
            LogEntry_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static LogEntry Create_Xml(
            Stream stream,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<LogEntry>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true,
            LogEntry_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            LogEntry_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            LogEntryCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            LogEntry item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.Flags);
                        if (EnumXmlTranslation<LogEntry.Flag>.Instance.Parse(
                            root: root,
                            item: out LogEntry.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(LogEntry.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            root: root,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Entry":
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.Entry);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String EntryParse,
                            errorMask: errorMask))
                        {
                            item.Entry = EntryParse;
                        }
                        else
                        {
                            item.Entry = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ResultScript":
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.ResultScript);
                        if (LoquiXmlTranslation<ScriptFields>.Instance.Parse(
                            root: root,
                            item: out ScriptFields ResultScriptParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)LogEntry_FieldIndex.ResultScript)))
                        {
                            item.ResultScript = ResultScriptParse;
                        }
                        else
                        {
                            item.ResultScript = default(ScriptFields);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((LogEntry_FieldIndex)index)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return _hasBeenSetTracker[index];
                case LogEntry_FieldIndex.Conditions:
                    return Conditions.HasBeenSet;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            if (ResultScript is ILinkSubContainer ResultScriptlinkCont)
            {
                foreach (var item in ResultScriptlinkCont.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            where M : IMod<M>
        {
            if (ResultScript is ILinkSubContainer ResultScriptlinkCont)
            {
                ResultScriptlinkCont?.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static LogEntry Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static LogEntry Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LogEntry Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new LogEntry();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            masterReferences: masterReferences,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static LogEntry Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static LogEntry Create_Binary(
            string path,
            MasterReferences masterReferences,
            out LogEntry_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        public static LogEntry Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static LogEntry Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out LogEntry_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        masterReferences: masterReferences,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out LogEntry_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    masterReferences: masterReferences,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            LogEntryCommon.Write_Binary(
                item: this,
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            LogEntry item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            LogEntry item,
            MutagenFrame frame,
            int? lastParsed,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x54445351: // QSDT
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Flags) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.Flags);
                        if (EnumBinaryTranslation<LogEntry.Flag>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out LogEntry.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(LogEntry.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Flags);
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Conditions) return TryGet<int?>.Failure;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)LogEntry_FieldIndex.Conditions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Condition listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Conditions);
                case 0x4D414E43: // CNAM
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Entry) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.Entry);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String EntryParse,
                            errorMask: errorMask))
                        {
                            item.Entry = EntryParse;
                        }
                        else
                        {
                            item.Entry = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Entry);
                case 0x52484353: // SCHR
                case 0x41444353: // SCDA
                case 0x58544353: // SCTX
                case 0x44534C53: // SLSD
                case 0x52564353: // SCVR
                case 0x56524353: // SCRV
                case 0x4F524353: // SCRO
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.ResultScript) return TryGet<int?>.Failure;
                    try
                    {
                        errorMask?.PushIndex((int)LogEntry_FieldIndex.ResultScript);
                        if (LoquiBinaryTranslation<ScriptFields>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            masterReferences: masterReferences,
                            item: out ScriptFields ResultScriptParse,
                            errorMask: errorMask))
                        {
                            item.ResultScript = ResultScriptParse;
                        }
                        else
                        {
                            item.ResultScript = default(ScriptFields);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.ResultScript);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public LogEntry Copy(
            LogEntry_CopyMask copyMask = null,
            ILogEntryGetter def = null)
        {
            return LogEntry.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static LogEntry Copy(
            ILogEntry item,
            LogEntry_CopyMask copyMask = null,
            ILogEntryGetter def = null)
        {
            LogEntry ret;
            if (item.GetType().Equals(typeof(LogEntry)))
            {
                ret = new LogEntry();
            }
            else
            {
                ret = (LogEntry)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static LogEntry Copy_ToLoqui(
            ILogEntryGetter item,
            LogEntry_CopyMask copyMask = null,
            ILogEntryGetter def = null)
        {
            LogEntry ret;
            if (item.GetType().Equals(typeof(LogEntry)))
            {
                ret = new LogEntry() as LogEntry;
            }
            else
            {
                ret = (LogEntry)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ILogEntryGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ILogEntryGetter rhs,
            LogEntry_CopyMask copyMask,
            ILogEntryGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ILogEntryGetter rhs,
            out LogEntry_ErrorMask errorMask,
            LogEntry_CopyMask copyMask = null,
            ILogEntryGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LogEntryCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ILogEntryGetter rhs,
            ErrorMaskBuilder errorMask,
            LogEntry_CopyMask copyMask = null,
            ILogEntryGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            LogEntryCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    this.Flags = (LogEntry.Flag)obj;
                    break;
                case LogEntry_FieldIndex.Conditions:
                    this._Conditions.SetTo((IEnumerable<Condition>)obj);
                    break;
                case LogEntry_FieldIndex.Entry:
                    this.Entry = (String)obj;
                    break;
                case LogEntry_FieldIndex.ResultScript:
                    this.ResultScript = (ScriptFields)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            LogEntryCommon.Clear(this, cmds);
        }


        public static LogEntry Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new LogEntry();
            foreach (var pair in fields)
            {
                CopyInInternal_LogEntry(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_LogEntry(LogEntry obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out LogEntry_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    obj.Flags = (LogEntry.Flag)pair.Value;
                    break;
                case LogEntry_FieldIndex.Conditions:
                    obj._Conditions.SetTo((IEnumerable<Condition>)pair.Value);
                    break;
                case LogEntry_FieldIndex.Entry:
                    obj.Entry = (String)pair.Value;
                    break;
                case LogEntry_FieldIndex.ResultScript:
                    obj.ResultScript = (ScriptFields)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, LogEntry obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ILogEntry : ILogEntryGetter, ILoquiClass<ILogEntry, ILogEntryGetter>, ILoquiClass<LogEntry, ILogEntryGetter>
    {
        new LogEntry.Flag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(LogEntry.Flag item, bool hasBeenSet = true);
        void Flags_Unset();

        new ISourceSetList<Condition> Conditions { get; }
        new String Entry { get; set; }
        new bool Entry_IsSet { get; set; }
        void Entry_Set(String item, bool hasBeenSet = true);
        void Entry_Unset();

        new ScriptFields ResultScript { get; set; }
        new bool ResultScript_IsSet { get; set; }
        void ResultScript_Set(ScriptFields item, bool hasBeenSet = true);
        void ResultScript_Unset();

    }

    public partial interface ILogEntryGetter : ILoquiObject
    {
        #region Flags
        LogEntry.Flag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region Conditions
        IObservableSetList<Condition> Conditions { get; }
        #endregion
        #region Entry
        String Entry { get; }
        bool Entry_IsSet { get; }

        #endregion
        #region ResultScript
        ScriptFields ResultScript { get; }
        bool ResultScript_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LogEntry_FieldIndex
    {
        Flags = 0,
        Conditions = 1,
        Entry = 2,
        ResultScript = 3,
    }
    #endregion

    #region Registration
    public class LogEntry_Registration : ILoquiRegistration
    {
        public static readonly LogEntry_Registration Instance = new LogEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 153,
            version: 0);

        public const string GUID = "c5072833-ef3f-418b-b86d-452f4bbd7617";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(LogEntry_Mask<>);

        public static readonly Type ErrorMaskType = typeof(LogEntry_ErrorMask);

        public static readonly Type ClassType = typeof(LogEntry);

        public static readonly Type GetterType = typeof(ILogEntryGetter);

        public static readonly Type SetterType = typeof(ILogEntry);

        public static readonly Type CommonType = typeof(LogEntryCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LogEntry";

        public const string Name = "LogEntry";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)LogEntry_FieldIndex.Flags;
                case "CONDITIONS":
                    return (ushort)LogEntry_FieldIndex.Conditions;
                case "ENTRY":
                    return (ushort)LogEntry_FieldIndex.Entry;
                case "RESULTSCRIPT":
                    return (ushort)LogEntry_FieldIndex.ResultScript;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Conditions:
                    return true;
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.ResultScript:
                    return true;
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Entry:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    return "Flags";
                case LogEntry_FieldIndex.Conditions:
                    return "Conditions";
                case LogEntry_FieldIndex.Entry:
                    return "Entry";
                case LogEntry_FieldIndex.ResultScript:
                    return "ResultScript";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    return typeof(LogEntry.Flag);
                case LogEntry_FieldIndex.Conditions:
                    return typeof(NotifyingList<Condition>);
                case LogEntry_FieldIndex.Entry:
                    return typeof(String);
                case LogEntry_FieldIndex.ResultScript:
                    return typeof(ScriptFields);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType QSDT_HEADER = new RecordType("QSDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCDA_HEADER = new RecordType("SCDA");
        public static readonly RecordType SCTX_HEADER = new RecordType("SCTX");
        public static readonly RecordType SLSD_HEADER = new RecordType("SLSD");
        public static readonly RecordType SCVR_HEADER = new RecordType("SCVR");
        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType SCRO_HEADER = new RecordType("SCRO");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        QSDT_HEADER,
                        CTDA_HEADER,
                        CTDT_HEADER,
                        CNAM_HEADER,
                        SCHR_HEADER,
                        SCDA_HEADER,
                        SCTX_HEADER,
                        SLSD_HEADER,
                        SCVR_HEADER,
                        SCRV_HEADER,
                        SCRO_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class LogEntryCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ILogEntry item,
            ILogEntryGetter rhs,
            ILogEntryGetter def,
            ErrorMaskBuilder errorMask,
            LogEntry_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(LogEntry.Flag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Conditions.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetToWithDefault(
                        rhs: rhs.Conditions,
                        def: def?.Conditions,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Conditions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return Condition.Copy(
                                        r,
                                        copyMask?.Conditions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Conditions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Entry ?? true)
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.Entry);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Entry,
                        rhsHasBeenSet: rhs.Entry_IsSet,
                        defItem: def?.Entry ?? default(String),
                        defHasBeenSet: def?.Entry_IsSet ?? false,
                        outRhsItem: out var rhsEntryItem,
                        outDefItem: out var defEntryItem))
                    {
                        item.Entry = rhsEntryItem;
                    }
                    else
                    {
                        item.Entry_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ResultScript.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.ResultScript);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ResultScript,
                        rhsHasBeenSet: rhs.ResultScript_IsSet,
                        defItem: def?.ResultScript,
                        defHasBeenSet: def?.ResultScript_IsSet ?? false,
                        outRhsItem: out var rhsResultScriptItem,
                        outDefItem: out var defResultScriptItem))
                    {
                        switch (copyMask?.ResultScript.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.ResultScript = rhsResultScriptItem;
                                break;
                            case CopyOption.CopyIn:
                                ScriptFieldsCommon.CopyFieldsFrom(
                                    item: item.ResultScript,
                                    rhs: rhs.ResultScript,
                                    def: def?.ResultScript,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.ResultScript.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.ResultScript = ScriptFields.Copy(
                                    rhsResultScriptItem,
                                    copyMask?.ResultScript?.Specific,
                                    def: defResultScriptItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.ResultScript?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.ResultScript_IsSet = false;
                        item.ResultScript = default(ScriptFields);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ILogEntry obj,
            NotifyingFireParameters cmds = null)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    obj.Flags_IsSet = on;
                    break;
                case LogEntry_FieldIndex.Conditions:
                    obj.Conditions.HasBeenSet = on;
                    break;
                case LogEntry_FieldIndex.Entry:
                    obj.Entry_IsSet = on;
                    break;
                case LogEntry_FieldIndex.ResultScript:
                    obj.ResultScript_IsSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ILogEntry obj,
            NotifyingUnsetParameters cmds = null)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    obj.Flags_Unset();
                    break;
                case LogEntry_FieldIndex.Conditions:
                    obj.Conditions.Unset();
                    break;
                case LogEntry_FieldIndex.Entry:
                    obj.Entry_Unset();
                    break;
                case LogEntry_FieldIndex.ResultScript:
                    obj.ResultScript_Unset();
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ILogEntry obj)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    return obj.Flags_IsSet;
                case LogEntry_FieldIndex.Conditions:
                    return obj.Conditions.HasBeenSet;
                case LogEntry_FieldIndex.Entry:
                    return obj.Entry_IsSet;
                case LogEntry_FieldIndex.ResultScript:
                    return obj.ResultScript_IsSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ILogEntryGetter obj)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    return obj.Flags;
                case LogEntry_FieldIndex.Conditions:
                    return obj.Conditions;
                case LogEntry_FieldIndex.Entry:
                    return obj.Entry;
                case LogEntry_FieldIndex.ResultScript:
                    return obj.ResultScript;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ILogEntry item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Flags_Unset();
            item.Conditions.Unset();
            item.Entry_Unset();
            item.ResultScript_Unset();
        }

        public static LogEntry_Mask<bool> GetEqualsMask(
            this ILogEntryGetter item,
            ILogEntryGetter rhs)
        {
            var ret = new LogEntry_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ILogEntryGetter item,
            ILogEntryGetter rhs,
            LogEntry_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            if (item.Conditions.HasBeenSet == rhs.Conditions.HasBeenSet)
            {
                if (item.Conditions.HasBeenSet)
                {
                    ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                    ret.Conditions.Specific = item.Conditions.SelectAgainst<Condition, MaskItem<bool, Condition_Mask<bool>>>(rhs.Conditions, ((l, r) =>
                    {
                        MaskItem<bool, Condition_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Conditions.Overall);
                    ret.Conditions.Overall = ret.Conditions.Overall && ret.Conditions.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                    ret.Conditions.Overall = true;
                }
            }
            else
            {
                ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                ret.Conditions.Overall = false;
            }
            ret.Entry = item.Entry_IsSet == rhs.Entry_IsSet && object.Equals(item.Entry, rhs.Entry);
            ret.ResultScript = IHasBeenSetExt.LoquiEqualsHelper(item.ResultScript_IsSet, rhs.ResultScript_IsSet, item.ResultScript, rhs.ResultScript, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
        }

        public static string ToString(
            this ILogEntryGetter item,
            string name = null,
            LogEntry_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ILogEntryGetter item,
            FileGeneration fg,
            string name = null,
            LogEntry_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(LogEntry)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(LogEntry)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Conditions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Entry ?? true)
                {
                    fg.AppendLine($"Entry => {item.Entry}");
                }
                if (printMask?.ResultScript?.Overall ?? true)
                {
                    item.ResultScript?.ToString(fg, "ResultScript");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ILogEntryGetter item,
            LogEntry_Mask<bool?> checkMask)
        {
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            if (checkMask.Entry.HasValue && checkMask.Entry.Value != item.Entry_IsSet) return false;
            if (checkMask.ResultScript.Overall.HasValue && checkMask.ResultScript.Overall.Value != item.ResultScript_IsSet) return false;
            if (checkMask.ResultScript.Specific != null && (item.ResultScript == null || !item.ResultScript.HasBeenSet(checkMask.ResultScript.Specific))) return false;
            return true;
        }

        public static LogEntry_Mask<bool> GetHasBeenSetMask(ILogEntryGetter item)
        {
            var ret = new LogEntry_Mask<bool>();
            ret.Flags = item.Flags_IsSet;
            ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.Select((i) => new MaskItem<bool, Condition_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Entry = item.Entry_IsSet;
            ret.ResultScript = new MaskItem<bool, ScriptFields_Mask<bool>>(item.ResultScript_IsSet, ScriptFieldsCommon.GetHasBeenSetMask(item.ResultScript));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            LogEntry item,
            bool doMasks,
            out LogEntry_ErrorMask errorMask,
            LogEntry_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            LogEntry item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LogEntry");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LogEntry");
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<LogEntry.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)LogEntry_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<Condition>.Instance.Write(
                    node: elem,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)LogEntry_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LogEntry_FieldIndex.Conditions),
                    transl: (XElement subNode, Condition subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Condition>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.Entry_IsSet
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Entry) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Entry),
                    item: item.Entry,
                    fieldIndex: (int)LogEntry_FieldIndex.Entry,
                    errorMask: errorMask);
            }
            if (item.ResultScript_IsSet
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.ResultScript) ?? true))
            {
                LoquiXmlTranslation<ScriptFields>.Instance.Write(
                    node: elem,
                    item: item.ResultScript,
                    name: nameof(item.ResultScript),
                    fieldIndex: (int)LogEntry_FieldIndex.ResultScript,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LogEntry_FieldIndex.ResultScript));
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            LogEntry item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out LogEntry_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                masterReferences: masterReferences,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = LogEntry_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            LogEntry item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            LogEntry item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<LogEntry.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    fieldIndex: (int)LogEntry_FieldIndex.Flags,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(LogEntry_Registration.QSDT_HEADER),
                    nullable: false);
            }
            if (item.Conditions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.Write(
                    writer: writer,
                    items: item.Conditions,
                    fieldIndex: (int)LogEntry_FieldIndex.Conditions,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, Condition subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<Condition>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.Entry_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Entry,
                    fieldIndex: (int)LogEntry_FieldIndex.Entry,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(LogEntry_Registration.CNAM_HEADER),
                    nullable: false);
            }
            if (item.ResultScript_IsSet)
            {
                LoquiBinaryTranslation<ScriptFields>.Instance.Write(
                    writer: writer,
                    item: item.ResultScript,
                    fieldIndex: (int)LogEntry_FieldIndex.ResultScript,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class LogEntry_Mask<T> : IMask<T>, IEquatable<LogEntry_Mask<T>>
    {
        #region Ctors
        public LogEntry_Mask()
        {
        }

        public LogEntry_Mask(T initialValue)
        {
            this.Flags = initialValue;
            this.Conditions = new MaskItem<T, IEnumerable<MaskItem<T, Condition_Mask<T>>>>(initialValue, null);
            this.Entry = initialValue;
            this.ResultScript = new MaskItem<T, ScriptFields_Mask<T>>(initialValue, new ScriptFields_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItem<T, Condition_Mask<T>>>> Conditions;
        public T Entry;
        public MaskItem<T, ScriptFields_Mask<T>> ResultScript { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is LogEntry_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(LogEntry_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            if (!object.Equals(this.Entry, rhs.Entry)) return false;
            if (!object.Equals(this.ResultScript, rhs.ResultScript)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            ret = ret.CombineHashCode(this.Entry?.GetHashCode());
            ret = ret.CombineHashCode(this.ResultScript?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Flags)) return false;
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Entry)) return false;
            if (ResultScript != null)
            {
                if (!eval(this.ResultScript.Overall)) return false;
                if (this.ResultScript.Specific != null && !this.ResultScript.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public LogEntry_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new LogEntry_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(LogEntry_Mask<R> obj, Func<T, R> eval)
        {
            obj.Flags = eval(this.Flags);
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItem<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItem<R, Condition_Mask<R>>> l = new List<MaskItem<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific)
                    {
                        MaskItem<R, Condition_Mask<R>> mask = default(MaskItem<R, Condition_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Condition_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Entry = eval(this.Entry);
            if (this.ResultScript != null)
            {
                obj.ResultScript = new MaskItem<R, ScriptFields_Mask<R>>();
                obj.ResultScript.Overall = eval(this.ResultScript.Overall);
                if (this.ResultScript.Specific != null)
                {
                    obj.ResultScript.Specific = this.ResultScript.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Conditions.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(LogEntry_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, LogEntry_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(LogEntry_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Entry ?? true)
                {
                    fg.AppendLine($"Entry => {Entry}");
                }
                if (printMask?.ResultScript?.Overall ?? true)
                {
                    ResultScript?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class LogEntry_ErrorMask : IErrorMask, IErrorMask<LogEntry_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        public Exception Entry;
        public MaskItem<Exception, ScriptFields_ErrorMask> ResultScript;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    return Flags;
                case LogEntry_FieldIndex.Conditions:
                    return Conditions;
                case LogEntry_FieldIndex.Entry:
                    return Entry;
                case LogEntry_FieldIndex.ResultScript:
                    return ResultScript;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case LogEntry_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                case LogEntry_FieldIndex.Entry:
                    this.Entry = ex;
                    break;
                case LogEntry_FieldIndex.ResultScript:
                    this.ResultScript = new MaskItem<Exception, ScriptFields_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case LogEntry_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                case LogEntry_FieldIndex.Entry:
                    this.Entry = (Exception)obj;
                    break;
                case LogEntry_FieldIndex.ResultScript:
                    this.ResultScript = (MaskItem<Exception, ScriptFields_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Flags != null) return true;
            if (Conditions != null) return true;
            if (Entry != null) return true;
            if (ResultScript != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("LogEntry_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Entry => {Entry}");
            ResultScript?.ToString(fg);
        }
        #endregion

        #region Combine
        public LogEntry_ErrorMask Combine(LogEntry_ErrorMask rhs)
        {
            var ret = new LogEntry_ErrorMask();
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            ret.Entry = this.Entry.Combine(rhs.Entry);
            ret.ResultScript = new MaskItem<Exception, ScriptFields_ErrorMask>(this.ResultScript.Overall.Combine(rhs.ResultScript.Overall), ((IErrorMask<ScriptFields_ErrorMask>)this.ResultScript.Specific).Combine(rhs.ResultScript.Specific));
            return ret;
        }
        public static LogEntry_ErrorMask Combine(LogEntry_ErrorMask lhs, LogEntry_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static LogEntry_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new LogEntry_ErrorMask();
        }
        #endregion

    }
    public class LogEntry_CopyMask
    {
        #region Members
        public bool Flags;
        public MaskItem<CopyOption, Condition_CopyMask> Conditions;
        public bool Entry;
        public MaskItem<CopyOption, ScriptFields_CopyMask> ResultScript;
        #endregion

    }
    public class LogEntry_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Flags;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        public bool Entry;
        public MaskItem<bool, ScriptFields_TranslationMask> ResultScript;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Flags, null));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            ret.Add((Entry, null));
            ret.Add((ResultScript?.Overall ?? true, ResultScript?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
