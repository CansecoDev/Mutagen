/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MagicEffectSubData : 
        LoquiNotifyingObject,
        IMagicEffectSubData,
        ILoquiObject<MagicEffectSubData>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<MagicEffectSubData>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectSubData_Registration.Instance;
        public static MagicEffectSubData_Registration Registration => MagicEffectSubData_Registration.Instance;

        #region Ctor
        public MagicEffectSubData()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EnchantEffect
        public FormIDLink<EffectShader> EnchantEffect_Property { get; } = new FormIDLink<EffectShader>();
        public EffectShader EnchantEffect { get => EnchantEffect_Property.Item; set => EnchantEffect_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<EffectShader> IMagicEffectSubDataGetter.EnchantEffect_Property => this.EnchantEffect_Property;
        #endregion
        #region CastingSound
        public FormIDLink<Sound> CastingSound_Property { get; } = new FormIDLink<Sound>();
        public Sound CastingSound { get => CastingSound_Property.Item; set => CastingSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Sound> IMagicEffectSubDataGetter.CastingSound_Property => this.CastingSound_Property;
        #endregion
        #region BoltSound
        public FormIDLink<Sound> BoltSound_Property { get; } = new FormIDLink<Sound>();
        public Sound BoltSound { get => BoltSound_Property.Item; set => BoltSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Sound> IMagicEffectSubDataGetter.BoltSound_Property => this.BoltSound_Property;
        #endregion
        #region HitSound
        public FormIDLink<Sound> HitSound_Property { get; } = new FormIDLink<Sound>();
        public Sound HitSound { get => HitSound_Property.Item; set => HitSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Sound> IMagicEffectSubDataGetter.HitSound_Property => this.HitSound_Property;
        #endregion
        #region AreaSound
        public FormIDLink<Sound> AreaSound_Property { get; } = new FormIDLink<Sound>();
        public Sound AreaSound { get => AreaSound_Property.Item; set => AreaSound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Sound> IMagicEffectSubDataGetter.AreaSound_Property => this.AreaSound_Property;
        #endregion
        #region ConstantEffectEnchantmentFactor
        private Single _ConstantEffectEnchantmentFactor;
        public Single ConstantEffectEnchantmentFactor
        {
            get => this._ConstantEffectEnchantmentFactor;
            set => this.RaiseAndSetIfChanged(ref this._ConstantEffectEnchantmentFactor, value, nameof(ConstantEffectEnchantmentFactor));
        }
        #endregion
        #region ConstantEffectBarterFactor
        private Single _ConstantEffectBarterFactor;
        public Single ConstantEffectBarterFactor
        {
            get => this._ConstantEffectBarterFactor;
            set => this.RaiseAndSetIfChanged(ref this._ConstantEffectBarterFactor, value, nameof(ConstantEffectBarterFactor));
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => MagicEffectSubDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => MagicEffectSubDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => MagicEffectSubDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            MagicEffectSubDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<MagicEffectSubData>.GetEqualsMask(MagicEffectSubData rhs, EqualsMaskHelper.Include include) => MagicEffectSubDataCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IMagicEffectSubDataGetter>.GetEqualsMask(IMagicEffectSubDataGetter rhs, EqualsMaskHelper.Include include) => MagicEffectSubDataCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            MagicEffectSubData_Mask<bool> printMask = null)
        {
            return MagicEffectSubDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MagicEffectSubDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public MagicEffectSubData_Mask<bool> GetHasBeenSetMask()
        {
            return MagicEffectSubDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is MagicEffectSubData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MagicEffectSubData rhs)
        {
            if (rhs == null) return false;
            if (!this.EnchantEffect_Property.Equals(rhs.EnchantEffect_Property)) return false;
            if (!this.CastingSound_Property.Equals(rhs.CastingSound_Property)) return false;
            if (!this.BoltSound_Property.Equals(rhs.BoltSound_Property)) return false;
            if (!this.HitSound_Property.Equals(rhs.HitSound_Property)) return false;
            if (!this.AreaSound_Property.Equals(rhs.AreaSound_Property)) return false;
            if (!this.ConstantEffectEnchantmentFactor.EqualsWithin(rhs.ConstantEffectEnchantmentFactor)) return false;
            if (!this.ConstantEffectBarterFactor.EqualsWithin(rhs.ConstantEffectBarterFactor)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(EnchantEffect).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CastingSound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BoltSound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HitSound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AreaSound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ConstantEffectEnchantmentFactor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ConstantEffectBarterFactor).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static MagicEffectSubData Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            MagicEffectSubData_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MagicEffectSubData Create_Xml(
            XElement node,
            out MagicEffectSubData_ErrorMask errorMask,
            bool doMasks = true,
            MagicEffectSubData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MagicEffectSubData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MagicEffectSubData Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new MagicEffectSubData() : null;
                    break;
                default:
                    break;
            }
            var ret = new MagicEffectSubData();
            try
            {
                foreach (var elem in node.Elements())
                {
                    MagicEffectSubDataCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static MagicEffectSubData Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            MagicEffectSubData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffectSubData Create_Xml(
            string path,
            out MagicEffectSubData_ErrorMask errorMask,
            MagicEffectSubData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffectSubData Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            MagicEffectSubData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MagicEffectSubData Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            MagicEffectSubData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffectSubData Create_Xml(
            Stream stream,
            out MagicEffectSubData_ErrorMask errorMask,
            MagicEffectSubData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffectSubData Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            MagicEffectSubData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out MagicEffectSubData_ErrorMask errorMask,
            bool doMasks = true,
            MagicEffectSubData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffectSubData_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out MagicEffectSubData_ErrorMask errorMask,
            MagicEffectSubData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out MagicEffectSubData_ErrorMask errorMask,
            MagicEffectSubData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            MagicEffectSubData_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            MagicEffectSubDataCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((MagicEffectSubData_FieldIndex)index)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return EnchantEffect_Property;
            yield return CastingSound_Property;
            yield return BoltSound_Property;
            yield return HitSound_Property;
            yield return AreaSound_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            where M : IMod<M>
        {
            EnchantEffect_Property.Link(
                modList,
                sourceMod,
                cmds);
            CastingSound_Property.Link(
                modList,
                sourceMod,
                cmds);
            BoltSound_Property.Link(
                modList,
                sourceMod,
                cmds);
            HitSound_Property.Link(
                modList,
                sourceMod,
                cmds);
            AreaSound_Property.Link(
                modList,
                sourceMod,
                cmds);
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static MagicEffectSubData Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static MagicEffectSubData Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out MagicEffectSubData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MagicEffectSubData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MagicEffectSubData Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new MagicEffectSubData();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static MagicEffectSubData Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static MagicEffectSubData Create_Binary(
            string path,
            MasterReferences masterReferences,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MagicEffectSubData Create_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static MagicEffectSubData Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static MagicEffectSubData Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MagicEffectSubData Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MagicEffectSubData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MagicEffectSubData_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out MagicEffectSubData_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out MagicEffectSubData_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MagicEffectSubDataCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            MagicEffectSubData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                masterReferences: masterReferences,
                item: item.EnchantEffect_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.EnchantEffect,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                masterReferences: masterReferences,
                item: item.CastingSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.CastingSound,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                masterReferences: masterReferences,
                item: item.BoltSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.BoltSound,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                masterReferences: masterReferences,
                item: item.HitSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.HitSound,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                masterReferences: masterReferences,
                item: item.AreaSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.AreaSound,
                errorMask: errorMask);
            try
            {
                errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single ConstantEffectEnchantmentFactorParse,
                    errorMask: errorMask))
                {
                    item.ConstantEffectEnchantmentFactor = ConstantEffectEnchantmentFactorParse;
                }
                else
                {
                    item.ConstantEffectEnchantmentFactor = default(Single);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single ConstantEffectBarterFactorParse,
                    errorMask: errorMask))
                {
                    item.ConstantEffectBarterFactor = ConstantEffectBarterFactorParse;
                }
                else
                {
                    item.ConstantEffectBarterFactor = default(Single);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public MagicEffectSubData Copy(
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null)
        {
            return MagicEffectSubData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MagicEffectSubData Copy(
            IMagicEffectSubData item,
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null)
        {
            MagicEffectSubData ret;
            if (item.GetType().Equals(typeof(MagicEffectSubData)))
            {
                ret = new MagicEffectSubData();
            }
            else
            {
                ret = (MagicEffectSubData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static MagicEffectSubData Copy_ToLoqui(
            IMagicEffectSubDataGetter item,
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null)
        {
            MagicEffectSubData ret;
            if (item.GetType().Equals(typeof(MagicEffectSubData)))
            {
                ret = new MagicEffectSubData() as MagicEffectSubData;
            }
            else
            {
                ret = (MagicEffectSubData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IMagicEffectSubDataGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IMagicEffectSubDataGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IMagicEffectSubDataGetter rhs,
            MagicEffectSubData_CopyMask copyMask,
            IMagicEffectSubDataGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IMagicEffectSubDataGetter rhs,
            out MagicEffectSubData_ErrorMask errorMask,
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MagicEffectSubDataCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = MagicEffectSubData_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IMagicEffectSubDataGetter rhs,
            ErrorMaskBuilder errorMask,
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            MagicEffectSubDataCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    this.EnchantEffect_Property.Set(
                        (FormIDLink<EffectShader>)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    this.CastingSound_Property.Set(
                        (FormIDLink<Sound>)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    this.BoltSound_Property.Set(
                        (FormIDLink<Sound>)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    this.HitSound_Property.Set(
                        (FormIDLink<Sound>)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    this.AreaSound_Property.Set(
                        (FormIDLink<Sound>)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    this.ConstantEffectEnchantmentFactor = (Single)obj;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    this.ConstantEffectBarterFactor = (Single)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            MagicEffectSubDataCommon.Clear(this, cmds);
        }


        public static MagicEffectSubData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new MagicEffectSubData();
            foreach (var pair in fields)
            {
                CopyInInternal_MagicEffectSubData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_MagicEffectSubData(MagicEffectSubData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MagicEffectSubData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    obj.EnchantEffect_Property.Set(
                        (FormIDLink<EffectShader>)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    obj.CastingSound_Property.Set(
                        (FormIDLink<Sound>)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    obj.BoltSound_Property.Set(
                        (FormIDLink<Sound>)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    obj.HitSound_Property.Set(
                        (FormIDLink<Sound>)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    obj.AreaSound_Property.Set(
                        (FormIDLink<Sound>)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    obj.ConstantEffectEnchantmentFactor = (Single)pair.Value;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    obj.ConstantEffectBarterFactor = (Single)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, MagicEffectSubData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffectSubData : IMagicEffectSubDataGetter, ILoquiClass<IMagicEffectSubData, IMagicEffectSubDataGetter>, ILoquiClass<MagicEffectSubData, IMagicEffectSubDataGetter>
    {
        new EffectShader EnchantEffect { get; set; }
        new Sound CastingSound { get; set; }
        new Sound BoltSound { get; set; }
        new Sound HitSound { get; set; }
        new Sound AreaSound { get; set; }
        new Single ConstantEffectEnchantmentFactor { get; set; }

        new Single ConstantEffectBarterFactor { get; set; }

    }

    public partial interface IMagicEffectSubDataGetter : ILoquiObject
    {
        #region EnchantEffect
        EffectShader EnchantEffect { get; }
        FormIDLink<EffectShader> EnchantEffect_Property { get; }

        #endregion
        #region CastingSound
        Sound CastingSound { get; }
        FormIDLink<Sound> CastingSound_Property { get; }

        #endregion
        #region BoltSound
        Sound BoltSound { get; }
        FormIDLink<Sound> BoltSound_Property { get; }

        #endregion
        #region HitSound
        Sound HitSound { get; }
        FormIDLink<Sound> HitSound_Property { get; }

        #endregion
        #region AreaSound
        Sound AreaSound { get; }
        FormIDLink<Sound> AreaSound_Property { get; }

        #endregion
        #region ConstantEffectEnchantmentFactor
        Single ConstantEffectEnchantmentFactor { get; }

        #endregion
        #region ConstantEffectBarterFactor
        Single ConstantEffectBarterFactor { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MagicEffectSubData_FieldIndex
    {
        EnchantEffect = 0,
        CastingSound = 1,
        BoltSound = 2,
        HitSound = 3,
        AreaSound = 4,
        ConstantEffectEnchantmentFactor = 5,
        ConstantEffectBarterFactor = 6,
    }
    #endregion

    #region Registration
    public class MagicEffectSubData_Registration : ILoquiRegistration
    {
        public static readonly MagicEffectSubData_Registration Instance = new MagicEffectSubData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 56,
            version: 0);

        public const string GUID = "ebfe4657-51cf-4f56-95c9-8e3eee98fa5a";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(MagicEffectSubData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffectSubData_ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffectSubData);

        public static readonly Type GetterType = typeof(IMagicEffectSubDataGetter);

        public static readonly Type SetterType = typeof(IMagicEffectSubData);

        public static readonly Type CommonType = typeof(MagicEffectSubDataCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.MagicEffectSubData";

        public const string Name = "MagicEffectSubData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ENCHANTEFFECT":
                    return (ushort)MagicEffectSubData_FieldIndex.EnchantEffect;
                case "CASTINGSOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.CastingSound;
                case "BOLTSOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.BoltSound;
                case "HITSOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.HitSound;
                case "AREASOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.AreaSound;
                case "CONSTANTEFFECTENCHANTMENTFACTOR":
                    return (ushort)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor;
                case "CONSTANTEFFECTBARTERFACTOR":
                    return (ushort)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    return "EnchantEffect";
                case MagicEffectSubData_FieldIndex.CastingSound:
                    return "CastingSound";
                case MagicEffectSubData_FieldIndex.BoltSound:
                    return "BoltSound";
                case MagicEffectSubData_FieldIndex.HitSound:
                    return "HitSound";
                case MagicEffectSubData_FieldIndex.AreaSound:
                    return "AreaSound";
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return "ConstantEffectEnchantmentFactor";
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return "ConstantEffectBarterFactor";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    return typeof(FormIDLink<EffectShader>);
                case MagicEffectSubData_FieldIndex.CastingSound:
                    return typeof(FormIDLink<Sound>);
                case MagicEffectSubData_FieldIndex.BoltSound:
                    return typeof(FormIDLink<Sound>);
                case MagicEffectSubData_FieldIndex.HitSound:
                    return typeof(FormIDLink<Sound>);
                case MagicEffectSubData_FieldIndex.AreaSound:
                    return typeof(FormIDLink<Sound>);
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return typeof(Single);
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 7;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MagicEffectSubDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IMagicEffectSubData item,
            IMagicEffectSubDataGetter rhs,
            IMagicEffectSubDataGetter def,
            ErrorMaskBuilder errorMask,
            MagicEffectSubData_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.EnchantEffect ?? true)
            {
                errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.EnchantEffect);
                try
                {
                    item.EnchantEffect_Property.SetLink(
                        value: rhs.EnchantEffect_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CastingSound ?? true)
            {
                errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.CastingSound);
                try
                {
                    item.CastingSound_Property.SetLink(
                        value: rhs.CastingSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BoltSound ?? true)
            {
                errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.BoltSound);
                try
                {
                    item.BoltSound_Property.SetLink(
                        value: rhs.BoltSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HitSound ?? true)
            {
                errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.HitSound);
                try
                {
                    item.HitSound_Property.SetLink(
                        value: rhs.HitSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AreaSound ?? true)
            {
                errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.AreaSound);
                try
                {
                    item.AreaSound_Property.SetLink(
                        value: rhs.AreaSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ConstantEffectEnchantmentFactor ?? true)
            {
                errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor);
                try
                {
                    item.ConstantEffectEnchantmentFactor = rhs.ConstantEffectEnchantmentFactor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ConstantEffectBarterFactor ?? true)
            {
                errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor);
                try
                {
                    item.ConstantEffectBarterFactor = rhs.ConstantEffectBarterFactor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IMagicEffectSubData obj,
            NotifyingFireParameters cmds = null)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IMagicEffectSubData obj,
            NotifyingUnsetParameters cmds = null)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    obj.EnchantEffect = default(EffectShader);
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    obj.CastingSound = default(Sound);
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    obj.BoltSound = default(Sound);
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    obj.HitSound = default(Sound);
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    obj.AreaSound = default(Sound);
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    obj.ConstantEffectEnchantmentFactor = default(Single);
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    obj.ConstantEffectBarterFactor = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IMagicEffectSubData obj)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IMagicEffectSubDataGetter obj)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    return obj.EnchantEffect;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    return obj.CastingSound;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    return obj.BoltSound;
                case MagicEffectSubData_FieldIndex.HitSound:
                    return obj.HitSound;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    return obj.AreaSound;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return obj.ConstantEffectEnchantmentFactor;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return obj.ConstantEffectBarterFactor;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IMagicEffectSubData item,
            NotifyingUnsetParameters cmds = null)
        {
            item.EnchantEffect = default(EffectShader);
            item.CastingSound = default(Sound);
            item.BoltSound = default(Sound);
            item.HitSound = default(Sound);
            item.AreaSound = default(Sound);
            item.ConstantEffectEnchantmentFactor = default(Single);
            item.ConstantEffectBarterFactor = default(Single);
        }

        public static MagicEffectSubData_Mask<bool> GetEqualsMask(
            this IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffectSubData_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs,
            MagicEffectSubData_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.EnchantEffect = item.EnchantEffect_Property.FormKey == rhs.EnchantEffect_Property.FormKey;
            ret.CastingSound = item.CastingSound_Property.FormKey == rhs.CastingSound_Property.FormKey;
            ret.BoltSound = item.BoltSound_Property.FormKey == rhs.BoltSound_Property.FormKey;
            ret.HitSound = item.HitSound_Property.FormKey == rhs.HitSound_Property.FormKey;
            ret.AreaSound = item.AreaSound_Property.FormKey == rhs.AreaSound_Property.FormKey;
            ret.ConstantEffectEnchantmentFactor = item.ConstantEffectEnchantmentFactor.EqualsWithin(rhs.ConstantEffectEnchantmentFactor);
            ret.ConstantEffectBarterFactor = item.ConstantEffectBarterFactor.EqualsWithin(rhs.ConstantEffectBarterFactor);
        }

        public static string ToString(
            this IMagicEffectSubDataGetter item,
            string name = null,
            MagicEffectSubData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMagicEffectSubDataGetter item,
            FileGeneration fg,
            string name = null,
            MagicEffectSubData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(MagicEffectSubData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(MagicEffectSubData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.EnchantEffect ?? true)
                {
                    fg.AppendLine($"EnchantEffect => {item.EnchantEffect_Property}");
                }
                if (printMask?.CastingSound ?? true)
                {
                    fg.AppendLine($"CastingSound => {item.CastingSound_Property}");
                }
                if (printMask?.BoltSound ?? true)
                {
                    fg.AppendLine($"BoltSound => {item.BoltSound_Property}");
                }
                if (printMask?.HitSound ?? true)
                {
                    fg.AppendLine($"HitSound => {item.HitSound_Property}");
                }
                if (printMask?.AreaSound ?? true)
                {
                    fg.AppendLine($"AreaSound => {item.AreaSound_Property}");
                }
                if (printMask?.ConstantEffectEnchantmentFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectEnchantmentFactor => {item.ConstantEffectEnchantmentFactor}");
                }
                if (printMask?.ConstantEffectBarterFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectBarterFactor => {item.ConstantEffectBarterFactor}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMagicEffectSubDataGetter item,
            MagicEffectSubData_Mask<bool?> checkMask)
        {
            return true;
        }

        public static MagicEffectSubData_Mask<bool> GetHasBeenSetMask(IMagicEffectSubDataGetter item)
        {
            var ret = new MagicEffectSubData_Mask<bool>();
            ret.EnchantEffect = true;
            ret.CastingSound = true;
            ret.BoltSound = true;
            ret.HitSound = true;
            ret.AreaSound = true;
            ret.ConstantEffectEnchantmentFactor = true;
            ret.ConstantEffectBarterFactor = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            MagicEffectSubData item,
            bool doMasks,
            out MagicEffectSubData_ErrorMask errorMask,
            MagicEffectSubData_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffectSubData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            MagicEffectSubData item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MagicEffectSubData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MagicEffectSubData");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this MagicEffectSubData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.EnchantEffect) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantEffect),
                    item: item.EnchantEffect_Property?.FormKey,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.EnchantEffect,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.CastingSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CastingSound),
                    item: item.CastingSound_Property?.FormKey,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.CastingSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.BoltSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BoltSound),
                    item: item.BoltSound_Property?.FormKey,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.BoltSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.HitSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HitSound),
                    item: item.HitSound_Property?.FormKey,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.HitSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.AreaSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AreaSound),
                    item: item.AreaSound_Property?.FormKey,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.AreaSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ConstantEffectEnchantmentFactor),
                    item: item.ConstantEffectEnchantmentFactor,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ConstantEffectBarterFactor),
                    item: item.ConstantEffectBarterFactor,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this MagicEffectSubData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MagicEffectSubDataCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this MagicEffectSubData item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "EnchantEffect":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.EnchantEffect_Property,
                        fieldIndex: (int)MagicEffectSubData_FieldIndex.EnchantEffect,
                        errorMask: errorMask);
                    break;
                case "CastingSound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.CastingSound_Property,
                        fieldIndex: (int)MagicEffectSubData_FieldIndex.CastingSound,
                        errorMask: errorMask);
                    break;
                case "BoltSound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.BoltSound_Property,
                        fieldIndex: (int)MagicEffectSubData_FieldIndex.BoltSound,
                        errorMask: errorMask);
                    break;
                case "HitSound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.HitSound_Property,
                        fieldIndex: (int)MagicEffectSubData_FieldIndex.HitSound,
                        errorMask: errorMask);
                    break;
                case "AreaSound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.AreaSound_Property,
                        fieldIndex: (int)MagicEffectSubData_FieldIndex.AreaSound,
                        errorMask: errorMask);
                    break;
                case "ConstantEffectEnchantmentFactor":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ConstantEffectEnchantmentFactorParse,
                            errorMask: errorMask))
                        {
                            item.ConstantEffectEnchantmentFactor = ConstantEffectEnchantmentFactorParse;
                        }
                        else
                        {
                            item.ConstantEffectEnchantmentFactor = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ConstantEffectBarterFactor":
                    try
                    {
                        errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ConstantEffectBarterFactorParse,
                            errorMask: errorMask))
                        {
                            item.ConstantEffectBarterFactor = ConstantEffectBarterFactorParse;
                        }
                        else
                        {
                            item.ConstantEffectBarterFactor = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            MagicEffectSubData item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = MagicEffectSubData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            MagicEffectSubData item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_Embedded(
            MagicEffectSubData item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EnchantEffect_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.EnchantEffect,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CastingSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.CastingSound,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BoltSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.BoltSound,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HitSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.HitSound,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AreaSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.AreaSound,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ConstantEffectEnchantmentFactor,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ConstantEffectBarterFactor,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class MagicEffectSubData_Mask<T> : IMask<T>, IEquatable<MagicEffectSubData_Mask<T>>
    {
        #region Ctors
        public MagicEffectSubData_Mask()
        {
        }

        public MagicEffectSubData_Mask(T initialValue)
        {
            this.EnchantEffect = initialValue;
            this.CastingSound = initialValue;
            this.BoltSound = initialValue;
            this.HitSound = initialValue;
            this.AreaSound = initialValue;
            this.ConstantEffectEnchantmentFactor = initialValue;
            this.ConstantEffectBarterFactor = initialValue;
        }
        #endregion

        #region Members
        public T EnchantEffect;
        public T CastingSound;
        public T BoltSound;
        public T HitSound;
        public T AreaSound;
        public T ConstantEffectEnchantmentFactor;
        public T ConstantEffectBarterFactor;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MagicEffectSubData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MagicEffectSubData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.EnchantEffect, rhs.EnchantEffect)) return false;
            if (!object.Equals(this.CastingSound, rhs.CastingSound)) return false;
            if (!object.Equals(this.BoltSound, rhs.BoltSound)) return false;
            if (!object.Equals(this.HitSound, rhs.HitSound)) return false;
            if (!object.Equals(this.AreaSound, rhs.AreaSound)) return false;
            if (!object.Equals(this.ConstantEffectEnchantmentFactor, rhs.ConstantEffectEnchantmentFactor)) return false;
            if (!object.Equals(this.ConstantEffectBarterFactor, rhs.ConstantEffectBarterFactor)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.EnchantEffect?.GetHashCode());
            ret = ret.CombineHashCode(this.CastingSound?.GetHashCode());
            ret = ret.CombineHashCode(this.BoltSound?.GetHashCode());
            ret = ret.CombineHashCode(this.HitSound?.GetHashCode());
            ret = ret.CombineHashCode(this.AreaSound?.GetHashCode());
            ret = ret.CombineHashCode(this.ConstantEffectEnchantmentFactor?.GetHashCode());
            ret = ret.CombineHashCode(this.ConstantEffectBarterFactor?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.EnchantEffect)) return false;
            if (!eval(this.CastingSound)) return false;
            if (!eval(this.BoltSound)) return false;
            if (!eval(this.HitSound)) return false;
            if (!eval(this.AreaSound)) return false;
            if (!eval(this.ConstantEffectEnchantmentFactor)) return false;
            if (!eval(this.ConstantEffectBarterFactor)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MagicEffectSubData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MagicEffectSubData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MagicEffectSubData_Mask<R> obj, Func<T, R> eval)
        {
            obj.EnchantEffect = eval(this.EnchantEffect);
            obj.CastingSound = eval(this.CastingSound);
            obj.BoltSound = eval(this.BoltSound);
            obj.HitSound = eval(this.HitSound);
            obj.AreaSound = eval(this.AreaSound);
            obj.ConstantEffectEnchantmentFactor = eval(this.ConstantEffectEnchantmentFactor);
            obj.ConstantEffectBarterFactor = eval(this.ConstantEffectBarterFactor);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MagicEffectSubData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MagicEffectSubData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MagicEffectSubData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.EnchantEffect ?? true)
                {
                    fg.AppendLine($"EnchantEffect => {EnchantEffect}");
                }
                if (printMask?.CastingSound ?? true)
                {
                    fg.AppendLine($"CastingSound => {CastingSound}");
                }
                if (printMask?.BoltSound ?? true)
                {
                    fg.AppendLine($"BoltSound => {BoltSound}");
                }
                if (printMask?.HitSound ?? true)
                {
                    fg.AppendLine($"HitSound => {HitSound}");
                }
                if (printMask?.AreaSound ?? true)
                {
                    fg.AppendLine($"AreaSound => {AreaSound}");
                }
                if (printMask?.ConstantEffectEnchantmentFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectEnchantmentFactor => {ConstantEffectEnchantmentFactor}");
                }
                if (printMask?.ConstantEffectBarterFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectBarterFactor => {ConstantEffectBarterFactor}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MagicEffectSubData_ErrorMask : IErrorMask, IErrorMask<MagicEffectSubData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception EnchantEffect;
        public Exception CastingSound;
        public Exception BoltSound;
        public Exception HitSound;
        public Exception AreaSound;
        public Exception ConstantEffectEnchantmentFactor;
        public Exception ConstantEffectBarterFactor;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    return EnchantEffect;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    return CastingSound;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    return BoltSound;
                case MagicEffectSubData_FieldIndex.HitSound:
                    return HitSound;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    return AreaSound;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return ConstantEffectEnchantmentFactor;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return ConstantEffectBarterFactor;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    this.EnchantEffect = ex;
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    this.CastingSound = ex;
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    this.BoltSound = ex;
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    this.HitSound = ex;
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    this.AreaSound = ex;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    this.ConstantEffectEnchantmentFactor = ex;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    this.ConstantEffectBarterFactor = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    this.EnchantEffect = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    this.CastingSound = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    this.BoltSound = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    this.HitSound = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    this.AreaSound = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    this.ConstantEffectEnchantmentFactor = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    this.ConstantEffectBarterFactor = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (EnchantEffect != null) return true;
            if (CastingSound != null) return true;
            if (BoltSound != null) return true;
            if (HitSound != null) return true;
            if (AreaSound != null) return true;
            if (ConstantEffectEnchantmentFactor != null) return true;
            if (ConstantEffectBarterFactor != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MagicEffectSubData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"EnchantEffect => {EnchantEffect}");
            fg.AppendLine($"CastingSound => {CastingSound}");
            fg.AppendLine($"BoltSound => {BoltSound}");
            fg.AppendLine($"HitSound => {HitSound}");
            fg.AppendLine($"AreaSound => {AreaSound}");
            fg.AppendLine($"ConstantEffectEnchantmentFactor => {ConstantEffectEnchantmentFactor}");
            fg.AppendLine($"ConstantEffectBarterFactor => {ConstantEffectBarterFactor}");
        }
        #endregion

        #region Combine
        public MagicEffectSubData_ErrorMask Combine(MagicEffectSubData_ErrorMask rhs)
        {
            var ret = new MagicEffectSubData_ErrorMask();
            ret.EnchantEffect = this.EnchantEffect.Combine(rhs.EnchantEffect);
            ret.CastingSound = this.CastingSound.Combine(rhs.CastingSound);
            ret.BoltSound = this.BoltSound.Combine(rhs.BoltSound);
            ret.HitSound = this.HitSound.Combine(rhs.HitSound);
            ret.AreaSound = this.AreaSound.Combine(rhs.AreaSound);
            ret.ConstantEffectEnchantmentFactor = this.ConstantEffectEnchantmentFactor.Combine(rhs.ConstantEffectEnchantmentFactor);
            ret.ConstantEffectBarterFactor = this.ConstantEffectBarterFactor.Combine(rhs.ConstantEffectBarterFactor);
            return ret;
        }
        public static MagicEffectSubData_ErrorMask Combine(MagicEffectSubData_ErrorMask lhs, MagicEffectSubData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static MagicEffectSubData_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new MagicEffectSubData_ErrorMask();
        }
        #endregion

    }
    public class MagicEffectSubData_CopyMask
    {
        public MagicEffectSubData_CopyMask()
        {
        }

        public MagicEffectSubData_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.EnchantEffect = defaultOn;
            this.CastingSound = defaultOn;
            this.BoltSound = defaultOn;
            this.HitSound = defaultOn;
            this.AreaSound = defaultOn;
            this.ConstantEffectEnchantmentFactor = defaultOn;
            this.ConstantEffectBarterFactor = defaultOn;
        }

        #region Members
        public bool EnchantEffect;
        public bool CastingSound;
        public bool BoltSound;
        public bool HitSound;
        public bool AreaSound;
        public bool ConstantEffectEnchantmentFactor;
        public bool ConstantEffectBarterFactor;
        #endregion

    }

    public class MagicEffectSubData_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool EnchantEffect;
        public bool CastingSound;
        public bool BoltSound;
        public bool HitSound;
        public bool AreaSound;
        public bool ConstantEffectEnchantmentFactor;
        public bool ConstantEffectBarterFactor;
        #endregion

        #region Ctors
        public MagicEffectSubData_TranslationMask()
        {
        }

        public MagicEffectSubData_TranslationMask(bool defaultOn)
        {
            this.EnchantEffect = defaultOn;
            this.CastingSound = defaultOn;
            this.BoltSound = defaultOn;
            this.HitSound = defaultOn;
            this.AreaSound = defaultOn;
            this.ConstantEffectEnchantmentFactor = defaultOn;
            this.ConstantEffectBarterFactor = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((EnchantEffect, null));
            ret.Add((CastingSound, null));
            ret.Add((BoltSound, null));
            ret.Add((HitSound, null));
            ret.Add((AreaSound, null));
            ret.Add((ConstantEffectEnchantmentFactor, null));
            ret.Add((ConstantEffectBarterFactor, null));
        }
    }
    #endregion

    #endregion

}
