/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MagicEffectSubData : IMagicEffectSubData, ILoquiObjectSetter, IEquatable<MagicEffectSubData>
    {
        ILoquiRegistration ILoquiObject.Registration => MagicEffectSubData_Registration.Instance;
        public static MagicEffectSubData_Registration Registration => MagicEffectSubData_Registration.Instance;

        #region Ctor
        public MagicEffectSubData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EnchantEffect
        protected readonly INotifyingSetItem<FormID> _EnchantEffect = NotifyingSetItem.Factory<FormID>(markAsSet: false);
        public INotifyingSetItem<FormID> EnchantEffect_Property => _EnchantEffect;
        public FormID EnchantEffect
        {
            get => this._EnchantEffect.Item;
            set => this._EnchantEffect.Set(value);
        }
        INotifyingSetItem<FormID> IMagicEffectSubData.EnchantEffect_Property => this.EnchantEffect_Property;
        INotifyingSetItemGetter<FormID> IMagicEffectSubDataGetter.EnchantEffect_Property => this.EnchantEffect_Property;
        #endregion
        #region CastingSound
        protected readonly INotifyingSetItem<FormID> _CastingSound = NotifyingSetItem.Factory<FormID>(markAsSet: false);
        public INotifyingSetItem<FormID> CastingSound_Property => _CastingSound;
        public FormID CastingSound
        {
            get => this._CastingSound.Item;
            set => this._CastingSound.Set(value);
        }
        INotifyingSetItem<FormID> IMagicEffectSubData.CastingSound_Property => this.CastingSound_Property;
        INotifyingSetItemGetter<FormID> IMagicEffectSubDataGetter.CastingSound_Property => this.CastingSound_Property;
        #endregion
        #region BoltSound
        protected readonly INotifyingSetItem<FormID> _BoltSound = NotifyingSetItem.Factory<FormID>(markAsSet: false);
        public INotifyingSetItem<FormID> BoltSound_Property => _BoltSound;
        public FormID BoltSound
        {
            get => this._BoltSound.Item;
            set => this._BoltSound.Set(value);
        }
        INotifyingSetItem<FormID> IMagicEffectSubData.BoltSound_Property => this.BoltSound_Property;
        INotifyingSetItemGetter<FormID> IMagicEffectSubDataGetter.BoltSound_Property => this.BoltSound_Property;
        #endregion
        #region HitSound
        protected readonly INotifyingSetItem<FormID> _HitSound = NotifyingSetItem.Factory<FormID>(markAsSet: false);
        public INotifyingSetItem<FormID> HitSound_Property => _HitSound;
        public FormID HitSound
        {
            get => this._HitSound.Item;
            set => this._HitSound.Set(value);
        }
        INotifyingSetItem<FormID> IMagicEffectSubData.HitSound_Property => this.HitSound_Property;
        INotifyingSetItemGetter<FormID> IMagicEffectSubDataGetter.HitSound_Property => this.HitSound_Property;
        #endregion
        #region AreaSound
        protected readonly INotifyingSetItem<FormID> _AreaSound = NotifyingSetItem.Factory<FormID>(markAsSet: false);
        public INotifyingSetItem<FormID> AreaSound_Property => _AreaSound;
        public FormID AreaSound
        {
            get => this._AreaSound.Item;
            set => this._AreaSound.Set(value);
        }
        INotifyingSetItem<FormID> IMagicEffectSubData.AreaSound_Property => this.AreaSound_Property;
        INotifyingSetItemGetter<FormID> IMagicEffectSubDataGetter.AreaSound_Property => this.AreaSound_Property;
        #endregion
        #region ConstantEffectEnchantmentFactor
        protected readonly INotifyingSetItem<Single> _ConstantEffectEnchantmentFactor = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> ConstantEffectEnchantmentFactor_Property => _ConstantEffectEnchantmentFactor;
        public Single ConstantEffectEnchantmentFactor
        {
            get => this._ConstantEffectEnchantmentFactor.Item;
            set => this._ConstantEffectEnchantmentFactor.Set(value);
        }
        INotifyingSetItem<Single> IMagicEffectSubData.ConstantEffectEnchantmentFactor_Property => this.ConstantEffectEnchantmentFactor_Property;
        INotifyingSetItemGetter<Single> IMagicEffectSubDataGetter.ConstantEffectEnchantmentFactor_Property => this.ConstantEffectEnchantmentFactor_Property;
        #endregion
        #region ConstantEffectBarterFactor
        protected readonly INotifyingSetItem<Single> _ConstantEffectBarterFactor = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> ConstantEffectBarterFactor_Property => _ConstantEffectBarterFactor;
        public Single ConstantEffectBarterFactor
        {
            get => this._ConstantEffectBarterFactor.Item;
            set => this._ConstantEffectBarterFactor.Set(value);
        }
        INotifyingSetItem<Single> IMagicEffectSubData.ConstantEffectBarterFactor_Property => this.ConstantEffectBarterFactor_Property;
        INotifyingSetItemGetter<Single> IMagicEffectSubDataGetter.ConstantEffectBarterFactor_Property => this.ConstantEffectBarterFactor_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => MagicEffectSubDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => MagicEffectSubDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => MagicEffectSubDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            MagicEffectSubDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return MagicEffectSubDataCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            MagicEffectSubData_Mask<bool> printMask = null)
        {
            return MagicEffectSubDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MagicEffectSubDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public MagicEffectSubData_Mask<bool> GetHasBeenSetMask()
        {
            return MagicEffectSubDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is MagicEffectSubData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MagicEffectSubData rhs)
        {
            if (rhs == null) return false;
            if (EnchantEffect_Property.HasBeenSet != rhs.EnchantEffect_Property.HasBeenSet) return false;
            if (EnchantEffect_Property.HasBeenSet)
            {
                if (EnchantEffect != rhs.EnchantEffect) return false;
            }
            if (CastingSound_Property.HasBeenSet != rhs.CastingSound_Property.HasBeenSet) return false;
            if (CastingSound_Property.HasBeenSet)
            {
                if (CastingSound != rhs.CastingSound) return false;
            }
            if (BoltSound_Property.HasBeenSet != rhs.BoltSound_Property.HasBeenSet) return false;
            if (BoltSound_Property.HasBeenSet)
            {
                if (BoltSound != rhs.BoltSound) return false;
            }
            if (HitSound_Property.HasBeenSet != rhs.HitSound_Property.HasBeenSet) return false;
            if (HitSound_Property.HasBeenSet)
            {
                if (HitSound != rhs.HitSound) return false;
            }
            if (AreaSound_Property.HasBeenSet != rhs.AreaSound_Property.HasBeenSet) return false;
            if (AreaSound_Property.HasBeenSet)
            {
                if (AreaSound != rhs.AreaSound) return false;
            }
            if (ConstantEffectEnchantmentFactor_Property.HasBeenSet != rhs.ConstantEffectEnchantmentFactor_Property.HasBeenSet) return false;
            if (ConstantEffectEnchantmentFactor_Property.HasBeenSet)
            {
                if (ConstantEffectEnchantmentFactor != rhs.ConstantEffectEnchantmentFactor) return false;
            }
            if (ConstantEffectBarterFactor_Property.HasBeenSet != rhs.ConstantEffectBarterFactor_Property.HasBeenSet) return false;
            if (ConstantEffectBarterFactor_Property.HasBeenSet)
            {
                if (ConstantEffectBarterFactor != rhs.ConstantEffectBarterFactor) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (EnchantEffect_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnchantEffect).CombineHashCode(ret);
            }
            if (CastingSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CastingSound).CombineHashCode(ret);
            }
            if (BoltSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BoltSound).CombineHashCode(ret);
            }
            if (HitSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(HitSound).CombineHashCode(ret);
            }
            if (AreaSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(AreaSound).CombineHashCode(ret);
            }
            if (ConstantEffectEnchantmentFactor_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ConstantEffectEnchantmentFactor).CombineHashCode(ret);
            }
            if (ConstantEffectBarterFactor_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ConstantEffectBarterFactor).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static MagicEffectSubData Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static MagicEffectSubData Create_XML(
            XElement root,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static MagicEffectSubData Create_XML(
            XElement root,
            bool doMasks,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (MagicEffectSubData Object, MagicEffectSubData_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            MagicEffectSubData_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicEffectSubData_ErrorMask()) : default(Func<MagicEffectSubData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static MagicEffectSubData Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static MagicEffectSubData Create_XML(
            string path,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static MagicEffectSubData Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static MagicEffectSubData Create_XML(
            Stream stream,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<MagicEffectSubData, MagicEffectSubData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out MagicEffectSubData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<MagicEffectSubData, MagicEffectSubData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out MagicEffectSubData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out MagicEffectSubData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out MagicEffectSubData_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (MagicEffectSubData_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out MagicEffectSubData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out MagicEffectSubData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            MagicEffectSubDataCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static MagicEffectSubData Create_XML_Internal(
            XElement root,
            Func<MagicEffectSubData_ErrorMask> errorMask)
        {
            var ret = new MagicEffectSubData();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            MagicEffectSubData item,
            XElement root,
            string name,
            Func<MagicEffectSubData_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "EnchantEffect":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._EnchantEffect.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicEffectSubData_FieldIndex.EnchantEffect,
                            subMask);
                    }
                    break;
                case "CastingSound":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._CastingSound.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicEffectSubData_FieldIndex.CastingSound,
                            subMask);
                    }
                    break;
                case "BoltSound":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._BoltSound.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicEffectSubData_FieldIndex.BoltSound,
                            subMask);
                    }
                    break;
                case "HitSound":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._HitSound.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicEffectSubData_FieldIndex.HitSound,
                            subMask);
                    }
                    break;
                case "AreaSound":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._AreaSound.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicEffectSubData_FieldIndex.AreaSound,
                            subMask);
                    }
                    break;
                case "ConstantEffectEnchantmentFactor":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._ConstantEffectEnchantmentFactor.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor,
                            subMask);
                    }
                    break;
                case "ConstantEffectBarterFactor":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._ConstantEffectBarterFactor.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static MagicEffectSubData Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static MagicEffectSubData Create_Binary(
            MutagenFrame frame,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static MagicEffectSubData Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (MagicEffectSubData Object, MagicEffectSubData_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            MagicEffectSubData_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicEffectSubData_ErrorMask()) : default(Func<MagicEffectSubData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static MagicEffectSubData Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static MagicEffectSubData Create_Binary(
            string path,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MagicEffectSubData Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static MagicEffectSubData Create_Binary(
            Stream stream,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<MagicEffectSubData, MagicEffectSubData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out MagicEffectSubData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<MagicEffectSubData, MagicEffectSubData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out MagicEffectSubData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out MagicEffectSubData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            errorMask = (MagicEffectSubData_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            MagicEffectSubDataCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static MagicEffectSubData Create_Binary_Internal(
            MutagenFrame frame,
            Func<MagicEffectSubData_ErrorMask> errorMask)
        {
            var ret = new MagicEffectSubData();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            MagicEffectSubData item,
            MutagenFrame frame,
            Func<MagicEffectSubData_ErrorMask> errorMask)
        {
            if (frame.Complete) return;
            item._EnchantEffect.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.EnchantEffect,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._CastingSound.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.CastingSound,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._BoltSound.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.BoltSound,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._HitSound.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.HitSound,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._AreaSound.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.AreaSound,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._ConstantEffectEnchantmentFactor.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._ConstantEffectBarterFactor.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor,
                errorMask: errorMask));
        }

        #endregion

        public MagicEffectSubData Copy(
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null)
        {
            return MagicEffectSubData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MagicEffectSubData Copy(
            IMagicEffectSubData item,
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null)
        {
            MagicEffectSubData ret;
            if (item.GetType().Equals(typeof(MagicEffectSubData)))
            {
                ret = new MagicEffectSubData();
            }
            else
            {
                ret = (MagicEffectSubData)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null)
            where CopyType : class, IMagicEffectSubData
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(MagicEffectSubData)))
            {
                ret = new MagicEffectSubData() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static MagicEffectSubData Copy_ToLoqui(
            IMagicEffectSubDataGetter item,
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null)
        {
            var ret = new MagicEffectSubData();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    this._EnchantEffect.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    this._CastingSound.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    this._BoltSound.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    this._HitSound.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    this._AreaSound.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    this._ConstantEffectEnchantmentFactor.Set(
                        (Single)obj,
                        cmds);
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    this._ConstantEffectBarterFactor.Set(
                        (Single)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            MagicEffectSubDataCommon.Clear(this, cmds);
        }


        public static MagicEffectSubData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new MagicEffectSubData();
            foreach (var pair in fields)
            {
                CopyInInternal_MagicEffectSubData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_MagicEffectSubData(MagicEffectSubData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MagicEffectSubData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    obj._EnchantEffect.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    obj._CastingSound.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    obj._BoltSound.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    obj._HitSound.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    obj._AreaSound.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    obj._ConstantEffectEnchantmentFactor.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    obj._ConstantEffectBarterFactor.Set(
                        (Single)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, MagicEffectSubData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IMagicEffectSubData : IMagicEffectSubDataGetter, ILoquiClass<IMagicEffectSubData, IMagicEffectSubDataGetter>, ILoquiClass<MagicEffectSubData, IMagicEffectSubDataGetter>
    {
        new FormID EnchantEffect { get; set; }
        new INotifyingSetItem<FormID> EnchantEffect_Property { get; }

        new FormID CastingSound { get; set; }
        new INotifyingSetItem<FormID> CastingSound_Property { get; }

        new FormID BoltSound { get; set; }
        new INotifyingSetItem<FormID> BoltSound_Property { get; }

        new FormID HitSound { get; set; }
        new INotifyingSetItem<FormID> HitSound_Property { get; }

        new FormID AreaSound { get; set; }
        new INotifyingSetItem<FormID> AreaSound_Property { get; }

        new Single ConstantEffectEnchantmentFactor { get; set; }
        new INotifyingSetItem<Single> ConstantEffectEnchantmentFactor_Property { get; }

        new Single ConstantEffectBarterFactor { get; set; }
        new INotifyingSetItem<Single> ConstantEffectBarterFactor_Property { get; }

    }

    public interface IMagicEffectSubDataGetter : ILoquiObject
    {
        #region EnchantEffect
        FormID EnchantEffect { get; }
        INotifyingSetItemGetter<FormID> EnchantEffect_Property { get; }

        #endregion
        #region CastingSound
        FormID CastingSound { get; }
        INotifyingSetItemGetter<FormID> CastingSound_Property { get; }

        #endregion
        #region BoltSound
        FormID BoltSound { get; }
        INotifyingSetItemGetter<FormID> BoltSound_Property { get; }

        #endregion
        #region HitSound
        FormID HitSound { get; }
        INotifyingSetItemGetter<FormID> HitSound_Property { get; }

        #endregion
        #region AreaSound
        FormID AreaSound { get; }
        INotifyingSetItemGetter<FormID> AreaSound_Property { get; }

        #endregion
        #region ConstantEffectEnchantmentFactor
        Single ConstantEffectEnchantmentFactor { get; }
        INotifyingSetItemGetter<Single> ConstantEffectEnchantmentFactor_Property { get; }

        #endregion
        #region ConstantEffectBarterFactor
        Single ConstantEffectBarterFactor { get; }
        INotifyingSetItemGetter<Single> ConstantEffectBarterFactor_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MagicEffectSubData_FieldIndex
    {
        EnchantEffect = 0,
        CastingSound = 1,
        BoltSound = 2,
        HitSound = 3,
        AreaSound = 4,
        ConstantEffectEnchantmentFactor = 5,
        ConstantEffectBarterFactor = 6,
    }
    #endregion

    #region Registration
    public class MagicEffectSubData_Registration : ILoquiRegistration
    {
        public static readonly MagicEffectSubData_Registration Instance = new MagicEffectSubData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 56,
            version: 0);

        public const string GUID = "ebfe4657-51cf-4f56-95c9-8e3eee98fa5a";

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(MagicEffectSubData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffectSubData_ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffectSubData);

        public static readonly Type GetterType = typeof(IMagicEffectSubDataGetter);

        public static readonly Type SetterType = typeof(IMagicEffectSubData);

        public static readonly Type CommonType = typeof(MagicEffectSubDataCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.MagicEffectSubData";

        public const string Name = "MagicEffectSubData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ENCHANTEFFECT":
                    return (ushort)MagicEffectSubData_FieldIndex.EnchantEffect;
                case "CASTINGSOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.CastingSound;
                case "BOLTSOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.BoltSound;
                case "HITSOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.HitSound;
                case "AREASOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.AreaSound;
                case "CONSTANTEFFECTENCHANTMENTFACTOR":
                    return (ushort)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor;
                case "CONSTANTEFFECTBARTERFACTOR":
                    return (ushort)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    return "EnchantEffect";
                case MagicEffectSubData_FieldIndex.CastingSound:
                    return "CastingSound";
                case MagicEffectSubData_FieldIndex.BoltSound:
                    return "BoltSound";
                case MagicEffectSubData_FieldIndex.HitSound:
                    return "HitSound";
                case MagicEffectSubData_FieldIndex.AreaSound:
                    return "AreaSound";
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return "ConstantEffectEnchantmentFactor";
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return "ConstantEffectBarterFactor";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    return typeof(FormID);
                case MagicEffectSubData_FieldIndex.CastingSound:
                    return typeof(FormID);
                case MagicEffectSubData_FieldIndex.BoltSound:
                    return typeof(FormID);
                case MagicEffectSubData_FieldIndex.HitSound:
                    return typeof(FormID);
                case MagicEffectSubData_FieldIndex.AreaSound:
                    return typeof(FormID);
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return typeof(Single);
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 7;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MagicEffectSubDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IMagicEffectSubData item,
            IMagicEffectSubDataGetter rhs,
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            MagicEffectSubDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IMagicEffectSubData item,
            IMagicEffectSubDataGetter rhs,
            out MagicEffectSubData_ErrorMask errorMask,
            MagicEffectSubData_CopyMask copyMask = null,
            IMagicEffectSubDataGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            MagicEffectSubDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IMagicEffectSubData item,
            IMagicEffectSubDataGetter rhs,
            IMagicEffectSubDataGetter def,
            bool doMasks,
            out MagicEffectSubData_ErrorMask errorMask,
            MagicEffectSubData_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            MagicEffectSubData_ErrorMask retErrorMask = null;
            Func<MagicEffectSubData_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new MagicEffectSubData_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IMagicEffectSubData item,
            IMagicEffectSubDataGetter rhs,
            IMagicEffectSubDataGetter def,
            bool doMasks,
            Func<MagicEffectSubData_ErrorMask> errorMask,
            MagicEffectSubData_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.EnchantEffect ?? true)
            {
                try
                {
                    item.EnchantEffect_Property.SetToWithDefault(
                        rhs: rhs.EnchantEffect_Property,
                        def: def?.EnchantEffect_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffectSubData_FieldIndex.EnchantEffect, ex);
                }
            }
            if (copyMask?.CastingSound ?? true)
            {
                try
                {
                    item.CastingSound_Property.SetToWithDefault(
                        rhs: rhs.CastingSound_Property,
                        def: def?.CastingSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffectSubData_FieldIndex.CastingSound, ex);
                }
            }
            if (copyMask?.BoltSound ?? true)
            {
                try
                {
                    item.BoltSound_Property.SetToWithDefault(
                        rhs: rhs.BoltSound_Property,
                        def: def?.BoltSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffectSubData_FieldIndex.BoltSound, ex);
                }
            }
            if (copyMask?.HitSound ?? true)
            {
                try
                {
                    item.HitSound_Property.SetToWithDefault(
                        rhs: rhs.HitSound_Property,
                        def: def?.HitSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffectSubData_FieldIndex.HitSound, ex);
                }
            }
            if (copyMask?.AreaSound ?? true)
            {
                try
                {
                    item.AreaSound_Property.SetToWithDefault(
                        rhs: rhs.AreaSound_Property,
                        def: def?.AreaSound_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffectSubData_FieldIndex.AreaSound, ex);
                }
            }
            if (copyMask?.ConstantEffectEnchantmentFactor ?? true)
            {
                try
                {
                    item.ConstantEffectEnchantmentFactor_Property.SetToWithDefault(
                        rhs: rhs.ConstantEffectEnchantmentFactor_Property,
                        def: def?.ConstantEffectEnchantmentFactor_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor, ex);
                }
            }
            if (copyMask?.ConstantEffectBarterFactor ?? true)
            {
                try
                {
                    item.ConstantEffectBarterFactor_Property.SetToWithDefault(
                        rhs: rhs.ConstantEffectBarterFactor_Property,
                        def: def?.ConstantEffectBarterFactor_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IMagicEffectSubData obj,
            NotifyingFireParameters? cmds = null)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    obj.EnchantEffect_Property.HasBeenSet = on;
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    obj.CastingSound_Property.HasBeenSet = on;
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    obj.BoltSound_Property.HasBeenSet = on;
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    obj.HitSound_Property.HasBeenSet = on;
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    obj.AreaSound_Property.HasBeenSet = on;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    obj.ConstantEffectEnchantmentFactor_Property.HasBeenSet = on;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    obj.ConstantEffectBarterFactor_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IMagicEffectSubData obj,
            NotifyingUnsetParameters? cmds = null)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    obj.EnchantEffect_Property.Unset(cmds);
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    obj.CastingSound_Property.Unset(cmds);
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    obj.BoltSound_Property.Unset(cmds);
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    obj.HitSound_Property.Unset(cmds);
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    obj.AreaSound_Property.Unset(cmds);
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    obj.ConstantEffectEnchantmentFactor_Property.Unset(cmds);
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    obj.ConstantEffectBarterFactor_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IMagicEffectSubData obj)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    return obj.EnchantEffect_Property.HasBeenSet;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    return obj.CastingSound_Property.HasBeenSet;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    return obj.BoltSound_Property.HasBeenSet;
                case MagicEffectSubData_FieldIndex.HitSound:
                    return obj.HitSound_Property.HasBeenSet;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    return obj.AreaSound_Property.HasBeenSet;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return obj.ConstantEffectEnchantmentFactor_Property.HasBeenSet;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return obj.ConstantEffectBarterFactor_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IMagicEffectSubDataGetter obj)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    return obj.EnchantEffect;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    return obj.CastingSound;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    return obj.BoltSound;
                case MagicEffectSubData_FieldIndex.HitSound:
                    return obj.HitSound;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    return obj.AreaSound;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return obj.ConstantEffectEnchantmentFactor;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return obj.ConstantEffectBarterFactor;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IMagicEffectSubData item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.EnchantEffect_Property.Unset(cmds.ToUnsetParams());
            item.CastingSound_Property.Unset(cmds.ToUnsetParams());
            item.BoltSound_Property.Unset(cmds.ToUnsetParams());
            item.HitSound_Property.Unset(cmds.ToUnsetParams());
            item.AreaSound_Property.Unset(cmds.ToUnsetParams());
            item.ConstantEffectEnchantmentFactor_Property.Unset(cmds.ToUnsetParams());
            item.ConstantEffectBarterFactor_Property.Unset(cmds.ToUnsetParams());
        }

        public static MagicEffectSubData_Mask<bool> GetEqualsMask(
            this IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs)
        {
            var ret = new MagicEffectSubData_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs,
            MagicEffectSubData_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.EnchantEffect = item.EnchantEffect_Property.Equals(rhs.EnchantEffect_Property, (l, r) => l == r);
            ret.CastingSound = item.CastingSound_Property.Equals(rhs.CastingSound_Property, (l, r) => l == r);
            ret.BoltSound = item.BoltSound_Property.Equals(rhs.BoltSound_Property, (l, r) => l == r);
            ret.HitSound = item.HitSound_Property.Equals(rhs.HitSound_Property, (l, r) => l == r);
            ret.AreaSound = item.AreaSound_Property.Equals(rhs.AreaSound_Property, (l, r) => l == r);
            ret.ConstantEffectEnchantmentFactor = item.ConstantEffectEnchantmentFactor_Property.Equals(rhs.ConstantEffectEnchantmentFactor_Property, (l, r) => l == r);
            ret.ConstantEffectBarterFactor = item.ConstantEffectBarterFactor_Property.Equals(rhs.ConstantEffectBarterFactor_Property, (l, r) => l == r);
        }

        public static string ToString(
            this IMagicEffectSubDataGetter item,
            string name = null,
            MagicEffectSubData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMagicEffectSubDataGetter item,
            FileGeneration fg,
            string name = null,
            MagicEffectSubData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(MagicEffectSubData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(MagicEffectSubData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.EnchantEffect ?? true)
                {
                    fg.AppendLine($"EnchantEffect => {item.EnchantEffect}");
                }
                if (printMask?.CastingSound ?? true)
                {
                    fg.AppendLine($"CastingSound => {item.CastingSound}");
                }
                if (printMask?.BoltSound ?? true)
                {
                    fg.AppendLine($"BoltSound => {item.BoltSound}");
                }
                if (printMask?.HitSound ?? true)
                {
                    fg.AppendLine($"HitSound => {item.HitSound}");
                }
                if (printMask?.AreaSound ?? true)
                {
                    fg.AppendLine($"AreaSound => {item.AreaSound}");
                }
                if (printMask?.ConstantEffectEnchantmentFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectEnchantmentFactor => {item.ConstantEffectEnchantmentFactor}");
                }
                if (printMask?.ConstantEffectBarterFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectBarterFactor => {item.ConstantEffectBarterFactor}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMagicEffectSubDataGetter item,
            MagicEffectSubData_Mask<bool?> checkMask)
        {
            if (checkMask.EnchantEffect.HasValue && checkMask.EnchantEffect.Value != item.EnchantEffect_Property.HasBeenSet) return false;
            if (checkMask.CastingSound.HasValue && checkMask.CastingSound.Value != item.CastingSound_Property.HasBeenSet) return false;
            if (checkMask.BoltSound.HasValue && checkMask.BoltSound.Value != item.BoltSound_Property.HasBeenSet) return false;
            if (checkMask.HitSound.HasValue && checkMask.HitSound.Value != item.HitSound_Property.HasBeenSet) return false;
            if (checkMask.AreaSound.HasValue && checkMask.AreaSound.Value != item.AreaSound_Property.HasBeenSet) return false;
            if (checkMask.ConstantEffectEnchantmentFactor.HasValue && checkMask.ConstantEffectEnchantmentFactor.Value != item.ConstantEffectEnchantmentFactor_Property.HasBeenSet) return false;
            if (checkMask.ConstantEffectBarterFactor.HasValue && checkMask.ConstantEffectBarterFactor.Value != item.ConstantEffectBarterFactor_Property.HasBeenSet) return false;
            return true;
        }

        public static MagicEffectSubData_Mask<bool> GetHasBeenSetMask(IMagicEffectSubDataGetter item)
        {
            var ret = new MagicEffectSubData_Mask<bool>();
            ret.EnchantEffect = item.EnchantEffect_Property.HasBeenSet;
            ret.CastingSound = item.CastingSound_Property.HasBeenSet;
            ret.BoltSound = item.BoltSound_Property.HasBeenSet;
            ret.HitSound = item.HitSound_Property.HasBeenSet;
            ret.AreaSound = item.AreaSound_Property.HasBeenSet;
            ret.ConstantEffectEnchantmentFactor = item.ConstantEffectEnchantmentFactor_Property.HasBeenSet;
            ret.ConstantEffectBarterFactor = item.ConstantEffectBarterFactor_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IMagicEffectSubDataGetter item,
            bool doMasks,
            out MagicEffectSubData_ErrorMask errorMask,
            string name = null)
        {
            MagicEffectSubData_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicEffectSubData_ErrorMask()) : default(Func<MagicEffectSubData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IMagicEffectSubDataGetter item,
            Func<MagicEffectSubData_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.MagicEffectSubData"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.MagicEffectSubData");
                    }
                    if (item.EnchantEffect_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.EnchantEffect),
                            item: item.EnchantEffect_Property,
                            fieldIndex: (int)MagicEffectSubData_FieldIndex.EnchantEffect,
                            errorMask: errorMask);
                    }
                    if (item.CastingSound_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.CastingSound),
                            item: item.CastingSound_Property,
                            fieldIndex: (int)MagicEffectSubData_FieldIndex.CastingSound,
                            errorMask: errorMask);
                    }
                    if (item.BoltSound_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.BoltSound),
                            item: item.BoltSound_Property,
                            fieldIndex: (int)MagicEffectSubData_FieldIndex.BoltSound,
                            errorMask: errorMask);
                    }
                    if (item.HitSound_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.HitSound),
                            item: item.HitSound_Property,
                            fieldIndex: (int)MagicEffectSubData_FieldIndex.HitSound,
                            errorMask: errorMask);
                    }
                    if (item.AreaSound_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.AreaSound),
                            item: item.AreaSound_Property,
                            fieldIndex: (int)MagicEffectSubData_FieldIndex.AreaSound,
                            errorMask: errorMask);
                    }
                    if (item.ConstantEffectEnchantmentFactor_Property.HasBeenSet)
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.ConstantEffectEnchantmentFactor),
                            item: item.ConstantEffectEnchantmentFactor_Property,
                            fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor,
                            errorMask: errorMask);
                    }
                    if (item.ConstantEffectBarterFactor_Property.HasBeenSet)
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.ConstantEffectBarterFactor),
                            item: item.ConstantEffectBarterFactor_Property,
                            fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IMagicEffectSubDataGetter item,
            bool doMasks,
            out MagicEffectSubData_ErrorMask errorMask)
        {
            MagicEffectSubData_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicEffectSubData_ErrorMask()) : default(Func<MagicEffectSubData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IMagicEffectSubDataGetter item,
            Func<MagicEffectSubData_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            IMagicEffectSubDataGetter item,
            MutagenWriter writer,
            Func<MagicEffectSubData_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EnchantEffect_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.EnchantEffect,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CastingSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.CastingSound,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BoltSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.BoltSound,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HitSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.HitSound,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AreaSound_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.AreaSound,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ConstantEffectEnchantmentFactor_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ConstantEffectBarterFactor_Property,
                fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class MagicEffectSubData_Mask<T> : IMask<T>, IEquatable<MagicEffectSubData_Mask<T>>
    {
        #region Ctors
        public MagicEffectSubData_Mask()
        {
        }

        public MagicEffectSubData_Mask(T initialValue)
        {
            this.EnchantEffect = initialValue;
            this.CastingSound = initialValue;
            this.BoltSound = initialValue;
            this.HitSound = initialValue;
            this.AreaSound = initialValue;
            this.ConstantEffectEnchantmentFactor = initialValue;
            this.ConstantEffectBarterFactor = initialValue;
        }
        #endregion

        #region Members
        public T EnchantEffect;
        public T CastingSound;
        public T BoltSound;
        public T HitSound;
        public T AreaSound;
        public T ConstantEffectEnchantmentFactor;
        public T ConstantEffectBarterFactor;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MagicEffectSubData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MagicEffectSubData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.EnchantEffect, rhs.EnchantEffect)) return false;
            if (!object.Equals(this.CastingSound, rhs.CastingSound)) return false;
            if (!object.Equals(this.BoltSound, rhs.BoltSound)) return false;
            if (!object.Equals(this.HitSound, rhs.HitSound)) return false;
            if (!object.Equals(this.AreaSound, rhs.AreaSound)) return false;
            if (!object.Equals(this.ConstantEffectEnchantmentFactor, rhs.ConstantEffectEnchantmentFactor)) return false;
            if (!object.Equals(this.ConstantEffectBarterFactor, rhs.ConstantEffectBarterFactor)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.EnchantEffect?.GetHashCode());
            ret = ret.CombineHashCode(this.CastingSound?.GetHashCode());
            ret = ret.CombineHashCode(this.BoltSound?.GetHashCode());
            ret = ret.CombineHashCode(this.HitSound?.GetHashCode());
            ret = ret.CombineHashCode(this.AreaSound?.GetHashCode());
            ret = ret.CombineHashCode(this.ConstantEffectEnchantmentFactor?.GetHashCode());
            ret = ret.CombineHashCode(this.ConstantEffectBarterFactor?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.EnchantEffect)) return false;
            if (!eval(this.CastingSound)) return false;
            if (!eval(this.BoltSound)) return false;
            if (!eval(this.HitSound)) return false;
            if (!eval(this.AreaSound)) return false;
            if (!eval(this.ConstantEffectEnchantmentFactor)) return false;
            if (!eval(this.ConstantEffectBarterFactor)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MagicEffectSubData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MagicEffectSubData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MagicEffectSubData_Mask<R> obj, Func<T, R> eval)
        {
            obj.EnchantEffect = eval(this.EnchantEffect);
            obj.CastingSound = eval(this.CastingSound);
            obj.BoltSound = eval(this.BoltSound);
            obj.HitSound = eval(this.HitSound);
            obj.AreaSound = eval(this.AreaSound);
            obj.ConstantEffectEnchantmentFactor = eval(this.ConstantEffectEnchantmentFactor);
            obj.ConstantEffectBarterFactor = eval(this.ConstantEffectBarterFactor);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MagicEffectSubData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MagicEffectSubData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MagicEffectSubData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.EnchantEffect ?? true)
                {
                    fg.AppendLine($"EnchantEffect => {EnchantEffect}");
                }
                if (printMask?.CastingSound ?? true)
                {
                    fg.AppendLine($"CastingSound => {CastingSound}");
                }
                if (printMask?.BoltSound ?? true)
                {
                    fg.AppendLine($"BoltSound => {BoltSound}");
                }
                if (printMask?.HitSound ?? true)
                {
                    fg.AppendLine($"HitSound => {HitSound}");
                }
                if (printMask?.AreaSound ?? true)
                {
                    fg.AppendLine($"AreaSound => {AreaSound}");
                }
                if (printMask?.ConstantEffectEnchantmentFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectEnchantmentFactor => {ConstantEffectEnchantmentFactor}");
                }
                if (printMask?.ConstantEffectBarterFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectBarterFactor => {ConstantEffectBarterFactor}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MagicEffectSubData_ErrorMask : IErrorMask, IErrorMask<MagicEffectSubData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception EnchantEffect;
        public Exception CastingSound;
        public Exception BoltSound;
        public Exception HitSound;
        public Exception AreaSound;
        public Exception ConstantEffectEnchantmentFactor;
        public Exception ConstantEffectBarterFactor;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    this.EnchantEffect = ex;
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    this.CastingSound = ex;
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    this.BoltSound = ex;
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    this.HitSound = ex;
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    this.AreaSound = ex;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    this.ConstantEffectEnchantmentFactor = ex;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    this.ConstantEffectBarterFactor = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    this.EnchantEffect = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.CastingSound:
                    this.CastingSound = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.BoltSound:
                    this.BoltSound = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.HitSound:
                    this.HitSound = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.AreaSound:
                    this.AreaSound = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    this.ConstantEffectEnchantmentFactor = (Exception)obj;
                    break;
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    this.ConstantEffectBarterFactor = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (EnchantEffect != null) return true;
            if (CastingSound != null) return true;
            if (BoltSound != null) return true;
            if (HitSound != null) return true;
            if (AreaSound != null) return true;
            if (ConstantEffectEnchantmentFactor != null) return true;
            if (ConstantEffectBarterFactor != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MagicEffectSubData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"EnchantEffect => {EnchantEffect}");
            fg.AppendLine($"CastingSound => {CastingSound}");
            fg.AppendLine($"BoltSound => {BoltSound}");
            fg.AppendLine($"HitSound => {HitSound}");
            fg.AppendLine($"AreaSound => {AreaSound}");
            fg.AppendLine($"ConstantEffectEnchantmentFactor => {ConstantEffectEnchantmentFactor}");
            fg.AppendLine($"ConstantEffectBarterFactor => {ConstantEffectBarterFactor}");
        }
        #endregion

        #region Combine
        public MagicEffectSubData_ErrorMask Combine(MagicEffectSubData_ErrorMask rhs)
        {
            var ret = new MagicEffectSubData_ErrorMask();
            ret.EnchantEffect = this.EnchantEffect.Combine(rhs.EnchantEffect);
            ret.CastingSound = this.CastingSound.Combine(rhs.CastingSound);
            ret.BoltSound = this.BoltSound.Combine(rhs.BoltSound);
            ret.HitSound = this.HitSound.Combine(rhs.HitSound);
            ret.AreaSound = this.AreaSound.Combine(rhs.AreaSound);
            ret.ConstantEffectEnchantmentFactor = this.ConstantEffectEnchantmentFactor.Combine(rhs.ConstantEffectEnchantmentFactor);
            ret.ConstantEffectBarterFactor = this.ConstantEffectBarterFactor.Combine(rhs.ConstantEffectBarterFactor);
            return ret;
        }
        public static MagicEffectSubData_ErrorMask Combine(MagicEffectSubData_ErrorMask lhs, MagicEffectSubData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class MagicEffectSubData_CopyMask
    {
        #region Members
        public bool EnchantEffect;
        public bool CastingSound;
        public bool BoltSound;
        public bool HitSound;
        public bool AreaSound;
        public bool ConstantEffectEnchantmentFactor;
        public bool ConstantEffectBarterFactor;
        #endregion

    }
    #endregion




    #endregion

}
