/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MagicEffect : NamedMajorRecord, IMagicEffect, ILoquiObjectSetter, IEquatable<MagicEffect>
    {
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static MagicEffect_Registration Registration => MagicEffect_Registration.Instance;

        #region Ctor
        public MagicEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Description
        protected readonly INotifyingSetItem<String> _Description = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> Description_Property => _Description;
        public String Description
        {
            get => this._Description.Item;
            set => this._Description.Set(value);
        }
        INotifyingSetItem<String> IMagicEffect.Description_Property => this.Description_Property;
        INotifyingSetItemGetter<String> IMagicEffectGetter.Description_Property => this.Description_Property;
        #endregion
        #region Icon
        protected readonly INotifyingSetItem<FilePath> _Icon = NotifyingSetItem.Factory<FilePath>(markAsSet: false);
        public INotifyingSetItem<FilePath> Icon_Property => _Icon;
        public FilePath Icon
        {
            get => this._Icon.Item;
            set => this._Icon.Set(value);
        }
        INotifyingSetItem<FilePath> IMagicEffect.Icon_Property => this.Icon_Property;
        INotifyingSetItemGetter<FilePath> IMagicEffectGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region Model
        private readonly INotifyingSetItem<Model> _Model = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> Model_Property => this._Model;
        Model IMagicEffectGetter.Model => this.Model;
        public Model Model { get => _Model.Item; set => _Model.Item = value; }
        INotifyingSetItem<Model> IMagicEffect.Model_Property => this.Model_Property;
        INotifyingSetItemGetter<Model> IMagicEffectGetter.Model_Property => this.Model_Property;
        #endregion
        #region Flags
        protected readonly INotifyingItem<MagicEffect.MagicFlag> _Flags = NotifyingItem.Factory<MagicEffect.MagicFlag>();
        public INotifyingItem<MagicEffect.MagicFlag> Flags_Property => _Flags;
        public MagicEffect.MagicFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        INotifyingItem<MagicEffect.MagicFlag> IMagicEffect.Flags_Property => this.Flags_Property;
        INotifyingItemGetter<MagicEffect.MagicFlag> IMagicEffectGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region BaseCost
        protected readonly INotifyingItem<Single> _BaseCost = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> BaseCost_Property => _BaseCost;
        public Single BaseCost
        {
            get => this._BaseCost.Item;
            set => this._BaseCost.Set(value);
        }
        INotifyingItem<Single> IMagicEffect.BaseCost_Property => this.BaseCost_Property;
        INotifyingItemGetter<Single> IMagicEffectGetter.BaseCost_Property => this.BaseCost_Property;
        #endregion
        #region Unused
        protected readonly INotifyingItem<Byte[]> _Unused = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[4]);
        public INotifyingItem<Byte[]> Unused_Property => _Unused;
        public Byte[] Unused
        {
            get => this._Unused.Item;
            set => this._Unused.Set(value);
        }
        INotifyingItem<Byte[]> IMagicEffect.Unused_Property => this.Unused_Property;
        INotifyingItemGetter<Byte[]> IMagicEffectGetter.Unused_Property => this.Unused_Property;
        #endregion
        #region MagicSchool
        protected readonly INotifyingItem<MagicSchool> _MagicSchool = NotifyingItem.Factory<MagicSchool>();
        public INotifyingItem<MagicSchool> MagicSchool_Property => _MagicSchool;
        public MagicSchool MagicSchool
        {
            get => this._MagicSchool.Item;
            set => this._MagicSchool.Set(value);
        }
        INotifyingItem<MagicSchool> IMagicEffect.MagicSchool_Property => this.MagicSchool_Property;
        INotifyingItemGetter<MagicSchool> IMagicEffectGetter.MagicSchool_Property => this.MagicSchool_Property;
        #endregion
        #region Resistance
        protected readonly INotifyingItem<Resistance> _Resistance = NotifyingItem.Factory<Resistance>();
        public INotifyingItem<Resistance> Resistance_Property => _Resistance;
        public Resistance Resistance
        {
            get => this._Resistance.Item;
            set => this._Resistance.Set(value);
        }
        INotifyingItem<Resistance> IMagicEffect.Resistance_Property => this.Resistance_Property;
        INotifyingItemGetter<Resistance> IMagicEffectGetter.Resistance_Property => this.Resistance_Property;
        #endregion
        #region CounterEffectCount
        protected readonly INotifyingItem<UInt32> _CounterEffectCount = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> CounterEffectCount_Property => _CounterEffectCount;
        public UInt32 CounterEffectCount
        {
            get => this._CounterEffectCount.Item;
            set => this._CounterEffectCount.Set(value);
        }
        INotifyingItem<UInt32> IMagicEffect.CounterEffectCount_Property => this.CounterEffectCount_Property;
        INotifyingItemGetter<UInt32> IMagicEffectGetter.CounterEffectCount_Property => this.CounterEffectCount_Property;
        #endregion
        #region Light
        public FormIDLink<Light> Light_Property { get; } = new FormIDLink<Light>();
        public Light Light { get => Light_Property.Item; set => Light_Property.Item = value; }
        FormIDLink<Light> IMagicEffectGetter.Light_Property => this.Light_Property;
        #endregion
        #region ProjectileSpeed
        protected readonly INotifyingItem<Single> _ProjectileSpeed = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> ProjectileSpeed_Property => _ProjectileSpeed;
        public Single ProjectileSpeed
        {
            get => this._ProjectileSpeed.Item;
            set => this._ProjectileSpeed.Set(value);
        }
        INotifyingItem<Single> IMagicEffect.ProjectileSpeed_Property => this.ProjectileSpeed_Property;
        INotifyingItemGetter<Single> IMagicEffectGetter.ProjectileSpeed_Property => this.ProjectileSpeed_Property;
        #endregion
        #region EffectShader
        public FormIDLink<EffectShader> EffectShader_Property { get; } = new FormIDLink<EffectShader>();
        public EffectShader EffectShader { get => EffectShader_Property.Item; set => EffectShader_Property.Item = value; }
        FormIDLink<EffectShader> IMagicEffectGetter.EffectShader_Property => this.EffectShader_Property;
        #endregion
        #region SubData
        private readonly INotifyingItem<MagicEffectSubData> _SubData = new NotifyingItem<MagicEffectSubData>();
        public INotifyingItem<MagicEffectSubData> SubData_Property => this._SubData;
        MagicEffectSubData IMagicEffectGetter.SubData => this.SubData;
        public MagicEffectSubData SubData { get => _SubData.Item; set => _SubData.Item = value; }
        INotifyingItem<MagicEffectSubData> IMagicEffect.SubData_Property => this.SubData_Property;
        INotifyingItemGetter<MagicEffectSubData> IMagicEffectGetter.SubData_Property => this.SubData_Property;
        #endregion
        #region CounterEffects
        private readonly INotifyingList<EDIDLink<MagicEffect>> _CounterEffects = new NotifyingList<EDIDLink<MagicEffect>>();
        public INotifyingList<EDIDLink<MagicEffect>> CounterEffects => _CounterEffects;
        public IEnumerable<EDIDLink<MagicEffect>> CounterEffectsEnumerable
        {
            get => _CounterEffects;
            set => _CounterEffects.SetTo(value);
        }
        #region Interface Members
        INotifyingList<EDIDLink<MagicEffect>> IMagicEffect.CounterEffects => _CounterEffects;
        INotifyingListGetter<EDIDLink<MagicEffect>> IMagicEffectGetter.CounterEffects => _CounterEffects;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => MagicEffectCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => MagicEffectCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => MagicEffectCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            MagicEffectCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return MagicEffectCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            MagicEffect_Mask<bool> printMask = null)
        {
            return MagicEffectCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            MagicEffectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new MagicEffect_Mask<bool> GetHasBeenSetMask()
        {
            return MagicEffectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is MagicEffect rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MagicEffect rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Description_Property.HasBeenSet != rhs.Description_Property.HasBeenSet) return false;
            if (Description_Property.HasBeenSet)
            {
                if (!object.Equals(Description, rhs.Description)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(Icon, rhs.Icon)) return false;
            }
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(Model, rhs.Model)) return false;
            }
            if (Flags != rhs.Flags) return false;
            if (BaseCost != rhs.BaseCost) return false;
            if (!Unused.EqualsFast(rhs.Unused)) return false;
            if (MagicSchool != rhs.MagicSchool) return false;
            if (Resistance != rhs.Resistance) return false;
            if (CounterEffectCount != rhs.CounterEffectCount) return false;
            if (Light != rhs.Light) return false;
            if (ProjectileSpeed != rhs.ProjectileSpeed) return false;
            if (EffectShader != rhs.EffectShader) return false;
            if (!object.Equals(SubData, rhs.SubData)) return false;
            if (CounterEffects.HasBeenSet != rhs.CounterEffects.HasBeenSet) return false;
            if (CounterEffects.HasBeenSet)
            {
                if (!CounterEffects.SequenceEqual(rhs.CounterEffects)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Description_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BaseCost).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Unused).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MagicSchool).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Resistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CounterEffectCount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Light).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ProjectileSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EffectShader).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SubData).CombineHashCode(ret);
            if (CounterEffects.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CounterEffects).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static MagicEffect Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static MagicEffect Create_XML(
            XElement root,
            out MagicEffect_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static MagicEffect Create_XML(
            XElement root,
            bool doMasks,
            out MagicEffect_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (MagicEffect Object, MagicEffect_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            MagicEffect_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicEffect_ErrorMask()) : default(Func<MagicEffect_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static MagicEffect Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static MagicEffect Create_XML(
            string path,
            out MagicEffect_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static MagicEffect Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static MagicEffect Create_XML(
            Stream stream,
            out MagicEffect_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<MagicEffect, MagicEffect_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out MagicEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<MagicEffect, MagicEffect_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out MagicEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out MagicEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out MagicEffect_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out MagicEffect_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out MagicEffect_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (MagicEffect_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out MagicEffect_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out MagicEffect_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            MagicEffectCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static MagicEffect Create_XML_Internal(
            XElement root,
            Func<MagicEffect_ErrorMask> errorMask)
        {
            var ret = new MagicEffect();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            MagicEffect item,
            XElement root,
            string name,
            Func<MagicEffect_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Description":
                    item._Description.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)MagicEffect_FieldIndex.Description,
                        errorMask: errorMask));
                    break;
                case "Icon":
                    item._Icon.SetIfSucceeded(FilePathXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)MagicEffect_FieldIndex.Icon,
                        errorMask: errorMask));
                    break;
                case "Model":
                    item._Model.SetIfSucceeded(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)MagicEffect_FieldIndex.Model,
                        errorMask: errorMask));
                    break;
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<MagicEffect.MagicFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)MagicEffect_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "BaseCost":
                    item._BaseCost.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)MagicEffect_FieldIndex.BaseCost,
                        errorMask: errorMask));
                    break;
                case "Unused":
                    item._Unused.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)MagicEffect_FieldIndex.Unused,
                        errorMask: errorMask));
                    break;
                case "MagicSchool":
                    item._MagicSchool.SetIfSucceeded(EnumXmlTranslation<MagicSchool>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)MagicEffect_FieldIndex.MagicSchool,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Resistance":
                    item._Resistance.SetIfSucceeded(EnumXmlTranslation<Resistance>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)MagicEffect_FieldIndex.Resistance,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "CounterEffectCount":
                    item._CounterEffectCount.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)MagicEffect_FieldIndex.CounterEffectCount,
                        errorMask: errorMask));
                    break;
                case "Light":
                    item.Light_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)MagicEffect_FieldIndex.Light,
                        errorMask: errorMask));
                    break;
                case "ProjectileSpeed":
                    item._ProjectileSpeed.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)MagicEffect_FieldIndex.ProjectileSpeed,
                        errorMask: errorMask));
                    break;
                case "EffectShader":
                    item.EffectShader_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)MagicEffect_FieldIndex.EffectShader,
                        errorMask: errorMask));
                    break;
                case "SubData":
                    item._SubData.SetIfSucceeded(LoquiXmlTranslation<MagicEffectSubData, MagicEffectSubData_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)MagicEffect_FieldIndex.SubData,
                        errorMask: errorMask));
                    break;
                case "CounterEffects":
                    item._CounterEffects.SetIfSucceeded(ListXmlTranslation<EDIDLink<MagicEffect>, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)MagicEffect_FieldIndex.CounterEffects,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return RawFormIDXmlTranslation.Instance.Parse(
                                r,
                                nullable: false,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new EDIDLink<MagicEffect>(o.Value));
                        }
                        ));
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Break0 = 1
        }
        public static readonly object DataTypeStateSubber = new object();
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static MagicEffect Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static MagicEffect Create_Binary(
            MutagenFrame frame,
            out MagicEffect_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static MagicEffect Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out MagicEffect_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (MagicEffect Object, MagicEffect_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            MagicEffect_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicEffect_ErrorMask()) : default(Func<MagicEffect_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static MagicEffect Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static MagicEffect Create_Binary(
            string path,
            out MagicEffect_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MagicEffect Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static MagicEffect Create_Binary(
            Stream stream,
            out MagicEffect_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<MagicEffect, MagicEffect_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out MagicEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<MagicEffect, MagicEffect_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out MagicEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out MagicEffect_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out MagicEffect_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out MagicEffect_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out MagicEffect_ErrorMask errorMask)
        {
            errorMask = (MagicEffect_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out MagicEffect_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out MagicEffect_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            MagicEffectCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static MagicEffect Create_Binary_Internal(
            MutagenFrame frame,
            Func<MagicEffect_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return MajorRecord.TypicalParsing<MagicEffect, MagicEffect_ErrorMask, MagicEffect_FieldIndex>(
                record: new MagicEffect(),
                frame: frame,
                errorMask: errorMask,
                recType: MagicEffect_Registration.MGEF_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            MagicEffect item,
            MutagenFrame frame,
            Func<MagicEffect_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<MagicEffect_FieldIndex?> Fill_Binary_RecordTypes(
            MagicEffect item,
            MutagenFrame frame,
            Func<MagicEffect_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "DESC":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var DescriptiontryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)MagicEffect_FieldIndex.Description,
                        errorMask: errorMask);
                    item._Description.SetIfSucceeded(DescriptiontryGet);
                    return TryGet<MagicEffect_FieldIndex?>.Succeed(MagicEffect_FieldIndex.Description);
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Icon.SetIfSucceeded(Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)MagicEffect_FieldIndex.Icon,
                        errorMask: errorMask));
                    return TryGet<MagicEffect_FieldIndex?>.Succeed(MagicEffect_FieldIndex.Icon);
                case "MODL":
                    item._Model.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)MagicEffect_FieldIndex.Model,
                        errorMask: errorMask));
                    return TryGet<MagicEffect_FieldIndex?>.Succeed(MagicEffect_FieldIndex.Model);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        item._Flags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicEffect.MagicFlag>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)MagicEffect_FieldIndex.Flags,
                            errorMask: errorMask));
                        item._BaseCost.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)MagicEffect_FieldIndex.BaseCost,
                            errorMask: errorMask));
                        var UnusedtryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)MagicEffect_FieldIndex.Unused,
                            errorMask: errorMask);
                        item._Unused.SetIfSucceeded(UnusedtryGet);
                        item._MagicSchool.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicSchool>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)MagicEffect_FieldIndex.MagicSchool,
                            errorMask: errorMask));
                        item._Resistance.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Resistance>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)MagicEffect_FieldIndex.Resistance,
                            errorMask: errorMask));
                        item._CounterEffectCount.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)MagicEffect_FieldIndex.CounterEffectCount,
                            errorMask: errorMask));
                        item.Light_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)MagicEffect_FieldIndex.Light,
                            errorMask: errorMask));
                        item._ProjectileSpeed.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)MagicEffect_FieldIndex.ProjectileSpeed,
                            errorMask: errorMask));
                        item.EffectShader_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)MagicEffect_FieldIndex.EffectShader,
                            errorMask: errorMask));
                        if (dataFrame.Complete)
                        {
                            item.DATADataTypeState |= DATADataType.Break0;
                            return TryGet<MagicEffect_FieldIndex?>.Succeed(MagicEffect_FieldIndex.EffectShader);
                        }
                        item._SubData.SetIfSucceeded(LoquiBinaryTranslation<MagicEffectSubData, MagicEffectSubData_ErrorMask>.Instance.Parse(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            fieldIndex: (int)MagicEffect_FieldIndex.SubData,
                            errorMask: errorMask));
                    }
                    return TryGet<MagicEffect_FieldIndex?>.Succeed(MagicEffect_FieldIndex.SubData);
                case "ESCE":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var CounterEffectstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<EDIDLink<MagicEffect>, Exception>.Instance.ParseRepeatedItem(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)MagicEffect_FieldIndex.CounterEffects,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            listSubMask = null;
                            return TryGet<EDIDLink<MagicEffect>>.Succeed(new EDIDLink<MagicEffect>(HeaderTranslation.ReadNextRecordType(r.Reader)));
                        }
                        );
                    item._CounterEffects.SetIfSucceeded(CounterEffectstryGet);
                    return TryGet<MagicEffect_FieldIndex?>.Succeed(MagicEffect_FieldIndex.CounterEffects);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => MagicEffectCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public MagicEffect Copy(
            MagicEffect_CopyMask copyMask = null,
            IMagicEffectGetter def = null)
        {
            return MagicEffect.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MagicEffect Copy(
            IMagicEffect item,
            MagicEffect_CopyMask copyMask = null,
            IMagicEffectGetter def = null)
        {
            MagicEffect ret;
            if (item.GetType().Equals(typeof(MagicEffect)))
            {
                ret = new MagicEffect();
            }
            else
            {
                ret = (MagicEffect)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            MagicEffect_CopyMask copyMask = null,
            IMagicEffectGetter def = null)
            where CopyType : class, IMagicEffect
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(MagicEffect)))
            {
                ret = new MagicEffect() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static MagicEffect Copy_ToLoqui(
            IMagicEffectGetter item,
            MagicEffect_CopyMask copyMask = null,
            IMagicEffectGetter def = null)
        {
            MagicEffect ret;
            if (item.GetType().Equals(typeof(MagicEffect)))
            {
                ret = new MagicEffect() as MagicEffect;
            }
            else
            {
                ret = (MagicEffect)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                    this._Description.Set(
                        (String)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.Icon:
                    this._Icon.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.Model:
                    this._Model.Set(
                        (Model)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.Flags:
                    this._Flags.Set(
                        (MagicEffect.MagicFlag)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.BaseCost:
                    this._BaseCost.Set(
                        (Single)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.Unused:
                    this._Unused.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.MagicSchool:
                    this._MagicSchool.Set(
                        (MagicSchool)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.Resistance:
                    this._Resistance.Set(
                        (Resistance)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.CounterEffectCount:
                    this._CounterEffectCount.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.Light:
                    this.Light_Property.Set(
                        (FormIDLink<Light>)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    this._ProjectileSpeed.Set(
                        (Single)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.EffectShader:
                    this.EffectShader_Property.Set(
                        (FormIDLink<EffectShader>)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.SubData:
                    this._SubData.Set(
                        (MagicEffectSubData)obj,
                        cmds);
                    break;
                case MagicEffect_FieldIndex.CounterEffects:
                    this._CounterEffects.SetTo((IEnumerable<EDIDLink<MagicEffect>>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            MagicEffectCommon.Clear(this, cmds);
        }


        public new static MagicEffect Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new MagicEffect();
            foreach (var pair in fields)
            {
                CopyInInternal_MagicEffect(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_MagicEffect(MagicEffect obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MagicEffect_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                    obj._Description.Set(
                        (String)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.Icon:
                    obj._Icon.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.Model:
                    obj._Model.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.Flags:
                    obj._Flags.Set(
                        (MagicEffect.MagicFlag)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.BaseCost:
                    obj._BaseCost.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.Unused:
                    obj._Unused.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.MagicSchool:
                    obj._MagicSchool.Set(
                        (MagicSchool)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.Resistance:
                    obj._Resistance.Set(
                        (Resistance)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.CounterEffectCount:
                    obj._CounterEffectCount.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.Light:
                    obj.Light_Property.Set(
                        (FormIDLink<Light>)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    obj._ProjectileSpeed.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.EffectShader:
                    obj.EffectShader_Property.Set(
                        (FormIDLink<EffectShader>)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.SubData:
                    obj._SubData.Set(
                        (MagicEffectSubData)pair.Value,
                        null);
                    break;
                case MagicEffect_FieldIndex.CounterEffects:
                    obj._CounterEffects.SetTo((IEnumerable<EDIDLink<MagicEffect>>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, MagicEffect obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IMagicEffect : IMagicEffectGetter, INamedMajorRecord, ILoquiClass<IMagicEffect, IMagicEffectGetter>, ILoquiClass<MagicEffect, IMagicEffectGetter>
    {
        new String Description { get; set; }
        new INotifyingSetItem<String> Description_Property { get; }

        new FilePath Icon { get; set; }
        new INotifyingSetItem<FilePath> Icon_Property { get; }

        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new MagicEffect.MagicFlag Flags { get; set; }
        new INotifyingItem<MagicEffect.MagicFlag> Flags_Property { get; }

        new Single BaseCost { get; set; }
        new INotifyingItem<Single> BaseCost_Property { get; }

        new Byte[] Unused { get; set; }
        new INotifyingItem<Byte[]> Unused_Property { get; }

        new MagicSchool MagicSchool { get; set; }
        new INotifyingItem<MagicSchool> MagicSchool_Property { get; }

        new Resistance Resistance { get; set; }
        new INotifyingItem<Resistance> Resistance_Property { get; }

        new UInt32 CounterEffectCount { get; set; }
        new INotifyingItem<UInt32> CounterEffectCount_Property { get; }

        new Light Light { get; set; }
        new Single ProjectileSpeed { get; set; }
        new INotifyingItem<Single> ProjectileSpeed_Property { get; }

        new EffectShader EffectShader { get; set; }
        new MagicEffectSubData SubData { get; set; }
        new INotifyingItem<MagicEffectSubData> SubData_Property { get; }

        new INotifyingList<EDIDLink<MagicEffect>> CounterEffects { get; }
    }

    public interface IMagicEffectGetter : INamedMajorRecordGetter
    {
        #region Description
        String Description { get; }
        INotifyingSetItemGetter<String> Description_Property { get; }

        #endregion
        #region Icon
        FilePath Icon { get; }
        INotifyingSetItemGetter<FilePath> Icon_Property { get; }

        #endregion
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region Flags
        MagicEffect.MagicFlag Flags { get; }
        INotifyingItemGetter<MagicEffect.MagicFlag> Flags_Property { get; }

        #endregion
        #region BaseCost
        Single BaseCost { get; }
        INotifyingItemGetter<Single> BaseCost_Property { get; }

        #endregion
        #region Unused
        Byte[] Unused { get; }
        INotifyingItemGetter<Byte[]> Unused_Property { get; }

        #endregion
        #region MagicSchool
        MagicSchool MagicSchool { get; }
        INotifyingItemGetter<MagicSchool> MagicSchool_Property { get; }

        #endregion
        #region Resistance
        Resistance Resistance { get; }
        INotifyingItemGetter<Resistance> Resistance_Property { get; }

        #endregion
        #region CounterEffectCount
        UInt32 CounterEffectCount { get; }
        INotifyingItemGetter<UInt32> CounterEffectCount_Property { get; }

        #endregion
        #region Light
        Light Light { get; }
        FormIDLink<Light> Light_Property { get; }

        #endregion
        #region ProjectileSpeed
        Single ProjectileSpeed { get; }
        INotifyingItemGetter<Single> ProjectileSpeed_Property { get; }

        #endregion
        #region EffectShader
        EffectShader EffectShader { get; }
        FormIDLink<EffectShader> EffectShader_Property { get; }

        #endregion
        #region SubData
        MagicEffectSubData SubData { get; }
        INotifyingItemGetter<MagicEffectSubData> SubData_Property { get; }

        #endregion
        #region CounterEffects
        INotifyingListGetter<EDIDLink<MagicEffect>> CounterEffects { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MagicEffect_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Description = 6,
        Icon = 7,
        Model = 8,
        Flags = 9,
        BaseCost = 10,
        Unused = 11,
        MagicSchool = 12,
        Resistance = 13,
        CounterEffectCount = 14,
        Light = 15,
        ProjectileSpeed = 16,
        EffectShader = 17,
        SubData = 18,
        CounterEffects = 19,
    }
    #endregion

    #region Registration
    public class MagicEffect_Registration : ILoquiRegistration
    {
        public static readonly MagicEffect_Registration Instance = new MagicEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 44,
            version: 0);

        public const string GUID = "57a9087c-140b-4152-8b1e-0508d36a2df4";

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(MagicEffect_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffect_ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffect);

        public static readonly Type GetterType = typeof(IMagicEffectGetter);

        public static readonly Type SetterType = typeof(IMagicEffect);

        public static readonly Type CommonType = typeof(MagicEffectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.MagicEffect";

        public const string Name = "MagicEffect";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DESCRIPTION":
                    return (ushort)MagicEffect_FieldIndex.Description;
                case "ICON":
                    return (ushort)MagicEffect_FieldIndex.Icon;
                case "MODEL":
                    return (ushort)MagicEffect_FieldIndex.Model;
                case "FLAGS":
                    return (ushort)MagicEffect_FieldIndex.Flags;
                case "BASECOST":
                    return (ushort)MagicEffect_FieldIndex.BaseCost;
                case "UNUSED":
                    return (ushort)MagicEffect_FieldIndex.Unused;
                case "MAGICSCHOOL":
                    return (ushort)MagicEffect_FieldIndex.MagicSchool;
                case "RESISTANCE":
                    return (ushort)MagicEffect_FieldIndex.Resistance;
                case "COUNTEREFFECTCOUNT":
                    return (ushort)MagicEffect_FieldIndex.CounterEffectCount;
                case "LIGHT":
                    return (ushort)MagicEffect_FieldIndex.Light;
                case "PROJECTILESPEED":
                    return (ushort)MagicEffect_FieldIndex.ProjectileSpeed;
                case "EFFECTSHADER":
                    return (ushort)MagicEffect_FieldIndex.EffectShader;
                case "SUBDATA":
                    return (ushort)MagicEffect_FieldIndex.SubData;
                case "COUNTEREFFECTS":
                    return (ushort)MagicEffect_FieldIndex.CounterEffects;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.CounterEffects:
                    return true;
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.SubData:
                    return true;
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.CounterEffects:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.CounterEffects:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                    return "Description";
                case MagicEffect_FieldIndex.Icon:
                    return "Icon";
                case MagicEffect_FieldIndex.Model:
                    return "Model";
                case MagicEffect_FieldIndex.Flags:
                    return "Flags";
                case MagicEffect_FieldIndex.BaseCost:
                    return "BaseCost";
                case MagicEffect_FieldIndex.Unused:
                    return "Unused";
                case MagicEffect_FieldIndex.MagicSchool:
                    return "MagicSchool";
                case MagicEffect_FieldIndex.Resistance:
                    return "Resistance";
                case MagicEffect_FieldIndex.CounterEffectCount:
                    return "CounterEffectCount";
                case MagicEffect_FieldIndex.Light:
                    return "Light";
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    return "ProjectileSpeed";
                case MagicEffect_FieldIndex.EffectShader:
                    return "EffectShader";
                case MagicEffect_FieldIndex.SubData:
                    return "SubData";
                case MagicEffect_FieldIndex.CounterEffects:
                    return "CounterEffects";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.CounterEffects:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.CounterEffects:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                    return typeof(String);
                case MagicEffect_FieldIndex.Icon:
                    return typeof(FilePath);
                case MagicEffect_FieldIndex.Model:
                    return typeof(Model);
                case MagicEffect_FieldIndex.Flags:
                    return typeof(MagicEffect.MagicFlag);
                case MagicEffect_FieldIndex.BaseCost:
                    return typeof(Single);
                case MagicEffect_FieldIndex.Unused:
                    return typeof(Byte[]);
                case MagicEffect_FieldIndex.MagicSchool:
                    return typeof(MagicSchool);
                case MagicEffect_FieldIndex.Resistance:
                    return typeof(Resistance);
                case MagicEffect_FieldIndex.CounterEffectCount:
                    return typeof(UInt32);
                case MagicEffect_FieldIndex.Light:
                    return typeof(FormIDLink<Light>);
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    return typeof(Single);
                case MagicEffect_FieldIndex.EffectShader:
                    return typeof(FormIDLink<EffectShader>);
                case MagicEffect_FieldIndex.SubData:
                    return typeof(MagicEffectSubData);
                case MagicEffect_FieldIndex.CounterEffects:
                    return typeof(NotifyingList<EDIDLink<MagicEffect>>);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType ESCE_HEADER = new RecordType("ESCE");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = MGEF_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MagicEffectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IMagicEffect item,
            IMagicEffectGetter rhs,
            MagicEffect_CopyMask copyMask = null,
            IMagicEffectGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            MagicEffectCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IMagicEffect item,
            IMagicEffectGetter rhs,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_CopyMask copyMask = null,
            IMagicEffectGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            MagicEffectCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IMagicEffect item,
            IMagicEffectGetter rhs,
            IMagicEffectGetter def,
            bool doMasks,
            out MagicEffect_ErrorMask errorMask,
            MagicEffect_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            MagicEffect_ErrorMask retErrorMask = null;
            Func<MagicEffect_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new MagicEffect_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IMagicEffect item,
            IMagicEffectGetter rhs,
            IMagicEffectGetter def,
            bool doMasks,
            Func<MagicEffect_ErrorMask> errorMask,
            MagicEffect_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Description ?? true)
            {
                try
                {
                    item.Description_Property.SetToWithDefault(
                        rhs: rhs.Description_Property,
                        def: def?.Description_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.Description, ex);
                }
            }
            if (copyMask?.Icon ?? true)
            {
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.Icon, ex);
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Model.Specific == null)
                                            {
                                                baseMask.Model = new MaskItem<Exception, Model_ErrorMask>(null, new Model_ErrorMask());
                                            }
                                            return baseMask.Model.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.Model, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.BaseCost ?? true)
            {
                try
                {
                    item.BaseCost_Property.Set(
                        value: rhs.BaseCost,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.BaseCost, ex);
                }
            }
            if (copyMask?.Unused ?? true)
            {
                try
                {
                    item.Unused_Property.Set(
                        value: rhs.Unused,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.Unused, ex);
                }
            }
            if (copyMask?.MagicSchool ?? true)
            {
                try
                {
                    item.MagicSchool_Property.Set(
                        value: rhs.MagicSchool,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.MagicSchool, ex);
                }
            }
            if (copyMask?.Resistance ?? true)
            {
                try
                {
                    item.Resistance_Property.Set(
                        value: rhs.Resistance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.Resistance, ex);
                }
            }
            if (copyMask?.CounterEffectCount ?? true)
            {
                try
                {
                    item.CounterEffectCount_Property.Set(
                        value: rhs.CounterEffectCount,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.CounterEffectCount, ex);
                }
            }
            if (copyMask?.Light ?? true)
            {
                try
                {
                    item.Light_Property.Set(
                        value: rhs.Light,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.Light, ex);
                }
            }
            if (copyMask?.ProjectileSpeed ?? true)
            {
                try
                {
                    item.ProjectileSpeed_Property.Set(
                        value: rhs.ProjectileSpeed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.ProjectileSpeed, ex);
                }
            }
            if (copyMask?.EffectShader ?? true)
            {
                try
                {
                    item.EffectShader_Property.Set(
                        value: rhs.EffectShader,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.EffectShader, ex);
                }
            }
            if (copyMask?.SubData.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.SubData?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.SubData = rhs.SubData;
                            break;
                        case CopyOption.CopyIn:
                            MagicEffectSubDataCommon.CopyFieldsFrom(
                                item: item.SubData,
                                rhs: rhs.SubData,
                                def: def?.SubData,
                                doMasks: doMasks,
                                errorMask: (doMasks ? new Func<MagicEffectSubData_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.SubData.Specific == null)
                                    {
                                        baseMask.SubData = new MaskItem<Exception, MagicEffectSubData_ErrorMask>(null, new MagicEffectSubData_ErrorMask());
                                    }
                                    return baseMask.SubData.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.SubData.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.SubData == null)
                            {
                                item.SubData = null;
                            }
                            else
                            {
                                item.SubData = MagicEffectSubData.Copy(
                                    rhs.SubData,
                                    copyMask?.SubData?.Specific,
                                    def?.SubData);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.SubData?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.SubData, ex);
                }
            }
            if (copyMask?.CounterEffects != CopyOption.Skip)
            {
                try
                {
                    item.CounterEffects.SetToWithDefault(
                        rhs.CounterEffects,
                        def?.CounterEffects,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicEffect_FieldIndex.CounterEffects, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IMagicEffect obj,
            NotifyingFireParameters? cmds = null)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case MagicEffect_FieldIndex.Description:
                    obj.Description_Property.HasBeenSet = on;
                    break;
                case MagicEffect_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case MagicEffect_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case MagicEffect_FieldIndex.CounterEffects:
                    obj.CounterEffects.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IMagicEffect obj,
            NotifyingUnsetParameters? cmds = null)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                    obj.Description_Property.Unset(cmds);
                    break;
                case MagicEffect_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case MagicEffect_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case MagicEffect_FieldIndex.Flags:
                    obj.Flags = default(MagicEffect.MagicFlag);
                    break;
                case MagicEffect_FieldIndex.BaseCost:
                    obj.BaseCost = default(Single);
                    break;
                case MagicEffect_FieldIndex.Unused:
                    obj.Unused = default(Byte[]);
                    break;
                case MagicEffect_FieldIndex.MagicSchool:
                    obj.MagicSchool = default(MagicSchool);
                    break;
                case MagicEffect_FieldIndex.Resistance:
                    obj.Resistance = default(Resistance);
                    break;
                case MagicEffect_FieldIndex.CounterEffectCount:
                    obj.CounterEffectCount = default(UInt32);
                    break;
                case MagicEffect_FieldIndex.Light:
                    obj.Light = default(FormIDLink<Light>);
                    break;
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    obj.ProjectileSpeed = default(Single);
                    break;
                case MagicEffect_FieldIndex.EffectShader:
                    obj.EffectShader = default(FormIDLink<EffectShader>);
                    break;
                case MagicEffect_FieldIndex.SubData:
                    obj.SubData = default(MagicEffectSubData);
                    break;
                case MagicEffect_FieldIndex.CounterEffects:
                    obj.CounterEffects.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IMagicEffect obj)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                    return true;
                case MagicEffect_FieldIndex.Description:
                    return obj.Description_Property.HasBeenSet;
                case MagicEffect_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case MagicEffect_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case MagicEffect_FieldIndex.CounterEffects:
                    return obj.CounterEffects.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IMagicEffectGetter obj)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                    return obj.Description;
                case MagicEffect_FieldIndex.Icon:
                    return obj.Icon;
                case MagicEffect_FieldIndex.Model:
                    return obj.Model;
                case MagicEffect_FieldIndex.Flags:
                    return obj.Flags;
                case MagicEffect_FieldIndex.BaseCost:
                    return obj.BaseCost;
                case MagicEffect_FieldIndex.Unused:
                    return obj.Unused;
                case MagicEffect_FieldIndex.MagicSchool:
                    return obj.MagicSchool;
                case MagicEffect_FieldIndex.Resistance:
                    return obj.Resistance;
                case MagicEffect_FieldIndex.CounterEffectCount:
                    return obj.CounterEffectCount;
                case MagicEffect_FieldIndex.Light:
                    return obj.Light;
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    return obj.ProjectileSpeed;
                case MagicEffect_FieldIndex.EffectShader:
                    return obj.EffectShader;
                case MagicEffect_FieldIndex.SubData:
                    return obj.SubData;
                case MagicEffect_FieldIndex.CounterEffects:
                    return obj.CounterEffects;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IMagicEffect item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Description_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Flags = default(MagicEffect.MagicFlag);
            item.BaseCost = default(Single);
            item.Unused = default(Byte[]);
            item.MagicSchool = default(MagicSchool);
            item.Resistance = default(Resistance);
            item.CounterEffectCount = default(UInt32);
            item.Light = default(FormIDLink<Light>);
            item.ProjectileSpeed = default(Single);
            item.EffectShader = default(FormIDLink<EffectShader>);
            item.SubData = default(MagicEffectSubData);
            item.CounterEffects.Unset(cmds.ToUnsetParams());
        }

        public static MagicEffect_Mask<bool> GetEqualsMask(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs)
        {
            var ret = new MagicEffect_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            MagicEffect_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Description = item.Description_Property.Equals(rhs.Description_Property, (l, r) => object.Equals(l, r));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => ModelCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseCost = item.BaseCost == rhs.BaseCost;
            ret.Unused = item.Unused.EqualsFast(rhs.Unused);
            ret.MagicSchool = item.MagicSchool == rhs.MagicSchool;
            ret.Resistance = item.Resistance == rhs.Resistance;
            ret.CounterEffectCount = item.CounterEffectCount == rhs.CounterEffectCount;
            ret.Light = item.Light == rhs.Light;
            ret.ProjectileSpeed = item.ProjectileSpeed == rhs.ProjectileSpeed;
            ret.EffectShader = item.EffectShader == rhs.EffectShader;
            ret.SubData = new MaskItem<bool, MagicEffectSubData_Mask<bool>>();
            ret.SubData.Specific = MagicEffectSubDataCommon.GetEqualsMask(item.SubData, rhs.SubData);
            ret.SubData.Overall = ret.SubData.Specific.AllEqual((b) => b);
            if (item.CounterEffects.HasBeenSet == rhs.CounterEffects.HasBeenSet)
            {
                if (item.CounterEffects.HasBeenSet)
                {
                    ret.CounterEffects = new MaskItem<bool, IEnumerable<bool>>();
                    ret.CounterEffects.Specific = item.CounterEffects.SelectAgainst<EDIDLink<MagicEffect>, bool>(rhs.CounterEffects, ((l, r) => object.Equals(l, r)), out ret.CounterEffects.Overall);
                    ret.CounterEffects.Overall = ret.CounterEffects.Overall && ret.CounterEffects.Specific.All((b) => b);
                }
                else
                {
                    ret.CounterEffects = new MaskItem<bool, IEnumerable<bool>>();
                    ret.CounterEffects.Overall = true;
                }
            }
            else
            {
                ret.CounterEffects = new MaskItem<bool, IEnumerable<bool>>();
                ret.CounterEffects.Overall = false;
            }
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IMagicEffectGetter item,
            string name = null,
            MagicEffect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMagicEffectGetter item,
            FileGeneration fg,
            string name = null,
            MagicEffect_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(MagicEffect)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(MagicEffect)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.BaseCost ?? true)
                {
                    fg.AppendLine($"BaseCost => {item.BaseCost}");
                }
                if (printMask?.Unused ?? true)
                {
                    fg.AppendLine($"Unused => {item.Unused}");
                }
                if (printMask?.MagicSchool ?? true)
                {
                    fg.AppendLine($"MagicSchool => {item.MagicSchool}");
                }
                if (printMask?.Resistance ?? true)
                {
                    fg.AppendLine($"Resistance => {item.Resistance}");
                }
                if (printMask?.CounterEffectCount ?? true)
                {
                    fg.AppendLine($"CounterEffectCount => {item.CounterEffectCount}");
                }
                if (printMask?.Light ?? true)
                {
                    fg.AppendLine($"Light => {item.Light}");
                }
                if (printMask?.ProjectileSpeed ?? true)
                {
                    fg.AppendLine($"ProjectileSpeed => {item.ProjectileSpeed}");
                }
                if (printMask?.EffectShader ?? true)
                {
                    fg.AppendLine($"EffectShader => {item.EffectShader}");
                }
                if (printMask?.SubData?.Overall ?? true)
                {
                    item.SubData?.ToString(fg, "SubData");
                }
                if (printMask?.CounterEffects?.Overall ?? true)
                {
                    fg.AppendLine("CounterEffects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.CounterEffects)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMagicEffectGetter item,
            MagicEffect_Mask<bool?> checkMask)
        {
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_Property.HasBeenSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model_Property.Item == null || !item.Model_Property.Item.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.CounterEffects.Overall.HasValue && checkMask.CounterEffects.Overall.Value != item.CounterEffects.HasBeenSet) return false;
            return true;
        }

        public static MagicEffect_Mask<bool> GetHasBeenSetMask(IMagicEffectGetter item)
        {
            var ret = new MagicEffect_Mask<bool>();
            ret.Description = item.Description_Property.HasBeenSet;
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model_Property.Item));
            ret.Flags = true;
            ret.BaseCost = true;
            ret.Unused = true;
            ret.MagicSchool = true;
            ret.Resistance = true;
            ret.CounterEffectCount = true;
            ret.Light = true;
            ret.ProjectileSpeed = true;
            ret.EffectShader = true;
            ret.SubData = new MaskItem<bool, MagicEffectSubData_Mask<bool>>(true, MagicEffectSubDataCommon.GetHasBeenSetMask(item.SubData_Property.Item));
            ret.CounterEffects = new MaskItem<bool, IEnumerable<bool>>(item.CounterEffects.HasBeenSet, null);
            return ret;
        }

        public static MagicEffect_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static MagicEffect_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (MagicEffect_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (MagicEffect_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (MagicEffect_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (MagicEffect_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static MagicEffect_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static MagicEffect_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IMagicEffectGetter item,
            bool doMasks,
            out MagicEffect_ErrorMask errorMask,
            string name = null)
        {
            MagicEffect_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicEffect_ErrorMask()) : default(Func<MagicEffect_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IMagicEffectGetter item,
            Func<MagicEffect_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.MagicEffect"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.MagicEffect");
                    }
                    if (item.Description_Property.HasBeenSet)
                    {
                        StringXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Description),
                            item: item.Description_Property,
                            fieldIndex: (int)MagicEffect_FieldIndex.Description,
                            errorMask: errorMask);
                    }
                    if (item.Icon_Property.HasBeenSet)
                    {
                        FilePathXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Icon),
                            item: item.Icon_Property,
                            fieldIndex: (int)MagicEffect_FieldIndex.Icon,
                            errorMask: errorMask);
                    }
                    if (item.Model_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Model_Property,
                            name: nameof(item.Model),
                            fieldIndex: (int)MagicEffect_FieldIndex.Model,
                            errorMask: errorMask);
                    }
                    EnumXmlTranslation<MagicEffect.MagicFlag>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Flags),
                        item: item.Flags_Property,
                        fieldIndex: (int)MagicEffect_FieldIndex.Flags,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.BaseCost),
                        item: item.BaseCost_Property,
                        fieldIndex: (int)MagicEffect_FieldIndex.BaseCost,
                        errorMask: errorMask);
                    ByteArrayXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Unused),
                        item: item.Unused_Property,
                        fieldIndex: (int)MagicEffect_FieldIndex.Unused,
                        errorMask: errorMask);
                    EnumXmlTranslation<MagicSchool>.Instance.Write(
                        writer: writer,
                        name: nameof(item.MagicSchool),
                        item: item.MagicSchool_Property,
                        fieldIndex: (int)MagicEffect_FieldIndex.MagicSchool,
                        errorMask: errorMask);
                    EnumXmlTranslation<Resistance>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Resistance),
                        item: item.Resistance_Property,
                        fieldIndex: (int)MagicEffect_FieldIndex.Resistance,
                        errorMask: errorMask);
                    UInt32XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.CounterEffectCount),
                        item: item.CounterEffectCount_Property,
                        fieldIndex: (int)MagicEffect_FieldIndex.CounterEffectCount,
                        errorMask: errorMask);
                    RawFormIDXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Light),
                        item: item.Light?.FormID,
                        fieldIndex: (int)MagicEffect_FieldIndex.Light,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.ProjectileSpeed),
                        item: item.ProjectileSpeed_Property,
                        fieldIndex: (int)MagicEffect_FieldIndex.ProjectileSpeed,
                        errorMask: errorMask);
                    RawFormIDXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.EffectShader),
                        item: item.EffectShader?.FormID,
                        fieldIndex: (int)MagicEffect_FieldIndex.EffectShader,
                        errorMask: errorMask);
                    LoquiXmlTranslation<MagicEffectSubData, MagicEffectSubData_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: item.SubData_Property,
                        name: nameof(item.SubData),
                        fieldIndex: (int)MagicEffect_FieldIndex.SubData,
                        errorMask: errorMask);
                    if (item.CounterEffects.HasBeenSet)
                    {
                        ListXmlTranslation<EDIDLink<MagicEffect>, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.CounterEffects),
                            item: item.CounterEffects,
                            fieldIndex: (int)MagicEffect_FieldIndex.CounterEffects,
                            errorMask: errorMask,
                            transl: (EDIDLink<MagicEffect> subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                RawFormIDXmlTranslation.Instance.Write(
                                    writer: writer,
                                    name: "Item",
                                    item: subItem?.FormID,
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            MagicEffect item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out MagicEffect_ErrorMask errorMask)
        {
            MagicEffect_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicEffect_ErrorMask()) : default(Func<MagicEffect_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            MagicEffect item,
            RecordTypeConverter recordTypeConverter,
            Func<MagicEffect_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: MagicEffect_Registration.MGEF_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            MagicEffect item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<MagicEffect_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description_Property,
                fieldIndex: (int)MagicEffect_FieldIndex.Description,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.DESC_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)MagicEffect_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.ICON_HEADER),
                nullable: false);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)MagicEffect_FieldIndex.Model,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, MagicEffect_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicEffect.MagicFlag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: new ContentLength(4),
                    fieldIndex: (int)MagicEffect_FieldIndex.Flags,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BaseCost_Property,
                    fieldIndex: (int)MagicEffect_FieldIndex.BaseCost,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unused_Property,
                    fieldIndex: (int)MagicEffect_FieldIndex.Unused,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicSchool>.Instance.Write(
                    writer,
                    item.MagicSchool_Property,
                    length: new ContentLength(4),
                    fieldIndex: (int)MagicEffect_FieldIndex.MagicSchool,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Resistance>.Instance.Write(
                    writer,
                    item.Resistance_Property,
                    length: new ContentLength(4),
                    fieldIndex: (int)MagicEffect_FieldIndex.Resistance,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CounterEffectCount_Property,
                    fieldIndex: (int)MagicEffect_FieldIndex.CounterEffectCount,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Light_Property,
                    fieldIndex: (int)MagicEffect_FieldIndex.Light,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ProjectileSpeed_Property,
                    fieldIndex: (int)MagicEffect_FieldIndex.ProjectileSpeed,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EffectShader_Property,
                    fieldIndex: (int)MagicEffect_FieldIndex.EffectShader,
                    errorMask: errorMask);
                if (!item.DATADataTypeState.HasFlag(MagicEffect.DATADataType.Break0))
                {
                    LoquiBinaryTranslation<MagicEffectSubData, MagicEffectSubData_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: item.SubData_Property,
                        fieldIndex: (int)MagicEffect_FieldIndex.SubData,
                        errorMask: errorMask);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<EDIDLink<MagicEffect>, Exception>.Instance.Write(
                writer: writer,
                item: item.CounterEffects,
                fieldIndex: (int)MagicEffect_FieldIndex.CounterEffects,
                recordType: MagicEffect_Registration.ESCE_HEADER,
                errorMask: errorMask,
                transl: (EDIDLink<MagicEffect> subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class MagicEffect_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<MagicEffect_Mask<T>>
    {
        #region Ctors
        public MagicEffect_Mask()
        {
        }

        public MagicEffect_Mask(T initialValue)
        {
            this.Description = initialValue;
            this.Icon = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Flags = initialValue;
            this.BaseCost = initialValue;
            this.Unused = initialValue;
            this.MagicSchool = initialValue;
            this.Resistance = initialValue;
            this.CounterEffectCount = initialValue;
            this.Light = initialValue;
            this.ProjectileSpeed = initialValue;
            this.EffectShader = initialValue;
            this.SubData = new MaskItem<T, MagicEffectSubData_Mask<T>>(initialValue, new MagicEffectSubData_Mask<T>(initialValue));
            this.CounterEffects = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Description;
        public T Icon;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Flags;
        public T BaseCost;
        public T Unused;
        public T MagicSchool;
        public T Resistance;
        public T CounterEffectCount;
        public T Light;
        public T ProjectileSpeed;
        public T EffectShader;
        public MaskItem<T, MagicEffectSubData_Mask<T>> SubData { get; set; }
        public MaskItem<T, IEnumerable<T>> CounterEffects;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MagicEffect_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MagicEffect_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
            if (!object.Equals(this.Unused, rhs.Unused)) return false;
            if (!object.Equals(this.MagicSchool, rhs.MagicSchool)) return false;
            if (!object.Equals(this.Resistance, rhs.Resistance)) return false;
            if (!object.Equals(this.CounterEffectCount, rhs.CounterEffectCount)) return false;
            if (!object.Equals(this.Light, rhs.Light)) return false;
            if (!object.Equals(this.ProjectileSpeed, rhs.ProjectileSpeed)) return false;
            if (!object.Equals(this.EffectShader, rhs.EffectShader)) return false;
            if (!object.Equals(this.SubData, rhs.SubData)) return false;
            if (!object.Equals(this.CounterEffects, rhs.CounterEffects)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.BaseCost?.GetHashCode());
            ret = ret.CombineHashCode(this.Unused?.GetHashCode());
            ret = ret.CombineHashCode(this.MagicSchool?.GetHashCode());
            ret = ret.CombineHashCode(this.Resistance?.GetHashCode());
            ret = ret.CombineHashCode(this.CounterEffectCount?.GetHashCode());
            ret = ret.CombineHashCode(this.Light?.GetHashCode());
            ret = ret.CombineHashCode(this.ProjectileSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.EffectShader?.GetHashCode());
            ret = ret.CombineHashCode(this.SubData?.GetHashCode());
            ret = ret.CombineHashCode(this.CounterEffects?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Description)) return false;
            if (!eval(this.Icon)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.BaseCost)) return false;
            if (!eval(this.Unused)) return false;
            if (!eval(this.MagicSchool)) return false;
            if (!eval(this.Resistance)) return false;
            if (!eval(this.CounterEffectCount)) return false;
            if (!eval(this.Light)) return false;
            if (!eval(this.ProjectileSpeed)) return false;
            if (!eval(this.EffectShader)) return false;
            if (SubData != null)
            {
                if (!eval(this.SubData.Overall)) return false;
                if (this.SubData.Specific != null && !this.SubData.Specific.AllEqual(eval)) return false;
            }
            if (this.CounterEffects != null)
            {
                if (!eval(this.CounterEffects.Overall)) return false;
                if (this.CounterEffects.Specific != null)
                {
                    foreach (var item in this.CounterEffects.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new MagicEffect_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MagicEffect_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MagicEffect_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Description = eval(this.Description);
            obj.Icon = eval(this.Icon);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Flags = eval(this.Flags);
            obj.BaseCost = eval(this.BaseCost);
            obj.Unused = eval(this.Unused);
            obj.MagicSchool = eval(this.MagicSchool);
            obj.Resistance = eval(this.Resistance);
            obj.CounterEffectCount = eval(this.CounterEffectCount);
            obj.Light = eval(this.Light);
            obj.ProjectileSpeed = eval(this.ProjectileSpeed);
            obj.EffectShader = eval(this.EffectShader);
            if (this.SubData != null)
            {
                obj.SubData = new MaskItem<R, MagicEffectSubData_Mask<R>>();
                obj.SubData.Overall = eval(this.SubData.Overall);
                if (this.SubData.Specific != null)
                {
                    obj.SubData.Specific = this.SubData.Specific.Translate(eval);
                }
            }
            if (CounterEffects != null)
            {
                obj.CounterEffects = new MaskItem<R, IEnumerable<R>>();
                obj.CounterEffects.Overall = eval(this.CounterEffects.Overall);
                if (CounterEffects.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.CounterEffects.Specific = l;
                    foreach (var item in CounterEffects.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.CounterEffects.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MagicEffect_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MagicEffect_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MagicEffect_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.BaseCost ?? true)
                {
                    fg.AppendLine($"BaseCost => {BaseCost}");
                }
                if (printMask?.Unused ?? true)
                {
                    fg.AppendLine($"Unused => {Unused}");
                }
                if (printMask?.MagicSchool ?? true)
                {
                    fg.AppendLine($"MagicSchool => {MagicSchool}");
                }
                if (printMask?.Resistance ?? true)
                {
                    fg.AppendLine($"Resistance => {Resistance}");
                }
                if (printMask?.CounterEffectCount ?? true)
                {
                    fg.AppendLine($"CounterEffectCount => {CounterEffectCount}");
                }
                if (printMask?.Light ?? true)
                {
                    fg.AppendLine($"Light => {Light}");
                }
                if (printMask?.ProjectileSpeed ?? true)
                {
                    fg.AppendLine($"ProjectileSpeed => {ProjectileSpeed}");
                }
                if (printMask?.EffectShader ?? true)
                {
                    fg.AppendLine($"EffectShader => {EffectShader}");
                }
                if (printMask?.SubData?.Overall ?? true)
                {
                    SubData?.ToString(fg);
                }
                if (printMask?.CounterEffects?.Overall ?? true)
                {
                    fg.AppendLine("CounterEffects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (CounterEffects.Overall != null)
                        {
                            fg.AppendLine(CounterEffects.Overall.ToString());
                        }
                        if (CounterEffects.Specific != null)
                        {
                            foreach (var subItem in CounterEffects.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MagicEffect_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<MagicEffect_ErrorMask>
    {
        #region Members
        public Exception Description;
        public Exception Icon;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Flags;
        public Exception BaseCost;
        public Exception Unused;
        public Exception MagicSchool;
        public Exception Resistance;
        public Exception CounterEffectCount;
        public Exception Light;
        public Exception ProjectileSpeed;
        public Exception EffectShader;
        public MaskItem<Exception, MagicEffectSubData_ErrorMask> SubData;
        public MaskItem<Exception, IEnumerable<Exception>> CounterEffects;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case MagicEffect_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case MagicEffect_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case MagicEffect_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case MagicEffect_FieldIndex.BaseCost:
                    this.BaseCost = ex;
                    break;
                case MagicEffect_FieldIndex.Unused:
                    this.Unused = ex;
                    break;
                case MagicEffect_FieldIndex.MagicSchool:
                    this.MagicSchool = ex;
                    break;
                case MagicEffect_FieldIndex.Resistance:
                    this.Resistance = ex;
                    break;
                case MagicEffect_FieldIndex.CounterEffectCount:
                    this.CounterEffectCount = ex;
                    break;
                case MagicEffect_FieldIndex.Light:
                    this.Light = ex;
                    break;
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    this.ProjectileSpeed = ex;
                    break;
                case MagicEffect_FieldIndex.EffectShader:
                    this.EffectShader = ex;
                    break;
                case MagicEffect_FieldIndex.SubData:
                    this.SubData = new MaskItem<Exception, MagicEffectSubData_ErrorMask>(ex, null);
                    break;
                case MagicEffect_FieldIndex.CounterEffects:
                    this.CounterEffects = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case MagicEffect_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.BaseCost:
                    this.BaseCost = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Unused:
                    this.Unused = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.MagicSchool:
                    this.MagicSchool = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Resistance:
                    this.Resistance = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.CounterEffectCount:
                    this.CounterEffectCount = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.Light:
                    this.Light = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    this.ProjectileSpeed = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.EffectShader:
                    this.EffectShader = (Exception)obj;
                    break;
                case MagicEffect_FieldIndex.SubData:
                    this.SubData = (MaskItem<Exception, MagicEffectSubData_ErrorMask>)obj;
                    break;
                case MagicEffect_FieldIndex.CounterEffects:
                    this.CounterEffects = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Description != null) return true;
            if (Icon != null) return true;
            if (Model != null) return true;
            if (Flags != null) return true;
            if (BaseCost != null) return true;
            if (Unused != null) return true;
            if (MagicSchool != null) return true;
            if (Resistance != null) return true;
            if (CounterEffectCount != null) return true;
            if (Light != null) return true;
            if (ProjectileSpeed != null) return true;
            if (EffectShader != null) return true;
            if (SubData != null) return true;
            if (CounterEffects != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("MagicEffect_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine($"Icon => {Icon}");
            Model?.ToString(fg);
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"BaseCost => {BaseCost}");
            fg.AppendLine($"Unused => {Unused}");
            fg.AppendLine($"MagicSchool => {MagicSchool}");
            fg.AppendLine($"Resistance => {Resistance}");
            fg.AppendLine($"CounterEffectCount => {CounterEffectCount}");
            fg.AppendLine($"Light => {Light}");
            fg.AppendLine($"ProjectileSpeed => {ProjectileSpeed}");
            fg.AppendLine($"EffectShader => {EffectShader}");
            SubData?.ToString(fg);
            fg.AppendLine("CounterEffects =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (CounterEffects.Overall != null)
                {
                    fg.AppendLine(CounterEffects.Overall.ToString());
                }
                if (CounterEffects.Specific != null)
                {
                    foreach (var subItem in CounterEffects.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public MagicEffect_ErrorMask Combine(MagicEffect_ErrorMask rhs)
        {
            var ret = new MagicEffect_ErrorMask();
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
            ret.Unused = this.Unused.Combine(rhs.Unused);
            ret.MagicSchool = this.MagicSchool.Combine(rhs.MagicSchool);
            ret.Resistance = this.Resistance.Combine(rhs.Resistance);
            ret.CounterEffectCount = this.CounterEffectCount.Combine(rhs.CounterEffectCount);
            ret.Light = this.Light.Combine(rhs.Light);
            ret.ProjectileSpeed = this.ProjectileSpeed.Combine(rhs.ProjectileSpeed);
            ret.EffectShader = this.EffectShader.Combine(rhs.EffectShader);
            ret.SubData = new MaskItem<Exception, MagicEffectSubData_ErrorMask>(this.SubData.Overall.Combine(rhs.SubData.Overall), ((IErrorMask<MagicEffectSubData_ErrorMask>)this.SubData.Specific).Combine(rhs.SubData.Specific));
            ret.CounterEffects = new MaskItem<Exception, IEnumerable<Exception>>(this.CounterEffects.Overall.Combine(rhs.CounterEffects.Overall), new List<Exception>(this.CounterEffects.Specific.And(rhs.CounterEffects.Specific)));
            return ret;
        }
        public static MagicEffect_ErrorMask Combine(MagicEffect_ErrorMask lhs, MagicEffect_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class MagicEffect_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Description;
        public bool Icon;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Flags;
        public bool BaseCost;
        public bool Unused;
        public bool MagicSchool;
        public bool Resistance;
        public bool CounterEffectCount;
        public bool Light;
        public bool ProjectileSpeed;
        public bool EffectShader;
        public MaskItem<CopyOption, MagicEffectSubData_CopyMask> SubData;
        public CopyOption CounterEffects;
        #endregion

    }
    #endregion




    #endregion

}
