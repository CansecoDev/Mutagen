/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MapData : 
        LoquiNotifyingObject,
        IMapData,
        ILoquiObject<MapData>,
        ILoquiObjectSetter,
        IEquatable<MapData>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MapData_Registration.Instance;
        public static MapData_Registration Registration => MapData_Registration.Instance;

        #region Ctor
        public MapData()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region UsableDimensions
        private P2Int _UsableDimensions;
        public P2Int UsableDimensions
        {
            get => this._UsableDimensions;
            set => this.RaiseAndSetIfChanged(ref this._UsableDimensions, value, nameof(UsableDimensions));
        }
        #endregion
        #region CellCoordinatesNWCell
        private P2Int16 _CellCoordinatesNWCell;
        public P2Int16 CellCoordinatesNWCell
        {
            get => this._CellCoordinatesNWCell;
            set => this.RaiseAndSetIfChanged(ref this._CellCoordinatesNWCell, value, nameof(CellCoordinatesNWCell));
        }
        #endregion
        #region CellCoordinatesSECell
        private P2Int16 _CellCoordinatesSECell;
        public P2Int16 CellCoordinatesSECell
        {
            get => this._CellCoordinatesSECell;
            set => this.RaiseAndSetIfChanged(ref this._CellCoordinatesSECell, value, nameof(CellCoordinatesSECell));
        }
        #endregion

        IMask<bool> IEqualsMask<MapData>.GetEqualsMask(MapData rhs, EqualsMaskHelper.Include include) => MapDataCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IMapDataGetter>.GetEqualsMask(IMapDataGetter rhs, EqualsMaskHelper.Include include) => MapDataCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            MapData_Mask<bool> printMask = null)
        {
            return MapDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MapDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public MapData_Mask<bool> GetHasBeenSetMask()
        {
            return MapDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is MapData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MapData rhs)
        {
            if (rhs == null) return false;
            if (!this.UsableDimensions.Equals(rhs.UsableDimensions)) return false;
            if (!this.CellCoordinatesNWCell.Equals(rhs.CellCoordinatesNWCell)) return false;
            if (!this.CellCoordinatesSECell.Equals(rhs.CellCoordinatesSECell)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(UsableDimensions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CellCoordinatesNWCell).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CellCoordinatesSECell).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static MapData Create_Xml(
            XElement node,
            MapData_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MapData Create_Xml(
            XElement node,
            out MapData_ErrorMask errorMask,
            bool doMasks = true,
            MapData_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MapData Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new MapData();
            try
            {
                foreach (var elem in node.Elements())
                {
                    MapDataCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static MapData Create_Xml(
            string path,
            MapData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static MapData Create_Xml(
            string path,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MapData Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            MapData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MapData Create_Xml(
            Stream stream,
            MapData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static MapData Create_Xml(
            Stream stream,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MapData Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            MapData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<MapData>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out MapData_ErrorMask errorMask,
            bool doMasks = true,
            MapData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            MapData_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            MapDataCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((MapData_FieldIndex)index)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = MapData_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static MapData Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static MapData Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out MapData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MapData Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new MapData();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    recordTypeConverter.ConvertToCustom(MapData_Registration.MNAM_HEADER)));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static MapData Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static MapData Create_Binary(
            string path,
            MasterReferences masterReferences,
            out MapData_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MapData Create_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static MapData Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static MapData Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out MapData_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MapData Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MapData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out MapData_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out MapData_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MapDataCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            MapData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            try
            {
                errorMask?.PushIndex((int)MapData_FieldIndex.UsableDimensions);
                if (Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out P2Int UsableDimensionsParse,
                    errorMask: errorMask))
                {
                    item.UsableDimensions = UsableDimensionsParse;
                }
                else
                {
                    item.UsableDimensions = default(P2Int);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)MapData_FieldIndex.CellCoordinatesNWCell);
                if (Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out P2Int16 CellCoordinatesNWCellParse,
                    errorMask: errorMask))
                {
                    item.CellCoordinatesNWCell = CellCoordinatesNWCellParse;
                }
                else
                {
                    item.CellCoordinatesNWCell = default(P2Int16);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)MapData_FieldIndex.CellCoordinatesSECell);
                if (Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out P2Int16 CellCoordinatesSECellParse,
                    errorMask: errorMask))
                {
                    item.CellCoordinatesSECell = CellCoordinatesSECellParse;
                }
                else
                {
                    item.CellCoordinatesSECell = default(P2Int16);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public MapData Copy(
            MapData_CopyMask copyMask = null,
            IMapDataGetter def = null)
        {
            return MapData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MapData Copy(
            IMapData item,
            MapData_CopyMask copyMask = null,
            IMapDataGetter def = null)
        {
            MapData ret;
            if (item.GetType().Equals(typeof(MapData)))
            {
                ret = new MapData();
            }
            else
            {
                ret = (MapData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static MapData Copy_ToLoqui(
            IMapDataGetter item,
            MapData_CopyMask copyMask = null,
            IMapDataGetter def = null)
        {
            MapData ret;
            if (item.GetType().Equals(typeof(MapData)))
            {
                ret = new MapData() as MapData;
            }
            else
            {
                ret = (MapData)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IMapDataGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IMapDataGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IMapDataGetter rhs,
            MapData_CopyMask copyMask,
            IMapDataGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IMapDataGetter rhs,
            out MapData_ErrorMask errorMask,
            MapData_CopyMask copyMask = null,
            IMapDataGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MapDataCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IMapDataGetter rhs,
            ErrorMaskBuilder errorMask,
            MapData_CopyMask copyMask = null,
            IMapDataGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            MapDataCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    this.UsableDimensions = (P2Int)obj;
                    break;
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    this.CellCoordinatesNWCell = (P2Int16)obj;
                    break;
                case MapData_FieldIndex.CellCoordinatesSECell:
                    this.CellCoordinatesSECell = (P2Int16)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            MapDataCommon.Clear(this, cmds);
        }


        public static MapData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new MapData();
            foreach (var pair in fields)
            {
                CopyInInternal_MapData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_MapData(MapData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MapData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    obj.UsableDimensions = (P2Int)pair.Value;
                    break;
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    obj.CellCoordinatesNWCell = (P2Int16)pair.Value;
                    break;
                case MapData_FieldIndex.CellCoordinatesSECell:
                    obj.CellCoordinatesSECell = (P2Int16)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IMapData : IMapDataGetter, ILoquiClass<IMapData, IMapDataGetter>, ILoquiClass<MapData, IMapDataGetter>
    {
        new P2Int UsableDimensions { get; set; }

        new P2Int16 CellCoordinatesNWCell { get; set; }

        new P2Int16 CellCoordinatesSECell { get; set; }

    }

    public partial interface IMapDataGetter : ILoquiObject
    {
        #region UsableDimensions
        P2Int UsableDimensions { get; }

        #endregion
        #region CellCoordinatesNWCell
        P2Int16 CellCoordinatesNWCell { get; }

        #endregion
        #region CellCoordinatesSECell
        P2Int16 CellCoordinatesSECell { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MapData_FieldIndex
    {
        UsableDimensions = 0,
        CellCoordinatesNWCell = 1,
        CellCoordinatesSECell = 2,
    }
    #endregion

    #region Registration
    public class MapData_Registration : ILoquiRegistration
    {
        public static readonly MapData_Registration Instance = new MapData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 146,
            version: 0);

        public const string GUID = "493c28c6-8dd0-40cd-9c54-87243564a406";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(MapData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MapData_ErrorMask);

        public static readonly Type ClassType = typeof(MapData);

        public static readonly Type GetterType = typeof(IMapDataGetter);

        public static readonly Type SetterType = typeof(IMapData);

        public static readonly Type CommonType = typeof(MapDataCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.MapData";

        public const string Name = "MapData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "USABLEDIMENSIONS":
                    return (ushort)MapData_FieldIndex.UsableDimensions;
                case "CELLCOORDINATESNWCELL":
                    return (ushort)MapData_FieldIndex.CellCoordinatesNWCell;
                case "CELLCOORDINATESSECELL":
                    return (ushort)MapData_FieldIndex.CellCoordinatesSECell;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    return "UsableDimensions";
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    return "CellCoordinatesNWCell";
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return "CellCoordinatesSECell";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    return typeof(P2Int);
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    return typeof(P2Int16);
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return typeof(P2Int16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = MNAM_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MapDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IMapData item,
            IMapDataGetter rhs,
            IMapDataGetter def,
            ErrorMaskBuilder errorMask,
            MapData_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.UsableDimensions ?? true)
            {
                errorMask?.PushIndex((int)MapData_FieldIndex.UsableDimensions);
                try
                {
                    item.UsableDimensions = rhs.UsableDimensions;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CellCoordinatesNWCell ?? true)
            {
                errorMask?.PushIndex((int)MapData_FieldIndex.CellCoordinatesNWCell);
                try
                {
                    item.CellCoordinatesNWCell = rhs.CellCoordinatesNWCell;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CellCoordinatesSECell ?? true)
            {
                errorMask?.PushIndex((int)MapData_FieldIndex.CellCoordinatesSECell);
                try
                {
                    item.CellCoordinatesSECell = rhs.CellCoordinatesSECell;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(
            IMapData item,
            NotifyingUnsetParameters cmds = null)
        {
            item.UsableDimensions = default(P2Int);
            item.CellCoordinatesNWCell = default(P2Int16);
            item.CellCoordinatesSECell = default(P2Int16);
        }

        public static MapData_Mask<bool> GetEqualsMask(
            this IMapDataGetter item,
            IMapDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MapData_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IMapDataGetter item,
            IMapDataGetter rhs,
            MapData_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.UsableDimensions = item.UsableDimensions == rhs.UsableDimensions;
            ret.CellCoordinatesNWCell = item.CellCoordinatesNWCell == rhs.CellCoordinatesNWCell;
            ret.CellCoordinatesSECell = item.CellCoordinatesSECell == rhs.CellCoordinatesSECell;
        }

        public static string ToString(
            this IMapDataGetter item,
            string name = null,
            MapData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMapDataGetter item,
            FileGeneration fg,
            string name = null,
            MapData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(MapData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(MapData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.UsableDimensions ?? true)
                {
                    fg.AppendLine($"UsableDimensions => {item.UsableDimensions}");
                }
                if (printMask?.CellCoordinatesNWCell ?? true)
                {
                    fg.AppendLine($"CellCoordinatesNWCell => {item.CellCoordinatesNWCell}");
                }
                if (printMask?.CellCoordinatesSECell ?? true)
                {
                    fg.AppendLine($"CellCoordinatesSECell => {item.CellCoordinatesSECell}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMapDataGetter item,
            MapData_Mask<bool?> checkMask)
        {
            return true;
        }

        public static MapData_Mask<bool> GetHasBeenSetMask(IMapDataGetter item)
        {
            var ret = new MapData_Mask<bool>();
            ret.UsableDimensions = true;
            ret.CellCoordinatesNWCell = true;
            ret.CellCoordinatesSECell = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            MapData item,
            bool doMasks,
            out MapData_ErrorMask errorMask,
            MapData_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            MapData item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MapData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MapData");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this MapData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)MapData_FieldIndex.UsableDimensions) ?? true))
            {
                P2IntXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UsableDimensions),
                    item: item.UsableDimensions,
                    fieldIndex: (int)MapData_FieldIndex.UsableDimensions,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MapData_FieldIndex.CellCoordinatesNWCell) ?? true))
            {
                P2Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CellCoordinatesNWCell),
                    item: item.CellCoordinatesNWCell,
                    fieldIndex: (int)MapData_FieldIndex.CellCoordinatesNWCell,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MapData_FieldIndex.CellCoordinatesSECell) ?? true))
            {
                P2Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CellCoordinatesSECell),
                    item: item.CellCoordinatesSECell,
                    fieldIndex: (int)MapData_FieldIndex.CellCoordinatesSECell,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this MapData item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MapDataCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this MapData item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "UsableDimensions":
                    try
                    {
                        errorMask?.PushIndex((int)MapData_FieldIndex.UsableDimensions);
                        if (P2IntXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P2Int UsableDimensionsParse,
                            errorMask: errorMask))
                        {
                            item.UsableDimensions = UsableDimensionsParse;
                        }
                        else
                        {
                            item.UsableDimensions = default(P2Int);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CellCoordinatesNWCell":
                    try
                    {
                        errorMask?.PushIndex((int)MapData_FieldIndex.CellCoordinatesNWCell);
                        if (P2Int16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out P2Int16 CellCoordinatesNWCellParse,
                            errorMask: errorMask))
                        {
                            item.CellCoordinatesNWCell = CellCoordinatesNWCellParse;
                        }
                        else
                        {
                            item.CellCoordinatesNWCell = default(P2Int16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CellCoordinatesSECell":
                    try
                    {
                        errorMask?.PushIndex((int)MapData_FieldIndex.CellCoordinatesSECell);
                        if (P2Int16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out P2Int16 CellCoordinatesSECellParse,
                            errorMask: errorMask))
                        {
                            item.CellCoordinatesSECell = CellCoordinatesSECellParse;
                        }
                        else
                        {
                            item.CellCoordinatesSECell = default(P2Int16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            MapData item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out MapData_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = MapData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            MapData item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: MapData_Registration.MNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            MapData item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UsableDimensions,
                fieldIndex: (int)MapData_FieldIndex.UsableDimensions,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CellCoordinatesNWCell,
                fieldIndex: (int)MapData_FieldIndex.CellCoordinatesNWCell,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CellCoordinatesSECell,
                fieldIndex: (int)MapData_FieldIndex.CellCoordinatesSECell,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class MapData_Mask<T> : IMask<T>, IEquatable<MapData_Mask<T>>
    {
        #region Ctors
        public MapData_Mask()
        {
        }

        public MapData_Mask(T initialValue)
        {
            this.UsableDimensions = initialValue;
            this.CellCoordinatesNWCell = initialValue;
            this.CellCoordinatesSECell = initialValue;
        }
        #endregion

        #region Members
        public T UsableDimensions;
        public T CellCoordinatesNWCell;
        public T CellCoordinatesSECell;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MapData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MapData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.UsableDimensions, rhs.UsableDimensions)) return false;
            if (!object.Equals(this.CellCoordinatesNWCell, rhs.CellCoordinatesNWCell)) return false;
            if (!object.Equals(this.CellCoordinatesSECell, rhs.CellCoordinatesSECell)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.UsableDimensions?.GetHashCode());
            ret = ret.CombineHashCode(this.CellCoordinatesNWCell?.GetHashCode());
            ret = ret.CombineHashCode(this.CellCoordinatesSECell?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.UsableDimensions)) return false;
            if (!eval(this.CellCoordinatesNWCell)) return false;
            if (!eval(this.CellCoordinatesSECell)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MapData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MapData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MapData_Mask<R> obj, Func<T, R> eval)
        {
            obj.UsableDimensions = eval(this.UsableDimensions);
            obj.CellCoordinatesNWCell = eval(this.CellCoordinatesNWCell);
            obj.CellCoordinatesSECell = eval(this.CellCoordinatesSECell);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MapData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MapData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MapData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.UsableDimensions ?? true)
                {
                    fg.AppendLine($"UsableDimensions => {UsableDimensions}");
                }
                if (printMask?.CellCoordinatesNWCell ?? true)
                {
                    fg.AppendLine($"CellCoordinatesNWCell => {CellCoordinatesNWCell}");
                }
                if (printMask?.CellCoordinatesSECell ?? true)
                {
                    fg.AppendLine($"CellCoordinatesSECell => {CellCoordinatesSECell}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MapData_ErrorMask : IErrorMask, IErrorMask<MapData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception UsableDimensions;
        public Exception CellCoordinatesNWCell;
        public Exception CellCoordinatesSECell;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    return UsableDimensions;
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    return CellCoordinatesNWCell;
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return CellCoordinatesSECell;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    this.UsableDimensions = ex;
                    break;
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    this.CellCoordinatesNWCell = ex;
                    break;
                case MapData_FieldIndex.CellCoordinatesSECell:
                    this.CellCoordinatesSECell = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    this.UsableDimensions = (Exception)obj;
                    break;
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    this.CellCoordinatesNWCell = (Exception)obj;
                    break;
                case MapData_FieldIndex.CellCoordinatesSECell:
                    this.CellCoordinatesSECell = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (UsableDimensions != null) return true;
            if (CellCoordinatesNWCell != null) return true;
            if (CellCoordinatesSECell != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MapData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"UsableDimensions => {UsableDimensions}");
            fg.AppendLine($"CellCoordinatesNWCell => {CellCoordinatesNWCell}");
            fg.AppendLine($"CellCoordinatesSECell => {CellCoordinatesSECell}");
        }
        #endregion

        #region Combine
        public MapData_ErrorMask Combine(MapData_ErrorMask rhs)
        {
            var ret = new MapData_ErrorMask();
            ret.UsableDimensions = this.UsableDimensions.Combine(rhs.UsableDimensions);
            ret.CellCoordinatesNWCell = this.CellCoordinatesNWCell.Combine(rhs.CellCoordinatesNWCell);
            ret.CellCoordinatesSECell = this.CellCoordinatesSECell.Combine(rhs.CellCoordinatesSECell);
            return ret;
        }
        public static MapData_ErrorMask Combine(MapData_ErrorMask lhs, MapData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static MapData_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new MapData_ErrorMask();
        }
        #endregion

    }
    public class MapData_CopyMask
    {
        public MapData_CopyMask()
        {
        }

        public MapData_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.UsableDimensions = defaultOn;
            this.CellCoordinatesNWCell = defaultOn;
            this.CellCoordinatesSECell = defaultOn;
        }

        #region Members
        public bool UsableDimensions;
        public bool CellCoordinatesNWCell;
        public bool CellCoordinatesSECell;
        #endregion

    }

    public class MapData_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool UsableDimensions;
        public bool CellCoordinatesNWCell;
        public bool CellCoordinatesSECell;
        #endregion

        #region Ctors
        public MapData_TranslationMask()
        {
        }

        public MapData_TranslationMask(bool defaultOn)
        {
            this.UsableDimensions = defaultOn;
            this.CellCoordinatesNWCell = defaultOn;
            this.CellCoordinatesSECell = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((UsableDimensions, null));
            ret.Add((CellCoordinatesNWCell, null));
            ret.Add((CellCoordinatesSECell, null));
        }
    }
    #endregion

    #endregion

}
