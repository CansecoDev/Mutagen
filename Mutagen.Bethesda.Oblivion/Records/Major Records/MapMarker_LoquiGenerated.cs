/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MapMarker :
        IMapMarker,
        ILoquiObjectSetter<MapMarker>,
        IEquatable<MapMarker>,
        IEqualsMask
    {
        #region Ctor
        public MapMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public MapMarker.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        MapMarker.Flag? IMapMarkerGetter.Flags => this.Flags;
        #endregion
        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMapMarkerGetter.Name => this.Name;
        #endregion
        #region Types
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MapMarker.Type>? _Types;
        public ExtendedList<MapMarker.Type>? Types
        {
            get => this._Types;
            set => this._Types = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<MapMarker.Type>? IMapMarkerGetter.Types => _Types;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MapMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMapMarkerGetter rhs)) return false;
            return ((MapMarkerCommon)((IMapMarkerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(MapMarker obj)
        {
            return ((MapMarkerCommon)((IMapMarkerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MapMarkerCommon)((IMapMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => MapMarkerXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MapMarkerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static MapMarker CreateFromXml(
            XElement node,
            MapMarker.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MapMarker CreateFromXml(
            XElement node,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MapMarker.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MapMarker CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new MapMarker();
            ((MapMarkerSetterCommon)((IMapMarkerGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static MapMarker CreateFromXml(
            string path,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MapMarker CreateFromXml(
            string path,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MapMarker CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MapMarker CreateFromXml(
            Stream stream,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MapMarker CreateFromXml(
            Stream stream,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MapMarker CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.Name = initialValue;
                this.Types = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem Flags,
                TItem Name,
                TItem Types)
            {
                this.Flags = Flags;
                this.Name = Name;
                this.Types = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Types, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Types;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Types, rhs.Types)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.Name);
                hash.Add(this.Types);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (!eval(this.Name)) return false;
                if (this.Types != null)
                {
                    if (!eval(this.Types.Overall)) return false;
                    if (this.Types.Specific != null)
                    {
                        foreach (var item in this.Types.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (eval(this.Name)) return true;
                if (this.Types != null)
                {
                    if (eval(this.Types.Overall)) return true;
                    if (this.Types.Specific != null)
                    {
                        foreach (var item in this.Types.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MapMarker.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                obj.Name = eval(this.Name);
                if (Types != null)
                {
                    obj.Types = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Types.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Types.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Types.Specific = l;
                        foreach (var item in Types.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MapMarker.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MapMarker.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MapMarker.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Types?.Overall ?? true)
                        && Types.TryGet(out var TypesItem))
                    {
                        fg.AppendLine("Types =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TypesItem.Overall);
                            if (TypesItem.Specific != null)
                            {
                                foreach (var subItem in TypesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Types;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
                switch (enu)
                {
                    case MapMarker_FieldIndex.Flags:
                        return Flags;
                    case MapMarker_FieldIndex.Name:
                        return Name;
                    case MapMarker_FieldIndex.Types:
                        return Types;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
                switch (enu)
                {
                    case MapMarker_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case MapMarker_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case MapMarker_FieldIndex.Types:
                        this.Types = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
                switch (enu)
                {
                    case MapMarker_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case MapMarker_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case MapMarker_FieldIndex.Types:
                        this.Types = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (Name != null) return true;
                if (Types != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Name, "Name");
                if (Types.TryGet(out var TypesItem))
                {
                    fg.AppendLine("Types =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TypesItem.Overall);
                        if (TypesItem.Specific != null)
                        {
                            foreach (var subItem in TypesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Types = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Types?.Overall, rhs.Types?.Overall), ExceptionExt.Combine(this.Types?.Specific, rhs.Types?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Flags;
            public bool Name;
            public bool Types;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Flags = defaultOn;
                this.Name = defaultOn;
                this.Types = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((Name, null));
                ret.Add((Types, null));
            }
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MapMarkerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MapMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static MapMarker CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static MapMarker CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MapMarker();
            ((MapMarkerSetterCommon)((IMapMarkerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMapMarkerGetter)rhs, include);

        void IClearable.Clear()
        {
            ((MapMarkerSetterCommon)((IMapMarkerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MapMarker GetNew()
        {
            return new MapMarker();
        }

    }
    #endregion

    #region Interface
    public partial interface IMapMarker :
        IMapMarkerGetter,
        INamed,
        ILoquiObjectSetter<IMapMarker>
    {
        new MapMarker.Flag? Flags { get; set; }
        new String? Name { get; set; }
        new ExtendedList<MapMarker.Type>? Types { get; set; }
    }

    public partial interface IMapMarkerGetter :
        ILoquiObject,
        INamedGetter,
        ILoquiObject<IMapMarkerGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => MapMarker_Registration.Instance;
        MapMarker.Flag? Flags { get; }
        String? Name { get; }
        IReadOnlyList<MapMarker.Type>? Types { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MapMarkerMixIn
    {
        public static void Clear(this IMapMarker item)
        {
            ((MapMarkerSetterCommon)((IMapMarkerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MapMarker.Mask<bool> GetEqualsMask(
            this IMapMarkerGetter item,
            IMapMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MapMarkerCommon)((IMapMarkerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMapMarkerGetter item,
            string? name = null,
            MapMarker.Mask<bool>? printMask = null)
        {
            return ((MapMarkerCommon)((IMapMarkerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMapMarkerGetter item,
            FileGeneration fg,
            string? name = null,
            MapMarker.Mask<bool>? printMask = null)
        {
            ((MapMarkerCommon)((IMapMarkerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMapMarkerGetter item,
            MapMarker.Mask<bool?> checkMask)
        {
            return ((MapMarkerCommon)((IMapMarkerGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MapMarker.Mask<bool> GetHasBeenSetMask(this IMapMarkerGetter item)
        {
            var ret = new MapMarker.Mask<bool>(false);
            ((MapMarkerCommon)((IMapMarkerGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMapMarkerGetter item,
            IMapMarkerGetter rhs)
        {
            return ((MapMarkerCommon)((IMapMarkerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IMapMarker lhs,
            IMapMarkerGetter rhs)
        {
            ((MapMarkerSetterTranslationCommon)((IMapMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IMapMarker lhs,
            IMapMarkerGetter rhs,
            MapMarker.TranslationMask? copyMask = null)
        {
            ((MapMarkerSetterTranslationCommon)((IMapMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMapMarker lhs,
            IMapMarkerGetter rhs,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MapMarkerSetterTranslationCommon)((IMapMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = MapMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMapMarker lhs,
            IMapMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MapMarkerSetterTranslationCommon)((IMapMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static MapMarker DeepCopy(
            this IMapMarkerGetter item,
            MapMarker.TranslationMask? copyMask = null)
        {
            return ((MapMarkerSetterTranslationCommon)((IMapMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MapMarker DeepCopy(
            this IMapMarkerGetter item,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? copyMask = null)
        {
            return ((MapMarkerSetterTranslationCommon)((IMapMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MapMarker DeepCopy(
            this IMapMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MapMarkerSetterTranslationCommon)((IMapMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMapMarker item,
            XElement node,
            MapMarker.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMapMarker item,
            XElement node,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MapMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IMapMarker item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((MapMarkerSetterCommon)((IMapMarkerGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapMarker item,
            string path,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapMarker item,
            string path,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapMarker item,
            string path,
            ErrorMaskBuilder? errorMask,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IMapMarker item,
            Stream stream,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapMarker item,
            Stream stream,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapMarker item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MapMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMapMarker item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IMapMarker item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MapMarkerSetterCommon)((IMapMarkerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MapMarker_FieldIndex
    {
        Flags = 0,
        Name = 1,
        Types = 2,
    }
    #endregion

    #region Registration
    public partial class MapMarker_Registration : ILoquiRegistration
    {
        public static readonly MapMarker_Registration Instance = new MapMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 126,
            version: 0);

        public const string GUID = "96e2692c-898d-48c5-acd1-fbbee402a4f9";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(MapMarker.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MapMarker.ErrorMask);

        public static readonly Type ClassType = typeof(MapMarker);

        public static readonly Type GetterType = typeof(IMapMarkerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMapMarker);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.MapMarker";

        public const string Name = "MapMarker";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)MapMarker_FieldIndex.Flags;
                case "NAME":
                    return (ushort)MapMarker_FieldIndex.Name;
                case "TYPES":
                    return (ushort)MapMarker_FieldIndex.Types;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Types:
                    return true;
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    return "Flags";
                case MapMarker_FieldIndex.Name:
                    return "Name";
                case MapMarker_FieldIndex.Types:
                    return "Types";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    return typeof(MapMarker.Flag);
                case MapMarker_FieldIndex.Name:
                    return typeof(String);
                case MapMarker_FieldIndex.Types:
                    return typeof(ExtendedList<MapMarker.Type>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MapMarkerXmlWriteTranslation);
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.FNAM,
                        RecordTypes.FULL,
                        RecordTypes.TNAM
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(MapMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MapMarkerSetterCommon
    {
        public static readonly MapMarkerSetterCommon Instance = new MapMarkerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMapMarker item)
        {
            ClearPartial();
            item.Flags = default;
            item.Name = default;
            item.Types = null;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IMapMarker item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MapMarkerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMapMarker item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: MapMarkerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MapMarkerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class MapMarkerCommon
    {
        public static readonly MapMarkerCommon Instance = new MapMarkerCommon();

        public MapMarker.Mask<bool> GetEqualsMask(
            IMapMarkerGetter item,
            IMapMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MapMarker.Mask<bool>(false);
            ((MapMarkerCommon)((IMapMarkerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMapMarkerGetter item,
            IMapMarkerGetter rhs,
            MapMarker.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Types = item.Types.CollectionEqualsHelper(
                rhs.Types,
                (l, r) => l == r,
                include);
        }
        
        public string ToString(
            IMapMarkerGetter item,
            string? name = null,
            MapMarker.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMapMarkerGetter item,
            FileGeneration fg,
            string? name = null,
            MapMarker.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MapMarker =>");
            }
            else
            {
                fg.AppendLine($"{name} (MapMarker) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMapMarkerGetter item,
            FileGeneration fg,
            MapMarker.Mask<bool>? printMask = null)
        {
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Types?.Overall ?? true)
                && item.Types.TryGet(out var TypesItem))
            {
                fg.AppendLine("Types =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in TypesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IMapMarkerGetter item,
            MapMarker.Mask<bool?> checkMask)
        {
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Types?.Overall.HasValue ?? false && checkMask.Types!.Overall.Value != (item.Types != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IMapMarkerGetter item,
            MapMarker.Mask<bool> mask)
        {
            mask.Flags = (item.Flags != null);
            mask.Name = (item.Name != null);
            mask.Types = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Types != null), default);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMapMarkerGetter? lhs,
            IMapMarkerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Types.SequenceEqual(rhs.Types)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IMapMarkerGetter item)
        {
            var hash = new HashCode();
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Types);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MapMarker.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IMapMarkerGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IMapMarkerGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class MapMarkerSetterTranslationCommon
    {
        public static readonly MapMarkerSetterTranslationCommon Instance = new MapMarkerSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IMapMarker item,
            IMapMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)MapMarker_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)MapMarker_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)MapMarker_FieldIndex.Types) ?? true))
            {
                errorMask?.PushIndex((int)MapMarker_FieldIndex.Types);
                try
                {
                    if ((rhs.Types != null))
                    {
                        item.Types = 
                            rhs.Types
                            .ToExtendedList<MapMarker.Type>();
                    }
                    else
                    {
                        item.Types = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public MapMarker DeepCopy(
            IMapMarkerGetter item,
            MapMarker.TranslationMask? copyMask = null)
        {
            MapMarker ret = (MapMarker)((MapMarkerCommon)((IMapMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public MapMarker DeepCopy(
            IMapMarkerGetter item,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? copyMask = null)
        {
            MapMarker ret = (MapMarker)((MapMarkerCommon)((IMapMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public MapMarker DeepCopy(
            IMapMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MapMarker ret = (MapMarker)((MapMarkerCommon)((IMapMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class MapMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MapMarker_Registration.Instance;
        public static MapMarker_Registration Registration => MapMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MapMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MapMarkerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MapMarkerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMapMarkerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMapMarkerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMapMarkerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapMarkerXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static MapMarkerXmlWriteTranslation Instance = new MapMarkerXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMapMarkerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)MapMarker_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<MapMarker.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)MapMarker_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)MapMarker_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)MapMarker_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Types != null)
                && (translationMask?.GetShouldTranslate((int)MapMarker_FieldIndex.Types) ?? true))
            {
                ListXmlTranslation<MapMarker.Type>.Instance.Write(
                    node: node,
                    name: nameof(item.Types),
                    item: item.Types,
                    fieldIndex: (int)MapMarker_FieldIndex.Types,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)MapMarker_FieldIndex.Types),
                    transl: (XElement subNode, MapMarker.Type subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        EnumXmlTranslation<MapMarker.Type>.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IMapMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MapMarker");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MapMarker");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMapMarkerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IMapMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IMapMarkerGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class MapMarkerXmlCreateTranslation
    {
        public readonly static MapMarkerXmlCreateTranslation Instance = new MapMarkerXmlCreateTranslation();

        public static void FillPublicXml(
            IMapMarker item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MapMarkerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMapMarker item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Flags":
                    errorMask?.PushIndex((int)MapMarker_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<MapMarker.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)MapMarker_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Types":
                    errorMask?.PushIndex((int)MapMarker_FieldIndex.Types);
                    try
                    {
                        if (ListXmlTranslation<MapMarker.Type>.Instance.Parse(
                            node: node,
                            enumer: out var TypesItem,
                            transl: EnumXmlTranslation<MapMarker.Type>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Types = TypesItem.ToExtendedList();
                        }
                        else
                        {
                            item.Types = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class MapMarkerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMapMarkerGetter item,
            XElement node,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((MapMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MapMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMapMarkerGetter item,
            string path,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapMarkerGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapMarkerGetter item,
            Stream stream,
            out MapMarker.ErrorMask errorMask,
            MapMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMapMarkerGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMapMarkerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((MapMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IMapMarkerGetter item,
            XElement node,
            string? name = null,
            MapMarker.TranslationMask? translationMask = null)
        {
            ((MapMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IMapMarkerGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((MapMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapMarkerGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((MapMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapMarkerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MapMarkerBinaryWriteTranslation Instance = new MapMarkerBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IMapMarkerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MapMarker.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<MapMarker.Type>.Instance.Write(
                writer: writer,
                items: item.Types,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM),
                transl: (MutagenWriter subWriter, MapMarker.Type subItem) =>
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<MapMarker.Type>.Instance.Write(
                        subWriter,
                        subItem,
                        length: 2);
                });
        }

        public void Write(
            MutagenWriter writer,
            IMapMarkerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMapMarkerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MapMarkerBinaryCreateTranslation
    {
        public readonly static MapMarkerBinaryCreateTranslation Instance = new MapMarkerBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IMapMarker item,
            MutagenFrame frame)
        {
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IMapMarker item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Flags) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<MapMarker.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Flags);
                }
                case RecordTypeInts.FULL:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Name) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Name);
                }
                case RecordTypeInts.TNAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Types) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Types = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<MapMarker.Type>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, out MapMarker.Type listSubItem) =>
                            {
                                return Mutagen.Bethesda.Binary.EnumBinaryTranslation<MapMarker.Type>.Instance.Parse(
                                    frame: r.SpawnWithLength(2),
                                    item: out listSubItem);
                            })
                        .ToExtendedList<MapMarker.Type>();
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Types);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MapMarkerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMapMarkerGetter item,
            MutagenWriter writer)
        {
            ((MapMarkerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapMarkerBinaryOverlay :
        BinaryOverlay,
        IMapMarkerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MapMarker_Registration.Instance;
        public static MapMarker_Registration Registration => MapMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MapMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MapMarkerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMapMarkerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMapMarkerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMapMarkerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMapMarkerGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => MapMarkerXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MapMarkerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MapMarkerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MapMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Flags
        private int? _FlagsLocation;
        public MapMarker.Flag? Flags => _FlagsLocation.HasValue ? (MapMarker.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(MapMarker.Flag?);
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IReadOnlyList<MapMarker.Type>? Types { get; private set; }
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MapMarkerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static MapMarkerBinaryOverlay MapMarkerFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MapMarkerBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static MapMarkerBinaryOverlay MapMarkerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return MapMarkerFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Flags) return TryGet<int?>.Failure;
                    _FlagsLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Flags);
                }
                case RecordTypeInts.FULL:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Name) return TryGet<int?>.Failure;
                    _NameLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Name);
                }
                case RecordTypeInts.TNAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MapMarker_FieldIndex.Types) return TryGet<int?>.Failure;
                    var subMeta = _package.MetaData.Constants.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Types = BinaryOverlayList<MapMarker.Type>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 2,
                        getter: (s, p) => (MapMarker.Type)BinaryPrimitives.ReadUInt16LittleEndian(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)MapMarker_FieldIndex.Types);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MapMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

