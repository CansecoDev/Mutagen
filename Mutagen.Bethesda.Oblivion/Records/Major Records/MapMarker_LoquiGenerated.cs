/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Loqui.Internal;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MapMarker : 
        IMapMarker,
        ILoquiObject<MapMarker>,
        ILoquiObjectSetter,
        IEquatable<MapMarker>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MapMarker_Registration.Instance;
        public static MapMarker_Registration Registration => MapMarker_Registration.Instance;

        #region Ctor
        public MapMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<MapMarker.Flag> _Flags = NotifyingSetItem.Factory<MapMarker.Flag>(markAsSet: false);
        public INotifyingSetItem<MapMarker.Flag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MapMarker.Flag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<MapMarker.Flag> IMapMarker.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<MapMarker.Flag> IMapMarkerGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<String> _Name = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> Name_Property => _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name.Item;
            set => this._Name.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IMapMarker.Name_Property => this.Name_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IMapMarkerGetter.Name_Property => this.Name_Property;
        #endregion
        #region Types
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<MapMarker.Type> _Types = new NotifyingList<MapMarker.Type>();
        public INotifyingList<MapMarker.Type> Types => _Types;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<MapMarker.Type> TypesEnumerable
        {
            get => _Types;
            set => _Types.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<MapMarker.Type> IMapMarker.Types => _Types;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<MapMarker.Type> IMapMarkerGetter.Types => _Types;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => MapMarkerCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => MapMarkerCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => MapMarkerCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            MapMarkerCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<MapMarker>.GetEqualsMask(MapMarker rhs) => MapMarkerCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IMapMarkerGetter>.GetEqualsMask(IMapMarkerGetter rhs) => MapMarkerCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return MapMarkerCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            MapMarker_Mask<bool> printMask = null)
        {
            return MapMarkerCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MapMarkerCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public MapMarker_Mask<bool> GetHasBeenSetMask()
        {
            return MapMarkerCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is MapMarker rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MapMarker rhs)
        {
            if (rhs == null) return false;
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (this.Flags != rhs.Flags) return false;
            }
            if (Name_Property.HasBeenSet != rhs.Name_Property.HasBeenSet) return false;
            if (Name_Property.HasBeenSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Types.HasBeenSet != rhs.Types.HasBeenSet) return false;
            if (Types.HasBeenSet)
            {
                if (!this.Types.SequenceEqual(rhs.Types)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (Name_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Types.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Types).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static MapMarker Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static MapMarker Create_XML(
            XElement root,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (MapMarker Object, MapMarker_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            MapMarker_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MapMarker_ErrorMask()) : default(Func<MapMarker_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static MapMarker Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static MapMarker Create_XML(
            string path,
            out MapMarker_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static MapMarker Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static MapMarker Create_XML(
            Stream stream,
            out MapMarker_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<MapMarker, MapMarker_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out MapMarker_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<MapMarker, MapMarker_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out MapMarker_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out MapMarker_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as MapMarker_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            MapMarkerCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static MapMarker Create_XML_Internal(
            XElement root,
            Func<MapMarker_ErrorMask> errorMask)
        {
            var ret = new MapMarker();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            MapMarker item,
            XElement root,
            string name,
            Func<MapMarker_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<MapMarker.Flag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)MapMarker_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Name":
                    item._Name.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)MapMarker_FieldIndex.Name,
                        errorMask: errorMask));
                    break;
                case "Types":
                    item._Types.SetIfSucceeded(ListXmlTranslation<MapMarker.Type, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)MapMarker_FieldIndex.Types,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return EnumXmlTranslation<MapMarker.Type>.Instance.ParseNonNull(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static MapMarker Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static MapMarker Create_Binary(
            MutagenFrame frame,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (MapMarker Object, MapMarker_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            MapMarker_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MapMarker_ErrorMask()) : default(Func<MapMarker_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static MapMarker Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static MapMarker Create_Binary(
            string path,
            out MapMarker_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MapMarker Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static MapMarker Create_Binary(
            Stream stream,
            out MapMarker_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as MapMarker_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out MapMarker_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            MapMarkerCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static MapMarker Create_Binary_Internal(
            MutagenFrame frame,
            Func<MapMarker_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new MapMarker();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    MapMarker_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            MapMarker item,
            MutagenFrame frame,
            Func<MapMarker_ErrorMask> errorMask)
        {
        }

        protected static TryGet<MapMarker_FieldIndex?> Fill_Binary_RecordTypes(
            MapMarker item,
            MutagenFrame frame,
            MapMarker_FieldIndex? lastParsed,
            Func<MapMarker_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "FNAM":
                    if (lastParsed.HasValue && lastParsed.Value >= MapMarker_FieldIndex.Flags) return TryGet<MapMarker_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Flags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<MapMarker.Flag>.Instance.Parse(
                        frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)MapMarker_FieldIndex.Flags,
                        errorMask: errorMask));
                    return TryGet<MapMarker_FieldIndex?>.Succeed(MapMarker_FieldIndex.Flags);
                case "FULL":
                    if (lastParsed.HasValue && lastParsed.Value >= MapMarker_FieldIndex.Name) return TryGet<MapMarker_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var NametryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)MapMarker_FieldIndex.Name,
                        parseWhole: true,
                        errorMask: errorMask);
                    item._Name.SetIfSucceeded(NametryGet);
                    return TryGet<MapMarker_FieldIndex?>.Succeed(MapMarker_FieldIndex.Name);
                case "TNAM":
                    if (lastParsed.HasValue && lastParsed.Value >= MapMarker_FieldIndex.Types) return TryGet<MapMarker_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var TypestryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<MapMarker.Type, Exception>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)MapMarker_FieldIndex.Types,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return Mutagen.Bethesda.Binary.EnumBinaryTranslation<MapMarker.Type>.Instance.Parse(
                                frame: r.SpawnWithLength(2),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Types.SetIfSucceeded(TypestryGet);
                    return TryGet<MapMarker_FieldIndex?>.Succeed(MapMarker_FieldIndex.Types);
                default:
                    return TryGet<MapMarker_FieldIndex?>.Failure;
            }
        }

        #endregion

        public MapMarker Copy(
            MapMarker_CopyMask copyMask = null,
            IMapMarkerGetter def = null)
        {
            return MapMarker.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MapMarker Copy(
            IMapMarker item,
            MapMarker_CopyMask copyMask = null,
            IMapMarkerGetter def = null)
        {
            MapMarker ret;
            if (item.GetType().Equals(typeof(MapMarker)))
            {
                ret = new MapMarker();
            }
            else
            {
                ret = (MapMarker)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static MapMarker Copy_ToLoqui(
            IMapMarkerGetter item,
            MapMarker_CopyMask copyMask = null,
            IMapMarkerGetter def = null)
        {
            MapMarker ret;
            if (item.GetType().Equals(typeof(MapMarker)))
            {
                ret = new MapMarker() as MapMarker;
            }
            else
            {
                ret = (MapMarker)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IMapMarkerGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IMapMarkerGetter rhs,
            MapMarker_CopyMask copyMask,
            IMapMarkerGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IMapMarkerGetter rhs,
            out MapMarker_ErrorMask errorMask,
            MapMarker_CopyMask copyMask = null,
            IMapMarkerGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            MapMarker_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new MapMarker_ErrorMask();
                }
                return retErrorMask;
            };
            MapMarkerCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    this._Flags.Set(
                        (MapMarker.Flag)obj,
                        cmds);
                    break;
                case MapMarker_FieldIndex.Name:
                    this._Name.Set(
                        (String)obj,
                        cmds);
                    break;
                case MapMarker_FieldIndex.Types:
                    this._Types.SetTo((IEnumerable<MapMarker.Type>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            MapMarkerCommon.Clear(this, cmds);
        }


        public static MapMarker Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new MapMarker();
            foreach (var pair in fields)
            {
                CopyInInternal_MapMarker(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_MapMarker(MapMarker obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MapMarker_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    obj._Flags.Set(
                        (MapMarker.Flag)pair.Value,
                        null);
                    break;
                case MapMarker_FieldIndex.Name:
                    obj._Name.Set(
                        (String)pair.Value,
                        null);
                    break;
                case MapMarker_FieldIndex.Types:
                    obj._Types.SetTo((IEnumerable<MapMarker.Type>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, MapMarker obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IMapMarker : IMapMarkerGetter, ILoquiClass<IMapMarker, IMapMarkerGetter>, ILoquiClass<MapMarker, IMapMarkerGetter>
    {
        new MapMarker.Flag Flags { get; set; }
        new INotifyingSetItem<MapMarker.Flag> Flags_Property { get; }

        new String Name { get; set; }
        new INotifyingSetItem<String> Name_Property { get; }

        new INotifyingList<MapMarker.Type> Types { get; }
    }

    public partial interface IMapMarkerGetter : ILoquiObject
    {
        #region Flags
        MapMarker.Flag Flags { get; }
        INotifyingSetItemGetter<MapMarker.Flag> Flags_Property { get; }

        #endregion
        #region Name
        String Name { get; }
        INotifyingSetItemGetter<String> Name_Property { get; }

        #endregion
        #region Types
        INotifyingListGetter<MapMarker.Type> Types { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MapMarker_FieldIndex
    {
        Flags = 0,
        Name = 1,
        Types = 2,
    }
    #endregion

    #region Registration
    public class MapMarker_Registration : ILoquiRegistration
    {
        public static readonly MapMarker_Registration Instance = new MapMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 126,
            version: 0);

        public const string GUID = "96e2692c-898d-48c5-acd1-fbbee402a4f9";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(MapMarker_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MapMarker_ErrorMask);

        public static readonly Type ClassType = typeof(MapMarker);

        public static readonly Type GetterType = typeof(IMapMarkerGetter);

        public static readonly Type SetterType = typeof(IMapMarker);

        public static readonly Type CommonType = typeof(MapMarkerCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.MapMarker";

        public const string Name = "MapMarker";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)MapMarker_FieldIndex.Flags;
                case "NAME":
                    return (ushort)MapMarker_FieldIndex.Name;
                case "TYPES":
                    return (ushort)MapMarker_FieldIndex.Types;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Types:
                    return true;
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    return "Flags";
                case MapMarker_FieldIndex.Name:
                    return "Name";
                case MapMarker_FieldIndex.Types:
                    return "Types";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                case MapMarker_FieldIndex.Name:
                case MapMarker_FieldIndex.Types:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    return typeof(MapMarker.Flag);
                case MapMarker_FieldIndex.Name:
                    return typeof(String);
                case MapMarker_FieldIndex.Types:
                    return typeof(NotifyingList<MapMarker.Type>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FNAM_HEADER,
                        FULL_HEADER,
                        TNAM_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MapMarkerCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IMapMarker item,
            IMapMarkerGetter rhs,
            IMapMarkerGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            MapMarker_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs: rhs.Flags_Property,
                        def: def?.Flags_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MapMarker_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.Name ?? true)
            {
                try
                {
                    item.Name_Property.SetToWithDefault(
                        rhs: rhs.Name_Property,
                        def: def?.Name_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MapMarker_FieldIndex.Name, ex);
                }
            }
            if (copyMask?.Types != CopyOption.Skip)
            {
                try
                {
                    item.Types.SetToWithDefault(
                        rhs.Types,
                        def?.Types,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MapMarker_FieldIndex.Types, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IMapMarker obj,
            NotifyingFireParameters cmds = null)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                case MapMarker_FieldIndex.Name:
                    obj.Name_Property.HasBeenSet = on;
                    break;
                case MapMarker_FieldIndex.Types:
                    obj.Types.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IMapMarker obj,
            NotifyingUnsetParameters cmds = null)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                case MapMarker_FieldIndex.Name:
                    obj.Name_Property.Unset(cmds);
                    break;
                case MapMarker_FieldIndex.Types:
                    obj.Types.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IMapMarker obj)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                case MapMarker_FieldIndex.Name:
                    return obj.Name_Property.HasBeenSet;
                case MapMarker_FieldIndex.Types:
                    return obj.Types.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IMapMarkerGetter obj)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    return obj.Flags;
                case MapMarker_FieldIndex.Name:
                    return obj.Name;
                case MapMarker_FieldIndex.Types:
                    return obj.Types;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IMapMarker item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Flags_Property.Unset(cmds.ToUnsetParams());
            item.Name_Property.Unset(cmds.ToUnsetParams());
            item.Types.Unset(cmds.ToUnsetParams());
        }

        public static MapMarker_Mask<bool> GetEqualsMask(
            this IMapMarkerGetter item,
            IMapMarkerGetter rhs)
        {
            var ret = new MapMarker_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IMapMarkerGetter item,
            IMapMarkerGetter rhs,
            MapMarker_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            ret.Name = item.Name_Property.Equals(rhs.Name_Property, (l, r) => object.Equals(l, r));
            if (item.Types.HasBeenSet == rhs.Types.HasBeenSet)
            {
                if (item.Types.HasBeenSet)
                {
                    ret.Types = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Types.Specific = item.Types.SelectAgainst<MapMarker.Type, bool>(rhs.Types, ((l, r) => object.Equals(l, r)), out ret.Types.Overall);
                    ret.Types.Overall = ret.Types.Overall && ret.Types.Specific.All((b) => b);
                }
                else
                {
                    ret.Types = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Types.Overall = true;
                }
            }
            else
            {
                ret.Types = new MaskItem<bool, IEnumerable<bool>>();
                ret.Types.Overall = false;
            }
        }

        public static string ToString(
            this IMapMarkerGetter item,
            string name = null,
            MapMarker_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMapMarkerGetter item,
            FileGeneration fg,
            string name = null,
            MapMarker_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(MapMarker)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(MapMarker)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Types?.Overall ?? true)
                {
                    fg.AppendLine("Types =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Types)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMapMarkerGetter item,
            MapMarker_Mask<bool?> checkMask)
        {
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_Property.HasBeenSet) return false;
            if (checkMask.Types.Overall.HasValue && checkMask.Types.Overall.Value != item.Types.HasBeenSet) return false;
            return true;
        }

        public static MapMarker_Mask<bool> GetHasBeenSetMask(IMapMarkerGetter item)
        {
            var ret = new MapMarker_Mask<bool>();
            ret.Flags = item.Flags_Property.HasBeenSet;
            ret.Name = item.Name_Property.HasBeenSet;
            ret.Types = new MaskItem<bool, IEnumerable<bool>>(item.Types.HasBeenSet, null);
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IMapMarkerGetter item,
            bool doMasks,
            out MapMarker_ErrorMask errorMask,
            string name = null)
        {
            MapMarker_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MapMarker_ErrorMask()) : default(Func<MapMarker_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            IMapMarkerGetter item,
            Func<MapMarker_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MapMarker");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MapMarker");
                }
                if (item.Flags_Property.HasBeenSet)
                {
                    EnumXmlTranslation<MapMarker.Flag>.Instance.Write(
                        node: elem,
                        name: nameof(item.Flags),
                        item: item.Flags_Property,
                        fieldIndex: (int)MapMarker_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if (item.Name_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Name),
                        item: item.Name_Property,
                        fieldIndex: (int)MapMarker_FieldIndex.Name,
                        errorMask: errorMask);
                }
                if (item.Types.HasBeenSet)
                {
                    ListXmlTranslation<MapMarker.Type, Exception>.Instance.Write(
                        node: elem,
                        name: nameof(item.Types),
                        item: item.Types,
                        fieldIndex: (int)MapMarker_FieldIndex.Types,
                        errorMask: errorMask,
                        transl: (XElement subNode, MapMarker.Type subItem, bool listDoMasks, out Exception listSubMask) =>
                        {
                            EnumXmlTranslation<MapMarker.Type>.Instance.Write(
                                node: subNode,
                                name: "Item",
                                item: subItem,
                                doMasks: errorMask != null,
                                errorMask: out listSubMask);
                        }
                        );
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            MapMarker item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out MapMarker_ErrorMask errorMask)
        {
            MapMarker_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MapMarker_ErrorMask()) : default(Func<MapMarker_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            MapMarker item,
            RecordTypeConverter recordTypeConverter,
            Func<MapMarker_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            MapMarker item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<MapMarker_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MapMarker.Flag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: 1,
                fieldIndex: (int)MapMarker_FieldIndex.Flags,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(MapMarker_Registration.FNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name_Property,
                fieldIndex: (int)MapMarker_FieldIndex.Name,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(MapMarker_Registration.FULL_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<MapMarker.Type, Exception>.Instance.Write(
                writer: writer,
                item: item.Types,
                fieldIndex: (int)MapMarker_FieldIndex.Types,
                recordType: MapMarker_Registration.TNAM_HEADER,
                errorMask: errorMask,
                transl: (MutagenWriter subWriter, MapMarker.Type subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<MapMarker.Type>.Instance.Write(
                        subWriter,
                        subItem,
                        length: 2,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class MapMarker_Mask<T> : IMask<T>, IEquatable<MapMarker_Mask<T>>
    {
        #region Ctors
        public MapMarker_Mask()
        {
        }

        public MapMarker_Mask(T initialValue)
        {
            this.Flags = initialValue;
            this.Name = initialValue;
            this.Types = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Flags;
        public T Name;
        public MaskItem<T, IEnumerable<T>> Types;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MapMarker_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MapMarker_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Types, rhs.Types)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Types?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Flags)) return false;
            if (!eval(this.Name)) return false;
            if (this.Types != null)
            {
                if (!eval(this.Types.Overall)) return false;
                if (this.Types.Specific != null)
                {
                    foreach (var item in this.Types.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public MapMarker_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MapMarker_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MapMarker_Mask<R> obj, Func<T, R> eval)
        {
            obj.Flags = eval(this.Flags);
            obj.Name = eval(this.Name);
            if (Types != null)
            {
                obj.Types = new MaskItem<R, IEnumerable<R>>();
                obj.Types.Overall = eval(this.Types.Overall);
                if (Types.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Types.Specific = l;
                    foreach (var item in Types.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Types.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MapMarker_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MapMarker_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MapMarker_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Types?.Overall ?? true)
                {
                    fg.AppendLine("Types =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Types.Overall != null)
                        {
                            fg.AppendLine(Types.Overall.ToString());
                        }
                        if (Types.Specific != null)
                        {
                            foreach (var subItem in Types.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MapMarker_ErrorMask : IErrorMask, IErrorMask<MapMarker_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Flags;
        public Exception Name;
        public MaskItem<Exception, IEnumerable<Exception>> Types;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    return Flags;
                case MapMarker_FieldIndex.Name:
                    return Name;
                case MapMarker_FieldIndex.Types:
                    return Types;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case MapMarker_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case MapMarker_FieldIndex.Types:
                    this.Types = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MapMarker_FieldIndex enu = (MapMarker_FieldIndex)index;
            switch (enu)
            {
                case MapMarker_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case MapMarker_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case MapMarker_FieldIndex.Types:
                    this.Types = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Flags != null) return true;
            if (Name != null) return true;
            if (Types != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MapMarker_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine("Types =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Types.Overall != null)
                {
                    fg.AppendLine(Types.Overall.ToString());
                }
                if (Types.Specific != null)
                {
                    foreach (var subItem in Types.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public MapMarker_ErrorMask Combine(MapMarker_ErrorMask rhs)
        {
            var ret = new MapMarker_ErrorMask();
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Types = new MaskItem<Exception, IEnumerable<Exception>>(this.Types.Overall.Combine(rhs.Types.Overall), new List<Exception>(this.Types.Specific.And(rhs.Types.Specific)));
            return ret;
        }
        public static MapMarker_ErrorMask Combine(MapMarker_ErrorMask lhs, MapMarker_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class MapMarker_CopyMask
    {
        #region Members
        public bool Flags;
        public bool Name;
        public CopyOption Types;
        #endregion

    }
    #endregion





    #endregion

}
