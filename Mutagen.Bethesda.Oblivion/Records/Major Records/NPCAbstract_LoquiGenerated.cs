/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class NPCAbstract :
        NPCSpawn,
        INPCAbstractInternal,
        ILoquiObjectSetter<NPCAbstract>,
        ILinkSubContainer,
        IEquatable<NPCAbstract>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NPCAbstract_Registration.Instance;
        public new static NPCAbstract_Registration Registration => NPCAbstract_Registration.Instance;
        protected override object CommonInstance => NPCAbstractCommon.Instance;

        #region Ctor
        protected NPCAbstract()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion


        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INPCAbstractInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            NPCAbstractMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is NPCAbstract rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(NPCAbstract rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override IXmlWriteTranslator XmlWriteTranslator => NPCAbstractXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static NPCAbstract Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            NPCAbstract_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static NPCAbstract Create_Xml(
            XElement node,
            out NPCAbstract_ErrorMask errorMask,
            bool doMasks = true,
            NPCAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = NPCAbstract_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static NPCAbstract Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return null;
                    break;
                default:
                    break;
            }
            NPCAbstract ret;
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown NPCAbstract subclass: {node.Name.LocalName}");
            }
            return ret;
        }

        public static NPCAbstract Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            NPCAbstract_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static NPCAbstract Create_Xml(
            string path,
            out NPCAbstract_ErrorMask errorMask,
            NPCAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NPCAbstract Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            NPCAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static NPCAbstract Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            NPCAbstract_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static NPCAbstract Create_Xml(
            Stream stream,
            out NPCAbstract_ErrorMask errorMask,
            NPCAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NPCAbstract Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            NPCAbstract_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElement_Xml(
            NPCAbstract item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    NPCSpawn.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
        }

        public NPCAbstract(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public NPCAbstract(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override IBinaryWriteTranslator BinaryWriteTranslator => NPCAbstractBinaryWriteTranslation.Instance;
        #endregion

        public NPCAbstract Copy(
            NPCAbstract_CopyMask copyMask = null,
            NPCAbstract def = null)
        {
            return NPCAbstract.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static NPCAbstract Copy(
            NPCAbstract item,
            NPCAbstract_CopyMask copyMask = null,
            NPCAbstract def = null)
        {
            NPCAbstract ret = (NPCAbstract)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static NPCAbstract Copy_ToLoqui(
            NPCAbstract item,
            NPCAbstract_CopyMask copyMask = null,
            NPCAbstract def = null)
        {
            NPCAbstract ret = (NPCAbstract)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            NPCAbstract rhs,
            NPCAbstract_CopyMask copyMask,
            NPCAbstract def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            NPCAbstract rhs,
            out NPCAbstract_ErrorMask errorMask,
            NPCAbstract_CopyMask copyMask = null,
            NPCAbstract def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NPCAbstractCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = NPCAbstract_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            NPCAbstract rhs,
            ErrorMaskBuilder errorMask,
            NPCAbstract_CopyMask copyMask = null,
            NPCAbstract def = null)
        {
            NPCAbstractCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            NPCAbstractCommon.Instance.Clear(this);
        }

        protected new static void CopyInInternal_NPCAbstract(NPCAbstract obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out NPCAbstract_FieldIndex enu))
            {
                CopyInInternal_NPCSpawn(obj, pair);
            }
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface INPCAbstract :
        INPCAbstractGetter,
        INPCSpawn,
        ILoquiObjectSetter<INPCAbstractInternal>
    {
        void CopyFieldsFrom(
            NPCAbstract rhs,
            ErrorMaskBuilder errorMask = null,
            NPCAbstract_CopyMask copyMask = null,
            NPCAbstract def = null);
    }

    public partial interface INPCAbstractInternal :
        INPCSpawnInternal,
        INPCAbstract,
        INPCAbstractInternalGetter
    {
    }

    public partial interface INPCAbstractGetter :
        INPCSpawnGetter,
        ILoquiObject<INPCAbstractInternalGetter>,
        IXmlItem,
        IBinaryItem
    {

    }

    public partial interface INPCAbstractInternalGetter :
        INPCSpawnInternalGetter,
        INPCAbstractGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class NPCAbstractMixIn
    {
        public static void Clear(this INPCAbstractInternal item)
        {
            ((NPCAbstractCommon)item.CommonInstance).Clear(item: item);
        }

        public static NPCAbstract_Mask<bool> GetEqualsMask(
            this INPCAbstractInternalGetter item,
            INPCAbstractInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NPCAbstractCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INPCAbstractInternalGetter item,
            string name = null,
            NPCAbstract_Mask<bool> printMask = null)
        {
            return ((NPCAbstractCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INPCAbstractInternalGetter item,
            FileGeneration fg,
            string name = null,
            NPCAbstract_Mask<bool> printMask = null)
        {
            ((NPCAbstractCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this INPCAbstractInternalGetter item,
            NPCAbstract_Mask<bool?> checkMask)
        {
            return ((NPCAbstractCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static NPCAbstract_Mask<bool> GetHasBeenSetMask(this INPCAbstractInternalGetter item)
        {
            var ret = new NPCAbstract_Mask<bool>();
            ((NPCAbstractCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum NPCAbstract_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
    }
    #endregion

    #region Registration
    public class NPCAbstract_Registration : ILoquiRegistration
    {
        public static readonly NPCAbstract_Registration Instance = new NPCAbstract_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 94,
            version: 0);

        public const string GUID = "64c259ed-5c42-4608-8c24-a41b06215b07";

        public const ushort AdditionalFieldCount = 0;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(NPCAbstract_Mask<>);

        public static readonly Type ErrorMaskType = typeof(NPCAbstract_ErrorMask);

        public static readonly Type ClassType = typeof(NPCAbstract);

        public static readonly Type GetterType = typeof(INPCAbstractGetter);

        public static readonly Type InternalGetterType = typeof(INPCAbstractInternalGetter);

        public static readonly Type SetterType = typeof(INPCAbstract);

        public static readonly Type InternalSetterType = typeof(INPCAbstractInternal);

        public static readonly Type CommonType = typeof(NPCAbstractCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.NPCAbstract";

        public const string Name = "NPCAbstract";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    return NPCSpawn_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    return NPCSpawn_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    return NPCSpawn_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    return NPCSpawn_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    return NPCSpawn_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    return NPCSpawn_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    return NPCSpawn_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlTranslation = typeof(NPCAbstractXmlWriteTranslation);
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        CREA_HEADER,
                        NPC__HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryTranslation = typeof(NPCAbstractBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class NPCAbstractCommon : NPCSpawnCommon
    {
        public static readonly NPCAbstractCommon Instance = new NPCAbstractCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            NPCAbstract item,
            NPCAbstract rhs,
            NPCAbstract def,
            ErrorMaskBuilder errorMask,
            NPCAbstract_CopyMask copyMask)
        {
            NPCSpawnCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(INPCAbstractInternal item)
        {
            ClearPartial();
            base.Clear(item);
        }

        public override void Clear(INPCSpawnInternal item)
        {
            Clear(item: (INPCAbstractInternal)item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (INPCAbstractInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INPCAbstractInternal)item);
        }

        public NPCAbstract_Mask<bool> GetEqualsMask(
            INPCAbstractInternalGetter item,
            INPCAbstractInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NPCAbstract_Mask<bool>();
            ((NPCAbstractCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            INPCAbstractInternalGetter item,
            INPCAbstractInternalGetter rhs,
            NPCAbstract_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            INPCAbstractInternalGetter item,
            string name = null,
            NPCAbstract_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            INPCAbstractInternalGetter item,
            FileGeneration fg,
            string name = null,
            NPCAbstract_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NPCAbstract =>");
            }
            else
            {
                fg.AppendLine($"{name} (NPCAbstract) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            INPCAbstractInternalGetter item,
            FileGeneration fg,
            NPCAbstract_Mask<bool> printMask = null)
        {
            NPCSpawnCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
        }

        public bool HasBeenSet(
            INPCAbstractInternalGetter item,
            NPCAbstract_Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            INPCAbstractInternalGetter item,
            NPCAbstract_Mask<bool> mask)
        {
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static NPCAbstract_FieldIndex ConvertFieldIndex(NPCSpawn_FieldIndex index)
        {
            switch (index)
            {
                case NPCSpawn_FieldIndex.MajorRecordFlagsRaw:
                    return (NPCAbstract_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.FormKey:
                    return (NPCAbstract_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.Version:
                    return (NPCAbstract_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.EditorID:
                    return (NPCAbstract_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.OblivionMajorRecordFlags:
                    return (NPCAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static NPCAbstract_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NPCAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (NPCAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (NPCAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (NPCAbstract_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (NPCAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static NPCAbstract_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NPCAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (NPCAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (NPCAbstract_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (NPCAbstract_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class NPCAbstractXmlWriteTranslation :
        NPCSpawnXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static NPCAbstractXmlWriteTranslation Instance = new NPCAbstractXmlWriteTranslation();

        public static void WriteToNode_Xml(
            INPCAbstractInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            NPCSpawnXmlWriteTranslation.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            INPCAbstractInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.NPCAbstract");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.NPCAbstract");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCAbstractInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            INPCSpawnInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCAbstractInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCAbstractInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCAbstractInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class NPCAbstractXmlCreateTranslation : NPCSpawnXmlCreateTranslation
    {
        public new readonly static NPCAbstractXmlCreateTranslation Instance = new NPCAbstractXmlCreateTranslation();

        public static void FillPublic_Xml(
            INPCAbstractInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    NPCAbstractXmlCreateTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            INPCAbstractInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    NPCSpawnXmlCreateTranslation.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class NPCAbstractXmlTranslationMixIn
    {
        public static void Write_Xml(
            this INPCAbstractInternalGetter item,
            XElement node,
            out NPCAbstract_ErrorMask errorMask,
            bool doMasks = true,
            NPCAbstract_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((NPCAbstractXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NPCAbstract_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this INPCAbstractInternalGetter item,
            string path,
            out NPCAbstract_ErrorMask errorMask,
            NPCAbstract_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this INPCAbstractInternalGetter item,
            Stream stream,
            out NPCAbstract_ErrorMask errorMask,
            NPCAbstract_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class NPCAbstract_Mask<T> : NPCSpawn_Mask<T>, IMask<T>, IEquatable<NPCAbstract_Mask<T>>
    {
        #region Ctors
        public NPCAbstract_Mask()
        {
        }

        public NPCAbstract_Mask(T initialValue)
        {
        }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is NPCAbstract_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(NPCAbstract_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new NPCAbstract_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new NPCAbstract_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(NPCAbstract_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(NPCAbstract_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, NPCAbstract_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(NPCAbstract_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class NPCAbstract_ErrorMask : NPCSpawn_ErrorMask, IErrorMask<NPCAbstract_ErrorMask>
    {
        #region IErrorMask
        public override object GetNthMask(int index)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            NPCAbstract_FieldIndex enu = (NPCAbstract_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("NPCAbstract_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
        }
        #endregion

        #region Combine
        public NPCAbstract_ErrorMask Combine(NPCAbstract_ErrorMask rhs)
        {
            var ret = new NPCAbstract_ErrorMask();
            return ret;
        }
        public static NPCAbstract_ErrorMask Combine(NPCAbstract_ErrorMask lhs, NPCAbstract_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static NPCAbstract_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new NPCAbstract_ErrorMask();
        }
        #endregion

    }
    public class NPCAbstract_CopyMask : NPCSpawn_CopyMask
    {
        public NPCAbstract_CopyMask()
        {
        }

        public NPCAbstract_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
        }

    }

    public class NPCAbstract_TranslationMask : NPCSpawn_TranslationMask
    {
        #region Ctors
        public NPCAbstract_TranslationMask()
            : base()
        {
        }

        public NPCAbstract_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
        }

        #endregion

    }
    #endregion

    #region Binary Translation
    public partial class NPCAbstractBinaryWriteTranslation :
        NPCSpawnBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static NPCAbstractBinaryWriteTranslation Instance = new NPCAbstractBinaryWriteTranslation();

        public virtual void Write(
            MutagenWriter writer,
            INPCAbstractInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCAbstractInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            INPCSpawnInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCAbstractInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCAbstractInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCAbstractInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class NPCAbstractBinaryCreateTranslation : NPCSpawnBinaryCreateTranslation
    {
        public new readonly static NPCAbstractBinaryCreateTranslation Instance = new NPCAbstractBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class NPCAbstractBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this INPCAbstractInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out NPCAbstract_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((NPCAbstractBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = NPCAbstract_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
