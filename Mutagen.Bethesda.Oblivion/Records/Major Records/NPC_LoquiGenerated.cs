/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Windows.Media;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class NPC : NamedMajorRecord, INPC, ILoquiObjectSetter, IEquatable<NPC>
    {
        ILoquiRegistration ILoquiObject.Registration => NPC_Registration.Instance;
        public new static NPC_Registration Registration => NPC_Registration.Instance;

        #region Ctor
        public NPC()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        private readonly INotifyingSetItem<Model> _Model = new NotifyingSetItem<Model>();
        public INotifyingSetItem<Model> Model_Property => this._Model;
        Model INPCGetter.Model => this.Model;
        public Model Model { get => _Model.Item; set => _Model.Item = value; }
        INotifyingSetItem<Model> INPC.Model_Property => this.Model_Property;
        INotifyingSetItemGetter<Model> INPCGetter.Model_Property => this.Model_Property;
        #endregion
        #region NPCFlags
        protected readonly INotifyingItem<NPC.NPCFlag> _NPCFlags = NotifyingItem.Factory<NPC.NPCFlag>();
        public INotifyingItem<NPC.NPCFlag> NPCFlags_Property => _NPCFlags;
        public NPC.NPCFlag NPCFlags
        {
            get => this._NPCFlags.Item;
            set => this._NPCFlags.Set(value);
        }
        INotifyingItem<NPC.NPCFlag> INPC.NPCFlags_Property => this.NPCFlags_Property;
        INotifyingItemGetter<NPC.NPCFlag> INPCGetter.NPCFlags_Property => this.NPCFlags_Property;
        #endregion
        #region BaseSpellPoints
        protected readonly INotifyingItem<UInt16> _BaseSpellPoints = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> BaseSpellPoints_Property => _BaseSpellPoints;
        public UInt16 BaseSpellPoints
        {
            get => this._BaseSpellPoints.Item;
            set => this._BaseSpellPoints.Set(value);
        }
        INotifyingItem<UInt16> INPC.BaseSpellPoints_Property => this.BaseSpellPoints_Property;
        INotifyingItemGetter<UInt16> INPCGetter.BaseSpellPoints_Property => this.BaseSpellPoints_Property;
        #endregion
        #region Fatigue
        protected readonly INotifyingItem<UInt16> _Fatigue = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> Fatigue_Property => _Fatigue;
        public UInt16 Fatigue
        {
            get => this._Fatigue.Item;
            set => this._Fatigue.Set(value);
        }
        INotifyingItem<UInt16> INPC.Fatigue_Property => this.Fatigue_Property;
        INotifyingItemGetter<UInt16> INPCGetter.Fatigue_Property => this.Fatigue_Property;
        #endregion
        #region BarterGold
        protected readonly INotifyingItem<UInt16> _BarterGold = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> BarterGold_Property => _BarterGold;
        public UInt16 BarterGold
        {
            get => this._BarterGold.Item;
            set => this._BarterGold.Set(value);
        }
        INotifyingItem<UInt16> INPC.BarterGold_Property => this.BarterGold_Property;
        INotifyingItemGetter<UInt16> INPCGetter.BarterGold_Property => this.BarterGold_Property;
        #endregion
        #region LevelOffset
        protected readonly INotifyingItem<Int16> _LevelOffset = NotifyingItem.Factory<Int16>();
        public INotifyingItem<Int16> LevelOffset_Property => _LevelOffset;
        public Int16 LevelOffset
        {
            get => this._LevelOffset.Item;
            set => this._LevelOffset.Set(value);
        }
        INotifyingItem<Int16> INPC.LevelOffset_Property => this.LevelOffset_Property;
        INotifyingItemGetter<Int16> INPCGetter.LevelOffset_Property => this.LevelOffset_Property;
        #endregion
        #region CalcMin
        protected readonly INotifyingItem<UInt16> _CalcMin = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> CalcMin_Property => _CalcMin;
        public UInt16 CalcMin
        {
            get => this._CalcMin.Item;
            set => this._CalcMin.Set(value);
        }
        INotifyingItem<UInt16> INPC.CalcMin_Property => this.CalcMin_Property;
        INotifyingItemGetter<UInt16> INPCGetter.CalcMin_Property => this.CalcMin_Property;
        #endregion
        #region CalcMax
        protected readonly INotifyingItem<UInt16> _CalcMax = NotifyingItem.Factory<UInt16>();
        public INotifyingItem<UInt16> CalcMax_Property => _CalcMax;
        public UInt16 CalcMax
        {
            get => this._CalcMax.Item;
            set => this._CalcMax.Set(value);
        }
        INotifyingItem<UInt16> INPC.CalcMax_Property => this.CalcMax_Property;
        INotifyingItemGetter<UInt16> INPCGetter.CalcMax_Property => this.CalcMax_Property;
        #endregion
        #region Factions
        private readonly INotifyingList<RankPlacement> _Factions = new NotifyingList<RankPlacement>();
        public INotifyingList<RankPlacement> Factions => _Factions;
        public IEnumerable<RankPlacement> FactionsEnumerable
        {
            get => _Factions;
            set => _Factions.SetTo(value);
        }
        #region Interface Members
        INotifyingList<RankPlacement> INPC.Factions => _Factions;
        INotifyingListGetter<RankPlacement> INPCGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        public FormIDSetLink<ItemAbstract> DeathItem_Property { get; } = new FormIDSetLink<ItemAbstract>();
        public ItemAbstract DeathItem { get => DeathItem_Property.Item; set => DeathItem_Property.Item = value; }
        FormIDSetLink<ItemAbstract> INPCGetter.DeathItem_Property => this.DeathItem_Property;
        #endregion
        #region Race
        public FormIDSetLink<Race> Race_Property { get; } = new FormIDSetLink<Race>();
        public Race Race { get => Race_Property.Item; set => Race_Property.Item = value; }
        FormIDSetLink<Race> INPCGetter.Race_Property => this.Race_Property;
        #endregion
        #region Spells
        private readonly INotifyingList<FormIDSetLink<Spell>> _Spells = new NotifyingList<FormIDSetLink<Spell>>();
        public INotifyingList<FormIDSetLink<Spell>> Spells => _Spells;
        public IEnumerable<FormIDSetLink<Spell>> SpellsEnumerable
        {
            get => _Spells;
            set => _Spells.SetTo(value);
        }
        #region Interface Members
        INotifyingList<FormIDSetLink<Spell>> INPC.Spells => _Spells;
        INotifyingListGetter<FormIDSetLink<Spell>> INPCGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        FormIDSetLink<Script> INPCGetter.Script_Property => this.Script_Property;
        #endregion
        #region Items
        private readonly INotifyingList<ItemEntry> _Items = new NotifyingList<ItemEntry>();
        public INotifyingList<ItemEntry> Items => _Items;
        public IEnumerable<ItemEntry> ItemsEnumerable
        {
            get => _Items;
            set => _Items.SetTo(value);
        }
        #region Interface Members
        INotifyingList<ItemEntry> INPC.Items => _Items;
        INotifyingListGetter<ItemEntry> INPCGetter.Items => _Items;
        #endregion

        #endregion
        #region Aggression
        protected readonly INotifyingItem<Byte> _Aggression = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Aggression_Property => _Aggression;
        public Byte Aggression
        {
            get => this._Aggression.Item;
            set => this._Aggression.Set(value);
        }
        INotifyingItem<Byte> INPC.Aggression_Property => this.Aggression_Property;
        INotifyingItemGetter<Byte> INPCGetter.Aggression_Property => this.Aggression_Property;
        #endregion
        #region Confidence
        protected readonly INotifyingItem<Byte> _Confidence = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Confidence_Property => _Confidence;
        public Byte Confidence
        {
            get => this._Confidence.Item;
            set => this._Confidence.Set(value);
        }
        INotifyingItem<Byte> INPC.Confidence_Property => this.Confidence_Property;
        INotifyingItemGetter<Byte> INPCGetter.Confidence_Property => this.Confidence_Property;
        #endregion
        #region EnergyLevel
        protected readonly INotifyingItem<Byte> _EnergyLevel = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> EnergyLevel_Property => _EnergyLevel;
        public Byte EnergyLevel
        {
            get => this._EnergyLevel.Item;
            set => this._EnergyLevel.Set(value);
        }
        INotifyingItem<Byte> INPC.EnergyLevel_Property => this.EnergyLevel_Property;
        INotifyingItemGetter<Byte> INPCGetter.EnergyLevel_Property => this.EnergyLevel_Property;
        #endregion
        #region Responsibility
        protected readonly INotifyingItem<Byte> _Responsibility = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Responsibility_Property => _Responsibility;
        public Byte Responsibility
        {
            get => this._Responsibility.Item;
            set => this._Responsibility.Set(value);
        }
        INotifyingItem<Byte> INPC.Responsibility_Property => this.Responsibility_Property;
        INotifyingItemGetter<Byte> INPCGetter.Responsibility_Property => this.Responsibility_Property;
        #endregion
        #region BuySellServices
        protected readonly INotifyingItem<NPC.BuySellServiceFlag> _BuySellServices = NotifyingItem.Factory<NPC.BuySellServiceFlag>();
        public INotifyingItem<NPC.BuySellServiceFlag> BuySellServices_Property => _BuySellServices;
        public NPC.BuySellServiceFlag BuySellServices
        {
            get => this._BuySellServices.Item;
            set => this._BuySellServices.Set(value);
        }
        INotifyingItem<NPC.BuySellServiceFlag> INPC.BuySellServices_Property => this.BuySellServices_Property;
        INotifyingItemGetter<NPC.BuySellServiceFlag> INPCGetter.BuySellServices_Property => this.BuySellServices_Property;
        #endregion
        #region Teaches
        protected readonly INotifyingItem<Skill> _Teaches = NotifyingItem.Factory<Skill>();
        public INotifyingItem<Skill> Teaches_Property => _Teaches;
        public Skill Teaches
        {
            get => this._Teaches.Item;
            set => this._Teaches.Set(value);
        }
        INotifyingItem<Skill> INPC.Teaches_Property => this.Teaches_Property;
        INotifyingItemGetter<Skill> INPCGetter.Teaches_Property => this.Teaches_Property;
        #endregion
        #region MaximumTrainingLevel
        protected readonly INotifyingItem<Byte> _MaximumTrainingLevel = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> MaximumTrainingLevel_Property => _MaximumTrainingLevel;
        public Byte MaximumTrainingLevel
        {
            get => this._MaximumTrainingLevel.Item;
            set => this._MaximumTrainingLevel.Set(value);
        }
        INotifyingItem<Byte> INPC.MaximumTrainingLevel_Property => this.MaximumTrainingLevel_Property;
        INotifyingItemGetter<Byte> INPCGetter.MaximumTrainingLevel_Property => this.MaximumTrainingLevel_Property;
        #endregion
        #region Fluff
        protected readonly INotifyingItem<Byte[]> _Fluff = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[2]);
        public INotifyingItem<Byte[]> Fluff_Property => _Fluff;
        public Byte[] Fluff
        {
            get => this._Fluff.Item;
            set => this._Fluff.Set(value);
        }
        INotifyingItem<Byte[]> INPC.Fluff_Property => this.Fluff_Property;
        INotifyingItemGetter<Byte[]> INPCGetter.Fluff_Property => this.Fluff_Property;
        #endregion
        #region AIPackages
        private readonly INotifyingList<FormIDSetLink<AIPackage>> _AIPackages = new NotifyingList<FormIDSetLink<AIPackage>>();
        public INotifyingList<FormIDSetLink<AIPackage>> AIPackages => _AIPackages;
        public IEnumerable<FormIDSetLink<AIPackage>> AIPackagesEnumerable
        {
            get => _AIPackages;
            set => _AIPackages.SetTo(value);
        }
        #region Interface Members
        INotifyingList<FormIDSetLink<AIPackage>> INPC.AIPackages => _AIPackages;
        INotifyingListGetter<FormIDSetLink<AIPackage>> INPCGetter.AIPackages => _AIPackages;
        #endregion

        #endregion
        #region Animations
        private readonly INotifyingList<String> _Animations = new NotifyingList<String>();
        public INotifyingList<String> Animations => _Animations;
        public IEnumerable<String> AnimationsEnumerable
        {
            get => _Animations;
            set => _Animations.SetTo(value);
        }
        #region Interface Members
        INotifyingList<String> INPC.Animations => _Animations;
        INotifyingListGetter<String> INPCGetter.Animations => _Animations;
        #endregion

        #endregion
        #region Class
        public FormIDSetLink<Class> Class_Property { get; } = new FormIDSetLink<Class>();
        public Class Class { get => Class_Property.Item; set => Class_Property.Item = value; }
        FormIDSetLink<Class> INPCGetter.Class_Property => this.Class_Property;
        #endregion
        #region Armorer
        protected readonly INotifyingItem<Byte> _Armorer = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Armorer_Property => _Armorer;
        public Byte Armorer
        {
            get => this._Armorer.Item;
            set => this._Armorer.Set(value);
        }
        INotifyingItem<Byte> INPC.Armorer_Property => this.Armorer_Property;
        INotifyingItemGetter<Byte> INPCGetter.Armorer_Property => this.Armorer_Property;
        #endregion
        #region Athletics
        protected readonly INotifyingItem<Byte> _Athletics = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Athletics_Property => _Athletics;
        public Byte Athletics
        {
            get => this._Athletics.Item;
            set => this._Athletics.Set(value);
        }
        INotifyingItem<Byte> INPC.Athletics_Property => this.Athletics_Property;
        INotifyingItemGetter<Byte> INPCGetter.Athletics_Property => this.Athletics_Property;
        #endregion
        #region Blade
        protected readonly INotifyingItem<Byte> _Blade = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Blade_Property => _Blade;
        public Byte Blade
        {
            get => this._Blade.Item;
            set => this._Blade.Set(value);
        }
        INotifyingItem<Byte> INPC.Blade_Property => this.Blade_Property;
        INotifyingItemGetter<Byte> INPCGetter.Blade_Property => this.Blade_Property;
        #endregion
        #region Block
        protected readonly INotifyingItem<Byte> _Block = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Block_Property => _Block;
        public Byte Block
        {
            get => this._Block.Item;
            set => this._Block.Set(value);
        }
        INotifyingItem<Byte> INPC.Block_Property => this.Block_Property;
        INotifyingItemGetter<Byte> INPCGetter.Block_Property => this.Block_Property;
        #endregion
        #region Blunt
        protected readonly INotifyingItem<Byte> _Blunt = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Blunt_Property => _Blunt;
        public Byte Blunt
        {
            get => this._Blunt.Item;
            set => this._Blunt.Set(value);
        }
        INotifyingItem<Byte> INPC.Blunt_Property => this.Blunt_Property;
        INotifyingItemGetter<Byte> INPCGetter.Blunt_Property => this.Blunt_Property;
        #endregion
        #region HandToHand
        protected readonly INotifyingItem<Byte> _HandToHand = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> HandToHand_Property => _HandToHand;
        public Byte HandToHand
        {
            get => this._HandToHand.Item;
            set => this._HandToHand.Set(value);
        }
        INotifyingItem<Byte> INPC.HandToHand_Property => this.HandToHand_Property;
        INotifyingItemGetter<Byte> INPCGetter.HandToHand_Property => this.HandToHand_Property;
        #endregion
        #region HeavyArmor
        protected readonly INotifyingItem<Byte> _HeavyArmor = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> HeavyArmor_Property => _HeavyArmor;
        public Byte HeavyArmor
        {
            get => this._HeavyArmor.Item;
            set => this._HeavyArmor.Set(value);
        }
        INotifyingItem<Byte> INPC.HeavyArmor_Property => this.HeavyArmor_Property;
        INotifyingItemGetter<Byte> INPCGetter.HeavyArmor_Property => this.HeavyArmor_Property;
        #endregion
        #region Alchemy
        protected readonly INotifyingItem<Byte> _Alchemy = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Alchemy_Property => _Alchemy;
        public Byte Alchemy
        {
            get => this._Alchemy.Item;
            set => this._Alchemy.Set(value);
        }
        INotifyingItem<Byte> INPC.Alchemy_Property => this.Alchemy_Property;
        INotifyingItemGetter<Byte> INPCGetter.Alchemy_Property => this.Alchemy_Property;
        #endregion
        #region Alteration
        protected readonly INotifyingItem<Byte> _Alteration = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Alteration_Property => _Alteration;
        public Byte Alteration
        {
            get => this._Alteration.Item;
            set => this._Alteration.Set(value);
        }
        INotifyingItem<Byte> INPC.Alteration_Property => this.Alteration_Property;
        INotifyingItemGetter<Byte> INPCGetter.Alteration_Property => this.Alteration_Property;
        #endregion
        #region Conjuration
        protected readonly INotifyingItem<Byte> _Conjuration = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Conjuration_Property => _Conjuration;
        public Byte Conjuration
        {
            get => this._Conjuration.Item;
            set => this._Conjuration.Set(value);
        }
        INotifyingItem<Byte> INPC.Conjuration_Property => this.Conjuration_Property;
        INotifyingItemGetter<Byte> INPCGetter.Conjuration_Property => this.Conjuration_Property;
        #endregion
        #region Destruction
        protected readonly INotifyingItem<Byte> _Destruction = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Destruction_Property => _Destruction;
        public Byte Destruction
        {
            get => this._Destruction.Item;
            set => this._Destruction.Set(value);
        }
        INotifyingItem<Byte> INPC.Destruction_Property => this.Destruction_Property;
        INotifyingItemGetter<Byte> INPCGetter.Destruction_Property => this.Destruction_Property;
        #endregion
        #region Illusion
        protected readonly INotifyingItem<Byte> _Illusion = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Illusion_Property => _Illusion;
        public Byte Illusion
        {
            get => this._Illusion.Item;
            set => this._Illusion.Set(value);
        }
        INotifyingItem<Byte> INPC.Illusion_Property => this.Illusion_Property;
        INotifyingItemGetter<Byte> INPCGetter.Illusion_Property => this.Illusion_Property;
        #endregion
        #region Mysticism
        protected readonly INotifyingItem<Byte> _Mysticism = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Mysticism_Property => _Mysticism;
        public Byte Mysticism
        {
            get => this._Mysticism.Item;
            set => this._Mysticism.Set(value);
        }
        INotifyingItem<Byte> INPC.Mysticism_Property => this.Mysticism_Property;
        INotifyingItemGetter<Byte> INPCGetter.Mysticism_Property => this.Mysticism_Property;
        #endregion
        #region Restoration
        protected readonly INotifyingItem<Byte> _Restoration = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Restoration_Property => _Restoration;
        public Byte Restoration
        {
            get => this._Restoration.Item;
            set => this._Restoration.Set(value);
        }
        INotifyingItem<Byte> INPC.Restoration_Property => this.Restoration_Property;
        INotifyingItemGetter<Byte> INPCGetter.Restoration_Property => this.Restoration_Property;
        #endregion
        #region Acrobatics
        protected readonly INotifyingItem<Byte> _Acrobatics = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Acrobatics_Property => _Acrobatics;
        public Byte Acrobatics
        {
            get => this._Acrobatics.Item;
            set => this._Acrobatics.Set(value);
        }
        INotifyingItem<Byte> INPC.Acrobatics_Property => this.Acrobatics_Property;
        INotifyingItemGetter<Byte> INPCGetter.Acrobatics_Property => this.Acrobatics_Property;
        #endregion
        #region LightArmor
        protected readonly INotifyingItem<Byte> _LightArmor = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> LightArmor_Property => _LightArmor;
        public Byte LightArmor
        {
            get => this._LightArmor.Item;
            set => this._LightArmor.Set(value);
        }
        INotifyingItem<Byte> INPC.LightArmor_Property => this.LightArmor_Property;
        INotifyingItemGetter<Byte> INPCGetter.LightArmor_Property => this.LightArmor_Property;
        #endregion
        #region Marksman
        protected readonly INotifyingItem<Byte> _Marksman = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Marksman_Property => _Marksman;
        public Byte Marksman
        {
            get => this._Marksman.Item;
            set => this._Marksman.Set(value);
        }
        INotifyingItem<Byte> INPC.Marksman_Property => this.Marksman_Property;
        INotifyingItemGetter<Byte> INPCGetter.Marksman_Property => this.Marksman_Property;
        #endregion
        #region Mercantile
        protected readonly INotifyingItem<Byte> _Mercantile = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Mercantile_Property => _Mercantile;
        public Byte Mercantile
        {
            get => this._Mercantile.Item;
            set => this._Mercantile.Set(value);
        }
        INotifyingItem<Byte> INPC.Mercantile_Property => this.Mercantile_Property;
        INotifyingItemGetter<Byte> INPCGetter.Mercantile_Property => this.Mercantile_Property;
        #endregion
        #region Security
        protected readonly INotifyingItem<Byte> _Security = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Security_Property => _Security;
        public Byte Security
        {
            get => this._Security.Item;
            set => this._Security.Set(value);
        }
        INotifyingItem<Byte> INPC.Security_Property => this.Security_Property;
        INotifyingItemGetter<Byte> INPCGetter.Security_Property => this.Security_Property;
        #endregion
        #region Sneak
        protected readonly INotifyingItem<Byte> _Sneak = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Sneak_Property => _Sneak;
        public Byte Sneak
        {
            get => this._Sneak.Item;
            set => this._Sneak.Set(value);
        }
        INotifyingItem<Byte> INPC.Sneak_Property => this.Sneak_Property;
        INotifyingItemGetter<Byte> INPCGetter.Sneak_Property => this.Sneak_Property;
        #endregion
        #region Speechcraft
        protected readonly INotifyingItem<Byte> _Speechcraft = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Speechcraft_Property => _Speechcraft;
        public Byte Speechcraft
        {
            get => this._Speechcraft.Item;
            set => this._Speechcraft.Set(value);
        }
        INotifyingItem<Byte> INPC.Speechcraft_Property => this.Speechcraft_Property;
        INotifyingItemGetter<Byte> INPCGetter.Speechcraft_Property => this.Speechcraft_Property;
        #endregion
        #region Health
        protected readonly INotifyingItem<UInt32> _Health = NotifyingItem.Factory<UInt32>();
        public INotifyingItem<UInt32> Health_Property => _Health;
        public UInt32 Health
        {
            get => this._Health.Item;
            set => this._Health.Set(value);
        }
        INotifyingItem<UInt32> INPC.Health_Property => this.Health_Property;
        INotifyingItemGetter<UInt32> INPCGetter.Health_Property => this.Health_Property;
        #endregion
        #region Strength
        protected readonly INotifyingItem<Byte> _Strength = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Strength_Property => _Strength;
        public Byte Strength
        {
            get => this._Strength.Item;
            set => this._Strength.Set(value);
        }
        INotifyingItem<Byte> INPC.Strength_Property => this.Strength_Property;
        INotifyingItemGetter<Byte> INPCGetter.Strength_Property => this.Strength_Property;
        #endregion
        #region Intelligence
        protected readonly INotifyingItem<Byte> _Intelligence = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Intelligence_Property => _Intelligence;
        public Byte Intelligence
        {
            get => this._Intelligence.Item;
            set => this._Intelligence.Set(value);
        }
        INotifyingItem<Byte> INPC.Intelligence_Property => this.Intelligence_Property;
        INotifyingItemGetter<Byte> INPCGetter.Intelligence_Property => this.Intelligence_Property;
        #endregion
        #region Willpower
        protected readonly INotifyingItem<Byte> _Willpower = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Willpower_Property => _Willpower;
        public Byte Willpower
        {
            get => this._Willpower.Item;
            set => this._Willpower.Set(value);
        }
        INotifyingItem<Byte> INPC.Willpower_Property => this.Willpower_Property;
        INotifyingItemGetter<Byte> INPCGetter.Willpower_Property => this.Willpower_Property;
        #endregion
        #region Agility
        protected readonly INotifyingItem<Byte> _Agility = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Agility_Property => _Agility;
        public Byte Agility
        {
            get => this._Agility.Item;
            set => this._Agility.Set(value);
        }
        INotifyingItem<Byte> INPC.Agility_Property => this.Agility_Property;
        INotifyingItemGetter<Byte> INPCGetter.Agility_Property => this.Agility_Property;
        #endregion
        #region Speed
        protected readonly INotifyingItem<Byte> _Speed = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Speed_Property => _Speed;
        public Byte Speed
        {
            get => this._Speed.Item;
            set => this._Speed.Set(value);
        }
        INotifyingItem<Byte> INPC.Speed_Property => this.Speed_Property;
        INotifyingItemGetter<Byte> INPCGetter.Speed_Property => this.Speed_Property;
        #endregion
        #region Endurance
        protected readonly INotifyingItem<Byte> _Endurance = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Endurance_Property => _Endurance;
        public Byte Endurance
        {
            get => this._Endurance.Item;
            set => this._Endurance.Set(value);
        }
        INotifyingItem<Byte> INPC.Endurance_Property => this.Endurance_Property;
        INotifyingItemGetter<Byte> INPCGetter.Endurance_Property => this.Endurance_Property;
        #endregion
        #region Personality
        protected readonly INotifyingItem<Byte> _Personality = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Personality_Property => _Personality;
        public Byte Personality
        {
            get => this._Personality.Item;
            set => this._Personality.Set(value);
        }
        INotifyingItem<Byte> INPC.Personality_Property => this.Personality_Property;
        INotifyingItemGetter<Byte> INPCGetter.Personality_Property => this.Personality_Property;
        #endregion
        #region Luck
        protected readonly INotifyingItem<Byte> _Luck = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Luck_Property => _Luck;
        public Byte Luck
        {
            get => this._Luck.Item;
            set => this._Luck.Set(value);
        }
        INotifyingItem<Byte> INPC.Luck_Property => this.Luck_Property;
        INotifyingItemGetter<Byte> INPCGetter.Luck_Property => this.Luck_Property;
        #endregion
        #region Hair
        public FormIDSetLink<Hair> Hair_Property { get; } = new FormIDSetLink<Hair>();
        public Hair Hair { get => Hair_Property.Item; set => Hair_Property.Item = value; }
        FormIDSetLink<Hair> INPCGetter.Hair_Property => this.Hair_Property;
        #endregion
        #region HairLength
        protected readonly INotifyingSetItem<Single> _HairLength = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> HairLength_Property => _HairLength;
        public Single HairLength
        {
            get => this._HairLength.Item;
            set => this._HairLength.Set(value);
        }
        INotifyingSetItem<Single> INPC.HairLength_Property => this.HairLength_Property;
        INotifyingSetItemGetter<Single> INPCGetter.HairLength_Property => this.HairLength_Property;
        #endregion
        #region Eyes
        private readonly INotifyingList<FormIDLink<Eye>> _Eyes = new NotifyingList<FormIDLink<Eye>>();
        public INotifyingList<FormIDLink<Eye>> Eyes => _Eyes;
        public IEnumerable<FormIDLink<Eye>> EyesEnumerable
        {
            get => _Eyes;
            set => _Eyes.SetTo(value);
        }
        #region Interface Members
        INotifyingList<FormIDLink<Eye>> INPC.Eyes => _Eyes;
        INotifyingListGetter<FormIDLink<Eye>> INPCGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region HairColor
        protected readonly INotifyingSetItem<Color> _HairColor = NotifyingSetItem.Factory<Color>(markAsSet: false);
        public INotifyingSetItem<Color> HairColor_Property => _HairColor;
        public Color HairColor
        {
            get => this._HairColor.Item;
            set => this._HairColor.Set(value);
        }
        INotifyingSetItem<Color> INPC.HairColor_Property => this.HairColor_Property;
        INotifyingSetItemGetter<Color> INPCGetter.HairColor_Property => this.HairColor_Property;
        #endregion
        #region CombatStyle
        public FormIDSetLink<CombatStyle> CombatStyle_Property { get; } = new FormIDSetLink<CombatStyle>();
        public CombatStyle CombatStyle { get => CombatStyle_Property.Item; set => CombatStyle_Property.Item = value; }
        FormIDSetLink<CombatStyle> INPCGetter.CombatStyle_Property => this.CombatStyle_Property;
        #endregion
        #region FaceGenGeometrySymmetric
        protected readonly INotifyingSetItem<Byte[]> _FaceGenGeometrySymmetric = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> FaceGenGeometrySymmetric_Property => _FaceGenGeometrySymmetric;
        public Byte[] FaceGenGeometrySymmetric
        {
            get => this._FaceGenGeometrySymmetric.Item;
            set => this._FaceGenGeometrySymmetric.Set(value);
        }
        INotifyingSetItem<Byte[]> INPC.FaceGenGeometrySymmetric_Property => this.FaceGenGeometrySymmetric_Property;
        INotifyingSetItemGetter<Byte[]> INPCGetter.FaceGenGeometrySymmetric_Property => this.FaceGenGeometrySymmetric_Property;
        #endregion
        #region FaceGenGeometryAsymmetric
        protected readonly INotifyingSetItem<Byte[]> _FaceGenGeometryAsymmetric = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> FaceGenGeometryAsymmetric_Property => _FaceGenGeometryAsymmetric;
        public Byte[] FaceGenGeometryAsymmetric
        {
            get => this._FaceGenGeometryAsymmetric.Item;
            set => this._FaceGenGeometryAsymmetric.Set(value);
        }
        INotifyingSetItem<Byte[]> INPC.FaceGenGeometryAsymmetric_Property => this.FaceGenGeometryAsymmetric_Property;
        INotifyingSetItemGetter<Byte[]> INPCGetter.FaceGenGeometryAsymmetric_Property => this.FaceGenGeometryAsymmetric_Property;
        #endregion
        #region FaceGenTextureSymmetric
        protected readonly INotifyingSetItem<Byte[]> _FaceGenTextureSymmetric = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> FaceGenTextureSymmetric_Property => _FaceGenTextureSymmetric;
        public Byte[] FaceGenTextureSymmetric
        {
            get => this._FaceGenTextureSymmetric.Item;
            set => this._FaceGenTextureSymmetric.Set(value);
        }
        INotifyingSetItem<Byte[]> INPC.FaceGenTextureSymmetric_Property => this.FaceGenTextureSymmetric_Property;
        INotifyingSetItemGetter<Byte[]> INPCGetter.FaceGenTextureSymmetric_Property => this.FaceGenTextureSymmetric_Property;
        #endregion
        #region Unknown
        protected readonly INotifyingSetItem<Byte[]> _Unknown = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> Unknown_Property => _Unknown;
        public Byte[] Unknown
        {
            get => this._Unknown.Item;
            set => this._Unknown.Set(value);
        }
        INotifyingSetItem<Byte[]> INPC.Unknown_Property => this.Unknown_Property;
        INotifyingSetItemGetter<Byte[]> INPCGetter.Unknown_Property => this.Unknown_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => NPCCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => NPCCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => NPCCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            NPCCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return NPCCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            NPC_Mask<bool> printMask = null)
        {
            return NPCCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            NPCCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new NPC_Mask<bool> GetHasBeenSetMask()
        {
            return NPCCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is NPC rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(NPC rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(Model, rhs.Model)) return false;
            }
            if (NPCFlags != rhs.NPCFlags) return false;
            if (BaseSpellPoints != rhs.BaseSpellPoints) return false;
            if (Fatigue != rhs.Fatigue) return false;
            if (BarterGold != rhs.BarterGold) return false;
            if (LevelOffset != rhs.LevelOffset) return false;
            if (CalcMin != rhs.CalcMin) return false;
            if (CalcMax != rhs.CalcMax) return false;
            if (Factions.HasBeenSet != rhs.Factions.HasBeenSet) return false;
            if (Factions.HasBeenSet)
            {
                if (!Factions.SequenceEqual(rhs.Factions)) return false;
            }
            if (DeathItem_Property.HasBeenSet != rhs.DeathItem_Property.HasBeenSet) return false;
            if (DeathItem_Property.HasBeenSet)
            {
                if (DeathItem != rhs.DeathItem) return false;
            }
            if (Race_Property.HasBeenSet != rhs.Race_Property.HasBeenSet) return false;
            if (Race_Property.HasBeenSet)
            {
                if (Race != rhs.Race) return false;
            }
            if (Spells.HasBeenSet != rhs.Spells.HasBeenSet) return false;
            if (Spells.HasBeenSet)
            {
                if (!Spells.SequenceEqual(rhs.Spells)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (Script != rhs.Script) return false;
            }
            if (Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (Items.HasBeenSet)
            {
                if (!Items.SequenceEqual(rhs.Items)) return false;
            }
            if (Aggression != rhs.Aggression) return false;
            if (Confidence != rhs.Confidence) return false;
            if (EnergyLevel != rhs.EnergyLevel) return false;
            if (Responsibility != rhs.Responsibility) return false;
            if (BuySellServices != rhs.BuySellServices) return false;
            if (Teaches != rhs.Teaches) return false;
            if (MaximumTrainingLevel != rhs.MaximumTrainingLevel) return false;
            if (!Fluff.EqualsFast(rhs.Fluff)) return false;
            if (AIPackages.HasBeenSet != rhs.AIPackages.HasBeenSet) return false;
            if (AIPackages.HasBeenSet)
            {
                if (!AIPackages.SequenceEqual(rhs.AIPackages)) return false;
            }
            if (Animations.HasBeenSet != rhs.Animations.HasBeenSet) return false;
            if (Animations.HasBeenSet)
            {
                if (!Animations.SequenceEqual(rhs.Animations)) return false;
            }
            if (Class_Property.HasBeenSet != rhs.Class_Property.HasBeenSet) return false;
            if (Class_Property.HasBeenSet)
            {
                if (Class != rhs.Class) return false;
            }
            if (Armorer != rhs.Armorer) return false;
            if (Athletics != rhs.Athletics) return false;
            if (Blade != rhs.Blade) return false;
            if (Block != rhs.Block) return false;
            if (Blunt != rhs.Blunt) return false;
            if (HandToHand != rhs.HandToHand) return false;
            if (HeavyArmor != rhs.HeavyArmor) return false;
            if (Alchemy != rhs.Alchemy) return false;
            if (Alteration != rhs.Alteration) return false;
            if (Conjuration != rhs.Conjuration) return false;
            if (Destruction != rhs.Destruction) return false;
            if (Illusion != rhs.Illusion) return false;
            if (Mysticism != rhs.Mysticism) return false;
            if (Restoration != rhs.Restoration) return false;
            if (Acrobatics != rhs.Acrobatics) return false;
            if (LightArmor != rhs.LightArmor) return false;
            if (Marksman != rhs.Marksman) return false;
            if (Mercantile != rhs.Mercantile) return false;
            if (Security != rhs.Security) return false;
            if (Sneak != rhs.Sneak) return false;
            if (Speechcraft != rhs.Speechcraft) return false;
            if (Health != rhs.Health) return false;
            if (Strength != rhs.Strength) return false;
            if (Intelligence != rhs.Intelligence) return false;
            if (Willpower != rhs.Willpower) return false;
            if (Agility != rhs.Agility) return false;
            if (Speed != rhs.Speed) return false;
            if (Endurance != rhs.Endurance) return false;
            if (Personality != rhs.Personality) return false;
            if (Luck != rhs.Luck) return false;
            if (Hair_Property.HasBeenSet != rhs.Hair_Property.HasBeenSet) return false;
            if (Hair_Property.HasBeenSet)
            {
                if (Hair != rhs.Hair) return false;
            }
            if (HairLength_Property.HasBeenSet != rhs.HairLength_Property.HasBeenSet) return false;
            if (HairLength_Property.HasBeenSet)
            {
                if (HairLength != rhs.HairLength) return false;
            }
            if (Eyes.HasBeenSet != rhs.Eyes.HasBeenSet) return false;
            if (Eyes.HasBeenSet)
            {
                if (!Eyes.SequenceEqual(rhs.Eyes)) return false;
            }
            if (HairColor_Property.HasBeenSet != rhs.HairColor_Property.HasBeenSet) return false;
            if (HairColor_Property.HasBeenSet)
            {
                if (HairColor != rhs.HairColor) return false;
            }
            if (CombatStyle_Property.HasBeenSet != rhs.CombatStyle_Property.HasBeenSet) return false;
            if (CombatStyle_Property.HasBeenSet)
            {
                if (CombatStyle != rhs.CombatStyle) return false;
            }
            if (FaceGenGeometrySymmetric_Property.HasBeenSet != rhs.FaceGenGeometrySymmetric_Property.HasBeenSet) return false;
            if (FaceGenGeometrySymmetric_Property.HasBeenSet)
            {
                if (!FaceGenGeometrySymmetric.EqualsFast(rhs.FaceGenGeometrySymmetric)) return false;
            }
            if (FaceGenGeometryAsymmetric_Property.HasBeenSet != rhs.FaceGenGeometryAsymmetric_Property.HasBeenSet) return false;
            if (FaceGenGeometryAsymmetric_Property.HasBeenSet)
            {
                if (!FaceGenGeometryAsymmetric.EqualsFast(rhs.FaceGenGeometryAsymmetric)) return false;
            }
            if (FaceGenTextureSymmetric_Property.HasBeenSet != rhs.FaceGenTextureSymmetric_Property.HasBeenSet) return false;
            if (FaceGenTextureSymmetric_Property.HasBeenSet)
            {
                if (!FaceGenTextureSymmetric.EqualsFast(rhs.FaceGenTextureSymmetric)) return false;
            }
            if (Unknown_Property.HasBeenSet != rhs.Unknown_Property.HasBeenSet) return false;
            if (Unknown_Property.HasBeenSet)
            {
                if (!Unknown.EqualsFast(rhs.Unknown)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(NPCFlags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BaseSpellPoints).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fatigue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BarterGold).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LevelOffset).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CalcMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CalcMax).CombineHashCode(ret);
            if (Factions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Factions).CombineHashCode(ret);
            }
            if (DeathItem_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DeathItem).CombineHashCode(ret);
            }
            if (Race_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Race).CombineHashCode(ret);
            }
            if (Spells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Spells).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Items).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Aggression).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Confidence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EnergyLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Responsibility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BuySellServices).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Teaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaximumTrainingLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            if (AIPackages.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(AIPackages).CombineHashCode(ret);
            }
            if (Animations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Animations).CombineHashCode(ret);
            }
            if (Class_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Class).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Armorer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Athletics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Blade).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Block).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Blunt).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HandToHand).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HeavyArmor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Alchemy).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Alteration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Conjuration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Destruction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Illusion).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Mysticism).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Restoration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Acrobatics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LightArmor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Marksman).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Mercantile).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Security).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Sneak).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Speechcraft).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Strength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Intelligence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Willpower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Agility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Endurance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Personality).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Luck).CombineHashCode(ret);
            if (Hair_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Hair).CombineHashCode(ret);
            }
            if (HairLength_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(HairLength).CombineHashCode(ret);
            }
            if (Eyes.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Eyes).CombineHashCode(ret);
            }
            if (HairColor_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(HairColor).CombineHashCode(ret);
            }
            if (CombatStyle_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CombatStyle).CombineHashCode(ret);
            }
            if (FaceGenGeometrySymmetric_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceGenGeometrySymmetric).CombineHashCode(ret);
            }
            if (FaceGenGeometryAsymmetric_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceGenGeometryAsymmetric).CombineHashCode(ret);
            }
            if (FaceGenTextureSymmetric_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceGenTextureSymmetric).CombineHashCode(ret);
            }
            if (Unknown_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Unknown).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static NPC Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static NPC Create_XML(
            XElement root,
            out NPC_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static NPC Create_XML(
            XElement root,
            bool doMasks,
            out NPC_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (NPC Object, NPC_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            NPC_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new NPC_ErrorMask()) : default(Func<NPC_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static NPC Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static NPC Create_XML(
            string path,
            out NPC_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static NPC Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static NPC Create_XML(
            Stream stream,
            out NPC_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<NPC, NPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out NPC_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<NPC, NPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out NPC_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out NPC_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out NPC_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out NPC_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out NPC_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (NPC_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out NPC_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out NPC_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            NPCCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static NPC Create_XML_Internal(
            XElement root,
            Func<NPC_ErrorMask> errorMask)
        {
            var ret = new NPC();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            NPC item,
            XElement root,
            string name,
            Func<NPC_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Model":
                    item._Model.SetIfSucceeded(LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)NPC_FieldIndex.Model,
                        errorMask: errorMask));
                    break;
                case "NPCFlags":
                    item._NPCFlags.SetIfSucceeded(EnumXmlTranslation<NPC.NPCFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)NPC_FieldIndex.NPCFlags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "BaseSpellPoints":
                    item._BaseSpellPoints.SetIfSucceeded(UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.BaseSpellPoints,
                        errorMask: errorMask));
                    break;
                case "Fatigue":
                    item._Fatigue.SetIfSucceeded(UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Fatigue,
                        errorMask: errorMask));
                    break;
                case "BarterGold":
                    item._BarterGold.SetIfSucceeded(UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.BarterGold,
                        errorMask: errorMask));
                    break;
                case "LevelOffset":
                    item._LevelOffset.SetIfSucceeded(Int16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.LevelOffset,
                        errorMask: errorMask));
                    break;
                case "CalcMin":
                    item._CalcMin.SetIfSucceeded(UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.CalcMin,
                        errorMask: errorMask));
                    break;
                case "CalcMax":
                    item._CalcMax.SetIfSucceeded(UInt16XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.CalcMax,
                        errorMask: errorMask));
                    break;
                case "Factions":
                    item._Factions.SetIfSucceeded(ListXmlTranslation<RankPlacement, MaskItem<Exception, RankPlacement_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)NPC_FieldIndex.Factions,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, RankPlacement_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<RankPlacement, RankPlacement_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "DeathItem":
                    item.DeathItem_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.DeathItem,
                        errorMask: errorMask));
                    break;
                case "Race":
                    item.Race_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Race,
                        errorMask: errorMask));
                    break;
                case "Spells":
                    item._Spells.SetIfSucceeded(ListXmlTranslation<FormIDSetLink<Spell>, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)NPC_FieldIndex.Spells,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return RawFormIDXmlTranslation.Instance.Parse(
                                r,
                                nullable: false,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDSetLink<Spell>(o.Value));
                        }
                        ));
                    break;
                case "Script":
                    item.Script_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Script,
                        errorMask: errorMask));
                    break;
                case "Items":
                    item._Items.SetIfSucceeded(ListXmlTranslation<ItemEntry, MaskItem<Exception, ItemEntry_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)NPC_FieldIndex.Items,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, ItemEntry_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<ItemEntry, ItemEntry_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "Aggression":
                    item._Aggression.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Aggression,
                        errorMask: errorMask));
                    break;
                case "Confidence":
                    item._Confidence.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Confidence,
                        errorMask: errorMask));
                    break;
                case "EnergyLevel":
                    item._EnergyLevel.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.EnergyLevel,
                        errorMask: errorMask));
                    break;
                case "Responsibility":
                    item._Responsibility.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Responsibility,
                        errorMask: errorMask));
                    break;
                case "BuySellServices":
                    item._BuySellServices.SetIfSucceeded(EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)NPC_FieldIndex.BuySellServices,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Teaches":
                    item._Teaches.SetIfSucceeded(EnumXmlTranslation<Skill>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)NPC_FieldIndex.Teaches,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "MaximumTrainingLevel":
                    item._MaximumTrainingLevel.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.MaximumTrainingLevel,
                        errorMask: errorMask));
                    break;
                case "Fluff":
                    item._Fluff.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Fluff,
                        errorMask: errorMask));
                    break;
                case "AIPackages":
                    item._AIPackages.SetIfSucceeded(ListXmlTranslation<FormIDSetLink<AIPackage>, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)NPC_FieldIndex.AIPackages,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return RawFormIDXmlTranslation.Instance.Parse(
                                r,
                                nullable: false,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDSetLink<AIPackage>(o.Value));
                        }
                        ));
                    break;
                case "Animations":
                    item._Animations.SetIfSucceeded(ListXmlTranslation<String, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)NPC_FieldIndex.Animations,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return StringXmlTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "Class":
                    item.Class_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Class,
                        errorMask: errorMask));
                    break;
                case "Armorer":
                    item._Armorer.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Armorer,
                        errorMask: errorMask));
                    break;
                case "Athletics":
                    item._Athletics.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Athletics,
                        errorMask: errorMask));
                    break;
                case "Blade":
                    item._Blade.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Blade,
                        errorMask: errorMask));
                    break;
                case "Block":
                    item._Block.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Block,
                        errorMask: errorMask));
                    break;
                case "Blunt":
                    item._Blunt.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Blunt,
                        errorMask: errorMask));
                    break;
                case "HandToHand":
                    item._HandToHand.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.HandToHand,
                        errorMask: errorMask));
                    break;
                case "HeavyArmor":
                    item._HeavyArmor.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.HeavyArmor,
                        errorMask: errorMask));
                    break;
                case "Alchemy":
                    item._Alchemy.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Alchemy,
                        errorMask: errorMask));
                    break;
                case "Alteration":
                    item._Alteration.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Alteration,
                        errorMask: errorMask));
                    break;
                case "Conjuration":
                    item._Conjuration.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Conjuration,
                        errorMask: errorMask));
                    break;
                case "Destruction":
                    item._Destruction.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Destruction,
                        errorMask: errorMask));
                    break;
                case "Illusion":
                    item._Illusion.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Illusion,
                        errorMask: errorMask));
                    break;
                case "Mysticism":
                    item._Mysticism.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Mysticism,
                        errorMask: errorMask));
                    break;
                case "Restoration":
                    item._Restoration.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Restoration,
                        errorMask: errorMask));
                    break;
                case "Acrobatics":
                    item._Acrobatics.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Acrobatics,
                        errorMask: errorMask));
                    break;
                case "LightArmor":
                    item._LightArmor.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.LightArmor,
                        errorMask: errorMask));
                    break;
                case "Marksman":
                    item._Marksman.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Marksman,
                        errorMask: errorMask));
                    break;
                case "Mercantile":
                    item._Mercantile.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Mercantile,
                        errorMask: errorMask));
                    break;
                case "Security":
                    item._Security.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Security,
                        errorMask: errorMask));
                    break;
                case "Sneak":
                    item._Sneak.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Sneak,
                        errorMask: errorMask));
                    break;
                case "Speechcraft":
                    item._Speechcraft.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Speechcraft,
                        errorMask: errorMask));
                    break;
                case "Health":
                    item._Health.SetIfSucceeded(UInt32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Health,
                        errorMask: errorMask));
                    break;
                case "Strength":
                    item._Strength.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Strength,
                        errorMask: errorMask));
                    break;
                case "Intelligence":
                    item._Intelligence.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Intelligence,
                        errorMask: errorMask));
                    break;
                case "Willpower":
                    item._Willpower.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Willpower,
                        errorMask: errorMask));
                    break;
                case "Agility":
                    item._Agility.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Agility,
                        errorMask: errorMask));
                    break;
                case "Speed":
                    item._Speed.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Speed,
                        errorMask: errorMask));
                    break;
                case "Endurance":
                    item._Endurance.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Endurance,
                        errorMask: errorMask));
                    break;
                case "Personality":
                    item._Personality.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Personality,
                        errorMask: errorMask));
                    break;
                case "Luck":
                    item._Luck.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Luck,
                        errorMask: errorMask));
                    break;
                case "Hair":
                    item.Hair_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Hair,
                        errorMask: errorMask));
                    break;
                case "HairLength":
                    item._HairLength.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.HairLength,
                        errorMask: errorMask));
                    break;
                case "Eyes":
                    item._Eyes.SetIfSucceeded(ListXmlTranslation<FormIDLink<Eye>, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)NPC_FieldIndex.Eyes,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return RawFormIDXmlTranslation.Instance.Parse(
                                r,
                                nullable: false,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDLink<Eye>(o.Value));
                        }
                        ));
                    break;
                case "HairColor":
                    item._HairColor.SetIfSucceeded(ColorXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.HairColor,
                        errorMask: errorMask));
                    break;
                case "CombatStyle":
                    item.CombatStyle_Property.SetIfSucceeded(RawFormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.CombatStyle,
                        errorMask: errorMask));
                    break;
                case "FaceGenGeometrySymmetric":
                    item._FaceGenGeometrySymmetric.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.FaceGenGeometrySymmetric,
                        errorMask: errorMask));
                    break;
                case "FaceGenGeometryAsymmetric":
                    item._FaceGenGeometryAsymmetric.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.FaceGenGeometryAsymmetric,
                        errorMask: errorMask));
                    break;
                case "FaceGenTextureSymmetric":
                    item._FaceGenTextureSymmetric.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.FaceGenTextureSymmetric,
                        errorMask: errorMask));
                    break;
                case "Unknown":
                    item._Unknown.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)NPC_FieldIndex.Unknown,
                        errorMask: errorMask));
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static NPC Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static NPC Create_Binary(
            MutagenFrame frame,
            out NPC_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static NPC Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out NPC_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (NPC Object, NPC_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            NPC_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new NPC_ErrorMask()) : default(Func<NPC_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static NPC Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static NPC Create_Binary(
            string path,
            out NPC_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static NPC Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static NPC Create_Binary(
            Stream stream,
            out NPC_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<NPC, NPC_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out NPC_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<NPC, NPC_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out NPC_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out NPC_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out NPC_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out NPC_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out NPC_ErrorMask errorMask)
        {
            errorMask = (NPC_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out NPC_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out NPC_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            NPCCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static NPC Create_Binary_Internal(
            MutagenFrame frame,
            Func<NPC_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return MajorRecord.TypicalParsing<NPC, NPC_ErrorMask, NPC_FieldIndex>(
                record: new NPC(),
                frame: frame,
                errorMask: errorMask,
                recType: NPC_Registration.NPC__HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            NPC item,
            MutagenFrame frame,
            Func<NPC_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<NPC_FieldIndex?> Fill_Binary_RecordTypes(
            NPC item,
            MutagenFrame frame,
            Func<NPC_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "MODL":
                    item._Model.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)NPC_FieldIndex.Model,
                        errorMask: errorMask));
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Model);
                case "ACBS":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        item._NPCFlags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.NPCFlag>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)NPC_FieldIndex.NPCFlags,
                            errorMask: errorMask));
                        item._BaseSpellPoints.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.BaseSpellPoints,
                            errorMask: errorMask));
                        item._Fatigue.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Fatigue,
                            errorMask: errorMask));
                        item._BarterGold.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.BarterGold,
                            errorMask: errorMask));
                        item._LevelOffset.SetIfSucceeded(Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.LevelOffset,
                            errorMask: errorMask));
                        item._CalcMin.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.CalcMin,
                            errorMask: errorMask));
                        item._CalcMax.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.CalcMax,
                            errorMask: errorMask));
                    }
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.CalcMax);
                case "SNAM":
                    var FactionstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement, MaskItem<Exception, RankPlacement_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.SNAM_HEADER,
                        fieldIndex: (int)NPC_FieldIndex.Factions,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, RankPlacement_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<RankPlacement, RankPlacement_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Factions.SetIfSucceeded(FactionstryGet);
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Factions);
                case "INAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.DeathItem_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.DeathItem,
                        errorMask: errorMask));
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.DeathItem);
                case "RNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Race_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.Race,
                        errorMask: errorMask));
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Race);
                case "SPLO":
                    var SpellstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Spell>, Exception>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.SPLO_HEADER,
                        fieldIndex: (int)NPC_FieldIndex.Spells,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            r.Position += Constants.SUBRECORD_LENGTH;
                            return Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDSetLink<Spell>(o));
                        }
                        );
                    item._Spells.SetIfSucceeded(SpellstryGet);
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Spells);
                case "SCRI":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Script_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.Script,
                        errorMask: errorMask));
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Script);
                case "CNTO":
                    var ItemstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry, MaskItem<Exception, ItemEntry_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.CNTO_HEADER,
                        fieldIndex: (int)NPC_FieldIndex.Items,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, ItemEntry_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<ItemEntry, ItemEntry_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Items.SetIfSucceeded(ItemstryGet);
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Items);
                case "AIDT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        item._Aggression.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Aggression,
                            errorMask: errorMask));
                        item._Confidence.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Confidence,
                            errorMask: errorMask));
                        item._EnergyLevel.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.EnergyLevel,
                            errorMask: errorMask));
                        item._Responsibility.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Responsibility,
                            errorMask: errorMask));
                        item._BuySellServices.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)NPC_FieldIndex.BuySellServices,
                            errorMask: errorMask));
                        item._Teaches.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(1)),
                            fieldIndex: (int)NPC_FieldIndex.Teaches,
                            errorMask: errorMask));
                        item._MaximumTrainingLevel.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.MaximumTrainingLevel,
                            errorMask: errorMask));
                        var FlufftryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(2)),
                            fieldIndex: (int)NPC_FieldIndex.Fluff,
                            errorMask: errorMask);
                        item._Fluff.SetIfSucceeded(FlufftryGet);
                    }
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Fluff);
                case "PKID":
                    var AIPackagestryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<AIPackage>, Exception>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.PKID_HEADER,
                        fieldIndex: (int)NPC_FieldIndex.AIPackages,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            r.Position += Constants.SUBRECORD_LENGTH;
                            return Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDSetLink<AIPackage>(o));
                        }
                        );
                    item._AIPackages.SetIfSucceeded(AIPackagestryGet);
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.AIPackages);
                case "KFFZ":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var AnimationstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<String, Exception>.Instance.ParseRepeatedItem(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.Animations,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Animations.SetIfSucceeded(AnimationstryGet);
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Animations);
                case "CNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Class_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.Class,
                        errorMask: errorMask));
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Class);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        item._Armorer.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Armorer,
                            errorMask: errorMask));
                        item._Athletics.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Athletics,
                            errorMask: errorMask));
                        item._Blade.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Blade,
                            errorMask: errorMask));
                        item._Block.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Block,
                            errorMask: errorMask));
                        item._Blunt.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Blunt,
                            errorMask: errorMask));
                        item._HandToHand.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.HandToHand,
                            errorMask: errorMask));
                        item._HeavyArmor.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.HeavyArmor,
                            errorMask: errorMask));
                        item._Alchemy.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Alchemy,
                            errorMask: errorMask));
                        item._Alteration.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Alteration,
                            errorMask: errorMask));
                        item._Conjuration.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Conjuration,
                            errorMask: errorMask));
                        item._Destruction.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Destruction,
                            errorMask: errorMask));
                        item._Illusion.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Illusion,
                            errorMask: errorMask));
                        item._Mysticism.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Mysticism,
                            errorMask: errorMask));
                        item._Restoration.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Restoration,
                            errorMask: errorMask));
                        item._Acrobatics.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Acrobatics,
                            errorMask: errorMask));
                        item._LightArmor.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.LightArmor,
                            errorMask: errorMask));
                        item._Marksman.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Marksman,
                            errorMask: errorMask));
                        item._Mercantile.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Mercantile,
                            errorMask: errorMask));
                        item._Security.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Security,
                            errorMask: errorMask));
                        item._Sneak.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Sneak,
                            errorMask: errorMask));
                        item._Speechcraft.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Speechcraft,
                            errorMask: errorMask));
                        item._Health.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Health,
                            errorMask: errorMask));
                        item._Strength.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Strength,
                            errorMask: errorMask));
                        item._Intelligence.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Intelligence,
                            errorMask: errorMask));
                        item._Willpower.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Willpower,
                            errorMask: errorMask));
                        item._Agility.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Agility,
                            errorMask: errorMask));
                        item._Speed.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Speed,
                            errorMask: errorMask));
                        item._Endurance.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Endurance,
                            errorMask: errorMask));
                        item._Personality.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Personality,
                            errorMask: errorMask));
                        item._Luck.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)NPC_FieldIndex.Luck,
                            errorMask: errorMask));
                    }
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Luck);
                case "HNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Hair_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.Hair,
                        errorMask: errorMask));
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Hair);
                case "LNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._HairLength.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.HairLength,
                        errorMask: errorMask));
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.HairLength);
                case "ENAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var EyestryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Eye>, Exception>.Instance.ParseRepeatedItem(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.Eyes,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDLink<Eye>(o));
                        }
                        );
                    item._Eyes.SetIfSucceeded(EyestryGet);
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Eyes);
                case "HCLR":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._HairColor.SetIfSucceeded(Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.HairColor,
                        errorMask: errorMask));
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.HairColor);
                case "ZNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.CombatStyle_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.CombatStyle,
                        errorMask: errorMask));
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.CombatStyle);
                case "FGGS":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var FaceGenGeometrySymmetrictryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.FaceGenGeometrySymmetric,
                        errorMask: errorMask);
                    item._FaceGenGeometrySymmetric.SetIfSucceeded(FaceGenGeometrySymmetrictryGet);
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.FaceGenGeometrySymmetric);
                case "FGGA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var FaceGenGeometryAsymmetrictryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.FaceGenGeometryAsymmetric,
                        errorMask: errorMask);
                    item._FaceGenGeometryAsymmetric.SetIfSucceeded(FaceGenGeometryAsymmetrictryGet);
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.FaceGenGeometryAsymmetric);
                case "FGTS":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var FaceGenTextureSymmetrictryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.FaceGenTextureSymmetric,
                        errorMask: errorMask);
                    item._FaceGenTextureSymmetric.SetIfSucceeded(FaceGenTextureSymmetrictryGet);
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.FaceGenTextureSymmetric);
                case "FNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var UnknowntryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)NPC_FieldIndex.Unknown,
                        errorMask: errorMask);
                    item._Unknown.SetIfSucceeded(UnknowntryGet);
                    return TryGet<NPC_FieldIndex?>.Succeed(NPC_FieldIndex.Unknown);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => NPCCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public NPC Copy(
            NPC_CopyMask copyMask = null,
            INPCGetter def = null)
        {
            return NPC.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static NPC Copy(
            INPC item,
            NPC_CopyMask copyMask = null,
            INPCGetter def = null)
        {
            NPC ret;
            if (item.GetType().Equals(typeof(NPC)))
            {
                ret = new NPC();
            }
            else
            {
                ret = (NPC)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            NPC_CopyMask copyMask = null,
            INPCGetter def = null)
            where CopyType : class, INPC
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(NPC)))
            {
                ret = new NPC() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static NPC Copy_ToLoqui(
            INPCGetter item,
            NPC_CopyMask copyMask = null,
            INPCGetter def = null)
        {
            NPC ret;
            if (item.GetType().Equals(typeof(NPC)))
            {
                ret = new NPC() as NPC;
            }
            else
            {
                ret = (NPC)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                    this._Model.Set(
                        (Model)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.NPCFlags:
                    this._NPCFlags.Set(
                        (NPC.NPCFlag)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.BaseSpellPoints:
                    this._BaseSpellPoints.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Fatigue:
                    this._Fatigue.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.BarterGold:
                    this._BarterGold.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.LevelOffset:
                    this._LevelOffset.Set(
                        (Int16)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.CalcMin:
                    this._CalcMin.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.CalcMax:
                    this._CalcMax.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Factions:
                    this._Factions.SetTo((IEnumerable<RankPlacement>)obj, cmds);
                    break;
                case NPC_FieldIndex.DeathItem:
                    this.DeathItem_Property.Set(
                        (FormIDSetLink<ItemAbstract>)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Race:
                    this.Race_Property.Set(
                        (FormIDSetLink<Race>)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Spells:
                    this._Spells.SetTo((IEnumerable<FormIDSetLink<Spell>>)obj, cmds);
                    break;
                case NPC_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Items:
                    this._Items.SetTo((IEnumerable<ItemEntry>)obj, cmds);
                    break;
                case NPC_FieldIndex.Aggression:
                    this._Aggression.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Confidence:
                    this._Confidence.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.EnergyLevel:
                    this._EnergyLevel.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Responsibility:
                    this._Responsibility.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.BuySellServices:
                    this._BuySellServices.Set(
                        (NPC.BuySellServiceFlag)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Teaches:
                    this._Teaches.Set(
                        (Skill)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    this._MaximumTrainingLevel.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Fluff:
                    this._Fluff.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case NPC_FieldIndex.AIPackages:
                    this._AIPackages.SetTo((IEnumerable<FormIDSetLink<AIPackage>>)obj, cmds);
                    break;
                case NPC_FieldIndex.Animations:
                    this._Animations.SetTo((IEnumerable<String>)obj, cmds);
                    break;
                case NPC_FieldIndex.Class:
                    this.Class_Property.Set(
                        (FormIDSetLink<Class>)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Armorer:
                    this._Armorer.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Athletics:
                    this._Athletics.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Blade:
                    this._Blade.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Block:
                    this._Block.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Blunt:
                    this._Blunt.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.HandToHand:
                    this._HandToHand.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.HeavyArmor:
                    this._HeavyArmor.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Alchemy:
                    this._Alchemy.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Alteration:
                    this._Alteration.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Conjuration:
                    this._Conjuration.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Destruction:
                    this._Destruction.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Illusion:
                    this._Illusion.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Mysticism:
                    this._Mysticism.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Restoration:
                    this._Restoration.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Acrobatics:
                    this._Acrobatics.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.LightArmor:
                    this._LightArmor.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Marksman:
                    this._Marksman.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Mercantile:
                    this._Mercantile.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Security:
                    this._Security.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Sneak:
                    this._Sneak.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Speechcraft:
                    this._Speechcraft.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Health:
                    this._Health.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Strength:
                    this._Strength.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Intelligence:
                    this._Intelligence.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Willpower:
                    this._Willpower.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Agility:
                    this._Agility.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Speed:
                    this._Speed.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Endurance:
                    this._Endurance.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Personality:
                    this._Personality.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Luck:
                    this._Luck.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Hair:
                    this.Hair_Property.Set(
                        (FormIDSetLink<Hair>)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.HairLength:
                    this._HairLength.Set(
                        (Single)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Eyes:
                    this._Eyes.SetTo((IEnumerable<FormIDLink<Eye>>)obj, cmds);
                    break;
                case NPC_FieldIndex.HairColor:
                    this._HairColor.Set(
                        (Color)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.CombatStyle:
                    this.CombatStyle_Property.Set(
                        (FormIDSetLink<CombatStyle>)obj,
                        cmds);
                    break;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    this._FaceGenGeometrySymmetric.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    this._FaceGenGeometryAsymmetric.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    this._FaceGenTextureSymmetric.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case NPC_FieldIndex.Unknown:
                    this._Unknown.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            NPCCommon.Clear(this, cmds);
        }


        public new static NPC Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new NPC();
            foreach (var pair in fields)
            {
                CopyInInternal_NPC(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_NPC(NPC obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out NPC_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                    obj._Model.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.NPCFlags:
                    obj._NPCFlags.Set(
                        (NPC.NPCFlag)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.BaseSpellPoints:
                    obj._BaseSpellPoints.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Fatigue:
                    obj._Fatigue.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.BarterGold:
                    obj._BarterGold.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.LevelOffset:
                    obj._LevelOffset.Set(
                        (Int16)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.CalcMin:
                    obj._CalcMin.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.CalcMax:
                    obj._CalcMax.Set(
                        (UInt16)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Factions:
                    obj._Factions.SetTo((IEnumerable<RankPlacement>)pair.Value, null);
                    break;
                case NPC_FieldIndex.DeathItem:
                    obj.DeathItem_Property.Set(
                        (FormIDSetLink<ItemAbstract>)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Race:
                    obj.Race_Property.Set(
                        (FormIDSetLink<Race>)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Spells:
                    obj._Spells.SetTo((IEnumerable<FormIDSetLink<Spell>>)pair.Value, null);
                    break;
                case NPC_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Items:
                    obj._Items.SetTo((IEnumerable<ItemEntry>)pair.Value, null);
                    break;
                case NPC_FieldIndex.Aggression:
                    obj._Aggression.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Confidence:
                    obj._Confidence.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.EnergyLevel:
                    obj._EnergyLevel.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Responsibility:
                    obj._Responsibility.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.BuySellServices:
                    obj._BuySellServices.Set(
                        (NPC.BuySellServiceFlag)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Teaches:
                    obj._Teaches.Set(
                        (Skill)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    obj._MaximumTrainingLevel.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Fluff:
                    obj._Fluff.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.AIPackages:
                    obj._AIPackages.SetTo((IEnumerable<FormIDSetLink<AIPackage>>)pair.Value, null);
                    break;
                case NPC_FieldIndex.Animations:
                    obj._Animations.SetTo((IEnumerable<String>)pair.Value, null);
                    break;
                case NPC_FieldIndex.Class:
                    obj.Class_Property.Set(
                        (FormIDSetLink<Class>)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Armorer:
                    obj._Armorer.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Athletics:
                    obj._Athletics.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Blade:
                    obj._Blade.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Block:
                    obj._Block.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Blunt:
                    obj._Blunt.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.HandToHand:
                    obj._HandToHand.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.HeavyArmor:
                    obj._HeavyArmor.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Alchemy:
                    obj._Alchemy.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Alteration:
                    obj._Alteration.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Conjuration:
                    obj._Conjuration.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Destruction:
                    obj._Destruction.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Illusion:
                    obj._Illusion.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Mysticism:
                    obj._Mysticism.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Restoration:
                    obj._Restoration.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Acrobatics:
                    obj._Acrobatics.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.LightArmor:
                    obj._LightArmor.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Marksman:
                    obj._Marksman.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Mercantile:
                    obj._Mercantile.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Security:
                    obj._Security.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Sneak:
                    obj._Sneak.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Speechcraft:
                    obj._Speechcraft.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Health:
                    obj._Health.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Strength:
                    obj._Strength.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Intelligence:
                    obj._Intelligence.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Willpower:
                    obj._Willpower.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Agility:
                    obj._Agility.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Speed:
                    obj._Speed.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Endurance:
                    obj._Endurance.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Personality:
                    obj._Personality.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Luck:
                    obj._Luck.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Hair:
                    obj.Hair_Property.Set(
                        (FormIDSetLink<Hair>)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.HairLength:
                    obj._HairLength.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Eyes:
                    obj._Eyes.SetTo((IEnumerable<FormIDLink<Eye>>)pair.Value, null);
                    break;
                case NPC_FieldIndex.HairColor:
                    obj._HairColor.Set(
                        (Color)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.CombatStyle:
                    obj.CombatStyle_Property.Set(
                        (FormIDSetLink<CombatStyle>)pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    obj._FaceGenGeometrySymmetric.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    obj._FaceGenGeometryAsymmetric.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    obj._FaceGenTextureSymmetric.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case NPC_FieldIndex.Unknown:
                    obj._Unknown.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, NPC obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface INPC : INPCGetter, INamedMajorRecord, ILoquiClass<INPC, INPCGetter>, ILoquiClass<NPC, INPCGetter>
    {
        new Model Model { get; set; }
        new INotifyingSetItem<Model> Model_Property { get; }

        new NPC.NPCFlag NPCFlags { get; set; }
        new INotifyingItem<NPC.NPCFlag> NPCFlags_Property { get; }

        new UInt16 BaseSpellPoints { get; set; }
        new INotifyingItem<UInt16> BaseSpellPoints_Property { get; }

        new UInt16 Fatigue { get; set; }
        new INotifyingItem<UInt16> Fatigue_Property { get; }

        new UInt16 BarterGold { get; set; }
        new INotifyingItem<UInt16> BarterGold_Property { get; }

        new Int16 LevelOffset { get; set; }
        new INotifyingItem<Int16> LevelOffset_Property { get; }

        new UInt16 CalcMin { get; set; }
        new INotifyingItem<UInt16> CalcMin_Property { get; }

        new UInt16 CalcMax { get; set; }
        new INotifyingItem<UInt16> CalcMax_Property { get; }

        new INotifyingList<RankPlacement> Factions { get; }
        new ItemAbstract DeathItem { get; set; }
        new Race Race { get; set; }
        new INotifyingList<FormIDSetLink<Spell>> Spells { get; }
        new Script Script { get; set; }
        new INotifyingList<ItemEntry> Items { get; }
        new Byte Aggression { get; set; }
        new INotifyingItem<Byte> Aggression_Property { get; }

        new Byte Confidence { get; set; }
        new INotifyingItem<Byte> Confidence_Property { get; }

        new Byte EnergyLevel { get; set; }
        new INotifyingItem<Byte> EnergyLevel_Property { get; }

        new Byte Responsibility { get; set; }
        new INotifyingItem<Byte> Responsibility_Property { get; }

        new NPC.BuySellServiceFlag BuySellServices { get; set; }
        new INotifyingItem<NPC.BuySellServiceFlag> BuySellServices_Property { get; }

        new Skill Teaches { get; set; }
        new INotifyingItem<Skill> Teaches_Property { get; }

        new Byte MaximumTrainingLevel { get; set; }
        new INotifyingItem<Byte> MaximumTrainingLevel_Property { get; }

        new Byte[] Fluff { get; set; }
        new INotifyingItem<Byte[]> Fluff_Property { get; }

        new INotifyingList<FormIDSetLink<AIPackage>> AIPackages { get; }
        new INotifyingList<String> Animations { get; }
        new Class Class { get; set; }
        new Byte Armorer { get; set; }
        new INotifyingItem<Byte> Armorer_Property { get; }

        new Byte Athletics { get; set; }
        new INotifyingItem<Byte> Athletics_Property { get; }

        new Byte Blade { get; set; }
        new INotifyingItem<Byte> Blade_Property { get; }

        new Byte Block { get; set; }
        new INotifyingItem<Byte> Block_Property { get; }

        new Byte Blunt { get; set; }
        new INotifyingItem<Byte> Blunt_Property { get; }

        new Byte HandToHand { get; set; }
        new INotifyingItem<Byte> HandToHand_Property { get; }

        new Byte HeavyArmor { get; set; }
        new INotifyingItem<Byte> HeavyArmor_Property { get; }

        new Byte Alchemy { get; set; }
        new INotifyingItem<Byte> Alchemy_Property { get; }

        new Byte Alteration { get; set; }
        new INotifyingItem<Byte> Alteration_Property { get; }

        new Byte Conjuration { get; set; }
        new INotifyingItem<Byte> Conjuration_Property { get; }

        new Byte Destruction { get; set; }
        new INotifyingItem<Byte> Destruction_Property { get; }

        new Byte Illusion { get; set; }
        new INotifyingItem<Byte> Illusion_Property { get; }

        new Byte Mysticism { get; set; }
        new INotifyingItem<Byte> Mysticism_Property { get; }

        new Byte Restoration { get; set; }
        new INotifyingItem<Byte> Restoration_Property { get; }

        new Byte Acrobatics { get; set; }
        new INotifyingItem<Byte> Acrobatics_Property { get; }

        new Byte LightArmor { get; set; }
        new INotifyingItem<Byte> LightArmor_Property { get; }

        new Byte Marksman { get; set; }
        new INotifyingItem<Byte> Marksman_Property { get; }

        new Byte Mercantile { get; set; }
        new INotifyingItem<Byte> Mercantile_Property { get; }

        new Byte Security { get; set; }
        new INotifyingItem<Byte> Security_Property { get; }

        new Byte Sneak { get; set; }
        new INotifyingItem<Byte> Sneak_Property { get; }

        new Byte Speechcraft { get; set; }
        new INotifyingItem<Byte> Speechcraft_Property { get; }

        new UInt32 Health { get; set; }
        new INotifyingItem<UInt32> Health_Property { get; }

        new Byte Strength { get; set; }
        new INotifyingItem<Byte> Strength_Property { get; }

        new Byte Intelligence { get; set; }
        new INotifyingItem<Byte> Intelligence_Property { get; }

        new Byte Willpower { get; set; }
        new INotifyingItem<Byte> Willpower_Property { get; }

        new Byte Agility { get; set; }
        new INotifyingItem<Byte> Agility_Property { get; }

        new Byte Speed { get; set; }
        new INotifyingItem<Byte> Speed_Property { get; }

        new Byte Endurance { get; set; }
        new INotifyingItem<Byte> Endurance_Property { get; }

        new Byte Personality { get; set; }
        new INotifyingItem<Byte> Personality_Property { get; }

        new Byte Luck { get; set; }
        new INotifyingItem<Byte> Luck_Property { get; }

        new Hair Hair { get; set; }
        new Single HairLength { get; set; }
        new INotifyingSetItem<Single> HairLength_Property { get; }

        new INotifyingList<FormIDLink<Eye>> Eyes { get; }
        new Color HairColor { get; set; }
        new INotifyingSetItem<Color> HairColor_Property { get; }

        new CombatStyle CombatStyle { get; set; }
        new Byte[] FaceGenGeometrySymmetric { get; set; }
        new INotifyingSetItem<Byte[]> FaceGenGeometrySymmetric_Property { get; }

        new Byte[] FaceGenGeometryAsymmetric { get; set; }
        new INotifyingSetItem<Byte[]> FaceGenGeometryAsymmetric_Property { get; }

        new Byte[] FaceGenTextureSymmetric { get; set; }
        new INotifyingSetItem<Byte[]> FaceGenTextureSymmetric_Property { get; }

        new Byte[] Unknown { get; set; }
        new INotifyingSetItem<Byte[]> Unknown_Property { get; }

    }

    public interface INPCGetter : INamedMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        INotifyingSetItemGetter<Model> Model_Property { get; }

        #endregion
        #region NPCFlags
        NPC.NPCFlag NPCFlags { get; }
        INotifyingItemGetter<NPC.NPCFlag> NPCFlags_Property { get; }

        #endregion
        #region BaseSpellPoints
        UInt16 BaseSpellPoints { get; }
        INotifyingItemGetter<UInt16> BaseSpellPoints_Property { get; }

        #endregion
        #region Fatigue
        UInt16 Fatigue { get; }
        INotifyingItemGetter<UInt16> Fatigue_Property { get; }

        #endregion
        #region BarterGold
        UInt16 BarterGold { get; }
        INotifyingItemGetter<UInt16> BarterGold_Property { get; }

        #endregion
        #region LevelOffset
        Int16 LevelOffset { get; }
        INotifyingItemGetter<Int16> LevelOffset_Property { get; }

        #endregion
        #region CalcMin
        UInt16 CalcMin { get; }
        INotifyingItemGetter<UInt16> CalcMin_Property { get; }

        #endregion
        #region CalcMax
        UInt16 CalcMax { get; }
        INotifyingItemGetter<UInt16> CalcMax_Property { get; }

        #endregion
        #region Factions
        INotifyingListGetter<RankPlacement> Factions { get; }
        #endregion
        #region DeathItem
        ItemAbstract DeathItem { get; }
        FormIDSetLink<ItemAbstract> DeathItem_Property { get; }

        #endregion
        #region Race
        Race Race { get; }
        FormIDSetLink<Race> Race_Property { get; }

        #endregion
        #region Spells
        INotifyingListGetter<FormIDSetLink<Spell>> Spells { get; }
        #endregion
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Items
        INotifyingListGetter<ItemEntry> Items { get; }
        #endregion
        #region Aggression
        Byte Aggression { get; }
        INotifyingItemGetter<Byte> Aggression_Property { get; }

        #endregion
        #region Confidence
        Byte Confidence { get; }
        INotifyingItemGetter<Byte> Confidence_Property { get; }

        #endregion
        #region EnergyLevel
        Byte EnergyLevel { get; }
        INotifyingItemGetter<Byte> EnergyLevel_Property { get; }

        #endregion
        #region Responsibility
        Byte Responsibility { get; }
        INotifyingItemGetter<Byte> Responsibility_Property { get; }

        #endregion
        #region BuySellServices
        NPC.BuySellServiceFlag BuySellServices { get; }
        INotifyingItemGetter<NPC.BuySellServiceFlag> BuySellServices_Property { get; }

        #endregion
        #region Teaches
        Skill Teaches { get; }
        INotifyingItemGetter<Skill> Teaches_Property { get; }

        #endregion
        #region MaximumTrainingLevel
        Byte MaximumTrainingLevel { get; }
        INotifyingItemGetter<Byte> MaximumTrainingLevel_Property { get; }

        #endregion
        #region Fluff
        Byte[] Fluff { get; }
        INotifyingItemGetter<Byte[]> Fluff_Property { get; }

        #endregion
        #region AIPackages
        INotifyingListGetter<FormIDSetLink<AIPackage>> AIPackages { get; }
        #endregion
        #region Animations
        INotifyingListGetter<String> Animations { get; }
        #endregion
        #region Class
        Class Class { get; }
        FormIDSetLink<Class> Class_Property { get; }

        #endregion
        #region Armorer
        Byte Armorer { get; }
        INotifyingItemGetter<Byte> Armorer_Property { get; }

        #endregion
        #region Athletics
        Byte Athletics { get; }
        INotifyingItemGetter<Byte> Athletics_Property { get; }

        #endregion
        #region Blade
        Byte Blade { get; }
        INotifyingItemGetter<Byte> Blade_Property { get; }

        #endregion
        #region Block
        Byte Block { get; }
        INotifyingItemGetter<Byte> Block_Property { get; }

        #endregion
        #region Blunt
        Byte Blunt { get; }
        INotifyingItemGetter<Byte> Blunt_Property { get; }

        #endregion
        #region HandToHand
        Byte HandToHand { get; }
        INotifyingItemGetter<Byte> HandToHand_Property { get; }

        #endregion
        #region HeavyArmor
        Byte HeavyArmor { get; }
        INotifyingItemGetter<Byte> HeavyArmor_Property { get; }

        #endregion
        #region Alchemy
        Byte Alchemy { get; }
        INotifyingItemGetter<Byte> Alchemy_Property { get; }

        #endregion
        #region Alteration
        Byte Alteration { get; }
        INotifyingItemGetter<Byte> Alteration_Property { get; }

        #endregion
        #region Conjuration
        Byte Conjuration { get; }
        INotifyingItemGetter<Byte> Conjuration_Property { get; }

        #endregion
        #region Destruction
        Byte Destruction { get; }
        INotifyingItemGetter<Byte> Destruction_Property { get; }

        #endregion
        #region Illusion
        Byte Illusion { get; }
        INotifyingItemGetter<Byte> Illusion_Property { get; }

        #endregion
        #region Mysticism
        Byte Mysticism { get; }
        INotifyingItemGetter<Byte> Mysticism_Property { get; }

        #endregion
        #region Restoration
        Byte Restoration { get; }
        INotifyingItemGetter<Byte> Restoration_Property { get; }

        #endregion
        #region Acrobatics
        Byte Acrobatics { get; }
        INotifyingItemGetter<Byte> Acrobatics_Property { get; }

        #endregion
        #region LightArmor
        Byte LightArmor { get; }
        INotifyingItemGetter<Byte> LightArmor_Property { get; }

        #endregion
        #region Marksman
        Byte Marksman { get; }
        INotifyingItemGetter<Byte> Marksman_Property { get; }

        #endregion
        #region Mercantile
        Byte Mercantile { get; }
        INotifyingItemGetter<Byte> Mercantile_Property { get; }

        #endregion
        #region Security
        Byte Security { get; }
        INotifyingItemGetter<Byte> Security_Property { get; }

        #endregion
        #region Sneak
        Byte Sneak { get; }
        INotifyingItemGetter<Byte> Sneak_Property { get; }

        #endregion
        #region Speechcraft
        Byte Speechcraft { get; }
        INotifyingItemGetter<Byte> Speechcraft_Property { get; }

        #endregion
        #region Health
        UInt32 Health { get; }
        INotifyingItemGetter<UInt32> Health_Property { get; }

        #endregion
        #region Strength
        Byte Strength { get; }
        INotifyingItemGetter<Byte> Strength_Property { get; }

        #endregion
        #region Intelligence
        Byte Intelligence { get; }
        INotifyingItemGetter<Byte> Intelligence_Property { get; }

        #endregion
        #region Willpower
        Byte Willpower { get; }
        INotifyingItemGetter<Byte> Willpower_Property { get; }

        #endregion
        #region Agility
        Byte Agility { get; }
        INotifyingItemGetter<Byte> Agility_Property { get; }

        #endregion
        #region Speed
        Byte Speed { get; }
        INotifyingItemGetter<Byte> Speed_Property { get; }

        #endregion
        #region Endurance
        Byte Endurance { get; }
        INotifyingItemGetter<Byte> Endurance_Property { get; }

        #endregion
        #region Personality
        Byte Personality { get; }
        INotifyingItemGetter<Byte> Personality_Property { get; }

        #endregion
        #region Luck
        Byte Luck { get; }
        INotifyingItemGetter<Byte> Luck_Property { get; }

        #endregion
        #region Hair
        Hair Hair { get; }
        FormIDSetLink<Hair> Hair_Property { get; }

        #endregion
        #region HairLength
        Single HairLength { get; }
        INotifyingSetItemGetter<Single> HairLength_Property { get; }

        #endregion
        #region Eyes
        INotifyingListGetter<FormIDLink<Eye>> Eyes { get; }
        #endregion
        #region HairColor
        Color HairColor { get; }
        INotifyingSetItemGetter<Color> HairColor_Property { get; }

        #endregion
        #region CombatStyle
        CombatStyle CombatStyle { get; }
        FormIDSetLink<CombatStyle> CombatStyle_Property { get; }

        #endregion
        #region FaceGenGeometrySymmetric
        Byte[] FaceGenGeometrySymmetric { get; }
        INotifyingSetItemGetter<Byte[]> FaceGenGeometrySymmetric_Property { get; }

        #endregion
        #region FaceGenGeometryAsymmetric
        Byte[] FaceGenGeometryAsymmetric { get; }
        INotifyingSetItemGetter<Byte[]> FaceGenGeometryAsymmetric_Property { get; }

        #endregion
        #region FaceGenTextureSymmetric
        Byte[] FaceGenTextureSymmetric { get; }
        INotifyingSetItemGetter<Byte[]> FaceGenTextureSymmetric_Property { get; }

        #endregion
        #region Unknown
        Byte[] Unknown { get; }
        INotifyingSetItemGetter<Byte[]> Unknown_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum NPC_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Model = 6,
        NPCFlags = 7,
        BaseSpellPoints = 8,
        Fatigue = 9,
        BarterGold = 10,
        LevelOffset = 11,
        CalcMin = 12,
        CalcMax = 13,
        Factions = 14,
        DeathItem = 15,
        Race = 16,
        Spells = 17,
        Script = 18,
        Items = 19,
        Aggression = 20,
        Confidence = 21,
        EnergyLevel = 22,
        Responsibility = 23,
        BuySellServices = 24,
        Teaches = 25,
        MaximumTrainingLevel = 26,
        Fluff = 27,
        AIPackages = 28,
        Animations = 29,
        Class = 30,
        Armorer = 31,
        Athletics = 32,
        Blade = 33,
        Block = 34,
        Blunt = 35,
        HandToHand = 36,
        HeavyArmor = 37,
        Alchemy = 38,
        Alteration = 39,
        Conjuration = 40,
        Destruction = 41,
        Illusion = 42,
        Mysticism = 43,
        Restoration = 44,
        Acrobatics = 45,
        LightArmor = 46,
        Marksman = 47,
        Mercantile = 48,
        Security = 49,
        Sneak = 50,
        Speechcraft = 51,
        Health = 52,
        Strength = 53,
        Intelligence = 54,
        Willpower = 55,
        Agility = 56,
        Speed = 57,
        Endurance = 58,
        Personality = 59,
        Luck = 60,
        Hair = 61,
        HairLength = 62,
        Eyes = 63,
        HairColor = 64,
        CombatStyle = 65,
        FaceGenGeometrySymmetric = 66,
        FaceGenGeometryAsymmetric = 67,
        FaceGenTextureSymmetric = 68,
        Unknown = 69,
    }
    #endregion

    #region Registration
    public class NPC_Registration : ILoquiRegistration
    {
        public static readonly NPC_Registration Instance = new NPC_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 84,
            version: 0);

        public const string GUID = "96396343-a32a-4165-b745-e038c5e06eeb";

        public const ushort FieldCount = 64;

        public static readonly Type MaskType = typeof(NPC_Mask<>);

        public static readonly Type ErrorMaskType = typeof(NPC_ErrorMask);

        public static readonly Type ClassType = typeof(NPC);

        public static readonly Type GetterType = typeof(INPCGetter);

        public static readonly Type SetterType = typeof(INPC);

        public static readonly Type CommonType = typeof(NPCCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.NPC";

        public const string Name = "NPC";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)NPC_FieldIndex.Model;
                case "NPCFLAGS":
                    return (ushort)NPC_FieldIndex.NPCFlags;
                case "BASESPELLPOINTS":
                    return (ushort)NPC_FieldIndex.BaseSpellPoints;
                case "FATIGUE":
                    return (ushort)NPC_FieldIndex.Fatigue;
                case "BARTERGOLD":
                    return (ushort)NPC_FieldIndex.BarterGold;
                case "LEVELOFFSET":
                    return (ushort)NPC_FieldIndex.LevelOffset;
                case "CALCMIN":
                    return (ushort)NPC_FieldIndex.CalcMin;
                case "CALCMAX":
                    return (ushort)NPC_FieldIndex.CalcMax;
                case "FACTIONS":
                    return (ushort)NPC_FieldIndex.Factions;
                case "DEATHITEM":
                    return (ushort)NPC_FieldIndex.DeathItem;
                case "RACE":
                    return (ushort)NPC_FieldIndex.Race;
                case "SPELLS":
                    return (ushort)NPC_FieldIndex.Spells;
                case "SCRIPT":
                    return (ushort)NPC_FieldIndex.Script;
                case "ITEMS":
                    return (ushort)NPC_FieldIndex.Items;
                case "AGGRESSION":
                    return (ushort)NPC_FieldIndex.Aggression;
                case "CONFIDENCE":
                    return (ushort)NPC_FieldIndex.Confidence;
                case "ENERGYLEVEL":
                    return (ushort)NPC_FieldIndex.EnergyLevel;
                case "RESPONSIBILITY":
                    return (ushort)NPC_FieldIndex.Responsibility;
                case "BUYSELLSERVICES":
                    return (ushort)NPC_FieldIndex.BuySellServices;
                case "TEACHES":
                    return (ushort)NPC_FieldIndex.Teaches;
                case "MAXIMUMTRAININGLEVEL":
                    return (ushort)NPC_FieldIndex.MaximumTrainingLevel;
                case "FLUFF":
                    return (ushort)NPC_FieldIndex.Fluff;
                case "AIPACKAGES":
                    return (ushort)NPC_FieldIndex.AIPackages;
                case "ANIMATIONS":
                    return (ushort)NPC_FieldIndex.Animations;
                case "CLASS":
                    return (ushort)NPC_FieldIndex.Class;
                case "ARMORER":
                    return (ushort)NPC_FieldIndex.Armorer;
                case "ATHLETICS":
                    return (ushort)NPC_FieldIndex.Athletics;
                case "BLADE":
                    return (ushort)NPC_FieldIndex.Blade;
                case "BLOCK":
                    return (ushort)NPC_FieldIndex.Block;
                case "BLUNT":
                    return (ushort)NPC_FieldIndex.Blunt;
                case "HANDTOHAND":
                    return (ushort)NPC_FieldIndex.HandToHand;
                case "HEAVYARMOR":
                    return (ushort)NPC_FieldIndex.HeavyArmor;
                case "ALCHEMY":
                    return (ushort)NPC_FieldIndex.Alchemy;
                case "ALTERATION":
                    return (ushort)NPC_FieldIndex.Alteration;
                case "CONJURATION":
                    return (ushort)NPC_FieldIndex.Conjuration;
                case "DESTRUCTION":
                    return (ushort)NPC_FieldIndex.Destruction;
                case "ILLUSION":
                    return (ushort)NPC_FieldIndex.Illusion;
                case "MYSTICISM":
                    return (ushort)NPC_FieldIndex.Mysticism;
                case "RESTORATION":
                    return (ushort)NPC_FieldIndex.Restoration;
                case "ACROBATICS":
                    return (ushort)NPC_FieldIndex.Acrobatics;
                case "LIGHTARMOR":
                    return (ushort)NPC_FieldIndex.LightArmor;
                case "MARKSMAN":
                    return (ushort)NPC_FieldIndex.Marksman;
                case "MERCANTILE":
                    return (ushort)NPC_FieldIndex.Mercantile;
                case "SECURITY":
                    return (ushort)NPC_FieldIndex.Security;
                case "SNEAK":
                    return (ushort)NPC_FieldIndex.Sneak;
                case "SPEECHCRAFT":
                    return (ushort)NPC_FieldIndex.Speechcraft;
                case "HEALTH":
                    return (ushort)NPC_FieldIndex.Health;
                case "STRENGTH":
                    return (ushort)NPC_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)NPC_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)NPC_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)NPC_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)NPC_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)NPC_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)NPC_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)NPC_FieldIndex.Luck;
                case "HAIR":
                    return (ushort)NPC_FieldIndex.Hair;
                case "HAIRLENGTH":
                    return (ushort)NPC_FieldIndex.HairLength;
                case "EYES":
                    return (ushort)NPC_FieldIndex.Eyes;
                case "HAIRCOLOR":
                    return (ushort)NPC_FieldIndex.HairColor;
                case "COMBATSTYLE":
                    return (ushort)NPC_FieldIndex.CombatStyle;
                case "FACEGENGEOMETRYSYMMETRIC":
                    return (ushort)NPC_FieldIndex.FaceGenGeometrySymmetric;
                case "FACEGENGEOMETRYASYMMETRIC":
                    return (ushort)NPC_FieldIndex.FaceGenGeometryAsymmetric;
                case "FACEGENTEXTURESYMMETRIC":
                    return (ushort)NPC_FieldIndex.FaceGenTextureSymmetric;
                case "UNKNOWN":
                    return (ushort)NPC_FieldIndex.Unknown;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Eyes:
                    return true;
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.NPCFlags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.Items:
                    return true;
                case NPC_FieldIndex.NPCFlags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.NPCFlags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                    return "Model";
                case NPC_FieldIndex.NPCFlags:
                    return "NPCFlags";
                case NPC_FieldIndex.BaseSpellPoints:
                    return "BaseSpellPoints";
                case NPC_FieldIndex.Fatigue:
                    return "Fatigue";
                case NPC_FieldIndex.BarterGold:
                    return "BarterGold";
                case NPC_FieldIndex.LevelOffset:
                    return "LevelOffset";
                case NPC_FieldIndex.CalcMin:
                    return "CalcMin";
                case NPC_FieldIndex.CalcMax:
                    return "CalcMax";
                case NPC_FieldIndex.Factions:
                    return "Factions";
                case NPC_FieldIndex.DeathItem:
                    return "DeathItem";
                case NPC_FieldIndex.Race:
                    return "Race";
                case NPC_FieldIndex.Spells:
                    return "Spells";
                case NPC_FieldIndex.Script:
                    return "Script";
                case NPC_FieldIndex.Items:
                    return "Items";
                case NPC_FieldIndex.Aggression:
                    return "Aggression";
                case NPC_FieldIndex.Confidence:
                    return "Confidence";
                case NPC_FieldIndex.EnergyLevel:
                    return "EnergyLevel";
                case NPC_FieldIndex.Responsibility:
                    return "Responsibility";
                case NPC_FieldIndex.BuySellServices:
                    return "BuySellServices";
                case NPC_FieldIndex.Teaches:
                    return "Teaches";
                case NPC_FieldIndex.MaximumTrainingLevel:
                    return "MaximumTrainingLevel";
                case NPC_FieldIndex.Fluff:
                    return "Fluff";
                case NPC_FieldIndex.AIPackages:
                    return "AIPackages";
                case NPC_FieldIndex.Animations:
                    return "Animations";
                case NPC_FieldIndex.Class:
                    return "Class";
                case NPC_FieldIndex.Armorer:
                    return "Armorer";
                case NPC_FieldIndex.Athletics:
                    return "Athletics";
                case NPC_FieldIndex.Blade:
                    return "Blade";
                case NPC_FieldIndex.Block:
                    return "Block";
                case NPC_FieldIndex.Blunt:
                    return "Blunt";
                case NPC_FieldIndex.HandToHand:
                    return "HandToHand";
                case NPC_FieldIndex.HeavyArmor:
                    return "HeavyArmor";
                case NPC_FieldIndex.Alchemy:
                    return "Alchemy";
                case NPC_FieldIndex.Alteration:
                    return "Alteration";
                case NPC_FieldIndex.Conjuration:
                    return "Conjuration";
                case NPC_FieldIndex.Destruction:
                    return "Destruction";
                case NPC_FieldIndex.Illusion:
                    return "Illusion";
                case NPC_FieldIndex.Mysticism:
                    return "Mysticism";
                case NPC_FieldIndex.Restoration:
                    return "Restoration";
                case NPC_FieldIndex.Acrobatics:
                    return "Acrobatics";
                case NPC_FieldIndex.LightArmor:
                    return "LightArmor";
                case NPC_FieldIndex.Marksman:
                    return "Marksman";
                case NPC_FieldIndex.Mercantile:
                    return "Mercantile";
                case NPC_FieldIndex.Security:
                    return "Security";
                case NPC_FieldIndex.Sneak:
                    return "Sneak";
                case NPC_FieldIndex.Speechcraft:
                    return "Speechcraft";
                case NPC_FieldIndex.Health:
                    return "Health";
                case NPC_FieldIndex.Strength:
                    return "Strength";
                case NPC_FieldIndex.Intelligence:
                    return "Intelligence";
                case NPC_FieldIndex.Willpower:
                    return "Willpower";
                case NPC_FieldIndex.Agility:
                    return "Agility";
                case NPC_FieldIndex.Speed:
                    return "Speed";
                case NPC_FieldIndex.Endurance:
                    return "Endurance";
                case NPC_FieldIndex.Personality:
                    return "Personality";
                case NPC_FieldIndex.Luck:
                    return "Luck";
                case NPC_FieldIndex.Hair:
                    return "Hair";
                case NPC_FieldIndex.HairLength:
                    return "HairLength";
                case NPC_FieldIndex.Eyes:
                    return "Eyes";
                case NPC_FieldIndex.HairColor:
                    return "HairColor";
                case NPC_FieldIndex.CombatStyle:
                    return "CombatStyle";
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    return "FaceGenGeometrySymmetric";
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    return "FaceGenGeometryAsymmetric";
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    return "FaceGenTextureSymmetric";
                case NPC_FieldIndex.Unknown:
                    return "Unknown";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.NPCFlags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.NPCFlags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                    return typeof(Model);
                case NPC_FieldIndex.NPCFlags:
                    return typeof(NPC.NPCFlag);
                case NPC_FieldIndex.BaseSpellPoints:
                    return typeof(UInt16);
                case NPC_FieldIndex.Fatigue:
                    return typeof(UInt16);
                case NPC_FieldIndex.BarterGold:
                    return typeof(UInt16);
                case NPC_FieldIndex.LevelOffset:
                    return typeof(Int16);
                case NPC_FieldIndex.CalcMin:
                    return typeof(UInt16);
                case NPC_FieldIndex.CalcMax:
                    return typeof(UInt16);
                case NPC_FieldIndex.Factions:
                    return typeof(NotifyingList<RankPlacement>);
                case NPC_FieldIndex.DeathItem:
                    return typeof(FormIDSetLink<ItemAbstract>);
                case NPC_FieldIndex.Race:
                    return typeof(FormIDSetLink<Race>);
                case NPC_FieldIndex.Spells:
                    return typeof(NotifyingList<FormIDSetLink<Spell>>);
                case NPC_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case NPC_FieldIndex.Items:
                    return typeof(NotifyingList<ItemEntry>);
                case NPC_FieldIndex.Aggression:
                    return typeof(Byte);
                case NPC_FieldIndex.Confidence:
                    return typeof(Byte);
                case NPC_FieldIndex.EnergyLevel:
                    return typeof(Byte);
                case NPC_FieldIndex.Responsibility:
                    return typeof(Byte);
                case NPC_FieldIndex.BuySellServices:
                    return typeof(NPC.BuySellServiceFlag);
                case NPC_FieldIndex.Teaches:
                    return typeof(Skill);
                case NPC_FieldIndex.MaximumTrainingLevel:
                    return typeof(Byte);
                case NPC_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case NPC_FieldIndex.AIPackages:
                    return typeof(NotifyingList<FormIDSetLink<AIPackage>>);
                case NPC_FieldIndex.Animations:
                    return typeof(NotifyingList<String>);
                case NPC_FieldIndex.Class:
                    return typeof(FormIDSetLink<Class>);
                case NPC_FieldIndex.Armorer:
                    return typeof(Byte);
                case NPC_FieldIndex.Athletics:
                    return typeof(Byte);
                case NPC_FieldIndex.Blade:
                    return typeof(Byte);
                case NPC_FieldIndex.Block:
                    return typeof(Byte);
                case NPC_FieldIndex.Blunt:
                    return typeof(Byte);
                case NPC_FieldIndex.HandToHand:
                    return typeof(Byte);
                case NPC_FieldIndex.HeavyArmor:
                    return typeof(Byte);
                case NPC_FieldIndex.Alchemy:
                    return typeof(Byte);
                case NPC_FieldIndex.Alteration:
                    return typeof(Byte);
                case NPC_FieldIndex.Conjuration:
                    return typeof(Byte);
                case NPC_FieldIndex.Destruction:
                    return typeof(Byte);
                case NPC_FieldIndex.Illusion:
                    return typeof(Byte);
                case NPC_FieldIndex.Mysticism:
                    return typeof(Byte);
                case NPC_FieldIndex.Restoration:
                    return typeof(Byte);
                case NPC_FieldIndex.Acrobatics:
                    return typeof(Byte);
                case NPC_FieldIndex.LightArmor:
                    return typeof(Byte);
                case NPC_FieldIndex.Marksman:
                    return typeof(Byte);
                case NPC_FieldIndex.Mercantile:
                    return typeof(Byte);
                case NPC_FieldIndex.Security:
                    return typeof(Byte);
                case NPC_FieldIndex.Sneak:
                    return typeof(Byte);
                case NPC_FieldIndex.Speechcraft:
                    return typeof(Byte);
                case NPC_FieldIndex.Health:
                    return typeof(UInt32);
                case NPC_FieldIndex.Strength:
                    return typeof(Byte);
                case NPC_FieldIndex.Intelligence:
                    return typeof(Byte);
                case NPC_FieldIndex.Willpower:
                    return typeof(Byte);
                case NPC_FieldIndex.Agility:
                    return typeof(Byte);
                case NPC_FieldIndex.Speed:
                    return typeof(Byte);
                case NPC_FieldIndex.Endurance:
                    return typeof(Byte);
                case NPC_FieldIndex.Personality:
                    return typeof(Byte);
                case NPC_FieldIndex.Luck:
                    return typeof(Byte);
                case NPC_FieldIndex.Hair:
                    return typeof(FormIDSetLink<Hair>);
                case NPC_FieldIndex.HairLength:
                    return typeof(Single);
                case NPC_FieldIndex.Eyes:
                    return typeof(NotifyingList<FormIDLink<Eye>>);
                case NPC_FieldIndex.HairColor:
                    return typeof(Color);
                case NPC_FieldIndex.CombatStyle:
                    return typeof(FormIDSetLink<CombatStyle>);
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    return typeof(Byte[]);
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    return typeof(Byte[]);
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    return typeof(Byte[]);
                case NPC_FieldIndex.Unknown:
                    return typeof(Byte[]);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ACBS_HEADER = new RecordType("ACBS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType AIDT_HEADER = new RecordType("AIDT");
        public static readonly RecordType PKID_HEADER = new RecordType("PKID");
        public static readonly RecordType KFFZ_HEADER = new RecordType("KFFZ");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType LNAM_HEADER = new RecordType("LNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType HCLR_HEADER = new RecordType("HCLR");
        public static readonly RecordType ZNAM_HEADER = new RecordType("ZNAM");
        public static readonly RecordType FGGS_HEADER = new RecordType("FGGS");
        public static readonly RecordType FGGA_HEADER = new RecordType("FGGA");
        public static readonly RecordType FGTS_HEADER = new RecordType("FGTS");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = NPC__HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 19;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class NPCCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this INPC item,
            INPCGetter rhs,
            NPC_CopyMask copyMask = null,
            INPCGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            NPCCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this INPC item,
            INPCGetter rhs,
            out NPC_ErrorMask errorMask,
            NPC_CopyMask copyMask = null,
            INPCGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            NPCCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this INPC item,
            INPCGetter rhs,
            INPCGetter def,
            bool doMasks,
            out NPC_ErrorMask errorMask,
            NPC_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            NPC_ErrorMask retErrorMask = null;
            Func<NPC_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new NPC_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this INPC item,
            INPCGetter rhs,
            INPCGetter def,
            bool doMasks,
            Func<NPC_ErrorMask> errorMask,
            NPC_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Model.Specific == null)
                                            {
                                                baseMask.Model = new MaskItem<Exception, Model_ErrorMask>(null, new Model_ErrorMask());
                                            }
                                            return baseMask.Model.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Model, ex);
                }
            }
            if (copyMask?.NPCFlags ?? true)
            {
                try
                {
                    item.NPCFlags_Property.Set(
                        value: rhs.NPCFlags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.NPCFlags, ex);
                }
            }
            if (copyMask?.BaseSpellPoints ?? true)
            {
                try
                {
                    item.BaseSpellPoints_Property.Set(
                        value: rhs.BaseSpellPoints,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.BaseSpellPoints, ex);
                }
            }
            if (copyMask?.Fatigue ?? true)
            {
                try
                {
                    item.Fatigue_Property.Set(
                        value: rhs.Fatigue,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Fatigue, ex);
                }
            }
            if (copyMask?.BarterGold ?? true)
            {
                try
                {
                    item.BarterGold_Property.Set(
                        value: rhs.BarterGold,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.BarterGold, ex);
                }
            }
            if (copyMask?.LevelOffset ?? true)
            {
                try
                {
                    item.LevelOffset_Property.Set(
                        value: rhs.LevelOffset,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.LevelOffset, ex);
                }
            }
            if (copyMask?.CalcMin ?? true)
            {
                try
                {
                    item.CalcMin_Property.Set(
                        value: rhs.CalcMin,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.CalcMin, ex);
                }
            }
            if (copyMask?.CalcMax ?? true)
            {
                try
                {
                    item.CalcMax_Property.Set(
                        value: rhs.CalcMax,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.CalcMax, ex);
                }
            }
            if (copyMask?.Factions.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Factions.SetToWithDefault(
                        rhs.Factions,
                        def?.Factions,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Factions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RankPlacement);
                                    return RankPlacement.Copy(
                                        r,
                                        copyMask?.Factions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Factions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Factions, ex);
                }
            }
            if (copyMask?.DeathItem ?? true)
            {
                try
                {
                    item.DeathItem_Property.SetToWithDefault(
                        rhs: rhs.DeathItem_Property,
                        def: def?.DeathItem_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.DeathItem, ex);
                }
            }
            if (copyMask?.Race ?? true)
            {
                try
                {
                    item.Race_Property.SetToWithDefault(
                        rhs: rhs.Race_Property,
                        def: def?.Race_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Race, ex);
                }
            }
            if (copyMask?.Spells != CopyOption.Skip)
            {
                try
                {
                    item.Spells.SetToWithDefault(
                        rhs.Spells,
                        def?.Spells,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Spells, ex);
                }
            }
            if (copyMask?.Script ?? true)
            {
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Script, ex);
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Items.SetToWithDefault(
                        rhs.Items,
                        def?.Items,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(ItemEntry);
                                    return ItemEntry.Copy(
                                        r,
                                        copyMask?.Items?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Items, ex);
                }
            }
            if (copyMask?.Aggression ?? true)
            {
                try
                {
                    item.Aggression_Property.Set(
                        value: rhs.Aggression,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Aggression, ex);
                }
            }
            if (copyMask?.Confidence ?? true)
            {
                try
                {
                    item.Confidence_Property.Set(
                        value: rhs.Confidence,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Confidence, ex);
                }
            }
            if (copyMask?.EnergyLevel ?? true)
            {
                try
                {
                    item.EnergyLevel_Property.Set(
                        value: rhs.EnergyLevel,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.EnergyLevel, ex);
                }
            }
            if (copyMask?.Responsibility ?? true)
            {
                try
                {
                    item.Responsibility_Property.Set(
                        value: rhs.Responsibility,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Responsibility, ex);
                }
            }
            if (copyMask?.BuySellServices ?? true)
            {
                try
                {
                    item.BuySellServices_Property.Set(
                        value: rhs.BuySellServices,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.BuySellServices, ex);
                }
            }
            if (copyMask?.Teaches ?? true)
            {
                try
                {
                    item.Teaches_Property.Set(
                        value: rhs.Teaches,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Teaches, ex);
                }
            }
            if (copyMask?.MaximumTrainingLevel ?? true)
            {
                try
                {
                    item.MaximumTrainingLevel_Property.Set(
                        value: rhs.MaximumTrainingLevel,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.MaximumTrainingLevel, ex);
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                try
                {
                    item.Fluff_Property.Set(
                        value: rhs.Fluff,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Fluff, ex);
                }
            }
            if (copyMask?.AIPackages != CopyOption.Skip)
            {
                try
                {
                    item.AIPackages.SetToWithDefault(
                        rhs.AIPackages,
                        def?.AIPackages,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.AIPackages, ex);
                }
            }
            if (copyMask?.Animations != CopyOption.Skip)
            {
                try
                {
                    item.Animations.SetToWithDefault(
                        rhs.Animations,
                        def?.Animations,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Animations, ex);
                }
            }
            if (copyMask?.Class ?? true)
            {
                try
                {
                    item.Class_Property.SetToWithDefault(
                        rhs: rhs.Class_Property,
                        def: def?.Class_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Class, ex);
                }
            }
            if (copyMask?.Armorer ?? true)
            {
                try
                {
                    item.Armorer_Property.Set(
                        value: rhs.Armorer,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Armorer, ex);
                }
            }
            if (copyMask?.Athletics ?? true)
            {
                try
                {
                    item.Athletics_Property.Set(
                        value: rhs.Athletics,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Athletics, ex);
                }
            }
            if (copyMask?.Blade ?? true)
            {
                try
                {
                    item.Blade_Property.Set(
                        value: rhs.Blade,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Blade, ex);
                }
            }
            if (copyMask?.Block ?? true)
            {
                try
                {
                    item.Block_Property.Set(
                        value: rhs.Block,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Block, ex);
                }
            }
            if (copyMask?.Blunt ?? true)
            {
                try
                {
                    item.Blunt_Property.Set(
                        value: rhs.Blunt,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Blunt, ex);
                }
            }
            if (copyMask?.HandToHand ?? true)
            {
                try
                {
                    item.HandToHand_Property.Set(
                        value: rhs.HandToHand,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.HandToHand, ex);
                }
            }
            if (copyMask?.HeavyArmor ?? true)
            {
                try
                {
                    item.HeavyArmor_Property.Set(
                        value: rhs.HeavyArmor,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.HeavyArmor, ex);
                }
            }
            if (copyMask?.Alchemy ?? true)
            {
                try
                {
                    item.Alchemy_Property.Set(
                        value: rhs.Alchemy,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Alchemy, ex);
                }
            }
            if (copyMask?.Alteration ?? true)
            {
                try
                {
                    item.Alteration_Property.Set(
                        value: rhs.Alteration,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Alteration, ex);
                }
            }
            if (copyMask?.Conjuration ?? true)
            {
                try
                {
                    item.Conjuration_Property.Set(
                        value: rhs.Conjuration,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Conjuration, ex);
                }
            }
            if (copyMask?.Destruction ?? true)
            {
                try
                {
                    item.Destruction_Property.Set(
                        value: rhs.Destruction,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Destruction, ex);
                }
            }
            if (copyMask?.Illusion ?? true)
            {
                try
                {
                    item.Illusion_Property.Set(
                        value: rhs.Illusion,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Illusion, ex);
                }
            }
            if (copyMask?.Mysticism ?? true)
            {
                try
                {
                    item.Mysticism_Property.Set(
                        value: rhs.Mysticism,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Mysticism, ex);
                }
            }
            if (copyMask?.Restoration ?? true)
            {
                try
                {
                    item.Restoration_Property.Set(
                        value: rhs.Restoration,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Restoration, ex);
                }
            }
            if (copyMask?.Acrobatics ?? true)
            {
                try
                {
                    item.Acrobatics_Property.Set(
                        value: rhs.Acrobatics,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Acrobatics, ex);
                }
            }
            if (copyMask?.LightArmor ?? true)
            {
                try
                {
                    item.LightArmor_Property.Set(
                        value: rhs.LightArmor,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.LightArmor, ex);
                }
            }
            if (copyMask?.Marksman ?? true)
            {
                try
                {
                    item.Marksman_Property.Set(
                        value: rhs.Marksman,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Marksman, ex);
                }
            }
            if (copyMask?.Mercantile ?? true)
            {
                try
                {
                    item.Mercantile_Property.Set(
                        value: rhs.Mercantile,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Mercantile, ex);
                }
            }
            if (copyMask?.Security ?? true)
            {
                try
                {
                    item.Security_Property.Set(
                        value: rhs.Security,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Security, ex);
                }
            }
            if (copyMask?.Sneak ?? true)
            {
                try
                {
                    item.Sneak_Property.Set(
                        value: rhs.Sneak,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Sneak, ex);
                }
            }
            if (copyMask?.Speechcraft ?? true)
            {
                try
                {
                    item.Speechcraft_Property.Set(
                        value: rhs.Speechcraft,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Speechcraft, ex);
                }
            }
            if (copyMask?.Health ?? true)
            {
                try
                {
                    item.Health_Property.Set(
                        value: rhs.Health,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Health, ex);
                }
            }
            if (copyMask?.Strength ?? true)
            {
                try
                {
                    item.Strength_Property.Set(
                        value: rhs.Strength,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Strength, ex);
                }
            }
            if (copyMask?.Intelligence ?? true)
            {
                try
                {
                    item.Intelligence_Property.Set(
                        value: rhs.Intelligence,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Intelligence, ex);
                }
            }
            if (copyMask?.Willpower ?? true)
            {
                try
                {
                    item.Willpower_Property.Set(
                        value: rhs.Willpower,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Willpower, ex);
                }
            }
            if (copyMask?.Agility ?? true)
            {
                try
                {
                    item.Agility_Property.Set(
                        value: rhs.Agility,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Agility, ex);
                }
            }
            if (copyMask?.Speed ?? true)
            {
                try
                {
                    item.Speed_Property.Set(
                        value: rhs.Speed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Speed, ex);
                }
            }
            if (copyMask?.Endurance ?? true)
            {
                try
                {
                    item.Endurance_Property.Set(
                        value: rhs.Endurance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Endurance, ex);
                }
            }
            if (copyMask?.Personality ?? true)
            {
                try
                {
                    item.Personality_Property.Set(
                        value: rhs.Personality,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Personality, ex);
                }
            }
            if (copyMask?.Luck ?? true)
            {
                try
                {
                    item.Luck_Property.Set(
                        value: rhs.Luck,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Luck, ex);
                }
            }
            if (copyMask?.Hair ?? true)
            {
                try
                {
                    item.Hair_Property.SetToWithDefault(
                        rhs: rhs.Hair_Property,
                        def: def?.Hair_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Hair, ex);
                }
            }
            if (copyMask?.HairLength ?? true)
            {
                try
                {
                    item.HairLength_Property.SetToWithDefault(
                        rhs: rhs.HairLength_Property,
                        def: def?.HairLength_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.HairLength, ex);
                }
            }
            if (copyMask?.Eyes != CopyOption.Skip)
            {
                try
                {
                    item.Eyes.SetToWithDefault(
                        rhs.Eyes,
                        def?.Eyes,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Eyes, ex);
                }
            }
            if (copyMask?.HairColor ?? true)
            {
                try
                {
                    item.HairColor_Property.SetToWithDefault(
                        rhs: rhs.HairColor_Property,
                        def: def?.HairColor_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.HairColor, ex);
                }
            }
            if (copyMask?.CombatStyle ?? true)
            {
                try
                {
                    item.CombatStyle_Property.SetToWithDefault(
                        rhs: rhs.CombatStyle_Property,
                        def: def?.CombatStyle_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.CombatStyle, ex);
                }
            }
            if (copyMask?.FaceGenGeometrySymmetric ?? true)
            {
                try
                {
                    item.FaceGenGeometrySymmetric_Property.SetToWithDefault(
                        rhs: rhs.FaceGenGeometrySymmetric_Property,
                        def: def?.FaceGenGeometrySymmetric_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.FaceGenGeometrySymmetric, ex);
                }
            }
            if (copyMask?.FaceGenGeometryAsymmetric ?? true)
            {
                try
                {
                    item.FaceGenGeometryAsymmetric_Property.SetToWithDefault(
                        rhs: rhs.FaceGenGeometryAsymmetric_Property,
                        def: def?.FaceGenGeometryAsymmetric_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.FaceGenGeometryAsymmetric, ex);
                }
            }
            if (copyMask?.FaceGenTextureSymmetric ?? true)
            {
                try
                {
                    item.FaceGenTextureSymmetric_Property.SetToWithDefault(
                        rhs: rhs.FaceGenTextureSymmetric_Property,
                        def: def?.FaceGenTextureSymmetric_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.FaceGenTextureSymmetric, ex);
                }
            }
            if (copyMask?.Unknown ?? true)
            {
                try
                {
                    item.Unknown_Property.SetToWithDefault(
                        rhs: rhs.Unknown_Property,
                        def: def?.Unknown_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NPC_FieldIndex.Unknown, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            INPC obj,
            NotifyingFireParameters? cmds = null)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.NPCFlags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case NPC_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.Factions:
                    obj.Factions.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.DeathItem:
                    obj.DeathItem_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.Race:
                    obj.Race_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.Spells:
                    obj.Spells.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.Items:
                    obj.Items.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.AIPackages:
                    obj.AIPackages.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.Animations:
                    obj.Animations.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.Class:
                    obj.Class_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.Hair:
                    obj.Hair_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.HairLength:
                    obj.HairLength_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.Eyes:
                    obj.Eyes.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.HairColor:
                    obj.HairColor_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.CombatStyle:
                    obj.CombatStyle_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    obj.FaceGenGeometrySymmetric_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    obj.FaceGenGeometryAsymmetric_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    obj.FaceGenTextureSymmetric_Property.HasBeenSet = on;
                    break;
                case NPC_FieldIndex.Unknown:
                    obj.Unknown_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            INPC obj,
            NotifyingUnsetParameters? cmds = null)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.NPCFlags:
                    obj.NPCFlags = default(NPC.NPCFlag);
                    break;
                case NPC_FieldIndex.BaseSpellPoints:
                    obj.BaseSpellPoints = default(UInt16);
                    break;
                case NPC_FieldIndex.Fatigue:
                    obj.Fatigue = default(UInt16);
                    break;
                case NPC_FieldIndex.BarterGold:
                    obj.BarterGold = default(UInt16);
                    break;
                case NPC_FieldIndex.LevelOffset:
                    obj.LevelOffset = default(Int16);
                    break;
                case NPC_FieldIndex.CalcMin:
                    obj.CalcMin = default(UInt16);
                    break;
                case NPC_FieldIndex.CalcMax:
                    obj.CalcMax = default(UInt16);
                    break;
                case NPC_FieldIndex.Factions:
                    obj.Factions.Unset(cmds);
                    break;
                case NPC_FieldIndex.DeathItem:
                    obj.DeathItem_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.Race:
                    obj.Race_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.Spells:
                    obj.Spells.Unset(cmds);
                    break;
                case NPC_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.Items:
                    obj.Items.Unset(cmds);
                    break;
                case NPC_FieldIndex.Aggression:
                    obj.Aggression = default(Byte);
                    break;
                case NPC_FieldIndex.Confidence:
                    obj.Confidence = default(Byte);
                    break;
                case NPC_FieldIndex.EnergyLevel:
                    obj.EnergyLevel = default(Byte);
                    break;
                case NPC_FieldIndex.Responsibility:
                    obj.Responsibility = default(Byte);
                    break;
                case NPC_FieldIndex.BuySellServices:
                    obj.BuySellServices = default(NPC.BuySellServiceFlag);
                    break;
                case NPC_FieldIndex.Teaches:
                    obj.Teaches = default(Skill);
                    break;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    obj.MaximumTrainingLevel = default(Byte);
                    break;
                case NPC_FieldIndex.Fluff:
                    obj.Fluff = default(Byte[]);
                    break;
                case NPC_FieldIndex.AIPackages:
                    obj.AIPackages.Unset(cmds);
                    break;
                case NPC_FieldIndex.Animations:
                    obj.Animations.Unset(cmds);
                    break;
                case NPC_FieldIndex.Class:
                    obj.Class_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.Armorer:
                    obj.Armorer = default(Byte);
                    break;
                case NPC_FieldIndex.Athletics:
                    obj.Athletics = default(Byte);
                    break;
                case NPC_FieldIndex.Blade:
                    obj.Blade = default(Byte);
                    break;
                case NPC_FieldIndex.Block:
                    obj.Block = default(Byte);
                    break;
                case NPC_FieldIndex.Blunt:
                    obj.Blunt = default(Byte);
                    break;
                case NPC_FieldIndex.HandToHand:
                    obj.HandToHand = default(Byte);
                    break;
                case NPC_FieldIndex.HeavyArmor:
                    obj.HeavyArmor = default(Byte);
                    break;
                case NPC_FieldIndex.Alchemy:
                    obj.Alchemy = default(Byte);
                    break;
                case NPC_FieldIndex.Alteration:
                    obj.Alteration = default(Byte);
                    break;
                case NPC_FieldIndex.Conjuration:
                    obj.Conjuration = default(Byte);
                    break;
                case NPC_FieldIndex.Destruction:
                    obj.Destruction = default(Byte);
                    break;
                case NPC_FieldIndex.Illusion:
                    obj.Illusion = default(Byte);
                    break;
                case NPC_FieldIndex.Mysticism:
                    obj.Mysticism = default(Byte);
                    break;
                case NPC_FieldIndex.Restoration:
                    obj.Restoration = default(Byte);
                    break;
                case NPC_FieldIndex.Acrobatics:
                    obj.Acrobatics = default(Byte);
                    break;
                case NPC_FieldIndex.LightArmor:
                    obj.LightArmor = default(Byte);
                    break;
                case NPC_FieldIndex.Marksman:
                    obj.Marksman = default(Byte);
                    break;
                case NPC_FieldIndex.Mercantile:
                    obj.Mercantile = default(Byte);
                    break;
                case NPC_FieldIndex.Security:
                    obj.Security = default(Byte);
                    break;
                case NPC_FieldIndex.Sneak:
                    obj.Sneak = default(Byte);
                    break;
                case NPC_FieldIndex.Speechcraft:
                    obj.Speechcraft = default(Byte);
                    break;
                case NPC_FieldIndex.Health:
                    obj.Health = default(UInt32);
                    break;
                case NPC_FieldIndex.Strength:
                    obj.Strength = default(Byte);
                    break;
                case NPC_FieldIndex.Intelligence:
                    obj.Intelligence = default(Byte);
                    break;
                case NPC_FieldIndex.Willpower:
                    obj.Willpower = default(Byte);
                    break;
                case NPC_FieldIndex.Agility:
                    obj.Agility = default(Byte);
                    break;
                case NPC_FieldIndex.Speed:
                    obj.Speed = default(Byte);
                    break;
                case NPC_FieldIndex.Endurance:
                    obj.Endurance = default(Byte);
                    break;
                case NPC_FieldIndex.Personality:
                    obj.Personality = default(Byte);
                    break;
                case NPC_FieldIndex.Luck:
                    obj.Luck = default(Byte);
                    break;
                case NPC_FieldIndex.Hair:
                    obj.Hair_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.HairLength:
                    obj.HairLength_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.Eyes:
                    obj.Eyes.Unset(cmds);
                    break;
                case NPC_FieldIndex.HairColor:
                    obj.HairColor_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.CombatStyle:
                    obj.CombatStyle_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    obj.FaceGenGeometrySymmetric_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    obj.FaceGenGeometryAsymmetric_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    obj.FaceGenTextureSymmetric_Property.Unset(cmds);
                    break;
                case NPC_FieldIndex.Unknown:
                    obj.Unknown_Property.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            INPC obj)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.NPCFlags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                    return true;
                case NPC_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case NPC_FieldIndex.Factions:
                    return obj.Factions.HasBeenSet;
                case NPC_FieldIndex.DeathItem:
                    return obj.DeathItem_Property.HasBeenSet;
                case NPC_FieldIndex.Race:
                    return obj.Race_Property.HasBeenSet;
                case NPC_FieldIndex.Spells:
                    return obj.Spells.HasBeenSet;
                case NPC_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case NPC_FieldIndex.Items:
                    return obj.Items.HasBeenSet;
                case NPC_FieldIndex.AIPackages:
                    return obj.AIPackages.HasBeenSet;
                case NPC_FieldIndex.Animations:
                    return obj.Animations.HasBeenSet;
                case NPC_FieldIndex.Class:
                    return obj.Class_Property.HasBeenSet;
                case NPC_FieldIndex.Hair:
                    return obj.Hair_Property.HasBeenSet;
                case NPC_FieldIndex.HairLength:
                    return obj.HairLength_Property.HasBeenSet;
                case NPC_FieldIndex.Eyes:
                    return obj.Eyes.HasBeenSet;
                case NPC_FieldIndex.HairColor:
                    return obj.HairColor_Property.HasBeenSet;
                case NPC_FieldIndex.CombatStyle:
                    return obj.CombatStyle_Property.HasBeenSet;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    return obj.FaceGenGeometrySymmetric_Property.HasBeenSet;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    return obj.FaceGenGeometryAsymmetric_Property.HasBeenSet;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    return obj.FaceGenTextureSymmetric_Property.HasBeenSet;
                case NPC_FieldIndex.Unknown:
                    return obj.Unknown_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            INPCGetter obj)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                    return obj.Model;
                case NPC_FieldIndex.NPCFlags:
                    return obj.NPCFlags;
                case NPC_FieldIndex.BaseSpellPoints:
                    return obj.BaseSpellPoints;
                case NPC_FieldIndex.Fatigue:
                    return obj.Fatigue;
                case NPC_FieldIndex.BarterGold:
                    return obj.BarterGold;
                case NPC_FieldIndex.LevelOffset:
                    return obj.LevelOffset;
                case NPC_FieldIndex.CalcMin:
                    return obj.CalcMin;
                case NPC_FieldIndex.CalcMax:
                    return obj.CalcMax;
                case NPC_FieldIndex.Factions:
                    return obj.Factions;
                case NPC_FieldIndex.DeathItem:
                    return obj.DeathItem;
                case NPC_FieldIndex.Race:
                    return obj.Race;
                case NPC_FieldIndex.Spells:
                    return obj.Spells;
                case NPC_FieldIndex.Script:
                    return obj.Script;
                case NPC_FieldIndex.Items:
                    return obj.Items;
                case NPC_FieldIndex.Aggression:
                    return obj.Aggression;
                case NPC_FieldIndex.Confidence:
                    return obj.Confidence;
                case NPC_FieldIndex.EnergyLevel:
                    return obj.EnergyLevel;
                case NPC_FieldIndex.Responsibility:
                    return obj.Responsibility;
                case NPC_FieldIndex.BuySellServices:
                    return obj.BuySellServices;
                case NPC_FieldIndex.Teaches:
                    return obj.Teaches;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    return obj.MaximumTrainingLevel;
                case NPC_FieldIndex.Fluff:
                    return obj.Fluff;
                case NPC_FieldIndex.AIPackages:
                    return obj.AIPackages;
                case NPC_FieldIndex.Animations:
                    return obj.Animations;
                case NPC_FieldIndex.Class:
                    return obj.Class;
                case NPC_FieldIndex.Armorer:
                    return obj.Armorer;
                case NPC_FieldIndex.Athletics:
                    return obj.Athletics;
                case NPC_FieldIndex.Blade:
                    return obj.Blade;
                case NPC_FieldIndex.Block:
                    return obj.Block;
                case NPC_FieldIndex.Blunt:
                    return obj.Blunt;
                case NPC_FieldIndex.HandToHand:
                    return obj.HandToHand;
                case NPC_FieldIndex.HeavyArmor:
                    return obj.HeavyArmor;
                case NPC_FieldIndex.Alchemy:
                    return obj.Alchemy;
                case NPC_FieldIndex.Alteration:
                    return obj.Alteration;
                case NPC_FieldIndex.Conjuration:
                    return obj.Conjuration;
                case NPC_FieldIndex.Destruction:
                    return obj.Destruction;
                case NPC_FieldIndex.Illusion:
                    return obj.Illusion;
                case NPC_FieldIndex.Mysticism:
                    return obj.Mysticism;
                case NPC_FieldIndex.Restoration:
                    return obj.Restoration;
                case NPC_FieldIndex.Acrobatics:
                    return obj.Acrobatics;
                case NPC_FieldIndex.LightArmor:
                    return obj.LightArmor;
                case NPC_FieldIndex.Marksman:
                    return obj.Marksman;
                case NPC_FieldIndex.Mercantile:
                    return obj.Mercantile;
                case NPC_FieldIndex.Security:
                    return obj.Security;
                case NPC_FieldIndex.Sneak:
                    return obj.Sneak;
                case NPC_FieldIndex.Speechcraft:
                    return obj.Speechcraft;
                case NPC_FieldIndex.Health:
                    return obj.Health;
                case NPC_FieldIndex.Strength:
                    return obj.Strength;
                case NPC_FieldIndex.Intelligence:
                    return obj.Intelligence;
                case NPC_FieldIndex.Willpower:
                    return obj.Willpower;
                case NPC_FieldIndex.Agility:
                    return obj.Agility;
                case NPC_FieldIndex.Speed:
                    return obj.Speed;
                case NPC_FieldIndex.Endurance:
                    return obj.Endurance;
                case NPC_FieldIndex.Personality:
                    return obj.Personality;
                case NPC_FieldIndex.Luck:
                    return obj.Luck;
                case NPC_FieldIndex.Hair:
                    return obj.Hair;
                case NPC_FieldIndex.HairLength:
                    return obj.HairLength;
                case NPC_FieldIndex.Eyes:
                    return obj.Eyes;
                case NPC_FieldIndex.HairColor:
                    return obj.HairColor;
                case NPC_FieldIndex.CombatStyle:
                    return obj.CombatStyle;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    return obj.FaceGenGeometrySymmetric;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    return obj.FaceGenGeometryAsymmetric;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    return obj.FaceGenTextureSymmetric;
                case NPC_FieldIndex.Unknown:
                    return obj.Unknown;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            INPC item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.NPCFlags = default(NPC.NPCFlag);
            item.BaseSpellPoints = default(UInt16);
            item.Fatigue = default(UInt16);
            item.BarterGold = default(UInt16);
            item.LevelOffset = default(Int16);
            item.CalcMin = default(UInt16);
            item.CalcMax = default(UInt16);
            item.Factions.Unset(cmds.ToUnsetParams());
            item.DeathItem_Property.Unset(cmds.ToUnsetParams());
            item.Race_Property.Unset(cmds.ToUnsetParams());
            item.Spells.Unset(cmds.ToUnsetParams());
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Items.Unset(cmds.ToUnsetParams());
            item.Aggression = default(Byte);
            item.Confidence = default(Byte);
            item.EnergyLevel = default(Byte);
            item.Responsibility = default(Byte);
            item.BuySellServices = default(NPC.BuySellServiceFlag);
            item.Teaches = default(Skill);
            item.MaximumTrainingLevel = default(Byte);
            item.Fluff = default(Byte[]);
            item.AIPackages.Unset(cmds.ToUnsetParams());
            item.Animations.Unset(cmds.ToUnsetParams());
            item.Class_Property.Unset(cmds.ToUnsetParams());
            item.Armorer = default(Byte);
            item.Athletics = default(Byte);
            item.Blade = default(Byte);
            item.Block = default(Byte);
            item.Blunt = default(Byte);
            item.HandToHand = default(Byte);
            item.HeavyArmor = default(Byte);
            item.Alchemy = default(Byte);
            item.Alteration = default(Byte);
            item.Conjuration = default(Byte);
            item.Destruction = default(Byte);
            item.Illusion = default(Byte);
            item.Mysticism = default(Byte);
            item.Restoration = default(Byte);
            item.Acrobatics = default(Byte);
            item.LightArmor = default(Byte);
            item.Marksman = default(Byte);
            item.Mercantile = default(Byte);
            item.Security = default(Byte);
            item.Sneak = default(Byte);
            item.Speechcraft = default(Byte);
            item.Health = default(UInt32);
            item.Strength = default(Byte);
            item.Intelligence = default(Byte);
            item.Willpower = default(Byte);
            item.Agility = default(Byte);
            item.Speed = default(Byte);
            item.Endurance = default(Byte);
            item.Personality = default(Byte);
            item.Luck = default(Byte);
            item.Hair_Property.Unset(cmds.ToUnsetParams());
            item.HairLength_Property.Unset(cmds.ToUnsetParams());
            item.Eyes.Unset(cmds.ToUnsetParams());
            item.HairColor_Property.Unset(cmds.ToUnsetParams());
            item.CombatStyle_Property.Unset(cmds.ToUnsetParams());
            item.FaceGenGeometrySymmetric_Property.Unset(cmds.ToUnsetParams());
            item.FaceGenGeometryAsymmetric_Property.Unset(cmds.ToUnsetParams());
            item.FaceGenTextureSymmetric_Property.Unset(cmds.ToUnsetParams());
            item.Unknown_Property.Unset(cmds.ToUnsetParams());
        }

        public static NPC_Mask<bool> GetEqualsMask(
            this INPCGetter item,
            INPCGetter rhs)
        {
            var ret = new NPC_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            INPCGetter item,
            INPCGetter rhs,
            NPC_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => ModelCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.NPCFlags = item.NPCFlags == rhs.NPCFlags;
            ret.BaseSpellPoints = item.BaseSpellPoints == rhs.BaseSpellPoints;
            ret.Fatigue = item.Fatigue == rhs.Fatigue;
            ret.BarterGold = item.BarterGold == rhs.BarterGold;
            ret.LevelOffset = item.LevelOffset == rhs.LevelOffset;
            ret.CalcMin = item.CalcMin == rhs.CalcMin;
            ret.CalcMax = item.CalcMax == rhs.CalcMax;
            if (item.Factions.HasBeenSet == rhs.Factions.HasBeenSet)
            {
                if (item.Factions.HasBeenSet)
                {
                    ret.Factions = new MaskItem<bool, IEnumerable<MaskItem<bool, RankPlacement_Mask<bool>>>>();
                    ret.Factions.Specific = item.Factions.SelectAgainst<RankPlacement, MaskItem<bool, RankPlacement_Mask<bool>>>(rhs.Factions, ((l, r) =>
                    {
                        MaskItem<bool, RankPlacement_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => RankPlacementCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.Factions.Overall);
                    ret.Factions.Overall = ret.Factions.Overall && ret.Factions.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Factions = new MaskItem<bool, IEnumerable<MaskItem<bool, RankPlacement_Mask<bool>>>>();
                    ret.Factions.Overall = true;
                }
            }
            else
            {
                ret.Factions = new MaskItem<bool, IEnumerable<MaskItem<bool, RankPlacement_Mask<bool>>>>();
                ret.Factions.Overall = false;
            }
            ret.DeathItem = item.DeathItem_Property.Equals(rhs.DeathItem_Property, (l, r) => l == r);
            ret.Race = item.Race_Property.Equals(rhs.Race_Property, (l, r) => l == r);
            if (item.Spells.HasBeenSet == rhs.Spells.HasBeenSet)
            {
                if (item.Spells.HasBeenSet)
                {
                    ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Spells.Specific = item.Spells.SelectAgainst<FormIDSetLink<Spell>, bool>(rhs.Spells, ((l, r) => object.Equals(l, r)), out ret.Spells.Overall);
                    ret.Spells.Overall = ret.Spells.Overall && ret.Spells.Specific.All((b) => b);
                }
                else
                {
                    ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Spells.Overall = true;
                }
            }
            else
            {
                ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                ret.Spells.Overall = false;
            }
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            if (item.Items.HasBeenSet == rhs.Items.HasBeenSet)
            {
                if (item.Items.HasBeenSet)
                {
                    ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ItemEntry_Mask<bool>>>>();
                    ret.Items.Specific = item.Items.SelectAgainst<ItemEntry, MaskItem<bool, ItemEntry_Mask<bool>>>(rhs.Items, ((l, r) =>
                    {
                        MaskItem<bool, ItemEntry_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => ItemEntryCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.Items.Overall);
                    ret.Items.Overall = ret.Items.Overall && ret.Items.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ItemEntry_Mask<bool>>>>();
                    ret.Items.Overall = true;
                }
            }
            else
            {
                ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ItemEntry_Mask<bool>>>>();
                ret.Items.Overall = false;
            }
            ret.Aggression = item.Aggression == rhs.Aggression;
            ret.Confidence = item.Confidence == rhs.Confidence;
            ret.EnergyLevel = item.EnergyLevel == rhs.EnergyLevel;
            ret.Responsibility = item.Responsibility == rhs.Responsibility;
            ret.BuySellServices = item.BuySellServices == rhs.BuySellServices;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel == rhs.MaximumTrainingLevel;
            ret.Fluff = item.Fluff.EqualsFast(rhs.Fluff);
            if (item.AIPackages.HasBeenSet == rhs.AIPackages.HasBeenSet)
            {
                if (item.AIPackages.HasBeenSet)
                {
                    ret.AIPackages = new MaskItem<bool, IEnumerable<bool>>();
                    ret.AIPackages.Specific = item.AIPackages.SelectAgainst<FormIDSetLink<AIPackage>, bool>(rhs.AIPackages, ((l, r) => object.Equals(l, r)), out ret.AIPackages.Overall);
                    ret.AIPackages.Overall = ret.AIPackages.Overall && ret.AIPackages.Specific.All((b) => b);
                }
                else
                {
                    ret.AIPackages = new MaskItem<bool, IEnumerable<bool>>();
                    ret.AIPackages.Overall = true;
                }
            }
            else
            {
                ret.AIPackages = new MaskItem<bool, IEnumerable<bool>>();
                ret.AIPackages.Overall = false;
            }
            if (item.Animations.HasBeenSet == rhs.Animations.HasBeenSet)
            {
                if (item.Animations.HasBeenSet)
                {
                    ret.Animations = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Animations.Specific = item.Animations.SelectAgainst<String, bool>(rhs.Animations, ((l, r) => object.Equals(l, r)), out ret.Animations.Overall);
                    ret.Animations.Overall = ret.Animations.Overall && ret.Animations.Specific.All((b) => b);
                }
                else
                {
                    ret.Animations = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Animations.Overall = true;
                }
            }
            else
            {
                ret.Animations = new MaskItem<bool, IEnumerable<bool>>();
                ret.Animations.Overall = false;
            }
            ret.Class = item.Class_Property.Equals(rhs.Class_Property, (l, r) => l == r);
            ret.Armorer = item.Armorer == rhs.Armorer;
            ret.Athletics = item.Athletics == rhs.Athletics;
            ret.Blade = item.Blade == rhs.Blade;
            ret.Block = item.Block == rhs.Block;
            ret.Blunt = item.Blunt == rhs.Blunt;
            ret.HandToHand = item.HandToHand == rhs.HandToHand;
            ret.HeavyArmor = item.HeavyArmor == rhs.HeavyArmor;
            ret.Alchemy = item.Alchemy == rhs.Alchemy;
            ret.Alteration = item.Alteration == rhs.Alteration;
            ret.Conjuration = item.Conjuration == rhs.Conjuration;
            ret.Destruction = item.Destruction == rhs.Destruction;
            ret.Illusion = item.Illusion == rhs.Illusion;
            ret.Mysticism = item.Mysticism == rhs.Mysticism;
            ret.Restoration = item.Restoration == rhs.Restoration;
            ret.Acrobatics = item.Acrobatics == rhs.Acrobatics;
            ret.LightArmor = item.LightArmor == rhs.LightArmor;
            ret.Marksman = item.Marksman == rhs.Marksman;
            ret.Mercantile = item.Mercantile == rhs.Mercantile;
            ret.Security = item.Security == rhs.Security;
            ret.Sneak = item.Sneak == rhs.Sneak;
            ret.Speechcraft = item.Speechcraft == rhs.Speechcraft;
            ret.Health = item.Health == rhs.Health;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
            ret.Hair = item.Hair_Property.Equals(rhs.Hair_Property, (l, r) => l == r);
            ret.HairLength = item.HairLength_Property.Equals(rhs.HairLength_Property, (l, r) => l == r);
            if (item.Eyes.HasBeenSet == rhs.Eyes.HasBeenSet)
            {
                if (item.Eyes.HasBeenSet)
                {
                    ret.Eyes = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Eyes.Specific = item.Eyes.SelectAgainst<FormIDLink<Eye>, bool>(rhs.Eyes, ((l, r) => object.Equals(l, r)), out ret.Eyes.Overall);
                    ret.Eyes.Overall = ret.Eyes.Overall && ret.Eyes.Specific.All((b) => b);
                }
                else
                {
                    ret.Eyes = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Eyes.Overall = true;
                }
            }
            else
            {
                ret.Eyes = new MaskItem<bool, IEnumerable<bool>>();
                ret.Eyes.Overall = false;
            }
            ret.HairColor = item.HairColor_Property.Equals(rhs.HairColor_Property, (l, r) => l == r);
            ret.CombatStyle = item.CombatStyle_Property.Equals(rhs.CombatStyle_Property, (l, r) => l == r);
            ret.FaceGenGeometrySymmetric = item.FaceGenGeometrySymmetric_Property.Equals(rhs.FaceGenGeometrySymmetric_Property, (l, r) => l.EqualsFast(r));
            ret.FaceGenGeometryAsymmetric = item.FaceGenGeometryAsymmetric_Property.Equals(rhs.FaceGenGeometryAsymmetric_Property, (l, r) => l.EqualsFast(r));
            ret.FaceGenTextureSymmetric = item.FaceGenTextureSymmetric_Property.Equals(rhs.FaceGenTextureSymmetric_Property, (l, r) => l.EqualsFast(r));
            ret.Unknown = item.Unknown_Property.Equals(rhs.Unknown_Property, (l, r) => l.EqualsFast(r));
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this INPCGetter item,
            string name = null,
            NPC_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this INPCGetter item,
            FileGeneration fg,
            string name = null,
            NPC_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(NPC)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(NPC)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.NPCFlags ?? true)
                {
                    fg.AppendLine($"NPCFlags => {item.NPCFlags}");
                }
                if (printMask?.BaseSpellPoints ?? true)
                {
                    fg.AppendLine($"BaseSpellPoints => {item.BaseSpellPoints}");
                }
                if (printMask?.Fatigue ?? true)
                {
                    fg.AppendLine($"Fatigue => {item.Fatigue}");
                }
                if (printMask?.BarterGold ?? true)
                {
                    fg.AppendLine($"BarterGold => {item.BarterGold}");
                }
                if (printMask?.LevelOffset ?? true)
                {
                    fg.AppendLine($"LevelOffset => {item.LevelOffset}");
                }
                if (printMask?.CalcMin ?? true)
                {
                    fg.AppendLine($"CalcMin => {item.CalcMin}");
                }
                if (printMask?.CalcMax ?? true)
                {
                    fg.AppendLine($"CalcMax => {item.CalcMax}");
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Factions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DeathItem ?? true)
                {
                    fg.AppendLine($"DeathItem => {item.DeathItem}");
                }
                if (printMask?.Race ?? true)
                {
                    fg.AppendLine($"Race => {item.Race}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Spells)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Items)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Aggression ?? true)
                {
                    fg.AppendLine($"Aggression => {item.Aggression}");
                }
                if (printMask?.Confidence ?? true)
                {
                    fg.AppendLine($"Confidence => {item.Confidence}");
                }
                if (printMask?.EnergyLevel ?? true)
                {
                    fg.AppendLine($"EnergyLevel => {item.EnergyLevel}");
                }
                if (printMask?.Responsibility ?? true)
                {
                    fg.AppendLine($"Responsibility => {item.Responsibility}");
                }
                if (printMask?.BuySellServices ?? true)
                {
                    fg.AppendLine($"BuySellServices => {item.BuySellServices}");
                }
                if (printMask?.Teaches ?? true)
                {
                    fg.AppendLine($"Teaches => {item.Teaches}");
                }
                if (printMask?.MaximumTrainingLevel ?? true)
                {
                    fg.AppendLine($"MaximumTrainingLevel => {item.MaximumTrainingLevel}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.AIPackages?.Overall ?? true)
                {
                    fg.AppendLine("AIPackages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.AIPackages)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Animations?.Overall ?? true)
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Animations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Class ?? true)
                {
                    fg.AppendLine($"Class => {item.Class}");
                }
                if (printMask?.Armorer ?? true)
                {
                    fg.AppendLine($"Armorer => {item.Armorer}");
                }
                if (printMask?.Athletics ?? true)
                {
                    fg.AppendLine($"Athletics => {item.Athletics}");
                }
                if (printMask?.Blade ?? true)
                {
                    fg.AppendLine($"Blade => {item.Blade}");
                }
                if (printMask?.Block ?? true)
                {
                    fg.AppendLine($"Block => {item.Block}");
                }
                if (printMask?.Blunt ?? true)
                {
                    fg.AppendLine($"Blunt => {item.Blunt}");
                }
                if (printMask?.HandToHand ?? true)
                {
                    fg.AppendLine($"HandToHand => {item.HandToHand}");
                }
                if (printMask?.HeavyArmor ?? true)
                {
                    fg.AppendLine($"HeavyArmor => {item.HeavyArmor}");
                }
                if (printMask?.Alchemy ?? true)
                {
                    fg.AppendLine($"Alchemy => {item.Alchemy}");
                }
                if (printMask?.Alteration ?? true)
                {
                    fg.AppendLine($"Alteration => {item.Alteration}");
                }
                if (printMask?.Conjuration ?? true)
                {
                    fg.AppendLine($"Conjuration => {item.Conjuration}");
                }
                if (printMask?.Destruction ?? true)
                {
                    fg.AppendLine($"Destruction => {item.Destruction}");
                }
                if (printMask?.Illusion ?? true)
                {
                    fg.AppendLine($"Illusion => {item.Illusion}");
                }
                if (printMask?.Mysticism ?? true)
                {
                    fg.AppendLine($"Mysticism => {item.Mysticism}");
                }
                if (printMask?.Restoration ?? true)
                {
                    fg.AppendLine($"Restoration => {item.Restoration}");
                }
                if (printMask?.Acrobatics ?? true)
                {
                    fg.AppendLine($"Acrobatics => {item.Acrobatics}");
                }
                if (printMask?.LightArmor ?? true)
                {
                    fg.AppendLine($"LightArmor => {item.LightArmor}");
                }
                if (printMask?.Marksman ?? true)
                {
                    fg.AppendLine($"Marksman => {item.Marksman}");
                }
                if (printMask?.Mercantile ?? true)
                {
                    fg.AppendLine($"Mercantile => {item.Mercantile}");
                }
                if (printMask?.Security ?? true)
                {
                    fg.AppendLine($"Security => {item.Security}");
                }
                if (printMask?.Sneak ?? true)
                {
                    fg.AppendLine($"Sneak => {item.Sneak}");
                }
                if (printMask?.Speechcraft ?? true)
                {
                    fg.AppendLine($"Speechcraft => {item.Speechcraft}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {item.Health}");
                }
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {item.Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {item.Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {item.Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {item.Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {item.Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {item.Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {item.Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {item.Luck}");
                }
                if (printMask?.Hair ?? true)
                {
                    fg.AppendLine($"Hair => {item.Hair}");
                }
                if (printMask?.HairLength ?? true)
                {
                    fg.AppendLine($"HairLength => {item.HairLength}");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Eyes)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.HairColor ?? true)
                {
                    fg.AppendLine($"HairColor => {item.HairColor}");
                }
                if (printMask?.CombatStyle ?? true)
                {
                    fg.AppendLine($"CombatStyle => {item.CombatStyle}");
                }
                if (printMask?.FaceGenGeometrySymmetric ?? true)
                {
                    fg.AppendLine($"FaceGenGeometrySymmetric => {item.FaceGenGeometrySymmetric}");
                }
                if (printMask?.FaceGenGeometryAsymmetric ?? true)
                {
                    fg.AppendLine($"FaceGenGeometryAsymmetric => {item.FaceGenGeometryAsymmetric}");
                }
                if (printMask?.FaceGenTextureSymmetric ?? true)
                {
                    fg.AppendLine($"FaceGenTextureSymmetric => {item.FaceGenTextureSymmetric}");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {item.Unknown}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this INPCGetter item,
            NPC_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model_Property.Item == null || !item.Model_Property.Item.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Factions.Overall.HasValue && checkMask.Factions.Overall.Value != item.Factions.HasBeenSet) return false;
            if (checkMask.DeathItem.HasValue && checkMask.DeathItem.Value != item.DeathItem_Property.HasBeenSet) return false;
            if (checkMask.Race.HasValue && checkMask.Race.Value != item.Race_Property.HasBeenSet) return false;
            if (checkMask.Spells.Overall.HasValue && checkMask.Spells.Overall.Value != item.Spells.HasBeenSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            if (checkMask.AIPackages.Overall.HasValue && checkMask.AIPackages.Overall.Value != item.AIPackages.HasBeenSet) return false;
            if (checkMask.Animations.Overall.HasValue && checkMask.Animations.Overall.Value != item.Animations.HasBeenSet) return false;
            if (checkMask.Class.HasValue && checkMask.Class.Value != item.Class_Property.HasBeenSet) return false;
            if (checkMask.Hair.HasValue && checkMask.Hair.Value != item.Hair_Property.HasBeenSet) return false;
            if (checkMask.HairLength.HasValue && checkMask.HairLength.Value != item.HairLength_Property.HasBeenSet) return false;
            if (checkMask.Eyes.Overall.HasValue && checkMask.Eyes.Overall.Value != item.Eyes.HasBeenSet) return false;
            if (checkMask.HairColor.HasValue && checkMask.HairColor.Value != item.HairColor_Property.HasBeenSet) return false;
            if (checkMask.CombatStyle.HasValue && checkMask.CombatStyle.Value != item.CombatStyle_Property.HasBeenSet) return false;
            if (checkMask.FaceGenGeometrySymmetric.HasValue && checkMask.FaceGenGeometrySymmetric.Value != item.FaceGenGeometrySymmetric_Property.HasBeenSet) return false;
            if (checkMask.FaceGenGeometryAsymmetric.HasValue && checkMask.FaceGenGeometryAsymmetric.Value != item.FaceGenGeometryAsymmetric_Property.HasBeenSet) return false;
            if (checkMask.FaceGenTextureSymmetric.HasValue && checkMask.FaceGenTextureSymmetric.Value != item.FaceGenTextureSymmetric_Property.HasBeenSet) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_Property.HasBeenSet) return false;
            return true;
        }

        public static NPC_Mask<bool> GetHasBeenSetMask(INPCGetter item)
        {
            var ret = new NPC_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model_Property.Item));
            ret.NPCFlags = true;
            ret.BaseSpellPoints = true;
            ret.Fatigue = true;
            ret.BarterGold = true;
            ret.LevelOffset = true;
            ret.CalcMin = true;
            ret.CalcMax = true;
            ret.Factions = new MaskItem<bool, IEnumerable<MaskItem<bool, RankPlacement_Mask<bool>>>>(item.Factions.HasBeenSet, item.Factions.Select((i) => new MaskItem<bool, RankPlacement_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.DeathItem = item.DeathItem_Property.HasBeenSet;
            ret.Race = item.Race_Property.HasBeenSet;
            ret.Spells = new MaskItem<bool, IEnumerable<bool>>(item.Spells.HasBeenSet, null);
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, ItemEntry_Mask<bool>>>>(item.Items.HasBeenSet, item.Items.Select((i) => new MaskItem<bool, ItemEntry_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Aggression = true;
            ret.Confidence = true;
            ret.EnergyLevel = true;
            ret.Responsibility = true;
            ret.BuySellServices = true;
            ret.Teaches = true;
            ret.MaximumTrainingLevel = true;
            ret.Fluff = true;
            ret.AIPackages = new MaskItem<bool, IEnumerable<bool>>(item.AIPackages.HasBeenSet, null);
            ret.Animations = new MaskItem<bool, IEnumerable<bool>>(item.Animations.HasBeenSet, null);
            ret.Class = item.Class_Property.HasBeenSet;
            ret.Armorer = true;
            ret.Athletics = true;
            ret.Blade = true;
            ret.Block = true;
            ret.Blunt = true;
            ret.HandToHand = true;
            ret.HeavyArmor = true;
            ret.Alchemy = true;
            ret.Alteration = true;
            ret.Conjuration = true;
            ret.Destruction = true;
            ret.Illusion = true;
            ret.Mysticism = true;
            ret.Restoration = true;
            ret.Acrobatics = true;
            ret.LightArmor = true;
            ret.Marksman = true;
            ret.Mercantile = true;
            ret.Security = true;
            ret.Sneak = true;
            ret.Speechcraft = true;
            ret.Health = true;
            ret.Strength = true;
            ret.Intelligence = true;
            ret.Willpower = true;
            ret.Agility = true;
            ret.Speed = true;
            ret.Endurance = true;
            ret.Personality = true;
            ret.Luck = true;
            ret.Hair = item.Hair_Property.HasBeenSet;
            ret.HairLength = item.HairLength_Property.HasBeenSet;
            ret.Eyes = new MaskItem<bool, IEnumerable<bool>>(item.Eyes.HasBeenSet, null);
            ret.HairColor = item.HairColor_Property.HasBeenSet;
            ret.CombatStyle = item.CombatStyle_Property.HasBeenSet;
            ret.FaceGenGeometrySymmetric = item.FaceGenGeometrySymmetric_Property.HasBeenSet;
            ret.FaceGenGeometryAsymmetric = item.FaceGenGeometryAsymmetric_Property.HasBeenSet;
            ret.FaceGenTextureSymmetric = item.FaceGenTextureSymmetric_Property.HasBeenSet;
            ret.Unknown = item.Unknown_Property.HasBeenSet;
            return ret;
        }

        public static NPC_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static NPC_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (NPC_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (NPC_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (NPC_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (NPC_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (NPC_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (NPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static NPC_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static NPC_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (NPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (NPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (NPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (NPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (NPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            INPCGetter item,
            bool doMasks,
            out NPC_ErrorMask errorMask,
            string name = null)
        {
            NPC_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new NPC_ErrorMask()) : default(Func<NPC_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            INPCGetter item,
            Func<NPC_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.NPC"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.NPC");
                    }
                    if (item.Model_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Model_Property,
                            name: nameof(item.Model),
                            fieldIndex: (int)NPC_FieldIndex.Model,
                            errorMask: errorMask);
                    }
                    EnumXmlTranslation<NPC.NPCFlag>.Instance.Write(
                        writer: writer,
                        name: nameof(item.NPCFlags),
                        item: item.NPCFlags_Property,
                        fieldIndex: (int)NPC_FieldIndex.NPCFlags,
                        errorMask: errorMask);
                    UInt16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.BaseSpellPoints),
                        item: item.BaseSpellPoints_Property,
                        fieldIndex: (int)NPC_FieldIndex.BaseSpellPoints,
                        errorMask: errorMask);
                    UInt16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Fatigue),
                        item: item.Fatigue_Property,
                        fieldIndex: (int)NPC_FieldIndex.Fatigue,
                        errorMask: errorMask);
                    UInt16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.BarterGold),
                        item: item.BarterGold_Property,
                        fieldIndex: (int)NPC_FieldIndex.BarterGold,
                        errorMask: errorMask);
                    Int16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.LevelOffset),
                        item: item.LevelOffset_Property,
                        fieldIndex: (int)NPC_FieldIndex.LevelOffset,
                        errorMask: errorMask);
                    UInt16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.CalcMin),
                        item: item.CalcMin_Property,
                        fieldIndex: (int)NPC_FieldIndex.CalcMin,
                        errorMask: errorMask);
                    UInt16XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.CalcMax),
                        item: item.CalcMax_Property,
                        fieldIndex: (int)NPC_FieldIndex.CalcMax,
                        errorMask: errorMask);
                    if (item.Factions.HasBeenSet)
                    {
                        ListXmlTranslation<RankPlacement, MaskItem<Exception, RankPlacement_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Factions),
                            item: item.Factions,
                            fieldIndex: (int)NPC_FieldIndex.Factions,
                            errorMask: errorMask,
                            transl: (RankPlacement subItem, bool listDoMasks, out MaskItem<Exception, RankPlacement_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<RankPlacement, RankPlacement_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.DeathItem_Property.HasBeenSet)
                    {
                        RawFormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.DeathItem),
                            item: item.DeathItem?.FormID,
                            fieldIndex: (int)NPC_FieldIndex.DeathItem,
                            errorMask: errorMask);
                    }
                    if (item.Race_Property.HasBeenSet)
                    {
                        RawFormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Race),
                            item: item.Race?.FormID,
                            fieldIndex: (int)NPC_FieldIndex.Race,
                            errorMask: errorMask);
                    }
                    if (item.Spells.HasBeenSet)
                    {
                        ListXmlTranslation<FormIDSetLink<Spell>, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Spells),
                            item: item.Spells,
                            fieldIndex: (int)NPC_FieldIndex.Spells,
                            errorMask: errorMask,
                            transl: (FormIDSetLink<Spell> subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                RawFormIDXmlTranslation.Instance.Write(
                                    writer: writer,
                                    name: "Item",
                                    item: subItem?.FormID,
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.Script_Property.HasBeenSet)
                    {
                        RawFormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Script),
                            item: item.Script?.FormID,
                            fieldIndex: (int)NPC_FieldIndex.Script,
                            errorMask: errorMask);
                    }
                    if (item.Items.HasBeenSet)
                    {
                        ListXmlTranslation<ItemEntry, MaskItem<Exception, ItemEntry_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Items),
                            item: item.Items,
                            fieldIndex: (int)NPC_FieldIndex.Items,
                            errorMask: errorMask,
                            transl: (ItemEntry subItem, bool listDoMasks, out MaskItem<Exception, ItemEntry_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<ItemEntry, ItemEntry_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Aggression),
                        item: item.Aggression_Property,
                        fieldIndex: (int)NPC_FieldIndex.Aggression,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Confidence),
                        item: item.Confidence_Property,
                        fieldIndex: (int)NPC_FieldIndex.Confidence,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.EnergyLevel),
                        item: item.EnergyLevel_Property,
                        fieldIndex: (int)NPC_FieldIndex.EnergyLevel,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Responsibility),
                        item: item.Responsibility_Property,
                        fieldIndex: (int)NPC_FieldIndex.Responsibility,
                        errorMask: errorMask);
                    EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                        writer: writer,
                        name: nameof(item.BuySellServices),
                        item: item.BuySellServices_Property,
                        fieldIndex: (int)NPC_FieldIndex.BuySellServices,
                        errorMask: errorMask);
                    EnumXmlTranslation<Skill>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Teaches),
                        item: item.Teaches_Property,
                        fieldIndex: (int)NPC_FieldIndex.Teaches,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.MaximumTrainingLevel),
                        item: item.MaximumTrainingLevel_Property,
                        fieldIndex: (int)NPC_FieldIndex.MaximumTrainingLevel,
                        errorMask: errorMask);
                    ByteArrayXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Fluff),
                        item: item.Fluff_Property,
                        fieldIndex: (int)NPC_FieldIndex.Fluff,
                        errorMask: errorMask);
                    if (item.AIPackages.HasBeenSet)
                    {
                        ListXmlTranslation<FormIDSetLink<AIPackage>, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.AIPackages),
                            item: item.AIPackages,
                            fieldIndex: (int)NPC_FieldIndex.AIPackages,
                            errorMask: errorMask,
                            transl: (FormIDSetLink<AIPackage> subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                RawFormIDXmlTranslation.Instance.Write(
                                    writer: writer,
                                    name: "Item",
                                    item: subItem?.FormID,
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.Animations.HasBeenSet)
                    {
                        ListXmlTranslation<String, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Animations),
                            item: item.Animations,
                            fieldIndex: (int)NPC_FieldIndex.Animations,
                            errorMask: errorMask,
                            transl: (String subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                StringXmlTranslation.Instance.Write(
                                    writer: writer,
                                    name: "Item",
                                    item: subItem,
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.Class_Property.HasBeenSet)
                    {
                        RawFormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Class),
                            item: item.Class?.FormID,
                            fieldIndex: (int)NPC_FieldIndex.Class,
                            errorMask: errorMask);
                    }
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Armorer),
                        item: item.Armorer_Property,
                        fieldIndex: (int)NPC_FieldIndex.Armorer,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Athletics),
                        item: item.Athletics_Property,
                        fieldIndex: (int)NPC_FieldIndex.Athletics,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Blade),
                        item: item.Blade_Property,
                        fieldIndex: (int)NPC_FieldIndex.Blade,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Block),
                        item: item.Block_Property,
                        fieldIndex: (int)NPC_FieldIndex.Block,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Blunt),
                        item: item.Blunt_Property,
                        fieldIndex: (int)NPC_FieldIndex.Blunt,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.HandToHand),
                        item: item.HandToHand_Property,
                        fieldIndex: (int)NPC_FieldIndex.HandToHand,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.HeavyArmor),
                        item: item.HeavyArmor_Property,
                        fieldIndex: (int)NPC_FieldIndex.HeavyArmor,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Alchemy),
                        item: item.Alchemy_Property,
                        fieldIndex: (int)NPC_FieldIndex.Alchemy,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Alteration),
                        item: item.Alteration_Property,
                        fieldIndex: (int)NPC_FieldIndex.Alteration,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Conjuration),
                        item: item.Conjuration_Property,
                        fieldIndex: (int)NPC_FieldIndex.Conjuration,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Destruction),
                        item: item.Destruction_Property,
                        fieldIndex: (int)NPC_FieldIndex.Destruction,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Illusion),
                        item: item.Illusion_Property,
                        fieldIndex: (int)NPC_FieldIndex.Illusion,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Mysticism),
                        item: item.Mysticism_Property,
                        fieldIndex: (int)NPC_FieldIndex.Mysticism,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Restoration),
                        item: item.Restoration_Property,
                        fieldIndex: (int)NPC_FieldIndex.Restoration,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Acrobatics),
                        item: item.Acrobatics_Property,
                        fieldIndex: (int)NPC_FieldIndex.Acrobatics,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.LightArmor),
                        item: item.LightArmor_Property,
                        fieldIndex: (int)NPC_FieldIndex.LightArmor,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Marksman),
                        item: item.Marksman_Property,
                        fieldIndex: (int)NPC_FieldIndex.Marksman,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Mercantile),
                        item: item.Mercantile_Property,
                        fieldIndex: (int)NPC_FieldIndex.Mercantile,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Security),
                        item: item.Security_Property,
                        fieldIndex: (int)NPC_FieldIndex.Security,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Sneak),
                        item: item.Sneak_Property,
                        fieldIndex: (int)NPC_FieldIndex.Sneak,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Speechcraft),
                        item: item.Speechcraft_Property,
                        fieldIndex: (int)NPC_FieldIndex.Speechcraft,
                        errorMask: errorMask);
                    UInt32XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Health),
                        item: item.Health_Property,
                        fieldIndex: (int)NPC_FieldIndex.Health,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Strength),
                        item: item.Strength_Property,
                        fieldIndex: (int)NPC_FieldIndex.Strength,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Intelligence),
                        item: item.Intelligence_Property,
                        fieldIndex: (int)NPC_FieldIndex.Intelligence,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Willpower),
                        item: item.Willpower_Property,
                        fieldIndex: (int)NPC_FieldIndex.Willpower,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Agility),
                        item: item.Agility_Property,
                        fieldIndex: (int)NPC_FieldIndex.Agility,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Speed),
                        item: item.Speed_Property,
                        fieldIndex: (int)NPC_FieldIndex.Speed,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Endurance),
                        item: item.Endurance_Property,
                        fieldIndex: (int)NPC_FieldIndex.Endurance,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Personality),
                        item: item.Personality_Property,
                        fieldIndex: (int)NPC_FieldIndex.Personality,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Luck),
                        item: item.Luck_Property,
                        fieldIndex: (int)NPC_FieldIndex.Luck,
                        errorMask: errorMask);
                    if (item.Hair_Property.HasBeenSet)
                    {
                        RawFormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Hair),
                            item: item.Hair?.FormID,
                            fieldIndex: (int)NPC_FieldIndex.Hair,
                            errorMask: errorMask);
                    }
                    if (item.HairLength_Property.HasBeenSet)
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.HairLength),
                            item: item.HairLength_Property,
                            fieldIndex: (int)NPC_FieldIndex.HairLength,
                            errorMask: errorMask);
                    }
                    if (item.Eyes.HasBeenSet)
                    {
                        ListXmlTranslation<FormIDLink<Eye>, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Eyes),
                            item: item.Eyes,
                            fieldIndex: (int)NPC_FieldIndex.Eyes,
                            errorMask: errorMask,
                            transl: (FormIDLink<Eye> subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                RawFormIDXmlTranslation.Instance.Write(
                                    writer: writer,
                                    name: "Item",
                                    item: subItem?.FormID,
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.HairColor_Property.HasBeenSet)
                    {
                        ColorXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.HairColor),
                            item: item.HairColor_Property,
                            fieldIndex: (int)NPC_FieldIndex.HairColor,
                            errorMask: errorMask);
                    }
                    if (item.CombatStyle_Property.HasBeenSet)
                    {
                        RawFormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.CombatStyle),
                            item: item.CombatStyle?.FormID,
                            fieldIndex: (int)NPC_FieldIndex.CombatStyle,
                            errorMask: errorMask);
                    }
                    if (item.FaceGenGeometrySymmetric_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.FaceGenGeometrySymmetric),
                            item: item.FaceGenGeometrySymmetric_Property,
                            fieldIndex: (int)NPC_FieldIndex.FaceGenGeometrySymmetric,
                            errorMask: errorMask);
                    }
                    if (item.FaceGenGeometryAsymmetric_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.FaceGenGeometryAsymmetric),
                            item: item.FaceGenGeometryAsymmetric_Property,
                            fieldIndex: (int)NPC_FieldIndex.FaceGenGeometryAsymmetric,
                            errorMask: errorMask);
                    }
                    if (item.FaceGenTextureSymmetric_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.FaceGenTextureSymmetric),
                            item: item.FaceGenTextureSymmetric_Property,
                            fieldIndex: (int)NPC_FieldIndex.FaceGenTextureSymmetric,
                            errorMask: errorMask);
                    }
                    if (item.Unknown_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Unknown),
                            item: item.Unknown_Property,
                            fieldIndex: (int)NPC_FieldIndex.Unknown,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            NPC item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out NPC_ErrorMask errorMask)
        {
            NPC_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new NPC_ErrorMask()) : default(Func<NPC_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            NPC item,
            RecordTypeConverter recordTypeConverter,
            Func<NPC_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: NPC_Registration.NPC__HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            NPC item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<NPC_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                fieldIndex: (int)NPC_FieldIndex.Model,
                errorMask: errorMask);
            using (HeaderExport.ExportSubRecordHeader(writer, NPC_Registration.ACBS_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.NPCFlag>.Instance.Write(
                    writer,
                    item.NPCFlags_Property,
                    length: new ContentLength(4),
                    fieldIndex: (int)NPC_FieldIndex.NPCFlags,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BaseSpellPoints_Property,
                    fieldIndex: (int)NPC_FieldIndex.BaseSpellPoints,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Fatigue_Property,
                    fieldIndex: (int)NPC_FieldIndex.Fatigue,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BarterGold_Property,
                    fieldIndex: (int)NPC_FieldIndex.BarterGold,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LevelOffset_Property,
                    fieldIndex: (int)NPC_FieldIndex.LevelOffset,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CalcMin_Property,
                    fieldIndex: (int)NPC_FieldIndex.CalcMin,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CalcMax_Property,
                    fieldIndex: (int)NPC_FieldIndex.CalcMax,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement, MaskItem<Exception, RankPlacement_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Factions,
                fieldIndex: (int)NPC_FieldIndex.Factions,
                errorMask: errorMask,
                transl: (RankPlacement subItem, bool listDoMasks, out MaskItem<Exception, RankPlacement_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<RankPlacement, RankPlacement_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DeathItem_Property,
                fieldIndex: (int)NPC_FieldIndex.DeathItem,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.INAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Race_Property,
                fieldIndex: (int)NPC_FieldIndex.Race,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.RNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Spell>, Exception>.Instance.Write(
                writer: writer,
                item: item.Spells,
                fieldIndex: (int)NPC_FieldIndex.Spells,
                errorMask: errorMask,
                transl: (FormIDSetLink<Spell> subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask,
                        header: recordTypeConverter.ConvertToCustom(NPC_Registration.SPLO_HEADER),
                        nullable: false);
                }
                );
            Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)NPC_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.SCRI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry, MaskItem<Exception, ItemEntry_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Items,
                fieldIndex: (int)NPC_FieldIndex.Items,
                errorMask: errorMask,
                transl: (ItemEntry subItem, bool listDoMasks, out MaskItem<Exception, ItemEntry_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<ItemEntry, ItemEntry_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            using (HeaderExport.ExportSubRecordHeader(writer, NPC_Registration.AIDT_HEADER))
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Aggression_Property,
                    fieldIndex: (int)NPC_FieldIndex.Aggression,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Confidence_Property,
                    fieldIndex: (int)NPC_FieldIndex.Confidence,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EnergyLevel_Property,
                    fieldIndex: (int)NPC_FieldIndex.EnergyLevel,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Responsibility_Property,
                    fieldIndex: (int)NPC_FieldIndex.Responsibility,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                    writer,
                    item.BuySellServices_Property,
                    length: new ContentLength(4),
                    fieldIndex: (int)NPC_FieldIndex.BuySellServices,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                    writer,
                    item.Teaches_Property,
                    length: new ContentLength(1),
                    fieldIndex: (int)NPC_FieldIndex.Teaches,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaximumTrainingLevel_Property,
                    fieldIndex: (int)NPC_FieldIndex.MaximumTrainingLevel,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Fluff_Property,
                    fieldIndex: (int)NPC_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<AIPackage>, Exception>.Instance.Write(
                writer: writer,
                item: item.AIPackages,
                fieldIndex: (int)NPC_FieldIndex.AIPackages,
                errorMask: errorMask,
                transl: (FormIDSetLink<AIPackage> subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask,
                        header: recordTypeConverter.ConvertToCustom(NPC_Registration.PKID_HEADER),
                        nullable: false);
                }
                );
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String, Exception>.Instance.Write(
                writer: writer,
                item: item.Animations,
                fieldIndex: (int)NPC_FieldIndex.Animations,
                recordType: NPC_Registration.KFFZ_HEADER,
                errorMask: errorMask,
                transl: (String subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Class_Property,
                fieldIndex: (int)NPC_FieldIndex.Class,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.CNAM_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, NPC_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Armorer_Property,
                    fieldIndex: (int)NPC_FieldIndex.Armorer,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Athletics_Property,
                    fieldIndex: (int)NPC_FieldIndex.Athletics,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Blade_Property,
                    fieldIndex: (int)NPC_FieldIndex.Blade,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Block_Property,
                    fieldIndex: (int)NPC_FieldIndex.Block,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Blunt_Property,
                    fieldIndex: (int)NPC_FieldIndex.Blunt,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HandToHand_Property,
                    fieldIndex: (int)NPC_FieldIndex.HandToHand,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HeavyArmor_Property,
                    fieldIndex: (int)NPC_FieldIndex.HeavyArmor,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Alchemy_Property,
                    fieldIndex: (int)NPC_FieldIndex.Alchemy,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Alteration_Property,
                    fieldIndex: (int)NPC_FieldIndex.Alteration,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Conjuration_Property,
                    fieldIndex: (int)NPC_FieldIndex.Conjuration,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Destruction_Property,
                    fieldIndex: (int)NPC_FieldIndex.Destruction,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Illusion_Property,
                    fieldIndex: (int)NPC_FieldIndex.Illusion,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Mysticism_Property,
                    fieldIndex: (int)NPC_FieldIndex.Mysticism,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Restoration_Property,
                    fieldIndex: (int)NPC_FieldIndex.Restoration,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Acrobatics_Property,
                    fieldIndex: (int)NPC_FieldIndex.Acrobatics,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LightArmor_Property,
                    fieldIndex: (int)NPC_FieldIndex.LightArmor,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Marksman_Property,
                    fieldIndex: (int)NPC_FieldIndex.Marksman,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Mercantile_Property,
                    fieldIndex: (int)NPC_FieldIndex.Mercantile,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Security_Property,
                    fieldIndex: (int)NPC_FieldIndex.Security,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sneak_Property,
                    fieldIndex: (int)NPC_FieldIndex.Sneak,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Speechcraft_Property,
                    fieldIndex: (int)NPC_FieldIndex.Speechcraft,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Health_Property,
                    fieldIndex: (int)NPC_FieldIndex.Health,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Strength_Property,
                    fieldIndex: (int)NPC_FieldIndex.Strength,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Intelligence_Property,
                    fieldIndex: (int)NPC_FieldIndex.Intelligence,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Willpower_Property,
                    fieldIndex: (int)NPC_FieldIndex.Willpower,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Agility_Property,
                    fieldIndex: (int)NPC_FieldIndex.Agility,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Speed_Property,
                    fieldIndex: (int)NPC_FieldIndex.Speed,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Endurance_Property,
                    fieldIndex: (int)NPC_FieldIndex.Endurance,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Personality_Property,
                    fieldIndex: (int)NPC_FieldIndex.Personality,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Luck_Property,
                    fieldIndex: (int)NPC_FieldIndex.Luck,
                    errorMask: errorMask);
            }
            Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Hair_Property,
                fieldIndex: (int)NPC_FieldIndex.Hair,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.HNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HairLength_Property,
                fieldIndex: (int)NPC_FieldIndex.HairLength,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.LNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Eye>, Exception>.Instance.Write(
                writer: writer,
                item: item.Eyes,
                fieldIndex: (int)NPC_FieldIndex.Eyes,
                recordType: NPC_Registration.ENAM_HEADER,
                errorMask: errorMask,
                transl: (FormIDLink<Eye> subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HairColor_Property,
                fieldIndex: (int)NPC_FieldIndex.HairColor,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.HCLR_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.RawFormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CombatStyle_Property,
                fieldIndex: (int)NPC_FieldIndex.CombatStyle,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.ZNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FaceGenGeometrySymmetric_Property,
                fieldIndex: (int)NPC_FieldIndex.FaceGenGeometrySymmetric,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.FGGS_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FaceGenGeometryAsymmetric_Property,
                fieldIndex: (int)NPC_FieldIndex.FaceGenGeometryAsymmetric,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.FGGA_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FaceGenTextureSymmetric_Property,
                fieldIndex: (int)NPC_FieldIndex.FaceGenTextureSymmetric,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.FGTS_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown_Property,
                fieldIndex: (int)NPC_FieldIndex.Unknown,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NPC_Registration.FNAM_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class NPC_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<NPC_Mask<T>>
    {
        #region Ctors
        public NPC_Mask()
        {
        }

        public NPC_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.NPCFlags = initialValue;
            this.BaseSpellPoints = initialValue;
            this.Fatigue = initialValue;
            this.BarterGold = initialValue;
            this.LevelOffset = initialValue;
            this.CalcMin = initialValue;
            this.CalcMax = initialValue;
            this.Factions = new MaskItem<T, IEnumerable<MaskItem<T, RankPlacement_Mask<T>>>>(initialValue, null);
            this.DeathItem = initialValue;
            this.Race = initialValue;
            this.Spells = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Script = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItem<T, ItemEntry_Mask<T>>>>(initialValue, null);
            this.Aggression = initialValue;
            this.Confidence = initialValue;
            this.EnergyLevel = initialValue;
            this.Responsibility = initialValue;
            this.BuySellServices = initialValue;
            this.Teaches = initialValue;
            this.MaximumTrainingLevel = initialValue;
            this.Fluff = initialValue;
            this.AIPackages = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Animations = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Class = initialValue;
            this.Armorer = initialValue;
            this.Athletics = initialValue;
            this.Blade = initialValue;
            this.Block = initialValue;
            this.Blunt = initialValue;
            this.HandToHand = initialValue;
            this.HeavyArmor = initialValue;
            this.Alchemy = initialValue;
            this.Alteration = initialValue;
            this.Conjuration = initialValue;
            this.Destruction = initialValue;
            this.Illusion = initialValue;
            this.Mysticism = initialValue;
            this.Restoration = initialValue;
            this.Acrobatics = initialValue;
            this.LightArmor = initialValue;
            this.Marksman = initialValue;
            this.Mercantile = initialValue;
            this.Security = initialValue;
            this.Sneak = initialValue;
            this.Speechcraft = initialValue;
            this.Health = initialValue;
            this.Strength = initialValue;
            this.Intelligence = initialValue;
            this.Willpower = initialValue;
            this.Agility = initialValue;
            this.Speed = initialValue;
            this.Endurance = initialValue;
            this.Personality = initialValue;
            this.Luck = initialValue;
            this.Hair = initialValue;
            this.HairLength = initialValue;
            this.Eyes = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.HairColor = initialValue;
            this.CombatStyle = initialValue;
            this.FaceGenGeometrySymmetric = initialValue;
            this.FaceGenGeometryAsymmetric = initialValue;
            this.FaceGenTextureSymmetric = initialValue;
            this.Unknown = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T NPCFlags;
        public T BaseSpellPoints;
        public T Fatigue;
        public T BarterGold;
        public T LevelOffset;
        public T CalcMin;
        public T CalcMax;
        public MaskItem<T, IEnumerable<MaskItem<T, RankPlacement_Mask<T>>>> Factions;
        public T DeathItem;
        public T Race;
        public MaskItem<T, IEnumerable<T>> Spells;
        public T Script;
        public MaskItem<T, IEnumerable<MaskItem<T, ItemEntry_Mask<T>>>> Items;
        public T Aggression;
        public T Confidence;
        public T EnergyLevel;
        public T Responsibility;
        public T BuySellServices;
        public T Teaches;
        public T MaximumTrainingLevel;
        public T Fluff;
        public MaskItem<T, IEnumerable<T>> AIPackages;
        public MaskItem<T, IEnumerable<T>> Animations;
        public T Class;
        public T Armorer;
        public T Athletics;
        public T Blade;
        public T Block;
        public T Blunt;
        public T HandToHand;
        public T HeavyArmor;
        public T Alchemy;
        public T Alteration;
        public T Conjuration;
        public T Destruction;
        public T Illusion;
        public T Mysticism;
        public T Restoration;
        public T Acrobatics;
        public T LightArmor;
        public T Marksman;
        public T Mercantile;
        public T Security;
        public T Sneak;
        public T Speechcraft;
        public T Health;
        public T Strength;
        public T Intelligence;
        public T Willpower;
        public T Agility;
        public T Speed;
        public T Endurance;
        public T Personality;
        public T Luck;
        public T Hair;
        public T HairLength;
        public MaskItem<T, IEnumerable<T>> Eyes;
        public T HairColor;
        public T CombatStyle;
        public T FaceGenGeometrySymmetric;
        public T FaceGenGeometryAsymmetric;
        public T FaceGenTextureSymmetric;
        public T Unknown;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is NPC_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(NPC_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.NPCFlags, rhs.NPCFlags)) return false;
            if (!object.Equals(this.BaseSpellPoints, rhs.BaseSpellPoints)) return false;
            if (!object.Equals(this.Fatigue, rhs.Fatigue)) return false;
            if (!object.Equals(this.BarterGold, rhs.BarterGold)) return false;
            if (!object.Equals(this.LevelOffset, rhs.LevelOffset)) return false;
            if (!object.Equals(this.CalcMin, rhs.CalcMin)) return false;
            if (!object.Equals(this.CalcMax, rhs.CalcMax)) return false;
            if (!object.Equals(this.Factions, rhs.Factions)) return false;
            if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
            if (!object.Equals(this.Race, rhs.Race)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            if (!object.Equals(this.Aggression, rhs.Aggression)) return false;
            if (!object.Equals(this.Confidence, rhs.Confidence)) return false;
            if (!object.Equals(this.EnergyLevel, rhs.EnergyLevel)) return false;
            if (!object.Equals(this.Responsibility, rhs.Responsibility)) return false;
            if (!object.Equals(this.BuySellServices, rhs.BuySellServices)) return false;
            if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
            if (!object.Equals(this.MaximumTrainingLevel, rhs.MaximumTrainingLevel)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
            if (!object.Equals(this.Animations, rhs.Animations)) return false;
            if (!object.Equals(this.Class, rhs.Class)) return false;
            if (!object.Equals(this.Armorer, rhs.Armorer)) return false;
            if (!object.Equals(this.Athletics, rhs.Athletics)) return false;
            if (!object.Equals(this.Blade, rhs.Blade)) return false;
            if (!object.Equals(this.Block, rhs.Block)) return false;
            if (!object.Equals(this.Blunt, rhs.Blunt)) return false;
            if (!object.Equals(this.HandToHand, rhs.HandToHand)) return false;
            if (!object.Equals(this.HeavyArmor, rhs.HeavyArmor)) return false;
            if (!object.Equals(this.Alchemy, rhs.Alchemy)) return false;
            if (!object.Equals(this.Alteration, rhs.Alteration)) return false;
            if (!object.Equals(this.Conjuration, rhs.Conjuration)) return false;
            if (!object.Equals(this.Destruction, rhs.Destruction)) return false;
            if (!object.Equals(this.Illusion, rhs.Illusion)) return false;
            if (!object.Equals(this.Mysticism, rhs.Mysticism)) return false;
            if (!object.Equals(this.Restoration, rhs.Restoration)) return false;
            if (!object.Equals(this.Acrobatics, rhs.Acrobatics)) return false;
            if (!object.Equals(this.LightArmor, rhs.LightArmor)) return false;
            if (!object.Equals(this.Marksman, rhs.Marksman)) return false;
            if (!object.Equals(this.Mercantile, rhs.Mercantile)) return false;
            if (!object.Equals(this.Security, rhs.Security)) return false;
            if (!object.Equals(this.Sneak, rhs.Sneak)) return false;
            if (!object.Equals(this.Speechcraft, rhs.Speechcraft)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.Strength, rhs.Strength)) return false;
            if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
            if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
            if (!object.Equals(this.Agility, rhs.Agility)) return false;
            if (!object.Equals(this.Speed, rhs.Speed)) return false;
            if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
            if (!object.Equals(this.Personality, rhs.Personality)) return false;
            if (!object.Equals(this.Luck, rhs.Luck)) return false;
            if (!object.Equals(this.Hair, rhs.Hair)) return false;
            if (!object.Equals(this.HairLength, rhs.HairLength)) return false;
            if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(this.HairColor, rhs.HairColor)) return false;
            if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
            if (!object.Equals(this.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric)) return false;
            if (!object.Equals(this.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric)) return false;
            if (!object.Equals(this.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.NPCFlags?.GetHashCode());
            ret = ret.CombineHashCode(this.BaseSpellPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.Fatigue?.GetHashCode());
            ret = ret.CombineHashCode(this.BarterGold?.GetHashCode());
            ret = ret.CombineHashCode(this.LevelOffset?.GetHashCode());
            ret = ret.CombineHashCode(this.CalcMin?.GetHashCode());
            ret = ret.CombineHashCode(this.CalcMax?.GetHashCode());
            ret = ret.CombineHashCode(this.Factions?.GetHashCode());
            ret = ret.CombineHashCode(this.DeathItem?.GetHashCode());
            ret = ret.CombineHashCode(this.Race?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            ret = ret.CombineHashCode(this.Aggression?.GetHashCode());
            ret = ret.CombineHashCode(this.Confidence?.GetHashCode());
            ret = ret.CombineHashCode(this.EnergyLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Responsibility?.GetHashCode());
            ret = ret.CombineHashCode(this.BuySellServices?.GetHashCode());
            ret = ret.CombineHashCode(this.Teaches?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumTrainingLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.AIPackages?.GetHashCode());
            ret = ret.CombineHashCode(this.Animations?.GetHashCode());
            ret = ret.CombineHashCode(this.Class?.GetHashCode());
            ret = ret.CombineHashCode(this.Armorer?.GetHashCode());
            ret = ret.CombineHashCode(this.Athletics?.GetHashCode());
            ret = ret.CombineHashCode(this.Blade?.GetHashCode());
            ret = ret.CombineHashCode(this.Block?.GetHashCode());
            ret = ret.CombineHashCode(this.Blunt?.GetHashCode());
            ret = ret.CombineHashCode(this.HandToHand?.GetHashCode());
            ret = ret.CombineHashCode(this.HeavyArmor?.GetHashCode());
            ret = ret.CombineHashCode(this.Alchemy?.GetHashCode());
            ret = ret.CombineHashCode(this.Alteration?.GetHashCode());
            ret = ret.CombineHashCode(this.Conjuration?.GetHashCode());
            ret = ret.CombineHashCode(this.Destruction?.GetHashCode());
            ret = ret.CombineHashCode(this.Illusion?.GetHashCode());
            ret = ret.CombineHashCode(this.Mysticism?.GetHashCode());
            ret = ret.CombineHashCode(this.Restoration?.GetHashCode());
            ret = ret.CombineHashCode(this.Acrobatics?.GetHashCode());
            ret = ret.CombineHashCode(this.LightArmor?.GetHashCode());
            ret = ret.CombineHashCode(this.Marksman?.GetHashCode());
            ret = ret.CombineHashCode(this.Mercantile?.GetHashCode());
            ret = ret.CombineHashCode(this.Security?.GetHashCode());
            ret = ret.CombineHashCode(this.Sneak?.GetHashCode());
            ret = ret.CombineHashCode(this.Speechcraft?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.Strength?.GetHashCode());
            ret = ret.CombineHashCode(this.Intelligence?.GetHashCode());
            ret = ret.CombineHashCode(this.Willpower?.GetHashCode());
            ret = ret.CombineHashCode(this.Agility?.GetHashCode());
            ret = ret.CombineHashCode(this.Speed?.GetHashCode());
            ret = ret.CombineHashCode(this.Endurance?.GetHashCode());
            ret = ret.CombineHashCode(this.Personality?.GetHashCode());
            ret = ret.CombineHashCode(this.Luck?.GetHashCode());
            ret = ret.CombineHashCode(this.Hair?.GetHashCode());
            ret = ret.CombineHashCode(this.HairLength?.GetHashCode());
            ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
            ret = ret.CombineHashCode(this.HairColor?.GetHashCode());
            ret = ret.CombineHashCode(this.CombatStyle?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenGeometrySymmetric?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenGeometryAsymmetric?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenTextureSymmetric?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.NPCFlags)) return false;
            if (!eval(this.BaseSpellPoints)) return false;
            if (!eval(this.Fatigue)) return false;
            if (!eval(this.BarterGold)) return false;
            if (!eval(this.LevelOffset)) return false;
            if (!eval(this.CalcMin)) return false;
            if (!eval(this.CalcMax)) return false;
            if (this.Factions != null)
            {
                if (!eval(this.Factions.Overall)) return false;
                if (this.Factions.Specific != null)
                {
                    foreach (var item in this.Factions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.DeathItem)) return false;
            if (!eval(this.Race)) return false;
            if (this.Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (this.Spells.Specific != null)
                {
                    foreach (var item in this.Spells.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.Script)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Aggression)) return false;
            if (!eval(this.Confidence)) return false;
            if (!eval(this.EnergyLevel)) return false;
            if (!eval(this.Responsibility)) return false;
            if (!eval(this.BuySellServices)) return false;
            if (!eval(this.Teaches)) return false;
            if (!eval(this.MaximumTrainingLevel)) return false;
            if (!eval(this.Fluff)) return false;
            if (this.AIPackages != null)
            {
                if (!eval(this.AIPackages.Overall)) return false;
                if (this.AIPackages.Specific != null)
                {
                    foreach (var item in this.AIPackages.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (this.Animations != null)
            {
                if (!eval(this.Animations.Overall)) return false;
                if (this.Animations.Specific != null)
                {
                    foreach (var item in this.Animations.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.Class)) return false;
            if (!eval(this.Armorer)) return false;
            if (!eval(this.Athletics)) return false;
            if (!eval(this.Blade)) return false;
            if (!eval(this.Block)) return false;
            if (!eval(this.Blunt)) return false;
            if (!eval(this.HandToHand)) return false;
            if (!eval(this.HeavyArmor)) return false;
            if (!eval(this.Alchemy)) return false;
            if (!eval(this.Alteration)) return false;
            if (!eval(this.Conjuration)) return false;
            if (!eval(this.Destruction)) return false;
            if (!eval(this.Illusion)) return false;
            if (!eval(this.Mysticism)) return false;
            if (!eval(this.Restoration)) return false;
            if (!eval(this.Acrobatics)) return false;
            if (!eval(this.LightArmor)) return false;
            if (!eval(this.Marksman)) return false;
            if (!eval(this.Mercantile)) return false;
            if (!eval(this.Security)) return false;
            if (!eval(this.Sneak)) return false;
            if (!eval(this.Speechcraft)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.Strength)) return false;
            if (!eval(this.Intelligence)) return false;
            if (!eval(this.Willpower)) return false;
            if (!eval(this.Agility)) return false;
            if (!eval(this.Speed)) return false;
            if (!eval(this.Endurance)) return false;
            if (!eval(this.Personality)) return false;
            if (!eval(this.Luck)) return false;
            if (!eval(this.Hair)) return false;
            if (!eval(this.HairLength)) return false;
            if (this.Eyes != null)
            {
                if (!eval(this.Eyes.Overall)) return false;
                if (this.Eyes.Specific != null)
                {
                    foreach (var item in this.Eyes.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (!eval(this.HairColor)) return false;
            if (!eval(this.CombatStyle)) return false;
            if (!eval(this.FaceGenGeometrySymmetric)) return false;
            if (!eval(this.FaceGenGeometryAsymmetric)) return false;
            if (!eval(this.FaceGenTextureSymmetric)) return false;
            if (!eval(this.Unknown)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new NPC_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new NPC_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(NPC_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.NPCFlags = eval(this.NPCFlags);
            obj.BaseSpellPoints = eval(this.BaseSpellPoints);
            obj.Fatigue = eval(this.Fatigue);
            obj.BarterGold = eval(this.BarterGold);
            obj.LevelOffset = eval(this.LevelOffset);
            obj.CalcMin = eval(this.CalcMin);
            obj.CalcMax = eval(this.CalcMax);
            if (Factions != null)
            {
                obj.Factions = new MaskItem<R, IEnumerable<MaskItem<R, RankPlacement_Mask<R>>>>();
                obj.Factions.Overall = eval(this.Factions.Overall);
                if (Factions.Specific != null)
                {
                    List<MaskItem<R, RankPlacement_Mask<R>>> l = new List<MaskItem<R, RankPlacement_Mask<R>>>();
                    obj.Factions.Specific = l;
                    foreach (var item in Factions.Specific)
                    {
                        MaskItem<R, RankPlacement_Mask<R>> mask = default(MaskItem<R, RankPlacement_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, RankPlacement_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.DeathItem = eval(this.DeathItem);
            obj.Race = eval(this.Race);
            if (Spells != null)
            {
                obj.Spells = new MaskItem<R, IEnumerable<R>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (Spells.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Spells.Specific = l;
                    foreach (var item in Spells.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.Script = eval(this.Script);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItem<R, ItemEntry_Mask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItem<R, ItemEntry_Mask<R>>> l = new List<MaskItem<R, ItemEntry_Mask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific)
                    {
                        MaskItem<R, ItemEntry_Mask<R>> mask = default(MaskItem<R, ItemEntry_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ItemEntry_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Aggression = eval(this.Aggression);
            obj.Confidence = eval(this.Confidence);
            obj.EnergyLevel = eval(this.EnergyLevel);
            obj.Responsibility = eval(this.Responsibility);
            obj.BuySellServices = eval(this.BuySellServices);
            obj.Teaches = eval(this.Teaches);
            obj.MaximumTrainingLevel = eval(this.MaximumTrainingLevel);
            obj.Fluff = eval(this.Fluff);
            if (AIPackages != null)
            {
                obj.AIPackages = new MaskItem<R, IEnumerable<R>>();
                obj.AIPackages.Overall = eval(this.AIPackages.Overall);
                if (AIPackages.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.AIPackages.Specific = l;
                    foreach (var item in AIPackages.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (Animations != null)
            {
                obj.Animations = new MaskItem<R, IEnumerable<R>>();
                obj.Animations.Overall = eval(this.Animations.Overall);
                if (Animations.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Animations.Specific = l;
                    foreach (var item in Animations.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.Class = eval(this.Class);
            obj.Armorer = eval(this.Armorer);
            obj.Athletics = eval(this.Athletics);
            obj.Blade = eval(this.Blade);
            obj.Block = eval(this.Block);
            obj.Blunt = eval(this.Blunt);
            obj.HandToHand = eval(this.HandToHand);
            obj.HeavyArmor = eval(this.HeavyArmor);
            obj.Alchemy = eval(this.Alchemy);
            obj.Alteration = eval(this.Alteration);
            obj.Conjuration = eval(this.Conjuration);
            obj.Destruction = eval(this.Destruction);
            obj.Illusion = eval(this.Illusion);
            obj.Mysticism = eval(this.Mysticism);
            obj.Restoration = eval(this.Restoration);
            obj.Acrobatics = eval(this.Acrobatics);
            obj.LightArmor = eval(this.LightArmor);
            obj.Marksman = eval(this.Marksman);
            obj.Mercantile = eval(this.Mercantile);
            obj.Security = eval(this.Security);
            obj.Sneak = eval(this.Sneak);
            obj.Speechcraft = eval(this.Speechcraft);
            obj.Health = eval(this.Health);
            obj.Strength = eval(this.Strength);
            obj.Intelligence = eval(this.Intelligence);
            obj.Willpower = eval(this.Willpower);
            obj.Agility = eval(this.Agility);
            obj.Speed = eval(this.Speed);
            obj.Endurance = eval(this.Endurance);
            obj.Personality = eval(this.Personality);
            obj.Luck = eval(this.Luck);
            obj.Hair = eval(this.Hair);
            obj.HairLength = eval(this.HairLength);
            if (Eyes != null)
            {
                obj.Eyes = new MaskItem<R, IEnumerable<R>>();
                obj.Eyes.Overall = eval(this.Eyes.Overall);
                if (Eyes.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Eyes.Specific = l;
                    foreach (var item in Eyes.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            obj.HairColor = eval(this.HairColor);
            obj.CombatStyle = eval(this.CombatStyle);
            obj.FaceGenGeometrySymmetric = eval(this.FaceGenGeometrySymmetric);
            obj.FaceGenGeometryAsymmetric = eval(this.FaceGenGeometryAsymmetric);
            obj.FaceGenTextureSymmetric = eval(this.FaceGenTextureSymmetric);
            obj.Unknown = eval(this.Unknown);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Factions.Specific = null;
            this.Spells.Specific = null;
            this.Items.Specific = null;
            this.AIPackages.Specific = null;
            this.Animations.Specific = null;
            this.Eyes.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(NPC_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, NPC_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(NPC_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.NPCFlags ?? true)
                {
                    fg.AppendLine($"NPCFlags => {NPCFlags}");
                }
                if (printMask?.BaseSpellPoints ?? true)
                {
                    fg.AppendLine($"BaseSpellPoints => {BaseSpellPoints}");
                }
                if (printMask?.Fatigue ?? true)
                {
                    fg.AppendLine($"Fatigue => {Fatigue}");
                }
                if (printMask?.BarterGold ?? true)
                {
                    fg.AppendLine($"BarterGold => {BarterGold}");
                }
                if (printMask?.LevelOffset ?? true)
                {
                    fg.AppendLine($"LevelOffset => {LevelOffset}");
                }
                if (printMask?.CalcMin ?? true)
                {
                    fg.AppendLine($"CalcMin => {CalcMin}");
                }
                if (printMask?.CalcMax ?? true)
                {
                    fg.AppendLine($"CalcMax => {CalcMax}");
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Factions.Overall != null)
                        {
                            fg.AppendLine(Factions.Overall.ToString());
                        }
                        if (Factions.Specific != null)
                        {
                            foreach (var subItem in Factions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DeathItem ?? true)
                {
                    fg.AppendLine($"DeathItem => {DeathItem}");
                }
                if (printMask?.Race ?? true)
                {
                    fg.AppendLine($"Race => {Race}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Aggression ?? true)
                {
                    fg.AppendLine($"Aggression => {Aggression}");
                }
                if (printMask?.Confidence ?? true)
                {
                    fg.AppendLine($"Confidence => {Confidence}");
                }
                if (printMask?.EnergyLevel ?? true)
                {
                    fg.AppendLine($"EnergyLevel => {EnergyLevel}");
                }
                if (printMask?.Responsibility ?? true)
                {
                    fg.AppendLine($"Responsibility => {Responsibility}");
                }
                if (printMask?.BuySellServices ?? true)
                {
                    fg.AppendLine($"BuySellServices => {BuySellServices}");
                }
                if (printMask?.Teaches ?? true)
                {
                    fg.AppendLine($"Teaches => {Teaches}");
                }
                if (printMask?.MaximumTrainingLevel ?? true)
                {
                    fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.AIPackages?.Overall ?? true)
                {
                    fg.AppendLine("AIPackages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (AIPackages.Overall != null)
                        {
                            fg.AppendLine(AIPackages.Overall.ToString());
                        }
                        if (AIPackages.Specific != null)
                        {
                            foreach (var subItem in AIPackages.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Animations?.Overall ?? true)
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Animations.Overall != null)
                        {
                            fg.AppendLine(Animations.Overall.ToString());
                        }
                        if (Animations.Specific != null)
                        {
                            foreach (var subItem in Animations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Class ?? true)
                {
                    fg.AppendLine($"Class => {Class}");
                }
                if (printMask?.Armorer ?? true)
                {
                    fg.AppendLine($"Armorer => {Armorer}");
                }
                if (printMask?.Athletics ?? true)
                {
                    fg.AppendLine($"Athletics => {Athletics}");
                }
                if (printMask?.Blade ?? true)
                {
                    fg.AppendLine($"Blade => {Blade}");
                }
                if (printMask?.Block ?? true)
                {
                    fg.AppendLine($"Block => {Block}");
                }
                if (printMask?.Blunt ?? true)
                {
                    fg.AppendLine($"Blunt => {Blunt}");
                }
                if (printMask?.HandToHand ?? true)
                {
                    fg.AppendLine($"HandToHand => {HandToHand}");
                }
                if (printMask?.HeavyArmor ?? true)
                {
                    fg.AppendLine($"HeavyArmor => {HeavyArmor}");
                }
                if (printMask?.Alchemy ?? true)
                {
                    fg.AppendLine($"Alchemy => {Alchemy}");
                }
                if (printMask?.Alteration ?? true)
                {
                    fg.AppendLine($"Alteration => {Alteration}");
                }
                if (printMask?.Conjuration ?? true)
                {
                    fg.AppendLine($"Conjuration => {Conjuration}");
                }
                if (printMask?.Destruction ?? true)
                {
                    fg.AppendLine($"Destruction => {Destruction}");
                }
                if (printMask?.Illusion ?? true)
                {
                    fg.AppendLine($"Illusion => {Illusion}");
                }
                if (printMask?.Mysticism ?? true)
                {
                    fg.AppendLine($"Mysticism => {Mysticism}");
                }
                if (printMask?.Restoration ?? true)
                {
                    fg.AppendLine($"Restoration => {Restoration}");
                }
                if (printMask?.Acrobatics ?? true)
                {
                    fg.AppendLine($"Acrobatics => {Acrobatics}");
                }
                if (printMask?.LightArmor ?? true)
                {
                    fg.AppendLine($"LightArmor => {LightArmor}");
                }
                if (printMask?.Marksman ?? true)
                {
                    fg.AppendLine($"Marksman => {Marksman}");
                }
                if (printMask?.Mercantile ?? true)
                {
                    fg.AppendLine($"Mercantile => {Mercantile}");
                }
                if (printMask?.Security ?? true)
                {
                    fg.AppendLine($"Security => {Security}");
                }
                if (printMask?.Sneak ?? true)
                {
                    fg.AppendLine($"Sneak => {Sneak}");
                }
                if (printMask?.Speechcraft ?? true)
                {
                    fg.AppendLine($"Speechcraft => {Speechcraft}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {Luck}");
                }
                if (printMask?.Hair ?? true)
                {
                    fg.AppendLine($"Hair => {Hair}");
                }
                if (printMask?.HairLength ?? true)
                {
                    fg.AppendLine($"HairLength => {HairLength}");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Eyes.Overall != null)
                        {
                            fg.AppendLine(Eyes.Overall.ToString());
                        }
                        if (Eyes.Specific != null)
                        {
                            foreach (var subItem in Eyes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.HairColor ?? true)
                {
                    fg.AppendLine($"HairColor => {HairColor}");
                }
                if (printMask?.CombatStyle ?? true)
                {
                    fg.AppendLine($"CombatStyle => {CombatStyle}");
                }
                if (printMask?.FaceGenGeometrySymmetric ?? true)
                {
                    fg.AppendLine($"FaceGenGeometrySymmetric => {FaceGenGeometrySymmetric}");
                }
                if (printMask?.FaceGenGeometryAsymmetric ?? true)
                {
                    fg.AppendLine($"FaceGenGeometryAsymmetric => {FaceGenGeometryAsymmetric}");
                }
                if (printMask?.FaceGenTextureSymmetric ?? true)
                {
                    fg.AppendLine($"FaceGenTextureSymmetric => {FaceGenTextureSymmetric}");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class NPC_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<NPC_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception NPCFlags;
        public Exception BaseSpellPoints;
        public Exception Fatigue;
        public Exception BarterGold;
        public Exception LevelOffset;
        public Exception CalcMin;
        public Exception CalcMax;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>> Factions;
        public Exception DeathItem;
        public Exception Race;
        public MaskItem<Exception, IEnumerable<Exception>> Spells;
        public Exception Script;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>> Items;
        public Exception Aggression;
        public Exception Confidence;
        public Exception EnergyLevel;
        public Exception Responsibility;
        public Exception BuySellServices;
        public Exception Teaches;
        public Exception MaximumTrainingLevel;
        public Exception Fluff;
        public MaskItem<Exception, IEnumerable<Exception>> AIPackages;
        public MaskItem<Exception, IEnumerable<Exception>> Animations;
        public Exception Class;
        public Exception Armorer;
        public Exception Athletics;
        public Exception Blade;
        public Exception Block;
        public Exception Blunt;
        public Exception HandToHand;
        public Exception HeavyArmor;
        public Exception Alchemy;
        public Exception Alteration;
        public Exception Conjuration;
        public Exception Destruction;
        public Exception Illusion;
        public Exception Mysticism;
        public Exception Restoration;
        public Exception Acrobatics;
        public Exception LightArmor;
        public Exception Marksman;
        public Exception Mercantile;
        public Exception Security;
        public Exception Sneak;
        public Exception Speechcraft;
        public Exception Health;
        public Exception Strength;
        public Exception Intelligence;
        public Exception Willpower;
        public Exception Agility;
        public Exception Speed;
        public Exception Endurance;
        public Exception Personality;
        public Exception Luck;
        public Exception Hair;
        public Exception HairLength;
        public MaskItem<Exception, IEnumerable<Exception>> Eyes;
        public Exception HairColor;
        public Exception CombatStyle;
        public Exception FaceGenGeometrySymmetric;
        public Exception FaceGenGeometryAsymmetric;
        public Exception FaceGenTextureSymmetric;
        public Exception Unknown;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case NPC_FieldIndex.NPCFlags:
                    this.NPCFlags = ex;
                    break;
                case NPC_FieldIndex.BaseSpellPoints:
                    this.BaseSpellPoints = ex;
                    break;
                case NPC_FieldIndex.Fatigue:
                    this.Fatigue = ex;
                    break;
                case NPC_FieldIndex.BarterGold:
                    this.BarterGold = ex;
                    break;
                case NPC_FieldIndex.LevelOffset:
                    this.LevelOffset = ex;
                    break;
                case NPC_FieldIndex.CalcMin:
                    this.CalcMin = ex;
                    break;
                case NPC_FieldIndex.CalcMax:
                    this.CalcMax = ex;
                    break;
                case NPC_FieldIndex.Factions:
                    this.Factions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>(ex, null);
                    break;
                case NPC_FieldIndex.DeathItem:
                    this.DeathItem = ex;
                    break;
                case NPC_FieldIndex.Race:
                    this.Race = ex;
                    break;
                case NPC_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case NPC_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case NPC_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>(ex, null);
                    break;
                case NPC_FieldIndex.Aggression:
                    this.Aggression = ex;
                    break;
                case NPC_FieldIndex.Confidence:
                    this.Confidence = ex;
                    break;
                case NPC_FieldIndex.EnergyLevel:
                    this.EnergyLevel = ex;
                    break;
                case NPC_FieldIndex.Responsibility:
                    this.Responsibility = ex;
                    break;
                case NPC_FieldIndex.BuySellServices:
                    this.BuySellServices = ex;
                    break;
                case NPC_FieldIndex.Teaches:
                    this.Teaches = ex;
                    break;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = ex;
                    break;
                case NPC_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case NPC_FieldIndex.AIPackages:
                    this.AIPackages = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case NPC_FieldIndex.Animations:
                    this.Animations = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case NPC_FieldIndex.Class:
                    this.Class = ex;
                    break;
                case NPC_FieldIndex.Armorer:
                    this.Armorer = ex;
                    break;
                case NPC_FieldIndex.Athletics:
                    this.Athletics = ex;
                    break;
                case NPC_FieldIndex.Blade:
                    this.Blade = ex;
                    break;
                case NPC_FieldIndex.Block:
                    this.Block = ex;
                    break;
                case NPC_FieldIndex.Blunt:
                    this.Blunt = ex;
                    break;
                case NPC_FieldIndex.HandToHand:
                    this.HandToHand = ex;
                    break;
                case NPC_FieldIndex.HeavyArmor:
                    this.HeavyArmor = ex;
                    break;
                case NPC_FieldIndex.Alchemy:
                    this.Alchemy = ex;
                    break;
                case NPC_FieldIndex.Alteration:
                    this.Alteration = ex;
                    break;
                case NPC_FieldIndex.Conjuration:
                    this.Conjuration = ex;
                    break;
                case NPC_FieldIndex.Destruction:
                    this.Destruction = ex;
                    break;
                case NPC_FieldIndex.Illusion:
                    this.Illusion = ex;
                    break;
                case NPC_FieldIndex.Mysticism:
                    this.Mysticism = ex;
                    break;
                case NPC_FieldIndex.Restoration:
                    this.Restoration = ex;
                    break;
                case NPC_FieldIndex.Acrobatics:
                    this.Acrobatics = ex;
                    break;
                case NPC_FieldIndex.LightArmor:
                    this.LightArmor = ex;
                    break;
                case NPC_FieldIndex.Marksman:
                    this.Marksman = ex;
                    break;
                case NPC_FieldIndex.Mercantile:
                    this.Mercantile = ex;
                    break;
                case NPC_FieldIndex.Security:
                    this.Security = ex;
                    break;
                case NPC_FieldIndex.Sneak:
                    this.Sneak = ex;
                    break;
                case NPC_FieldIndex.Speechcraft:
                    this.Speechcraft = ex;
                    break;
                case NPC_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case NPC_FieldIndex.Strength:
                    this.Strength = ex;
                    break;
                case NPC_FieldIndex.Intelligence:
                    this.Intelligence = ex;
                    break;
                case NPC_FieldIndex.Willpower:
                    this.Willpower = ex;
                    break;
                case NPC_FieldIndex.Agility:
                    this.Agility = ex;
                    break;
                case NPC_FieldIndex.Speed:
                    this.Speed = ex;
                    break;
                case NPC_FieldIndex.Endurance:
                    this.Endurance = ex;
                    break;
                case NPC_FieldIndex.Personality:
                    this.Personality = ex;
                    break;
                case NPC_FieldIndex.Luck:
                    this.Luck = ex;
                    break;
                case NPC_FieldIndex.Hair:
                    this.Hair = ex;
                    break;
                case NPC_FieldIndex.HairLength:
                    this.HairLength = ex;
                    break;
                case NPC_FieldIndex.Eyes:
                    this.Eyes = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case NPC_FieldIndex.HairColor:
                    this.HairColor = ex;
                    break;
                case NPC_FieldIndex.CombatStyle:
                    this.CombatStyle = ex;
                    break;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    this.FaceGenGeometrySymmetric = ex;
                    break;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    this.FaceGenGeometryAsymmetric = ex;
                    break;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    this.FaceGenTextureSymmetric = ex;
                    break;
                case NPC_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case NPC_FieldIndex.NPCFlags:
                    this.NPCFlags = (Exception)obj;
                    break;
                case NPC_FieldIndex.BaseSpellPoints:
                    this.BaseSpellPoints = (Exception)obj;
                    break;
                case NPC_FieldIndex.Fatigue:
                    this.Fatigue = (Exception)obj;
                    break;
                case NPC_FieldIndex.BarterGold:
                    this.BarterGold = (Exception)obj;
                    break;
                case NPC_FieldIndex.LevelOffset:
                    this.LevelOffset = (Exception)obj;
                    break;
                case NPC_FieldIndex.CalcMin:
                    this.CalcMin = (Exception)obj;
                    break;
                case NPC_FieldIndex.CalcMax:
                    this.CalcMax = (Exception)obj;
                    break;
                case NPC_FieldIndex.Factions:
                    this.Factions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>)obj;
                    break;
                case NPC_FieldIndex.DeathItem:
                    this.DeathItem = (Exception)obj;
                    break;
                case NPC_FieldIndex.Race:
                    this.Race = (Exception)obj;
                    break;
                case NPC_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case NPC_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case NPC_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>)obj;
                    break;
                case NPC_FieldIndex.Aggression:
                    this.Aggression = (Exception)obj;
                    break;
                case NPC_FieldIndex.Confidence:
                    this.Confidence = (Exception)obj;
                    break;
                case NPC_FieldIndex.EnergyLevel:
                    this.EnergyLevel = (Exception)obj;
                    break;
                case NPC_FieldIndex.Responsibility:
                    this.Responsibility = (Exception)obj;
                    break;
                case NPC_FieldIndex.BuySellServices:
                    this.BuySellServices = (Exception)obj;
                    break;
                case NPC_FieldIndex.Teaches:
                    this.Teaches = (Exception)obj;
                    break;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = (Exception)obj;
                    break;
                case NPC_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case NPC_FieldIndex.AIPackages:
                    this.AIPackages = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case NPC_FieldIndex.Animations:
                    this.Animations = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case NPC_FieldIndex.Class:
                    this.Class = (Exception)obj;
                    break;
                case NPC_FieldIndex.Armorer:
                    this.Armorer = (Exception)obj;
                    break;
                case NPC_FieldIndex.Athletics:
                    this.Athletics = (Exception)obj;
                    break;
                case NPC_FieldIndex.Blade:
                    this.Blade = (Exception)obj;
                    break;
                case NPC_FieldIndex.Block:
                    this.Block = (Exception)obj;
                    break;
                case NPC_FieldIndex.Blunt:
                    this.Blunt = (Exception)obj;
                    break;
                case NPC_FieldIndex.HandToHand:
                    this.HandToHand = (Exception)obj;
                    break;
                case NPC_FieldIndex.HeavyArmor:
                    this.HeavyArmor = (Exception)obj;
                    break;
                case NPC_FieldIndex.Alchemy:
                    this.Alchemy = (Exception)obj;
                    break;
                case NPC_FieldIndex.Alteration:
                    this.Alteration = (Exception)obj;
                    break;
                case NPC_FieldIndex.Conjuration:
                    this.Conjuration = (Exception)obj;
                    break;
                case NPC_FieldIndex.Destruction:
                    this.Destruction = (Exception)obj;
                    break;
                case NPC_FieldIndex.Illusion:
                    this.Illusion = (Exception)obj;
                    break;
                case NPC_FieldIndex.Mysticism:
                    this.Mysticism = (Exception)obj;
                    break;
                case NPC_FieldIndex.Restoration:
                    this.Restoration = (Exception)obj;
                    break;
                case NPC_FieldIndex.Acrobatics:
                    this.Acrobatics = (Exception)obj;
                    break;
                case NPC_FieldIndex.LightArmor:
                    this.LightArmor = (Exception)obj;
                    break;
                case NPC_FieldIndex.Marksman:
                    this.Marksman = (Exception)obj;
                    break;
                case NPC_FieldIndex.Mercantile:
                    this.Mercantile = (Exception)obj;
                    break;
                case NPC_FieldIndex.Security:
                    this.Security = (Exception)obj;
                    break;
                case NPC_FieldIndex.Sneak:
                    this.Sneak = (Exception)obj;
                    break;
                case NPC_FieldIndex.Speechcraft:
                    this.Speechcraft = (Exception)obj;
                    break;
                case NPC_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case NPC_FieldIndex.Strength:
                    this.Strength = (Exception)obj;
                    break;
                case NPC_FieldIndex.Intelligence:
                    this.Intelligence = (Exception)obj;
                    break;
                case NPC_FieldIndex.Willpower:
                    this.Willpower = (Exception)obj;
                    break;
                case NPC_FieldIndex.Agility:
                    this.Agility = (Exception)obj;
                    break;
                case NPC_FieldIndex.Speed:
                    this.Speed = (Exception)obj;
                    break;
                case NPC_FieldIndex.Endurance:
                    this.Endurance = (Exception)obj;
                    break;
                case NPC_FieldIndex.Personality:
                    this.Personality = (Exception)obj;
                    break;
                case NPC_FieldIndex.Luck:
                    this.Luck = (Exception)obj;
                    break;
                case NPC_FieldIndex.Hair:
                    this.Hair = (Exception)obj;
                    break;
                case NPC_FieldIndex.HairLength:
                    this.HairLength = (Exception)obj;
                    break;
                case NPC_FieldIndex.Eyes:
                    this.Eyes = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case NPC_FieldIndex.HairColor:
                    this.HairColor = (Exception)obj;
                    break;
                case NPC_FieldIndex.CombatStyle:
                    this.CombatStyle = (Exception)obj;
                    break;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    this.FaceGenGeometrySymmetric = (Exception)obj;
                    break;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    this.FaceGenGeometryAsymmetric = (Exception)obj;
                    break;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    this.FaceGenTextureSymmetric = (Exception)obj;
                    break;
                case NPC_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Model != null) return true;
            if (NPCFlags != null) return true;
            if (BaseSpellPoints != null) return true;
            if (Fatigue != null) return true;
            if (BarterGold != null) return true;
            if (LevelOffset != null) return true;
            if (CalcMin != null) return true;
            if (CalcMax != null) return true;
            if (Factions != null) return true;
            if (DeathItem != null) return true;
            if (Race != null) return true;
            if (Spells != null) return true;
            if (Script != null) return true;
            if (Items != null) return true;
            if (Aggression != null) return true;
            if (Confidence != null) return true;
            if (EnergyLevel != null) return true;
            if (Responsibility != null) return true;
            if (BuySellServices != null) return true;
            if (Teaches != null) return true;
            if (MaximumTrainingLevel != null) return true;
            if (Fluff != null) return true;
            if (AIPackages != null) return true;
            if (Animations != null) return true;
            if (Class != null) return true;
            if (Armorer != null) return true;
            if (Athletics != null) return true;
            if (Blade != null) return true;
            if (Block != null) return true;
            if (Blunt != null) return true;
            if (HandToHand != null) return true;
            if (HeavyArmor != null) return true;
            if (Alchemy != null) return true;
            if (Alteration != null) return true;
            if (Conjuration != null) return true;
            if (Destruction != null) return true;
            if (Illusion != null) return true;
            if (Mysticism != null) return true;
            if (Restoration != null) return true;
            if (Acrobatics != null) return true;
            if (LightArmor != null) return true;
            if (Marksman != null) return true;
            if (Mercantile != null) return true;
            if (Security != null) return true;
            if (Sneak != null) return true;
            if (Speechcraft != null) return true;
            if (Health != null) return true;
            if (Strength != null) return true;
            if (Intelligence != null) return true;
            if (Willpower != null) return true;
            if (Agility != null) return true;
            if (Speed != null) return true;
            if (Endurance != null) return true;
            if (Personality != null) return true;
            if (Luck != null) return true;
            if (Hair != null) return true;
            if (HairLength != null) return true;
            if (Eyes != null) return true;
            if (HairColor != null) return true;
            if (CombatStyle != null) return true;
            if (FaceGenGeometrySymmetric != null) return true;
            if (FaceGenGeometryAsymmetric != null) return true;
            if (FaceGenTextureSymmetric != null) return true;
            if (Unknown != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("NPC_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Model?.ToString(fg);
            fg.AppendLine($"NPCFlags => {NPCFlags}");
            fg.AppendLine($"BaseSpellPoints => {BaseSpellPoints}");
            fg.AppendLine($"Fatigue => {Fatigue}");
            fg.AppendLine($"BarterGold => {BarterGold}");
            fg.AppendLine($"LevelOffset => {LevelOffset}");
            fg.AppendLine($"CalcMin => {CalcMin}");
            fg.AppendLine($"CalcMax => {CalcMax}");
            fg.AppendLine("Factions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Factions.Overall != null)
                {
                    fg.AppendLine(Factions.Overall.ToString());
                }
                if (Factions.Specific != null)
                {
                    foreach (var subItem in Factions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"DeathItem => {DeathItem}");
            fg.AppendLine($"Race => {Race}");
            fg.AppendLine("Spells =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Spells.Overall != null)
                {
                    fg.AppendLine(Spells.Overall.ToString());
                }
                if (Spells.Specific != null)
                {
                    foreach (var subItem in Spells.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Aggression => {Aggression}");
            fg.AppendLine($"Confidence => {Confidence}");
            fg.AppendLine($"EnergyLevel => {EnergyLevel}");
            fg.AppendLine($"Responsibility => {Responsibility}");
            fg.AppendLine($"BuySellServices => {BuySellServices}");
            fg.AppendLine($"Teaches => {Teaches}");
            fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine("AIPackages =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (AIPackages.Overall != null)
                {
                    fg.AppendLine(AIPackages.Overall.ToString());
                }
                if (AIPackages.Specific != null)
                {
                    foreach (var subItem in AIPackages.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Animations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Animations.Overall != null)
                {
                    fg.AppendLine(Animations.Overall.ToString());
                }
                if (Animations.Specific != null)
                {
                    foreach (var subItem in Animations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Class => {Class}");
            fg.AppendLine($"Armorer => {Armorer}");
            fg.AppendLine($"Athletics => {Athletics}");
            fg.AppendLine($"Blade => {Blade}");
            fg.AppendLine($"Block => {Block}");
            fg.AppendLine($"Blunt => {Blunt}");
            fg.AppendLine($"HandToHand => {HandToHand}");
            fg.AppendLine($"HeavyArmor => {HeavyArmor}");
            fg.AppendLine($"Alchemy => {Alchemy}");
            fg.AppendLine($"Alteration => {Alteration}");
            fg.AppendLine($"Conjuration => {Conjuration}");
            fg.AppendLine($"Destruction => {Destruction}");
            fg.AppendLine($"Illusion => {Illusion}");
            fg.AppendLine($"Mysticism => {Mysticism}");
            fg.AppendLine($"Restoration => {Restoration}");
            fg.AppendLine($"Acrobatics => {Acrobatics}");
            fg.AppendLine($"LightArmor => {LightArmor}");
            fg.AppendLine($"Marksman => {Marksman}");
            fg.AppendLine($"Mercantile => {Mercantile}");
            fg.AppendLine($"Security => {Security}");
            fg.AppendLine($"Sneak => {Sneak}");
            fg.AppendLine($"Speechcraft => {Speechcraft}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"Strength => {Strength}");
            fg.AppendLine($"Intelligence => {Intelligence}");
            fg.AppendLine($"Willpower => {Willpower}");
            fg.AppendLine($"Agility => {Agility}");
            fg.AppendLine($"Speed => {Speed}");
            fg.AppendLine($"Endurance => {Endurance}");
            fg.AppendLine($"Personality => {Personality}");
            fg.AppendLine($"Luck => {Luck}");
            fg.AppendLine($"Hair => {Hair}");
            fg.AppendLine($"HairLength => {HairLength}");
            fg.AppendLine("Eyes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Eyes.Overall != null)
                {
                    fg.AppendLine(Eyes.Overall.ToString());
                }
                if (Eyes.Specific != null)
                {
                    foreach (var subItem in Eyes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"HairColor => {HairColor}");
            fg.AppendLine($"CombatStyle => {CombatStyle}");
            fg.AppendLine($"FaceGenGeometrySymmetric => {FaceGenGeometrySymmetric}");
            fg.AppendLine($"FaceGenGeometryAsymmetric => {FaceGenGeometryAsymmetric}");
            fg.AppendLine($"FaceGenTextureSymmetric => {FaceGenTextureSymmetric}");
            fg.AppendLine($"Unknown => {Unknown}");
        }
        #endregion

        #region Combine
        public NPC_ErrorMask Combine(NPC_ErrorMask rhs)
        {
            var ret = new NPC_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.NPCFlags = this.NPCFlags.Combine(rhs.NPCFlags);
            ret.BaseSpellPoints = this.BaseSpellPoints.Combine(rhs.BaseSpellPoints);
            ret.Fatigue = this.Fatigue.Combine(rhs.Fatigue);
            ret.BarterGold = this.BarterGold.Combine(rhs.BarterGold);
            ret.LevelOffset = this.LevelOffset.Combine(rhs.LevelOffset);
            ret.CalcMin = this.CalcMin.Combine(rhs.CalcMin);
            ret.CalcMax = this.CalcMax.Combine(rhs.CalcMax);
            ret.Factions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>(this.Factions.Overall.Combine(rhs.Factions.Overall), new List<MaskItem<Exception, RankPlacement_ErrorMask>>(this.Factions.Specific.And(rhs.Factions.Specific)));
            ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
            ret.Race = this.Race.Combine(rhs.Race);
            ret.Spells = new MaskItem<Exception, IEnumerable<Exception>>(this.Spells.Overall.Combine(rhs.Spells.Overall), new List<Exception>(this.Spells.Specific.And(rhs.Spells.Specific)));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, ItemEntry_ErrorMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            ret.Aggression = this.Aggression.Combine(rhs.Aggression);
            ret.Confidence = this.Confidence.Combine(rhs.Confidence);
            ret.EnergyLevel = this.EnergyLevel.Combine(rhs.EnergyLevel);
            ret.Responsibility = this.Responsibility.Combine(rhs.Responsibility);
            ret.BuySellServices = this.BuySellServices.Combine(rhs.BuySellServices);
            ret.Teaches = this.Teaches.Combine(rhs.Teaches);
            ret.MaximumTrainingLevel = this.MaximumTrainingLevel.Combine(rhs.MaximumTrainingLevel);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.AIPackages = new MaskItem<Exception, IEnumerable<Exception>>(this.AIPackages.Overall.Combine(rhs.AIPackages.Overall), new List<Exception>(this.AIPackages.Specific.And(rhs.AIPackages.Specific)));
            ret.Animations = new MaskItem<Exception, IEnumerable<Exception>>(this.Animations.Overall.Combine(rhs.Animations.Overall), new List<Exception>(this.Animations.Specific.And(rhs.Animations.Specific)));
            ret.Class = this.Class.Combine(rhs.Class);
            ret.Armorer = this.Armorer.Combine(rhs.Armorer);
            ret.Athletics = this.Athletics.Combine(rhs.Athletics);
            ret.Blade = this.Blade.Combine(rhs.Blade);
            ret.Block = this.Block.Combine(rhs.Block);
            ret.Blunt = this.Blunt.Combine(rhs.Blunt);
            ret.HandToHand = this.HandToHand.Combine(rhs.HandToHand);
            ret.HeavyArmor = this.HeavyArmor.Combine(rhs.HeavyArmor);
            ret.Alchemy = this.Alchemy.Combine(rhs.Alchemy);
            ret.Alteration = this.Alteration.Combine(rhs.Alteration);
            ret.Conjuration = this.Conjuration.Combine(rhs.Conjuration);
            ret.Destruction = this.Destruction.Combine(rhs.Destruction);
            ret.Illusion = this.Illusion.Combine(rhs.Illusion);
            ret.Mysticism = this.Mysticism.Combine(rhs.Mysticism);
            ret.Restoration = this.Restoration.Combine(rhs.Restoration);
            ret.Acrobatics = this.Acrobatics.Combine(rhs.Acrobatics);
            ret.LightArmor = this.LightArmor.Combine(rhs.LightArmor);
            ret.Marksman = this.Marksman.Combine(rhs.Marksman);
            ret.Mercantile = this.Mercantile.Combine(rhs.Mercantile);
            ret.Security = this.Security.Combine(rhs.Security);
            ret.Sneak = this.Sneak.Combine(rhs.Sneak);
            ret.Speechcraft = this.Speechcraft.Combine(rhs.Speechcraft);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.Strength = this.Strength.Combine(rhs.Strength);
            ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
            ret.Willpower = this.Willpower.Combine(rhs.Willpower);
            ret.Agility = this.Agility.Combine(rhs.Agility);
            ret.Speed = this.Speed.Combine(rhs.Speed);
            ret.Endurance = this.Endurance.Combine(rhs.Endurance);
            ret.Personality = this.Personality.Combine(rhs.Personality);
            ret.Luck = this.Luck.Combine(rhs.Luck);
            ret.Hair = this.Hair.Combine(rhs.Hair);
            ret.HairLength = this.HairLength.Combine(rhs.HairLength);
            ret.Eyes = new MaskItem<Exception, IEnumerable<Exception>>(this.Eyes.Overall.Combine(rhs.Eyes.Overall), new List<Exception>(this.Eyes.Specific.And(rhs.Eyes.Specific)));
            ret.HairColor = this.HairColor.Combine(rhs.HairColor);
            ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
            ret.FaceGenGeometrySymmetric = this.FaceGenGeometrySymmetric.Combine(rhs.FaceGenGeometrySymmetric);
            ret.FaceGenGeometryAsymmetric = this.FaceGenGeometryAsymmetric.Combine(rhs.FaceGenGeometryAsymmetric);
            ret.FaceGenTextureSymmetric = this.FaceGenTextureSymmetric.Combine(rhs.FaceGenTextureSymmetric);
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            return ret;
        }
        public static NPC_ErrorMask Combine(NPC_ErrorMask lhs, NPC_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class NPC_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool NPCFlags;
        public bool BaseSpellPoints;
        public bool Fatigue;
        public bool BarterGold;
        public bool LevelOffset;
        public bool CalcMin;
        public bool CalcMax;
        public MaskItem<CopyOption, RankPlacement_CopyMask> Factions;
        public bool DeathItem;
        public bool Race;
        public CopyOption Spells;
        public bool Script;
        public MaskItem<CopyOption, ItemEntry_CopyMask> Items;
        public bool Aggression;
        public bool Confidence;
        public bool EnergyLevel;
        public bool Responsibility;
        public bool BuySellServices;
        public bool Teaches;
        public bool MaximumTrainingLevel;
        public bool Fluff;
        public CopyOption AIPackages;
        public CopyOption Animations;
        public bool Class;
        public bool Armorer;
        public bool Athletics;
        public bool Blade;
        public bool Block;
        public bool Blunt;
        public bool HandToHand;
        public bool HeavyArmor;
        public bool Alchemy;
        public bool Alteration;
        public bool Conjuration;
        public bool Destruction;
        public bool Illusion;
        public bool Mysticism;
        public bool Restoration;
        public bool Acrobatics;
        public bool LightArmor;
        public bool Marksman;
        public bool Mercantile;
        public bool Security;
        public bool Sneak;
        public bool Speechcraft;
        public bool Health;
        public bool Strength;
        public bool Intelligence;
        public bool Willpower;
        public bool Agility;
        public bool Speed;
        public bool Endurance;
        public bool Personality;
        public bool Luck;
        public bool Hair;
        public bool HairLength;
        public CopyOption Eyes;
        public bool HairColor;
        public bool CombatStyle;
        public bool FaceGenGeometrySymmetric;
        public bool FaceGenGeometryAsymmetric;
        public bool FaceGenTextureSymmetric;
        public bool Unknown;
        #endregion

    }
    #endregion




    #endregion

}
