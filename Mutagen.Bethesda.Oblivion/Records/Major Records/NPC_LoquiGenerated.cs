/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using System.Drawing;
using Loqui.Presentation;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class NPC :
        NPCAbstract,
        INPCInternal,
        ILoquiObjectSetter<NPC>,
        INamed,
        IOwner,
        ILinkSubContainer,
        IEquatable<NPC>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NPC_Registration.Instance;
        public new static NPC_Registration Registration => NPC_Registration.Instance;
        protected override object CommonInstance => NPCCommon.Instance;

        #region Ctor
        protected NPC()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)NPC_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)NPC_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool INPCGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String INPCGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)NPC_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)NPC_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)NPC_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool INPCGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, hasBeenSet, (int)NPC_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter INPCGetter.Model => this.Model;
        #endregion
        #region Flags
        private NPC.NPCFlag _Flags;
        public NPC.NPCFlag Flags
        {
            get => this._Flags;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region BaseSpellPoints
        private UInt16 _BaseSpellPoints;
        public UInt16 BaseSpellPoints
        {
            get => this._BaseSpellPoints;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BaseSpellPoints, value, nameof(BaseSpellPoints));
            }
        }
        #endregion
        #region Fatigue
        private UInt16 _Fatigue;
        public UInt16 Fatigue
        {
            get => this._Fatigue;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Fatigue, value, nameof(Fatigue));
            }
        }
        #endregion
        #region BarterGold
        private UInt16 _BarterGold;
        public UInt16 BarterGold
        {
            get => this._BarterGold;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BarterGold, value, nameof(BarterGold));
            }
        }
        #endregion
        #region LevelOffset
        private Int16 _LevelOffset;
        public Int16 LevelOffset
        {
            get => this._LevelOffset;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._LevelOffset, value, nameof(LevelOffset));
            }
        }
        #endregion
        #region CalcMin
        private UInt16 _CalcMin;
        public UInt16 CalcMin
        {
            get => this._CalcMin;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._CalcMin, value, nameof(CalcMin));
            }
        }
        #endregion
        #region CalcMax
        private UInt16 _CalcMax;
        public UInt16 CalcMax
        {
            get => this._CalcMax;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this.RaiseAndSetIfChanged(ref this._CalcMax, value, nameof(CalcMax));
            }
        }
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<RankPlacement> _Factions = new SourceSetList<RankPlacement>();
        public ISourceSetList<RankPlacement> Factions => _Factions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<RankPlacement> INPC.Factions => _Factions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRankPlacementGetter> INPCGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        public IFormIDSetLink<ItemAbstract> DeathItem_Property { get; } = new FormIDSetLink<ItemAbstract>();
        public ItemAbstract DeathItem { get => DeathItem_Property.Item; set => DeathItem_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<ItemAbstract> INPC.DeathItem_Property => this.DeathItem_Property;
        IItemAbstractInternalGetter INPCGetter.DeathItem => this.DeathItem_Property.Item;
        IFormIDSetLinkGetter<IItemAbstractInternalGetter> INPCGetter.DeathItem_Property => this.DeathItem_Property;
        #endregion
        #region Race
        public IFormIDSetLink<Race> Race_Property { get; } = new FormIDSetLink<Race>();
        public Race Race { get => Race_Property.Item; set => Race_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Race> INPC.Race_Property => this.Race_Property;
        IRaceInternalGetter INPCGetter.Race => this.Race_Property.Item;
        IFormIDSetLinkGetter<IRaceInternalGetter> INPCGetter.Race_Property => this.Race_Property;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IFormIDLink<SpellAbstract>> _Spells = new SourceSetList<IFormIDLink<SpellAbstract>>();
        public ISourceSetList<IFormIDLink<SpellAbstract>> Spells => _Spells;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<SpellAbstract>> INPC.Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<ISpellAbstractInternalGetter>> INPCGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Script
        public IFormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Script> INPC.Script_Property => this.Script_Property;
        IScriptInternalGetter INPCGetter.Script => this.Script_Property.Item;
        IFormIDSetLinkGetter<IScriptInternalGetter> INPCGetter.Script_Property => this.Script_Property;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<ItemEntry> _Items = new SourceSetList<ItemEntry>();
        public ISourceSetList<ItemEntry> Items => _Items;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<ItemEntry> INPC.Items => _Items;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IItemEntryGetter> INPCGetter.Items => _Items;
        #endregion

        #endregion
        #region Aggression
        private Byte _Aggression;
        public Byte Aggression
        {
            get => this._Aggression;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Aggression, value, nameof(Aggression));
            }
        }
        #endregion
        #region Confidence
        private Byte _Confidence;
        public Byte Confidence
        {
            get => this._Confidence;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Confidence, value, nameof(Confidence));
            }
        }
        #endregion
        #region EnergyLevel
        private Byte _EnergyLevel;
        public Byte EnergyLevel
        {
            get => this._EnergyLevel;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._EnergyLevel, value, nameof(EnergyLevel));
            }
        }
        #endregion
        #region Responsibility
        private Byte _Responsibility;
        public Byte Responsibility
        {
            get => this._Responsibility;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Responsibility, value, nameof(Responsibility));
            }
        }
        #endregion
        #region BuySellServices
        private NPC.BuySellServiceFlag _BuySellServices;
        public NPC.BuySellServiceFlag BuySellServices
        {
            get => this._BuySellServices;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._BuySellServices, value, nameof(BuySellServices));
            }
        }
        #endregion
        #region Teaches
        private Skill _Teaches;
        public Skill Teaches
        {
            get => this._Teaches;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Teaches, value, nameof(Teaches));
            }
        }
        #endregion
        #region MaximumTrainingLevel
        private Byte _MaximumTrainingLevel;
        public Byte MaximumTrainingLevel
        {
            get => this._MaximumTrainingLevel;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this.RaiseAndSetIfChanged(ref this._MaximumTrainingLevel, value, nameof(MaximumTrainingLevel));
            }
        }
        #endregion
        #region Fluff
        private Byte[] _Fluff = new byte[2];
        public Byte[] Fluff
        {
            get => _Fluff;
            set
            {
                this._Fluff = value;
                if (value == null)
                {
                    this._Fluff = new byte[2];
                }
            }
        }
        ReadOnlySpan<Byte> INPCGetter.Fluff => this.Fluff;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IFormIDLink<AIPackage>> _AIPackages = new SourceSetList<IFormIDLink<AIPackage>>();
        public ISourceSetList<IFormIDLink<AIPackage>> AIPackages => _AIPackages;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<AIPackage>> INPC.AIPackages => _AIPackages;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IAIPackageInternalGetter>> INPCGetter.AIPackages => _AIPackages;
        #endregion

        #endregion
        #region Animations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<String> _Animations = new SourceSetList<String>();
        public ISourceSetList<String> Animations => _Animations;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<String> INPC.Animations => _Animations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<String> INPCGetter.Animations => _Animations;
        #endregion

        #endregion
        #region Class
        public IFormIDSetLink<Class> Class_Property { get; } = new FormIDSetLink<Class>();
        public Class Class { get => Class_Property.Item; set => Class_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Class> INPC.Class_Property => this.Class_Property;
        IClassInternalGetter INPCGetter.Class => this.Class_Property.Item;
        IFormIDSetLinkGetter<IClassInternalGetter> INPCGetter.Class_Property => this.Class_Property;
        #endregion
        #region Armorer
        private Byte _Armorer;
        public Byte Armorer
        {
            get => this._Armorer;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Armorer, value, nameof(Armorer));
            }
        }
        #endregion
        #region Athletics
        private Byte _Athletics;
        public Byte Athletics
        {
            get => this._Athletics;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Athletics, value, nameof(Athletics));
            }
        }
        #endregion
        #region Blade
        private Byte _Blade;
        public Byte Blade
        {
            get => this._Blade;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Blade, value, nameof(Blade));
            }
        }
        #endregion
        #region Block
        private Byte _Block;
        public Byte Block
        {
            get => this._Block;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Block, value, nameof(Block));
            }
        }
        #endregion
        #region Blunt
        private Byte _Blunt;
        public Byte Blunt
        {
            get => this._Blunt;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Blunt, value, nameof(Blunt));
            }
        }
        #endregion
        #region HandToHand
        private Byte _HandToHand;
        public Byte HandToHand
        {
            get => this._HandToHand;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._HandToHand, value, nameof(HandToHand));
            }
        }
        #endregion
        #region HeavyArmor
        private Byte _HeavyArmor;
        public Byte HeavyArmor
        {
            get => this._HeavyArmor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._HeavyArmor, value, nameof(HeavyArmor));
            }
        }
        #endregion
        #region Alchemy
        private Byte _Alchemy;
        public Byte Alchemy
        {
            get => this._Alchemy;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Alchemy, value, nameof(Alchemy));
            }
        }
        #endregion
        #region Alteration
        private Byte _Alteration;
        public Byte Alteration
        {
            get => this._Alteration;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Alteration, value, nameof(Alteration));
            }
        }
        #endregion
        #region Conjuration
        private Byte _Conjuration;
        public Byte Conjuration
        {
            get => this._Conjuration;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Conjuration, value, nameof(Conjuration));
            }
        }
        #endregion
        #region Destruction
        private Byte _Destruction;
        public Byte Destruction
        {
            get => this._Destruction;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Destruction, value, nameof(Destruction));
            }
        }
        #endregion
        #region Illusion
        private Byte _Illusion;
        public Byte Illusion
        {
            get => this._Illusion;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Illusion, value, nameof(Illusion));
            }
        }
        #endregion
        #region Mysticism
        private Byte _Mysticism;
        public Byte Mysticism
        {
            get => this._Mysticism;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Mysticism, value, nameof(Mysticism));
            }
        }
        #endregion
        #region Restoration
        private Byte _Restoration;
        public Byte Restoration
        {
            get => this._Restoration;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Restoration, value, nameof(Restoration));
            }
        }
        #endregion
        #region Acrobatics
        private Byte _Acrobatics;
        public Byte Acrobatics
        {
            get => this._Acrobatics;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Acrobatics, value, nameof(Acrobatics));
            }
        }
        #endregion
        #region LightArmor
        private Byte _LightArmor;
        public Byte LightArmor
        {
            get => this._LightArmor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._LightArmor, value, nameof(LightArmor));
            }
        }
        #endregion
        #region Marksman
        private Byte _Marksman;
        public Byte Marksman
        {
            get => this._Marksman;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Marksman, value, nameof(Marksman));
            }
        }
        #endregion
        #region Mercantile
        private Byte _Mercantile;
        public Byte Mercantile
        {
            get => this._Mercantile;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Mercantile, value, nameof(Mercantile));
            }
        }
        #endregion
        #region Security
        private Byte _Security;
        public Byte Security
        {
            get => this._Security;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Security, value, nameof(Security));
            }
        }
        #endregion
        #region Sneak
        private Byte _Sneak;
        public Byte Sneak
        {
            get => this._Sneak;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Sneak, value, nameof(Sneak));
            }
        }
        #endregion
        #region Speechcraft
        private Byte _Speechcraft;
        public Byte Speechcraft
        {
            get => this._Speechcraft;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Speechcraft, value, nameof(Speechcraft));
            }
        }
        #endregion
        #region Health
        private UInt32 _Health;
        public UInt32 Health
        {
            get => this._Health;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Health, value, nameof(Health));
            }
        }
        #endregion
        #region Strength
        private Byte _Strength;
        public Byte Strength
        {
            get => this._Strength;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Strength, value, nameof(Strength));
            }
        }
        #endregion
        #region Intelligence
        private Byte _Intelligence;
        public Byte Intelligence
        {
            get => this._Intelligence;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Intelligence, value, nameof(Intelligence));
            }
        }
        #endregion
        #region Willpower
        private Byte _Willpower;
        public Byte Willpower
        {
            get => this._Willpower;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Willpower, value, nameof(Willpower));
            }
        }
        #endregion
        #region Agility
        private Byte _Agility;
        public Byte Agility
        {
            get => this._Agility;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Agility, value, nameof(Agility));
            }
        }
        #endregion
        #region Speed
        private Byte _Speed;
        public Byte Speed
        {
            get => this._Speed;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Speed, value, nameof(Speed));
            }
        }
        #endregion
        #region Endurance
        private Byte _Endurance;
        public Byte Endurance
        {
            get => this._Endurance;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Endurance, value, nameof(Endurance));
            }
        }
        #endregion
        #region Personality
        private Byte _Personality;
        public Byte Personality
        {
            get => this._Personality;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Personality, value, nameof(Personality));
            }
        }
        #endregion
        #region Luck
        private Byte _Luck;
        public Byte Luck
        {
            get => this._Luck;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Luck, value, nameof(Luck));
            }
        }
        #endregion
        #region Hair
        public IFormIDSetLink<Hair> Hair_Property { get; } = new FormIDSetLink<Hair>();
        public Hair Hair { get => Hair_Property.Item; set => Hair_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Hair> INPC.Hair_Property => this.Hair_Property;
        IHairInternalGetter INPCGetter.Hair => this.Hair_Property.Item;
        IFormIDSetLinkGetter<IHairInternalGetter> INPCGetter.Hair_Property => this.Hair_Property;
        #endregion
        #region HairLength
        public bool HairLength_IsSet
        {
            get => _hasBeenSetTracker[(int)NPC_FieldIndex.HairLength];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)NPC_FieldIndex.HairLength, nameof(HairLength_IsSet));
        }
        bool INPCGetter.HairLength_IsSet => HairLength_IsSet;
        private Single _HairLength;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single HairLength
        {
            get => this._HairLength;
            set => HairLength_Set(value);
        }
        Single INPCGetter.HairLength => this.HairLength;
        public void HairLength_Set(
            Single value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _HairLength, value, _hasBeenSetTracker, markSet, (int)NPC_FieldIndex.HairLength, nameof(HairLength), nameof(HairLength_IsSet));
        }
        public void HairLength_Unset()
        {
            this.HairLength_Set(default(Single), false);
        }
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IFormIDLink<Eye>> _Eyes = new SourceSetList<IFormIDLink<Eye>>();
        public ISourceSetList<IFormIDLink<Eye>> Eyes => _Eyes;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<Eye>> INPC.Eyes => _Eyes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IEyeInternalGetter>> INPCGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region HairColor
        public bool HairColor_IsSet
        {
            get => _hasBeenSetTracker[(int)NPC_FieldIndex.HairColor];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)NPC_FieldIndex.HairColor, nameof(HairColor_IsSet));
        }
        bool INPCGetter.HairColor_IsSet => HairColor_IsSet;
        private Color _HairColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color HairColor
        {
            get => this._HairColor;
            set => HairColor_Set(value);
        }
        Color INPCGetter.HairColor => this.HairColor;
        public void HairColor_Set(
            Color value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _HairColor, value, _hasBeenSetTracker, markSet, (int)NPC_FieldIndex.HairColor, nameof(HairColor), nameof(HairColor_IsSet));
        }
        public void HairColor_Unset()
        {
            this.HairColor_Set(default(Color), false);
        }
        #endregion
        #region CombatStyle
        public IFormIDSetLink<CombatStyle> CombatStyle_Property { get; } = new FormIDSetLink<CombatStyle>();
        public CombatStyle CombatStyle { get => CombatStyle_Property.Item; set => CombatStyle_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<CombatStyle> INPC.CombatStyle_Property => this.CombatStyle_Property;
        ICombatStyleInternalGetter INPCGetter.CombatStyle => this.CombatStyle_Property.Item;
        IFormIDSetLinkGetter<ICombatStyleInternalGetter> INPCGetter.CombatStyle_Property => this.CombatStyle_Property;
        #endregion
        #region FaceGenGeometrySymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool FaceGenGeometrySymmetric_IsSet
        {
            get => _hasBeenSetTracker[(int)NPC_FieldIndex.FaceGenGeometrySymmetric];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)NPC_FieldIndex.FaceGenGeometrySymmetric, nameof(FaceGenGeometrySymmetric_IsSet));
        }
        bool INPCGetter.FaceGenGeometrySymmetric_IsSet => FaceGenGeometrySymmetric_IsSet;
        protected Byte[] _FaceGenGeometrySymmetric;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] FaceGenGeometrySymmetric
        {
            get => this._FaceGenGeometrySymmetric;
            set => FaceGenGeometrySymmetric_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> INPCGetter.FaceGenGeometrySymmetric => this.FaceGenGeometrySymmetric;
        public void FaceGenGeometrySymmetric_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _FaceGenGeometrySymmetric, value, _hasBeenSetTracker, markSet, (int)NPC_FieldIndex.FaceGenGeometrySymmetric, nameof(FaceGenGeometrySymmetric), nameof(FaceGenGeometrySymmetric_IsSet));
        }
        public void FaceGenGeometrySymmetric_Unset()
        {
            this.FaceGenGeometrySymmetric_Set(default(Byte[]), false);
        }
        #endregion
        #region FaceGenGeometryAsymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool FaceGenGeometryAsymmetric_IsSet
        {
            get => _hasBeenSetTracker[(int)NPC_FieldIndex.FaceGenGeometryAsymmetric];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)NPC_FieldIndex.FaceGenGeometryAsymmetric, nameof(FaceGenGeometryAsymmetric_IsSet));
        }
        bool INPCGetter.FaceGenGeometryAsymmetric_IsSet => FaceGenGeometryAsymmetric_IsSet;
        protected Byte[] _FaceGenGeometryAsymmetric;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] FaceGenGeometryAsymmetric
        {
            get => this._FaceGenGeometryAsymmetric;
            set => FaceGenGeometryAsymmetric_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> INPCGetter.FaceGenGeometryAsymmetric => this.FaceGenGeometryAsymmetric;
        public void FaceGenGeometryAsymmetric_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _FaceGenGeometryAsymmetric, value, _hasBeenSetTracker, markSet, (int)NPC_FieldIndex.FaceGenGeometryAsymmetric, nameof(FaceGenGeometryAsymmetric), nameof(FaceGenGeometryAsymmetric_IsSet));
        }
        public void FaceGenGeometryAsymmetric_Unset()
        {
            this.FaceGenGeometryAsymmetric_Set(default(Byte[]), false);
        }
        #endregion
        #region FaceGenTextureSymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool FaceGenTextureSymmetric_IsSet
        {
            get => _hasBeenSetTracker[(int)NPC_FieldIndex.FaceGenTextureSymmetric];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)NPC_FieldIndex.FaceGenTextureSymmetric, nameof(FaceGenTextureSymmetric_IsSet));
        }
        bool INPCGetter.FaceGenTextureSymmetric_IsSet => FaceGenTextureSymmetric_IsSet;
        protected Byte[] _FaceGenTextureSymmetric;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] FaceGenTextureSymmetric
        {
            get => this._FaceGenTextureSymmetric;
            set => FaceGenTextureSymmetric_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> INPCGetter.FaceGenTextureSymmetric => this.FaceGenTextureSymmetric;
        public void FaceGenTextureSymmetric_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _FaceGenTextureSymmetric, value, _hasBeenSetTracker, markSet, (int)NPC_FieldIndex.FaceGenTextureSymmetric, nameof(FaceGenTextureSymmetric), nameof(FaceGenTextureSymmetric_IsSet));
        }
        public void FaceGenTextureSymmetric_Unset()
        {
            this.FaceGenTextureSymmetric_Set(default(Byte[]), false);
        }
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool Unknown_IsSet
        {
            get => _hasBeenSetTracker[(int)NPC_FieldIndex.Unknown];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)NPC_FieldIndex.Unknown, nameof(Unknown_IsSet));
        }
        bool INPCGetter.Unknown_IsSet => Unknown_IsSet;
        protected Byte[] _Unknown;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Unknown
        {
            get => this._Unknown;
            set => Unknown_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> INPCGetter.Unknown => this.Unknown;
        public void Unknown_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Unknown, value, _hasBeenSetTracker, markSet, (int)NPC_FieldIndex.Unknown, nameof(Unknown), nameof(Unknown_IsSet));
        }
        public void Unknown_Unset()
        {
            this.Unknown_Set(default(Byte[]), false);
        }
        #endregion
        #region ACBSDataTypeState
        private NPC.ACBSDataType _ACBSDataTypeState;
        public NPC.ACBSDataType ACBSDataTypeState
        {
            get => this._ACBSDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._ACBSDataTypeState, value, nameof(ACBSDataTypeState));
        }
        NPC.ACBSDataType INPCInternal.ACBSDataTypeState
        {
            get => this.ACBSDataTypeState;
            set => this.ACBSDataTypeState = value;
        }
        NPC.ACBSDataType INPCInternalGetter.ACBSDataTypeState
        {
            get => this.ACBSDataTypeState;
        }
        #endregion
        #region AIDTDataTypeState
        private NPC.AIDTDataType _AIDTDataTypeState;
        public NPC.AIDTDataType AIDTDataTypeState
        {
            get => this._AIDTDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._AIDTDataTypeState, value, nameof(AIDTDataTypeState));
        }
        NPC.AIDTDataType INPCInternal.AIDTDataTypeState
        {
            get => this.AIDTDataTypeState;
            set => this.AIDTDataTypeState = value;
        }
        NPC.AIDTDataType INPCInternalGetter.AIDTDataTypeState
        {
            get => this.AIDTDataTypeState;
        }
        #endregion
        #region DATADataTypeState
        private NPC.DATADataType _DATADataTypeState;
        public NPC.DATADataType DATADataTypeState
        {
            get => this._DATADataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._DATADataTypeState, value, nameof(DATADataTypeState));
        }
        NPC.DATADataType INPCInternal.DATADataTypeState
        {
            get => this.DATADataTypeState;
            set => this.DATADataTypeState = value;
        }
        NPC.DATADataType INPCInternalGetter.DATADataTypeState
        {
            get => this.DATADataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INPCInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            NPCMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is INPCInternalGetter rhs)) return false;
            return ((NPCCommon)this.CommonInstance).Equals(this, rhs);
        }

        public bool Equals(NPC obj)
        {
            return ((NPCCommon)this.CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((NPCCommon)this.CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => NPCXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static NPC CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            NPC_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static NPC CreateFromXml(
            XElement node,
            out NPC_ErrorMask errorMask,
            bool doMasks = true,
            NPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = NPC_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static NPC CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new NPC() : null;
                    break;
                default:
                    break;
            }
            var ret = new NPC();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    NPCXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static NPC CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            NPC_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static NPC CreateFromXml(
            string path,
            out NPC_ErrorMask errorMask,
            NPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NPC CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            NPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static NPC CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            NPC_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static NPC CreateFromXml(
            Stream stream,
            out NPC_ErrorMask errorMask,
            NPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NPC CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            NPC_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            NPC item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasACBSDataType":
                    item.ACBSDataTypeState |= NPC.ACBSDataType.Has;
                    break;
                case "HasAIDTDataType":
                    item.AIDTDataTypeState |= NPC.AIDTDataType.Has;
                    break;
                case "HasDATADataType":
                    item.DATADataTypeState |= NPC.DATADataType.Has;
                    break;
                default:
                    NPCAbstract.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((NPC_FieldIndex)index)
            {
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                    return _hasBeenSetTracker[index];
                case NPC_FieldIndex.Factions:
                    return Factions.HasBeenSet;
                case NPC_FieldIndex.DeathItem:
                    return DeathItem_Property.HasBeenSet;
                case NPC_FieldIndex.Race:
                    return Race_Property.HasBeenSet;
                case NPC_FieldIndex.Spells:
                    return Spells.HasBeenSet;
                case NPC_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case NPC_FieldIndex.Items:
                    return Items.HasBeenSet;
                case NPC_FieldIndex.AIPackages:
                    return AIPackages.HasBeenSet;
                case NPC_FieldIndex.Animations:
                    return Animations.HasBeenSet;
                case NPC_FieldIndex.Class:
                    return Class_Property.HasBeenSet;
                case NPC_FieldIndex.Hair:
                    return Hair_Property.HasBeenSet;
                case NPC_FieldIndex.Eyes:
                    return Eyes.HasBeenSet;
                case NPC_FieldIndex.CombatStyle:
                    return CombatStyle_Property.HasBeenSet;
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = NPC_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum ACBSDataType
        {
            Has = 1
        }
        [Flags]
        public enum AIDTDataType
        {
            Has = 1
        }
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Factions.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield return DeathItem_Property;
            yield return Race_Property;
            foreach (var item in Spells)
            {
                yield return item;
            }
            yield return Script_Property;
            foreach (var item in Items.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            foreach (var item in AIPackages)
            {
                yield return item;
            }
            yield return Class_Property;
            yield return Hair_Property;
            foreach (var item in Eyes)
            {
                yield return item;
            }
            yield return CombatStyle_Property;
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Factions.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            DeathItem_Property.Link(
                modList,
                sourceMod);
            Race_Property.Link(
                modList,
                sourceMod);
            foreach (var item in Spells)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            Script_Property.Link(
                modList,
                sourceMod);
            foreach (var item in Items.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            foreach (var item in AIPackages)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            Class_Property.Link(
                modList,
                sourceMod);
            Hair_Property.Link(
                modList,
                sourceMod);
            foreach (var item in Eyes)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
            CombatStyle_Property.Link(
                modList,
                sourceMod);
        }

        public NPC(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public NPC(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(NPC obj, NPC rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new NPC(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => NPCBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static NPC CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static NPC CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out NPC_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = NPC_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static NPC CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<NPC>(
                record: new NPC(),
                frame: frame,
                errorMask: errorMask,
                recType: NPC_Registration.NPC__HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            NPC item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            NPCAbstract.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            NPC item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Model);
                }
                case 0x53424341: // ACBS
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.ACBSDataTypeState = ACBSDataType.Has;
                    }
                    if (EnumBinaryTranslation<NPC.NPCFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out NPC.NPCFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(NPC.NPCFlag);
                    }
                    item.BaseSpellPoints = dataFrame.ReadUInt16();
                    item.Fatigue = dataFrame.ReadUInt16();
                    item.BarterGold = dataFrame.ReadUInt16();
                    item.LevelOffset = dataFrame.ReadInt16();
                    item.CalcMin = dataFrame.ReadUInt16();
                    item.CalcMax = dataFrame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.CalcMax);
                }
                case 0x4D414E53: // SNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.SNAM_HEADER,
                        item: item.Factions,
                        fieldIndex: (int)NPC_FieldIndex.Factions,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out RankPlacement listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<RankPlacement>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.DeathItem_Property);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.DeathItem);
                }
                case 0x4D414E52: // RNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Race_Property);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Race);
                }
                case 0x4F4C5053: // SPLO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<SpellAbstract>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.SPLO_HEADER,
                        masterReferences: masterReferences,
                        item: item.Spells,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Spells);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Script_Property);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Script);
                }
                case 0x4F544E43: // CNTO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.CNTO_HEADER,
                        item: item.Items,
                        fieldIndex: (int)NPC_FieldIndex.Items,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out ItemEntry listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<ItemEntry>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Items);
                }
                case 0x54444941: // AIDT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.AIDTDataTypeState = AIDTDataType.Has;
                    }
                    item.Aggression = dataFrame.ReadUInt8();
                    item.Confidence = dataFrame.ReadUInt8();
                    item.EnergyLevel = dataFrame.ReadUInt8();
                    item.Responsibility = dataFrame.ReadUInt8();
                    if (EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out NPC.BuySellServiceFlag BuySellServicesParse))
                    {
                        item.BuySellServices = BuySellServicesParse;
                    }
                    else
                    {
                        item.BuySellServices = default(NPC.BuySellServiceFlag);
                    }
                    if (EnumBinaryTranslation<Skill>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(1),
                        item: out Skill TeachesParse))
                    {
                        item.Teaches = TeachesParse;
                    }
                    else
                    {
                        item.Teaches = default(Skill);
                    }
                    item.MaximumTrainingLevel = dataFrame.ReadUInt8();
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(2),
                        item: out Byte[] FluffParse))
                    {
                        item.Fluff = FluffParse;
                    }
                    else
                    {
                        item.Fluff = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Fluff);
                }
                case 0x44494B50: // PKID
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<AIPackage>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: NPC_Registration.PKID_HEADER,
                        masterReferences: masterReferences,
                        item: item.AIPackages,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Animations,
                        transl: (MutagenFrame r, out String listSubItem) =>
                        {
                            return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                r,
                                item: out listSubItem,
                                parseWhole: false);
                        });
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Animations);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Class_Property);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Class);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    item.Armorer = dataFrame.ReadUInt8();
                    item.Athletics = dataFrame.ReadUInt8();
                    item.Blade = dataFrame.ReadUInt8();
                    item.Block = dataFrame.ReadUInt8();
                    item.Blunt = dataFrame.ReadUInt8();
                    item.HandToHand = dataFrame.ReadUInt8();
                    item.HeavyArmor = dataFrame.ReadUInt8();
                    item.Alchemy = dataFrame.ReadUInt8();
                    item.Alteration = dataFrame.ReadUInt8();
                    item.Conjuration = dataFrame.ReadUInt8();
                    item.Destruction = dataFrame.ReadUInt8();
                    item.Illusion = dataFrame.ReadUInt8();
                    item.Mysticism = dataFrame.ReadUInt8();
                    item.Restoration = dataFrame.ReadUInt8();
                    item.Acrobatics = dataFrame.ReadUInt8();
                    item.LightArmor = dataFrame.ReadUInt8();
                    item.Marksman = dataFrame.ReadUInt8();
                    item.Mercantile = dataFrame.ReadUInt8();
                    item.Security = dataFrame.ReadUInt8();
                    item.Sneak = dataFrame.ReadUInt8();
                    item.Speechcraft = dataFrame.ReadUInt8();
                    item.Health = dataFrame.ReadUInt32();
                    item.Strength = dataFrame.ReadUInt8();
                    item.Intelligence = dataFrame.ReadUInt8();
                    item.Willpower = dataFrame.ReadUInt8();
                    item.Agility = dataFrame.ReadUInt8();
                    item.Speed = dataFrame.ReadUInt8();
                    item.Endurance = dataFrame.ReadUInt8();
                    item.Personality = dataFrame.ReadUInt8();
                    item.Luck = dataFrame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Luck);
                }
                case 0x4D414E48: // HNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Hair_Property);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Hair);
                }
                case 0x4D414E4C: // LNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Single HairLengthParse))
                    {
                        item.HairLength = HairLengthParse;
                    }
                    else
                    {
                        item.HairLength = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.HairLength);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<Eye>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Eyes,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Eyes);
                }
                case 0x524C4348: // HCLR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        extraByte: true,
                        item: out Color HairColorParse))
                    {
                        item.HairColor = HairColorParse;
                    }
                    else
                    {
                        item.HairColor = default(Color);
                    }
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.HairColor);
                }
                case 0x4D414E5A: // ZNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.CombatStyle_Property);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.CombatStyle);
                }
                case 0x53474746: // FGGS
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] FaceGenGeometrySymmetricParse))
                    {
                        item.FaceGenGeometrySymmetric = FaceGenGeometrySymmetricParse;
                    }
                    else
                    {
                        item.FaceGenGeometrySymmetric = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenGeometrySymmetric);
                }
                case 0x41474746: // FGGA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] FaceGenGeometryAsymmetricParse))
                    {
                        item.FaceGenGeometryAsymmetric = FaceGenGeometryAsymmetricParse;
                    }
                    else
                    {
                        item.FaceGenGeometryAsymmetric = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenGeometryAsymmetric);
                }
                case 0x53544746: // FGTS
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] FaceGenTextureSymmetricParse))
                    {
                        item.FaceGenTextureSymmetric = FaceGenTextureSymmetricParse;
                    }
                    else
                    {
                        item.FaceGenTextureSymmetric = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenTextureSymmetric);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] UnknownParse))
                    {
                        item.Unknown = UnknownParse;
                    }
                    else
                    {
                        item.Unknown = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Unknown);
                }
                default:
                    return NPCAbstract.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public NPC Copy(
            NPC_CopyMask copyMask = null,
            NPC def = null)
        {
            return NPC.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static NPC Copy(
            NPC item,
            NPC_CopyMask copyMask = null,
            NPC def = null)
        {
            NPC ret;
            if (item.GetType().Equals(typeof(NPC)))
            {
                ret = new NPC();
            }
            else
            {
                ret = (NPC)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static NPC Copy_ToLoqui(
            NPC item,
            NPC_CopyMask copyMask = null,
            NPC def = null)
        {
            NPC ret;
            if (item.GetType().Equals(typeof(NPC)))
            {
                ret = new NPC() as NPC;
            }
            else
            {
                ret = (NPC)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            NPC rhs,
            NPC_CopyMask copyMask,
            NPC def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            NPC rhs,
            out NPC_ErrorMask errorMask,
            NPC_CopyMask copyMask = null,
            NPC def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NPCCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = NPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            NPC rhs,
            ErrorMaskBuilder errorMask,
            NPC_CopyMask copyMask = null,
            NPC def = null)
        {
            NPCCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case NPC_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case NPC_FieldIndex.Flags:
                    this.Flags = (NPC.NPCFlag)obj;
                    break;
                case NPC_FieldIndex.BaseSpellPoints:
                    this.BaseSpellPoints = (UInt16)obj;
                    break;
                case NPC_FieldIndex.Fatigue:
                    this.Fatigue = (UInt16)obj;
                    break;
                case NPC_FieldIndex.BarterGold:
                    this.BarterGold = (UInt16)obj;
                    break;
                case NPC_FieldIndex.LevelOffset:
                    this.LevelOffset = (Int16)obj;
                    break;
                case NPC_FieldIndex.CalcMin:
                    this.CalcMin = (UInt16)obj;
                    break;
                case NPC_FieldIndex.CalcMax:
                    this.CalcMax = (UInt16)obj;
                    break;
                case NPC_FieldIndex.Factions:
                    this._Factions.SetTo((SourceSetList<RankPlacement>)obj);
                    break;
                case NPC_FieldIndex.DeathItem:
                    this.DeathItem_Property.Set((IFormIDSetLink<ItemAbstract>)obj);
                    break;
                case NPC_FieldIndex.Race:
                    this.Race_Property.Set((IFormIDSetLink<Race>)obj);
                    break;
                case NPC_FieldIndex.Spells:
                    this._Spells.SetTo((SourceSetList<IFormIDLink<SpellAbstract>>)obj);
                    break;
                case NPC_FieldIndex.Script:
                    this.Script_Property.Set((IFormIDSetLink<Script>)obj);
                    break;
                case NPC_FieldIndex.Items:
                    this._Items.SetTo((SourceSetList<ItemEntry>)obj);
                    break;
                case NPC_FieldIndex.Aggression:
                    this.Aggression = (Byte)obj;
                    break;
                case NPC_FieldIndex.Confidence:
                    this.Confidence = (Byte)obj;
                    break;
                case NPC_FieldIndex.EnergyLevel:
                    this.EnergyLevel = (Byte)obj;
                    break;
                case NPC_FieldIndex.Responsibility:
                    this.Responsibility = (Byte)obj;
                    break;
                case NPC_FieldIndex.BuySellServices:
                    this.BuySellServices = (NPC.BuySellServiceFlag)obj;
                    break;
                case NPC_FieldIndex.Teaches:
                    this.Teaches = (Skill)obj;
                    break;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = (Byte)obj;
                    break;
                case NPC_FieldIndex.Fluff:
                    this.Fluff = (Byte[])obj;
                    break;
                case NPC_FieldIndex.AIPackages:
                    this._AIPackages.SetTo((SourceSetList<IFormIDLink<AIPackage>>)obj);
                    break;
                case NPC_FieldIndex.Animations:
                    this._Animations.SetTo((SourceSetList<String>)obj);
                    break;
                case NPC_FieldIndex.Class:
                    this.Class_Property.Set((IFormIDSetLink<Class>)obj);
                    break;
                case NPC_FieldIndex.Armorer:
                    this.Armorer = (Byte)obj;
                    break;
                case NPC_FieldIndex.Athletics:
                    this.Athletics = (Byte)obj;
                    break;
                case NPC_FieldIndex.Blade:
                    this.Blade = (Byte)obj;
                    break;
                case NPC_FieldIndex.Block:
                    this.Block = (Byte)obj;
                    break;
                case NPC_FieldIndex.Blunt:
                    this.Blunt = (Byte)obj;
                    break;
                case NPC_FieldIndex.HandToHand:
                    this.HandToHand = (Byte)obj;
                    break;
                case NPC_FieldIndex.HeavyArmor:
                    this.HeavyArmor = (Byte)obj;
                    break;
                case NPC_FieldIndex.Alchemy:
                    this.Alchemy = (Byte)obj;
                    break;
                case NPC_FieldIndex.Alteration:
                    this.Alteration = (Byte)obj;
                    break;
                case NPC_FieldIndex.Conjuration:
                    this.Conjuration = (Byte)obj;
                    break;
                case NPC_FieldIndex.Destruction:
                    this.Destruction = (Byte)obj;
                    break;
                case NPC_FieldIndex.Illusion:
                    this.Illusion = (Byte)obj;
                    break;
                case NPC_FieldIndex.Mysticism:
                    this.Mysticism = (Byte)obj;
                    break;
                case NPC_FieldIndex.Restoration:
                    this.Restoration = (Byte)obj;
                    break;
                case NPC_FieldIndex.Acrobatics:
                    this.Acrobatics = (Byte)obj;
                    break;
                case NPC_FieldIndex.LightArmor:
                    this.LightArmor = (Byte)obj;
                    break;
                case NPC_FieldIndex.Marksman:
                    this.Marksman = (Byte)obj;
                    break;
                case NPC_FieldIndex.Mercantile:
                    this.Mercantile = (Byte)obj;
                    break;
                case NPC_FieldIndex.Security:
                    this.Security = (Byte)obj;
                    break;
                case NPC_FieldIndex.Sneak:
                    this.Sneak = (Byte)obj;
                    break;
                case NPC_FieldIndex.Speechcraft:
                    this.Speechcraft = (Byte)obj;
                    break;
                case NPC_FieldIndex.Health:
                    this.Health = (UInt32)obj;
                    break;
                case NPC_FieldIndex.Strength:
                    this.Strength = (Byte)obj;
                    break;
                case NPC_FieldIndex.Intelligence:
                    this.Intelligence = (Byte)obj;
                    break;
                case NPC_FieldIndex.Willpower:
                    this.Willpower = (Byte)obj;
                    break;
                case NPC_FieldIndex.Agility:
                    this.Agility = (Byte)obj;
                    break;
                case NPC_FieldIndex.Speed:
                    this.Speed = (Byte)obj;
                    break;
                case NPC_FieldIndex.Endurance:
                    this.Endurance = (Byte)obj;
                    break;
                case NPC_FieldIndex.Personality:
                    this.Personality = (Byte)obj;
                    break;
                case NPC_FieldIndex.Luck:
                    this.Luck = (Byte)obj;
                    break;
                case NPC_FieldIndex.Hair:
                    this.Hair_Property.Set((IFormIDSetLink<Hair>)obj);
                    break;
                case NPC_FieldIndex.HairLength:
                    this.HairLength = (Single)obj;
                    break;
                case NPC_FieldIndex.Eyes:
                    this._Eyes.SetTo((SourceSetList<IFormIDLink<Eye>>)obj);
                    break;
                case NPC_FieldIndex.HairColor:
                    this.HairColor = (Color)obj;
                    break;
                case NPC_FieldIndex.CombatStyle:
                    this.CombatStyle_Property.Set((IFormIDSetLink<CombatStyle>)obj);
                    break;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    this.FaceGenGeometrySymmetric = (Byte[])obj;
                    break;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    this.FaceGenGeometryAsymmetric = (Byte[])obj;
                    break;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    this.FaceGenTextureSymmetric = (Byte[])obj;
                    break;
                case NPC_FieldIndex.Unknown:
                    this.Unknown = (Byte[])obj;
                    break;
                case NPC_FieldIndex.ACBSDataTypeState:
                    this.ACBSDataTypeState = (NPC.ACBSDataType)obj;
                    break;
                case NPC_FieldIndex.AIDTDataTypeState:
                    this.AIDTDataTypeState = (NPC.AIDTDataType)obj;
                    break;
                case NPC_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (NPC.DATADataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            NPCCommon.Instance.Clear(this);
        }

        public new static NPC Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new NPC();
            foreach (var pair in fields)
            {
                CopyInInternal_NPC(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_NPC(NPC obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out NPC_FieldIndex enu))
            {
                CopyInInternal_NPCAbstract(obj, pair);
            }
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case NPC_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case NPC_FieldIndex.Flags:
                    obj.Flags = (NPC.NPCFlag)pair.Value;
                    break;
                case NPC_FieldIndex.BaseSpellPoints:
                    obj.BaseSpellPoints = (UInt16)pair.Value;
                    break;
                case NPC_FieldIndex.Fatigue:
                    obj.Fatigue = (UInt16)pair.Value;
                    break;
                case NPC_FieldIndex.BarterGold:
                    obj.BarterGold = (UInt16)pair.Value;
                    break;
                case NPC_FieldIndex.LevelOffset:
                    obj.LevelOffset = (Int16)pair.Value;
                    break;
                case NPC_FieldIndex.CalcMin:
                    obj.CalcMin = (UInt16)pair.Value;
                    break;
                case NPC_FieldIndex.CalcMax:
                    obj.CalcMax = (UInt16)pair.Value;
                    break;
                case NPC_FieldIndex.Factions:
                    obj._Factions.SetTo((SourceSetList<RankPlacement>)pair.Value);
                    break;
                case NPC_FieldIndex.DeathItem:
                    obj.DeathItem_Property.Set((IFormIDSetLink<ItemAbstract>)pair.Value);
                    break;
                case NPC_FieldIndex.Race:
                    obj.Race_Property.Set((IFormIDSetLink<Race>)pair.Value);
                    break;
                case NPC_FieldIndex.Spells:
                    obj._Spells.SetTo((SourceSetList<IFormIDLink<SpellAbstract>>)pair.Value);
                    break;
                case NPC_FieldIndex.Script:
                    obj.Script_Property.Set((IFormIDSetLink<Script>)pair.Value);
                    break;
                case NPC_FieldIndex.Items:
                    obj._Items.SetTo((SourceSetList<ItemEntry>)pair.Value);
                    break;
                case NPC_FieldIndex.Aggression:
                    obj.Aggression = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Confidence:
                    obj.Confidence = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.EnergyLevel:
                    obj.EnergyLevel = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Responsibility:
                    obj.Responsibility = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.BuySellServices:
                    obj.BuySellServices = (NPC.BuySellServiceFlag)pair.Value;
                    break;
                case NPC_FieldIndex.Teaches:
                    obj.Teaches = (Skill)pair.Value;
                    break;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    obj.MaximumTrainingLevel = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Fluff:
                    obj.Fluff = (Byte[])pair.Value;
                    break;
                case NPC_FieldIndex.AIPackages:
                    obj._AIPackages.SetTo((SourceSetList<IFormIDLink<AIPackage>>)pair.Value);
                    break;
                case NPC_FieldIndex.Animations:
                    obj._Animations.SetTo((SourceSetList<String>)pair.Value);
                    break;
                case NPC_FieldIndex.Class:
                    obj.Class_Property.Set((IFormIDSetLink<Class>)pair.Value);
                    break;
                case NPC_FieldIndex.Armorer:
                    obj.Armorer = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Athletics:
                    obj.Athletics = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Blade:
                    obj.Blade = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Block:
                    obj.Block = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Blunt:
                    obj.Blunt = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.HandToHand:
                    obj.HandToHand = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.HeavyArmor:
                    obj.HeavyArmor = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Alchemy:
                    obj.Alchemy = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Alteration:
                    obj.Alteration = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Conjuration:
                    obj.Conjuration = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Destruction:
                    obj.Destruction = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Illusion:
                    obj.Illusion = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Mysticism:
                    obj.Mysticism = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Restoration:
                    obj.Restoration = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Acrobatics:
                    obj.Acrobatics = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.LightArmor:
                    obj.LightArmor = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Marksman:
                    obj.Marksman = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Mercantile:
                    obj.Mercantile = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Security:
                    obj.Security = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Sneak:
                    obj.Sneak = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Speechcraft:
                    obj.Speechcraft = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Health:
                    obj.Health = (UInt32)pair.Value;
                    break;
                case NPC_FieldIndex.Strength:
                    obj.Strength = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Intelligence:
                    obj.Intelligence = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Willpower:
                    obj.Willpower = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Agility:
                    obj.Agility = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Speed:
                    obj.Speed = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Endurance:
                    obj.Endurance = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Personality:
                    obj.Personality = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Luck:
                    obj.Luck = (Byte)pair.Value;
                    break;
                case NPC_FieldIndex.Hair:
                    obj.Hair_Property.Set((IFormIDSetLink<Hair>)pair.Value);
                    break;
                case NPC_FieldIndex.HairLength:
                    obj.HairLength = (Single)pair.Value;
                    break;
                case NPC_FieldIndex.Eyes:
                    obj._Eyes.SetTo((SourceSetList<IFormIDLink<Eye>>)pair.Value);
                    break;
                case NPC_FieldIndex.HairColor:
                    obj.HairColor = (Color)pair.Value;
                    break;
                case NPC_FieldIndex.CombatStyle:
                    obj.CombatStyle_Property.Set((IFormIDSetLink<CombatStyle>)pair.Value);
                    break;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    obj.FaceGenGeometrySymmetric = (Byte[])pair.Value;
                    break;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    obj.FaceGenGeometryAsymmetric = (Byte[])pair.Value;
                    break;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    obj.FaceGenTextureSymmetric = (Byte[])pair.Value;
                    break;
                case NPC_FieldIndex.Unknown:
                    obj.Unknown = (Byte[])pair.Value;
                    break;
                case NPC_FieldIndex.ACBSDataTypeState:
                    obj.ACBSDataTypeState = (NPC.ACBSDataType)pair.Value;
                    break;
                case NPC_FieldIndex.AIDTDataTypeState:
                    obj.AIDTDataTypeState = (NPC.AIDTDataType)pair.Value;
                    break;
                case NPC_FieldIndex.DATADataTypeState:
                    obj.DATADataTypeState = (NPC.DATADataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface INPC :
        INPCInternalGetter,
        INPCAbstract,
        ILoquiObjectSetter<INPCInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new NPC.NPCFlag Flags { get; set; }

        new UInt16 BaseSpellPoints { get; set; }

        new UInt16 Fatigue { get; set; }

        new UInt16 BarterGold { get; set; }

        new Int16 LevelOffset { get; set; }

        new UInt16 CalcMin { get; set; }

        new UInt16 CalcMax { get; set; }

        new ISetList<RankPlacement> Factions { get; }
        new ItemAbstract DeathItem { get; set; }
        new IFormIDSetLink<ItemAbstract> DeathItem_Property { get; }
        new Race Race { get; set; }
        new IFormIDSetLink<Race> Race_Property { get; }
        new ISetList<IFormIDLink<SpellAbstract>> Spells { get; }
        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new ISetList<ItemEntry> Items { get; }
        new Byte Aggression { get; set; }

        new Byte Confidence { get; set; }

        new Byte EnergyLevel { get; set; }

        new Byte Responsibility { get; set; }

        new NPC.BuySellServiceFlag BuySellServices { get; set; }

        new Skill Teaches { get; set; }

        new Byte MaximumTrainingLevel { get; set; }

        new Byte[] Fluff { get; set; }

        new ISetList<IFormIDLink<AIPackage>> AIPackages { get; }
        new ISetList<String> Animations { get; }
        new Class Class { get; set; }
        new IFormIDSetLink<Class> Class_Property { get; }
        new Byte Armorer { get; set; }

        new Byte Athletics { get; set; }

        new Byte Blade { get; set; }

        new Byte Block { get; set; }

        new Byte Blunt { get; set; }

        new Byte HandToHand { get; set; }

        new Byte HeavyArmor { get; set; }

        new Byte Alchemy { get; set; }

        new Byte Alteration { get; set; }

        new Byte Conjuration { get; set; }

        new Byte Destruction { get; set; }

        new Byte Illusion { get; set; }

        new Byte Mysticism { get; set; }

        new Byte Restoration { get; set; }

        new Byte Acrobatics { get; set; }

        new Byte LightArmor { get; set; }

        new Byte Marksman { get; set; }

        new Byte Mercantile { get; set; }

        new Byte Security { get; set; }

        new Byte Sneak { get; set; }

        new Byte Speechcraft { get; set; }

        new UInt32 Health { get; set; }

        new Byte Strength { get; set; }

        new Byte Intelligence { get; set; }

        new Byte Willpower { get; set; }

        new Byte Agility { get; set; }

        new Byte Speed { get; set; }

        new Byte Endurance { get; set; }

        new Byte Personality { get; set; }

        new Byte Luck { get; set; }

        new Hair Hair { get; set; }
        new IFormIDSetLink<Hair> Hair_Property { get; }
        new Single HairLength { get; set; }
        new bool HairLength_IsSet { get; set; }
        void HairLength_Set(Single value, bool hasBeenSet = true);
        void HairLength_Unset();

        new ISetList<IFormIDLink<Eye>> Eyes { get; }
        new Color HairColor { get; set; }
        new bool HairColor_IsSet { get; set; }
        void HairColor_Set(Color value, bool hasBeenSet = true);
        void HairColor_Unset();

        new CombatStyle CombatStyle { get; set; }
        new IFormIDSetLink<CombatStyle> CombatStyle_Property { get; }
        new Byte[] FaceGenGeometrySymmetric { get; set; }
        new bool FaceGenGeometrySymmetric_IsSet { get; set; }
        void FaceGenGeometrySymmetric_Set(Byte[] value, bool hasBeenSet = true);
        void FaceGenGeometrySymmetric_Unset();

        new Byte[] FaceGenGeometryAsymmetric { get; set; }
        new bool FaceGenGeometryAsymmetric_IsSet { get; set; }
        void FaceGenGeometryAsymmetric_Set(Byte[] value, bool hasBeenSet = true);
        void FaceGenGeometryAsymmetric_Unset();

        new Byte[] FaceGenTextureSymmetric { get; set; }
        new bool FaceGenTextureSymmetric_IsSet { get; set; }
        void FaceGenTextureSymmetric_Set(Byte[] value, bool hasBeenSet = true);
        void FaceGenTextureSymmetric_Unset();

        new Byte[] Unknown { get; set; }
        new bool Unknown_IsSet { get; set; }
        void Unknown_Set(Byte[] value, bool hasBeenSet = true);
        void Unknown_Unset();

        void CopyFieldsFrom(
            NPC rhs,
            ErrorMaskBuilder errorMask = null,
            NPC_CopyMask copyMask = null,
            NPC def = null);
    }

    public partial interface INPCInternal :
        INPCAbstractInternal,
        INPC,
        INPCInternalGetter
    {
        new ItemAbstract DeathItem { get; set; }
        new IFormIDSetLink<ItemAbstract> DeathItem_Property { get; }
        new Race Race { get; set; }
        new IFormIDSetLink<Race> Race_Property { get; }
        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new Class Class { get; set; }
        new IFormIDSetLink<Class> Class_Property { get; }
        new Hair Hair { get; set; }
        new IFormIDSetLink<Hair> Hair_Property { get; }
        new CombatStyle CombatStyle { get; set; }
        new IFormIDSetLink<CombatStyle> CombatStyle_Property { get; }
        new NPC.ACBSDataType ACBSDataTypeState { get; set; }

        new NPC.AIDTDataType AIDTDataTypeState { get; set; }

        new NPC.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface INPCGetter :
        INPCAbstractGetter,
        ILoquiObject<INPCInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Flags
        NPC.NPCFlag Flags { get; }

        #endregion
        #region BaseSpellPoints
        UInt16 BaseSpellPoints { get; }

        #endregion
        #region Fatigue
        UInt16 Fatigue { get; }

        #endregion
        #region BarterGold
        UInt16 BarterGold { get; }

        #endregion
        #region LevelOffset
        Int16 LevelOffset { get; }

        #endregion
        #region CalcMin
        UInt16 CalcMin { get; }

        #endregion
        #region CalcMax
        UInt16 CalcMax { get; }

        #endregion
        #region Factions
        IReadOnlySetList<IRankPlacementGetter> Factions { get; }
        #endregion
        #region DeathItem
        IItemAbstractInternalGetter DeathItem { get; }
        IFormIDSetLinkGetter<IItemAbstractInternalGetter> DeathItem_Property { get; }

        #endregion
        #region Race
        IRaceInternalGetter Race { get; }
        IFormIDSetLinkGetter<IRaceInternalGetter> Race_Property { get; }

        #endregion
        #region Spells
        IReadOnlySetList<IFormIDLinkGetter<ISpellAbstractInternalGetter>> Spells { get; }
        #endregion
        #region Script
        IScriptInternalGetter Script { get; }
        IFormIDSetLinkGetter<IScriptInternalGetter> Script_Property { get; }

        #endregion
        #region Items
        IReadOnlySetList<IItemEntryGetter> Items { get; }
        #endregion
        #region Aggression
        Byte Aggression { get; }

        #endregion
        #region Confidence
        Byte Confidence { get; }

        #endregion
        #region EnergyLevel
        Byte EnergyLevel { get; }

        #endregion
        #region Responsibility
        Byte Responsibility { get; }

        #endregion
        #region BuySellServices
        NPC.BuySellServiceFlag BuySellServices { get; }

        #endregion
        #region Teaches
        Skill Teaches { get; }

        #endregion
        #region MaximumTrainingLevel
        Byte MaximumTrainingLevel { get; }

        #endregion
        #region Fluff
        ReadOnlySpan<Byte> Fluff { get; }

        #endregion
        #region AIPackages
        IReadOnlySetList<IFormIDLinkGetter<IAIPackageInternalGetter>> AIPackages { get; }
        #endregion
        #region Animations
        IReadOnlySetList<String> Animations { get; }
        #endregion
        #region Class
        IClassInternalGetter Class { get; }
        IFormIDSetLinkGetter<IClassInternalGetter> Class_Property { get; }

        #endregion
        #region Armorer
        Byte Armorer { get; }

        #endregion
        #region Athletics
        Byte Athletics { get; }

        #endregion
        #region Blade
        Byte Blade { get; }

        #endregion
        #region Block
        Byte Block { get; }

        #endregion
        #region Blunt
        Byte Blunt { get; }

        #endregion
        #region HandToHand
        Byte HandToHand { get; }

        #endregion
        #region HeavyArmor
        Byte HeavyArmor { get; }

        #endregion
        #region Alchemy
        Byte Alchemy { get; }

        #endregion
        #region Alteration
        Byte Alteration { get; }

        #endregion
        #region Conjuration
        Byte Conjuration { get; }

        #endregion
        #region Destruction
        Byte Destruction { get; }

        #endregion
        #region Illusion
        Byte Illusion { get; }

        #endregion
        #region Mysticism
        Byte Mysticism { get; }

        #endregion
        #region Restoration
        Byte Restoration { get; }

        #endregion
        #region Acrobatics
        Byte Acrobatics { get; }

        #endregion
        #region LightArmor
        Byte LightArmor { get; }

        #endregion
        #region Marksman
        Byte Marksman { get; }

        #endregion
        #region Mercantile
        Byte Mercantile { get; }

        #endregion
        #region Security
        Byte Security { get; }

        #endregion
        #region Sneak
        Byte Sneak { get; }

        #endregion
        #region Speechcraft
        Byte Speechcraft { get; }

        #endregion
        #region Health
        UInt32 Health { get; }

        #endregion
        #region Strength
        Byte Strength { get; }

        #endregion
        #region Intelligence
        Byte Intelligence { get; }

        #endregion
        #region Willpower
        Byte Willpower { get; }

        #endregion
        #region Agility
        Byte Agility { get; }

        #endregion
        #region Speed
        Byte Speed { get; }

        #endregion
        #region Endurance
        Byte Endurance { get; }

        #endregion
        #region Personality
        Byte Personality { get; }

        #endregion
        #region Luck
        Byte Luck { get; }

        #endregion
        #region Hair
        IHairInternalGetter Hair { get; }
        IFormIDSetLinkGetter<IHairInternalGetter> Hair_Property { get; }

        #endregion
        #region HairLength
        Single HairLength { get; }
        bool HairLength_IsSet { get; }

        #endregion
        #region Eyes
        IReadOnlySetList<IFormIDLinkGetter<IEyeInternalGetter>> Eyes { get; }
        #endregion
        #region HairColor
        Color HairColor { get; }
        bool HairColor_IsSet { get; }

        #endregion
        #region CombatStyle
        ICombatStyleInternalGetter CombatStyle { get; }
        IFormIDSetLinkGetter<ICombatStyleInternalGetter> CombatStyle_Property { get; }

        #endregion
        #region FaceGenGeometrySymmetric
        ReadOnlySpan<Byte> FaceGenGeometrySymmetric { get; }
        bool FaceGenGeometrySymmetric_IsSet { get; }

        #endregion
        #region FaceGenGeometryAsymmetric
        ReadOnlySpan<Byte> FaceGenGeometryAsymmetric { get; }
        bool FaceGenGeometryAsymmetric_IsSet { get; }

        #endregion
        #region FaceGenTextureSymmetric
        ReadOnlySpan<Byte> FaceGenTextureSymmetric { get; }
        bool FaceGenTextureSymmetric_IsSet { get; }

        #endregion
        #region Unknown
        ReadOnlySpan<Byte> Unknown { get; }
        bool Unknown_IsSet { get; }

        #endregion

    }

    public partial interface INPCInternalGetter :
        INPCAbstractInternalGetter,
        INPCGetter
    {
        #region ACBSDataTypeState
        NPC.ACBSDataType ACBSDataTypeState { get; }

        #endregion
        #region AIDTDataTypeState
        NPC.AIDTDataType AIDTDataTypeState { get; }

        #endregion
        #region DATADataTypeState
        NPC.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class NPCMixIn
    {
        public static void Clear(this INPCInternal item)
        {
            ((NPCCommon)item.CommonInstance).Clear(item: item);
        }

        public static NPC_Mask<bool> GetEqualsMask(
            this INPCInternalGetter item,
            INPCInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NPCCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INPCInternalGetter item,
            string name = null,
            NPC_Mask<bool> printMask = null)
        {
            return ((NPCCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INPCInternalGetter item,
            FileGeneration fg,
            string name = null,
            NPC_Mask<bool> printMask = null)
        {
            ((NPCCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this INPCInternalGetter item,
            NPC_Mask<bool?> checkMask)
        {
            return ((NPCCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static NPC_Mask<bool> GetHasBeenSetMask(this INPCInternalGetter item)
        {
            var ret = new NPC_Mask<bool>();
            ((NPCCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this INPCInternalGetter item,
            INPCInternalGetter rhs)
        {
            return ((NPCCommon)item.CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum NPC_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Flags = 7,
        BaseSpellPoints = 8,
        Fatigue = 9,
        BarterGold = 10,
        LevelOffset = 11,
        CalcMin = 12,
        CalcMax = 13,
        Factions = 14,
        DeathItem = 15,
        Race = 16,
        Spells = 17,
        Script = 18,
        Items = 19,
        Aggression = 20,
        Confidence = 21,
        EnergyLevel = 22,
        Responsibility = 23,
        BuySellServices = 24,
        Teaches = 25,
        MaximumTrainingLevel = 26,
        Fluff = 27,
        AIPackages = 28,
        Animations = 29,
        Class = 30,
        Armorer = 31,
        Athletics = 32,
        Blade = 33,
        Block = 34,
        Blunt = 35,
        HandToHand = 36,
        HeavyArmor = 37,
        Alchemy = 38,
        Alteration = 39,
        Conjuration = 40,
        Destruction = 41,
        Illusion = 42,
        Mysticism = 43,
        Restoration = 44,
        Acrobatics = 45,
        LightArmor = 46,
        Marksman = 47,
        Mercantile = 48,
        Security = 49,
        Sneak = 50,
        Speechcraft = 51,
        Health = 52,
        Strength = 53,
        Intelligence = 54,
        Willpower = 55,
        Agility = 56,
        Speed = 57,
        Endurance = 58,
        Personality = 59,
        Luck = 60,
        Hair = 61,
        HairLength = 62,
        Eyes = 63,
        HairColor = 64,
        CombatStyle = 65,
        FaceGenGeometrySymmetric = 66,
        FaceGenGeometryAsymmetric = 67,
        FaceGenTextureSymmetric = 68,
        Unknown = 69,
        ACBSDataTypeState = 70,
        AIDTDataTypeState = 71,
        DATADataTypeState = 72,
    }
    #endregion

    #region Registration
    public class NPC_Registration : ILoquiRegistration
    {
        public static readonly NPC_Registration Instance = new NPC_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 84,
            version: 0);

        public const string GUID = "96396343-a32a-4165-b745-e038c5e06eeb";

        public const ushort AdditionalFieldCount = 68;

        public const ushort FieldCount = 73;

        public static readonly Type MaskType = typeof(NPC_Mask<>);

        public static readonly Type ErrorMaskType = typeof(NPC_ErrorMask);

        public static readonly Type ClassType = typeof(NPC);

        public static readonly Type GetterType = typeof(INPCGetter);

        public static readonly Type InternalGetterType = typeof(INPCInternalGetter);

        public static readonly Type SetterType = typeof(INPC);

        public static readonly Type InternalSetterType = typeof(INPCInternal);

        public static readonly Type CommonType = typeof(NPCCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.NPC";

        public const string Name = "NPC";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)NPC_FieldIndex.Name;
                case "MODEL":
                    return (ushort)NPC_FieldIndex.Model;
                case "FLAGS":
                    return (ushort)NPC_FieldIndex.Flags;
                case "BASESPELLPOINTS":
                    return (ushort)NPC_FieldIndex.BaseSpellPoints;
                case "FATIGUE":
                    return (ushort)NPC_FieldIndex.Fatigue;
                case "BARTERGOLD":
                    return (ushort)NPC_FieldIndex.BarterGold;
                case "LEVELOFFSET":
                    return (ushort)NPC_FieldIndex.LevelOffset;
                case "CALCMIN":
                    return (ushort)NPC_FieldIndex.CalcMin;
                case "CALCMAX":
                    return (ushort)NPC_FieldIndex.CalcMax;
                case "FACTIONS":
                    return (ushort)NPC_FieldIndex.Factions;
                case "DEATHITEM":
                    return (ushort)NPC_FieldIndex.DeathItem;
                case "RACE":
                    return (ushort)NPC_FieldIndex.Race;
                case "SPELLS":
                    return (ushort)NPC_FieldIndex.Spells;
                case "SCRIPT":
                    return (ushort)NPC_FieldIndex.Script;
                case "ITEMS":
                    return (ushort)NPC_FieldIndex.Items;
                case "AGGRESSION":
                    return (ushort)NPC_FieldIndex.Aggression;
                case "CONFIDENCE":
                    return (ushort)NPC_FieldIndex.Confidence;
                case "ENERGYLEVEL":
                    return (ushort)NPC_FieldIndex.EnergyLevel;
                case "RESPONSIBILITY":
                    return (ushort)NPC_FieldIndex.Responsibility;
                case "BUYSELLSERVICES":
                    return (ushort)NPC_FieldIndex.BuySellServices;
                case "TEACHES":
                    return (ushort)NPC_FieldIndex.Teaches;
                case "MAXIMUMTRAININGLEVEL":
                    return (ushort)NPC_FieldIndex.MaximumTrainingLevel;
                case "FLUFF":
                    return (ushort)NPC_FieldIndex.Fluff;
                case "AIPACKAGES":
                    return (ushort)NPC_FieldIndex.AIPackages;
                case "ANIMATIONS":
                    return (ushort)NPC_FieldIndex.Animations;
                case "CLASS":
                    return (ushort)NPC_FieldIndex.Class;
                case "ARMORER":
                    return (ushort)NPC_FieldIndex.Armorer;
                case "ATHLETICS":
                    return (ushort)NPC_FieldIndex.Athletics;
                case "BLADE":
                    return (ushort)NPC_FieldIndex.Blade;
                case "BLOCK":
                    return (ushort)NPC_FieldIndex.Block;
                case "BLUNT":
                    return (ushort)NPC_FieldIndex.Blunt;
                case "HANDTOHAND":
                    return (ushort)NPC_FieldIndex.HandToHand;
                case "HEAVYARMOR":
                    return (ushort)NPC_FieldIndex.HeavyArmor;
                case "ALCHEMY":
                    return (ushort)NPC_FieldIndex.Alchemy;
                case "ALTERATION":
                    return (ushort)NPC_FieldIndex.Alteration;
                case "CONJURATION":
                    return (ushort)NPC_FieldIndex.Conjuration;
                case "DESTRUCTION":
                    return (ushort)NPC_FieldIndex.Destruction;
                case "ILLUSION":
                    return (ushort)NPC_FieldIndex.Illusion;
                case "MYSTICISM":
                    return (ushort)NPC_FieldIndex.Mysticism;
                case "RESTORATION":
                    return (ushort)NPC_FieldIndex.Restoration;
                case "ACROBATICS":
                    return (ushort)NPC_FieldIndex.Acrobatics;
                case "LIGHTARMOR":
                    return (ushort)NPC_FieldIndex.LightArmor;
                case "MARKSMAN":
                    return (ushort)NPC_FieldIndex.Marksman;
                case "MERCANTILE":
                    return (ushort)NPC_FieldIndex.Mercantile;
                case "SECURITY":
                    return (ushort)NPC_FieldIndex.Security;
                case "SNEAK":
                    return (ushort)NPC_FieldIndex.Sneak;
                case "SPEECHCRAFT":
                    return (ushort)NPC_FieldIndex.Speechcraft;
                case "HEALTH":
                    return (ushort)NPC_FieldIndex.Health;
                case "STRENGTH":
                    return (ushort)NPC_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)NPC_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)NPC_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)NPC_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)NPC_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)NPC_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)NPC_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)NPC_FieldIndex.Luck;
                case "HAIR":
                    return (ushort)NPC_FieldIndex.Hair;
                case "HAIRLENGTH":
                    return (ushort)NPC_FieldIndex.HairLength;
                case "EYES":
                    return (ushort)NPC_FieldIndex.Eyes;
                case "HAIRCOLOR":
                    return (ushort)NPC_FieldIndex.HairColor;
                case "COMBATSTYLE":
                    return (ushort)NPC_FieldIndex.CombatStyle;
                case "FACEGENGEOMETRYSYMMETRIC":
                    return (ushort)NPC_FieldIndex.FaceGenGeometrySymmetric;
                case "FACEGENGEOMETRYASYMMETRIC":
                    return (ushort)NPC_FieldIndex.FaceGenGeometryAsymmetric;
                case "FACEGENTEXTURESYMMETRIC":
                    return (ushort)NPC_FieldIndex.FaceGenTextureSymmetric;
                case "UNKNOWN":
                    return (ushort)NPC_FieldIndex.Unknown;
                case "ACBSDATATYPESTATE":
                    return (ushort)NPC_FieldIndex.ACBSDataTypeState;
                case "AIDTDATATYPESTATE":
                    return (ushort)NPC_FieldIndex.AIDTDataTypeState;
                case "DATADATATYPESTATE":
                    return (ushort)NPC_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Eyes:
                    return true;
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.Items:
                    return true;
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                    return "Name";
                case NPC_FieldIndex.Model:
                    return "Model";
                case NPC_FieldIndex.Flags:
                    return "Flags";
                case NPC_FieldIndex.BaseSpellPoints:
                    return "BaseSpellPoints";
                case NPC_FieldIndex.Fatigue:
                    return "Fatigue";
                case NPC_FieldIndex.BarterGold:
                    return "BarterGold";
                case NPC_FieldIndex.LevelOffset:
                    return "LevelOffset";
                case NPC_FieldIndex.CalcMin:
                    return "CalcMin";
                case NPC_FieldIndex.CalcMax:
                    return "CalcMax";
                case NPC_FieldIndex.Factions:
                    return "Factions";
                case NPC_FieldIndex.DeathItem:
                    return "DeathItem";
                case NPC_FieldIndex.Race:
                    return "Race";
                case NPC_FieldIndex.Spells:
                    return "Spells";
                case NPC_FieldIndex.Script:
                    return "Script";
                case NPC_FieldIndex.Items:
                    return "Items";
                case NPC_FieldIndex.Aggression:
                    return "Aggression";
                case NPC_FieldIndex.Confidence:
                    return "Confidence";
                case NPC_FieldIndex.EnergyLevel:
                    return "EnergyLevel";
                case NPC_FieldIndex.Responsibility:
                    return "Responsibility";
                case NPC_FieldIndex.BuySellServices:
                    return "BuySellServices";
                case NPC_FieldIndex.Teaches:
                    return "Teaches";
                case NPC_FieldIndex.MaximumTrainingLevel:
                    return "MaximumTrainingLevel";
                case NPC_FieldIndex.Fluff:
                    return "Fluff";
                case NPC_FieldIndex.AIPackages:
                    return "AIPackages";
                case NPC_FieldIndex.Animations:
                    return "Animations";
                case NPC_FieldIndex.Class:
                    return "Class";
                case NPC_FieldIndex.Armorer:
                    return "Armorer";
                case NPC_FieldIndex.Athletics:
                    return "Athletics";
                case NPC_FieldIndex.Blade:
                    return "Blade";
                case NPC_FieldIndex.Block:
                    return "Block";
                case NPC_FieldIndex.Blunt:
                    return "Blunt";
                case NPC_FieldIndex.HandToHand:
                    return "HandToHand";
                case NPC_FieldIndex.HeavyArmor:
                    return "HeavyArmor";
                case NPC_FieldIndex.Alchemy:
                    return "Alchemy";
                case NPC_FieldIndex.Alteration:
                    return "Alteration";
                case NPC_FieldIndex.Conjuration:
                    return "Conjuration";
                case NPC_FieldIndex.Destruction:
                    return "Destruction";
                case NPC_FieldIndex.Illusion:
                    return "Illusion";
                case NPC_FieldIndex.Mysticism:
                    return "Mysticism";
                case NPC_FieldIndex.Restoration:
                    return "Restoration";
                case NPC_FieldIndex.Acrobatics:
                    return "Acrobatics";
                case NPC_FieldIndex.LightArmor:
                    return "LightArmor";
                case NPC_FieldIndex.Marksman:
                    return "Marksman";
                case NPC_FieldIndex.Mercantile:
                    return "Mercantile";
                case NPC_FieldIndex.Security:
                    return "Security";
                case NPC_FieldIndex.Sneak:
                    return "Sneak";
                case NPC_FieldIndex.Speechcraft:
                    return "Speechcraft";
                case NPC_FieldIndex.Health:
                    return "Health";
                case NPC_FieldIndex.Strength:
                    return "Strength";
                case NPC_FieldIndex.Intelligence:
                    return "Intelligence";
                case NPC_FieldIndex.Willpower:
                    return "Willpower";
                case NPC_FieldIndex.Agility:
                    return "Agility";
                case NPC_FieldIndex.Speed:
                    return "Speed";
                case NPC_FieldIndex.Endurance:
                    return "Endurance";
                case NPC_FieldIndex.Personality:
                    return "Personality";
                case NPC_FieldIndex.Luck:
                    return "Luck";
                case NPC_FieldIndex.Hair:
                    return "Hair";
                case NPC_FieldIndex.HairLength:
                    return "HairLength";
                case NPC_FieldIndex.Eyes:
                    return "Eyes";
                case NPC_FieldIndex.HairColor:
                    return "HairColor";
                case NPC_FieldIndex.CombatStyle:
                    return "CombatStyle";
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    return "FaceGenGeometrySymmetric";
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    return "FaceGenGeometryAsymmetric";
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    return "FaceGenTextureSymmetric";
                case NPC_FieldIndex.Unknown:
                    return "Unknown";
                case NPC_FieldIndex.ACBSDataTypeState:
                    return "ACBSDataTypeState";
                case NPC_FieldIndex.AIDTDataTypeState:
                    return "AIDTDataTypeState";
                case NPC_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return NPCAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                case NPC_FieldIndex.Model:
                case NPC_FieldIndex.Flags:
                case NPC_FieldIndex.BaseSpellPoints:
                case NPC_FieldIndex.Fatigue:
                case NPC_FieldIndex.BarterGold:
                case NPC_FieldIndex.LevelOffset:
                case NPC_FieldIndex.CalcMin:
                case NPC_FieldIndex.CalcMax:
                case NPC_FieldIndex.Factions:
                case NPC_FieldIndex.DeathItem:
                case NPC_FieldIndex.Race:
                case NPC_FieldIndex.Spells:
                case NPC_FieldIndex.Script:
                case NPC_FieldIndex.Items:
                case NPC_FieldIndex.Aggression:
                case NPC_FieldIndex.Confidence:
                case NPC_FieldIndex.EnergyLevel:
                case NPC_FieldIndex.Responsibility:
                case NPC_FieldIndex.BuySellServices:
                case NPC_FieldIndex.Teaches:
                case NPC_FieldIndex.MaximumTrainingLevel:
                case NPC_FieldIndex.Fluff:
                case NPC_FieldIndex.AIPackages:
                case NPC_FieldIndex.Animations:
                case NPC_FieldIndex.Class:
                case NPC_FieldIndex.Armorer:
                case NPC_FieldIndex.Athletics:
                case NPC_FieldIndex.Blade:
                case NPC_FieldIndex.Block:
                case NPC_FieldIndex.Blunt:
                case NPC_FieldIndex.HandToHand:
                case NPC_FieldIndex.HeavyArmor:
                case NPC_FieldIndex.Alchemy:
                case NPC_FieldIndex.Alteration:
                case NPC_FieldIndex.Conjuration:
                case NPC_FieldIndex.Destruction:
                case NPC_FieldIndex.Illusion:
                case NPC_FieldIndex.Mysticism:
                case NPC_FieldIndex.Restoration:
                case NPC_FieldIndex.Acrobatics:
                case NPC_FieldIndex.LightArmor:
                case NPC_FieldIndex.Marksman:
                case NPC_FieldIndex.Mercantile:
                case NPC_FieldIndex.Security:
                case NPC_FieldIndex.Sneak:
                case NPC_FieldIndex.Speechcraft:
                case NPC_FieldIndex.Health:
                case NPC_FieldIndex.Strength:
                case NPC_FieldIndex.Intelligence:
                case NPC_FieldIndex.Willpower:
                case NPC_FieldIndex.Agility:
                case NPC_FieldIndex.Speed:
                case NPC_FieldIndex.Endurance:
                case NPC_FieldIndex.Personality:
                case NPC_FieldIndex.Luck:
                case NPC_FieldIndex.Hair:
                case NPC_FieldIndex.HairLength:
                case NPC_FieldIndex.Eyes:
                case NPC_FieldIndex.HairColor:
                case NPC_FieldIndex.CombatStyle:
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                case NPC_FieldIndex.Unknown:
                case NPC_FieldIndex.ACBSDataTypeState:
                case NPC_FieldIndex.AIDTDataTypeState:
                case NPC_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                    return typeof(String);
                case NPC_FieldIndex.Model:
                    return typeof(Model);
                case NPC_FieldIndex.Flags:
                    return typeof(NPC.NPCFlag);
                case NPC_FieldIndex.BaseSpellPoints:
                    return typeof(UInt16);
                case NPC_FieldIndex.Fatigue:
                    return typeof(UInt16);
                case NPC_FieldIndex.BarterGold:
                    return typeof(UInt16);
                case NPC_FieldIndex.LevelOffset:
                    return typeof(Int16);
                case NPC_FieldIndex.CalcMin:
                    return typeof(UInt16);
                case NPC_FieldIndex.CalcMax:
                    return typeof(UInt16);
                case NPC_FieldIndex.Factions:
                    return typeof(SourceSetList<RankPlacement>);
                case NPC_FieldIndex.DeathItem:
                    return typeof(IFormIDSetLink<ItemAbstract>);
                case NPC_FieldIndex.Race:
                    return typeof(IFormIDSetLink<Race>);
                case NPC_FieldIndex.Spells:
                    return typeof(SourceSetList<IFormIDLink<SpellAbstract>>);
                case NPC_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case NPC_FieldIndex.Items:
                    return typeof(SourceSetList<ItemEntry>);
                case NPC_FieldIndex.Aggression:
                    return typeof(Byte);
                case NPC_FieldIndex.Confidence:
                    return typeof(Byte);
                case NPC_FieldIndex.EnergyLevel:
                    return typeof(Byte);
                case NPC_FieldIndex.Responsibility:
                    return typeof(Byte);
                case NPC_FieldIndex.BuySellServices:
                    return typeof(NPC.BuySellServiceFlag);
                case NPC_FieldIndex.Teaches:
                    return typeof(Skill);
                case NPC_FieldIndex.MaximumTrainingLevel:
                    return typeof(Byte);
                case NPC_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case NPC_FieldIndex.AIPackages:
                    return typeof(SourceSetList<IFormIDLink<AIPackage>>);
                case NPC_FieldIndex.Animations:
                    return typeof(SourceSetList<String>);
                case NPC_FieldIndex.Class:
                    return typeof(IFormIDSetLink<Class>);
                case NPC_FieldIndex.Armorer:
                    return typeof(Byte);
                case NPC_FieldIndex.Athletics:
                    return typeof(Byte);
                case NPC_FieldIndex.Blade:
                    return typeof(Byte);
                case NPC_FieldIndex.Block:
                    return typeof(Byte);
                case NPC_FieldIndex.Blunt:
                    return typeof(Byte);
                case NPC_FieldIndex.HandToHand:
                    return typeof(Byte);
                case NPC_FieldIndex.HeavyArmor:
                    return typeof(Byte);
                case NPC_FieldIndex.Alchemy:
                    return typeof(Byte);
                case NPC_FieldIndex.Alteration:
                    return typeof(Byte);
                case NPC_FieldIndex.Conjuration:
                    return typeof(Byte);
                case NPC_FieldIndex.Destruction:
                    return typeof(Byte);
                case NPC_FieldIndex.Illusion:
                    return typeof(Byte);
                case NPC_FieldIndex.Mysticism:
                    return typeof(Byte);
                case NPC_FieldIndex.Restoration:
                    return typeof(Byte);
                case NPC_FieldIndex.Acrobatics:
                    return typeof(Byte);
                case NPC_FieldIndex.LightArmor:
                    return typeof(Byte);
                case NPC_FieldIndex.Marksman:
                    return typeof(Byte);
                case NPC_FieldIndex.Mercantile:
                    return typeof(Byte);
                case NPC_FieldIndex.Security:
                    return typeof(Byte);
                case NPC_FieldIndex.Sneak:
                    return typeof(Byte);
                case NPC_FieldIndex.Speechcraft:
                    return typeof(Byte);
                case NPC_FieldIndex.Health:
                    return typeof(UInt32);
                case NPC_FieldIndex.Strength:
                    return typeof(Byte);
                case NPC_FieldIndex.Intelligence:
                    return typeof(Byte);
                case NPC_FieldIndex.Willpower:
                    return typeof(Byte);
                case NPC_FieldIndex.Agility:
                    return typeof(Byte);
                case NPC_FieldIndex.Speed:
                    return typeof(Byte);
                case NPC_FieldIndex.Endurance:
                    return typeof(Byte);
                case NPC_FieldIndex.Personality:
                    return typeof(Byte);
                case NPC_FieldIndex.Luck:
                    return typeof(Byte);
                case NPC_FieldIndex.Hair:
                    return typeof(IFormIDSetLink<Hair>);
                case NPC_FieldIndex.HairLength:
                    return typeof(Single);
                case NPC_FieldIndex.Eyes:
                    return typeof(SourceSetList<IFormIDLink<Eye>>);
                case NPC_FieldIndex.HairColor:
                    return typeof(Color);
                case NPC_FieldIndex.CombatStyle:
                    return typeof(IFormIDSetLink<CombatStyle>);
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    return typeof(Byte[]);
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    return typeof(Byte[]);
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    return typeof(Byte[]);
                case NPC_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case NPC_FieldIndex.ACBSDataTypeState:
                    return typeof(NPC.ACBSDataType);
                case NPC_FieldIndex.AIDTDataTypeState:
                    return typeof(NPC.AIDTDataType);
                case NPC_FieldIndex.DATADataTypeState:
                    return typeof(NPC.DATADataType);
                default:
                    return NPCAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(NPCXmlWriteTranslation);
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ACBS_HEADER = new RecordType("ACBS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType AIDT_HEADER = new RecordType("AIDT");
        public static readonly RecordType PKID_HEADER = new RecordType("PKID");
        public static readonly RecordType KFFZ_HEADER = new RecordType("KFFZ");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType LNAM_HEADER = new RecordType("LNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType HCLR_HEADER = new RecordType("HCLR");
        public static readonly RecordType ZNAM_HEADER = new RecordType("ZNAM");
        public static readonly RecordType FGGS_HEADER = new RecordType("FGGS");
        public static readonly RecordType FGGA_HEADER = new RecordType("FGGA");
        public static readonly RecordType FGTS_HEADER = new RecordType("FGTS");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = NPC__HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 20;
        public static readonly Type BinaryWriteTranslation = typeof(NPCBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class NPCCommon : NPCAbstractCommon
    {
        public static readonly NPCCommon Instance = new NPCCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            NPC item,
            NPC rhs,
            NPC def,
            ErrorMaskBuilder errorMask,
            NPC_CopyMask copyMask)
        {
            NPCAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BaseSpellPoints ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.BaseSpellPoints);
                try
                {
                    item.BaseSpellPoints = rhs.BaseSpellPoints;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fatigue ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Fatigue);
                try
                {
                    item.Fatigue = rhs.Fatigue;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BarterGold ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.BarterGold);
                try
                {
                    item.BarterGold = rhs.BarterGold;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LevelOffset ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.LevelOffset);
                try
                {
                    item.LevelOffset = rhs.LevelOffset;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CalcMin ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.CalcMin);
                try
                {
                    item.CalcMin = rhs.CalcMin;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CalcMax ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.CalcMax);
                try
                {
                    item.CalcMax = rhs.CalcMax;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Factions.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Factions);
                try
                {
                    item.Factions.SetToWithDefault<RankPlacement, RankPlacement>(
                        rhs: rhs.Factions,
                        def: def?.Factions,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Factions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (RankPlacement)r;
                                case CopyOption.MakeCopy:
                                    return RankPlacement.Copy(
                                        r,
                                        copyMask?.Factions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Factions.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DeathItem ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.DeathItem);
                try
                {
                    item.DeathItem_Property.SetLink(
                        rhs: rhs.DeathItem_Property,
                        def: def?.DeathItem_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Race ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Race);
                try
                {
                    item.Race_Property.SetLink(
                        rhs: rhs.Race_Property,
                        def: def?.Race_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Spells != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Spells);
                try
                {
                    item.Spells.SetToWithDefault(
                        rhs.Spells,
                        def?.Spells);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetLink(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Items);
                try
                {
                    item.Items.SetToWithDefault<ItemEntry, ItemEntry>(
                        rhs: rhs.Items,
                        def: def?.Items,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (ItemEntry)r;
                                case CopyOption.MakeCopy:
                                    return ItemEntry.Copy(
                                        r,
                                        copyMask?.Items?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Aggression ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Aggression);
                try
                {
                    item.Aggression = rhs.Aggression;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Confidence ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Confidence);
                try
                {
                    item.Confidence = rhs.Confidence;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EnergyLevel ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.EnergyLevel);
                try
                {
                    item.EnergyLevel = rhs.EnergyLevel;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Responsibility ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Responsibility);
                try
                {
                    item.Responsibility = rhs.Responsibility;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BuySellServices ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.BuySellServices);
                try
                {
                    item.BuySellServices = rhs.BuySellServices;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Teaches ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Teaches);
                try
                {
                    item.Teaches = rhs.Teaches;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaximumTrainingLevel ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.MaximumTrainingLevel);
                try
                {
                    item.MaximumTrainingLevel = rhs.MaximumTrainingLevel;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Fluff);
                try
                {
                    item.Fluff = rhs.Fluff;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AIPackages != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.AIPackages);
                try
                {
                    item.AIPackages.SetToWithDefault(
                        rhs.AIPackages,
                        def?.AIPackages);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Animations != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Animations);
                try
                {
                    item.Animations.SetToWithDefault(
                        rhs.Animations,
                        def?.Animations);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Class ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Class);
                try
                {
                    item.Class_Property.SetLink(
                        rhs: rhs.Class_Property,
                        def: def?.Class_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Armorer ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Armorer);
                try
                {
                    item.Armorer = rhs.Armorer;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Athletics ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Athletics);
                try
                {
                    item.Athletics = rhs.Athletics;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Blade ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Blade);
                try
                {
                    item.Blade = rhs.Blade;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Block ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Block);
                try
                {
                    item.Block = rhs.Block;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Blunt ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Blunt);
                try
                {
                    item.Blunt = rhs.Blunt;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HandToHand ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.HandToHand);
                try
                {
                    item.HandToHand = rhs.HandToHand;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HeavyArmor ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.HeavyArmor);
                try
                {
                    item.HeavyArmor = rhs.HeavyArmor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Alchemy ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Alchemy);
                try
                {
                    item.Alchemy = rhs.Alchemy;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Alteration ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Alteration);
                try
                {
                    item.Alteration = rhs.Alteration;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Conjuration ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Conjuration);
                try
                {
                    item.Conjuration = rhs.Conjuration;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Destruction ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Destruction);
                try
                {
                    item.Destruction = rhs.Destruction;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Illusion ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Illusion);
                try
                {
                    item.Illusion = rhs.Illusion;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Mysticism ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Mysticism);
                try
                {
                    item.Mysticism = rhs.Mysticism;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Restoration ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Restoration);
                try
                {
                    item.Restoration = rhs.Restoration;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Acrobatics ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Acrobatics);
                try
                {
                    item.Acrobatics = rhs.Acrobatics;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LightArmor ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.LightArmor);
                try
                {
                    item.LightArmor = rhs.LightArmor;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Marksman ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Marksman);
                try
                {
                    item.Marksman = rhs.Marksman;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Mercantile ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Mercantile);
                try
                {
                    item.Mercantile = rhs.Mercantile;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Security ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Security);
                try
                {
                    item.Security = rhs.Security;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sneak ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Sneak);
                try
                {
                    item.Sneak = rhs.Sneak;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Speechcraft ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Speechcraft);
                try
                {
                    item.Speechcraft = rhs.Speechcraft;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Health ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Health);
                try
                {
                    item.Health = rhs.Health;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Strength ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Strength);
                try
                {
                    item.Strength = rhs.Strength;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Intelligence ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Intelligence);
                try
                {
                    item.Intelligence = rhs.Intelligence;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Willpower ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Willpower);
                try
                {
                    item.Willpower = rhs.Willpower;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Agility ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Agility);
                try
                {
                    item.Agility = rhs.Agility;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Speed ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Speed);
                try
                {
                    item.Speed = rhs.Speed;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Endurance ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Endurance);
                try
                {
                    item.Endurance = rhs.Endurance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Personality ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Personality);
                try
                {
                    item.Personality = rhs.Personality;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Luck ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Luck);
                try
                {
                    item.Luck = rhs.Luck;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Hair ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Hair);
                try
                {
                    item.Hair_Property.SetLink(
                        rhs: rhs.Hair_Property,
                        def: def?.Hair_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HairLength ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.HairLength);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.HairLength,
                        rhsHasBeenSet: rhs.HairLength_IsSet,
                        defItem: def?.HairLength ?? default(Single),
                        defHasBeenSet: def?.HairLength_IsSet ?? false,
                        outRhsItem: out var rhsHairLengthItem,
                        outDefItem: out var defHairLengthItem))
                    {
                        item.HairLength = rhsHairLengthItem;
                    }
                    else
                    {
                        item.HairLength_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Eyes != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Eyes);
                try
                {
                    item.Eyes.SetToWithDefault(
                        rhs.Eyes,
                        def?.Eyes);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HairColor ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.HairColor);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.HairColor,
                        rhsHasBeenSet: rhs.HairColor_IsSet,
                        defItem: def?.HairColor ?? default(Color),
                        defHasBeenSet: def?.HairColor_IsSet ?? false,
                        outRhsItem: out var rhsHairColorItem,
                        outDefItem: out var defHairColorItem))
                    {
                        item.HairColor = rhsHairColorItem;
                    }
                    else
                    {
                        item.HairColor_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CombatStyle ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.CombatStyle);
                try
                {
                    item.CombatStyle_Property.SetLink(
                        rhs: rhs.CombatStyle_Property,
                        def: def?.CombatStyle_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FaceGenGeometrySymmetric ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.FaceGenGeometrySymmetric);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FaceGenGeometrySymmetric,
                        rhsHasBeenSet: rhs.FaceGenGeometrySymmetric_IsSet,
                        defItem: def?.FaceGenGeometrySymmetric ?? default(Byte[]),
                        defHasBeenSet: def?.FaceGenGeometrySymmetric_IsSet ?? false,
                        outRhsItem: out var rhsFaceGenGeometrySymmetricItem,
                        outDefItem: out var defFaceGenGeometrySymmetricItem))
                    {
                        item.FaceGenGeometrySymmetric = rhsFaceGenGeometrySymmetricItem;
                    }
                    else
                    {
                        item.FaceGenGeometrySymmetric_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FaceGenGeometryAsymmetric ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.FaceGenGeometryAsymmetric);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FaceGenGeometryAsymmetric,
                        rhsHasBeenSet: rhs.FaceGenGeometryAsymmetric_IsSet,
                        defItem: def?.FaceGenGeometryAsymmetric ?? default(Byte[]),
                        defHasBeenSet: def?.FaceGenGeometryAsymmetric_IsSet ?? false,
                        outRhsItem: out var rhsFaceGenGeometryAsymmetricItem,
                        outDefItem: out var defFaceGenGeometryAsymmetricItem))
                    {
                        item.FaceGenGeometryAsymmetric = rhsFaceGenGeometryAsymmetricItem;
                    }
                    else
                    {
                        item.FaceGenGeometryAsymmetric_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FaceGenTextureSymmetric ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.FaceGenTextureSymmetric);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FaceGenTextureSymmetric,
                        rhsHasBeenSet: rhs.FaceGenTextureSymmetric_IsSet,
                        defItem: def?.FaceGenTextureSymmetric ?? default(Byte[]),
                        defHasBeenSet: def?.FaceGenTextureSymmetric_IsSet ?? false,
                        outRhsItem: out var rhsFaceGenTextureSymmetricItem,
                        outDefItem: out var defFaceGenTextureSymmetricItem))
                    {
                        item.FaceGenTextureSymmetric = rhsFaceGenTextureSymmetricItem;
                    }
                    else
                    {
                        item.FaceGenTextureSymmetric_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Unknown ?? true)
            {
                errorMask?.PushIndex((int)NPC_FieldIndex.Unknown);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Unknown,
                        rhsHasBeenSet: rhs.Unknown_IsSet,
                        defItem: def?.Unknown ?? default(Byte[]),
                        defHasBeenSet: def?.Unknown_IsSet ?? false,
                        outRhsItem: out var rhsUnknownItem,
                        outDefItem: out var defUnknownItem))
                    {
                        item.Unknown = rhsUnknownItem;
                    }
                    else
                    {
                        item.Unknown_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(INPCInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Model_Unset();
            item.Flags = default(NPC.NPCFlag);
            item.BaseSpellPoints = default(UInt16);
            item.Fatigue = default(UInt16);
            item.BarterGold = default(UInt16);
            item.LevelOffset = default(Int16);
            item.CalcMin = default(UInt16);
            item.CalcMax = default(UInt16);
            item.Factions.Unset();
            item.DeathItem_Property.Unset();
            item.Race_Property.Unset();
            item.Spells.Unset();
            item.Script_Property.Unset();
            item.Items.Unset();
            item.Aggression = default(Byte);
            item.Confidence = default(Byte);
            item.EnergyLevel = default(Byte);
            item.Responsibility = default(Byte);
            item.BuySellServices = default(NPC.BuySellServiceFlag);
            item.Teaches = default(Skill);
            item.MaximumTrainingLevel = default(Byte);
            item.Fluff = default(Byte[]);
            item.AIPackages.Unset();
            item.Animations.Unset();
            item.Class_Property.Unset();
            item.Armorer = default(Byte);
            item.Athletics = default(Byte);
            item.Blade = default(Byte);
            item.Block = default(Byte);
            item.Blunt = default(Byte);
            item.HandToHand = default(Byte);
            item.HeavyArmor = default(Byte);
            item.Alchemy = default(Byte);
            item.Alteration = default(Byte);
            item.Conjuration = default(Byte);
            item.Destruction = default(Byte);
            item.Illusion = default(Byte);
            item.Mysticism = default(Byte);
            item.Restoration = default(Byte);
            item.Acrobatics = default(Byte);
            item.LightArmor = default(Byte);
            item.Marksman = default(Byte);
            item.Mercantile = default(Byte);
            item.Security = default(Byte);
            item.Sneak = default(Byte);
            item.Speechcraft = default(Byte);
            item.Health = default(UInt32);
            item.Strength = default(Byte);
            item.Intelligence = default(Byte);
            item.Willpower = default(Byte);
            item.Agility = default(Byte);
            item.Speed = default(Byte);
            item.Endurance = default(Byte);
            item.Personality = default(Byte);
            item.Luck = default(Byte);
            item.Hair_Property.Unset();
            item.HairLength_Unset();
            item.Eyes.Unset();
            item.HairColor_Unset();
            item.CombatStyle_Property.Unset();
            item.FaceGenGeometrySymmetric_Unset();
            item.FaceGenGeometryAsymmetric_Unset();
            item.FaceGenTextureSymmetric_Unset();
            item.Unknown_Unset();
            base.Clear(item);
        }

        public override void Clear(INPCAbstractInternal item)
        {
            Clear(item: (INPCInternal)item);
        }

        public override void Clear(INPCSpawnInternal item)
        {
            Clear(item: (INPCInternal)item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (INPCInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INPCInternal)item);
        }

        public NPC_Mask<bool> GetEqualsMask(
            INPCInternalGetter item,
            INPCInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NPC_Mask<bool>();
            ((NPCCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            INPCInternalGetter item,
            INPCInternalGetter rhs,
            NPC_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseSpellPoints = item.BaseSpellPoints == rhs.BaseSpellPoints;
            ret.Fatigue = item.Fatigue == rhs.Fatigue;
            ret.BarterGold = item.BarterGold == rhs.BarterGold;
            ret.LevelOffset = item.LevelOffset == rhs.LevelOffset;
            ret.CalcMin = item.CalcMin == rhs.CalcMin;
            ret.CalcMax = item.CalcMax == rhs.CalcMax;
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = item.DeathItem_Property.FormKey == rhs.DeathItem_Property.FormKey;
            ret.Race = item.Race_Property.FormKey == rhs.Race_Property.FormKey;
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Script = item.Script_Property.FormKey == rhs.Script_Property.FormKey;
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Aggression = item.Aggression == rhs.Aggression;
            ret.Confidence = item.Confidence == rhs.Confidence;
            ret.EnergyLevel = item.EnergyLevel == rhs.EnergyLevel;
            ret.Responsibility = item.Responsibility == rhs.Responsibility;
            ret.BuySellServices = item.BuySellServices == rhs.BuySellServices;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel == rhs.MaximumTrainingLevel;
            ret.Fluff = MemoryExtensions.SequenceEqual(item.Fluff, rhs.Fluff);
            ret.AIPackages = item.AIPackages.CollectionEqualsHelper(
                rhs.AIPackages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Animations = item.Animations.CollectionEqualsHelper(
                rhs.Animations,
                (l, r) => string.Equals(l, r),
                include);
            ret.Class = item.Class_Property.FormKey == rhs.Class_Property.FormKey;
            ret.Armorer = item.Armorer == rhs.Armorer;
            ret.Athletics = item.Athletics == rhs.Athletics;
            ret.Blade = item.Blade == rhs.Blade;
            ret.Block = item.Block == rhs.Block;
            ret.Blunt = item.Blunt == rhs.Blunt;
            ret.HandToHand = item.HandToHand == rhs.HandToHand;
            ret.HeavyArmor = item.HeavyArmor == rhs.HeavyArmor;
            ret.Alchemy = item.Alchemy == rhs.Alchemy;
            ret.Alteration = item.Alteration == rhs.Alteration;
            ret.Conjuration = item.Conjuration == rhs.Conjuration;
            ret.Destruction = item.Destruction == rhs.Destruction;
            ret.Illusion = item.Illusion == rhs.Illusion;
            ret.Mysticism = item.Mysticism == rhs.Mysticism;
            ret.Restoration = item.Restoration == rhs.Restoration;
            ret.Acrobatics = item.Acrobatics == rhs.Acrobatics;
            ret.LightArmor = item.LightArmor == rhs.LightArmor;
            ret.Marksman = item.Marksman == rhs.Marksman;
            ret.Mercantile = item.Mercantile == rhs.Mercantile;
            ret.Security = item.Security == rhs.Security;
            ret.Sneak = item.Sneak == rhs.Sneak;
            ret.Speechcraft = item.Speechcraft == rhs.Speechcraft;
            ret.Health = item.Health == rhs.Health;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
            ret.Hair = item.Hair_Property.FormKey == rhs.Hair_Property.FormKey;
            ret.HairLength = item.HairLength_IsSet == rhs.HairLength_IsSet && item.HairLength.EqualsWithin(rhs.HairLength);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.HairColor = item.HairColor_IsSet == rhs.HairColor_IsSet && item.HairColor.ColorOnlyEquals(rhs.HairColor);
            ret.CombatStyle = item.CombatStyle_Property.FormKey == rhs.CombatStyle_Property.FormKey;
            ret.FaceGenGeometrySymmetric = item.FaceGenGeometrySymmetric_IsSet == rhs.FaceGenGeometrySymmetric_IsSet && MemoryExtensions.SequenceEqual(item.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric);
            ret.FaceGenGeometryAsymmetric = item.FaceGenGeometryAsymmetric_IsSet == rhs.FaceGenGeometryAsymmetric_IsSet && MemoryExtensions.SequenceEqual(item.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric);
            ret.FaceGenTextureSymmetric = item.FaceGenTextureSymmetric_IsSet == rhs.FaceGenTextureSymmetric_IsSet && MemoryExtensions.SequenceEqual(item.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric);
            ret.Unknown = item.Unknown_IsSet == rhs.Unknown_IsSet && MemoryExtensions.SequenceEqual(item.Unknown, rhs.Unknown);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            INPCInternalGetter item,
            string name = null,
            NPC_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            INPCInternalGetter item,
            FileGeneration fg,
            string name = null,
            NPC_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NPC =>");
            }
            else
            {
                fg.AppendLine($"{name} (NPC) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            INPCInternalGetter item,
            FileGeneration fg,
            NPC_Mask<bool> printMask = null)
        {
            NPCAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.BaseSpellPoints ?? true)
            {
                fg.AppendLine($"BaseSpellPoints => {item.BaseSpellPoints}");
            }
            if (printMask?.Fatigue ?? true)
            {
                fg.AppendLine($"Fatigue => {item.Fatigue}");
            }
            if (printMask?.BarterGold ?? true)
            {
                fg.AppendLine($"BarterGold => {item.BarterGold}");
            }
            if (printMask?.LevelOffset ?? true)
            {
                fg.AppendLine($"LevelOffset => {item.LevelOffset}");
            }
            if (printMask?.CalcMin ?? true)
            {
                fg.AppendLine($"CalcMin => {item.CalcMin}");
            }
            if (printMask?.CalcMax ?? true)
            {
                fg.AppendLine($"CalcMax => {item.CalcMax}");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                fg.AppendLine("Factions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Factions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DeathItem ?? true)
            {
                fg.AppendLine($"DeathItem => {item.DeathItem_Property}");
            }
            if (printMask?.Race ?? true)
            {
                fg.AppendLine($"Race => {item.Race_Property}");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Spells)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script_Property}");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Items)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Aggression ?? true)
            {
                fg.AppendLine($"Aggression => {item.Aggression}");
            }
            if (printMask?.Confidence ?? true)
            {
                fg.AppendLine($"Confidence => {item.Confidence}");
            }
            if (printMask?.EnergyLevel ?? true)
            {
                fg.AppendLine($"EnergyLevel => {item.EnergyLevel}");
            }
            if (printMask?.Responsibility ?? true)
            {
                fg.AppendLine($"Responsibility => {item.Responsibility}");
            }
            if (printMask?.BuySellServices ?? true)
            {
                fg.AppendLine($"BuySellServices => {item.BuySellServices}");
            }
            if (printMask?.Teaches ?? true)
            {
                fg.AppendLine($"Teaches => {item.Teaches}");
            }
            if (printMask?.MaximumTrainingLevel ?? true)
            {
                fg.AppendLine($"MaximumTrainingLevel => {item.MaximumTrainingLevel}");
            }
            if (printMask?.Fluff ?? true)
            {
                fg.AppendLine($"Fluff => {SpanExt.ToHexString(item.Fluff)}");
            }
            if (printMask?.AIPackages?.Overall ?? true)
            {
                fg.AppendLine("AIPackages =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.AIPackages)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Animations?.Overall ?? true)
            {
                fg.AppendLine("Animations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Animations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Class ?? true)
            {
                fg.AppendLine($"Class => {item.Class_Property}");
            }
            if (printMask?.Armorer ?? true)
            {
                fg.AppendLine($"Armorer => {item.Armorer}");
            }
            if (printMask?.Athletics ?? true)
            {
                fg.AppendLine($"Athletics => {item.Athletics}");
            }
            if (printMask?.Blade ?? true)
            {
                fg.AppendLine($"Blade => {item.Blade}");
            }
            if (printMask?.Block ?? true)
            {
                fg.AppendLine($"Block => {item.Block}");
            }
            if (printMask?.Blunt ?? true)
            {
                fg.AppendLine($"Blunt => {item.Blunt}");
            }
            if (printMask?.HandToHand ?? true)
            {
                fg.AppendLine($"HandToHand => {item.HandToHand}");
            }
            if (printMask?.HeavyArmor ?? true)
            {
                fg.AppendLine($"HeavyArmor => {item.HeavyArmor}");
            }
            if (printMask?.Alchemy ?? true)
            {
                fg.AppendLine($"Alchemy => {item.Alchemy}");
            }
            if (printMask?.Alteration ?? true)
            {
                fg.AppendLine($"Alteration => {item.Alteration}");
            }
            if (printMask?.Conjuration ?? true)
            {
                fg.AppendLine($"Conjuration => {item.Conjuration}");
            }
            if (printMask?.Destruction ?? true)
            {
                fg.AppendLine($"Destruction => {item.Destruction}");
            }
            if (printMask?.Illusion ?? true)
            {
                fg.AppendLine($"Illusion => {item.Illusion}");
            }
            if (printMask?.Mysticism ?? true)
            {
                fg.AppendLine($"Mysticism => {item.Mysticism}");
            }
            if (printMask?.Restoration ?? true)
            {
                fg.AppendLine($"Restoration => {item.Restoration}");
            }
            if (printMask?.Acrobatics ?? true)
            {
                fg.AppendLine($"Acrobatics => {item.Acrobatics}");
            }
            if (printMask?.LightArmor ?? true)
            {
                fg.AppendLine($"LightArmor => {item.LightArmor}");
            }
            if (printMask?.Marksman ?? true)
            {
                fg.AppendLine($"Marksman => {item.Marksman}");
            }
            if (printMask?.Mercantile ?? true)
            {
                fg.AppendLine($"Mercantile => {item.Mercantile}");
            }
            if (printMask?.Security ?? true)
            {
                fg.AppendLine($"Security => {item.Security}");
            }
            if (printMask?.Sneak ?? true)
            {
                fg.AppendLine($"Sneak => {item.Sneak}");
            }
            if (printMask?.Speechcraft ?? true)
            {
                fg.AppendLine($"Speechcraft => {item.Speechcraft}");
            }
            if (printMask?.Health ?? true)
            {
                fg.AppendLine($"Health => {item.Health}");
            }
            if (printMask?.Strength ?? true)
            {
                fg.AppendLine($"Strength => {item.Strength}");
            }
            if (printMask?.Intelligence ?? true)
            {
                fg.AppendLine($"Intelligence => {item.Intelligence}");
            }
            if (printMask?.Willpower ?? true)
            {
                fg.AppendLine($"Willpower => {item.Willpower}");
            }
            if (printMask?.Agility ?? true)
            {
                fg.AppendLine($"Agility => {item.Agility}");
            }
            if (printMask?.Speed ?? true)
            {
                fg.AppendLine($"Speed => {item.Speed}");
            }
            if (printMask?.Endurance ?? true)
            {
                fg.AppendLine($"Endurance => {item.Endurance}");
            }
            if (printMask?.Personality ?? true)
            {
                fg.AppendLine($"Personality => {item.Personality}");
            }
            if (printMask?.Luck ?? true)
            {
                fg.AppendLine($"Luck => {item.Luck}");
            }
            if (printMask?.Hair ?? true)
            {
                fg.AppendLine($"Hair => {item.Hair_Property}");
            }
            if (printMask?.HairLength ?? true)
            {
                fg.AppendLine($"HairLength => {item.HairLength}");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Eyes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.HairColor ?? true)
            {
                fg.AppendLine($"HairColor => {item.HairColor}");
            }
            if (printMask?.CombatStyle ?? true)
            {
                fg.AppendLine($"CombatStyle => {item.CombatStyle_Property}");
            }
            if (printMask?.FaceGenGeometrySymmetric ?? true)
            {
                fg.AppendLine($"FaceGenGeometrySymmetric => {SpanExt.ToHexString(item.FaceGenGeometrySymmetric)}");
            }
            if (printMask?.FaceGenGeometryAsymmetric ?? true)
            {
                fg.AppendLine($"FaceGenGeometryAsymmetric => {SpanExt.ToHexString(item.FaceGenGeometryAsymmetric)}");
            }
            if (printMask?.FaceGenTextureSymmetric ?? true)
            {
                fg.AppendLine($"FaceGenTextureSymmetric => {SpanExt.ToHexString(item.FaceGenTextureSymmetric)}");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.ACBSDataTypeState ?? true)
            {
            }
            if (printMask?.AIDTDataTypeState ?? true)
            {
            }
            if (printMask?.DATADataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            INPCInternalGetter item,
            NPC_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Factions.Overall.HasValue && checkMask.Factions.Overall.Value != item.Factions.HasBeenSet) return false;
            if (checkMask.DeathItem.HasValue && checkMask.DeathItem.Value != item.DeathItem_Property.HasBeenSet) return false;
            if (checkMask.Race.HasValue && checkMask.Race.Value != item.Race_Property.HasBeenSet) return false;
            if (checkMask.Spells.Overall.HasValue && checkMask.Spells.Overall.Value != item.Spells.HasBeenSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            if (checkMask.AIPackages.Overall.HasValue && checkMask.AIPackages.Overall.Value != item.AIPackages.HasBeenSet) return false;
            if (checkMask.Animations.Overall.HasValue && checkMask.Animations.Overall.Value != item.Animations.HasBeenSet) return false;
            if (checkMask.Class.HasValue && checkMask.Class.Value != item.Class_Property.HasBeenSet) return false;
            if (checkMask.Hair.HasValue && checkMask.Hair.Value != item.Hair_Property.HasBeenSet) return false;
            if (checkMask.HairLength.HasValue && checkMask.HairLength.Value != item.HairLength_IsSet) return false;
            if (checkMask.Eyes.Overall.HasValue && checkMask.Eyes.Overall.Value != item.Eyes.HasBeenSet) return false;
            if (checkMask.HairColor.HasValue && checkMask.HairColor.Value != item.HairColor_IsSet) return false;
            if (checkMask.CombatStyle.HasValue && checkMask.CombatStyle.Value != item.CombatStyle_Property.HasBeenSet) return false;
            if (checkMask.FaceGenGeometrySymmetric.HasValue && checkMask.FaceGenGeometrySymmetric.Value != item.FaceGenGeometrySymmetric_IsSet) return false;
            if (checkMask.FaceGenGeometryAsymmetric.HasValue && checkMask.FaceGenGeometryAsymmetric.Value != item.FaceGenGeometryAsymmetric_IsSet) return false;
            if (checkMask.FaceGenTextureSymmetric.HasValue && checkMask.FaceGenTextureSymmetric.Value != item.FaceGenTextureSymmetric_IsSet) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            INPCInternalGetter item,
            NPC_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Flags = true;
            mask.BaseSpellPoints = true;
            mask.Fatigue = true;
            mask.BarterGold = true;
            mask.LevelOffset = true;
            mask.CalcMin = true;
            mask.CalcMax = true;
            mask.Factions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RankPlacement_Mask<bool>>>>(item.Factions.HasBeenSet, item.Factions.WithIndex().Select((i) => new MaskItemIndexed<bool, RankPlacement_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.DeathItem = item.DeathItem_Property.HasBeenSet;
            mask.Race = item.Race_Property.HasBeenSet;
            mask.Spells = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Spells.HasBeenSet, null);
            mask.Script = item.Script_Property.HasBeenSet;
            mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ItemEntry_Mask<bool>>>>(item.Items.HasBeenSet, item.Items.WithIndex().Select((i) => new MaskItemIndexed<bool, ItemEntry_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Aggression = true;
            mask.Confidence = true;
            mask.EnergyLevel = true;
            mask.Responsibility = true;
            mask.BuySellServices = true;
            mask.Teaches = true;
            mask.MaximumTrainingLevel = true;
            mask.Fluff = true;
            mask.AIPackages = new MaskItem<bool, IEnumerable<(int, bool)>>(item.AIPackages.HasBeenSet, null);
            mask.Animations = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Animations.HasBeenSet, null);
            mask.Class = item.Class_Property.HasBeenSet;
            mask.Armorer = true;
            mask.Athletics = true;
            mask.Blade = true;
            mask.Block = true;
            mask.Blunt = true;
            mask.HandToHand = true;
            mask.HeavyArmor = true;
            mask.Alchemy = true;
            mask.Alteration = true;
            mask.Conjuration = true;
            mask.Destruction = true;
            mask.Illusion = true;
            mask.Mysticism = true;
            mask.Restoration = true;
            mask.Acrobatics = true;
            mask.LightArmor = true;
            mask.Marksman = true;
            mask.Mercantile = true;
            mask.Security = true;
            mask.Sneak = true;
            mask.Speechcraft = true;
            mask.Health = true;
            mask.Strength = true;
            mask.Intelligence = true;
            mask.Willpower = true;
            mask.Agility = true;
            mask.Speed = true;
            mask.Endurance = true;
            mask.Personality = true;
            mask.Luck = true;
            mask.Hair = item.Hair_Property.HasBeenSet;
            mask.HairLength = item.HairLength_IsSet;
            mask.Eyes = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Eyes.HasBeenSet, null);
            mask.HairColor = item.HairColor_IsSet;
            mask.CombatStyle = item.CombatStyle_Property.HasBeenSet;
            mask.FaceGenGeometrySymmetric = item.FaceGenGeometrySymmetric_IsSet;
            mask.FaceGenGeometryAsymmetric = item.FaceGenGeometryAsymmetric_IsSet;
            mask.FaceGenTextureSymmetric = item.FaceGenTextureSymmetric_IsSet;
            mask.Unknown = item.Unknown_IsSet;
            mask.ACBSDataTypeState = true;
            mask.AIDTDataTypeState = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static NPC_FieldIndex ConvertFieldIndex(NPCAbstract_FieldIndex index)
        {
            switch (index)
            {
                case NPCAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (NPC_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.FormKey:
                    return (NPC_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.Version:
                    return (NPC_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.EditorID:
                    return (NPC_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (NPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static NPC_FieldIndex ConvertFieldIndex(NPCSpawn_FieldIndex index)
        {
            switch (index)
            {
                case NPCSpawn_FieldIndex.MajorRecordFlagsRaw:
                    return (NPC_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.FormKey:
                    return (NPC_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.Version:
                    return (NPC_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.EditorID:
                    return (NPC_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.OblivionMajorRecordFlags:
                    return (NPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static NPC_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (NPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (NPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (NPC_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (NPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static NPC_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (NPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (NPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (NPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            INPCInternalGetter lhs,
            INPCInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Model_IsSet != rhs.Model_IsSet) return false;
            if (lhs.Model_IsSet)
            {
                if (!object.Equals(lhs.Model, rhs.Model)) return false;
            }
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.BaseSpellPoints != rhs.BaseSpellPoints) return false;
            if (lhs.Fatigue != rhs.Fatigue) return false;
            if (lhs.BarterGold != rhs.BarterGold) return false;
            if (lhs.LevelOffset != rhs.LevelOffset) return false;
            if (lhs.CalcMin != rhs.CalcMin) return false;
            if (lhs.CalcMax != rhs.CalcMax) return false;
            if (lhs.Factions.HasBeenSet != rhs.Factions.HasBeenSet) return false;
            if (lhs.Factions.HasBeenSet)
            {
                if (!lhs.Factions.SequenceEqual(rhs.Factions)) return false;
            }
            if (lhs.DeathItem_Property.HasBeenSet != rhs.DeathItem_Property.HasBeenSet) return false;
            if (lhs.DeathItem_Property.HasBeenSet)
            {
                if (!lhs.DeathItem_Property.Equals(rhs.DeathItem_Property)) return false;
            }
            if (lhs.Race_Property.HasBeenSet != rhs.Race_Property.HasBeenSet) return false;
            if (lhs.Race_Property.HasBeenSet)
            {
                if (!lhs.Race_Property.Equals(rhs.Race_Property)) return false;
            }
            if (lhs.Spells.HasBeenSet != rhs.Spells.HasBeenSet) return false;
            if (lhs.Spells.HasBeenSet)
            {
                if (!lhs.Spells.SequenceEqual(rhs.Spells)) return false;
            }
            if (lhs.Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (lhs.Script_Property.HasBeenSet)
            {
                if (!lhs.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (lhs.Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (lhs.Items.HasBeenSet)
            {
                if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            }
            if (lhs.Aggression != rhs.Aggression) return false;
            if (lhs.Confidence != rhs.Confidence) return false;
            if (lhs.EnergyLevel != rhs.EnergyLevel) return false;
            if (lhs.Responsibility != rhs.Responsibility) return false;
            if (lhs.BuySellServices != rhs.BuySellServices) return false;
            if (lhs.Teaches != rhs.Teaches) return false;
            if (lhs.MaximumTrainingLevel != rhs.MaximumTrainingLevel) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Fluff, rhs.Fluff)) return false;
            if (lhs.AIPackages.HasBeenSet != rhs.AIPackages.HasBeenSet) return false;
            if (lhs.AIPackages.HasBeenSet)
            {
                if (!lhs.AIPackages.SequenceEqual(rhs.AIPackages)) return false;
            }
            if (lhs.Animations.HasBeenSet != rhs.Animations.HasBeenSet) return false;
            if (lhs.Animations.HasBeenSet)
            {
                if (!lhs.Animations.SequenceEqual(rhs.Animations)) return false;
            }
            if (lhs.Class_Property.HasBeenSet != rhs.Class_Property.HasBeenSet) return false;
            if (lhs.Class_Property.HasBeenSet)
            {
                if (!lhs.Class_Property.Equals(rhs.Class_Property)) return false;
            }
            if (lhs.Armorer != rhs.Armorer) return false;
            if (lhs.Athletics != rhs.Athletics) return false;
            if (lhs.Blade != rhs.Blade) return false;
            if (lhs.Block != rhs.Block) return false;
            if (lhs.Blunt != rhs.Blunt) return false;
            if (lhs.HandToHand != rhs.HandToHand) return false;
            if (lhs.HeavyArmor != rhs.HeavyArmor) return false;
            if (lhs.Alchemy != rhs.Alchemy) return false;
            if (lhs.Alteration != rhs.Alteration) return false;
            if (lhs.Conjuration != rhs.Conjuration) return false;
            if (lhs.Destruction != rhs.Destruction) return false;
            if (lhs.Illusion != rhs.Illusion) return false;
            if (lhs.Mysticism != rhs.Mysticism) return false;
            if (lhs.Restoration != rhs.Restoration) return false;
            if (lhs.Acrobatics != rhs.Acrobatics) return false;
            if (lhs.LightArmor != rhs.LightArmor) return false;
            if (lhs.Marksman != rhs.Marksman) return false;
            if (lhs.Mercantile != rhs.Mercantile) return false;
            if (lhs.Security != rhs.Security) return false;
            if (lhs.Sneak != rhs.Sneak) return false;
            if (lhs.Speechcraft != rhs.Speechcraft) return false;
            if (lhs.Health != rhs.Health) return false;
            if (lhs.Strength != rhs.Strength) return false;
            if (lhs.Intelligence != rhs.Intelligence) return false;
            if (lhs.Willpower != rhs.Willpower) return false;
            if (lhs.Agility != rhs.Agility) return false;
            if (lhs.Speed != rhs.Speed) return false;
            if (lhs.Endurance != rhs.Endurance) return false;
            if (lhs.Personality != rhs.Personality) return false;
            if (lhs.Luck != rhs.Luck) return false;
            if (lhs.Hair_Property.HasBeenSet != rhs.Hair_Property.HasBeenSet) return false;
            if (lhs.Hair_Property.HasBeenSet)
            {
                if (!lhs.Hair_Property.Equals(rhs.Hair_Property)) return false;
            }
            if (lhs.HairLength_IsSet != rhs.HairLength_IsSet) return false;
            if (lhs.HairLength_IsSet)
            {
                if (!lhs.HairLength.EqualsWithin(rhs.HairLength)) return false;
            }
            if (lhs.Eyes.HasBeenSet != rhs.Eyes.HasBeenSet) return false;
            if (lhs.Eyes.HasBeenSet)
            {
                if (!lhs.Eyes.SequenceEqual(rhs.Eyes)) return false;
            }
            if (lhs.HairColor_IsSet != rhs.HairColor_IsSet) return false;
            if (lhs.HairColor_IsSet)
            {
                if (!lhs.HairColor.ColorOnlyEquals(rhs.HairColor)) return false;
            }
            if (lhs.CombatStyle_Property.HasBeenSet != rhs.CombatStyle_Property.HasBeenSet) return false;
            if (lhs.CombatStyle_Property.HasBeenSet)
            {
                if (!lhs.CombatStyle_Property.Equals(rhs.CombatStyle_Property)) return false;
            }
            if (lhs.FaceGenGeometrySymmetric_IsSet != rhs.FaceGenGeometrySymmetric_IsSet) return false;
            if (lhs.FaceGenGeometrySymmetric_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric)) return false;
            }
            if (lhs.FaceGenGeometryAsymmetric_IsSet != rhs.FaceGenGeometryAsymmetric_IsSet) return false;
            if (lhs.FaceGenGeometryAsymmetric_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric)) return false;
            }
            if (lhs.FaceGenTextureSymmetric_IsSet != rhs.FaceGenTextureSymmetric_IsSet) return false;
            if (lhs.FaceGenTextureSymmetric_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric)) return false;
            }
            if (lhs.Unknown_IsSet != rhs.Unknown_IsSet) return false;
            if (lhs.Unknown_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown, rhs.Unknown)) return false;
            }
            if (lhs.ACBSDataTypeState != rhs.ACBSDataTypeState) return false;
            if (lhs.AIDTDataTypeState != rhs.AIDTDataTypeState) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }

        public override bool Equals(
            INPCAbstractInternalGetter lhs,
            INPCAbstractInternalGetter rhs)
        {
            return Equals(
                lhs: (INPCInternalGetter)lhs,
                rhs: rhs as INPCInternalGetter);
        }

        public override bool Equals(
            INPCSpawnInternalGetter lhs,
            INPCSpawnInternalGetter rhs)
        {
            return Equals(
                lhs: (INPCInternalGetter)lhs,
                rhs: rhs as INPCInternalGetter);
        }

        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (INPCInternalGetter)lhs,
                rhs: rhs as INPCInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (INPCInternalGetter)lhs,
                rhs: rhs as INPCInternalGetter);
        }

        public virtual int GetHashCode(INPCInternalGetter item)
        {
            int ret = 0;
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Model_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Model).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BaseSpellPoints).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fatigue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BarterGold).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LevelOffset).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CalcMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CalcMax).CombineHashCode(ret);
            if (item.Factions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Factions).CombineHashCode(ret);
            }
            if (item.DeathItem_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.DeathItem).CombineHashCode(ret);
            }
            if (item.Race_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Race).CombineHashCode(ret);
            }
            if (item.Spells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Spells).CombineHashCode(ret);
            }
            if (item.Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Script).CombineHashCode(ret);
            }
            if (item.Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Items).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Aggression).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Confidence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EnergyLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Responsibility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BuySellServices).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Teaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaximumTrainingLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fluff).CombineHashCode(ret);
            if (item.AIPackages.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.AIPackages).CombineHashCode(ret);
            }
            if (item.Animations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Animations).CombineHashCode(ret);
            }
            if (item.Class_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Class).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Armorer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Athletics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Blade).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Block).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Blunt).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HandToHand).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HeavyArmor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Alchemy).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Alteration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Conjuration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Destruction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Illusion).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Mysticism).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Restoration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Acrobatics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LightArmor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Marksman).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Mercantile).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Security).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Sneak).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Speechcraft).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Strength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Intelligence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Willpower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Agility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Endurance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Personality).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Luck).CombineHashCode(ret);
            if (item.Hair_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Hair).CombineHashCode(ret);
            }
            if (item.HairLength_IsSet)
            {
                ret = HashHelper.GetHashCode(item.HairLength).CombineHashCode(ret);
            }
            if (item.Eyes.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Eyes).CombineHashCode(ret);
            }
            if (item.HairColor_IsSet)
            {
                ret = HashHelper.GetHashCode(item.HairColor).CombineHashCode(ret);
            }
            if (item.CombatStyle_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.CombatStyle).CombineHashCode(ret);
            }
            if (item.FaceGenGeometrySymmetric_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FaceGenGeometrySymmetric).CombineHashCode(ret);
            }
            if (item.FaceGenGeometryAsymmetric_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FaceGenGeometryAsymmetric).CombineHashCode(ret);
            }
            if (item.FaceGenTextureSymmetric_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FaceGenTextureSymmetric).CombineHashCode(ret);
            }
            if (item.Unknown_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Unknown).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.ACBSDataTypeState).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AIDTDataTypeState).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(INPCAbstractInternalGetter item)
        {
            return GetHashCode(item: (INPCInternalGetter)item);
        }

        public override int GetHashCode(INPCSpawnInternalGetter item)
        {
            return GetHashCode(item: (INPCInternalGetter)item);
        }

        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (INPCInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (INPCInternalGetter)item);
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class NPCXmlWriteTranslation :
        NPCAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static NPCXmlWriteTranslation Instance = new NPCXmlWriteTranslation();

        public static void WriteToNodeXml(
            INPCInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            NPCAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)NPC_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)NPC_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Model));
            }
            if (item.ACBSDataTypeState.HasFlag(NPC.ACBSDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<NPC.NPCFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)NPC_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.BaseSpellPoints) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BaseSpellPoints),
                        item: item.BaseSpellPoints,
                        fieldIndex: (int)NPC_FieldIndex.BaseSpellPoints,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Fatigue) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fatigue),
                        item: item.Fatigue,
                        fieldIndex: (int)NPC_FieldIndex.Fatigue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.BarterGold) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BarterGold),
                        item: item.BarterGold,
                        fieldIndex: (int)NPC_FieldIndex.BarterGold,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.LevelOffset) ?? true))
                {
                    Int16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LevelOffset),
                        item: item.LevelOffset,
                        fieldIndex: (int)NPC_FieldIndex.LevelOffset,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.CalcMin) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CalcMin),
                        item: item.CalcMin,
                        fieldIndex: (int)NPC_FieldIndex.CalcMin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.CalcMax) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CalcMax),
                        item: item.CalcMax,
                        fieldIndex: (int)NPC_FieldIndex.CalcMax,
                        errorMask: errorMask);
                }
            }
            if (item.Factions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Factions) ?? true))
            {
                ListXmlTranslation<IRankPlacementGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Factions),
                    item: item.Factions,
                    fieldIndex: (int)NPC_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Factions),
                    transl: (XElement subNode, IRankPlacementGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((RankPlacementXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.DeathItem_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.DeathItem) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DeathItem),
                    item: item.DeathItem_Property?.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.DeathItem,
                    errorMask: errorMask);
            }
            if (item.Race_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Race) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Race),
                    item: item.Race_Property?.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.Race,
                    errorMask: errorMask);
            }
            if (item.Spells.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Spells) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<ISpellAbstractInternalGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)NPC_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Spells),
                    transl: (XElement subNode, IFormIDLinkGetter<ISpellAbstractInternalGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Items.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<IItemEntryGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)NPC_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Items),
                    transl: (XElement subNode, IItemEntryGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((ItemEntryXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.AIDTDataTypeState.HasFlag(NPC.AIDTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Aggression) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Aggression),
                        item: item.Aggression,
                        fieldIndex: (int)NPC_FieldIndex.Aggression,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Confidence) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Confidence),
                        item: item.Confidence,
                        fieldIndex: (int)NPC_FieldIndex.Confidence,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.EnergyLevel) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EnergyLevel),
                        item: item.EnergyLevel,
                        fieldIndex: (int)NPC_FieldIndex.EnergyLevel,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Responsibility) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Responsibility),
                        item: item.Responsibility,
                        fieldIndex: (int)NPC_FieldIndex.Responsibility,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.BuySellServices) ?? true))
                {
                    EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.BuySellServices),
                        item: item.BuySellServices,
                        fieldIndex: (int)NPC_FieldIndex.BuySellServices,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Teaches) ?? true))
                {
                    EnumXmlTranslation<Skill>.Instance.Write(
                        node: node,
                        name: nameof(item.Teaches),
                        item: item.Teaches,
                        fieldIndex: (int)NPC_FieldIndex.Teaches,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.MaximumTrainingLevel) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaximumTrainingLevel),
                        item: item.MaximumTrainingLevel,
                        fieldIndex: (int)NPC_FieldIndex.MaximumTrainingLevel,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Fluff) ?? true))
                {
                    ByteArrayXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff),
                        item: item.Fluff,
                        fieldIndex: (int)NPC_FieldIndex.Fluff,
                        errorMask: errorMask);
                }
            }
            if (item.AIPackages.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.AIPackages) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IAIPackageInternalGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.AIPackages),
                    item: item.AIPackages,
                    fieldIndex: (int)NPC_FieldIndex.AIPackages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.AIPackages),
                    transl: (XElement subNode, IFormIDLinkGetter<IAIPackageInternalGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.Animations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Animations) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.Animations),
                    item: item.Animations,
                    fieldIndex: (int)NPC_FieldIndex.Animations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Animations),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if (item.Class_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Class) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Class),
                    item: item.Class_Property?.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.Class,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(NPC.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Armorer) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Armorer),
                        item: item.Armorer,
                        fieldIndex: (int)NPC_FieldIndex.Armorer,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Athletics) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Athletics),
                        item: item.Athletics,
                        fieldIndex: (int)NPC_FieldIndex.Athletics,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Blade) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Blade),
                        item: item.Blade,
                        fieldIndex: (int)NPC_FieldIndex.Blade,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Block) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Block),
                        item: item.Block,
                        fieldIndex: (int)NPC_FieldIndex.Block,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Blunt) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Blunt),
                        item: item.Blunt,
                        fieldIndex: (int)NPC_FieldIndex.Blunt,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.HandToHand) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HandToHand),
                        item: item.HandToHand,
                        fieldIndex: (int)NPC_FieldIndex.HandToHand,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.HeavyArmor) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HeavyArmor),
                        item: item.HeavyArmor,
                        fieldIndex: (int)NPC_FieldIndex.HeavyArmor,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Alchemy) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Alchemy),
                        item: item.Alchemy,
                        fieldIndex: (int)NPC_FieldIndex.Alchemy,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Alteration) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Alteration),
                        item: item.Alteration,
                        fieldIndex: (int)NPC_FieldIndex.Alteration,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Conjuration) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Conjuration),
                        item: item.Conjuration,
                        fieldIndex: (int)NPC_FieldIndex.Conjuration,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Destruction) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Destruction),
                        item: item.Destruction,
                        fieldIndex: (int)NPC_FieldIndex.Destruction,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Illusion) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Illusion),
                        item: item.Illusion,
                        fieldIndex: (int)NPC_FieldIndex.Illusion,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Mysticism) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Mysticism),
                        item: item.Mysticism,
                        fieldIndex: (int)NPC_FieldIndex.Mysticism,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Restoration) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Restoration),
                        item: item.Restoration,
                        fieldIndex: (int)NPC_FieldIndex.Restoration,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Acrobatics) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Acrobatics),
                        item: item.Acrobatics,
                        fieldIndex: (int)NPC_FieldIndex.Acrobatics,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.LightArmor) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LightArmor),
                        item: item.LightArmor,
                        fieldIndex: (int)NPC_FieldIndex.LightArmor,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Marksman) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Marksman),
                        item: item.Marksman,
                        fieldIndex: (int)NPC_FieldIndex.Marksman,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Mercantile) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Mercantile),
                        item: item.Mercantile,
                        fieldIndex: (int)NPC_FieldIndex.Mercantile,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Security) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Security),
                        item: item.Security,
                        fieldIndex: (int)NPC_FieldIndex.Security,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Sneak) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Sneak),
                        item: item.Sneak,
                        fieldIndex: (int)NPC_FieldIndex.Sneak,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Speechcraft) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Speechcraft),
                        item: item.Speechcraft,
                        fieldIndex: (int)NPC_FieldIndex.Speechcraft,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Health) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Health),
                        item: item.Health,
                        fieldIndex: (int)NPC_FieldIndex.Health,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Strength) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Strength),
                        item: item.Strength,
                        fieldIndex: (int)NPC_FieldIndex.Strength,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Intelligence) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Intelligence),
                        item: item.Intelligence,
                        fieldIndex: (int)NPC_FieldIndex.Intelligence,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Willpower) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Willpower),
                        item: item.Willpower,
                        fieldIndex: (int)NPC_FieldIndex.Willpower,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Agility) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Agility),
                        item: item.Agility,
                        fieldIndex: (int)NPC_FieldIndex.Agility,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Speed) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Speed),
                        item: item.Speed,
                        fieldIndex: (int)NPC_FieldIndex.Speed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Endurance) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Endurance),
                        item: item.Endurance,
                        fieldIndex: (int)NPC_FieldIndex.Endurance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Personality) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Personality),
                        item: item.Personality,
                        fieldIndex: (int)NPC_FieldIndex.Personality,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Luck) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Luck),
                        item: item.Luck,
                        fieldIndex: (int)NPC_FieldIndex.Luck,
                        errorMask: errorMask);
                }
            }
            if (item.Hair_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Hair) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Hair),
                    item: item.Hair_Property?.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.Hair,
                    errorMask: errorMask);
            }
            if (item.HairLength_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.HairLength) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HairLength),
                    item: item.HairLength,
                    fieldIndex: (int)NPC_FieldIndex.HairLength,
                    errorMask: errorMask);
            }
            if (item.Eyes.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Eyes) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IEyeInternalGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Eyes),
                    item: item.Eyes,
                    fieldIndex: (int)NPC_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Eyes),
                    transl: (XElement subNode, IFormIDLinkGetter<IEyeInternalGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.HairColor_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.HairColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HairColor),
                    item: item.HairColor,
                    fieldIndex: (int)NPC_FieldIndex.HairColor,
                    errorMask: errorMask);
            }
            if (item.CombatStyle_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.CombatStyle) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CombatStyle),
                    item: item.CombatStyle_Property?.FormKey,
                    fieldIndex: (int)NPC_FieldIndex.CombatStyle,
                    errorMask: errorMask);
            }
            if (item.FaceGenGeometrySymmetric_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.FaceGenGeometrySymmetric) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenGeometrySymmetric),
                    item: item.FaceGenGeometrySymmetric,
                    fieldIndex: (int)NPC_FieldIndex.FaceGenGeometrySymmetric,
                    errorMask: errorMask);
            }
            if (item.FaceGenGeometryAsymmetric_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.FaceGenGeometryAsymmetric) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenGeometryAsymmetric),
                    item: item.FaceGenGeometryAsymmetric,
                    fieldIndex: (int)NPC_FieldIndex.FaceGenGeometryAsymmetric,
                    errorMask: errorMask);
            }
            if (item.FaceGenTextureSymmetric_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.FaceGenTextureSymmetric) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenTextureSymmetric),
                    item: item.FaceGenTextureSymmetric,
                    fieldIndex: (int)NPC_FieldIndex.FaceGenTextureSymmetric,
                    errorMask: errorMask);
            }
            if (item.Unknown_IsSet
                && (translationMask?.GetShouldTranslate((int)NPC_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)NPC_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.ACBSDataTypeState) ?? true))
            {
                EnumXmlTranslation<NPC.ACBSDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.ACBSDataTypeState),
                    item: item.ACBSDataTypeState,
                    fieldIndex: (int)NPC_FieldIndex.ACBSDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.AIDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<NPC.AIDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.AIDTDataTypeState),
                    item: item.AIDTDataTypeState,
                    fieldIndex: (int)NPC_FieldIndex.AIDTDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NPC_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<NPC.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)NPC_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            INPCInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.NPC");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.NPC");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            INPCAbstractInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            INPCSpawnInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (INPCInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class NPCXmlCreateTranslation : NPCAbstractXmlCreateTranslation
    {
        public new readonly static NPCXmlCreateTranslation Instance = new NPCXmlCreateTranslation();

        public static void FillPublicXml(
            INPCInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    NPCXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            INPCInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)NPC_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Flags);
                        if (EnumXmlTranslation<NPC.NPCFlag>.Instance.Parse(
                            node: node,
                            item: out NPC.NPCFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(NPC.NPCFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.ACBSDataTypeState |= NPC.ACBSDataType.Has;
                    break;
                case "BaseSpellPoints":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.BaseSpellPoints);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 BaseSpellPointsParse,
                            errorMask: errorMask))
                        {
                            item.BaseSpellPoints = BaseSpellPointsParse;
                        }
                        else
                        {
                            item.BaseSpellPoints = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fatigue":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Fatigue);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 FatigueParse,
                            errorMask: errorMask))
                        {
                            item.Fatigue = FatigueParse;
                        }
                        else
                        {
                            item.Fatigue = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BarterGold":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.BarterGold);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 BarterGoldParse,
                            errorMask: errorMask))
                        {
                            item.BarterGold = BarterGoldParse;
                        }
                        else
                        {
                            item.BarterGold = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LevelOffset":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.LevelOffset);
                        if (Int16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int16 LevelOffsetParse,
                            errorMask: errorMask))
                        {
                            item.LevelOffset = LevelOffsetParse;
                        }
                        else
                        {
                            item.LevelOffset = default(Int16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CalcMin":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.CalcMin);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 CalcMinParse,
                            errorMask: errorMask))
                        {
                            item.CalcMin = CalcMinParse;
                        }
                        else
                        {
                            item.CalcMin = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CalcMax":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.CalcMax);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 CalcMaxParse,
                            errorMask: errorMask))
                        {
                            item.CalcMax = CalcMaxParse;
                        }
                        else
                        {
                            item.CalcMax = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Factions);
                        if (ListXmlTranslation<RankPlacement>.Instance.Parse(
                            node: node,
                            enumer: out var FactionsItem,
                            transl: LoquiXmlTranslation<RankPlacement>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Factions.SetTo(FactionsItem);
                        }
                        else
                        {
                            item.Factions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DeathItem":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.DeathItem_Property,
                        fieldIndex: (int)NPC_FieldIndex.DeathItem,
                        errorMask: errorMask);
                    break;
                case "Race":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Race_Property,
                        fieldIndex: (int)NPC_FieldIndex.Race,
                        errorMask: errorMask);
                    break;
                case "Spells":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Spells);
                        if (ListXmlTranslation<IFormIDLink<SpellAbstract>>.Instance.Parse(
                            node: node,
                            enumer: out var SpellsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Spells.SetTo(SpellsItem);
                        }
                        else
                        {
                            item.Spells.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Script_Property,
                        fieldIndex: (int)NPC_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "Items":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Items);
                        if (ListXmlTranslation<ItemEntry>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<ItemEntry>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Aggression":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Aggression);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte AggressionParse,
                            errorMask: errorMask))
                        {
                            item.Aggression = AggressionParse;
                        }
                        else
                        {
                            item.Aggression = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.AIDTDataTypeState |= NPC.AIDTDataType.Has;
                    break;
                case "Confidence":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Confidence);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ConfidenceParse,
                            errorMask: errorMask))
                        {
                            item.Confidence = ConfidenceParse;
                        }
                        else
                        {
                            item.Confidence = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnergyLevel":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.EnergyLevel);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte EnergyLevelParse,
                            errorMask: errorMask))
                        {
                            item.EnergyLevel = EnergyLevelParse;
                        }
                        else
                        {
                            item.EnergyLevel = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Responsibility":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Responsibility);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ResponsibilityParse,
                            errorMask: errorMask))
                        {
                            item.Responsibility = ResponsibilityParse;
                        }
                        else
                        {
                            item.Responsibility = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BuySellServices":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.BuySellServices);
                        if (EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Parse(
                            node: node,
                            item: out NPC.BuySellServiceFlag BuySellServicesParse,
                            errorMask: errorMask))
                        {
                            item.BuySellServices = BuySellServicesParse;
                        }
                        else
                        {
                            item.BuySellServices = default(NPC.BuySellServiceFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Teaches":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Teaches);
                        if (EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            item: out Skill TeachesParse,
                            errorMask: errorMask))
                        {
                            item.Teaches = TeachesParse;
                        }
                        else
                        {
                            item.Teaches = default(Skill);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumTrainingLevel":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.MaximumTrainingLevel);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MaximumTrainingLevelParse,
                            errorMask: errorMask))
                        {
                            item.MaximumTrainingLevel = MaximumTrainingLevelParse;
                        }
                        else
                        {
                            item.MaximumTrainingLevel = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.Fluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIPackages":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.AIPackages);
                        if (ListXmlTranslation<IFormIDLink<AIPackage>>.Instance.Parse(
                            node: node,
                            enumer: out var AIPackagesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.AIPackages.SetTo(AIPackagesItem);
                        }
                        else
                        {
                            item.AIPackages.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Animations":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Animations);
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var AnimationsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Animations.SetTo(AnimationsItem);
                        }
                        else
                        {
                            item.Animations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Class":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Class_Property,
                        fieldIndex: (int)NPC_FieldIndex.Class,
                        errorMask: errorMask);
                    break;
                case "Armorer":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Armorer);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ArmorerParse,
                            errorMask: errorMask))
                        {
                            item.Armorer = ArmorerParse;
                        }
                        else
                        {
                            item.Armorer = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= NPC.DATADataType.Has;
                    break;
                case "Athletics":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Athletics);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte AthleticsParse,
                            errorMask: errorMask))
                        {
                            item.Athletics = AthleticsParse;
                        }
                        else
                        {
                            item.Athletics = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Blade":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Blade);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte BladeParse,
                            errorMask: errorMask))
                        {
                            item.Blade = BladeParse;
                        }
                        else
                        {
                            item.Blade = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Block":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Block);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte BlockParse,
                            errorMask: errorMask))
                        {
                            item.Block = BlockParse;
                        }
                        else
                        {
                            item.Block = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Blunt":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Blunt);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte BluntParse,
                            errorMask: errorMask))
                        {
                            item.Blunt = BluntParse;
                        }
                        else
                        {
                            item.Blunt = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HandToHand":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.HandToHand);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte HandToHandParse,
                            errorMask: errorMask))
                        {
                            item.HandToHand = HandToHandParse;
                        }
                        else
                        {
                            item.HandToHand = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeavyArmor":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.HeavyArmor);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte HeavyArmorParse,
                            errorMask: errorMask))
                        {
                            item.HeavyArmor = HeavyArmorParse;
                        }
                        else
                        {
                            item.HeavyArmor = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Alchemy":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Alchemy);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte AlchemyParse,
                            errorMask: errorMask))
                        {
                            item.Alchemy = AlchemyParse;
                        }
                        else
                        {
                            item.Alchemy = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Alteration":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Alteration);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte AlterationParse,
                            errorMask: errorMask))
                        {
                            item.Alteration = AlterationParse;
                        }
                        else
                        {
                            item.Alteration = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conjuration":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Conjuration);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ConjurationParse,
                            errorMask: errorMask))
                        {
                            item.Conjuration = ConjurationParse;
                        }
                        else
                        {
                            item.Conjuration = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Destruction":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Destruction);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte DestructionParse,
                            errorMask: errorMask))
                        {
                            item.Destruction = DestructionParse;
                        }
                        else
                        {
                            item.Destruction = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Illusion":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Illusion);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte IllusionParse,
                            errorMask: errorMask))
                        {
                            item.Illusion = IllusionParse;
                        }
                        else
                        {
                            item.Illusion = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Mysticism":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Mysticism);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MysticismParse,
                            errorMask: errorMask))
                        {
                            item.Mysticism = MysticismParse;
                        }
                        else
                        {
                            item.Mysticism = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Restoration":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Restoration);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte RestorationParse,
                            errorMask: errorMask))
                        {
                            item.Restoration = RestorationParse;
                        }
                        else
                        {
                            item.Restoration = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Acrobatics":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Acrobatics);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte AcrobaticsParse,
                            errorMask: errorMask))
                        {
                            item.Acrobatics = AcrobaticsParse;
                        }
                        else
                        {
                            item.Acrobatics = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightArmor":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.LightArmor);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte LightArmorParse,
                            errorMask: errorMask))
                        {
                            item.LightArmor = LightArmorParse;
                        }
                        else
                        {
                            item.LightArmor = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Marksman":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Marksman);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MarksmanParse,
                            errorMask: errorMask))
                        {
                            item.Marksman = MarksmanParse;
                        }
                        else
                        {
                            item.Marksman = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Mercantile":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Mercantile);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MercantileParse,
                            errorMask: errorMask))
                        {
                            item.Mercantile = MercantileParse;
                        }
                        else
                        {
                            item.Mercantile = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Security":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Security);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte SecurityParse,
                            errorMask: errorMask))
                        {
                            item.Security = SecurityParse;
                        }
                        else
                        {
                            item.Security = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sneak":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Sneak);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte SneakParse,
                            errorMask: errorMask))
                        {
                            item.Sneak = SneakParse;
                        }
                        else
                        {
                            item.Sneak = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speechcraft":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Speechcraft);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte SpeechcraftParse,
                            errorMask: errorMask))
                        {
                            item.Speechcraft = SpeechcraftParse;
                        }
                        else
                        {
                            item.Speechcraft = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Health);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 HealthParse,
                            errorMask: errorMask))
                        {
                            item.Health = HealthParse;
                        }
                        else
                        {
                            item.Health = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Strength":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Strength);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte StrengthParse,
                            errorMask: errorMask))
                        {
                            item.Strength = StrengthParse;
                        }
                        else
                        {
                            item.Strength = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Intelligence":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Intelligence);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte IntelligenceParse,
                            errorMask: errorMask))
                        {
                            item.Intelligence = IntelligenceParse;
                        }
                        else
                        {
                            item.Intelligence = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Willpower":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Willpower);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte WillpowerParse,
                            errorMask: errorMask))
                        {
                            item.Willpower = WillpowerParse;
                        }
                        else
                        {
                            item.Willpower = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Agility":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Agility);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte AgilityParse,
                            errorMask: errorMask))
                        {
                            item.Agility = AgilityParse;
                        }
                        else
                        {
                            item.Agility = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speed":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Speed);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte SpeedParse,
                            errorMask: errorMask))
                        {
                            item.Speed = SpeedParse;
                        }
                        else
                        {
                            item.Speed = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Endurance":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Endurance);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte EnduranceParse,
                            errorMask: errorMask))
                        {
                            item.Endurance = EnduranceParse;
                        }
                        else
                        {
                            item.Endurance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Personality":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Personality);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte PersonalityParse,
                            errorMask: errorMask))
                        {
                            item.Personality = PersonalityParse;
                        }
                        else
                        {
                            item.Personality = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Luck":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Luck);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte LuckParse,
                            errorMask: errorMask))
                        {
                            item.Luck = LuckParse;
                        }
                        else
                        {
                            item.Luck = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hair":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Hair_Property,
                        fieldIndex: (int)NPC_FieldIndex.Hair,
                        errorMask: errorMask);
                    break;
                case "HairLength":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.HairLength);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single HairLengthParse,
                            errorMask: errorMask))
                        {
                            item.HairLength = HairLengthParse;
                        }
                        else
                        {
                            item.HairLength = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Eyes);
                        if (ListXmlTranslation<IFormIDLink<Eye>>.Instance.Parse(
                            node: node,
                            enumer: out var EyesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Eyes.SetTo(EyesItem);
                        }
                        else
                        {
                            item.Eyes.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HairColor":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.HairColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color HairColorParse,
                            errorMask: errorMask))
                        {
                            item.HairColor = HairColorParse;
                        }
                        else
                        {
                            item.HairColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatStyle":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.CombatStyle_Property,
                        fieldIndex: (int)NPC_FieldIndex.CombatStyle,
                        errorMask: errorMask);
                    break;
                case "FaceGenGeometrySymmetric":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.FaceGenGeometrySymmetric);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FaceGenGeometrySymmetricParse,
                            errorMask: errorMask))
                        {
                            item.FaceGenGeometrySymmetric = FaceGenGeometrySymmetricParse;
                        }
                        else
                        {
                            item.FaceGenGeometrySymmetric = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenGeometryAsymmetric":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.FaceGenGeometryAsymmetric);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FaceGenGeometryAsymmetricParse,
                            errorMask: errorMask))
                        {
                            item.FaceGenGeometryAsymmetric = FaceGenGeometryAsymmetricParse;
                        }
                        else
                        {
                            item.FaceGenGeometryAsymmetric = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenTextureSymmetric":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.FaceGenTextureSymmetric);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FaceGenTextureSymmetricParse,
                            errorMask: errorMask))
                        {
                            item.FaceGenTextureSymmetric = FaceGenTextureSymmetricParse;
                        }
                        else
                        {
                            item.FaceGenTextureSymmetric = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.Unknown);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] UnknownParse,
                            errorMask: errorMask))
                        {
                            item.Unknown = UnknownParse;
                        }
                        else
                        {
                            item.Unknown = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ACBSDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.ACBSDataTypeState);
                        if (EnumXmlTranslation<NPC.ACBSDataType>.Instance.Parse(
                            node: node,
                            item: out NPC.ACBSDataType ACBSDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.ACBSDataTypeState = ACBSDataTypeStateParse;
                        }
                        else
                        {
                            item.ACBSDataTypeState = default(NPC.ACBSDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIDTDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.AIDTDataTypeState);
                        if (EnumXmlTranslation<NPC.AIDTDataType>.Instance.Parse(
                            node: node,
                            item: out NPC.AIDTDataType AIDTDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.AIDTDataTypeState = AIDTDataTypeStateParse;
                        }
                        else
                        {
                            item.AIDTDataTypeState = default(NPC.AIDTDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)NPC_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<NPC.DATADataType>.Instance.Parse(
                            node: node,
                            item: out NPC.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(NPC.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    NPCAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class NPCXmlTranslationMixIn
    {
        public static void WriteToXml(
            this INPCInternalGetter item,
            XElement node,
            out NPC_ErrorMask errorMask,
            bool doMasks = true,
            NPC_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((NPCXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this INPCInternalGetter item,
            string path,
            out NPC_ErrorMask errorMask,
            NPC_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this INPCInternalGetter item,
            Stream stream,
            out NPC_ErrorMask errorMask,
            NPC_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class NPC_Mask<T> : NPCAbstract_Mask<T>, IMask<T>, IEquatable<NPC_Mask<T>>
    {
        #region Ctors
        public NPC_Mask()
        {
        }

        public NPC_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Flags = initialValue;
            this.BaseSpellPoints = initialValue;
            this.Fatigue = initialValue;
            this.BarterGold = initialValue;
            this.LevelOffset = initialValue;
            this.CalcMin = initialValue;
            this.CalcMax = initialValue;
            this.Factions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RankPlacement_Mask<T>>>>(initialValue, null);
            this.DeathItem = initialValue;
            this.Race = initialValue;
            this.Spells = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Script = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<T, ItemEntry_Mask<T>>>>(initialValue, null);
            this.Aggression = initialValue;
            this.Confidence = initialValue;
            this.EnergyLevel = initialValue;
            this.Responsibility = initialValue;
            this.BuySellServices = initialValue;
            this.Teaches = initialValue;
            this.MaximumTrainingLevel = initialValue;
            this.Fluff = initialValue;
            this.AIPackages = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Animations = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Class = initialValue;
            this.Armorer = initialValue;
            this.Athletics = initialValue;
            this.Blade = initialValue;
            this.Block = initialValue;
            this.Blunt = initialValue;
            this.HandToHand = initialValue;
            this.HeavyArmor = initialValue;
            this.Alchemy = initialValue;
            this.Alteration = initialValue;
            this.Conjuration = initialValue;
            this.Destruction = initialValue;
            this.Illusion = initialValue;
            this.Mysticism = initialValue;
            this.Restoration = initialValue;
            this.Acrobatics = initialValue;
            this.LightArmor = initialValue;
            this.Marksman = initialValue;
            this.Mercantile = initialValue;
            this.Security = initialValue;
            this.Sneak = initialValue;
            this.Speechcraft = initialValue;
            this.Health = initialValue;
            this.Strength = initialValue;
            this.Intelligence = initialValue;
            this.Willpower = initialValue;
            this.Agility = initialValue;
            this.Speed = initialValue;
            this.Endurance = initialValue;
            this.Personality = initialValue;
            this.Luck = initialValue;
            this.Hair = initialValue;
            this.HairLength = initialValue;
            this.Eyes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.HairColor = initialValue;
            this.CombatStyle = initialValue;
            this.FaceGenGeometrySymmetric = initialValue;
            this.FaceGenGeometryAsymmetric = initialValue;
            this.FaceGenTextureSymmetric = initialValue;
            this.Unknown = initialValue;
            this.ACBSDataTypeState = initialValue;
            this.AIDTDataTypeState = initialValue;
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Flags;
        public T BaseSpellPoints;
        public T Fatigue;
        public T BarterGold;
        public T LevelOffset;
        public T CalcMin;
        public T CalcMax;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, RankPlacement_Mask<T>>>> Factions;
        public T DeathItem;
        public T Race;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Spells;
        public T Script;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, ItemEntry_Mask<T>>>> Items;
        public T Aggression;
        public T Confidence;
        public T EnergyLevel;
        public T Responsibility;
        public T BuySellServices;
        public T Teaches;
        public T MaximumTrainingLevel;
        public T Fluff;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> AIPackages;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Animations;
        public T Class;
        public T Armorer;
        public T Athletics;
        public T Blade;
        public T Block;
        public T Blunt;
        public T HandToHand;
        public T HeavyArmor;
        public T Alchemy;
        public T Alteration;
        public T Conjuration;
        public T Destruction;
        public T Illusion;
        public T Mysticism;
        public T Restoration;
        public T Acrobatics;
        public T LightArmor;
        public T Marksman;
        public T Mercantile;
        public T Security;
        public T Sneak;
        public T Speechcraft;
        public T Health;
        public T Strength;
        public T Intelligence;
        public T Willpower;
        public T Agility;
        public T Speed;
        public T Endurance;
        public T Personality;
        public T Luck;
        public T Hair;
        public T HairLength;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Eyes;
        public T HairColor;
        public T CombatStyle;
        public T FaceGenGeometrySymmetric;
        public T FaceGenGeometryAsymmetric;
        public T FaceGenTextureSymmetric;
        public T Unknown;
        public T ACBSDataTypeState;
        public T AIDTDataTypeState;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is NPC_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(NPC_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.BaseSpellPoints, rhs.BaseSpellPoints)) return false;
            if (!object.Equals(this.Fatigue, rhs.Fatigue)) return false;
            if (!object.Equals(this.BarterGold, rhs.BarterGold)) return false;
            if (!object.Equals(this.LevelOffset, rhs.LevelOffset)) return false;
            if (!object.Equals(this.CalcMin, rhs.CalcMin)) return false;
            if (!object.Equals(this.CalcMax, rhs.CalcMax)) return false;
            if (!object.Equals(this.Factions, rhs.Factions)) return false;
            if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
            if (!object.Equals(this.Race, rhs.Race)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            if (!object.Equals(this.Aggression, rhs.Aggression)) return false;
            if (!object.Equals(this.Confidence, rhs.Confidence)) return false;
            if (!object.Equals(this.EnergyLevel, rhs.EnergyLevel)) return false;
            if (!object.Equals(this.Responsibility, rhs.Responsibility)) return false;
            if (!object.Equals(this.BuySellServices, rhs.BuySellServices)) return false;
            if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
            if (!object.Equals(this.MaximumTrainingLevel, rhs.MaximumTrainingLevel)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
            if (!object.Equals(this.Animations, rhs.Animations)) return false;
            if (!object.Equals(this.Class, rhs.Class)) return false;
            if (!object.Equals(this.Armorer, rhs.Armorer)) return false;
            if (!object.Equals(this.Athletics, rhs.Athletics)) return false;
            if (!object.Equals(this.Blade, rhs.Blade)) return false;
            if (!object.Equals(this.Block, rhs.Block)) return false;
            if (!object.Equals(this.Blunt, rhs.Blunt)) return false;
            if (!object.Equals(this.HandToHand, rhs.HandToHand)) return false;
            if (!object.Equals(this.HeavyArmor, rhs.HeavyArmor)) return false;
            if (!object.Equals(this.Alchemy, rhs.Alchemy)) return false;
            if (!object.Equals(this.Alteration, rhs.Alteration)) return false;
            if (!object.Equals(this.Conjuration, rhs.Conjuration)) return false;
            if (!object.Equals(this.Destruction, rhs.Destruction)) return false;
            if (!object.Equals(this.Illusion, rhs.Illusion)) return false;
            if (!object.Equals(this.Mysticism, rhs.Mysticism)) return false;
            if (!object.Equals(this.Restoration, rhs.Restoration)) return false;
            if (!object.Equals(this.Acrobatics, rhs.Acrobatics)) return false;
            if (!object.Equals(this.LightArmor, rhs.LightArmor)) return false;
            if (!object.Equals(this.Marksman, rhs.Marksman)) return false;
            if (!object.Equals(this.Mercantile, rhs.Mercantile)) return false;
            if (!object.Equals(this.Security, rhs.Security)) return false;
            if (!object.Equals(this.Sneak, rhs.Sneak)) return false;
            if (!object.Equals(this.Speechcraft, rhs.Speechcraft)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.Strength, rhs.Strength)) return false;
            if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
            if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
            if (!object.Equals(this.Agility, rhs.Agility)) return false;
            if (!object.Equals(this.Speed, rhs.Speed)) return false;
            if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
            if (!object.Equals(this.Personality, rhs.Personality)) return false;
            if (!object.Equals(this.Luck, rhs.Luck)) return false;
            if (!object.Equals(this.Hair, rhs.Hair)) return false;
            if (!object.Equals(this.HairLength, rhs.HairLength)) return false;
            if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(this.HairColor, rhs.HairColor)) return false;
            if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
            if (!object.Equals(this.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric)) return false;
            if (!object.Equals(this.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric)) return false;
            if (!object.Equals(this.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            if (!object.Equals(this.ACBSDataTypeState, rhs.ACBSDataTypeState)) return false;
            if (!object.Equals(this.AIDTDataTypeState, rhs.AIDTDataTypeState)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.BaseSpellPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.Fatigue?.GetHashCode());
            ret = ret.CombineHashCode(this.BarterGold?.GetHashCode());
            ret = ret.CombineHashCode(this.LevelOffset?.GetHashCode());
            ret = ret.CombineHashCode(this.CalcMin?.GetHashCode());
            ret = ret.CombineHashCode(this.CalcMax?.GetHashCode());
            ret = ret.CombineHashCode(this.Factions?.GetHashCode());
            ret = ret.CombineHashCode(this.DeathItem?.GetHashCode());
            ret = ret.CombineHashCode(this.Race?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            ret = ret.CombineHashCode(this.Aggression?.GetHashCode());
            ret = ret.CombineHashCode(this.Confidence?.GetHashCode());
            ret = ret.CombineHashCode(this.EnergyLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Responsibility?.GetHashCode());
            ret = ret.CombineHashCode(this.BuySellServices?.GetHashCode());
            ret = ret.CombineHashCode(this.Teaches?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumTrainingLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.AIPackages?.GetHashCode());
            ret = ret.CombineHashCode(this.Animations?.GetHashCode());
            ret = ret.CombineHashCode(this.Class?.GetHashCode());
            ret = ret.CombineHashCode(this.Armorer?.GetHashCode());
            ret = ret.CombineHashCode(this.Athletics?.GetHashCode());
            ret = ret.CombineHashCode(this.Blade?.GetHashCode());
            ret = ret.CombineHashCode(this.Block?.GetHashCode());
            ret = ret.CombineHashCode(this.Blunt?.GetHashCode());
            ret = ret.CombineHashCode(this.HandToHand?.GetHashCode());
            ret = ret.CombineHashCode(this.HeavyArmor?.GetHashCode());
            ret = ret.CombineHashCode(this.Alchemy?.GetHashCode());
            ret = ret.CombineHashCode(this.Alteration?.GetHashCode());
            ret = ret.CombineHashCode(this.Conjuration?.GetHashCode());
            ret = ret.CombineHashCode(this.Destruction?.GetHashCode());
            ret = ret.CombineHashCode(this.Illusion?.GetHashCode());
            ret = ret.CombineHashCode(this.Mysticism?.GetHashCode());
            ret = ret.CombineHashCode(this.Restoration?.GetHashCode());
            ret = ret.CombineHashCode(this.Acrobatics?.GetHashCode());
            ret = ret.CombineHashCode(this.LightArmor?.GetHashCode());
            ret = ret.CombineHashCode(this.Marksman?.GetHashCode());
            ret = ret.CombineHashCode(this.Mercantile?.GetHashCode());
            ret = ret.CombineHashCode(this.Security?.GetHashCode());
            ret = ret.CombineHashCode(this.Sneak?.GetHashCode());
            ret = ret.CombineHashCode(this.Speechcraft?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.Strength?.GetHashCode());
            ret = ret.CombineHashCode(this.Intelligence?.GetHashCode());
            ret = ret.CombineHashCode(this.Willpower?.GetHashCode());
            ret = ret.CombineHashCode(this.Agility?.GetHashCode());
            ret = ret.CombineHashCode(this.Speed?.GetHashCode());
            ret = ret.CombineHashCode(this.Endurance?.GetHashCode());
            ret = ret.CombineHashCode(this.Personality?.GetHashCode());
            ret = ret.CombineHashCode(this.Luck?.GetHashCode());
            ret = ret.CombineHashCode(this.Hair?.GetHashCode());
            ret = ret.CombineHashCode(this.HairLength?.GetHashCode());
            ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
            ret = ret.CombineHashCode(this.HairColor?.GetHashCode());
            ret = ret.CombineHashCode(this.CombatStyle?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenGeometrySymmetric?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenGeometryAsymmetric?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenTextureSymmetric?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(this.ACBSDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(this.AIDTDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.BaseSpellPoints)) return false;
            if (!eval(this.Fatigue)) return false;
            if (!eval(this.BarterGold)) return false;
            if (!eval(this.LevelOffset)) return false;
            if (!eval(this.CalcMin)) return false;
            if (!eval(this.CalcMax)) return false;
            if (this.Factions != null)
            {
                if (!eval(this.Factions.Overall)) return false;
                if (this.Factions.Specific != null)
                {
                    foreach (var item in this.Factions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.DeathItem)) return false;
            if (!eval(this.Race)) return false;
            if (this.Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (this.Spells.Specific != null)
                {
                    foreach (var item in this.Spells.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.Script)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Aggression)) return false;
            if (!eval(this.Confidence)) return false;
            if (!eval(this.EnergyLevel)) return false;
            if (!eval(this.Responsibility)) return false;
            if (!eval(this.BuySellServices)) return false;
            if (!eval(this.Teaches)) return false;
            if (!eval(this.MaximumTrainingLevel)) return false;
            if (!eval(this.Fluff)) return false;
            if (this.AIPackages != null)
            {
                if (!eval(this.AIPackages.Overall)) return false;
                if (this.AIPackages.Specific != null)
                {
                    foreach (var item in this.AIPackages.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (this.Animations != null)
            {
                if (!eval(this.Animations.Overall)) return false;
                if (this.Animations.Specific != null)
                {
                    foreach (var item in this.Animations.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.Class)) return false;
            if (!eval(this.Armorer)) return false;
            if (!eval(this.Athletics)) return false;
            if (!eval(this.Blade)) return false;
            if (!eval(this.Block)) return false;
            if (!eval(this.Blunt)) return false;
            if (!eval(this.HandToHand)) return false;
            if (!eval(this.HeavyArmor)) return false;
            if (!eval(this.Alchemy)) return false;
            if (!eval(this.Alteration)) return false;
            if (!eval(this.Conjuration)) return false;
            if (!eval(this.Destruction)) return false;
            if (!eval(this.Illusion)) return false;
            if (!eval(this.Mysticism)) return false;
            if (!eval(this.Restoration)) return false;
            if (!eval(this.Acrobatics)) return false;
            if (!eval(this.LightArmor)) return false;
            if (!eval(this.Marksman)) return false;
            if (!eval(this.Mercantile)) return false;
            if (!eval(this.Security)) return false;
            if (!eval(this.Sneak)) return false;
            if (!eval(this.Speechcraft)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.Strength)) return false;
            if (!eval(this.Intelligence)) return false;
            if (!eval(this.Willpower)) return false;
            if (!eval(this.Agility)) return false;
            if (!eval(this.Speed)) return false;
            if (!eval(this.Endurance)) return false;
            if (!eval(this.Personality)) return false;
            if (!eval(this.Luck)) return false;
            if (!eval(this.Hair)) return false;
            if (!eval(this.HairLength)) return false;
            if (this.Eyes != null)
            {
                if (!eval(this.Eyes.Overall)) return false;
                if (this.Eyes.Specific != null)
                {
                    foreach (var item in this.Eyes.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (!eval(this.HairColor)) return false;
            if (!eval(this.CombatStyle)) return false;
            if (!eval(this.FaceGenGeometrySymmetric)) return false;
            if (!eval(this.FaceGenGeometryAsymmetric)) return false;
            if (!eval(this.FaceGenTextureSymmetric)) return false;
            if (!eval(this.Unknown)) return false;
            if (!eval(this.ACBSDataTypeState)) return false;
            if (!eval(this.AIDTDataTypeState)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new NPC_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new NPC_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(NPC_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Flags = eval(this.Flags);
            obj.BaseSpellPoints = eval(this.BaseSpellPoints);
            obj.Fatigue = eval(this.Fatigue);
            obj.BarterGold = eval(this.BarterGold);
            obj.LevelOffset = eval(this.LevelOffset);
            obj.CalcMin = eval(this.CalcMin);
            obj.CalcMax = eval(this.CalcMax);
            if (Factions != null)
            {
                obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement_Mask<R>>>>();
                obj.Factions.Overall = eval(this.Factions.Overall);
                if (Factions.Specific != null)
                {
                    List<MaskItemIndexed<R, RankPlacement_Mask<R>>> l = new List<MaskItemIndexed<R, RankPlacement_Mask<R>>>();
                    obj.Factions.Specific = l;
                    foreach (var item in Factions.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, RankPlacement_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, RankPlacement_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.DeathItem = eval(this.DeathItem);
            obj.Race = eval(this.Race);
            if (Spells != null)
            {
                obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (Spells.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Spells.Specific = l;
                    foreach (var item in Spells.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.Script = eval(this.Script);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ItemEntry_Mask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItemIndexed<R, ItemEntry_Mask<R>>> l = new List<MaskItemIndexed<R, ItemEntry_Mask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, ItemEntry_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, ItemEntry_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Aggression = eval(this.Aggression);
            obj.Confidence = eval(this.Confidence);
            obj.EnergyLevel = eval(this.EnergyLevel);
            obj.Responsibility = eval(this.Responsibility);
            obj.BuySellServices = eval(this.BuySellServices);
            obj.Teaches = eval(this.Teaches);
            obj.MaximumTrainingLevel = eval(this.MaximumTrainingLevel);
            obj.Fluff = eval(this.Fluff);
            if (AIPackages != null)
            {
                obj.AIPackages = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.AIPackages.Overall = eval(this.AIPackages.Overall);
                if (AIPackages.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.AIPackages.Specific = l;
                    foreach (var item in AIPackages.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            if (Animations != null)
            {
                obj.Animations = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Animations.Overall = eval(this.Animations.Overall);
                if (Animations.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Animations.Specific = l;
                    foreach (var item in Animations.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.Class = eval(this.Class);
            obj.Armorer = eval(this.Armorer);
            obj.Athletics = eval(this.Athletics);
            obj.Blade = eval(this.Blade);
            obj.Block = eval(this.Block);
            obj.Blunt = eval(this.Blunt);
            obj.HandToHand = eval(this.HandToHand);
            obj.HeavyArmor = eval(this.HeavyArmor);
            obj.Alchemy = eval(this.Alchemy);
            obj.Alteration = eval(this.Alteration);
            obj.Conjuration = eval(this.Conjuration);
            obj.Destruction = eval(this.Destruction);
            obj.Illusion = eval(this.Illusion);
            obj.Mysticism = eval(this.Mysticism);
            obj.Restoration = eval(this.Restoration);
            obj.Acrobatics = eval(this.Acrobatics);
            obj.LightArmor = eval(this.LightArmor);
            obj.Marksman = eval(this.Marksman);
            obj.Mercantile = eval(this.Mercantile);
            obj.Security = eval(this.Security);
            obj.Sneak = eval(this.Sneak);
            obj.Speechcraft = eval(this.Speechcraft);
            obj.Health = eval(this.Health);
            obj.Strength = eval(this.Strength);
            obj.Intelligence = eval(this.Intelligence);
            obj.Willpower = eval(this.Willpower);
            obj.Agility = eval(this.Agility);
            obj.Speed = eval(this.Speed);
            obj.Endurance = eval(this.Endurance);
            obj.Personality = eval(this.Personality);
            obj.Luck = eval(this.Luck);
            obj.Hair = eval(this.Hair);
            obj.HairLength = eval(this.HairLength);
            if (Eyes != null)
            {
                obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Eyes.Overall = eval(this.Eyes.Overall);
                if (Eyes.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Eyes.Specific = l;
                    foreach (var item in Eyes.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            obj.HairColor = eval(this.HairColor);
            obj.CombatStyle = eval(this.CombatStyle);
            obj.FaceGenGeometrySymmetric = eval(this.FaceGenGeometrySymmetric);
            obj.FaceGenGeometryAsymmetric = eval(this.FaceGenGeometryAsymmetric);
            obj.FaceGenTextureSymmetric = eval(this.FaceGenTextureSymmetric);
            obj.Unknown = eval(this.Unknown);
            obj.ACBSDataTypeState = eval(this.ACBSDataTypeState);
            obj.AIDTDataTypeState = eval(this.AIDTDataTypeState);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Factions.Specific = null;
            this.Spells.Specific = null;
            this.Items.Specific = null;
            this.AIPackages.Specific = null;
            this.Animations.Specific = null;
            this.Eyes.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(NPC_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, NPC_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(NPC_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.BaseSpellPoints ?? true)
                {
                    fg.AppendLine($"BaseSpellPoints => {BaseSpellPoints}");
                }
                if (printMask?.Fatigue ?? true)
                {
                    fg.AppendLine($"Fatigue => {Fatigue}");
                }
                if (printMask?.BarterGold ?? true)
                {
                    fg.AppendLine($"BarterGold => {BarterGold}");
                }
                if (printMask?.LevelOffset ?? true)
                {
                    fg.AppendLine($"LevelOffset => {LevelOffset}");
                }
                if (printMask?.CalcMin ?? true)
                {
                    fg.AppendLine($"CalcMin => {CalcMin}");
                }
                if (printMask?.CalcMax ?? true)
                {
                    fg.AppendLine($"CalcMax => {CalcMax}");
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Factions.Overall != null)
                        {
                            fg.AppendLine(Factions.Overall.ToString());
                        }
                        if (Factions.Specific != null)
                        {
                            foreach (var subItem in Factions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DeathItem ?? true)
                {
                    fg.AppendLine($"DeathItem => {DeathItem}");
                }
                if (printMask?.Race ?? true)
                {
                    fg.AppendLine($"Race => {Race}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Aggression ?? true)
                {
                    fg.AppendLine($"Aggression => {Aggression}");
                }
                if (printMask?.Confidence ?? true)
                {
                    fg.AppendLine($"Confidence => {Confidence}");
                }
                if (printMask?.EnergyLevel ?? true)
                {
                    fg.AppendLine($"EnergyLevel => {EnergyLevel}");
                }
                if (printMask?.Responsibility ?? true)
                {
                    fg.AppendLine($"Responsibility => {Responsibility}");
                }
                if (printMask?.BuySellServices ?? true)
                {
                    fg.AppendLine($"BuySellServices => {BuySellServices}");
                }
                if (printMask?.Teaches ?? true)
                {
                    fg.AppendLine($"Teaches => {Teaches}");
                }
                if (printMask?.MaximumTrainingLevel ?? true)
                {
                    fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.AIPackages?.Overall ?? true)
                {
                    fg.AppendLine("AIPackages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (AIPackages.Overall != null)
                        {
                            fg.AppendLine(AIPackages.Overall.ToString());
                        }
                        if (AIPackages.Specific != null)
                        {
                            foreach (var subItem in AIPackages.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Animations?.Overall ?? true)
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Animations.Overall != null)
                        {
                            fg.AppendLine(Animations.Overall.ToString());
                        }
                        if (Animations.Specific != null)
                        {
                            foreach (var subItem in Animations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Class ?? true)
                {
                    fg.AppendLine($"Class => {Class}");
                }
                if (printMask?.Armorer ?? true)
                {
                    fg.AppendLine($"Armorer => {Armorer}");
                }
                if (printMask?.Athletics ?? true)
                {
                    fg.AppendLine($"Athletics => {Athletics}");
                }
                if (printMask?.Blade ?? true)
                {
                    fg.AppendLine($"Blade => {Blade}");
                }
                if (printMask?.Block ?? true)
                {
                    fg.AppendLine($"Block => {Block}");
                }
                if (printMask?.Blunt ?? true)
                {
                    fg.AppendLine($"Blunt => {Blunt}");
                }
                if (printMask?.HandToHand ?? true)
                {
                    fg.AppendLine($"HandToHand => {HandToHand}");
                }
                if (printMask?.HeavyArmor ?? true)
                {
                    fg.AppendLine($"HeavyArmor => {HeavyArmor}");
                }
                if (printMask?.Alchemy ?? true)
                {
                    fg.AppendLine($"Alchemy => {Alchemy}");
                }
                if (printMask?.Alteration ?? true)
                {
                    fg.AppendLine($"Alteration => {Alteration}");
                }
                if (printMask?.Conjuration ?? true)
                {
                    fg.AppendLine($"Conjuration => {Conjuration}");
                }
                if (printMask?.Destruction ?? true)
                {
                    fg.AppendLine($"Destruction => {Destruction}");
                }
                if (printMask?.Illusion ?? true)
                {
                    fg.AppendLine($"Illusion => {Illusion}");
                }
                if (printMask?.Mysticism ?? true)
                {
                    fg.AppendLine($"Mysticism => {Mysticism}");
                }
                if (printMask?.Restoration ?? true)
                {
                    fg.AppendLine($"Restoration => {Restoration}");
                }
                if (printMask?.Acrobatics ?? true)
                {
                    fg.AppendLine($"Acrobatics => {Acrobatics}");
                }
                if (printMask?.LightArmor ?? true)
                {
                    fg.AppendLine($"LightArmor => {LightArmor}");
                }
                if (printMask?.Marksman ?? true)
                {
                    fg.AppendLine($"Marksman => {Marksman}");
                }
                if (printMask?.Mercantile ?? true)
                {
                    fg.AppendLine($"Mercantile => {Mercantile}");
                }
                if (printMask?.Security ?? true)
                {
                    fg.AppendLine($"Security => {Security}");
                }
                if (printMask?.Sneak ?? true)
                {
                    fg.AppendLine($"Sneak => {Sneak}");
                }
                if (printMask?.Speechcraft ?? true)
                {
                    fg.AppendLine($"Speechcraft => {Speechcraft}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {Luck}");
                }
                if (printMask?.Hair ?? true)
                {
                    fg.AppendLine($"Hair => {Hair}");
                }
                if (printMask?.HairLength ?? true)
                {
                    fg.AppendLine($"HairLength => {HairLength}");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Eyes.Overall != null)
                        {
                            fg.AppendLine(Eyes.Overall.ToString());
                        }
                        if (Eyes.Specific != null)
                        {
                            foreach (var subItem in Eyes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.HairColor ?? true)
                {
                    fg.AppendLine($"HairColor => {HairColor}");
                }
                if (printMask?.CombatStyle ?? true)
                {
                    fg.AppendLine($"CombatStyle => {CombatStyle}");
                }
                if (printMask?.FaceGenGeometrySymmetric ?? true)
                {
                    fg.AppendLine($"FaceGenGeometrySymmetric => {FaceGenGeometrySymmetric}");
                }
                if (printMask?.FaceGenGeometryAsymmetric ?? true)
                {
                    fg.AppendLine($"FaceGenGeometryAsymmetric => {FaceGenGeometryAsymmetric}");
                }
                if (printMask?.FaceGenTextureSymmetric ?? true)
                {
                    fg.AppendLine($"FaceGenTextureSymmetric => {FaceGenTextureSymmetric}");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
                if (printMask?.ACBSDataTypeState ?? true)
                {
                    fg.AppendLine($"ACBSDataTypeState => {ACBSDataTypeState}");
                }
                if (printMask?.AIDTDataTypeState ?? true)
                {
                    fg.AppendLine($"AIDTDataTypeState => {AIDTDataTypeState}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class NPC_ErrorMask : NPCAbstract_ErrorMask, IErrorMask<NPC_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Flags;
        public Exception BaseSpellPoints;
        public Exception Fatigue;
        public Exception BarterGold;
        public Exception LevelOffset;
        public Exception CalcMin;
        public Exception CalcMax;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>> Factions;
        public Exception DeathItem;
        public Exception Race;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Spells;
        public Exception Script;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>> Items;
        public Exception Aggression;
        public Exception Confidence;
        public Exception EnergyLevel;
        public Exception Responsibility;
        public Exception BuySellServices;
        public Exception Teaches;
        public Exception MaximumTrainingLevel;
        public Exception Fluff;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> AIPackages;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Animations;
        public Exception Class;
        public Exception Armorer;
        public Exception Athletics;
        public Exception Blade;
        public Exception Block;
        public Exception Blunt;
        public Exception HandToHand;
        public Exception HeavyArmor;
        public Exception Alchemy;
        public Exception Alteration;
        public Exception Conjuration;
        public Exception Destruction;
        public Exception Illusion;
        public Exception Mysticism;
        public Exception Restoration;
        public Exception Acrobatics;
        public Exception LightArmor;
        public Exception Marksman;
        public Exception Mercantile;
        public Exception Security;
        public Exception Sneak;
        public Exception Speechcraft;
        public Exception Health;
        public Exception Strength;
        public Exception Intelligence;
        public Exception Willpower;
        public Exception Agility;
        public Exception Speed;
        public Exception Endurance;
        public Exception Personality;
        public Exception Luck;
        public Exception Hair;
        public Exception HairLength;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Eyes;
        public Exception HairColor;
        public Exception CombatStyle;
        public Exception FaceGenGeometrySymmetric;
        public Exception FaceGenGeometryAsymmetric;
        public Exception FaceGenTextureSymmetric;
        public Exception Unknown;
        public Exception ACBSDataTypeState;
        public Exception AIDTDataTypeState;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                    return Name;
                case NPC_FieldIndex.Model:
                    return Model;
                case NPC_FieldIndex.Flags:
                    return Flags;
                case NPC_FieldIndex.BaseSpellPoints:
                    return BaseSpellPoints;
                case NPC_FieldIndex.Fatigue:
                    return Fatigue;
                case NPC_FieldIndex.BarterGold:
                    return BarterGold;
                case NPC_FieldIndex.LevelOffset:
                    return LevelOffset;
                case NPC_FieldIndex.CalcMin:
                    return CalcMin;
                case NPC_FieldIndex.CalcMax:
                    return CalcMax;
                case NPC_FieldIndex.Factions:
                    return Factions;
                case NPC_FieldIndex.DeathItem:
                    return DeathItem;
                case NPC_FieldIndex.Race:
                    return Race;
                case NPC_FieldIndex.Spells:
                    return Spells;
                case NPC_FieldIndex.Script:
                    return Script;
                case NPC_FieldIndex.Items:
                    return Items;
                case NPC_FieldIndex.Aggression:
                    return Aggression;
                case NPC_FieldIndex.Confidence:
                    return Confidence;
                case NPC_FieldIndex.EnergyLevel:
                    return EnergyLevel;
                case NPC_FieldIndex.Responsibility:
                    return Responsibility;
                case NPC_FieldIndex.BuySellServices:
                    return BuySellServices;
                case NPC_FieldIndex.Teaches:
                    return Teaches;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    return MaximumTrainingLevel;
                case NPC_FieldIndex.Fluff:
                    return Fluff;
                case NPC_FieldIndex.AIPackages:
                    return AIPackages;
                case NPC_FieldIndex.Animations:
                    return Animations;
                case NPC_FieldIndex.Class:
                    return Class;
                case NPC_FieldIndex.Armorer:
                    return Armorer;
                case NPC_FieldIndex.Athletics:
                    return Athletics;
                case NPC_FieldIndex.Blade:
                    return Blade;
                case NPC_FieldIndex.Block:
                    return Block;
                case NPC_FieldIndex.Blunt:
                    return Blunt;
                case NPC_FieldIndex.HandToHand:
                    return HandToHand;
                case NPC_FieldIndex.HeavyArmor:
                    return HeavyArmor;
                case NPC_FieldIndex.Alchemy:
                    return Alchemy;
                case NPC_FieldIndex.Alteration:
                    return Alteration;
                case NPC_FieldIndex.Conjuration:
                    return Conjuration;
                case NPC_FieldIndex.Destruction:
                    return Destruction;
                case NPC_FieldIndex.Illusion:
                    return Illusion;
                case NPC_FieldIndex.Mysticism:
                    return Mysticism;
                case NPC_FieldIndex.Restoration:
                    return Restoration;
                case NPC_FieldIndex.Acrobatics:
                    return Acrobatics;
                case NPC_FieldIndex.LightArmor:
                    return LightArmor;
                case NPC_FieldIndex.Marksman:
                    return Marksman;
                case NPC_FieldIndex.Mercantile:
                    return Mercantile;
                case NPC_FieldIndex.Security:
                    return Security;
                case NPC_FieldIndex.Sneak:
                    return Sneak;
                case NPC_FieldIndex.Speechcraft:
                    return Speechcraft;
                case NPC_FieldIndex.Health:
                    return Health;
                case NPC_FieldIndex.Strength:
                    return Strength;
                case NPC_FieldIndex.Intelligence:
                    return Intelligence;
                case NPC_FieldIndex.Willpower:
                    return Willpower;
                case NPC_FieldIndex.Agility:
                    return Agility;
                case NPC_FieldIndex.Speed:
                    return Speed;
                case NPC_FieldIndex.Endurance:
                    return Endurance;
                case NPC_FieldIndex.Personality:
                    return Personality;
                case NPC_FieldIndex.Luck:
                    return Luck;
                case NPC_FieldIndex.Hair:
                    return Hair;
                case NPC_FieldIndex.HairLength:
                    return HairLength;
                case NPC_FieldIndex.Eyes:
                    return Eyes;
                case NPC_FieldIndex.HairColor:
                    return HairColor;
                case NPC_FieldIndex.CombatStyle:
                    return CombatStyle;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    return FaceGenGeometrySymmetric;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    return FaceGenGeometryAsymmetric;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    return FaceGenTextureSymmetric;
                case NPC_FieldIndex.Unknown:
                    return Unknown;
                case NPC_FieldIndex.ACBSDataTypeState:
                    return ACBSDataTypeState;
                case NPC_FieldIndex.AIDTDataTypeState:
                    return AIDTDataTypeState;
                case NPC_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case NPC_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case NPC_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case NPC_FieldIndex.BaseSpellPoints:
                    this.BaseSpellPoints = ex;
                    break;
                case NPC_FieldIndex.Fatigue:
                    this.Fatigue = ex;
                    break;
                case NPC_FieldIndex.BarterGold:
                    this.BarterGold = ex;
                    break;
                case NPC_FieldIndex.LevelOffset:
                    this.LevelOffset = ex;
                    break;
                case NPC_FieldIndex.CalcMin:
                    this.CalcMin = ex;
                    break;
                case NPC_FieldIndex.CalcMax:
                    this.CalcMax = ex;
                    break;
                case NPC_FieldIndex.Factions:
                    this.Factions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>(ex, null);
                    break;
                case NPC_FieldIndex.DeathItem:
                    this.DeathItem = ex;
                    break;
                case NPC_FieldIndex.Race:
                    this.Race = ex;
                    break;
                case NPC_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case NPC_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case NPC_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>(ex, null);
                    break;
                case NPC_FieldIndex.Aggression:
                    this.Aggression = ex;
                    break;
                case NPC_FieldIndex.Confidence:
                    this.Confidence = ex;
                    break;
                case NPC_FieldIndex.EnergyLevel:
                    this.EnergyLevel = ex;
                    break;
                case NPC_FieldIndex.Responsibility:
                    this.Responsibility = ex;
                    break;
                case NPC_FieldIndex.BuySellServices:
                    this.BuySellServices = ex;
                    break;
                case NPC_FieldIndex.Teaches:
                    this.Teaches = ex;
                    break;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = ex;
                    break;
                case NPC_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case NPC_FieldIndex.AIPackages:
                    this.AIPackages = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case NPC_FieldIndex.Animations:
                    this.Animations = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case NPC_FieldIndex.Class:
                    this.Class = ex;
                    break;
                case NPC_FieldIndex.Armorer:
                    this.Armorer = ex;
                    break;
                case NPC_FieldIndex.Athletics:
                    this.Athletics = ex;
                    break;
                case NPC_FieldIndex.Blade:
                    this.Blade = ex;
                    break;
                case NPC_FieldIndex.Block:
                    this.Block = ex;
                    break;
                case NPC_FieldIndex.Blunt:
                    this.Blunt = ex;
                    break;
                case NPC_FieldIndex.HandToHand:
                    this.HandToHand = ex;
                    break;
                case NPC_FieldIndex.HeavyArmor:
                    this.HeavyArmor = ex;
                    break;
                case NPC_FieldIndex.Alchemy:
                    this.Alchemy = ex;
                    break;
                case NPC_FieldIndex.Alteration:
                    this.Alteration = ex;
                    break;
                case NPC_FieldIndex.Conjuration:
                    this.Conjuration = ex;
                    break;
                case NPC_FieldIndex.Destruction:
                    this.Destruction = ex;
                    break;
                case NPC_FieldIndex.Illusion:
                    this.Illusion = ex;
                    break;
                case NPC_FieldIndex.Mysticism:
                    this.Mysticism = ex;
                    break;
                case NPC_FieldIndex.Restoration:
                    this.Restoration = ex;
                    break;
                case NPC_FieldIndex.Acrobatics:
                    this.Acrobatics = ex;
                    break;
                case NPC_FieldIndex.LightArmor:
                    this.LightArmor = ex;
                    break;
                case NPC_FieldIndex.Marksman:
                    this.Marksman = ex;
                    break;
                case NPC_FieldIndex.Mercantile:
                    this.Mercantile = ex;
                    break;
                case NPC_FieldIndex.Security:
                    this.Security = ex;
                    break;
                case NPC_FieldIndex.Sneak:
                    this.Sneak = ex;
                    break;
                case NPC_FieldIndex.Speechcraft:
                    this.Speechcraft = ex;
                    break;
                case NPC_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case NPC_FieldIndex.Strength:
                    this.Strength = ex;
                    break;
                case NPC_FieldIndex.Intelligence:
                    this.Intelligence = ex;
                    break;
                case NPC_FieldIndex.Willpower:
                    this.Willpower = ex;
                    break;
                case NPC_FieldIndex.Agility:
                    this.Agility = ex;
                    break;
                case NPC_FieldIndex.Speed:
                    this.Speed = ex;
                    break;
                case NPC_FieldIndex.Endurance:
                    this.Endurance = ex;
                    break;
                case NPC_FieldIndex.Personality:
                    this.Personality = ex;
                    break;
                case NPC_FieldIndex.Luck:
                    this.Luck = ex;
                    break;
                case NPC_FieldIndex.Hair:
                    this.Hair = ex;
                    break;
                case NPC_FieldIndex.HairLength:
                    this.HairLength = ex;
                    break;
                case NPC_FieldIndex.Eyes:
                    this.Eyes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case NPC_FieldIndex.HairColor:
                    this.HairColor = ex;
                    break;
                case NPC_FieldIndex.CombatStyle:
                    this.CombatStyle = ex;
                    break;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    this.FaceGenGeometrySymmetric = ex;
                    break;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    this.FaceGenGeometryAsymmetric = ex;
                    break;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    this.FaceGenTextureSymmetric = ex;
                    break;
                case NPC_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                case NPC_FieldIndex.ACBSDataTypeState:
                    this.ACBSDataTypeState = ex;
                    break;
                case NPC_FieldIndex.AIDTDataTypeState:
                    this.AIDTDataTypeState = ex;
                    break;
                case NPC_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            NPC_FieldIndex enu = (NPC_FieldIndex)index;
            switch (enu)
            {
                case NPC_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case NPC_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case NPC_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case NPC_FieldIndex.BaseSpellPoints:
                    this.BaseSpellPoints = (Exception)obj;
                    break;
                case NPC_FieldIndex.Fatigue:
                    this.Fatigue = (Exception)obj;
                    break;
                case NPC_FieldIndex.BarterGold:
                    this.BarterGold = (Exception)obj;
                    break;
                case NPC_FieldIndex.LevelOffset:
                    this.LevelOffset = (Exception)obj;
                    break;
                case NPC_FieldIndex.CalcMin:
                    this.CalcMin = (Exception)obj;
                    break;
                case NPC_FieldIndex.CalcMax:
                    this.CalcMax = (Exception)obj;
                    break;
                case NPC_FieldIndex.Factions:
                    this.Factions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>)obj;
                    break;
                case NPC_FieldIndex.DeathItem:
                    this.DeathItem = (Exception)obj;
                    break;
                case NPC_FieldIndex.Race:
                    this.Race = (Exception)obj;
                    break;
                case NPC_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case NPC_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case NPC_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>)obj;
                    break;
                case NPC_FieldIndex.Aggression:
                    this.Aggression = (Exception)obj;
                    break;
                case NPC_FieldIndex.Confidence:
                    this.Confidence = (Exception)obj;
                    break;
                case NPC_FieldIndex.EnergyLevel:
                    this.EnergyLevel = (Exception)obj;
                    break;
                case NPC_FieldIndex.Responsibility:
                    this.Responsibility = (Exception)obj;
                    break;
                case NPC_FieldIndex.BuySellServices:
                    this.BuySellServices = (Exception)obj;
                    break;
                case NPC_FieldIndex.Teaches:
                    this.Teaches = (Exception)obj;
                    break;
                case NPC_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = (Exception)obj;
                    break;
                case NPC_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case NPC_FieldIndex.AIPackages:
                    this.AIPackages = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case NPC_FieldIndex.Animations:
                    this.Animations = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case NPC_FieldIndex.Class:
                    this.Class = (Exception)obj;
                    break;
                case NPC_FieldIndex.Armorer:
                    this.Armorer = (Exception)obj;
                    break;
                case NPC_FieldIndex.Athletics:
                    this.Athletics = (Exception)obj;
                    break;
                case NPC_FieldIndex.Blade:
                    this.Blade = (Exception)obj;
                    break;
                case NPC_FieldIndex.Block:
                    this.Block = (Exception)obj;
                    break;
                case NPC_FieldIndex.Blunt:
                    this.Blunt = (Exception)obj;
                    break;
                case NPC_FieldIndex.HandToHand:
                    this.HandToHand = (Exception)obj;
                    break;
                case NPC_FieldIndex.HeavyArmor:
                    this.HeavyArmor = (Exception)obj;
                    break;
                case NPC_FieldIndex.Alchemy:
                    this.Alchemy = (Exception)obj;
                    break;
                case NPC_FieldIndex.Alteration:
                    this.Alteration = (Exception)obj;
                    break;
                case NPC_FieldIndex.Conjuration:
                    this.Conjuration = (Exception)obj;
                    break;
                case NPC_FieldIndex.Destruction:
                    this.Destruction = (Exception)obj;
                    break;
                case NPC_FieldIndex.Illusion:
                    this.Illusion = (Exception)obj;
                    break;
                case NPC_FieldIndex.Mysticism:
                    this.Mysticism = (Exception)obj;
                    break;
                case NPC_FieldIndex.Restoration:
                    this.Restoration = (Exception)obj;
                    break;
                case NPC_FieldIndex.Acrobatics:
                    this.Acrobatics = (Exception)obj;
                    break;
                case NPC_FieldIndex.LightArmor:
                    this.LightArmor = (Exception)obj;
                    break;
                case NPC_FieldIndex.Marksman:
                    this.Marksman = (Exception)obj;
                    break;
                case NPC_FieldIndex.Mercantile:
                    this.Mercantile = (Exception)obj;
                    break;
                case NPC_FieldIndex.Security:
                    this.Security = (Exception)obj;
                    break;
                case NPC_FieldIndex.Sneak:
                    this.Sneak = (Exception)obj;
                    break;
                case NPC_FieldIndex.Speechcraft:
                    this.Speechcraft = (Exception)obj;
                    break;
                case NPC_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case NPC_FieldIndex.Strength:
                    this.Strength = (Exception)obj;
                    break;
                case NPC_FieldIndex.Intelligence:
                    this.Intelligence = (Exception)obj;
                    break;
                case NPC_FieldIndex.Willpower:
                    this.Willpower = (Exception)obj;
                    break;
                case NPC_FieldIndex.Agility:
                    this.Agility = (Exception)obj;
                    break;
                case NPC_FieldIndex.Speed:
                    this.Speed = (Exception)obj;
                    break;
                case NPC_FieldIndex.Endurance:
                    this.Endurance = (Exception)obj;
                    break;
                case NPC_FieldIndex.Personality:
                    this.Personality = (Exception)obj;
                    break;
                case NPC_FieldIndex.Luck:
                    this.Luck = (Exception)obj;
                    break;
                case NPC_FieldIndex.Hair:
                    this.Hair = (Exception)obj;
                    break;
                case NPC_FieldIndex.HairLength:
                    this.HairLength = (Exception)obj;
                    break;
                case NPC_FieldIndex.Eyes:
                    this.Eyes = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case NPC_FieldIndex.HairColor:
                    this.HairColor = (Exception)obj;
                    break;
                case NPC_FieldIndex.CombatStyle:
                    this.CombatStyle = (Exception)obj;
                    break;
                case NPC_FieldIndex.FaceGenGeometrySymmetric:
                    this.FaceGenGeometrySymmetric = (Exception)obj;
                    break;
                case NPC_FieldIndex.FaceGenGeometryAsymmetric:
                    this.FaceGenGeometryAsymmetric = (Exception)obj;
                    break;
                case NPC_FieldIndex.FaceGenTextureSymmetric:
                    this.FaceGenTextureSymmetric = (Exception)obj;
                    break;
                case NPC_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                case NPC_FieldIndex.ACBSDataTypeState:
                    this.ACBSDataTypeState = (Exception)obj;
                    break;
                case NPC_FieldIndex.AIDTDataTypeState:
                    this.AIDTDataTypeState = (Exception)obj;
                    break;
                case NPC_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Flags != null) return true;
            if (BaseSpellPoints != null) return true;
            if (Fatigue != null) return true;
            if (BarterGold != null) return true;
            if (LevelOffset != null) return true;
            if (CalcMin != null) return true;
            if (CalcMax != null) return true;
            if (Factions != null) return true;
            if (DeathItem != null) return true;
            if (Race != null) return true;
            if (Spells != null) return true;
            if (Script != null) return true;
            if (Items != null) return true;
            if (Aggression != null) return true;
            if (Confidence != null) return true;
            if (EnergyLevel != null) return true;
            if (Responsibility != null) return true;
            if (BuySellServices != null) return true;
            if (Teaches != null) return true;
            if (MaximumTrainingLevel != null) return true;
            if (Fluff != null) return true;
            if (AIPackages != null) return true;
            if (Animations != null) return true;
            if (Class != null) return true;
            if (Armorer != null) return true;
            if (Athletics != null) return true;
            if (Blade != null) return true;
            if (Block != null) return true;
            if (Blunt != null) return true;
            if (HandToHand != null) return true;
            if (HeavyArmor != null) return true;
            if (Alchemy != null) return true;
            if (Alteration != null) return true;
            if (Conjuration != null) return true;
            if (Destruction != null) return true;
            if (Illusion != null) return true;
            if (Mysticism != null) return true;
            if (Restoration != null) return true;
            if (Acrobatics != null) return true;
            if (LightArmor != null) return true;
            if (Marksman != null) return true;
            if (Mercantile != null) return true;
            if (Security != null) return true;
            if (Sneak != null) return true;
            if (Speechcraft != null) return true;
            if (Health != null) return true;
            if (Strength != null) return true;
            if (Intelligence != null) return true;
            if (Willpower != null) return true;
            if (Agility != null) return true;
            if (Speed != null) return true;
            if (Endurance != null) return true;
            if (Personality != null) return true;
            if (Luck != null) return true;
            if (Hair != null) return true;
            if (HairLength != null) return true;
            if (Eyes != null) return true;
            if (HairColor != null) return true;
            if (CombatStyle != null) return true;
            if (FaceGenGeometrySymmetric != null) return true;
            if (FaceGenGeometryAsymmetric != null) return true;
            if (FaceGenTextureSymmetric != null) return true;
            if (Unknown != null) return true;
            if (ACBSDataTypeState != null) return true;
            if (AIDTDataTypeState != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("NPC_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"BaseSpellPoints => {BaseSpellPoints}");
            fg.AppendLine($"Fatigue => {Fatigue}");
            fg.AppendLine($"BarterGold => {BarterGold}");
            fg.AppendLine($"LevelOffset => {LevelOffset}");
            fg.AppendLine($"CalcMin => {CalcMin}");
            fg.AppendLine($"CalcMax => {CalcMax}");
            fg.AppendLine("Factions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Factions.Overall != null)
                {
                    fg.AppendLine(Factions.Overall.ToString());
                }
                if (Factions.Specific != null)
                {
                    foreach (var subItem in Factions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"DeathItem => {DeathItem}");
            fg.AppendLine($"Race => {Race}");
            fg.AppendLine("Spells =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Spells.Overall != null)
                {
                    fg.AppendLine(Spells.Overall.ToString());
                }
                if (Spells.Specific != null)
                {
                    foreach (var subItem in Spells.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Aggression => {Aggression}");
            fg.AppendLine($"Confidence => {Confidence}");
            fg.AppendLine($"EnergyLevel => {EnergyLevel}");
            fg.AppendLine($"Responsibility => {Responsibility}");
            fg.AppendLine($"BuySellServices => {BuySellServices}");
            fg.AppendLine($"Teaches => {Teaches}");
            fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel}");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine("AIPackages =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (AIPackages.Overall != null)
                {
                    fg.AppendLine(AIPackages.Overall.ToString());
                }
                if (AIPackages.Specific != null)
                {
                    foreach (var subItem in AIPackages.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Animations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Animations.Overall != null)
                {
                    fg.AppendLine(Animations.Overall.ToString());
                }
                if (Animations.Specific != null)
                {
                    foreach (var subItem in Animations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Class => {Class}");
            fg.AppendLine($"Armorer => {Armorer}");
            fg.AppendLine($"Athletics => {Athletics}");
            fg.AppendLine($"Blade => {Blade}");
            fg.AppendLine($"Block => {Block}");
            fg.AppendLine($"Blunt => {Blunt}");
            fg.AppendLine($"HandToHand => {HandToHand}");
            fg.AppendLine($"HeavyArmor => {HeavyArmor}");
            fg.AppendLine($"Alchemy => {Alchemy}");
            fg.AppendLine($"Alteration => {Alteration}");
            fg.AppendLine($"Conjuration => {Conjuration}");
            fg.AppendLine($"Destruction => {Destruction}");
            fg.AppendLine($"Illusion => {Illusion}");
            fg.AppendLine($"Mysticism => {Mysticism}");
            fg.AppendLine($"Restoration => {Restoration}");
            fg.AppendLine($"Acrobatics => {Acrobatics}");
            fg.AppendLine($"LightArmor => {LightArmor}");
            fg.AppendLine($"Marksman => {Marksman}");
            fg.AppendLine($"Mercantile => {Mercantile}");
            fg.AppendLine($"Security => {Security}");
            fg.AppendLine($"Sneak => {Sneak}");
            fg.AppendLine($"Speechcraft => {Speechcraft}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"Strength => {Strength}");
            fg.AppendLine($"Intelligence => {Intelligence}");
            fg.AppendLine($"Willpower => {Willpower}");
            fg.AppendLine($"Agility => {Agility}");
            fg.AppendLine($"Speed => {Speed}");
            fg.AppendLine($"Endurance => {Endurance}");
            fg.AppendLine($"Personality => {Personality}");
            fg.AppendLine($"Luck => {Luck}");
            fg.AppendLine($"Hair => {Hair}");
            fg.AppendLine($"HairLength => {HairLength}");
            fg.AppendLine("Eyes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Eyes.Overall != null)
                {
                    fg.AppendLine(Eyes.Overall.ToString());
                }
                if (Eyes.Specific != null)
                {
                    foreach (var subItem in Eyes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"HairColor => {HairColor}");
            fg.AppendLine($"CombatStyle => {CombatStyle}");
            fg.AppendLine($"FaceGenGeometrySymmetric => {FaceGenGeometrySymmetric}");
            fg.AppendLine($"FaceGenGeometryAsymmetric => {FaceGenGeometryAsymmetric}");
            fg.AppendLine($"FaceGenTextureSymmetric => {FaceGenTextureSymmetric}");
            fg.AppendLine($"Unknown => {Unknown}");
            fg.AppendLine($"ACBSDataTypeState => {ACBSDataTypeState}");
            fg.AppendLine($"AIDTDataTypeState => {AIDTDataTypeState}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public NPC_ErrorMask Combine(NPC_ErrorMask rhs)
        {
            var ret = new NPC_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.BaseSpellPoints = this.BaseSpellPoints.Combine(rhs.BaseSpellPoints);
            ret.Fatigue = this.Fatigue.Combine(rhs.Fatigue);
            ret.BarterGold = this.BarterGold.Combine(rhs.BarterGold);
            ret.LevelOffset = this.LevelOffset.Combine(rhs.LevelOffset);
            ret.CalcMin = this.CalcMin.Combine(rhs.CalcMin);
            ret.CalcMax = this.CalcMax.Combine(rhs.CalcMax);
            ret.Factions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RankPlacement_ErrorMask>>>(this.Factions.Overall.Combine(rhs.Factions.Overall), new List<MaskItem<Exception, RankPlacement_ErrorMask>>(this.Factions.Specific.And(rhs.Factions.Specific)));
            ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
            ret.Race = this.Race.Combine(rhs.Race);
            ret.Spells = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Spells.Overall.Combine(rhs.Spells.Overall), new List<(int Index, Exception Value)>(this.Spells.Specific.And(rhs.Spells.Specific)));
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ItemEntry_ErrorMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, ItemEntry_ErrorMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            ret.Aggression = this.Aggression.Combine(rhs.Aggression);
            ret.Confidence = this.Confidence.Combine(rhs.Confidence);
            ret.EnergyLevel = this.EnergyLevel.Combine(rhs.EnergyLevel);
            ret.Responsibility = this.Responsibility.Combine(rhs.Responsibility);
            ret.BuySellServices = this.BuySellServices.Combine(rhs.BuySellServices);
            ret.Teaches = this.Teaches.Combine(rhs.Teaches);
            ret.MaximumTrainingLevel = this.MaximumTrainingLevel.Combine(rhs.MaximumTrainingLevel);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.AIPackages = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.AIPackages.Overall.Combine(rhs.AIPackages.Overall), new List<(int Index, Exception Value)>(this.AIPackages.Specific.And(rhs.AIPackages.Specific)));
            ret.Animations = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Animations.Overall.Combine(rhs.Animations.Overall), new List<(int Index, Exception Value)>(this.Animations.Specific.And(rhs.Animations.Specific)));
            ret.Class = this.Class.Combine(rhs.Class);
            ret.Armorer = this.Armorer.Combine(rhs.Armorer);
            ret.Athletics = this.Athletics.Combine(rhs.Athletics);
            ret.Blade = this.Blade.Combine(rhs.Blade);
            ret.Block = this.Block.Combine(rhs.Block);
            ret.Blunt = this.Blunt.Combine(rhs.Blunt);
            ret.HandToHand = this.HandToHand.Combine(rhs.HandToHand);
            ret.HeavyArmor = this.HeavyArmor.Combine(rhs.HeavyArmor);
            ret.Alchemy = this.Alchemy.Combine(rhs.Alchemy);
            ret.Alteration = this.Alteration.Combine(rhs.Alteration);
            ret.Conjuration = this.Conjuration.Combine(rhs.Conjuration);
            ret.Destruction = this.Destruction.Combine(rhs.Destruction);
            ret.Illusion = this.Illusion.Combine(rhs.Illusion);
            ret.Mysticism = this.Mysticism.Combine(rhs.Mysticism);
            ret.Restoration = this.Restoration.Combine(rhs.Restoration);
            ret.Acrobatics = this.Acrobatics.Combine(rhs.Acrobatics);
            ret.LightArmor = this.LightArmor.Combine(rhs.LightArmor);
            ret.Marksman = this.Marksman.Combine(rhs.Marksman);
            ret.Mercantile = this.Mercantile.Combine(rhs.Mercantile);
            ret.Security = this.Security.Combine(rhs.Security);
            ret.Sneak = this.Sneak.Combine(rhs.Sneak);
            ret.Speechcraft = this.Speechcraft.Combine(rhs.Speechcraft);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.Strength = this.Strength.Combine(rhs.Strength);
            ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
            ret.Willpower = this.Willpower.Combine(rhs.Willpower);
            ret.Agility = this.Agility.Combine(rhs.Agility);
            ret.Speed = this.Speed.Combine(rhs.Speed);
            ret.Endurance = this.Endurance.Combine(rhs.Endurance);
            ret.Personality = this.Personality.Combine(rhs.Personality);
            ret.Luck = this.Luck.Combine(rhs.Luck);
            ret.Hair = this.Hair.Combine(rhs.Hair);
            ret.HairLength = this.HairLength.Combine(rhs.HairLength);
            ret.Eyes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Eyes.Overall.Combine(rhs.Eyes.Overall), new List<(int Index, Exception Value)>(this.Eyes.Specific.And(rhs.Eyes.Specific)));
            ret.HairColor = this.HairColor.Combine(rhs.HairColor);
            ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
            ret.FaceGenGeometrySymmetric = this.FaceGenGeometrySymmetric.Combine(rhs.FaceGenGeometrySymmetric);
            ret.FaceGenGeometryAsymmetric = this.FaceGenGeometryAsymmetric.Combine(rhs.FaceGenGeometryAsymmetric);
            ret.FaceGenTextureSymmetric = this.FaceGenTextureSymmetric.Combine(rhs.FaceGenTextureSymmetric);
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            ret.ACBSDataTypeState = this.ACBSDataTypeState.Combine(rhs.ACBSDataTypeState);
            ret.AIDTDataTypeState = this.AIDTDataTypeState.Combine(rhs.AIDTDataTypeState);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static NPC_ErrorMask Combine(NPC_ErrorMask lhs, NPC_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static NPC_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new NPC_ErrorMask();
        }
        #endregion

    }
    public class NPC_CopyMask : NPCAbstract_CopyMask
    {
        public NPC_CopyMask()
        {
        }

        public NPC_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Flags = defaultOn;
            this.BaseSpellPoints = defaultOn;
            this.Fatigue = defaultOn;
            this.BarterGold = defaultOn;
            this.LevelOffset = defaultOn;
            this.CalcMin = defaultOn;
            this.CalcMax = defaultOn;
            this.Factions = new MaskItem<CopyOption, RankPlacement_CopyMask>(deepCopyOption, default);
            this.DeathItem = defaultOn;
            this.Race = defaultOn;
            this.Spells = deepCopyOption;
            this.Script = defaultOn;
            this.Items = new MaskItem<CopyOption, ItemEntry_CopyMask>(deepCopyOption, default);
            this.Aggression = defaultOn;
            this.Confidence = defaultOn;
            this.EnergyLevel = defaultOn;
            this.Responsibility = defaultOn;
            this.BuySellServices = defaultOn;
            this.Teaches = defaultOn;
            this.MaximumTrainingLevel = defaultOn;
            this.Fluff = defaultOn;
            this.AIPackages = deepCopyOption;
            this.Animations = deepCopyOption;
            this.Class = defaultOn;
            this.Armorer = defaultOn;
            this.Athletics = defaultOn;
            this.Blade = defaultOn;
            this.Block = defaultOn;
            this.Blunt = defaultOn;
            this.HandToHand = defaultOn;
            this.HeavyArmor = defaultOn;
            this.Alchemy = defaultOn;
            this.Alteration = defaultOn;
            this.Conjuration = defaultOn;
            this.Destruction = defaultOn;
            this.Illusion = defaultOn;
            this.Mysticism = defaultOn;
            this.Restoration = defaultOn;
            this.Acrobatics = defaultOn;
            this.LightArmor = defaultOn;
            this.Marksman = defaultOn;
            this.Mercantile = defaultOn;
            this.Security = defaultOn;
            this.Sneak = defaultOn;
            this.Speechcraft = defaultOn;
            this.Health = defaultOn;
            this.Strength = defaultOn;
            this.Intelligence = defaultOn;
            this.Willpower = defaultOn;
            this.Agility = defaultOn;
            this.Speed = defaultOn;
            this.Endurance = defaultOn;
            this.Personality = defaultOn;
            this.Luck = defaultOn;
            this.Hair = defaultOn;
            this.HairLength = defaultOn;
            this.Eyes = deepCopyOption;
            this.HairColor = defaultOn;
            this.CombatStyle = defaultOn;
            this.FaceGenGeometrySymmetric = defaultOn;
            this.FaceGenGeometryAsymmetric = defaultOn;
            this.FaceGenTextureSymmetric = defaultOn;
            this.Unknown = defaultOn;
            this.ACBSDataTypeState = defaultOn;
            this.AIDTDataTypeState = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public bool Name;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Flags;
        public bool BaseSpellPoints;
        public bool Fatigue;
        public bool BarterGold;
        public bool LevelOffset;
        public bool CalcMin;
        public bool CalcMax;
        public MaskItem<CopyOption, RankPlacement_CopyMask> Factions;
        public bool DeathItem;
        public bool Race;
        public CopyOption Spells;
        public bool Script;
        public MaskItem<CopyOption, ItemEntry_CopyMask> Items;
        public bool Aggression;
        public bool Confidence;
        public bool EnergyLevel;
        public bool Responsibility;
        public bool BuySellServices;
        public bool Teaches;
        public bool MaximumTrainingLevel;
        public bool Fluff;
        public CopyOption AIPackages;
        public CopyOption Animations;
        public bool Class;
        public bool Armorer;
        public bool Athletics;
        public bool Blade;
        public bool Block;
        public bool Blunt;
        public bool HandToHand;
        public bool HeavyArmor;
        public bool Alchemy;
        public bool Alteration;
        public bool Conjuration;
        public bool Destruction;
        public bool Illusion;
        public bool Mysticism;
        public bool Restoration;
        public bool Acrobatics;
        public bool LightArmor;
        public bool Marksman;
        public bool Mercantile;
        public bool Security;
        public bool Sneak;
        public bool Speechcraft;
        public bool Health;
        public bool Strength;
        public bool Intelligence;
        public bool Willpower;
        public bool Agility;
        public bool Speed;
        public bool Endurance;
        public bool Personality;
        public bool Luck;
        public bool Hair;
        public bool HairLength;
        public CopyOption Eyes;
        public bool HairColor;
        public bool CombatStyle;
        public bool FaceGenGeometrySymmetric;
        public bool FaceGenGeometryAsymmetric;
        public bool FaceGenTextureSymmetric;
        public bool Unknown;
        public bool ACBSDataTypeState;
        public bool AIDTDataTypeState;
        public bool DATADataTypeState;
        #endregion

    }

    public class NPC_TranslationMask : NPCAbstract_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Flags;
        public bool BaseSpellPoints;
        public bool Fatigue;
        public bool BarterGold;
        public bool LevelOffset;
        public bool CalcMin;
        public bool CalcMax;
        public MaskItem<bool, RankPlacement_TranslationMask> Factions;
        public bool DeathItem;
        public bool Race;
        public bool Spells;
        public bool Script;
        public MaskItem<bool, ItemEntry_TranslationMask> Items;
        public bool Aggression;
        public bool Confidence;
        public bool EnergyLevel;
        public bool Responsibility;
        public bool BuySellServices;
        public bool Teaches;
        public bool MaximumTrainingLevel;
        public bool Fluff;
        public bool AIPackages;
        public bool Animations;
        public bool Class;
        public bool Armorer;
        public bool Athletics;
        public bool Blade;
        public bool Block;
        public bool Blunt;
        public bool HandToHand;
        public bool HeavyArmor;
        public bool Alchemy;
        public bool Alteration;
        public bool Conjuration;
        public bool Destruction;
        public bool Illusion;
        public bool Mysticism;
        public bool Restoration;
        public bool Acrobatics;
        public bool LightArmor;
        public bool Marksman;
        public bool Mercantile;
        public bool Security;
        public bool Sneak;
        public bool Speechcraft;
        public bool Health;
        public bool Strength;
        public bool Intelligence;
        public bool Willpower;
        public bool Agility;
        public bool Speed;
        public bool Endurance;
        public bool Personality;
        public bool Luck;
        public bool Hair;
        public bool HairLength;
        public bool Eyes;
        public bool HairColor;
        public bool CombatStyle;
        public bool FaceGenGeometrySymmetric;
        public bool FaceGenGeometryAsymmetric;
        public bool FaceGenTextureSymmetric;
        public bool Unknown;
        public bool ACBSDataTypeState;
        public bool AIDTDataTypeState;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public NPC_TranslationMask()
            : base()
        {
        }

        public NPC_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Flags = defaultOn;
            this.BaseSpellPoints = defaultOn;
            this.Fatigue = defaultOn;
            this.BarterGold = defaultOn;
            this.LevelOffset = defaultOn;
            this.CalcMin = defaultOn;
            this.CalcMax = defaultOn;
            this.Factions = new MaskItem<bool, RankPlacement_TranslationMask>(defaultOn, null);
            this.DeathItem = defaultOn;
            this.Race = defaultOn;
            this.Spells = defaultOn;
            this.Script = defaultOn;
            this.Items = new MaskItem<bool, ItemEntry_TranslationMask>(defaultOn, null);
            this.Aggression = defaultOn;
            this.Confidence = defaultOn;
            this.EnergyLevel = defaultOn;
            this.Responsibility = defaultOn;
            this.BuySellServices = defaultOn;
            this.Teaches = defaultOn;
            this.MaximumTrainingLevel = defaultOn;
            this.Fluff = defaultOn;
            this.AIPackages = defaultOn;
            this.Animations = defaultOn;
            this.Class = defaultOn;
            this.Armorer = defaultOn;
            this.Athletics = defaultOn;
            this.Blade = defaultOn;
            this.Block = defaultOn;
            this.Blunt = defaultOn;
            this.HandToHand = defaultOn;
            this.HeavyArmor = defaultOn;
            this.Alchemy = defaultOn;
            this.Alteration = defaultOn;
            this.Conjuration = defaultOn;
            this.Destruction = defaultOn;
            this.Illusion = defaultOn;
            this.Mysticism = defaultOn;
            this.Restoration = defaultOn;
            this.Acrobatics = defaultOn;
            this.LightArmor = defaultOn;
            this.Marksman = defaultOn;
            this.Mercantile = defaultOn;
            this.Security = defaultOn;
            this.Sneak = defaultOn;
            this.Speechcraft = defaultOn;
            this.Health = defaultOn;
            this.Strength = defaultOn;
            this.Intelligence = defaultOn;
            this.Willpower = defaultOn;
            this.Agility = defaultOn;
            this.Speed = defaultOn;
            this.Endurance = defaultOn;
            this.Personality = defaultOn;
            this.Luck = defaultOn;
            this.Hair = defaultOn;
            this.HairLength = defaultOn;
            this.Eyes = defaultOn;
            this.HairColor = defaultOn;
            this.CombatStyle = defaultOn;
            this.FaceGenGeometrySymmetric = defaultOn;
            this.FaceGenGeometryAsymmetric = defaultOn;
            this.FaceGenTextureSymmetric = defaultOn;
            this.Unknown = defaultOn;
            this.ACBSDataTypeState = defaultOn;
            this.AIDTDataTypeState = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Flags, null));
            ret.Add((BaseSpellPoints, null));
            ret.Add((Fatigue, null));
            ret.Add((BarterGold, null));
            ret.Add((LevelOffset, null));
            ret.Add((CalcMin, null));
            ret.Add((CalcMax, null));
            ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
            ret.Add((DeathItem, null));
            ret.Add((Race, null));
            ret.Add((Spells, null));
            ret.Add((Script, null));
            ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
            ret.Add((Aggression, null));
            ret.Add((Confidence, null));
            ret.Add((EnergyLevel, null));
            ret.Add((Responsibility, null));
            ret.Add((BuySellServices, null));
            ret.Add((Teaches, null));
            ret.Add((MaximumTrainingLevel, null));
            ret.Add((Fluff, null));
            ret.Add((AIPackages, null));
            ret.Add((Animations, null));
            ret.Add((Class, null));
            ret.Add((Armorer, null));
            ret.Add((Athletics, null));
            ret.Add((Blade, null));
            ret.Add((Block, null));
            ret.Add((Blunt, null));
            ret.Add((HandToHand, null));
            ret.Add((HeavyArmor, null));
            ret.Add((Alchemy, null));
            ret.Add((Alteration, null));
            ret.Add((Conjuration, null));
            ret.Add((Destruction, null));
            ret.Add((Illusion, null));
            ret.Add((Mysticism, null));
            ret.Add((Restoration, null));
            ret.Add((Acrobatics, null));
            ret.Add((LightArmor, null));
            ret.Add((Marksman, null));
            ret.Add((Mercantile, null));
            ret.Add((Security, null));
            ret.Add((Sneak, null));
            ret.Add((Speechcraft, null));
            ret.Add((Health, null));
            ret.Add((Strength, null));
            ret.Add((Intelligence, null));
            ret.Add((Willpower, null));
            ret.Add((Agility, null));
            ret.Add((Speed, null));
            ret.Add((Endurance, null));
            ret.Add((Personality, null));
            ret.Add((Luck, null));
            ret.Add((Hair, null));
            ret.Add((HairLength, null));
            ret.Add((Eyes, null));
            ret.Add((HairColor, null));
            ret.Add((CombatStyle, null));
            ret.Add((FaceGenGeometrySymmetric, null));
            ret.Add((FaceGenGeometryAsymmetric, null));
            ret.Add((FaceGenTextureSymmetric, null));
            ret.Add((Unknown, null));
            ret.Add((ACBSDataTypeState, null));
            ret.Add((AIDTDataTypeState, null));
            ret.Add((DATADataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class NPCBinaryWriteTranslation :
        NPCAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static NPCBinaryWriteTranslation Instance = new NPCBinaryWriteTranslation();

        public static void Write_Embedded(
            INPCInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            INPCInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                var loquiItem = item.Model;
                ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.ACBSDataTypeState.HasFlag(NPC.ACBSDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(NPC_Registration.ACBS_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.NPCFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    writer.Write(item.BaseSpellPoints);
                    writer.Write(item.Fatigue);
                    writer.Write(item.BarterGold);
                    writer.Write(item.LevelOffset);
                    writer.Write(item.CalcMin);
                    writer.Write(item.CalcMax);
                }
            }
            if (item.Factions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IRankPlacementGetter>.Instance.Write(
                    writer: writer,
                    items: item.Factions,
                    fieldIndex: (int)NPC_FieldIndex.Factions,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IRankPlacementGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((RankPlacementBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.DeathItem_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DeathItem_Property,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.INAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Race_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Race_Property,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.RNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Spells.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<ISpellAbstractInternalGetter>>.Instance.Write(
                    writer: writer,
                    items: item.Spells,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<ISpellAbstractInternalGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            header: recordTypeConverter.ConvertToCustom(NPC_Registration.SPLO_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    });
            }
            if (item.Script_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Items.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IItemEntryGetter>.Instance.Write(
                    writer: writer,
                    items: item.Items,
                    fieldIndex: (int)NPC_FieldIndex.Items,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IItemEntryGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((ItemEntryBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.AIDTDataTypeState.HasFlag(NPC.AIDTDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(NPC_Registration.AIDT_HEADER)))
                {
                    writer.Write(item.Aggression);
                    writer.Write(item.Confidence);
                    writer.Write(item.EnergyLevel);
                    writer.Write(item.Responsibility);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                        writer,
                        item.BuySellServices,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                        writer,
                        item.Teaches,
                        length: 1);
                    writer.Write(item.MaximumTrainingLevel);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fluff);
                }
            }
            if (item.AIPackages.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IAIPackageInternalGetter>>.Instance.Write(
                    writer: writer,
                    items: item.AIPackages,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<IAIPackageInternalGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            header: recordTypeConverter.ConvertToCustom(NPC_Registration.PKID_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    });
            }
            if (item.Animations.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                    writer: writer,
                    items: item.Animations,
                    recordType: NPC_Registration.KFFZ_HEADER,
                    transl: StringBinaryTranslation.Instance.Write);
            }
            if (item.Class_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Class_Property,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.CNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.DATADataTypeState.HasFlag(NPC.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(NPC_Registration.DATA_HEADER)))
                {
                    writer.Write(item.Armorer);
                    writer.Write(item.Athletics);
                    writer.Write(item.Blade);
                    writer.Write(item.Block);
                    writer.Write(item.Blunt);
                    writer.Write(item.HandToHand);
                    writer.Write(item.HeavyArmor);
                    writer.Write(item.Alchemy);
                    writer.Write(item.Alteration);
                    writer.Write(item.Conjuration);
                    writer.Write(item.Destruction);
                    writer.Write(item.Illusion);
                    writer.Write(item.Mysticism);
                    writer.Write(item.Restoration);
                    writer.Write(item.Acrobatics);
                    writer.Write(item.LightArmor);
                    writer.Write(item.Marksman);
                    writer.Write(item.Mercantile);
                    writer.Write(item.Security);
                    writer.Write(item.Sneak);
                    writer.Write(item.Speechcraft);
                    writer.Write(item.Health);
                    writer.Write(item.Strength);
                    writer.Write(item.Intelligence);
                    writer.Write(item.Willpower);
                    writer.Write(item.Agility);
                    writer.Write(item.Speed);
                    writer.Write(item.Endurance);
                    writer.Write(item.Personality);
                    writer.Write(item.Luck);
                }
            }
            if (item.Hair_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Hair_Property,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.HNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.HairLength_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HairLength,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.LNAM_HEADER),
                    nullable: false);
            }
            if (item.Eyes.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IEyeInternalGetter>>.Instance.Write(
                    writer: writer,
                    items: item.Eyes,
                    recordType: NPC_Registration.ENAM_HEADER,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<IEyeInternalGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            masterReferences: masterReferences);
                    });
            }
            if (item.HairColor_IsSet)
            {
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HairColor,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.HCLR_HEADER),
                    nullable: false,
                    extraByte: true);
            }
            if (item.CombatStyle_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CombatStyle_Property,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.ZNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.FaceGenGeometrySymmetric_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FaceGenGeometrySymmetric,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.FGGS_HEADER),
                    nullable: false);
            }
            if (item.FaceGenGeometryAsymmetric_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FaceGenGeometryAsymmetric,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.FGGA_HEADER),
                    nullable: false);
            }
            if (item.FaceGenTextureSymmetric_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FaceGenTextureSymmetric,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.FGTS_HEADER),
                    nullable: false);
            }
            if (item.Unknown_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown,
                    header: recordTypeConverter.ConvertToCustom(NPC_Registration.FNAM_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            INPCInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: NPC_Registration.NPC__HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            INPCAbstractInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            INPCSpawnInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (INPCInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class NPCBinaryCreateTranslation : NPCAbstractBinaryCreateTranslation
    {
        public new readonly static NPCBinaryCreateTranslation Instance = new NPCBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class NPCBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INPCInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out NPC_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((NPCBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = NPC_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    public partial class NPCBinaryWrapper :
        NPCAbstractBinaryWrapper,
        INPCInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NPC_Registration.Instance;
        public new static NPC_Registration Registration => NPC_Registration.Instance;
        protected override object CommonInstance => NPCCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INPCInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => NPCXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => NPCBinaryWriteTranslation.Instance;

        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Model
        public IModelGetter Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        private int? _ACBSLocation;
        public NPC.ACBSDataType ACBSDataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _ACBSLocation.Value + 0x0;
        private bool _Flags_IsSet => _ACBSLocation.HasValue;
        public NPC.NPCFlag Flags => _Flags_IsSet ? (NPC.NPCFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region BaseSpellPoints
        private int _BaseSpellPointsLocation => _ACBSLocation.Value + 0x4;
        private bool _BaseSpellPoints_IsSet => _ACBSLocation.HasValue;
        public UInt16 BaseSpellPoints => _BaseSpellPoints_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_BaseSpellPointsLocation, 2)) : default;
        #endregion
        #region Fatigue
        private int _FatigueLocation => _ACBSLocation.Value + 0x6;
        private bool _Fatigue_IsSet => _ACBSLocation.HasValue;
        public UInt16 Fatigue => _Fatigue_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_FatigueLocation, 2)) : default;
        #endregion
        #region BarterGold
        private int _BarterGoldLocation => _ACBSLocation.Value + 0x8;
        private bool _BarterGold_IsSet => _ACBSLocation.HasValue;
        public UInt16 BarterGold => _BarterGold_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_BarterGoldLocation, 2)) : default;
        #endregion
        #region LevelOffset
        private int _LevelOffsetLocation => _ACBSLocation.Value + 0xA;
        private bool _LevelOffset_IsSet => _ACBSLocation.HasValue;
        public Int16 LevelOffset => _LevelOffset_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_data.Span.Slice(_LevelOffsetLocation, 2)) : default;
        #endregion
        #region CalcMin
        private int _CalcMinLocation => _ACBSLocation.Value + 0xC;
        private bool _CalcMin_IsSet => _ACBSLocation.HasValue;
        public UInt16 CalcMin => _CalcMin_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_CalcMinLocation, 2)) : default;
        #endregion
        #region CalcMax
        private int _CalcMaxLocation => _ACBSLocation.Value + 0xE;
        private bool _CalcMax_IsSet => _ACBSLocation.HasValue;
        public UInt16 CalcMax => _CalcMax_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_CalcMaxLocation, 2)) : default;
        #endregion
        public IReadOnlySetList<IRankPlacementGetter> Factions { get; private set; } = EmptySetList<RankPlacementBinaryWrapper>.Instance;
        #region DeathItem
        private int? _DeathItemLocation;
        public bool DeathItem_IsSet => _DeathItemLocation.HasValue;
        public IFormIDSetLinkGetter<IItemAbstractInternalGetter> DeathItem_Property => _DeathItemLocation.HasValue ? new FormIDSetLink<IItemAbstractInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _DeathItemLocation.Value, _package.Meta)))) : FormIDSetLink<IItemAbstractInternalGetter>.Empty;
        public IItemAbstractInternalGetter DeathItem => default;
        #endregion
        #region Race
        private int? _RaceLocation;
        public bool Race_IsSet => _RaceLocation.HasValue;
        public IFormIDSetLinkGetter<IRaceInternalGetter> Race_Property => _RaceLocation.HasValue ? new FormIDSetLink<IRaceInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _RaceLocation.Value, _package.Meta)))) : FormIDSetLink<IRaceInternalGetter>.Empty;
        public IRaceInternalGetter Race => default;
        #endregion
        public IReadOnlySetList<IFormIDLinkGetter<ISpellAbstractInternalGetter>> Spells { get; private set; } = EmptySetList<IFormIDLinkGetter<ISpellAbstractInternalGetter>>.Instance;
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormIDSetLinkGetter<IScriptInternalGetter> Script_Property => _ScriptLocation.HasValue ? new FormIDSetLink<IScriptInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormIDSetLink<IScriptInternalGetter>.Empty;
        public IScriptInternalGetter Script => default;
        #endregion
        public IReadOnlySetList<IItemEntryGetter> Items { get; private set; } = EmptySetList<ItemEntryBinaryWrapper>.Instance;
        private int? _AIDTLocation;
        public NPC.AIDTDataType AIDTDataTypeState { get; private set; }
        public Byte Aggression => _AIDTLocation.HasValue ? _data.Span[_AIDTLocation.Value + 0] : default;
        public Byte Confidence => _AIDTLocation.HasValue ? _data.Span[_AIDTLocation.Value + 1] : default;
        public Byte EnergyLevel => _AIDTLocation.HasValue ? _data.Span[_AIDTLocation.Value + 2] : default;
        public Byte Responsibility => _AIDTLocation.HasValue ? _data.Span[_AIDTLocation.Value + 3] : default;
        #region BuySellServices
        private int _BuySellServicesLocation => _AIDTLocation.Value + 0x4;
        private bool _BuySellServices_IsSet => _AIDTLocation.HasValue;
        public NPC.BuySellServiceFlag BuySellServices => _BuySellServices_IsSet ? (NPC.BuySellServiceFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_BuySellServicesLocation, 4)) : default;
        #endregion
        #region Teaches
        private int _TeachesLocation => _AIDTLocation.Value + 0x8;
        private bool _Teaches_IsSet => _AIDTLocation.HasValue;
        public Skill Teaches => _Teaches_IsSet ? (Skill)_data.Span.Slice(_TeachesLocation, 1)[0] : default;
        #endregion
        public Byte MaximumTrainingLevel => _AIDTLocation.HasValue ? _data.Span[_AIDTLocation.Value + 9] : default;
        #region Fluff
        private int _FluffLocation => _AIDTLocation.Value + 0xA;
        private bool _Fluff_IsSet => _AIDTLocation.HasValue;
        public ReadOnlySpan<Byte> Fluff => _Fluff_IsSet ? _data.Span.Slice(_FluffLocation, 2).ToArray() : default;
        #endregion
        public IReadOnlySetList<IFormIDLinkGetter<IAIPackageInternalGetter>> AIPackages { get; private set; } = EmptySetList<IFormIDLinkGetter<IAIPackageInternalGetter>>.Instance;
        public IReadOnlySetList<String> Animations { get; private set; } = EmptySetList<String>.Instance;
        #region Class
        private int? _ClassLocation;
        public bool Class_IsSet => _ClassLocation.HasValue;
        public IFormIDSetLinkGetter<IClassInternalGetter> Class_Property => _ClassLocation.HasValue ? new FormIDSetLink<IClassInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ClassLocation.Value, _package.Meta)))) : FormIDSetLink<IClassInternalGetter>.Empty;
        public IClassInternalGetter Class => default;
        #endregion
        private int? _DATALocation;
        public NPC.DATADataType DATADataTypeState { get; private set; }
        public Byte Armorer => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 0] : default;
        public Byte Athletics => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 1] : default;
        public Byte Blade => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 2] : default;
        public Byte Block => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 3] : default;
        public Byte Blunt => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 4] : default;
        public Byte HandToHand => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 5] : default;
        public Byte HeavyArmor => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 6] : default;
        public Byte Alchemy => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 7] : default;
        public Byte Alteration => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 8] : default;
        public Byte Conjuration => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 9] : default;
        public Byte Destruction => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 10] : default;
        public Byte Illusion => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 11] : default;
        public Byte Mysticism => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 12] : default;
        public Byte Restoration => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 13] : default;
        public Byte Acrobatics => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 14] : default;
        public Byte LightArmor => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 15] : default;
        public Byte Marksman => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 16] : default;
        public Byte Mercantile => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 17] : default;
        public Byte Security => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 18] : default;
        public Byte Sneak => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 19] : default;
        public Byte Speechcraft => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 20] : default;
        #region Health
        private int _HealthLocation => _DATALocation.Value + 0x15;
        private bool _Health_IsSet => _DATALocation.HasValue;
        public UInt32 Health => _Health_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HealthLocation, 4)) : default;
        #endregion
        public Byte Strength => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 25] : default;
        public Byte Intelligence => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 26] : default;
        public Byte Willpower => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 27] : default;
        public Byte Agility => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 28] : default;
        public Byte Speed => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 29] : default;
        public Byte Endurance => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 30] : default;
        public Byte Personality => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 31] : default;
        public Byte Luck => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 32] : default;
        #region Hair
        private int? _HairLocation;
        public bool Hair_IsSet => _HairLocation.HasValue;
        public IFormIDSetLinkGetter<IHairInternalGetter> Hair_Property => _HairLocation.HasValue ? new FormIDSetLink<IHairInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _HairLocation.Value, _package.Meta)))) : FormIDSetLink<IHairInternalGetter>.Empty;
        public IHairInternalGetter Hair => default;
        #endregion
        #region HairLength
        private int? _HairLengthLocation;
        public bool HairLength_IsSet => _HairLengthLocation.HasValue;
        public Single HairLength => _HairLengthLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordSpan(_data, _HairLengthLocation.Value, _package.Meta)) : default;
        #endregion
        public IReadOnlySetList<IFormIDLinkGetter<IEyeInternalGetter>> Eyes { get; private set; } = EmptySetList<IFormIDLinkGetter<IEyeInternalGetter>>.Instance;
        #region HairColor
        private int? _HairColorLocation;
        public bool HairColor_IsSet => _HairColorLocation.HasValue;
        public Color HairColor => _HairColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _HairColorLocation.Value, _package.Meta).ReadColor() : default;
        #endregion
        #region CombatStyle
        private int? _CombatStyleLocation;
        public bool CombatStyle_IsSet => _CombatStyleLocation.HasValue;
        public IFormIDSetLinkGetter<ICombatStyleInternalGetter> CombatStyle_Property => _CombatStyleLocation.HasValue ? new FormIDSetLink<ICombatStyleInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CombatStyleLocation.Value, _package.Meta)))) : FormIDSetLink<ICombatStyleInternalGetter>.Empty;
        public ICombatStyleInternalGetter CombatStyle => default;
        #endregion
        #region FaceGenGeometrySymmetric
        private int? _FaceGenGeometrySymmetricLocation;
        public bool FaceGenGeometrySymmetric_IsSet => _FaceGenGeometrySymmetricLocation.HasValue;
        public ReadOnlySpan<Byte> FaceGenGeometrySymmetric => _FaceGenGeometrySymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FaceGenGeometrySymmetricLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region FaceGenGeometryAsymmetric
        private int? _FaceGenGeometryAsymmetricLocation;
        public bool FaceGenGeometryAsymmetric_IsSet => _FaceGenGeometryAsymmetricLocation.HasValue;
        public ReadOnlySpan<Byte> FaceGenGeometryAsymmetric => _FaceGenGeometryAsymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FaceGenGeometryAsymmetricLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region FaceGenTextureSymmetric
        private int? _FaceGenTextureSymmetricLocation;
        public bool FaceGenTextureSymmetric_IsSet => _FaceGenTextureSymmetricLocation.HasValue;
        public ReadOnlySpan<Byte> FaceGenTextureSymmetric => _FaceGenTextureSymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FaceGenTextureSymmetricLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region Unknown
        private int? _UnknownLocation;
        public bool Unknown_IsSet => _UnknownLocation.HasValue;
        public ReadOnlySpan<Byte> Unknown => _UnknownLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _UnknownLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected NPCBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static NPCBinaryWrapper NPCFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new NPCBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(stream, offset);
            UtilityTranslation.FillSubrecordTypesForWrapper(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                meta: ret._package.Meta,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int offset,
            RecordType type,
            int? lastParsed)
        {
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryWrapper.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Model);
                }
                case 0x53424341: // ACBS
                {
                    _ACBSLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.ACBSDataTypeState = NPC.ACBSDataType.Has;
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.CalcMax);
                }
                case 0x4D414E53: // SNAM
                {
                    this.Factions = BinaryWrapperSetList<RankPlacementBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => RankPlacementBinaryWrapper.RankPlacementFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: UtilityTranslation.ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    _DeathItemLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.DeathItem);
                }
                case 0x4D414E52: // RNAM
                {
                    _RaceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Race);
                }
                case 0x4F4C5053: // SPLO
                {
                    this.Spells = BinaryWrapperSetList<IFormIDLinkGetter<ISpellAbstractInternalGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormIDLink<ISpellAbstractInternalGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: UtilityTranslation.ParseRecordLocations(
                            stream: stream,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Spells);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Script);
                }
                case 0x4F544E43: // CNTO
                {
                    this.Items = BinaryWrapperSetList<ItemEntryBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ItemEntryBinaryWrapper.ItemEntryFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: UtilityTranslation.ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Items);
                }
                case 0x54444941: // AIDT
                {
                    _AIDTLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.AIDTDataTypeState = NPC.AIDTDataType.Has;
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Fluff);
                }
                case 0x44494B50: // PKID
                {
                    this.AIPackages = BinaryWrapperSetList<IFormIDLinkGetter<IAIPackageInternalGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormIDLink<IAIPackageInternalGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: UtilityTranslation.ParseRecordLocations(
                            stream: stream,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Animations = BinaryWrapperSetList<String>.FactoryByLazyParse(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ParseUnknownLengthString(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Animations);
                }
                case 0x4D414E43: // CNAM
                {
                    _ClassLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Class);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = NPC.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Luck);
                }
                case 0x4D414E48: // HNAM
                {
                    _HairLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Hair);
                }
                case 0x4D414E4C: // LNAM
                {
                    _HairLengthLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.HairLength);
                }
                case 0x4D414E45: // ENAM
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Eyes = BinaryWrapperSetList<IFormIDLinkGetter<IEyeInternalGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormIDLink<IEyeInternalGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Eyes);
                }
                case 0x524C4348: // HCLR
                {
                    _HairColorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.HairColor);
                }
                case 0x4D414E5A: // ZNAM
                {
                    _CombatStyleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.CombatStyle);
                }
                case 0x53474746: // FGGS
                {
                    _FaceGenGeometrySymmetricLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenGeometrySymmetric);
                }
                case 0x41474746: // FGGA
                {
                    _FaceGenGeometryAsymmetricLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenGeometryAsymmetric);
                }
                case 0x53544746: // FGTS
                {
                    _FaceGenTextureSymmetricLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.FaceGenTextureSymmetric);
                }
                case 0x4D414E46: // FNAM
                {
                    _UnknownLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NPC_FieldIndex.Unknown);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
    }

    #endregion

    #endregion

}
