/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class OblivionMajorRecord : 
        MajorRecord,
        IOblivionMajorRecord,
        ILoquiObject<OblivionMajorRecord>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<OblivionMajorRecord>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OblivionMajorRecord_Registration.Instance;
        public new static OblivionMajorRecord_Registration Registration => OblivionMajorRecord_Registration.Instance;

        #region Ctor
        protected OblivionMajorRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion


        IMask<bool> IEqualsMask<OblivionMajorRecord>.GetEqualsMask(OblivionMajorRecord rhs, EqualsMaskHelper.Include include) => OblivionMajorRecordCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IOblivionMajorRecordGetter>.GetEqualsMask(IOblivionMajorRecordGetter rhs, EqualsMaskHelper.Include include) => OblivionMajorRecordCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            OblivionMajorRecord_Mask<bool> printMask = null)
        {
            return OblivionMajorRecordCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            OblivionMajorRecordCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new OblivionMajorRecord_Mask<bool> GetHasBeenSetMask()
        {
            return OblivionMajorRecordCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMajorRecord rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMajorRecord rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (this.OblivionMajorRecordFlags != rhs.OblivionMajorRecordFlags) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(OblivionMajorRecordFlags).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static OblivionMajorRecord Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            OblivionMajorRecord_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static OblivionMajorRecord Create_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = OblivionMajorRecord_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static OblivionMajorRecord Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return null;
                    break;
                default:
                    break;
            }
            OblivionMajorRecord ret;
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown OblivionMajorRecord subclass: {node.Name.LocalName}");
            }
            return ret;
        }

        public static OblivionMajorRecord Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            OblivionMajorRecord_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static OblivionMajorRecord Create_Xml(
            string path,
            out OblivionMajorRecord_ErrorMask errorMask,
            OblivionMajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static OblivionMajorRecord Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            OblivionMajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static OblivionMajorRecord Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            OblivionMajorRecord_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static OblivionMajorRecord Create_Xml(
            Stream stream,
            out OblivionMajorRecord_ErrorMask errorMask,
            OblivionMajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static OblivionMajorRecord Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            OblivionMajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = OblivionMajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out OblivionMajorRecord_ErrorMask errorMask,
            OblivionMajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out OblivionMajorRecord_ErrorMask errorMask,
            OblivionMajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = OblivionMajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            OblivionMajorRecordCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            OblivionMajorRecord item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    MajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((OblivionMajorRecord_FieldIndex)index)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
        }

        public OblivionMajorRecord(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out OblivionMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = OblivionMajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = OblivionMajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            OblivionMajorRecord item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        #endregion

        public OblivionMajorRecord Copy(
            OblivionMajorRecord_CopyMask copyMask = null,
            IOblivionMajorRecordGetter def = null)
        {
            return OblivionMajorRecord.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static OblivionMajorRecord Copy(
            IOblivionMajorRecord item,
            OblivionMajorRecord_CopyMask copyMask = null,
            IOblivionMajorRecordGetter def = null)
        {
            OblivionMajorRecord ret = (OblivionMajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static OblivionMajorRecord Copy_ToLoqui(
            IOblivionMajorRecordGetter item,
            OblivionMajorRecord_CopyMask copyMask = null,
            IOblivionMajorRecordGetter def = null)
        {
            OblivionMajorRecord ret = (OblivionMajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IMajorRecordGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IOblivionMajorRecordGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IOblivionMajorRecordGetter rhs,
            OblivionMajorRecord_CopyMask copyMask,
            IOblivionMajorRecordGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IOblivionMajorRecordGetter rhs,
            out OblivionMajorRecord_ErrorMask errorMask,
            OblivionMajorRecord_CopyMask copyMask = null,
            IOblivionMajorRecordGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = OblivionMajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            OblivionMajorRecord_CopyMask copyMask = null,
            IOblivionMajorRecordGetter def = null,
            bool doMasks = true)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    this.OblivionMajorRecordFlags = (OblivionMajorRecord.OblivionMajorRecordFlag)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            OblivionMajorRecordCommon.Clear(this);
        }


        protected new static void CopyInInternal_OblivionMajorRecord(OblivionMajorRecord obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out OblivionMajorRecord_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    obj.OblivionMajorRecordFlags = (OblivionMajorRecord.OblivionMajorRecordFlag)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IOblivionMajorRecord : IOblivionMajorRecordGetter, IMajorRecord, ILoquiClass<IOblivionMajorRecord, IOblivionMajorRecordGetter>, ILoquiClass<OblivionMajorRecord, IOblivionMajorRecordGetter>
    {
        new OblivionMajorRecord.OblivionMajorRecordFlag OblivionMajorRecordFlags { get; set; }

    }

    public partial interface IOblivionMajorRecordGetter : IMajorRecordGetter
    {
        #region OblivionMajorRecordFlags
        OblivionMajorRecord.OblivionMajorRecordFlag OblivionMajorRecordFlags { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum OblivionMajorRecord_FieldIndex
    {
        FormKey = 0,
        Version = 1,
        EditorID = 2,
        RecordType = 3,
        OblivionMajorRecordFlags = 4,
    }
    #endregion

    #region Registration
    public class OblivionMajorRecord_Registration : ILoquiRegistration
    {
        public static readonly OblivionMajorRecord_Registration Instance = new OblivionMajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 169,
            version: 0);

        public const string GUID = "73890e6b-2cc5-468e-83ee-d6bcb04c3d63";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(OblivionMajorRecord_Mask<>);

        public static readonly Type ErrorMaskType = typeof(OblivionMajorRecord_ErrorMask);

        public static readonly Type ClassType = typeof(OblivionMajorRecord);

        public static readonly Type GetterType = typeof(IOblivionMajorRecordGetter);

        public static readonly Type SetterType = typeof(IOblivionMajorRecord);

        public static readonly Type CommonType = typeof(OblivionMajorRecordCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.OblivionMajorRecord";

        public const string Name = "OblivionMajorRecord";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBLIVIONMAJORRECORDFLAGS":
                    return (ushort)OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return "OblivionMajorRecordFlags";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return typeof(OblivionMajorRecord.OblivionMajorRecordFlag);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType ANIO_HEADER = new RecordType("ANIO");
        public static readonly RecordType BSGN_HEADER = new RecordType("BSGN");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType CLMT_HEADER = new RecordType("CLMT");
        public static readonly RecordType CSTY_HEADER = new RecordType("CSTY");
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType DIAL_HEADER = new RecordType("DIAL");
        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType EFSH_HEADER = new RecordType("EFSH");
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType IDLE_HEADER = new RecordType("IDLE");
        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType LSCR_HEADER = new RecordType("LSCR");
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType QUST_HEADER = new RecordType("QUST");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType REGN_HEADER = new RecordType("REGN");
        public static readonly RecordType ROAD_HEADER = new RecordType("ROAD");
        public static readonly RecordType SCPT_HEADER = new RecordType("SCPT");
        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType STAT_HEADER = new RecordType("STAT");
        public static readonly RecordType SBSP_HEADER = new RecordType("SBSP");
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType WATR_HEADER = new RecordType("WATR");
        public static readonly RecordType WTHR_HEADER = new RecordType("WTHR");
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType AMMO_HEADER = new RecordType("AMMO");
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BMDT_HEADER = new RecordType("BMDT");
        public static readonly RecordType INGR_HEADER = new RecordType("INGR");
        public static readonly RecordType KEYM_HEADER = new RecordType("KEYM");
        public static readonly RecordType LVLI_HEADER = new RecordType("LVLI");
        public static readonly RecordType LIGH_HEADER = new RecordType("LIGH");
        public static readonly RecordType MISC_HEADER = new RecordType("MISC");
        public static readonly RecordType ALCH_HEADER = new RecordType("ALCH");
        public static readonly RecordType SGST_HEADER = new RecordType("SGST");
        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType LVLC_HEADER = new RecordType("LVLC");
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        ACTI_HEADER,
                        PACK_HEADER,
                        ANIO_HEADER,
                        BSGN_HEADER,
                        CLAS_HEADER,
                        CLMT_HEADER,
                        CSTY_HEADER,
                        CONT_HEADER,
                        DIAL_HEADER,
                        INFO_HEADER,
                        DOOR_HEADER,
                        EFSH_HEADER,
                        ENCH_HEADER,
                        EYES_HEADER,
                        FACT_HEADER,
                        FLOR_HEADER,
                        FURN_HEADER,
                        GMST_HEADER,
                        GLOB_HEADER,
                        GRAS_HEADER,
                        HAIR_HEADER,
                        IDLE_HEADER,
                        LAND_HEADER,
                        LTEX_HEADER,
                        LSCR_HEADER,
                        MGEF_HEADER,
                        PGRD_HEADER,
                        ACRE_HEADER,
                        ACHR_HEADER,
                        REFR_HEADER,
                        QUST_HEADER,
                        RACE_HEADER,
                        REGN_HEADER,
                        ROAD_HEADER,
                        SCPT_HEADER,
                        SKIL_HEADER,
                        SOUN_HEADER,
                        STAT_HEADER,
                        SBSP_HEADER,
                        TREE_HEADER,
                        WATR_HEADER,
                        WTHR_HEADER,
                        APPA_HEADER,
                        AMMO_HEADER,
                        BOOK_HEADER,
                        FULL_HEADER,
                        SCRI_HEADER,
                        ENAM_HEADER,
                        ANAM_HEADER,
                        BMDT_HEADER,
                        INGR_HEADER,
                        KEYM_HEADER,
                        LVLI_HEADER,
                        LIGH_HEADER,
                        MISC_HEADER,
                        ALCH_HEADER,
                        SGST_HEADER,
                        SLGM_HEADER,
                        WEAP_HEADER,
                        ARMO_HEADER,
                        CLOT_HEADER,
                        LVLC_HEADER,
                        CREA_HEADER,
                        NPC__HEADER,
                        CELL_HEADER,
                        WRLD_HEADER,
                        LVSP_HEADER,
                        SPEL_HEADER
                    })
            );
        });
        public const int NumStructFields = 1;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class OblivionMajorRecordCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            IOblivionMajorRecordGetter def,
            ErrorMaskBuilder errorMask,
            OblivionMajorRecord_CopyMask copyMask)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.OblivionMajorRecordFlags ?? true)
            {
                errorMask?.PushIndex((int)OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags);
                try
                {
                    item.OblivionMajorRecordFlags = rhs.OblivionMajorRecordFlags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IOblivionMajorRecord item)
        {
            item.OblivionMajorRecordFlags = default(OblivionMajorRecord.OblivionMajorRecordFlag);
        }

        public static OblivionMajorRecord_Mask<bool> GetEqualsMask(
            this IOblivionMajorRecordGetter item,
            IOblivionMajorRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new OblivionMajorRecord_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IOblivionMajorRecordGetter item,
            IOblivionMajorRecordGetter rhs,
            OblivionMajorRecord_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.OblivionMajorRecordFlags = item.OblivionMajorRecordFlags == rhs.OblivionMajorRecordFlags;
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IOblivionMajorRecordGetter item,
            string name = null,
            OblivionMajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IOblivionMajorRecordGetter item,
            FileGeneration fg,
            string name = null,
            OblivionMajorRecord_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(OblivionMajorRecord)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(OblivionMajorRecord)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.OblivionMajorRecordFlags ?? true)
                {
                    fg.AppendLine($"OblivionMajorRecordFlags => {item.OblivionMajorRecordFlags}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IOblivionMajorRecordGetter item,
            OblivionMajorRecord_Mask<bool?> checkMask)
        {
            return true;
        }

        public static OblivionMajorRecord_Mask<bool> GetHasBeenSetMask(IOblivionMajorRecordGetter item)
        {
            var ret = new OblivionMajorRecord_Mask<bool>();
            ret.OblivionMajorRecordFlags = true;
            return ret;
        }

        public static OblivionMajorRecord_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static OblivionMajorRecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.FormKey:
                    return (OblivionMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (OblivionMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (OblivionMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (OblivionMajorRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            OblivionMajorRecord item,
            bool doMasks,
            out OblivionMajorRecord_ErrorMask errorMask,
            OblivionMajorRecord_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = OblivionMajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            OblivionMajorRecord item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.OblivionMajorRecord");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.OblivionMajorRecord");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this OblivionMajorRecord item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            MajorRecordCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags) ?? true))
            {
                EnumXmlTranslation<OblivionMajorRecord.OblivionMajorRecordFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.OblivionMajorRecordFlags),
                    item: item.OblivionMajorRecordFlags,
                    fieldIndex: (int)OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this OblivionMajorRecord item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    OblivionMajorRecordCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this OblivionMajorRecord item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "OblivionMajorRecordFlags":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags);
                        if (EnumXmlTranslation<OblivionMajorRecord.OblivionMajorRecordFlag>.Instance.Parse(
                            node: node,
                            item: out OblivionMajorRecord.OblivionMajorRecordFlag OblivionMajorRecordFlagsParse,
                            errorMask: errorMask))
                        {
                            item.OblivionMajorRecordFlags = OblivionMajorRecordFlagsParse;
                        }
                        else
                        {
                            item.OblivionMajorRecordFlags = default(OblivionMajorRecord.OblivionMajorRecordFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecordCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            OblivionMajorRecord item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out OblivionMajorRecord_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = OblivionMajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            OblivionMajorRecord item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_Embedded(
            OblivionMajorRecord item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class OblivionMajorRecord_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<OblivionMajorRecord_Mask<T>>
    {
        #region Ctors
        public OblivionMajorRecord_Mask()
        {
        }

        public OblivionMajorRecord_Mask(T initialValue)
        {
            this.OblivionMajorRecordFlags = initialValue;
        }
        #endregion

        #region Members
        public T OblivionMajorRecordFlags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMajorRecord_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMajorRecord_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.OblivionMajorRecordFlags, rhs.OblivionMajorRecordFlags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.OblivionMajorRecordFlags?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.OblivionMajorRecordFlags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new OblivionMajorRecord_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new OblivionMajorRecord_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(OblivionMajorRecord_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.OblivionMajorRecordFlags = eval(this.OblivionMajorRecordFlags);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(OblivionMajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, OblivionMajorRecord_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(OblivionMajorRecord_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.OblivionMajorRecordFlags ?? true)
                {
                    fg.AppendLine($"OblivionMajorRecordFlags => {OblivionMajorRecordFlags}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class OblivionMajorRecord_ErrorMask : MajorRecord_ErrorMask, IErrorMask<OblivionMajorRecord_ErrorMask>
    {
        #region Members
        public Exception OblivionMajorRecordFlags;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return OblivionMajorRecordFlags;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    this.OblivionMajorRecordFlags = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            OblivionMajorRecord_FieldIndex enu = (OblivionMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    this.OblivionMajorRecordFlags = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (OblivionMajorRecordFlags != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("OblivionMajorRecord_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"OblivionMajorRecordFlags => {OblivionMajorRecordFlags}");
        }
        #endregion

        #region Combine
        public OblivionMajorRecord_ErrorMask Combine(OblivionMajorRecord_ErrorMask rhs)
        {
            var ret = new OblivionMajorRecord_ErrorMask();
            ret.OblivionMajorRecordFlags = this.OblivionMajorRecordFlags.Combine(rhs.OblivionMajorRecordFlags);
            return ret;
        }
        public static OblivionMajorRecord_ErrorMask Combine(OblivionMajorRecord_ErrorMask lhs, OblivionMajorRecord_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static OblivionMajorRecord_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new OblivionMajorRecord_ErrorMask();
        }
        #endregion

    }
    public class OblivionMajorRecord_CopyMask : MajorRecord_CopyMask
    {
        public OblivionMajorRecord_CopyMask()
        {
        }

        public OblivionMajorRecord_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.OblivionMajorRecordFlags = defaultOn;
        }

        #region Members
        public bool OblivionMajorRecordFlags;
        #endregion

    }

    public class OblivionMajorRecord_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        public bool OblivionMajorRecordFlags;
        #endregion

        #region Ctors
        public OblivionMajorRecord_TranslationMask()
            : base()
        {
        }

        public OblivionMajorRecord_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.OblivionMajorRecordFlags = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((OblivionMajorRecordFlags, null));
        }
    }
    #endregion

    #endregion

}
