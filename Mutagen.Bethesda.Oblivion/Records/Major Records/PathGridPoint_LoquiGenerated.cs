/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PathGridPoint : IPathGridPoint, ILoquiObject<PathGridPoint>, ILoquiObjectSetter, IEquatable<PathGridPoint>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PathGridPoint_Registration.Instance;
        public static PathGridPoint_Registration Registration => PathGridPoint_Registration.Instance;

        #region Ctor
        public PathGridPoint()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Point
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<P3Float> _Point = NotifyingItem.Factory<P3Float>();
        public INotifyingItem<P3Float> Point_Property => _Point;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P3Float Point
        {
            get => this._Point.Item;
            set => this._Point.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P3Float> IPathGridPoint.Point_Property => this.Point_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P3Float> IPathGridPointGetter.Point_Property => this.Point_Property;
        #endregion
        #region NumConnectionsFluffBytes
        protected INotifyingItem<Byte[]> _NumConnectionsFluffBytes = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[3]);
        public INotifyingItem<Byte[]> NumConnectionsFluffBytes_Property => _NumConnectionsFluffBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] NumConnectionsFluffBytes
        {
            get => this._NumConnectionsFluffBytes.Item;
            set => this._NumConnectionsFluffBytes.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> IPathGridPoint.NumConnectionsFluffBytes_Property => this.NumConnectionsFluffBytes_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> IPathGridPointGetter.NumConnectionsFluffBytes_Property => this.NumConnectionsFluffBytes_Property;
        #endregion
        #region Connections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Int16> _Connections = new NotifyingList<Int16>();
        public INotifyingList<Int16> Connections => _Connections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Int16> ConnectionsEnumerable
        {
            get => _Connections;
            set => _Connections.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Int16> IPathGridPoint.Connections => _Connections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Int16> IPathGridPointGetter.Connections => _Connections;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => PathGridPointCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => PathGridPointCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => PathGridPointCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            PathGridPointCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<PathGridPoint>.GetEqualsMask(PathGridPoint rhs) => PathGridPointCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IPathGridPointGetter>.GetEqualsMask(IPathGridPointGetter rhs) => PathGridPointCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return PathGridPointCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            PathGridPoint_Mask<bool> printMask = null)
        {
            return PathGridPointCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            PathGridPointCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public PathGridPoint_Mask<bool> GetHasBeenSetMask()
        {
            return PathGridPointCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is PathGridPoint rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PathGridPoint rhs)
        {
            if (rhs == null) return false;
            if (this.Point != rhs.Point) return false;
            if (!this.NumConnectionsFluffBytes.EqualsFast(rhs.NumConnectionsFluffBytes)) return false;
            if (!this.Connections.SequenceEqual(rhs.Connections)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Point).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(NumConnectionsFluffBytes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Connections).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static PathGridPoint Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PathGridPoint Create_XML(
            XElement root,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static PathGridPoint Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new PathGridPoint();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PathGridPoint Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static PathGridPoint Create_XML(
            string path,
            out PathGridPoint_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static PathGridPoint Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static PathGridPoint Create_XML(
            Stream stream,
            out PathGridPoint_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<PathGridPoint>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out PathGridPoint_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<PathGridPoint>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out PathGridPoint_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out PathGridPoint_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            PathGridPointCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            PathGridPoint item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Point":
                    P3FloatXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)PathGridPoint_FieldIndex.Point,
                        item: item._Point,
                        errorMask: errorMask);
                    break;
                case "NumConnectionsFluffBytes":
                    ByteArrayXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)PathGridPoint_FieldIndex.NumConnectionsFluffBytes,
                        item: item._NumConnectionsFluffBytes,
                        errorMask: errorMask);
                    break;
                case "Connections":
                    ListXmlTranslation<Int16>.Instance.ParseInto(
                        root: root,
                        item: item._Connections,
                        fieldIndex: (int)PathGridPoint_FieldIndex.Connections,
                        errorMask: errorMask,
                        transl: Int16XmlTranslation.Instance.Parse);
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static PathGridPoint Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PathGridPoint Create_Binary(
            MutagenFrame frame,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static PathGridPoint Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new PathGridPoint();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PathGridPoint Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static PathGridPoint Create_Binary(
            string path,
            out PathGridPoint_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static PathGridPoint Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static PathGridPoint Create_Binary(
            Stream stream,
            out PathGridPoint_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            PathGridPointCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            PathGridPoint item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.ParseInto(
                frame: frame,
                item: item._Point,
                fieldIndex: (int)PathGridPoint_FieldIndex.Point,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.ParseInto(
                frame: frame.SpawnWithLength(3),
                item: item._NumConnectionsFluffBytes,
                fieldIndex: (int)PathGridPoint_FieldIndex.NumConnectionsFluffBytes,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Int16>.Instance.ParseRepeatedItem(
                frame: frame,
                item: item._Connections,
                fieldIndex: (int)PathGridPoint_FieldIndex.Connections,
                lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                errorMask: errorMask,
                transl: Int16BinaryTranslation.Instance.Parse);
        }

        #endregion

        public PathGridPoint Copy(
            PathGridPoint_CopyMask copyMask = null,
            IPathGridPointGetter def = null)
        {
            return PathGridPoint.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PathGridPoint Copy(
            IPathGridPoint item,
            PathGridPoint_CopyMask copyMask = null,
            IPathGridPointGetter def = null)
        {
            PathGridPoint ret;
            if (item.GetType().Equals(typeof(PathGridPoint)))
            {
                ret = new PathGridPoint();
            }
            else
            {
                ret = (PathGridPoint)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PathGridPoint Copy_ToLoqui(
            IPathGridPointGetter item,
            PathGridPoint_CopyMask copyMask = null,
            IPathGridPointGetter def = null)
        {
            PathGridPoint ret;
            if (item.GetType().Equals(typeof(PathGridPoint)))
            {
                ret = new PathGridPoint() as PathGridPoint;
            }
            else
            {
                ret = (PathGridPoint)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IPathGridPointGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPathGridPointGetter rhs,
            PathGridPoint_CopyMask copyMask,
            IPathGridPointGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPathGridPointGetter rhs,
            out PathGridPoint_ErrorMask errorMask,
            PathGridPoint_CopyMask copyMask = null,
            IPathGridPointGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PathGridPointCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IPathGridPointGetter rhs,
            ErrorMaskBuilder errorMask,
            PathGridPoint_CopyMask copyMask = null,
            IPathGridPointGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            PathGridPointCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    this._Point.Set(
                        (P3Float)obj,
                        cmds);
                    break;
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                    this._NumConnectionsFluffBytes.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case PathGridPoint_FieldIndex.Connections:
                    this._Connections.SetTo((IEnumerable<Int16>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            PathGridPointCommon.Clear(this, cmds);
        }


        public static PathGridPoint Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PathGridPoint();
            foreach (var pair in fields)
            {
                CopyInInternal_PathGridPoint(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_PathGridPoint(PathGridPoint obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PathGridPoint_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    obj._Point.Set(
                        (P3Float)pair.Value,
                        null);
                    break;
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                    obj._NumConnectionsFluffBytes.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case PathGridPoint_FieldIndex.Connections:
                    obj._Connections.SetTo((IEnumerable<Int16>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, PathGridPoint obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IPathGridPoint : IPathGridPointGetter, ILoquiClass<IPathGridPoint, IPathGridPointGetter>, ILoquiClass<PathGridPoint, IPathGridPointGetter>
    {
        new P3Float Point { get; set; }
        new INotifyingItem<P3Float> Point_Property { get; }

        new Byte[] NumConnectionsFluffBytes { get; set; }
        new INotifyingItem<Byte[]> NumConnectionsFluffBytes_Property { get; }

        new INotifyingList<Int16> Connections { get; }
    }

    public partial interface IPathGridPointGetter : ILoquiObject
    {
        #region Point
        P3Float Point { get; }
        INotifyingItemGetter<P3Float> Point_Property { get; }

        #endregion
        #region NumConnectionsFluffBytes
        Byte[] NumConnectionsFluffBytes { get; }
        INotifyingItemGetter<Byte[]> NumConnectionsFluffBytes_Property { get; }

        #endregion
        #region Connections
        INotifyingListGetter<Int16> Connections { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PathGridPoint_FieldIndex
    {
        Point = 0,
        NumConnectionsFluffBytes = 1,
        Connections = 2,
    }
    #endregion

    #region Registration
    public class PathGridPoint_Registration : ILoquiRegistration
    {
        public static readonly PathGridPoint_Registration Instance = new PathGridPoint_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 130,
            version: 0);

        public const string GUID = "6091ea9f-d0f5-4697-b89d-90083da7fde3";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(PathGridPoint_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PathGridPoint_ErrorMask);

        public static readonly Type ClassType = typeof(PathGridPoint);

        public static readonly Type GetterType = typeof(IPathGridPointGetter);

        public static readonly Type SetterType = typeof(IPathGridPoint);

        public static readonly Type CommonType = typeof(PathGridPointCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PathGridPoint";

        public const string Name = "PathGridPoint";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "POINT":
                    return (ushort)PathGridPoint_FieldIndex.Point;
                case "NUMCONNECTIONSFLUFFBYTES":
                    return (ushort)PathGridPoint_FieldIndex.NumConnectionsFluffBytes;
                case "CONNECTIONS":
                    return (ushort)PathGridPoint_FieldIndex.Connections;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Connections:
                    return true;
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    return "Point";
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                    return "NumConnectionsFluffBytes";
                case PathGridPoint_FieldIndex.Connections:
                    return "Connections";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    return typeof(P3Float);
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                    return typeof(Byte[]);
                case PathGridPoint_FieldIndex.Connections:
                    return typeof(NotifyingList<Int16>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class PathGridPointCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IPathGridPoint item,
            IPathGridPointGetter rhs,
            IPathGridPointGetter def,
            ErrorMaskBuilder errorMask,
            PathGridPoint_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Point ?? true)
            {
                errorMask.PushIndex((int)PathGridPoint_FieldIndex.Point);
                try
                {
                    item.Point_Property.Set(
                        value: rhs.Point,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.NumConnectionsFluffBytes ?? true)
            {
                errorMask.PushIndex((int)PathGridPoint_FieldIndex.NumConnectionsFluffBytes);
                try
                {
                    item.NumConnectionsFluffBytes_Property.Set(
                        value: rhs.NumConnectionsFluffBytes,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Connections != CopyOption.Skip)
            {
                errorMask.PushIndex((int)PathGridPoint_FieldIndex.Connections);
                try
                {
                    item.Connections.SetToWithDefault(
                        rhs.Connections,
                        def?.Connections,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IPathGridPoint obj,
            NotifyingFireParameters cmds = null)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IPathGridPoint obj,
            NotifyingUnsetParameters cmds = null)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    obj.Point = default(P3Float);
                    break;
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                    obj.NumConnectionsFluffBytes = default(Byte[]);
                    break;
                case PathGridPoint_FieldIndex.Connections:
                    obj.Connections.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IPathGridPoint obj)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IPathGridPointGetter obj)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    return obj.Point;
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                    return obj.NumConnectionsFluffBytes;
                case PathGridPoint_FieldIndex.Connections:
                    return obj.Connections;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IPathGridPoint item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Point = default(P3Float);
            item.NumConnectionsFluffBytes = default(Byte[]);
            item.Connections.Unset(cmds.ToUnsetParams());
        }

        public static PathGridPoint_Mask<bool> GetEqualsMask(
            this IPathGridPointGetter item,
            IPathGridPointGetter rhs)
        {
            var ret = new PathGridPoint_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IPathGridPointGetter item,
            IPathGridPointGetter rhs,
            PathGridPoint_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Point = item.Point == rhs.Point;
            ret.NumConnectionsFluffBytes = item.NumConnectionsFluffBytes.EqualsFast(rhs.NumConnectionsFluffBytes);
            ret.Connections = new MaskItem<bool, IEnumerable<bool>>();
            ret.Connections.Specific = item.Connections.SelectAgainst<Int16, bool>(rhs.Connections, ((l, r) => object.Equals(l, r)), out ret.Connections.Overall);
            ret.Connections.Overall = ret.Connections.Overall && ret.Connections.Specific.All((b) => b);
        }

        public static string ToString(
            this IPathGridPointGetter item,
            string name = null,
            PathGridPoint_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IPathGridPointGetter item,
            FileGeneration fg,
            string name = null,
            PathGridPoint_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(PathGridPoint)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(PathGridPoint)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Point ?? true)
                {
                    fg.AppendLine($"Point => {item.Point}");
                }
                if (printMask?.NumConnectionsFluffBytes ?? true)
                {
                    fg.AppendLine($"NumConnectionsFluffBytes => {item.NumConnectionsFluffBytes}");
                }
                if (printMask?.Connections?.Overall ?? true)
                {
                    fg.AppendLine("Connections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Connections)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IPathGridPointGetter item,
            PathGridPoint_Mask<bool?> checkMask)
        {
            if (checkMask.Connections.Overall.HasValue && checkMask.Connections.Overall.Value != item.Connections.HasBeenSet) return false;
            return true;
        }

        public static PathGridPoint_Mask<bool> GetHasBeenSetMask(IPathGridPointGetter item)
        {
            var ret = new PathGridPoint_Mask<bool>();
            ret.Point = true;
            ret.NumConnectionsFluffBytes = true;
            ret.Connections = new MaskItem<bool, IEnumerable<bool>>(item.Connections.HasBeenSet, null);
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IPathGridPointGetter item,
            bool doMasks,
            out PathGridPoint_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IPathGridPointGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PathGridPoint");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PathGridPoint");
            }
            P3FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Point),
                item: item.Point_Property,
                fieldIndex: (int)PathGridPoint_FieldIndex.Point,
                errorMask: errorMask);
            ByteArrayXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.NumConnectionsFluffBytes),
                item: item.NumConnectionsFluffBytes_Property,
                fieldIndex: (int)PathGridPoint_FieldIndex.NumConnectionsFluffBytes,
                errorMask: errorMask);
            ListXmlTranslation<Int16>.Instance.Write(
                node: elem,
                name: nameof(item.Connections),
                item: item.Connections,
                fieldIndex: (int)PathGridPoint_FieldIndex.Connections,
                errorMask: errorMask,
                transl: (XElement subNode, Int16 subItem, ErrorMaskBuilder listSubMask) =>
                {
                    Int16XmlTranslation.Instance.Write(
                        node: subNode,
                        name: "Item",
                        item: subItem,
                        errorMask: listSubMask);
                }
                );
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            PathGridPoint item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out PathGridPoint_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            PathGridPoint item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_Embedded(
            PathGridPoint item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Point_Property,
                fieldIndex: (int)PathGridPoint_FieldIndex.Point,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NumConnectionsFluffBytes_Property,
                fieldIndex: (int)PathGridPoint_FieldIndex.NumConnectionsFluffBytes,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Int16>.Instance.Write(
                writer: writer,
                items: item.Connections,
                fieldIndex: (int)PathGridPoint_FieldIndex.Connections,
                errorMask: errorMask,
                transl: Int16BinaryTranslation.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class PathGridPoint_Mask<T> : IMask<T>, IEquatable<PathGridPoint_Mask<T>>
    {
        #region Ctors
        public PathGridPoint_Mask()
        {
        }

        public PathGridPoint_Mask(T initialValue)
        {
            this.Point = initialValue;
            this.NumConnectionsFluffBytes = initialValue;
            this.Connections = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Point;
        public T NumConnectionsFluffBytes;
        public MaskItem<T, IEnumerable<T>> Connections;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PathGridPoint_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PathGridPoint_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Point, rhs.Point)) return false;
            if (!object.Equals(this.NumConnectionsFluffBytes, rhs.NumConnectionsFluffBytes)) return false;
            if (!object.Equals(this.Connections, rhs.Connections)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Point?.GetHashCode());
            ret = ret.CombineHashCode(this.NumConnectionsFluffBytes?.GetHashCode());
            ret = ret.CombineHashCode(this.Connections?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Point)) return false;
            if (!eval(this.NumConnectionsFluffBytes)) return false;
            if (this.Connections != null)
            {
                if (!eval(this.Connections.Overall)) return false;
                if (this.Connections.Specific != null)
                {
                    foreach (var item in this.Connections.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public PathGridPoint_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PathGridPoint_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PathGridPoint_Mask<R> obj, Func<T, R> eval)
        {
            obj.Point = eval(this.Point);
            obj.NumConnectionsFluffBytes = eval(this.NumConnectionsFluffBytes);
            if (Connections != null)
            {
                obj.Connections = new MaskItem<R, IEnumerable<R>>();
                obj.Connections.Overall = eval(this.Connections.Overall);
                if (Connections.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Connections.Specific = l;
                    foreach (var item in Connections.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Connections.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PathGridPoint_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PathGridPoint_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PathGridPoint_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Point ?? true)
                {
                    fg.AppendLine($"Point => {Point}");
                }
                if (printMask?.NumConnectionsFluffBytes ?? true)
                {
                    fg.AppendLine($"NumConnectionsFluffBytes => {NumConnectionsFluffBytes}");
                }
                if (printMask?.Connections?.Overall ?? true)
                {
                    fg.AppendLine("Connections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Connections.Overall != null)
                        {
                            fg.AppendLine(Connections.Overall.ToString());
                        }
                        if (Connections.Specific != null)
                        {
                            foreach (var subItem in Connections.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PathGridPoint_ErrorMask : IErrorMask, IErrorMask<PathGridPoint_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Point;
        public Exception NumConnectionsFluffBytes;
        public MaskItem<Exception, IEnumerable<Exception>> Connections;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    return Point;
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                    return NumConnectionsFluffBytes;
                case PathGridPoint_FieldIndex.Connections:
                    return Connections;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    this.Point = ex;
                    break;
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                    this.NumConnectionsFluffBytes = ex;
                    break;
                case PathGridPoint_FieldIndex.Connections:
                    this.Connections = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    this.Point = (Exception)obj;
                    break;
                case PathGridPoint_FieldIndex.NumConnectionsFluffBytes:
                    this.NumConnectionsFluffBytes = (Exception)obj;
                    break;
                case PathGridPoint_FieldIndex.Connections:
                    this.Connections = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Point != null) return true;
            if (NumConnectionsFluffBytes != null) return true;
            if (Connections != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("PathGridPoint_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Point => {Point}");
            fg.AppendLine($"NumConnectionsFluffBytes => {NumConnectionsFluffBytes}");
            fg.AppendLine("Connections =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Connections.Overall != null)
                {
                    fg.AppendLine(Connections.Overall.ToString());
                }
                if (Connections.Specific != null)
                {
                    foreach (var subItem in Connections.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public PathGridPoint_ErrorMask Combine(PathGridPoint_ErrorMask rhs)
        {
            var ret = new PathGridPoint_ErrorMask();
            ret.Point = this.Point.Combine(rhs.Point);
            ret.NumConnectionsFluffBytes = this.NumConnectionsFluffBytes.Combine(rhs.NumConnectionsFluffBytes);
            ret.Connections = new MaskItem<Exception, IEnumerable<Exception>>(this.Connections.Overall.Combine(rhs.Connections.Overall), new List<Exception>(this.Connections.Specific.And(rhs.Connections.Specific)));
            return ret;
        }
        public static PathGridPoint_ErrorMask Combine(PathGridPoint_ErrorMask lhs, PathGridPoint_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PathGridPoint_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PathGridPoint_ErrorMask();
        }
        #endregion

    }
    public class PathGridPoint_CopyMask
    {
        #region Members
        public bool Point;
        public bool NumConnectionsFluffBytes;
        public CopyOption Connections;
        #endregion

    }
    #endregion




    #endregion

}
