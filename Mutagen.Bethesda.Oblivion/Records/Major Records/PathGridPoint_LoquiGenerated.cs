/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PathGridPoint :
        LoquiNotifyingObject,
        IPathGridPointInternal,
        ILoquiObjectSetter<PathGridPoint>,
        IEquatable<PathGridPoint>,
        IEqualsMask
    {
        #region Ctor
        public PathGridPoint()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Point
        private P3Float _Point;
        public P3Float Point
        {
            get => this._Point;
            set => this.RaiseAndSetIfChanged(ref this._Point, value, nameof(Point));
        }
        #endregion
        #region NumConnections
        private Byte _NumConnections;
        public Byte NumConnections
        {
            get => this._NumConnections;
            set => this.RaiseAndSetIfChanged(ref this._NumConnections, value, nameof(NumConnections));
        }
        #endregion
        #region FluffBytes
        private Byte[] _FluffBytes = new byte[3];
        public Byte[] FluffBytes
        {
            get => _FluffBytes;
            set
            {
                this._FluffBytes = value;
                if (value == null)
                {
                    this._FluffBytes = new byte[3];
                }
            }
        }
        ReadOnlySpan<Byte> IPathGridPointGetter.FluffBytes => this.FluffBytes;
        #endregion
        #region Connections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceList<Int16> _Connections = new SourceList<Int16>();
        public ISourceList<Int16> Connections => _Connections;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<Int16> IPathGridPoint.Connections => _Connections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Int16> IPathGridPointGetter.Connections => _Connections;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPathGridPointInternalGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            PathGridPointMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IPathGridPointInternalGetter rhs)) return false;
            return ((PathGridPointCommon)((IPathGridPointInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(PathGridPoint obj)
        {
            return ((PathGridPointCommon)((IPathGridPointInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((PathGridPointCommon)((IPathGridPointInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => PathGridPointXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((PathGridPointXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static PathGridPoint CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            PathGridPoint_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PathGridPoint CreateFromXml(
            XElement node,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true,
            PathGridPoint_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PathGridPoint CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new PathGridPoint() : null;
                    break;
                default:
                    break;
            }
            var ret = new PathGridPoint();
            try
            {
                foreach (var elem in node.Elements())
                {
                    PathGridPointXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PathGridPoint CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            PathGridPoint_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PathGridPoint CreateFromXml(
            string path,
            out PathGridPoint_ErrorMask errorMask,
            PathGridPoint_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PathGridPoint CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            PathGridPoint_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PathGridPoint CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            PathGridPoint_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PathGridPoint CreateFromXml(
            Stream stream,
            out PathGridPoint_ErrorMask errorMask,
            PathGridPoint_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PathGridPoint CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            PathGridPoint_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((PathGridPoint_FieldIndex)index)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnections:
                case PathGridPoint_FieldIndex.FluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => PathGridPointBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((PathGridPointBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static PathGridPoint CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PathGridPoint CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PathGridPoint CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new PathGridPoint();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            PathGridPoint item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out P3Float PointParse))
            {
                item.Point = PointParse;
            }
            else
            {
                item.Point = default(P3Float);
            }
            item.NumConnections = frame.ReadUInt8();
            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.SpawnWithLength(3),
                item: out Byte[] FluffBytesParse))
            {
                item.FluffBytes = FluffBytesParse;
            }
            else
            {
                item.FluffBytes = default(Byte[]);
            }
        }

        #endregion

        public PathGridPoint Copy(
            PathGridPoint_CopyMask copyMask = null,
            PathGridPoint def = null)
        {
            return PathGridPoint.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PathGridPoint Copy(
            PathGridPoint item,
            PathGridPoint_CopyMask copyMask = null,
            PathGridPoint def = null)
        {
            PathGridPoint ret;
            if (item.GetType().Equals(typeof(PathGridPoint)))
            {
                ret = new PathGridPoint();
            }
            else
            {
                ret = (PathGridPoint)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PathGridPoint Copy_ToLoqui(
            PathGridPoint item,
            PathGridPoint_CopyMask copyMask = null,
            PathGridPoint def = null)
        {
            PathGridPoint ret;
            if (item.GetType().Equals(typeof(PathGridPoint)))
            {
                ret = new PathGridPoint() as PathGridPoint;
            }
            else
            {
                ret = (PathGridPoint)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(PathGridPoint rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            PathGridPoint rhs,
            PathGridPoint_CopyMask copyMask,
            PathGridPoint def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            PathGridPoint rhs,
            out PathGridPoint_ErrorMask errorMask,
            PathGridPoint_CopyMask copyMask = null,
            PathGridPoint def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PathGridPointSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            PathGridPoint rhs,
            ErrorMaskBuilder errorMask,
            PathGridPoint_CopyMask copyMask = null,
            PathGridPoint def = null)
        {
            PathGridPointSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    this.Point = (P3Float)obj;
                    break;
                case PathGridPoint_FieldIndex.NumConnections:
                    this.NumConnections = (Byte)obj;
                    break;
                case PathGridPoint_FieldIndex.FluffBytes:
                    this.FluffBytes = (Byte[])obj;
                    break;
                case PathGridPoint_FieldIndex.Connections:
                    this._Connections.SetTo((IList<Int16>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            PathGridPointSetterCommon.Instance.Clear(this);
        }

        public static PathGridPoint Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PathGridPoint();
            foreach (var pair in fields)
            {
                CopyInInternal_PathGridPoint(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_PathGridPoint(PathGridPoint obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PathGridPoint_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    obj.Point = (P3Float)pair.Value;
                    break;
                case PathGridPoint_FieldIndex.NumConnections:
                    obj.NumConnections = (Byte)pair.Value;
                    break;
                case PathGridPoint_FieldIndex.FluffBytes:
                    obj.FluffBytes = (Byte[])pair.Value;
                    break;
                case PathGridPoint_FieldIndex.Connections:
                    obj._Connections.SetTo((IList<Int16>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IPathGridPoint :
        IPathGridPointInternalGetter,
        ILoquiObjectSetter<IPathGridPointInternal>
    {
        new P3Float Point { get; set; }

        new Byte NumConnections { get; set; }

        new Byte[] FluffBytes { get; set; }

        new IList<Int16> Connections { get; }
        void CopyFieldsFrom(
            PathGridPoint rhs,
            ErrorMaskBuilder errorMask = null,
            PathGridPoint_CopyMask copyMask = null,
            PathGridPoint def = null);
    }

    public partial interface IPathGridPointInternal :
        IPathGridPoint,
        IPathGridPointInternalGetter
    {
    }

    public partial interface IPathGridPointGetter :
        ILoquiObject,
        ILoquiObject<IPathGridPointInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Point
        P3Float Point { get; }

        #endregion
        #region NumConnections
        Byte NumConnections { get; }

        #endregion
        #region FluffBytes
        ReadOnlySpan<Byte> FluffBytes { get; }

        #endregion
        #region Connections
        IReadOnlyList<Int16> Connections { get; }
        #endregion

    }

    public partial interface IPathGridPointInternalGetter : IPathGridPointGetter
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance();

    }

    #endregion

    #region Common MixIn
    public static class PathGridPointMixIn
    {
        public static void Clear(this IPathGridPointInternal item)
        {
            ((PathGridPointSetterCommon)((IPathGridPointInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static PathGridPoint_Mask<bool> GetEqualsMask(
            this IPathGridPointInternalGetter item,
            IPathGridPointInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PathGridPointCommon)((IPathGridPointInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPathGridPointInternalGetter item,
            string name = null,
            PathGridPoint_Mask<bool> printMask = null)
        {
            return ((PathGridPointCommon)((IPathGridPointInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPathGridPointInternalGetter item,
            FileGeneration fg,
            string name = null,
            PathGridPoint_Mask<bool> printMask = null)
        {
            ((PathGridPointCommon)((IPathGridPointInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPathGridPointInternalGetter item,
            PathGridPoint_Mask<bool?> checkMask)
        {
            return ((PathGridPointCommon)((IPathGridPointInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PathGridPoint_Mask<bool> GetHasBeenSetMask(this IPathGridPointInternalGetter item)
        {
            var ret = new PathGridPoint_Mask<bool>();
            ((PathGridPointCommon)((IPathGridPointInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPathGridPointInternalGetter item,
            IPathGridPointInternalGetter rhs)
        {
            return ((PathGridPointCommon)((IPathGridPointInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PathGridPoint_FieldIndex
    {
        Point = 0,
        NumConnections = 1,
        FluffBytes = 2,
        Connections = 3,
    }
    #endregion

    #region Registration
    public class PathGridPoint_Registration : ILoquiRegistration
    {
        public static readonly PathGridPoint_Registration Instance = new PathGridPoint_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 130,
            version: 0);

        public const string GUID = "6091ea9f-d0f5-4697-b89d-90083da7fde3";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(PathGridPoint_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PathGridPoint_ErrorMask);

        public static readonly Type ClassType = typeof(PathGridPoint);

        public static readonly Type GetterType = typeof(IPathGridPointGetter);

        public static readonly Type InternalGetterType = typeof(IPathGridPointInternalGetter);

        public static readonly Type SetterType = typeof(IPathGridPoint);

        public static readonly Type InternalSetterType = typeof(IPathGridPointInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PathGridPoint";

        public const string Name = "PathGridPoint";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "POINT":
                    return (ushort)PathGridPoint_FieldIndex.Point;
                case "NUMCONNECTIONS":
                    return (ushort)PathGridPoint_FieldIndex.NumConnections;
                case "FLUFFBYTES":
                    return (ushort)PathGridPoint_FieldIndex.FluffBytes;
                case "CONNECTIONS":
                    return (ushort)PathGridPoint_FieldIndex.Connections;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Connections:
                    return true;
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnections:
                case PathGridPoint_FieldIndex.FluffBytes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnections:
                case PathGridPoint_FieldIndex.FluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnections:
                case PathGridPoint_FieldIndex.FluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    return "Point";
                case PathGridPoint_FieldIndex.NumConnections:
                    return "NumConnections";
                case PathGridPoint_FieldIndex.FluffBytes:
                    return "FluffBytes";
                case PathGridPoint_FieldIndex.Connections:
                    return "Connections";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnections:
                case PathGridPoint_FieldIndex.FluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                case PathGridPoint_FieldIndex.NumConnections:
                case PathGridPoint_FieldIndex.FluffBytes:
                case PathGridPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    return typeof(P3Float);
                case PathGridPoint_FieldIndex.NumConnections:
                    return typeof(Byte);
                case PathGridPoint_FieldIndex.FluffBytes:
                    return typeof(Byte[]);
                case PathGridPoint_FieldIndex.Connections:
                    return typeof(IList<Int16>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PathGridPointXmlWriteTranslation);
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(PathGridPointBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PathGridPointSetterCommon
    {
        public static readonly PathGridPointSetterCommon Instance = new PathGridPointSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IPathGridPointInternal item)
        {
            ClearPartial();
            item.Point = default(P3Float);
            item.NumConnections = default(Byte);
            item.FluffBytes = default(Byte[]);
            item.Connections.Clear();
        }
        
        
    }
    public partial class PathGridPointCommon
    {
        public static readonly PathGridPointCommon Instance = new PathGridPointCommon();

        public PathGridPoint_Mask<bool> GetEqualsMask(
            IPathGridPointInternalGetter item,
            IPathGridPointInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PathGridPoint_Mask<bool>();
            ((PathGridPointCommon)((IPathGridPointInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPathGridPointInternalGetter item,
            IPathGridPointInternalGetter rhs,
            PathGridPoint_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Point = item.Point.Equals(rhs.Point);
            ret.NumConnections = item.NumConnections == rhs.NumConnections;
            ret.FluffBytes = MemoryExtensions.SequenceEqual(item.FluffBytes, rhs.FluffBytes);
            ret.Connections = item.Connections.CollectionEqualsHelper(
                rhs.Connections,
                (l, r) => l == r,
                include);
        }
        
        public string ToString(
            IPathGridPointInternalGetter item,
            string name = null,
            PathGridPoint_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPathGridPointInternalGetter item,
            FileGeneration fg,
            string name = null,
            PathGridPoint_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PathGridPoint =>");
            }
            else
            {
                fg.AppendLine($"{name} (PathGridPoint) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPathGridPointInternalGetter item,
            FileGeneration fg,
            PathGridPoint_Mask<bool> printMask = null)
        {
            if (printMask?.Point ?? true)
            {
                fg.AppendLine($"Point => {item.Point}");
            }
            if (printMask?.NumConnections ?? true)
            {
                fg.AppendLine($"NumConnections => {item.NumConnections}");
            }
            if (printMask?.FluffBytes ?? true)
            {
                fg.AppendLine($"FluffBytes => {SpanExt.ToHexString(item.FluffBytes)}");
            }
            if (printMask?.Connections?.Overall ?? true)
            {
                fg.AppendLine("Connections =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Connections)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IPathGridPointInternalGetter item,
            PathGridPoint_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IPathGridPointInternalGetter item,
            PathGridPoint_Mask<bool> mask)
        {
            mask.Point = true;
            mask.NumConnections = true;
            mask.FluffBytes = true;
            mask.Connections = new MaskItem<bool, IEnumerable<(int, bool)>>(true, null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPathGridPointInternalGetter lhs,
            IPathGridPointInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Point.Equals(rhs.Point)) return false;
            if (lhs.NumConnections != rhs.NumConnections) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.FluffBytes, rhs.FluffBytes)) return false;
            if (!lhs.Connections.SequenceEqual(rhs.Connections)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPathGridPointInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Point).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.NumConnections).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FluffBytes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Connections).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        
    }
    public partial class PathGridPointSetterCopyCommon
    {
        public static readonly PathGridPointSetterCopyCommon Instance = new PathGridPointSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            PathGridPoint item,
            PathGridPoint rhs,
            PathGridPoint def,
            ErrorMaskBuilder errorMask,
            PathGridPoint_CopyMask copyMask)
        {
            if (copyMask?.Point ?? true)
            {
                errorMask?.PushIndex((int)PathGridPoint_FieldIndex.Point);
                try
                {
                    item.Point = rhs.Point;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.NumConnections ?? true)
            {
                errorMask?.PushIndex((int)PathGridPoint_FieldIndex.NumConnections);
                try
                {
                    item.NumConnections = rhs.NumConnections;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FluffBytes ?? true)
            {
                errorMask?.PushIndex((int)PathGridPoint_FieldIndex.FluffBytes);
                try
                {
                    item.FluffBytes = rhs.FluffBytes;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Connections != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PathGridPoint_FieldIndex.Connections);
                try
                {
                    item.Connections.SetToWithDefault(
                        rhs.Connections,
                        def?.Connections);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        
    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class PathGridPointXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static PathGridPointXmlWriteTranslation Instance = new PathGridPointXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPathGridPointInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)PathGridPoint_FieldIndex.Point) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Point),
                    item: item.Point,
                    fieldIndex: (int)PathGridPoint_FieldIndex.Point,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PathGridPoint_FieldIndex.NumConnections) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NumConnections),
                    item: item.NumConnections,
                    fieldIndex: (int)PathGridPoint_FieldIndex.NumConnections,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PathGridPoint_FieldIndex.FluffBytes) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FluffBytes),
                    item: item.FluffBytes,
                    fieldIndex: (int)PathGridPoint_FieldIndex.FluffBytes,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PathGridPoint_FieldIndex.Connections) ?? true))
            {
                ListXmlTranslation<Int16>.Instance.Write(
                    node: node,
                    name: nameof(item.Connections),
                    item: item.Connections,
                    fieldIndex: (int)PathGridPoint_FieldIndex.Connections,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PathGridPoint_FieldIndex.Connections),
                    transl: (XElement subNode, Int16 subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        Int16XmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IPathGridPointInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PathGridPoint");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PathGridPoint");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPathGridPointInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IPathGridPointInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IPathGridPointInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class PathGridPointXmlCreateTranslation
    {
        public readonly static PathGridPointXmlCreateTranslation Instance = new PathGridPointXmlCreateTranslation();

        public static void FillPublicXml(
            IPathGridPointInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PathGridPointXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPathGridPointInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Point":
                    try
                    {
                        errorMask?.PushIndex((int)PathGridPoint_FieldIndex.Point);
                        if (P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P3Float PointParse,
                            errorMask: errorMask))
                        {
                            item.Point = PointParse;
                        }
                        else
                        {
                            item.Point = default(P3Float);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NumConnections":
                    try
                    {
                        errorMask?.PushIndex((int)PathGridPoint_FieldIndex.NumConnections);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte NumConnectionsParse,
                            errorMask: errorMask))
                        {
                            item.NumConnections = NumConnectionsParse;
                        }
                        else
                        {
                            item.NumConnections = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FluffBytes":
                    try
                    {
                        errorMask?.PushIndex((int)PathGridPoint_FieldIndex.FluffBytes);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FluffBytesParse,
                            errorMask: errorMask))
                        {
                            item.FluffBytes = FluffBytesParse;
                        }
                        else
                        {
                            item.FluffBytes = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Connections":
                    try
                    {
                        errorMask?.PushIndex((int)PathGridPoint_FieldIndex.Connections);
                        if (ListXmlTranslation<Int16>.Instance.Parse(
                            node: node,
                            enumer: out var ConnectionsItem,
                            transl: Int16XmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Connections.SetTo(ConnectionsItem);
                        }
                        else
                        {
                            item.Connections.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class PathGridPointXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPathGridPointInternalGetter item,
            XElement node,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true,
            PathGridPoint_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PathGridPointXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPathGridPointInternalGetter item,
            string path,
            out PathGridPoint_ErrorMask errorMask,
            PathGridPoint_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPathGridPointInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPathGridPointInternalGetter item,
            Stream stream,
            out PathGridPoint_ErrorMask errorMask,
            PathGridPoint_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPathGridPointInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPathGridPointInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((PathGridPointXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IPathGridPointInternalGetter item,
            XElement node,
            string name = null,
            PathGridPoint_TranslationMask translationMask = null)
        {
            ((PathGridPointXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IPathGridPointInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((PathGridPointXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPathGridPointInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((PathGridPointXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class PathGridPoint_Mask<T> : IMask<T>, IEquatable<PathGridPoint_Mask<T>>
    {
        #region Ctors
        public PathGridPoint_Mask()
        {
        }

        public PathGridPoint_Mask(T initialValue)
        {
            this.Point = initialValue;
            this.NumConnections = initialValue;
            this.FluffBytes = initialValue;
            this.Connections = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Point;
        public T NumConnections;
        public T FluffBytes;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Connections;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PathGridPoint_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PathGridPoint_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Point, rhs.Point)) return false;
            if (!object.Equals(this.NumConnections, rhs.NumConnections)) return false;
            if (!object.Equals(this.FluffBytes, rhs.FluffBytes)) return false;
            if (!object.Equals(this.Connections, rhs.Connections)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Point?.GetHashCode());
            ret = ret.CombineHashCode(this.NumConnections?.GetHashCode());
            ret = ret.CombineHashCode(this.FluffBytes?.GetHashCode());
            ret = ret.CombineHashCode(this.Connections?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Point)) return false;
            if (!eval(this.NumConnections)) return false;
            if (!eval(this.FluffBytes)) return false;
            if (this.Connections != null)
            {
                if (!eval(this.Connections.Overall)) return false;
                if (this.Connections.Specific != null)
                {
                    foreach (var item in this.Connections.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public PathGridPoint_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PathGridPoint_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PathGridPoint_Mask<R> obj, Func<T, R> eval)
        {
            obj.Point = eval(this.Point);
            obj.NumConnections = eval(this.NumConnections);
            obj.FluffBytes = eval(this.FluffBytes);
            if (Connections != null)
            {
                obj.Connections = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Connections.Overall = eval(this.Connections.Overall);
                if (Connections.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Connections.Specific = l;
                    foreach (var item in Connections.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Connections.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PathGridPoint_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PathGridPoint_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PathGridPoint_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Point ?? true)
                {
                    fg.AppendLine($"Point => {Point}");
                }
                if (printMask?.NumConnections ?? true)
                {
                    fg.AppendLine($"NumConnections => {NumConnections}");
                }
                if (printMask?.FluffBytes ?? true)
                {
                    fg.AppendLine($"FluffBytes => {FluffBytes}");
                }
                if (printMask?.Connections?.Overall ?? true)
                {
                    fg.AppendLine("Connections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Connections.Overall != null)
                        {
                            fg.AppendLine(Connections.Overall.ToString());
                        }
                        if (Connections.Specific != null)
                        {
                            foreach (var subItem in Connections.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PathGridPoint_ErrorMask : IErrorMask, IErrorMask<PathGridPoint_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Point;
        public Exception NumConnections;
        public Exception FluffBytes;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Connections;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    return Point;
                case PathGridPoint_FieldIndex.NumConnections:
                    return NumConnections;
                case PathGridPoint_FieldIndex.FluffBytes:
                    return FluffBytes;
                case PathGridPoint_FieldIndex.Connections:
                    return Connections;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    this.Point = ex;
                    break;
                case PathGridPoint_FieldIndex.NumConnections:
                    this.NumConnections = ex;
                    break;
                case PathGridPoint_FieldIndex.FluffBytes:
                    this.FluffBytes = ex;
                    break;
                case PathGridPoint_FieldIndex.Connections:
                    this.Connections = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            PathGridPoint_FieldIndex enu = (PathGridPoint_FieldIndex)index;
            switch (enu)
            {
                case PathGridPoint_FieldIndex.Point:
                    this.Point = (Exception)obj;
                    break;
                case PathGridPoint_FieldIndex.NumConnections:
                    this.NumConnections = (Exception)obj;
                    break;
                case PathGridPoint_FieldIndex.FluffBytes:
                    this.FluffBytes = (Exception)obj;
                    break;
                case PathGridPoint_FieldIndex.Connections:
                    this.Connections = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Point != null) return true;
            if (NumConnections != null) return true;
            if (FluffBytes != null) return true;
            if (Connections != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("PathGridPoint_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Point => {Point}");
            fg.AppendLine($"NumConnections => {NumConnections}");
            fg.AppendLine($"FluffBytes => {FluffBytes}");
            fg.AppendLine("Connections =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Connections.Overall != null)
                {
                    fg.AppendLine(Connections.Overall.ToString());
                }
                if (Connections.Specific != null)
                {
                    foreach (var subItem in Connections.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public PathGridPoint_ErrorMask Combine(PathGridPoint_ErrorMask rhs)
        {
            var ret = new PathGridPoint_ErrorMask();
            ret.Point = this.Point.Combine(rhs.Point);
            ret.NumConnections = this.NumConnections.Combine(rhs.NumConnections);
            ret.FluffBytes = this.FluffBytes.Combine(rhs.FluffBytes);
            ret.Connections = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Connections.Overall.Combine(rhs.Connections.Overall), new List<(int Index, Exception Value)>(this.Connections.Specific.And(rhs.Connections.Specific)));
            return ret;
        }
        public static PathGridPoint_ErrorMask Combine(PathGridPoint_ErrorMask lhs, PathGridPoint_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PathGridPoint_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PathGridPoint_ErrorMask();
        }
        #endregion

    }
    public class PathGridPoint_CopyMask
    {
        public PathGridPoint_CopyMask()
        {
        }

        public PathGridPoint_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Point = defaultOn;
            this.NumConnections = defaultOn;
            this.FluffBytes = defaultOn;
            this.Connections = deepCopyOption;
        }

        #region Members
        public bool Point;
        public bool NumConnections;
        public bool FluffBytes;
        public CopyOption Connections;
        #endregion

    }

    public class PathGridPoint_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Point;
        public bool NumConnections;
        public bool FluffBytes;
        public bool Connections;
        #endregion

        #region Ctors
        public PathGridPoint_TranslationMask()
        {
        }

        public PathGridPoint_TranslationMask(bool defaultOn)
        {
            this.Point = defaultOn;
            this.NumConnections = defaultOn;
            this.FluffBytes = defaultOn;
            this.Connections = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Point, null));
            ret.Add((NumConnections, null));
            ret.Add((FluffBytes, null));
            ret.Add((Connections, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class PathGridPointBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PathGridPointBinaryWriteTranslation Instance = new PathGridPointBinaryWriteTranslation();

        public static void Write_Embedded(
            IPathGridPointInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Point);
            writer.Write(item.NumConnections);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FluffBytes);
        }

        public void Write(
            MutagenWriter writer,
            IPathGridPointInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPathGridPointInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class PathGridPointBinaryCreateTranslation
    {
        public readonly static PathGridPointBinaryCreateTranslation Instance = new PathGridPointBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class PathGridPointBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPathGridPointInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out PathGridPoint_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PathGridPointBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PathGridPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IPathGridPointInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((PathGridPointBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IPathGridPointInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((PathGridPointBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    public partial class PathGridPointBinaryWrapper :
        BinaryWrapper,
        IPathGridPointInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PathGridPoint_Registration.Instance;
        public static PathGridPoint_Registration Registration => PathGridPoint_Registration.Instance;
        protected object CommonInstance()
        {
            return PathGridPointCommon.Instance;
        }
        object IPathGridPointInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IPathGridPointInternalGetter.CommonSetterInstance()
        {
            return null;
        }
        object IPathGridPointInternalGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPathGridPointInternalGetter)rhs, include);

        protected object XmlWriteTranslator => PathGridPointXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((PathGridPointXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => PathGridPointBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((PathGridPointBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public P3Float Point => P3FloatBinaryTranslation.Read(_data.Span.Slice(0, 12));
        public Byte NumConnections => _data.Span[12];
        public ReadOnlySpan<Byte> FluffBytes => _data.Span.Slice(13, 3).ToArray();
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected PathGridPointBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static PathGridPointBinaryWrapper PathGridPointFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new PathGridPointBinaryWrapper(
                bytes: stream.RemainingMemory.Slice(0, 16),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

    #endregion

    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PathGridPoint
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PathGridPoint_Registration.Instance;
        public static PathGridPoint_Registration Registration => PathGridPoint_Registration.Instance;
        protected object CommonInstance()
        {
            return PathGridPointCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return PathGridPointSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return PathGridPointSetterCopyCommon.Instance;
        }
        object IPathGridPointInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IPathGridPointInternalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IPathGridPointInternalGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}
