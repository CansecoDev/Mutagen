/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PathGrid : 
        MajorRecord,
        IPathGrid,
        ILoquiObject<PathGrid>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<PathGrid>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PathGrid_Registration.Instance;
        public new static PathGrid_Registration Registration => PathGrid_Registration.Instance;

        #region Ctor
        protected PathGrid()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region PointToPointConnections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<PathGridPoint> _PointToPointConnections = new SourceSetList<PathGridPoint>();
        public ISourceSetList<PathGridPoint> PointToPointConnections => _PointToPointConnections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<PathGridPoint> PointToPointConnectionsEnumerable
        {
            get => _PointToPointConnections.Items;
            set => _PointToPointConnections.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<PathGridPoint> IPathGrid.PointToPointConnections => _PointToPointConnections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<PathGridPoint> IPathGridGetter.PointToPointConnections => _PointToPointConnections;
        #endregion

        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool Unknown_IsSet
        {
            get => _hasBeenSetTracker[(int)PathGrid_FieldIndex.Unknown];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PathGrid_FieldIndex.Unknown, nameof(Unknown_IsSet));
        }
        bool IPathGridGetter.Unknown_IsSet => Unknown_IsSet;
        protected Byte[] _Unknown;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Unknown
        {
            get => this._Unknown;
            set => Unknown_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte[] IPathGridGetter.Unknown => this.Unknown;
        public void Unknown_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Unknown, value, _hasBeenSetTracker, markSet, (int)PathGrid_FieldIndex.Unknown, nameof(Unknown), nameof(Unknown_IsSet));
        }
        public void Unknown_Unset()
        {
            this.Unknown_Set(default(Byte[]), false);
        }
        #endregion
        #region InterCellConnections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<InterCellPoint> _InterCellConnections = new SourceSetList<InterCellPoint>();
        public ISourceSetList<InterCellPoint> InterCellConnections => _InterCellConnections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<InterCellPoint> InterCellConnectionsEnumerable
        {
            get => _InterCellConnections.Items;
            set => _InterCellConnections.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<InterCellPoint> IPathGrid.InterCellConnections => _InterCellConnections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<InterCellPoint> IPathGridGetter.InterCellConnections => _InterCellConnections;
        #endregion

        #endregion
        #region PointToReferenceMappings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<PointToReferenceMapping> _PointToReferenceMappings = new SourceSetList<PointToReferenceMapping>();
        public ISourceSetList<PointToReferenceMapping> PointToReferenceMappings => _PointToReferenceMappings;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<PointToReferenceMapping> PointToReferenceMappingsEnumerable
        {
            get => _PointToReferenceMappings.Items;
            set => _PointToReferenceMappings.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<PointToReferenceMapping> IPathGrid.PointToReferenceMappings => _PointToReferenceMappings;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<PointToReferenceMapping> IPathGridGetter.PointToReferenceMappings => _PointToReferenceMappings;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => PathGridCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => PathGridCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => PathGridCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            PathGridCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<PathGrid>.GetEqualsMask(PathGrid rhs) => PathGridCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IPathGridGetter>.GetEqualsMask(IPathGridGetter rhs) => PathGridCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            PathGrid_Mask<bool> printMask = null)
        {
            return PathGridCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            PathGridCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new PathGrid_Mask<bool> GetHasBeenSetMask()
        {
            return PathGridCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is PathGrid rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PathGrid rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (PointToPointConnections.HasBeenSet != rhs.PointToPointConnections.HasBeenSet) return false;
            if (PointToPointConnections.HasBeenSet)
            {
                if (!this.PointToPointConnections.SequenceEqual(rhs.PointToPointConnections)) return false;
            }
            if (Unknown_IsSet != rhs.Unknown_IsSet) return false;
            if (Unknown_IsSet)
            {
                if (!this.Unknown.EqualsFast(rhs.Unknown)) return false;
            }
            if (InterCellConnections.HasBeenSet != rhs.InterCellConnections.HasBeenSet) return false;
            if (InterCellConnections.HasBeenSet)
            {
                if (!this.InterCellConnections.SequenceEqual(rhs.InterCellConnections)) return false;
            }
            if (PointToReferenceMappings.HasBeenSet != rhs.PointToReferenceMappings.HasBeenSet) return false;
            if (PointToReferenceMappings.HasBeenSet)
            {
                if (!this.PointToReferenceMappings.SequenceEqual(rhs.PointToReferenceMappings)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (PointToPointConnections.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(PointToPointConnections).CombineHashCode(ret);
            }
            if (Unknown_IsSet)
            {
                ret = HashHelper.GetHashCode(Unknown).CombineHashCode(ret);
            }
            if (InterCellConnections.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(InterCellConnections).CombineHashCode(ret);
            }
            if (PointToReferenceMappings.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(PointToReferenceMappings).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static PathGrid Create_Xml(
            XElement node,
            PathGrid_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PathGrid Create_Xml(
            XElement node,
            out PathGrid_ErrorMask errorMask,
            bool doMasks = true,
            PathGrid_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PathGrid Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new PathGrid();
            try
            {
                foreach (var elem in node.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PathGrid Create_Xml(
            string path,
            PathGrid_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static PathGrid Create_Xml(
            string path,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PathGrid Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            PathGrid_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PathGrid Create_Xml(
            Stream stream,
            PathGrid_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static PathGrid Create_Xml(
            Stream stream,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PathGrid Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            PathGrid_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<PathGrid>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out PathGrid_ErrorMask errorMask,
            bool doMasks = true,
            PathGrid_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            PathGridCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            PathGrid item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "PointToPointConnections":
                    try
                    {
                        errorMask?.PushIndex((int)PathGrid_FieldIndex.PointToPointConnections);
                        if (ListXmlTranslation<PathGridPoint>.Instance.Parse(
                            node: node,
                            enumer: out var PointToPointConnectionsItem,
                            transl: LoquiXmlTranslation<PathGridPoint>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.PointToPointConnections.SetTo(PointToPointConnectionsItem);
                        }
                        else
                        {
                            item.PointToPointConnections.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    try
                    {
                        errorMask?.PushIndex((int)PathGrid_FieldIndex.Unknown);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] UnknownParse,
                            errorMask: errorMask))
                        {
                            item.Unknown = UnknownParse;
                        }
                        else
                        {
                            item.Unknown = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "InterCellConnections":
                    try
                    {
                        errorMask?.PushIndex((int)PathGrid_FieldIndex.InterCellConnections);
                        if (ListXmlTranslation<InterCellPoint>.Instance.Parse(
                            node: node,
                            enumer: out var InterCellConnectionsItem,
                            transl: LoquiXmlTranslation<InterCellPoint>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.InterCellConnections.SetTo(InterCellConnectionsItem);
                        }
                        else
                        {
                            item.InterCellConnections.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PointToReferenceMappings":
                    try
                    {
                        errorMask?.PushIndex((int)PathGrid_FieldIndex.PointToReferenceMappings);
                        if (ListXmlTranslation<PointToReferenceMapping>.Instance.Parse(
                            node: node,
                            enumer: out var PointToReferenceMappingsItem,
                            transl: LoquiXmlTranslation<PointToReferenceMapping>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.PointToReferenceMappings.SetTo(PointToReferenceMappingsItem);
                        }
                        else
                        {
                            item.PointToReferenceMappings.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_Xml_Internal(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((PathGrid_FieldIndex)index)
            {
                case PathGrid_FieldIndex.Unknown:
                    return _hasBeenSetTracker[index];
                case PathGrid_FieldIndex.PointToPointConnections:
                    return PointToPointConnections.HasBeenSet;
                case PathGrid_FieldIndex.InterCellConnections:
                    return InterCellConnections.HasBeenSet;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return PointToReferenceMappings.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PathGrid_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in PointToReferenceMappings.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            
        {
            base.Link(
                modList,
                sourceMod,
                cmds);
            foreach (var item in PointToReferenceMappings.Items)
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
        }

        public PathGrid(FormKey formKey)
        {
            this.FormKey = formKey;
        }

        partial void PostDuplicate(PathGrid obj, PathGrid rhs, Func<FormKey> getNextFormKey, IList<(MajorRecord Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override MajorRecord Duplicate(Func<FormKey> getNextFormKey, IList<(MajorRecord Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new PathGrid(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static PathGrid Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PathGrid Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out PathGrid_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PathGrid Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<PathGrid>(
                record: new PathGrid(),
                frame: frame,
                errorMask: errorMask,
                recType: PathGrid_Registration.PGRD_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static PathGrid Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static PathGrid Create_Binary(
            string path,
            MasterReferences masterReferences,
            out PathGrid_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static PathGrid Create_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static PathGrid Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static PathGrid Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out PathGrid_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static PathGrid Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out PathGrid_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out PathGrid_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out PathGrid_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            PathGridCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_PointToPointConnections_Custom(
            MutagenFrame frame,
            PathGrid item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_PointToPointConnections_Custom(
            MutagenWriter writer,
            PathGrid item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_PointToPointConnections(
            MutagenWriter writer,
            PathGrid item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_PointToPointConnections_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinary_Unknown_Custom(
            MutagenFrame frame,
            PathGrid item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_Unknown_Custom(
            MutagenWriter writer,
            PathGrid item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_Unknown(
            MutagenWriter writer,
            PathGrid item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_Unknown_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            PathGrid item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            PathGrid item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                    using (var subFrame = frame.SpawnWithLength(Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                    {
                        FillBinary_PointToPointConnections_Custom(
                            frame: subFrame,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.PointToPointConnections);
                case 0x47414750: // PGAG
                    using (var subFrame = frame.SpawnWithLength(Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                    {
                        FillBinary_Unknown_Custom(
                            frame: subFrame,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.Unknown);
                case 0x49524750: // PGRI
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<InterCellPoint>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.InterCellConnections,
                        fieldIndex: (int)PathGrid_FieldIndex.InterCellConnections,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out InterCellPoint listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<InterCellPoint>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.InterCellConnections);
                case 0x4C524750: // PGRL
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<PointToReferenceMapping>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: PathGrid_Registration.PGRL_HEADER,
                        item: item.PointToReferenceMappings,
                        fieldIndex: (int)PathGrid_FieldIndex.PointToReferenceMappings,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out PointToReferenceMapping listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<PointToReferenceMapping>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)PathGrid_FieldIndex.PointToReferenceMappings);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public PathGrid Copy(
            PathGrid_CopyMask copyMask = null,
            IPathGridGetter def = null)
        {
            return PathGrid.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PathGrid Copy(
            IPathGrid item,
            PathGrid_CopyMask copyMask = null,
            IPathGridGetter def = null)
        {
            PathGrid ret;
            if (item.GetType().Equals(typeof(PathGrid)))
            {
                ret = new PathGrid();
            }
            else
            {
                ret = (PathGrid)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PathGrid Copy_ToLoqui(
            IPathGridGetter item,
            PathGrid_CopyMask copyMask = null,
            IPathGridGetter def = null)
        {
            PathGrid ret;
            if (item.GetType().Equals(typeof(PathGrid)))
            {
                ret = new PathGrid() as PathGrid;
            }
            else
            {
                ret = (PathGrid)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IPathGridGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPathGridGetter rhs,
            PathGrid_CopyMask copyMask,
            IPathGridGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPathGridGetter rhs,
            out PathGrid_ErrorMask errorMask,
            PathGrid_CopyMask copyMask = null,
            IPathGridGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PathGridCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IPathGridGetter rhs,
            ErrorMaskBuilder errorMask,
            PathGrid_CopyMask copyMask = null,
            IPathGridGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            PathGridCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    this._PointToPointConnections.SetTo((IEnumerable<PathGridPoint>)obj);
                    break;
                case PathGrid_FieldIndex.Unknown:
                    this.Unknown = (Byte[])obj;
                    break;
                case PathGrid_FieldIndex.InterCellConnections:
                    this._InterCellConnections.SetTo((IEnumerable<InterCellPoint>)obj);
                    break;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    this._PointToReferenceMappings.SetTo((IEnumerable<PointToReferenceMapping>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            PathGridCommon.Clear(this, cmds);
        }


        public new static PathGrid Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PathGrid();
            foreach (var pair in fields)
            {
                CopyInInternal_PathGrid(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_PathGrid(PathGrid obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PathGrid_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    obj._PointToPointConnections.SetTo((IEnumerable<PathGridPoint>)pair.Value);
                    break;
                case PathGrid_FieldIndex.Unknown:
                    obj.Unknown = (Byte[])pair.Value;
                    break;
                case PathGrid_FieldIndex.InterCellConnections:
                    obj._InterCellConnections.SetTo((IEnumerable<InterCellPoint>)pair.Value);
                    break;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    obj._PointToReferenceMappings.SetTo((IEnumerable<PointToReferenceMapping>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, PathGrid obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IPathGrid : IPathGridGetter, IMajorRecord, ILoquiClass<IPathGrid, IPathGridGetter>, ILoquiClass<PathGrid, IPathGridGetter>
    {
        new ISourceSetList<PathGridPoint> PointToPointConnections { get; }
        new Byte[] Unknown { get; set; }
        new bool Unknown_IsSet { get; set; }
        void Unknown_Set(Byte[] item, bool hasBeenSet = true);
        void Unknown_Unset();

        new ISourceSetList<InterCellPoint> InterCellConnections { get; }
        new ISourceSetList<PointToReferenceMapping> PointToReferenceMappings { get; }
    }

    public partial interface IPathGridGetter : IMajorRecordGetter
    {
        #region PointToPointConnections
        IObservableSetList<PathGridPoint> PointToPointConnections { get; }
        #endregion
        #region Unknown
        Byte[] Unknown { get; }
        bool Unknown_IsSet { get; }

        #endregion
        #region InterCellConnections
        IObservableSetList<InterCellPoint> InterCellConnections { get; }
        #endregion
        #region PointToReferenceMappings
        IObservableSetList<PointToReferenceMapping> PointToReferenceMappings { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PathGrid_FieldIndex
    {
        MajorRecordFlags = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        PointToPointConnections = 5,
        Unknown = 6,
        InterCellConnections = 7,
        PointToReferenceMappings = 8,
    }
    #endregion

    #region Registration
    public class PathGrid_Registration : ILoquiRegistration
    {
        public static readonly PathGrid_Registration Instance = new PathGrid_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 129,
            version: 0);

        public const string GUID = "9fc6e922-dfb7-4ad4-81d3-bea823f22198";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(PathGrid_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PathGrid_ErrorMask);

        public static readonly Type ClassType = typeof(PathGrid);

        public static readonly Type GetterType = typeof(IPathGridGetter);

        public static readonly Type SetterType = typeof(IPathGrid);

        public static readonly Type CommonType = typeof(PathGridCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PathGrid";

        public const string Name = "PathGrid";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "POINTTOPOINTCONNECTIONS":
                    return (ushort)PathGrid_FieldIndex.PointToPointConnections;
                case "UNKNOWN":
                    return (ushort)PathGrid_FieldIndex.Unknown;
                case "INTERCELLCONNECTIONS":
                    return (ushort)PathGrid_FieldIndex.InterCellConnections;
                case "POINTTOREFERENCEMAPPINGS":
                    return (ushort)PathGrid_FieldIndex.PointToReferenceMappings;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                case PathGrid_FieldIndex.InterCellConnections:
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return true;
                case PathGrid_FieldIndex.Unknown:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                case PathGrid_FieldIndex.InterCellConnections:
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return true;
                case PathGrid_FieldIndex.Unknown:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                case PathGrid_FieldIndex.Unknown:
                case PathGrid_FieldIndex.InterCellConnections:
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    return "PointToPointConnections";
                case PathGrid_FieldIndex.Unknown:
                    return "Unknown";
                case PathGrid_FieldIndex.InterCellConnections:
                    return "InterCellConnections";
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return "PointToReferenceMappings";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                case PathGrid_FieldIndex.Unknown:
                case PathGrid_FieldIndex.InterCellConnections:
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                case PathGrid_FieldIndex.Unknown:
                case PathGrid_FieldIndex.InterCellConnections:
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    return typeof(SourceSetList<PathGridPoint>);
                case PathGrid_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case PathGrid_FieldIndex.InterCellConnections:
                    return typeof(SourceSetList<InterCellPoint>);
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return typeof(SourceSetList<PointToReferenceMapping>);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType PGAG_HEADER = new RecordType("PGAG");
        public static readonly RecordType PGRI_HEADER = new RecordType("PGRI");
        public static readonly RecordType PGRL_HEADER = new RecordType("PGRL");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PGRD_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class PathGridCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IPathGrid item,
            IPathGridGetter rhs,
            IPathGridGetter def,
            ErrorMaskBuilder errorMask,
            PathGrid_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.PointToPointConnections.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.PointToPointConnections);
                try
                {
                    item.PointToPointConnections.SetToWithDefault(
                        rhs: rhs.PointToPointConnections,
                        def: def?.PointToPointConnections,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.PointToPointConnections.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return PathGridPoint.Copy(
                                        r,
                                        copyMask?.PointToPointConnections?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.PointToPointConnections.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Unknown ?? true)
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.Unknown);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Unknown,
                        rhsHasBeenSet: rhs.Unknown_IsSet,
                        defItem: def?.Unknown ?? default(Byte[]),
                        defHasBeenSet: def?.Unknown_IsSet ?? false,
                        outRhsItem: out var rhsUnknownItem,
                        outDefItem: out var defUnknownItem))
                    {
                        item.Unknown = rhsUnknownItem;
                    }
                    else
                    {
                        item.Unknown_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.InterCellConnections.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.InterCellConnections);
                try
                {
                    item.InterCellConnections.SetToWithDefault(
                        rhs: rhs.InterCellConnections,
                        def: def?.InterCellConnections,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.InterCellConnections.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return InterCellPoint.Copy(
                                        r,
                                        copyMask?.InterCellConnections?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.InterCellConnections.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PointToReferenceMappings.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.PointToReferenceMappings);
                try
                {
                    item.PointToReferenceMappings.SetToWithDefault(
                        rhs: rhs.PointToReferenceMappings,
                        def: def?.PointToReferenceMappings,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.PointToReferenceMappings.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return PointToReferenceMapping.Copy(
                                        r,
                                        copyMask?.PointToReferenceMappings?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.PointToReferenceMappings.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IPathGrid obj,
            NotifyingFireParameters cmds = null)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    obj.PointToPointConnections.HasBeenSet = on;
                    break;
                case PathGrid_FieldIndex.Unknown:
                    obj.Unknown_IsSet = on;
                    break;
                case PathGrid_FieldIndex.InterCellConnections:
                    obj.InterCellConnections.HasBeenSet = on;
                    break;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    obj.PointToReferenceMappings.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IPathGrid obj,
            NotifyingUnsetParameters cmds = null)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    obj.PointToPointConnections.Unset();
                    break;
                case PathGrid_FieldIndex.Unknown:
                    obj.Unknown_Unset();
                    break;
                case PathGrid_FieldIndex.InterCellConnections:
                    obj.InterCellConnections.Unset();
                    break;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    obj.PointToReferenceMappings.Unset();
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IPathGrid obj)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    return obj.PointToPointConnections.HasBeenSet;
                case PathGrid_FieldIndex.Unknown:
                    return obj.Unknown_IsSet;
                case PathGrid_FieldIndex.InterCellConnections:
                    return obj.InterCellConnections.HasBeenSet;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return obj.PointToReferenceMappings.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IPathGridGetter obj)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    return obj.PointToPointConnections;
                case PathGrid_FieldIndex.Unknown:
                    return obj.Unknown;
                case PathGrid_FieldIndex.InterCellConnections:
                    return obj.InterCellConnections;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return obj.PointToReferenceMappings;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IPathGrid item,
            NotifyingUnsetParameters cmds = null)
        {
            item.PointToPointConnections.Unset();
            item.Unknown_Unset();
            item.InterCellConnections.Unset();
            item.PointToReferenceMappings.Unset();
        }

        public static PathGrid_Mask<bool> GetEqualsMask(
            this IPathGridGetter item,
            IPathGridGetter rhs)
        {
            var ret = new PathGrid_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IPathGridGetter item,
            IPathGridGetter rhs,
            PathGrid_Mask<bool> ret)
        {
            if (rhs == null) return;
            if (item.PointToPointConnections.HasBeenSet == rhs.PointToPointConnections.HasBeenSet)
            {
                if (item.PointToPointConnections.HasBeenSet)
                {
                    ret.PointToPointConnections = new MaskItem<bool, IEnumerable<MaskItem<bool, PathGridPoint_Mask<bool>>>>();
                    ret.PointToPointConnections.Specific = item.PointToPointConnections.SelectAgainst<PathGridPoint, MaskItem<bool, PathGridPoint_Mask<bool>>>(rhs.PointToPointConnections, ((l, r) =>
                    {
                        MaskItem<bool, PathGridPoint_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, PathGridPoint_Mask<bool>>();
                        itemRet.Specific = PathGridPointCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.PointToPointConnections.Overall);
                    ret.PointToPointConnections.Overall = ret.PointToPointConnections.Overall && ret.PointToPointConnections.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.PointToPointConnections = new MaskItem<bool, IEnumerable<MaskItem<bool, PathGridPoint_Mask<bool>>>>();
                    ret.PointToPointConnections.Overall = true;
                }
            }
            else
            {
                ret.PointToPointConnections = new MaskItem<bool, IEnumerable<MaskItem<bool, PathGridPoint_Mask<bool>>>>();
                ret.PointToPointConnections.Overall = false;
            }
            ret.Unknown = item.Unknown_IsSet == rhs.Unknown_IsSet && item.Unknown.EqualsFast(rhs.Unknown);
            if (item.InterCellConnections.HasBeenSet == rhs.InterCellConnections.HasBeenSet)
            {
                if (item.InterCellConnections.HasBeenSet)
                {
                    ret.InterCellConnections = new MaskItem<bool, IEnumerable<MaskItem<bool, InterCellPoint_Mask<bool>>>>();
                    ret.InterCellConnections.Specific = item.InterCellConnections.SelectAgainst<InterCellPoint, MaskItem<bool, InterCellPoint_Mask<bool>>>(rhs.InterCellConnections, ((l, r) =>
                    {
                        MaskItem<bool, InterCellPoint_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, InterCellPoint_Mask<bool>>();
                        itemRet.Specific = InterCellPointCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.InterCellConnections.Overall);
                    ret.InterCellConnections.Overall = ret.InterCellConnections.Overall && ret.InterCellConnections.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.InterCellConnections = new MaskItem<bool, IEnumerable<MaskItem<bool, InterCellPoint_Mask<bool>>>>();
                    ret.InterCellConnections.Overall = true;
                }
            }
            else
            {
                ret.InterCellConnections = new MaskItem<bool, IEnumerable<MaskItem<bool, InterCellPoint_Mask<bool>>>>();
                ret.InterCellConnections.Overall = false;
            }
            if (item.PointToReferenceMappings.HasBeenSet == rhs.PointToReferenceMappings.HasBeenSet)
            {
                if (item.PointToReferenceMappings.HasBeenSet)
                {
                    ret.PointToReferenceMappings = new MaskItem<bool, IEnumerable<MaskItem<bool, PointToReferenceMapping_Mask<bool>>>>();
                    ret.PointToReferenceMappings.Specific = item.PointToReferenceMappings.SelectAgainst<PointToReferenceMapping, MaskItem<bool, PointToReferenceMapping_Mask<bool>>>(rhs.PointToReferenceMappings, ((l, r) =>
                    {
                        MaskItem<bool, PointToReferenceMapping_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.PointToReferenceMappings.Overall);
                    ret.PointToReferenceMappings.Overall = ret.PointToReferenceMappings.Overall && ret.PointToReferenceMappings.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.PointToReferenceMappings = new MaskItem<bool, IEnumerable<MaskItem<bool, PointToReferenceMapping_Mask<bool>>>>();
                    ret.PointToReferenceMappings.Overall = true;
                }
            }
            else
            {
                ret.PointToReferenceMappings = new MaskItem<bool, IEnumerable<MaskItem<bool, PointToReferenceMapping_Mask<bool>>>>();
                ret.PointToReferenceMappings.Overall = false;
            }
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IPathGridGetter item,
            string name = null,
            PathGrid_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IPathGridGetter item,
            FileGeneration fg,
            string name = null,
            PathGrid_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(PathGrid)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(PathGrid)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.PointToPointConnections?.Overall ?? true)
                {
                    fg.AppendLine("PointToPointConnections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.PointToPointConnections)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {item.Unknown}");
                }
                if (printMask?.InterCellConnections?.Overall ?? true)
                {
                    fg.AppendLine("InterCellConnections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.InterCellConnections)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.PointToReferenceMappings?.Overall ?? true)
                {
                    fg.AppendLine("PointToReferenceMappings =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.PointToReferenceMappings)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IPathGridGetter item,
            PathGrid_Mask<bool?> checkMask)
        {
            if (checkMask.PointToPointConnections.Overall.HasValue && checkMask.PointToPointConnections.Overall.Value != item.PointToPointConnections.HasBeenSet) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_IsSet) return false;
            if (checkMask.InterCellConnections.Overall.HasValue && checkMask.InterCellConnections.Overall.Value != item.InterCellConnections.HasBeenSet) return false;
            if (checkMask.PointToReferenceMappings.Overall.HasValue && checkMask.PointToReferenceMappings.Overall.Value != item.PointToReferenceMappings.HasBeenSet) return false;
            return true;
        }

        public static PathGrid_Mask<bool> GetHasBeenSetMask(IPathGridGetter item)
        {
            var ret = new PathGrid_Mask<bool>();
            ret.PointToPointConnections = new MaskItem<bool, IEnumerable<MaskItem<bool, PathGridPoint_Mask<bool>>>>(item.PointToPointConnections.HasBeenSet, item.PointToPointConnections.Select((i) => new MaskItem<bool, PathGridPoint_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Unknown = item.Unknown_IsSet;
            ret.InterCellConnections = new MaskItem<bool, IEnumerable<MaskItem<bool, InterCellPoint_Mask<bool>>>>(item.InterCellConnections.HasBeenSet, item.InterCellConnections.Select((i) => new MaskItem<bool, InterCellPoint_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.PointToReferenceMappings = new MaskItem<bool, IEnumerable<MaskItem<bool, PointToReferenceMapping_Mask<bool>>>>(item.PointToReferenceMappings.HasBeenSet, item.PointToReferenceMappings.Select((i) => new MaskItem<bool, PointToReferenceMapping_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static PathGrid_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static PathGrid_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (PathGrid_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PathGrid_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PathGrid_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PathGrid_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (PathGrid_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            PathGrid item,
            bool doMasks,
            out PathGrid_ErrorMask errorMask,
            PathGrid_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            PathGrid item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PathGrid");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PathGrid");
            }
            if (item.PointToPointConnections.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PathGrid_FieldIndex.PointToPointConnections) ?? true))
            {
                ListXmlTranslation<PathGridPoint>.Instance.Write(
                    node: elem,
                    name: nameof(item.PointToPointConnections),
                    item: item.PointToPointConnections,
                    fieldIndex: (int)PathGrid_FieldIndex.PointToPointConnections,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PathGrid_FieldIndex.PointToPointConnections),
                    transl: (XElement subNode, PathGridPoint subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<PathGridPoint>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.Unknown_IsSet
                && (translationMask?.GetShouldTranslate((int)PathGrid_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)PathGrid_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if (item.InterCellConnections.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PathGrid_FieldIndex.InterCellConnections) ?? true))
            {
                ListXmlTranslation<InterCellPoint>.Instance.Write(
                    node: elem,
                    name: nameof(item.InterCellConnections),
                    item: item.InterCellConnections,
                    fieldIndex: (int)PathGrid_FieldIndex.InterCellConnections,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PathGrid_FieldIndex.InterCellConnections),
                    transl: (XElement subNode, InterCellPoint subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<InterCellPoint>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.PointToReferenceMappings.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PathGrid_FieldIndex.PointToReferenceMappings) ?? true))
            {
                ListXmlTranslation<PointToReferenceMapping>.Instance.Write(
                    node: elem,
                    name: nameof(item.PointToReferenceMappings),
                    item: item.PointToReferenceMappings,
                    fieldIndex: (int)PathGrid_FieldIndex.PointToReferenceMappings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PathGrid_FieldIndex.PointToReferenceMappings),
                    transl: (XElement subNode, PointToReferenceMapping subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<PointToReferenceMapping>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            PathGrid item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out PathGrid_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = PathGrid_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            PathGrid item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: PathGrid_Registration.PGRD_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            PathGrid item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            PathGrid.WriteBinary_PointToPointConnections(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            PathGrid.WriteBinary_Unknown(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            if (item.InterCellConnections.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<InterCellPoint>.Instance.Write(
                    writer: writer,
                    items: item.InterCellConnections,
                    fieldIndex: (int)PathGrid_FieldIndex.InterCellConnections,
                    recordType: PathGrid_Registration.PGRI_HEADER,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, InterCellPoint subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<InterCellPoint>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.PointToReferenceMappings.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<PointToReferenceMapping>.Instance.Write(
                    writer: writer,
                    items: item.PointToReferenceMappings,
                    fieldIndex: (int)PathGrid_FieldIndex.PointToReferenceMappings,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, PointToReferenceMapping subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<PointToReferenceMapping>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class PathGrid_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<PathGrid_Mask<T>>
    {
        #region Ctors
        public PathGrid_Mask()
        {
        }

        public PathGrid_Mask(T initialValue)
        {
            this.PointToPointConnections = new MaskItem<T, IEnumerable<MaskItem<T, PathGridPoint_Mask<T>>>>(initialValue, null);
            this.Unknown = initialValue;
            this.InterCellConnections = new MaskItem<T, IEnumerable<MaskItem<T, InterCellPoint_Mask<T>>>>(initialValue, null);
            this.PointToReferenceMappings = new MaskItem<T, IEnumerable<MaskItem<T, PointToReferenceMapping_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, PathGridPoint_Mask<T>>>> PointToPointConnections;
        public T Unknown;
        public MaskItem<T, IEnumerable<MaskItem<T, InterCellPoint_Mask<T>>>> InterCellConnections;
        public MaskItem<T, IEnumerable<MaskItem<T, PointToReferenceMapping_Mask<T>>>> PointToReferenceMappings;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PathGrid_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PathGrid_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.PointToPointConnections, rhs.PointToPointConnections)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            if (!object.Equals(this.InterCellConnections, rhs.InterCellConnections)) return false;
            if (!object.Equals(this.PointToReferenceMappings, rhs.PointToReferenceMappings)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.PointToPointConnections?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(this.InterCellConnections?.GetHashCode());
            ret = ret.CombineHashCode(this.PointToReferenceMappings?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.PointToPointConnections != null)
            {
                if (!eval(this.PointToPointConnections.Overall)) return false;
                if (this.PointToPointConnections.Specific != null)
                {
                    foreach (var item in this.PointToPointConnections.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Unknown)) return false;
            if (this.InterCellConnections != null)
            {
                if (!eval(this.InterCellConnections.Overall)) return false;
                if (this.InterCellConnections.Specific != null)
                {
                    foreach (var item in this.InterCellConnections.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.PointToReferenceMappings != null)
            {
                if (!eval(this.PointToReferenceMappings.Overall)) return false;
                if (this.PointToReferenceMappings.Specific != null)
                {
                    foreach (var item in this.PointToReferenceMappings.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new PathGrid_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PathGrid_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PathGrid_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (PointToPointConnections != null)
            {
                obj.PointToPointConnections = new MaskItem<R, IEnumerable<MaskItem<R, PathGridPoint_Mask<R>>>>();
                obj.PointToPointConnections.Overall = eval(this.PointToPointConnections.Overall);
                if (PointToPointConnections.Specific != null)
                {
                    List<MaskItem<R, PathGridPoint_Mask<R>>> l = new List<MaskItem<R, PathGridPoint_Mask<R>>>();
                    obj.PointToPointConnections.Specific = l;
                    foreach (var item in PointToPointConnections.Specific)
                    {
                        MaskItem<R, PathGridPoint_Mask<R>> mask = default(MaskItem<R, PathGridPoint_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, PathGridPoint_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Unknown = eval(this.Unknown);
            if (InterCellConnections != null)
            {
                obj.InterCellConnections = new MaskItem<R, IEnumerable<MaskItem<R, InterCellPoint_Mask<R>>>>();
                obj.InterCellConnections.Overall = eval(this.InterCellConnections.Overall);
                if (InterCellConnections.Specific != null)
                {
                    List<MaskItem<R, InterCellPoint_Mask<R>>> l = new List<MaskItem<R, InterCellPoint_Mask<R>>>();
                    obj.InterCellConnections.Specific = l;
                    foreach (var item in InterCellConnections.Specific)
                    {
                        MaskItem<R, InterCellPoint_Mask<R>> mask = default(MaskItem<R, InterCellPoint_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, InterCellPoint_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (PointToReferenceMappings != null)
            {
                obj.PointToReferenceMappings = new MaskItem<R, IEnumerable<MaskItem<R, PointToReferenceMapping_Mask<R>>>>();
                obj.PointToReferenceMappings.Overall = eval(this.PointToReferenceMappings.Overall);
                if (PointToReferenceMappings.Specific != null)
                {
                    List<MaskItem<R, PointToReferenceMapping_Mask<R>>> l = new List<MaskItem<R, PointToReferenceMapping_Mask<R>>>();
                    obj.PointToReferenceMappings.Specific = l;
                    foreach (var item in PointToReferenceMappings.Specific)
                    {
                        MaskItem<R, PointToReferenceMapping_Mask<R>> mask = default(MaskItem<R, PointToReferenceMapping_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, PointToReferenceMapping_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.PointToPointConnections.Specific = null;
            this.InterCellConnections.Specific = null;
            this.PointToReferenceMappings.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PathGrid_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PathGrid_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PathGrid_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.PointToPointConnections?.Overall ?? true)
                {
                    fg.AppendLine("PointToPointConnections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (PointToPointConnections.Overall != null)
                        {
                            fg.AppendLine(PointToPointConnections.Overall.ToString());
                        }
                        if (PointToPointConnections.Specific != null)
                        {
                            foreach (var subItem in PointToPointConnections.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
                if (printMask?.InterCellConnections?.Overall ?? true)
                {
                    fg.AppendLine("InterCellConnections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (InterCellConnections.Overall != null)
                        {
                            fg.AppendLine(InterCellConnections.Overall.ToString());
                        }
                        if (InterCellConnections.Specific != null)
                        {
                            foreach (var subItem in InterCellConnections.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.PointToReferenceMappings?.Overall ?? true)
                {
                    fg.AppendLine("PointToReferenceMappings =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (PointToReferenceMappings.Overall != null)
                        {
                            fg.AppendLine(PointToReferenceMappings.Overall.ToString());
                        }
                        if (PointToReferenceMappings.Specific != null)
                        {
                            foreach (var subItem in PointToReferenceMappings.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PathGrid_ErrorMask : MajorRecord_ErrorMask, IErrorMask<PathGrid_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, PathGridPoint_ErrorMask>>> PointToPointConnections;
        public Exception Unknown;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, InterCellPoint_ErrorMask>>> InterCellConnections;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, PointToReferenceMapping_ErrorMask>>> PointToReferenceMappings;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    return PointToPointConnections;
                case PathGrid_FieldIndex.Unknown:
                    return Unknown;
                case PathGrid_FieldIndex.InterCellConnections:
                    return InterCellConnections;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    return PointToReferenceMappings;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    this.PointToPointConnections = new MaskItem<Exception, IEnumerable<MaskItem<Exception, PathGridPoint_ErrorMask>>>(ex, null);
                    break;
                case PathGrid_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                case PathGrid_FieldIndex.InterCellConnections:
                    this.InterCellConnections = new MaskItem<Exception, IEnumerable<MaskItem<Exception, InterCellPoint_ErrorMask>>>(ex, null);
                    break;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    this.PointToReferenceMappings = new MaskItem<Exception, IEnumerable<MaskItem<Exception, PointToReferenceMapping_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
            switch (enu)
            {
                case PathGrid_FieldIndex.PointToPointConnections:
                    this.PointToPointConnections = (MaskItem<Exception, IEnumerable<MaskItem<Exception, PathGridPoint_ErrorMask>>>)obj;
                    break;
                case PathGrid_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                case PathGrid_FieldIndex.InterCellConnections:
                    this.InterCellConnections = (MaskItem<Exception, IEnumerable<MaskItem<Exception, InterCellPoint_ErrorMask>>>)obj;
                    break;
                case PathGrid_FieldIndex.PointToReferenceMappings:
                    this.PointToReferenceMappings = (MaskItem<Exception, IEnumerable<MaskItem<Exception, PointToReferenceMapping_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (PointToPointConnections != null) return true;
            if (Unknown != null) return true;
            if (InterCellConnections != null) return true;
            if (PointToReferenceMappings != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("PathGrid_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("PointToPointConnections =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (PointToPointConnections.Overall != null)
                {
                    fg.AppendLine(PointToPointConnections.Overall.ToString());
                }
                if (PointToPointConnections.Specific != null)
                {
                    foreach (var subItem in PointToPointConnections.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Unknown => {Unknown}");
            fg.AppendLine("InterCellConnections =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (InterCellConnections.Overall != null)
                {
                    fg.AppendLine(InterCellConnections.Overall.ToString());
                }
                if (InterCellConnections.Specific != null)
                {
                    foreach (var subItem in InterCellConnections.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("PointToReferenceMappings =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (PointToReferenceMappings.Overall != null)
                {
                    fg.AppendLine(PointToReferenceMappings.Overall.ToString());
                }
                if (PointToReferenceMappings.Specific != null)
                {
                    foreach (var subItem in PointToReferenceMappings.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public PathGrid_ErrorMask Combine(PathGrid_ErrorMask rhs)
        {
            var ret = new PathGrid_ErrorMask();
            ret.PointToPointConnections = new MaskItem<Exception, IEnumerable<MaskItem<Exception, PathGridPoint_ErrorMask>>>(this.PointToPointConnections.Overall.Combine(rhs.PointToPointConnections.Overall), new List<MaskItem<Exception, PathGridPoint_ErrorMask>>(this.PointToPointConnections.Specific.And(rhs.PointToPointConnections.Specific)));
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            ret.InterCellConnections = new MaskItem<Exception, IEnumerable<MaskItem<Exception, InterCellPoint_ErrorMask>>>(this.InterCellConnections.Overall.Combine(rhs.InterCellConnections.Overall), new List<MaskItem<Exception, InterCellPoint_ErrorMask>>(this.InterCellConnections.Specific.And(rhs.InterCellConnections.Specific)));
            ret.PointToReferenceMappings = new MaskItem<Exception, IEnumerable<MaskItem<Exception, PointToReferenceMapping_ErrorMask>>>(this.PointToReferenceMappings.Overall.Combine(rhs.PointToReferenceMappings.Overall), new List<MaskItem<Exception, PointToReferenceMapping_ErrorMask>>(this.PointToReferenceMappings.Specific.And(rhs.PointToReferenceMappings.Specific)));
            return ret;
        }
        public static PathGrid_ErrorMask Combine(PathGrid_ErrorMask lhs, PathGrid_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PathGrid_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PathGrid_ErrorMask();
        }
        #endregion

    }
    public class PathGrid_CopyMask : MajorRecord_CopyMask
    {
        public PathGrid_CopyMask()
        {
        }

        public PathGrid_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.PointToPointConnections = new MaskItem<CopyOption, PathGridPoint_CopyMask>(deepCopyOption, default);
            this.Unknown = defaultOn;
            this.InterCellConnections = new MaskItem<CopyOption, InterCellPoint_CopyMask>(deepCopyOption, default);
            this.PointToReferenceMappings = new MaskItem<CopyOption, PointToReferenceMapping_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public MaskItem<CopyOption, PathGridPoint_CopyMask> PointToPointConnections;
        public bool Unknown;
        public MaskItem<CopyOption, InterCellPoint_CopyMask> InterCellConnections;
        public MaskItem<CopyOption, PointToReferenceMapping_CopyMask> PointToReferenceMappings;
        #endregion

    }

    public class PathGrid_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        public MaskItem<bool, PathGridPoint_TranslationMask> PointToPointConnections;
        public bool Unknown;
        public MaskItem<bool, InterCellPoint_TranslationMask> InterCellConnections;
        public MaskItem<bool, PointToReferenceMapping_TranslationMask> PointToReferenceMappings;
        #endregion

        #region Ctors
        public PathGrid_TranslationMask()
            : base()
        {
        }

        public PathGrid_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.PointToPointConnections = new MaskItem<bool, PathGridPoint_TranslationMask>(defaultOn, null);
            this.Unknown = defaultOn;
            this.InterCellConnections = new MaskItem<bool, InterCellPoint_TranslationMask>(defaultOn, null);
            this.PointToReferenceMappings = new MaskItem<bool, PointToReferenceMapping_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((PointToPointConnections?.Overall ?? true, PointToPointConnections?.Specific?.GetCrystal()));
            ret.Add((Unknown, null));
            ret.Add((InterCellConnections?.Overall ?? true, InterCellConnections?.Specific?.GetCrystal()));
            ret.Add((PointToReferenceMappings?.Overall ?? true, PointToReferenceMappings?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
