/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedCreature : Placed, IPlacedCreature, ILoquiObject<PlacedCreature>, ILoquiObjectSetter, IEquatable<PlacedCreature>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedCreature_Registration.Instance;
        public new static PlacedCreature_Registration Registration => PlacedCreature_Registration.Instance;

        #region Ctor
        public PlacedCreature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        public FormIDSetLink<Creature> Base_Property { get; } = new FormIDSetLink<Creature>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Creature Base { get => Base_Property.Item; set => Base_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Creature> IPlacedCreatureGetter.Base_Property => this.Base_Property;
        #endregion
        #region Owner
        public FormIDSetLink<Faction> Owner_Property { get; } = new FormIDSetLink<Faction>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Faction Owner { get => Owner_Property.Item; set => Owner_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Faction> IPlacedCreatureGetter.Owner_Property => this.Owner_Property;
        #endregion
        #region FactionRank
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Int32> _FactionRank = NotifyingSetItem.Factory<Int32>(markAsSet: false);
        public INotifyingSetItem<Int32> FactionRank_Property => _FactionRank;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FactionRank
        {
            get => this._FactionRank.Item;
            set => this._FactionRank.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> IPlacedCreature.FactionRank_Property => this.FactionRank_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> IPlacedCreatureGetter.FactionRank_Property => this.FactionRank_Property;
        #endregion
        #region GlobalVariable
        public FormIDSetLink<Global> GlobalVariable_Property { get; } = new FormIDSetLink<Global>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Global GlobalVariable { get => GlobalVariable_Property.Item; set => GlobalVariable_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Global> IPlacedCreatureGetter.GlobalVariable_Property => this.GlobalVariable_Property;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<EnableParent> _EnableParent = new NotifyingSetItem<EnableParent>();
        public INotifyingSetItem<EnableParent> EnableParent_Property => this._EnableParent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        EnableParent IPlacedCreatureGetter.EnableParent => this.EnableParent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public EnableParent EnableParent { get => _EnableParent.Item; set => _EnableParent.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<EnableParent> IPlacedCreature.EnableParent_Property => this.EnableParent_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<EnableParent> IPlacedCreatureGetter.EnableParent_Property => this.EnableParent_Property;
        #endregion
        #region RagdollData
        protected INotifyingSetItem<Byte[]> _RagdollData = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> RagdollData_Property => _RagdollData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] RagdollData
        {
            get => this._RagdollData.Item;
            set => this._RagdollData.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IPlacedCreature.RagdollData_Property => this.RagdollData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IPlacedCreatureGetter.RagdollData_Property => this.RagdollData_Property;
        #endregion
        #region Scale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Single> _Scale = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> Scale_Property => _Scale;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Scale
        {
            get => this._Scale.Item;
            set => this._Scale.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> IPlacedCreature.Scale_Property => this.Scale_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> IPlacedCreatureGetter.Scale_Property => this.Scale_Property;
        #endregion
        #region Position
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<P3Float> _Position = NotifyingItem.Factory<P3Float>();
        public INotifyingItem<P3Float> Position_Property => _Position;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P3Float Position
        {
            get => this._Position.Item;
            set => this._Position.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P3Float> IPlacedCreature.Position_Property => this.Position_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P3Float> IPlacedCreatureGetter.Position_Property => this.Position_Property;
        #endregion
        #region Rotation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<P3Float> _Rotation = NotifyingItem.Factory<P3Float>();
        public INotifyingItem<P3Float> Rotation_Property => _Rotation;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P3Float Rotation
        {
            get => this._Rotation.Item;
            set => this._Rotation.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P3Float> IPlacedCreature.Rotation_Property => this.Rotation_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P3Float> IPlacedCreatureGetter.Rotation_Property => this.Rotation_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => PlacedCreatureCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => PlacedCreatureCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => PlacedCreatureCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            PlacedCreatureCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<PlacedCreature>.GetEqualsMask(PlacedCreature rhs) => PlacedCreatureCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IPlacedCreatureGetter>.GetEqualsMask(IPlacedCreatureGetter rhs) => PlacedCreatureCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return PlacedCreatureCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            PlacedCreature_Mask<bool> printMask = null)
        {
            return PlacedCreatureCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            PlacedCreatureCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new PlacedCreature_Mask<bool> GetHasBeenSetMask()
        {
            return PlacedCreatureCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is PlacedCreature rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PlacedCreature rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Base_Property.HasBeenSet != rhs.Base_Property.HasBeenSet) return false;
            if (Base_Property.HasBeenSet)
            {
                if (!this.Base_Property.Equals(rhs.Base_Property)) return false;
            }
            if (Owner_Property.HasBeenSet != rhs.Owner_Property.HasBeenSet) return false;
            if (Owner_Property.HasBeenSet)
            {
                if (!this.Owner_Property.Equals(rhs.Owner_Property)) return false;
            }
            if (FactionRank_Property.HasBeenSet != rhs.FactionRank_Property.HasBeenSet) return false;
            if (FactionRank_Property.HasBeenSet)
            {
                if (this.FactionRank != rhs.FactionRank) return false;
            }
            if (GlobalVariable_Property.HasBeenSet != rhs.GlobalVariable_Property.HasBeenSet) return false;
            if (GlobalVariable_Property.HasBeenSet)
            {
                if (!this.GlobalVariable_Property.Equals(rhs.GlobalVariable_Property)) return false;
            }
            if (EnableParent_Property.HasBeenSet != rhs.EnableParent_Property.HasBeenSet) return false;
            if (EnableParent_Property.HasBeenSet)
            {
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
            }
            if (RagdollData_Property.HasBeenSet != rhs.RagdollData_Property.HasBeenSet) return false;
            if (RagdollData_Property.HasBeenSet)
            {
                if (!this.RagdollData.EqualsFast(rhs.RagdollData)) return false;
            }
            if (Scale_Property.HasBeenSet != rhs.Scale_Property.HasBeenSet) return false;
            if (Scale_Property.HasBeenSet)
            {
                if (!this.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if (this.Position != rhs.Position) return false;
            if (this.Rotation != rhs.Rotation) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Base_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Base).CombineHashCode(ret);
            }
            if (Owner_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Owner).CombineHashCode(ret);
            }
            if (FactionRank_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FactionRank).CombineHashCode(ret);
            }
            if (GlobalVariable_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(GlobalVariable).CombineHashCode(ret);
            }
            if (EnableParent_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnableParent).CombineHashCode(ret);
            }
            if (RagdollData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RagdollData).CombineHashCode(ret);
            }
            if (Scale_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Scale).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Position).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Rotation).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static PlacedCreature Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PlacedCreature Create_XML(
            XElement root,
            out PlacedCreature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = PlacedCreature_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static PlacedCreature Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new PlacedCreature();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PlacedCreature Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static PlacedCreature Create_XML(
            string path,
            out PlacedCreature_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static PlacedCreature Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static PlacedCreature Create_XML(
            Stream stream,
            out PlacedCreature_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<PlacedCreature>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out PlacedCreature_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<PlacedCreature>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = PlacedCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out PlacedCreature_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out PlacedCreature_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out Placed_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out PlacedCreature_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out PlacedCreature_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out PlacedCreature_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = PlacedCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out PlacedCreature_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out PlacedCreature_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            PlacedCreatureCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            PlacedCreature item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Base":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)PlacedCreature_FieldIndex.Base,
                        item: item.Base_Property,
                        errorMask: errorMask);
                    break;
                case "Owner":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)PlacedCreature_FieldIndex.Owner,
                        item: item.Owner_Property,
                        errorMask: errorMask);
                    break;
                case "FactionRank":
                    Int32XmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)PlacedCreature_FieldIndex.FactionRank,
                        item: item._FactionRank,
                        errorMask: errorMask);
                    break;
                case "GlobalVariable":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)PlacedCreature_FieldIndex.GlobalVariable,
                        item: item.GlobalVariable_Property,
                        errorMask: errorMask);
                    break;
                case "EnableParent":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedCreature_FieldIndex.EnableParent);
                        if (LoquiXmlTranslation<EnableParent>.Instance.Parse(
                            root: root,
                            item: out var EnableParentParse,
                            errorMask: errorMask))
                        {
                            item._EnableParent.Item = EnableParentParse;
                        }
                        else
                        {
                            item._EnableParent.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RagdollData":
                    ByteArrayXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)PlacedCreature_FieldIndex.RagdollData,
                        item: item._RagdollData,
                        errorMask: errorMask);
                    break;
                case "Scale":
                    FloatXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)PlacedCreature_FieldIndex.Scale,
                        item: item._Scale,
                        errorMask: errorMask);
                    break;
                case "Position":
                    P3FloatXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)PlacedCreature_FieldIndex.Position,
                        item: item._Position,
                        errorMask: errorMask);
                    break;
                case "Rotation":
                    P3FloatXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)PlacedCreature_FieldIndex.Rotation,
                        item: item._Rotation,
                        errorMask: errorMask);
                    break;
                default:
                    Placed.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PlacedCreature_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Base_Property;
            yield return Owner_Property;
            yield return GlobalVariable_Property;
            if (EnableParent != null)
            {
                foreach (var item in EnableParent.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static PlacedCreature Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PlacedCreature Create_Binary(
            MutagenFrame frame,
            out PlacedCreature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedCreature_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static PlacedCreature Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<PlacedCreature, PlacedCreature_FieldIndex>(
                record: new PlacedCreature(),
                frame: frame,
                errorMask: errorMask,
                recType: PlacedCreature_Registration.ACRE_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static PlacedCreature Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static PlacedCreature Create_Binary(
            string path,
            out PlacedCreature_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static PlacedCreature Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static PlacedCreature Create_Binary(
            Stream stream,
            out PlacedCreature_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out PlacedCreature_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out PlacedCreature_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out PlacedCreature_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            PlacedCreatureCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            PlacedCreature item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            Placed.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<PlacedCreature_FieldIndex?> Fill_Binary_RecordTypes(
            PlacedCreature item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "NAME":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Base_Property,
                        fieldIndex: (int)PlacedCreature_FieldIndex.Base,
                        errorMask: errorMask);
                    return TryGet<PlacedCreature_FieldIndex?>.Succeed(PlacedCreature_FieldIndex.Base);
                case "XOWN":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Owner_Property,
                        fieldIndex: (int)PlacedCreature_FieldIndex.Owner,
                        errorMask: errorMask);
                    return TryGet<PlacedCreature_FieldIndex?>.Succeed(PlacedCreature_FieldIndex.Owner);
                case "XRNK":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._FactionRank,
                        fieldIndex: (int)PlacedCreature_FieldIndex.FactionRank,
                        errorMask: errorMask);
                    return TryGet<PlacedCreature_FieldIndex?>.Succeed(PlacedCreature_FieldIndex.FactionRank);
                case "XGLB":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.GlobalVariable_Property,
                        fieldIndex: (int)PlacedCreature_FieldIndex.GlobalVariable,
                        errorMask: errorMask);
                    return TryGet<PlacedCreature_FieldIndex?>.Succeed(PlacedCreature_FieldIndex.GlobalVariable);
                case "XESP":
                    LoquiBinaryTranslation<EnableParent>.Instance.ParseInto(
                        frame: frame,
                        fieldIndex: (int)PlacedCreature_FieldIndex.EnableParent,
                        errorMask: errorMask,
                        item: item._EnableParent);
                    return TryGet<PlacedCreature_FieldIndex?>.Succeed(PlacedCreature_FieldIndex.EnableParent);
                case "XRGD":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.ParseInto(
                        frame.SpawnWithLength(contentLength),
                        item: item._RagdollData,
                        fieldIndex: (int)PlacedCreature_FieldIndex.RagdollData,
                        errorMask: errorMask);
                    return TryGet<PlacedCreature_FieldIndex?>.Succeed(PlacedCreature_FieldIndex.RagdollData);
                case "XSCL":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._Scale,
                        fieldIndex: (int)PlacedCreature_FieldIndex.Scale,
                        errorMask: errorMask);
                    return TryGet<PlacedCreature_FieldIndex?>.Succeed(PlacedCreature_FieldIndex.Scale);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Position,
                            fieldIndex: (int)PlacedCreature_FieldIndex.Position,
                            errorMask: errorMask);
                        Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame,
                            item: item._Rotation,
                            fieldIndex: (int)PlacedCreature_FieldIndex.Rotation,
                            errorMask: errorMask);
                    }
                    return TryGet<PlacedCreature_FieldIndex?>.Succeed(PlacedCreature_FieldIndex.Rotation);
                default:
                    return Placed.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => PlacedCreatureCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public PlacedCreature Copy(
            PlacedCreature_CopyMask copyMask = null,
            IPlacedCreatureGetter def = null)
        {
            return PlacedCreature.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PlacedCreature Copy(
            IPlacedCreature item,
            PlacedCreature_CopyMask copyMask = null,
            IPlacedCreatureGetter def = null)
        {
            PlacedCreature ret;
            if (item.GetType().Equals(typeof(PlacedCreature)))
            {
                ret = new PlacedCreature();
            }
            else
            {
                ret = (PlacedCreature)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PlacedCreature Copy_ToLoqui(
            IPlacedCreatureGetter item,
            PlacedCreature_CopyMask copyMask = null,
            IPlacedCreatureGetter def = null)
        {
            PlacedCreature ret;
            if (item.GetType().Equals(typeof(PlacedCreature)))
            {
                ret = new PlacedCreature() as PlacedCreature;
            }
            else
            {
                ret = (PlacedCreature)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IPlacedCreatureGetter rhs,
            PlacedCreature_CopyMask copyMask,
            IPlacedCreatureGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPlacedCreatureGetter rhs,
            out PlacedCreature_ErrorMask errorMask,
            PlacedCreature_CopyMask copyMask = null,
            IPlacedCreatureGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedCreatureCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = PlacedCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IPlacedCreatureGetter rhs,
            ErrorMaskBuilder errorMask,
            PlacedCreature_CopyMask copyMask = null,
            IPlacedCreatureGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            PlacedCreatureCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    this.Base_Property.Set(
                        (FormIDSetLink<Creature>)obj,
                        cmds);
                    break;
                case PlacedCreature_FieldIndex.Owner:
                    this.Owner_Property.Set(
                        (FormIDSetLink<Faction>)obj,
                        cmds);
                    break;
                case PlacedCreature_FieldIndex.FactionRank:
                    this._FactionRank.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case PlacedCreature_FieldIndex.GlobalVariable:
                    this.GlobalVariable_Property.Set(
                        (FormIDSetLink<Global>)obj,
                        cmds);
                    break;
                case PlacedCreature_FieldIndex.EnableParent:
                    this._EnableParent.Set(
                        (EnableParent)obj,
                        cmds);
                    break;
                case PlacedCreature_FieldIndex.RagdollData:
                    this._RagdollData.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case PlacedCreature_FieldIndex.Scale:
                    this._Scale.Set(
                        (Single)obj,
                        cmds);
                    break;
                case PlacedCreature_FieldIndex.Position:
                    this._Position.Set(
                        (P3Float)obj,
                        cmds);
                    break;
                case PlacedCreature_FieldIndex.Rotation:
                    this._Rotation.Set(
                        (P3Float)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            PlacedCreatureCommon.Clear(this, cmds);
        }


        public new static PlacedCreature Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PlacedCreature();
            foreach (var pair in fields)
            {
                CopyInInternal_PlacedCreature(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_PlacedCreature(PlacedCreature obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PlacedCreature_FieldIndex enu))
            {
                CopyInInternal_Placed(obj, pair);
            }
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    obj.Base_Property.Set(
                        (FormIDSetLink<Creature>)pair.Value,
                        null);
                    break;
                case PlacedCreature_FieldIndex.Owner:
                    obj.Owner_Property.Set(
                        (FormIDSetLink<Faction>)pair.Value,
                        null);
                    break;
                case PlacedCreature_FieldIndex.FactionRank:
                    obj._FactionRank.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case PlacedCreature_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.Set(
                        (FormIDSetLink<Global>)pair.Value,
                        null);
                    break;
                case PlacedCreature_FieldIndex.EnableParent:
                    obj._EnableParent.Set(
                        (EnableParent)pair.Value,
                        null);
                    break;
                case PlacedCreature_FieldIndex.RagdollData:
                    obj._RagdollData.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case PlacedCreature_FieldIndex.Scale:
                    obj._Scale.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case PlacedCreature_FieldIndex.Position:
                    obj._Position.Set(
                        (P3Float)pair.Value,
                        null);
                    break;
                case PlacedCreature_FieldIndex.Rotation:
                    obj._Rotation.Set(
                        (P3Float)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, PlacedCreature obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedCreature : IPlacedCreatureGetter, IPlaced, ILoquiClass<IPlacedCreature, IPlacedCreatureGetter>, ILoquiClass<PlacedCreature, IPlacedCreatureGetter>
    {
        new Creature Base { get; set; }
        new Faction Owner { get; set; }
        new Int32 FactionRank { get; set; }
        new INotifyingSetItem<Int32> FactionRank_Property { get; }

        new Global GlobalVariable { get; set; }
        new EnableParent EnableParent { get; set; }
        new INotifyingSetItem<EnableParent> EnableParent_Property { get; }

        new Byte[] RagdollData { get; set; }
        new INotifyingSetItem<Byte[]> RagdollData_Property { get; }

        new Single Scale { get; set; }
        new INotifyingSetItem<Single> Scale_Property { get; }

        new P3Float Position { get; set; }
        new INotifyingItem<P3Float> Position_Property { get; }

        new P3Float Rotation { get; set; }
        new INotifyingItem<P3Float> Rotation_Property { get; }

    }

    public partial interface IPlacedCreatureGetter : IPlacedGetter
    {
        #region Base
        Creature Base { get; }
        FormIDSetLink<Creature> Base_Property { get; }

        #endregion
        #region Owner
        Faction Owner { get; }
        FormIDSetLink<Faction> Owner_Property { get; }

        #endregion
        #region FactionRank
        Int32 FactionRank { get; }
        INotifyingSetItemGetter<Int32> FactionRank_Property { get; }

        #endregion
        #region GlobalVariable
        Global GlobalVariable { get; }
        FormIDSetLink<Global> GlobalVariable_Property { get; }

        #endregion
        #region EnableParent
        EnableParent EnableParent { get; }
        INotifyingSetItemGetter<EnableParent> EnableParent_Property { get; }

        #endregion
        #region RagdollData
        Byte[] RagdollData { get; }
        INotifyingSetItemGetter<Byte[]> RagdollData_Property { get; }

        #endregion
        #region Scale
        Single Scale { get; }
        INotifyingSetItemGetter<Single> Scale_Property { get; }

        #endregion
        #region Position
        P3Float Position { get; }
        INotifyingItemGetter<P3Float> Position_Property { get; }

        #endregion
        #region Rotation
        P3Float Rotation { get; }
        INotifyingItemGetter<P3Float> Rotation_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PlacedCreature_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Base = 5,
        Owner = 6,
        FactionRank = 7,
        GlobalVariable = 8,
        EnableParent = 9,
        RagdollData = 10,
        Scale = 11,
        Position = 12,
        Rotation = 13,
    }
    #endregion

    #region Registration
    public class PlacedCreature_Registration : ILoquiRegistration
    {
        public static readonly PlacedCreature_Registration Instance = new PlacedCreature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 128,
            version: 0);

        public const string GUID = "b0f41e71-09f4-46b3-8769-7252455d209f";

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(PlacedCreature_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedCreature_ErrorMask);

        public static readonly Type ClassType = typeof(PlacedCreature);

        public static readonly Type GetterType = typeof(IPlacedCreatureGetter);

        public static readonly Type SetterType = typeof(IPlacedCreature);

        public static readonly Type CommonType = typeof(PlacedCreatureCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedCreature";

        public const string Name = "PlacedCreature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BASE":
                    return (ushort)PlacedCreature_FieldIndex.Base;
                case "OWNER":
                    return (ushort)PlacedCreature_FieldIndex.Owner;
                case "FACTIONRANK":
                    return (ushort)PlacedCreature_FieldIndex.FactionRank;
                case "GLOBALVARIABLE":
                    return (ushort)PlacedCreature_FieldIndex.GlobalVariable;
                case "ENABLEPARENT":
                    return (ushort)PlacedCreature_FieldIndex.EnableParent;
                case "RAGDOLLDATA":
                    return (ushort)PlacedCreature_FieldIndex.RagdollData;
                case "SCALE":
                    return (ushort)PlacedCreature_FieldIndex.Scale;
                case "POSITION":
                    return (ushort)PlacedCreature_FieldIndex.Position;
                case "ROTATION":
                    return (ushort)PlacedCreature_FieldIndex.Rotation;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                case PlacedCreature_FieldIndex.Owner:
                case PlacedCreature_FieldIndex.FactionRank:
                case PlacedCreature_FieldIndex.GlobalVariable:
                case PlacedCreature_FieldIndex.EnableParent:
                case PlacedCreature_FieldIndex.RagdollData:
                case PlacedCreature_FieldIndex.Scale:
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.EnableParent:
                    return true;
                case PlacedCreature_FieldIndex.Base:
                case PlacedCreature_FieldIndex.Owner:
                case PlacedCreature_FieldIndex.FactionRank:
                case PlacedCreature_FieldIndex.GlobalVariable:
                case PlacedCreature_FieldIndex.RagdollData:
                case PlacedCreature_FieldIndex.Scale:
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                case PlacedCreature_FieldIndex.Owner:
                case PlacedCreature_FieldIndex.FactionRank:
                case PlacedCreature_FieldIndex.GlobalVariable:
                case PlacedCreature_FieldIndex.EnableParent:
                case PlacedCreature_FieldIndex.RagdollData:
                case PlacedCreature_FieldIndex.Scale:
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    return "Base";
                case PlacedCreature_FieldIndex.Owner:
                    return "Owner";
                case PlacedCreature_FieldIndex.FactionRank:
                    return "FactionRank";
                case PlacedCreature_FieldIndex.GlobalVariable:
                    return "GlobalVariable";
                case PlacedCreature_FieldIndex.EnableParent:
                    return "EnableParent";
                case PlacedCreature_FieldIndex.RagdollData:
                    return "RagdollData";
                case PlacedCreature_FieldIndex.Scale:
                    return "Scale";
                case PlacedCreature_FieldIndex.Position:
                    return "Position";
                case PlacedCreature_FieldIndex.Rotation:
                    return "Rotation";
                default:
                    return Placed_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                case PlacedCreature_FieldIndex.Owner:
                case PlacedCreature_FieldIndex.FactionRank:
                case PlacedCreature_FieldIndex.GlobalVariable:
                case PlacedCreature_FieldIndex.EnableParent:
                case PlacedCreature_FieldIndex.RagdollData:
                case PlacedCreature_FieldIndex.Scale:
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                case PlacedCreature_FieldIndex.Owner:
                case PlacedCreature_FieldIndex.FactionRank:
                case PlacedCreature_FieldIndex.GlobalVariable:
                case PlacedCreature_FieldIndex.EnableParent:
                case PlacedCreature_FieldIndex.RagdollData:
                case PlacedCreature_FieldIndex.Scale:
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    return typeof(FormIDSetLink<Creature>);
                case PlacedCreature_FieldIndex.Owner:
                    return typeof(FormIDSetLink<Faction>);
                case PlacedCreature_FieldIndex.FactionRank:
                    return typeof(Int32);
                case PlacedCreature_FieldIndex.GlobalVariable:
                    return typeof(FormIDSetLink<Global>);
                case PlacedCreature_FieldIndex.EnableParent:
                    return typeof(EnableParent);
                case PlacedCreature_FieldIndex.RagdollData:
                    return typeof(Byte[]);
                case PlacedCreature_FieldIndex.Scale:
                    return typeof(Single);
                case PlacedCreature_FieldIndex.Position:
                    return typeof(P3Float);
                case PlacedCreature_FieldIndex.Rotation:
                    return typeof(P3Float);
                default:
                    return Placed_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType XESP_HEADER = new RecordType("XESP");
        public static readonly RecordType XRGD_HEADER = new RecordType("XRGD");
        public static readonly RecordType XSCL_HEADER = new RecordType("XSCL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ACRE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 7;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class PlacedCreatureCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IPlacedCreature item,
            IPlacedCreatureGetter rhs,
            IPlacedCreatureGetter def,
            ErrorMaskBuilder errorMask,
            PlacedCreature_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            PlacedCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Base ?? true)
            {
                errorMask.PushIndex((int)PlacedCreature_FieldIndex.Base);
                try
                {
                    item.Base_Property.SetToWithDefault(
                        rhs: rhs.Base_Property,
                        def: def?.Base_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Owner ?? true)
            {
                errorMask.PushIndex((int)PlacedCreature_FieldIndex.Owner);
                try
                {
                    item.Owner_Property.SetToWithDefault(
                        rhs: rhs.Owner_Property,
                        def: def?.Owner_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FactionRank ?? true)
            {
                errorMask.PushIndex((int)PlacedCreature_FieldIndex.FactionRank);
                try
                {
                    item.FactionRank_Property.SetToWithDefault(
                        rhs: rhs.FactionRank_Property,
                        def: def?.FactionRank_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.GlobalVariable ?? true)
            {
                errorMask.PushIndex((int)PlacedCreature_FieldIndex.GlobalVariable);
                try
                {
                    item.GlobalVariable_Property.SetToWithDefault(
                        rhs: rhs.GlobalVariable_Property,
                        def: def?.GlobalVariable_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.EnableParent.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)PlacedCreature_FieldIndex.EnableParent);
                try
                {
                    item.EnableParent_Property.SetToWithDefault(
                        rhs.EnableParent_Property,
                        def?.EnableParent_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.EnableParent.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    EnableParentCommon.CopyFieldsFrom(
                                        item: item.EnableParent,
                                        rhs: rhs.EnableParent,
                                        def: def?.EnableParent,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.EnableParent.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(EnableParent);
                                    return EnableParent.Copy(
                                        r,
                                        copyMask?.EnableParent?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.EnableParent?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.RagdollData ?? true)
            {
                errorMask.PushIndex((int)PlacedCreature_FieldIndex.RagdollData);
                try
                {
                    item.RagdollData_Property.SetToWithDefault(
                        rhs: rhs.RagdollData_Property,
                        def: def?.RagdollData_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Scale ?? true)
            {
                errorMask.PushIndex((int)PlacedCreature_FieldIndex.Scale);
                try
                {
                    item.Scale_Property.SetToWithDefault(
                        rhs: rhs.Scale_Property,
                        def: def?.Scale_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Position ?? true)
            {
                errorMask.PushIndex((int)PlacedCreature_FieldIndex.Position);
                try
                {
                    item.Position_Property.Set(
                        value: rhs.Position,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Rotation ?? true)
            {
                errorMask.PushIndex((int)PlacedCreature_FieldIndex.Rotation);
                try
                {
                    item.Rotation_Property.Set(
                        value: rhs.Rotation,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IPlacedCreature obj,
            NotifyingFireParameters cmds = null)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case PlacedCreature_FieldIndex.Base:
                    obj.Base_Property.HasBeenSet = on;
                    break;
                case PlacedCreature_FieldIndex.Owner:
                    obj.Owner_Property.HasBeenSet = on;
                    break;
                case PlacedCreature_FieldIndex.FactionRank:
                    obj.FactionRank_Property.HasBeenSet = on;
                    break;
                case PlacedCreature_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.HasBeenSet = on;
                    break;
                case PlacedCreature_FieldIndex.EnableParent:
                    obj.EnableParent_Property.HasBeenSet = on;
                    break;
                case PlacedCreature_FieldIndex.RagdollData:
                    obj.RagdollData_Property.HasBeenSet = on;
                    break;
                case PlacedCreature_FieldIndex.Scale:
                    obj.Scale_Property.HasBeenSet = on;
                    break;
                default:
                    PlacedCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IPlacedCreature obj,
            NotifyingUnsetParameters cmds = null)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    obj.Base_Property.Unset(cmds);
                    break;
                case PlacedCreature_FieldIndex.Owner:
                    obj.Owner_Property.Unset(cmds);
                    break;
                case PlacedCreature_FieldIndex.FactionRank:
                    obj.FactionRank_Property.Unset(cmds);
                    break;
                case PlacedCreature_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.Unset(cmds);
                    break;
                case PlacedCreature_FieldIndex.EnableParent:
                    obj.EnableParent_Property.Unset(cmds);
                    break;
                case PlacedCreature_FieldIndex.RagdollData:
                    obj.RagdollData_Property.Unset(cmds);
                    break;
                case PlacedCreature_FieldIndex.Scale:
                    obj.Scale_Property.Unset(cmds);
                    break;
                case PlacedCreature_FieldIndex.Position:
                    obj.Position = default(P3Float);
                    break;
                case PlacedCreature_FieldIndex.Rotation:
                    obj.Rotation = default(P3Float);
                    break;
                default:
                    PlacedCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IPlacedCreature obj)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Position:
                case PlacedCreature_FieldIndex.Rotation:
                    return true;
                case PlacedCreature_FieldIndex.Base:
                    return obj.Base_Property.HasBeenSet;
                case PlacedCreature_FieldIndex.Owner:
                    return obj.Owner_Property.HasBeenSet;
                case PlacedCreature_FieldIndex.FactionRank:
                    return obj.FactionRank_Property.HasBeenSet;
                case PlacedCreature_FieldIndex.GlobalVariable:
                    return obj.GlobalVariable_Property.HasBeenSet;
                case PlacedCreature_FieldIndex.EnableParent:
                    return obj.EnableParent_Property.HasBeenSet;
                case PlacedCreature_FieldIndex.RagdollData:
                    return obj.RagdollData_Property.HasBeenSet;
                case PlacedCreature_FieldIndex.Scale:
                    return obj.Scale_Property.HasBeenSet;
                default:
                    return PlacedCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IPlacedCreatureGetter obj)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    return obj.Base;
                case PlacedCreature_FieldIndex.Owner:
                    return obj.Owner;
                case PlacedCreature_FieldIndex.FactionRank:
                    return obj.FactionRank;
                case PlacedCreature_FieldIndex.GlobalVariable:
                    return obj.GlobalVariable;
                case PlacedCreature_FieldIndex.EnableParent:
                    return obj.EnableParent;
                case PlacedCreature_FieldIndex.RagdollData:
                    return obj.RagdollData;
                case PlacedCreature_FieldIndex.Scale:
                    return obj.Scale;
                case PlacedCreature_FieldIndex.Position:
                    return obj.Position;
                case PlacedCreature_FieldIndex.Rotation:
                    return obj.Rotation;
                default:
                    return PlacedCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IPlacedCreature item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Base_Property.Unset(cmds.ToUnsetParams());
            item.Owner_Property.Unset(cmds.ToUnsetParams());
            item.FactionRank_Property.Unset(cmds.ToUnsetParams());
            item.GlobalVariable_Property.Unset(cmds.ToUnsetParams());
            item.EnableParent_Property.Unset(cmds.ToUnsetParams());
            item.RagdollData_Property.Unset(cmds.ToUnsetParams());
            item.Scale_Property.Unset(cmds.ToUnsetParams());
            item.Position = default(P3Float);
            item.Rotation = default(P3Float);
        }

        public static PlacedCreature_Mask<bool> GetEqualsMask(
            this IPlacedCreatureGetter item,
            IPlacedCreatureGetter rhs)
        {
            var ret = new PlacedCreature_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IPlacedCreatureGetter item,
            IPlacedCreatureGetter rhs,
            PlacedCreature_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Base = item.Base_Property.Equals(rhs.Base_Property, (l, r) => l == r);
            ret.Owner = item.Owner_Property.Equals(rhs.Owner_Property, (l, r) => l == r);
            ret.FactionRank = item.FactionRank_Property.Equals(rhs.FactionRank_Property, (l, r) => l == r);
            ret.GlobalVariable = item.GlobalVariable_Property.Equals(rhs.GlobalVariable_Property, (l, r) => l == r);
            ret.EnableParent = item.EnableParent_Property.LoquiEqualsHelper(rhs.EnableParent_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.RagdollData = item.RagdollData_Property.Equals(rhs.RagdollData_Property, (l, r) => l.EqualsFast(r));
            ret.Scale = item.Scale_Property.Equals(rhs.Scale_Property, (l, r) => l == r);
            ret.Position = item.Position == rhs.Position;
            ret.Rotation = item.Rotation == rhs.Rotation;
            PlacedCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IPlacedCreatureGetter item,
            string name = null,
            PlacedCreature_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IPlacedCreatureGetter item,
            FileGeneration fg,
            string name = null,
            PlacedCreature_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(PlacedCreature)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(PlacedCreature)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Base ?? true)
                {
                    fg.AppendLine($"Base => {item.Base_Property}");
                }
                if (printMask?.Owner ?? true)
                {
                    fg.AppendLine($"Owner => {item.Owner_Property}");
                }
                if (printMask?.FactionRank ?? true)
                {
                    fg.AppendLine($"FactionRank => {item.FactionRank}");
                }
                if (printMask?.GlobalVariable ?? true)
                {
                    fg.AppendLine($"GlobalVariable => {item.GlobalVariable_Property}");
                }
                if (printMask?.EnableParent?.Overall ?? true)
                {
                    item.EnableParent?.ToString(fg, "EnableParent");
                }
                if (printMask?.RagdollData ?? true)
                {
                    fg.AppendLine($"RagdollData => {item.RagdollData}");
                }
                if (printMask?.Scale ?? true)
                {
                    fg.AppendLine($"Scale => {item.Scale}");
                }
                if (printMask?.Position ?? true)
                {
                    fg.AppendLine($"Position => {item.Position}");
                }
                if (printMask?.Rotation ?? true)
                {
                    fg.AppendLine($"Rotation => {item.Rotation}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IPlacedCreatureGetter item,
            PlacedCreature_Mask<bool?> checkMask)
        {
            if (checkMask.Base.HasValue && checkMask.Base.Value != item.Base_Property.HasBeenSet) return false;
            if (checkMask.Owner.HasValue && checkMask.Owner.Value != item.Owner_Property.HasBeenSet) return false;
            if (checkMask.FactionRank.HasValue && checkMask.FactionRank.Value != item.FactionRank_Property.HasBeenSet) return false;
            if (checkMask.GlobalVariable.HasValue && checkMask.GlobalVariable.Value != item.GlobalVariable_Property.HasBeenSet) return false;
            if (checkMask.EnableParent.Overall.HasValue && checkMask.EnableParent.Overall.Value != item.EnableParent_Property.HasBeenSet) return false;
            if (checkMask.EnableParent.Specific != null && (item.EnableParent == null || !item.EnableParent.HasBeenSet(checkMask.EnableParent.Specific))) return false;
            if (checkMask.RagdollData.HasValue && checkMask.RagdollData.Value != item.RagdollData_Property.HasBeenSet) return false;
            if (checkMask.Scale.HasValue && checkMask.Scale.Value != item.Scale_Property.HasBeenSet) return false;
            return true;
        }

        public static PlacedCreature_Mask<bool> GetHasBeenSetMask(IPlacedCreatureGetter item)
        {
            var ret = new PlacedCreature_Mask<bool>();
            ret.Base = item.Base_Property.HasBeenSet;
            ret.Owner = item.Owner_Property.HasBeenSet;
            ret.FactionRank = item.FactionRank_Property.HasBeenSet;
            ret.GlobalVariable = item.GlobalVariable_Property.HasBeenSet;
            ret.EnableParent = new MaskItem<bool, EnableParent_Mask<bool>>(item.EnableParent_Property.HasBeenSet, EnableParentCommon.GetHasBeenSetMask(item.EnableParent));
            ret.RagdollData = item.RagdollData_Property.HasBeenSet;
            ret.Scale = item.Scale_Property.HasBeenSet;
            ret.Position = true;
            ret.Rotation = true;
            return ret;
        }

        public static PlacedCreature_FieldIndex? ConvertFieldIndex(Placed_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static PlacedCreature_FieldIndex ConvertFieldIndex(Placed_FieldIndex index)
        {
            switch (index)
            {
                case Placed_FieldIndex.MajorRecordFlags:
                    return (PlacedCreature_FieldIndex)((int)index);
                case Placed_FieldIndex.FormID:
                    return (PlacedCreature_FieldIndex)((int)index);
                case Placed_FieldIndex.Version:
                    return (PlacedCreature_FieldIndex)((int)index);
                case Placed_FieldIndex.EditorID:
                    return (PlacedCreature_FieldIndex)((int)index);
                case Placed_FieldIndex.RecordType:
                    return (PlacedCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static PlacedCreature_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static PlacedCreature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (PlacedCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (PlacedCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PlacedCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (PlacedCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IPlacedCreatureGetter item,
            bool doMasks,
            out PlacedCreature_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = PlacedCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IPlacedCreatureGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PlacedCreature");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PlacedCreature");
            }
            if (item.Base_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Base),
                    item: item.Base?.FormID,
                    fieldIndex: (int)PlacedCreature_FieldIndex.Base,
                    errorMask: errorMask);
            }
            if (item.Owner_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Owner),
                    item: item.Owner?.FormID,
                    fieldIndex: (int)PlacedCreature_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if (item.FactionRank_Property.HasBeenSet)
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FactionRank),
                    item: item.FactionRank_Property,
                    fieldIndex: (int)PlacedCreature_FieldIndex.FactionRank,
                    errorMask: errorMask);
            }
            if (item.GlobalVariable_Property.HasBeenSet)
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.GlobalVariable),
                    item: item.GlobalVariable?.FormID,
                    fieldIndex: (int)PlacedCreature_FieldIndex.GlobalVariable,
                    errorMask: errorMask);
            }
            if (item.EnableParent_Property.HasBeenSet)
            {
                LoquiXmlTranslation<EnableParent>.Instance.Write(
                    node: elem,
                    item: item.EnableParent_Property,
                    name: nameof(item.EnableParent),
                    fieldIndex: (int)PlacedCreature_FieldIndex.EnableParent,
                    errorMask: errorMask);
            }
            if (item.RagdollData_Property.HasBeenSet)
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RagdollData),
                    item: item.RagdollData_Property,
                    fieldIndex: (int)PlacedCreature_FieldIndex.RagdollData,
                    errorMask: errorMask);
            }
            if (item.Scale_Property.HasBeenSet)
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Scale),
                    item: item.Scale_Property,
                    fieldIndex: (int)PlacedCreature_FieldIndex.Scale,
                    errorMask: errorMask);
            }
            P3FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Position),
                item: item.Position_Property,
                fieldIndex: (int)PlacedCreature_FieldIndex.Position,
                errorMask: errorMask);
            P3FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Rotation),
                item: item.Rotation_Property,
                fieldIndex: (int)PlacedCreature_FieldIndex.Rotation,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            PlacedCreature item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out PlacedCreature_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = PlacedCreature_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            PlacedCreature item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: PlacedCreature_Registration.ACRE_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            PlacedCreature item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Base_Property,
                fieldIndex: (int)PlacedCreature_FieldIndex.Base,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.NAME_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Owner_Property,
                fieldIndex: (int)PlacedCreature_FieldIndex.Owner,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.XOWN_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FactionRank_Property,
                fieldIndex: (int)PlacedCreature_FieldIndex.FactionRank,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.XRNK_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GlobalVariable_Property,
                fieldIndex: (int)PlacedCreature_FieldIndex.GlobalVariable,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.XGLB_HEADER),
                nullable: false);
            LoquiBinaryTranslation<EnableParent>.Instance.Write(
                writer: writer,
                item: item.EnableParent_Property,
                fieldIndex: (int)PlacedCreature_FieldIndex.EnableParent,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RagdollData_Property,
                fieldIndex: (int)PlacedCreature_FieldIndex.RagdollData,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.XRGD_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Scale_Property,
                fieldIndex: (int)PlacedCreature_FieldIndex.Scale,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedCreature_Registration.XSCL_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, PlacedCreature_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Position_Property,
                    fieldIndex: (int)PlacedCreature_FieldIndex.Position,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Rotation_Property,
                    fieldIndex: (int)PlacedCreature_FieldIndex.Rotation,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class PlacedCreature_Mask<T> : Placed_Mask<T>, IMask<T>, IEquatable<PlacedCreature_Mask<T>>
    {
        #region Ctors
        public PlacedCreature_Mask()
        {
        }

        public PlacedCreature_Mask(T initialValue)
        {
            this.Base = initialValue;
            this.Owner = initialValue;
            this.FactionRank = initialValue;
            this.GlobalVariable = initialValue;
            this.EnableParent = new MaskItem<T, EnableParent_Mask<T>>(initialValue, new EnableParent_Mask<T>(initialValue));
            this.RagdollData = initialValue;
            this.Scale = initialValue;
            this.Position = initialValue;
            this.Rotation = initialValue;
        }
        #endregion

        #region Members
        public T Base;
        public T Owner;
        public T FactionRank;
        public T GlobalVariable;
        public MaskItem<T, EnableParent_Mask<T>> EnableParent { get; set; }
        public T RagdollData;
        public T Scale;
        public T Position;
        public T Rotation;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PlacedCreature_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PlacedCreature_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Base, rhs.Base)) return false;
            if (!object.Equals(this.Owner, rhs.Owner)) return false;
            if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
            if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
            if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
            if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
            if (!object.Equals(this.Scale, rhs.Scale)) return false;
            if (!object.Equals(this.Position, rhs.Position)) return false;
            if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Base?.GetHashCode());
            ret = ret.CombineHashCode(this.Owner?.GetHashCode());
            ret = ret.CombineHashCode(this.FactionRank?.GetHashCode());
            ret = ret.CombineHashCode(this.GlobalVariable?.GetHashCode());
            ret = ret.CombineHashCode(this.EnableParent?.GetHashCode());
            ret = ret.CombineHashCode(this.RagdollData?.GetHashCode());
            ret = ret.CombineHashCode(this.Scale?.GetHashCode());
            ret = ret.CombineHashCode(this.Position?.GetHashCode());
            ret = ret.CombineHashCode(this.Rotation?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Base)) return false;
            if (!eval(this.Owner)) return false;
            if (!eval(this.FactionRank)) return false;
            if (!eval(this.GlobalVariable)) return false;
            if (EnableParent != null)
            {
                if (!eval(this.EnableParent.Overall)) return false;
                if (this.EnableParent.Specific != null && !this.EnableParent.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.RagdollData)) return false;
            if (!eval(this.Scale)) return false;
            if (!eval(this.Position)) return false;
            if (!eval(this.Rotation)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new PlacedCreature_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PlacedCreature_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PlacedCreature_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Base = eval(this.Base);
            obj.Owner = eval(this.Owner);
            obj.FactionRank = eval(this.FactionRank);
            obj.GlobalVariable = eval(this.GlobalVariable);
            if (this.EnableParent != null)
            {
                obj.EnableParent = new MaskItem<R, EnableParent_Mask<R>>();
                obj.EnableParent.Overall = eval(this.EnableParent.Overall);
                if (this.EnableParent.Specific != null)
                {
                    obj.EnableParent.Specific = this.EnableParent.Specific.Translate(eval);
                }
            }
            obj.RagdollData = eval(this.RagdollData);
            obj.Scale = eval(this.Scale);
            obj.Position = eval(this.Position);
            obj.Rotation = eval(this.Rotation);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PlacedCreature_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PlacedCreature_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PlacedCreature_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Base ?? true)
                {
                    fg.AppendLine($"Base => {Base}");
                }
                if (printMask?.Owner ?? true)
                {
                    fg.AppendLine($"Owner => {Owner}");
                }
                if (printMask?.FactionRank ?? true)
                {
                    fg.AppendLine($"FactionRank => {FactionRank}");
                }
                if (printMask?.GlobalVariable ?? true)
                {
                    fg.AppendLine($"GlobalVariable => {GlobalVariable}");
                }
                if (printMask?.EnableParent?.Overall ?? true)
                {
                    EnableParent?.ToString(fg);
                }
                if (printMask?.RagdollData ?? true)
                {
                    fg.AppendLine($"RagdollData => {RagdollData}");
                }
                if (printMask?.Scale ?? true)
                {
                    fg.AppendLine($"Scale => {Scale}");
                }
                if (printMask?.Position ?? true)
                {
                    fg.AppendLine($"Position => {Position}");
                }
                if (printMask?.Rotation ?? true)
                {
                    fg.AppendLine($"Rotation => {Rotation}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PlacedCreature_ErrorMask : Placed_ErrorMask, IErrorMask<PlacedCreature_ErrorMask>
    {
        #region Members
        public Exception Base;
        public Exception Owner;
        public Exception FactionRank;
        public Exception GlobalVariable;
        public MaskItem<Exception, EnableParent_ErrorMask> EnableParent;
        public Exception RagdollData;
        public Exception Scale;
        public Exception Position;
        public Exception Rotation;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    return Base;
                case PlacedCreature_FieldIndex.Owner:
                    return Owner;
                case PlacedCreature_FieldIndex.FactionRank:
                    return FactionRank;
                case PlacedCreature_FieldIndex.GlobalVariable:
                    return GlobalVariable;
                case PlacedCreature_FieldIndex.EnableParent:
                    return EnableParent;
                case PlacedCreature_FieldIndex.RagdollData:
                    return RagdollData;
                case PlacedCreature_FieldIndex.Scale:
                    return Scale;
                case PlacedCreature_FieldIndex.Position:
                    return Position;
                case PlacedCreature_FieldIndex.Rotation:
                    return Rotation;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    this.Base = ex;
                    break;
                case PlacedCreature_FieldIndex.Owner:
                    this.Owner = ex;
                    break;
                case PlacedCreature_FieldIndex.FactionRank:
                    this.FactionRank = ex;
                    break;
                case PlacedCreature_FieldIndex.GlobalVariable:
                    this.GlobalVariable = ex;
                    break;
                case PlacedCreature_FieldIndex.EnableParent:
                    this.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(ex, null);
                    break;
                case PlacedCreature_FieldIndex.RagdollData:
                    this.RagdollData = ex;
                    break;
                case PlacedCreature_FieldIndex.Scale:
                    this.Scale = ex;
                    break;
                case PlacedCreature_FieldIndex.Position:
                    this.Position = ex;
                    break;
                case PlacedCreature_FieldIndex.Rotation:
                    this.Rotation = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
            switch (enu)
            {
                case PlacedCreature_FieldIndex.Base:
                    this.Base = (Exception)obj;
                    break;
                case PlacedCreature_FieldIndex.Owner:
                    this.Owner = (Exception)obj;
                    break;
                case PlacedCreature_FieldIndex.FactionRank:
                    this.FactionRank = (Exception)obj;
                    break;
                case PlacedCreature_FieldIndex.GlobalVariable:
                    this.GlobalVariable = (Exception)obj;
                    break;
                case PlacedCreature_FieldIndex.EnableParent:
                    this.EnableParent = (MaskItem<Exception, EnableParent_ErrorMask>)obj;
                    break;
                case PlacedCreature_FieldIndex.RagdollData:
                    this.RagdollData = (Exception)obj;
                    break;
                case PlacedCreature_FieldIndex.Scale:
                    this.Scale = (Exception)obj;
                    break;
                case PlacedCreature_FieldIndex.Position:
                    this.Position = (Exception)obj;
                    break;
                case PlacedCreature_FieldIndex.Rotation:
                    this.Rotation = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Base != null) return true;
            if (Owner != null) return true;
            if (FactionRank != null) return true;
            if (GlobalVariable != null) return true;
            if (EnableParent != null) return true;
            if (RagdollData != null) return true;
            if (Scale != null) return true;
            if (Position != null) return true;
            if (Rotation != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("PlacedCreature_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Base => {Base}");
            fg.AppendLine($"Owner => {Owner}");
            fg.AppendLine($"FactionRank => {FactionRank}");
            fg.AppendLine($"GlobalVariable => {GlobalVariable}");
            EnableParent?.ToString(fg);
            fg.AppendLine($"RagdollData => {RagdollData}");
            fg.AppendLine($"Scale => {Scale}");
            fg.AppendLine($"Position => {Position}");
            fg.AppendLine($"Rotation => {Rotation}");
        }
        #endregion

        #region Combine
        public PlacedCreature_ErrorMask Combine(PlacedCreature_ErrorMask rhs)
        {
            var ret = new PlacedCreature_ErrorMask();
            ret.Base = this.Base.Combine(rhs.Base);
            ret.Owner = this.Owner.Combine(rhs.Owner);
            ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
            ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
            ret.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(this.EnableParent.Overall.Combine(rhs.EnableParent.Overall), ((IErrorMask<EnableParent_ErrorMask>)this.EnableParent.Specific).Combine(rhs.EnableParent.Specific));
            ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
            ret.Scale = this.Scale.Combine(rhs.Scale);
            ret.Position = this.Position.Combine(rhs.Position);
            ret.Rotation = this.Rotation.Combine(rhs.Rotation);
            return ret;
        }
        public static PlacedCreature_ErrorMask Combine(PlacedCreature_ErrorMask lhs, PlacedCreature_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PlacedCreature_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PlacedCreature_ErrorMask();
        }
        #endregion

    }
    public class PlacedCreature_CopyMask : Placed_CopyMask
    {
        #region Members
        public bool Base;
        public bool Owner;
        public bool FactionRank;
        public bool GlobalVariable;
        public MaskItem<CopyOption, EnableParent_CopyMask> EnableParent;
        public bool RagdollData;
        public bool Scale;
        public bool Position;
        public bool Rotation;
        #endregion

    }
    #endregion




    #endregion

}
