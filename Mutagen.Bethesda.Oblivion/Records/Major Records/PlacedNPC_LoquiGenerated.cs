/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedNPC : 
        Placed,
        IPlacedNPC,
        ILoquiObject<PlacedNPC>,
        ILoquiObjectSetter,
        IPropertySupporter<Byte[]>,
        IPropertySupporter<DistantLODData>,
        IPropertySupporter<EnableParent>,
        IPropertySupporter<Single>,
        IPropertySupporter<P3Float>,
        IEquatable<PlacedNPC>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNPC_Registration.Instance;
        public new static PlacedNPC_Registration Registration => PlacedNPC_Registration.Instance;

        #region Ctor
        public PlacedNPC()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        public FormIDSetLink<NPC> Base_Property { get; } = new FormIDSetLink<NPC>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public NPC Base { get => Base_Property.Item; set => Base_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<NPC> IPlacedNPCGetter.Base_Property => this.Base_Property;
        #endregion
        #region XPCIFluff
        protected Byte[] _XPCIFluff;
        protected PropertyForwarder<PlacedNPC, Byte[]> _XPCIFluffForwarder;
        public INotifyingSetItem<Byte[]> XPCIFluff_Property => _XPCIFluffForwarder ?? (_XPCIFluffForwarder = new PropertyForwarder<PlacedNPC, Byte[]>(this, (int)PlacedNPC_FieldIndex.XPCIFluff));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] XPCIFluff
        {
            get => this._XPCIFluff;
            set => this.SetXPCIFluff(value);
        }
        protected void SetXPCIFluff(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.XPCIFluff];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(XPCIFluff, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.XPCIFluff] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = XPCIFluff;
                _XPCIFluff = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)PlacedNPC_FieldIndex.XPCIFluff,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _XPCIFluff = item;
            }
        }
        protected void UnsetXPCIFluff()
        {
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.XPCIFluff] = false;
            XPCIFluff = default(Byte[]);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IPlacedNPC.XPCIFluff_Property => this.XPCIFluff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IPlacedNPCGetter.XPCIFluff_Property => this.XPCIFluff_Property;
        #endregion
        #region FULLFluff
        protected Byte[] _FULLFluff;
        protected PropertyForwarder<PlacedNPC, Byte[]> _FULLFluffForwarder;
        public INotifyingSetItem<Byte[]> FULLFluff_Property => _FULLFluffForwarder ?? (_FULLFluffForwarder = new PropertyForwarder<PlacedNPC, Byte[]>(this, (int)PlacedNPC_FieldIndex.FULLFluff));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] FULLFluff
        {
            get => this._FULLFluff;
            set => this.SetFULLFluff(value);
        }
        protected void SetFULLFluff(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.FULLFluff];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(FULLFluff, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.FULLFluff] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = FULLFluff;
                _FULLFluff = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)PlacedNPC_FieldIndex.FULLFluff,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _FULLFluff = item;
            }
        }
        protected void UnsetFULLFluff()
        {
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.FULLFluff] = false;
            FULLFluff = default(Byte[]);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IPlacedNPC.FULLFluff_Property => this.FULLFluff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IPlacedNPCGetter.FULLFluff_Property => this.FULLFluff_Property;
        #endregion
        #region DistantLODData
        protected DistantLODData _DistantLODData;
        protected PropertyForwarder<PlacedNPC, DistantLODData> _DistantLODDataForwarder;
        public INotifyingSetItem<DistantLODData> DistantLODData_Property => _DistantLODDataForwarder ?? (_DistantLODDataForwarder = new PropertyForwarder<PlacedNPC, DistantLODData>(this, (int)PlacedNPC_FieldIndex.DistantLODData));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DistantLODData DistantLODData
        {
            get => this._DistantLODData;
            set => this.SetDistantLODData(value);
        }
        protected void SetDistantLODData(
            DistantLODData item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.DistantLODData];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(DistantLODData, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.DistantLODData] = hasBeenSet;
            }
            if (_DistantLODData_subscriptions != null)
            {
                var tmp = DistantLODData;
                _DistantLODData = item;
                _DistantLODData_subscriptions.FireSubscriptions(
                    index: (int)PlacedNPC_FieldIndex.DistantLODData,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _DistantLODData = item;
            }
        }
        protected void UnsetDistantLODData()
        {
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.DistantLODData] = false;
            DistantLODData = default(DistantLODData);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<DistantLODData> IPlacedNPC.DistantLODData_Property => this.DistantLODData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<DistantLODData> IPlacedNPCGetter.DistantLODData_Property => this.DistantLODData_Property;
        #endregion
        #region EnableParent
        protected EnableParent _EnableParent;
        protected PropertyForwarder<PlacedNPC, EnableParent> _EnableParentForwarder;
        public INotifyingSetItem<EnableParent> EnableParent_Property => _EnableParentForwarder ?? (_EnableParentForwarder = new PropertyForwarder<PlacedNPC, EnableParent>(this, (int)PlacedNPC_FieldIndex.EnableParent));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public EnableParent EnableParent
        {
            get => this._EnableParent;
            set => this.SetEnableParent(value);
        }
        protected void SetEnableParent(
            EnableParent item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.EnableParent];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(EnableParent, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.EnableParent] = hasBeenSet;
            }
            if (_EnableParent_subscriptions != null)
            {
                var tmp = EnableParent;
                _EnableParent = item;
                _EnableParent_subscriptions.FireSubscriptions(
                    index: (int)PlacedNPC_FieldIndex.EnableParent,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _EnableParent = item;
            }
        }
        protected void UnsetEnableParent()
        {
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.EnableParent] = false;
            EnableParent = default(EnableParent);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<EnableParent> IPlacedNPC.EnableParent_Property => this.EnableParent_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<EnableParent> IPlacedNPCGetter.EnableParent_Property => this.EnableParent_Property;
        #endregion
        #region MerchantContainer
        public FormIDSetLink<PlacedObject> MerchantContainer_Property { get; } = new FormIDSetLink<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PlacedObject MerchantContainer { get => MerchantContainer_Property.Item; set => MerchantContainer_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<PlacedObject> IPlacedNPCGetter.MerchantContainer_Property => this.MerchantContainer_Property;
        #endregion
        #region Horse
        public FormIDSetLink<PlacedCreature> Horse_Property { get; } = new FormIDSetLink<PlacedCreature>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PlacedCreature Horse { get => Horse_Property.Item; set => Horse_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<PlacedCreature> IPlacedNPCGetter.Horse_Property => this.Horse_Property;
        #endregion
        #region RagdollData
        protected Byte[] _RagdollData;
        protected PropertyForwarder<PlacedNPC, Byte[]> _RagdollDataForwarder;
        public INotifyingSetItem<Byte[]> RagdollData_Property => _RagdollDataForwarder ?? (_RagdollDataForwarder = new PropertyForwarder<PlacedNPC, Byte[]>(this, (int)PlacedNPC_FieldIndex.RagdollData));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] RagdollData
        {
            get => this._RagdollData;
            set => this.SetRagdollData(value);
        }
        protected void SetRagdollData(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.RagdollData];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(RagdollData, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.RagdollData] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = RagdollData;
                _RagdollData = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)PlacedNPC_FieldIndex.RagdollData,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _RagdollData = item;
            }
        }
        protected void UnsetRagdollData()
        {
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.RagdollData] = false;
            RagdollData = default(Byte[]);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IPlacedNPC.RagdollData_Property => this.RagdollData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IPlacedNPCGetter.RagdollData_Property => this.RagdollData_Property;
        #endregion
        #region Scale
        protected Single _Scale;
        protected PropertyForwarder<PlacedNPC, Single> _ScaleForwarder;
        public INotifyingSetItem<Single> Scale_Property => _ScaleForwarder ?? (_ScaleForwarder = new PropertyForwarder<PlacedNPC, Single>(this, (int)PlacedNPC_FieldIndex.Scale));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Scale
        {
            get => this._Scale;
            set => this.SetScale(value);
        }
        protected void SetScale(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Scale];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Scale == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Scale] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Scale;
                _Scale = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)PlacedNPC_FieldIndex.Scale,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Scale = item;
            }
        }
        protected void UnsetScale()
        {
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Scale] = false;
            Scale = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> IPlacedNPC.Scale_Property => this.Scale_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> IPlacedNPCGetter.Scale_Property => this.Scale_Property;
        #endregion
        #region Position
        protected P3Float _Position;
        protected PropertyForwarder<PlacedNPC, P3Float> _PositionForwarder;
        public INotifyingSetItem<P3Float> Position_Property => _PositionForwarder ?? (_PositionForwarder = new PropertyForwarder<PlacedNPC, P3Float>(this, (int)PlacedNPC_FieldIndex.Position));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P3Float Position
        {
            get => this._Position;
            set => this.SetPosition(value);
        }
        protected void SetPosition(
            P3Float item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Position];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Position == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Position] = hasBeenSet;
            }
            if (_P3Float_subscriptions != null)
            {
                var tmp = Position;
                _Position = item;
                _P3Float_subscriptions.FireSubscriptions(
                    index: (int)PlacedNPC_FieldIndex.Position,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Position = item;
            }
        }
        protected void UnsetPosition()
        {
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Position] = false;
            Position = default(P3Float);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P3Float> IPlacedNPC.Position_Property => this.Position_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P3Float> IPlacedNPCGetter.Position_Property => this.Position_Property;
        #endregion
        #region Rotation
        protected P3Float _Rotation;
        protected PropertyForwarder<PlacedNPC, P3Float> _RotationForwarder;
        public INotifyingSetItem<P3Float> Rotation_Property => _RotationForwarder ?? (_RotationForwarder = new PropertyForwarder<PlacedNPC, P3Float>(this, (int)PlacedNPC_FieldIndex.Rotation));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P3Float Rotation
        {
            get => this._Rotation;
            set => this.SetRotation(value);
        }
        protected void SetRotation(
            P3Float item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Rotation];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Rotation == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Rotation] = hasBeenSet;
            }
            if (_P3Float_subscriptions != null)
            {
                var tmp = Rotation;
                _Rotation = item;
                _P3Float_subscriptions.FireSubscriptions(
                    index: (int)PlacedNPC_FieldIndex.Rotation,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Rotation = item;
            }
        }
        protected void UnsetRotation()
        {
            _hasBeenSetTracker[(int)PlacedNPC_FieldIndex.Rotation] = false;
            Rotation = default(P3Float);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P3Float> IPlacedNPC.Rotation_Property => this.Rotation_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P3Float> IPlacedNPCGetter.Rotation_Property => this.Rotation_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => PlacedNPCCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => PlacedNPCCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => PlacedNPCCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            PlacedNPCCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<PlacedNPC>.GetEqualsMask(PlacedNPC rhs) => PlacedNPCCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IPlacedNPCGetter>.GetEqualsMask(IPlacedNPCGetter rhs) => PlacedNPCCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return PlacedNPCCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            PlacedNPC_Mask<bool> printMask = null)
        {
            return PlacedNPCCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            PlacedNPCCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new PlacedNPC_Mask<bool> GetHasBeenSetMask()
        {
            return PlacedNPCCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is PlacedNPC rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PlacedNPC rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Base_Property.HasBeenSet != rhs.Base_Property.HasBeenSet) return false;
            if (Base_Property.HasBeenSet)
            {
                if (!this.Base_Property.Equals(rhs.Base_Property)) return false;
            }
            if (XPCIFluff_Property.HasBeenSet != rhs.XPCIFluff_Property.HasBeenSet) return false;
            if (XPCIFluff_Property.HasBeenSet)
            {
                if (!this.XPCIFluff.EqualsFast(rhs.XPCIFluff)) return false;
            }
            if (FULLFluff_Property.HasBeenSet != rhs.FULLFluff_Property.HasBeenSet) return false;
            if (FULLFluff_Property.HasBeenSet)
            {
                if (!this.FULLFluff.EqualsFast(rhs.FULLFluff)) return false;
            }
            if (DistantLODData_Property.HasBeenSet != rhs.DistantLODData_Property.HasBeenSet) return false;
            if (DistantLODData_Property.HasBeenSet)
            {
                if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
            }
            if (EnableParent_Property.HasBeenSet != rhs.EnableParent_Property.HasBeenSet) return false;
            if (EnableParent_Property.HasBeenSet)
            {
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
            }
            if (MerchantContainer_Property.HasBeenSet != rhs.MerchantContainer_Property.HasBeenSet) return false;
            if (MerchantContainer_Property.HasBeenSet)
            {
                if (!this.MerchantContainer_Property.Equals(rhs.MerchantContainer_Property)) return false;
            }
            if (Horse_Property.HasBeenSet != rhs.Horse_Property.HasBeenSet) return false;
            if (Horse_Property.HasBeenSet)
            {
                if (!this.Horse_Property.Equals(rhs.Horse_Property)) return false;
            }
            if (RagdollData_Property.HasBeenSet != rhs.RagdollData_Property.HasBeenSet) return false;
            if (RagdollData_Property.HasBeenSet)
            {
                if (!this.RagdollData.EqualsFast(rhs.RagdollData)) return false;
            }
            if (Scale_Property.HasBeenSet != rhs.Scale_Property.HasBeenSet) return false;
            if (Scale_Property.HasBeenSet)
            {
                if (!this.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if (this.Position != rhs.Position) return false;
            if (this.Rotation != rhs.Rotation) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Base_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Base).CombineHashCode(ret);
            }
            if (XPCIFluff_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(XPCIFluff).CombineHashCode(ret);
            }
            if (FULLFluff_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FULLFluff).CombineHashCode(ret);
            }
            if (DistantLODData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DistantLODData).CombineHashCode(ret);
            }
            if (EnableParent_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnableParent).CombineHashCode(ret);
            }
            if (MerchantContainer_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MerchantContainer).CombineHashCode(ret);
            }
            if (Horse_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Horse).CombineHashCode(ret);
            }
            if (RagdollData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RagdollData).CombineHashCode(ret);
            }
            if (Scale_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Scale).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Position).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Rotation).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static PlacedNPC Create_Xml(
            XElement root,
            PlacedNPC_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PlacedNPC Create_Xml(
            XElement root,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true,
            PlacedNPC_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static PlacedNPC Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new PlacedNPC();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PlacedNPC Create_Xml(
            string path,
            PlacedNPC_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static PlacedNPC Create_Xml(
            string path,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedNPC Create_Xml(
            Stream stream,
            PlacedNPC_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static PlacedNPC Create_Xml(
            Stream stream,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<PlacedNPC>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out Placed_ErrorMask errorMask,
            Placed_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true,
            PlacedNPC_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out Placed_ErrorMask errorMask,
            bool doMasks = true,
            Placed_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            PlacedNPCCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            PlacedNPC item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Base":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        property: item.Base_Property,
                        fieldIndex: (int)PlacedNPC_FieldIndex.Base,
                        errorMask: errorMask);
                    break;
                case "XPCIFluff":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.XPCIFluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] XPCIFluffParse,
                            errorMask: errorMask))
                        {
                            item.XPCIFluff = XPCIFluffParse;
                        }
                        else
                        {
                            item.UnsetXPCIFluff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FULLFluff":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.FULLFluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] FULLFluffParse,
                            errorMask: errorMask))
                        {
                            item.FULLFluff = FULLFluffParse;
                        }
                        else
                        {
                            item.UnsetFULLFluff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DistantLODData":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.DistantLODData);
                        if (LoquiXmlTranslation<DistantLODData>.Instance.Parse(
                            root: root,
                            item: out DistantLODData DistantLODDataParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedNPC_FieldIndex.DistantLODData)))
                        {
                            item.DistantLODData = DistantLODDataParse;
                        }
                        else
                        {
                            item.UnsetDistantLODData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnableParent":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.EnableParent);
                        if (LoquiXmlTranslation<EnableParent>.Instance.Parse(
                            root: root,
                            item: out EnableParent EnableParentParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedNPC_FieldIndex.EnableParent)))
                        {
                            item.EnableParent = EnableParentParse;
                        }
                        else
                        {
                            item.UnsetEnableParent();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MerchantContainer":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        property: item.MerchantContainer_Property,
                        fieldIndex: (int)PlacedNPC_FieldIndex.MerchantContainer,
                        errorMask: errorMask);
                    break;
                case "Horse":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        property: item.Horse_Property,
                        fieldIndex: (int)PlacedNPC_FieldIndex.Horse,
                        errorMask: errorMask);
                    break;
                case "RagdollData":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.RagdollData);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] RagdollDataParse,
                            errorMask: errorMask))
                        {
                            item.RagdollData = RagdollDataParse;
                        }
                        else
                        {
                            item.UnsetRagdollData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scale":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Scale);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single ScaleParse,
                            errorMask: errorMask))
                        {
                            item.Scale = ScaleParse;
                        }
                        else
                        {
                            item.UnsetScale();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Position":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Position);
                        if (P3FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out P3Float PositionParse,
                            errorMask: errorMask))
                        {
                            item.Position = PositionParse;
                        }
                        else
                        {
                            item.UnsetPosition();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Rotation":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Rotation);
                        if (P3FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out P3Float RotationParse,
                            errorMask: errorMask))
                        {
                            item.Rotation = RotationParse;
                        }
                        else
                        {
                            item.UnsetRotation();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    Placed.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter Byte[]
        Byte[] IPropertySupporter<Byte[]>.Get(int index)
        {
            return GetByteArr(index: index);
        }

        protected override Byte[] GetByteArr(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.XPCIFluff:
                    return XPCIFluff;
                case PlacedNPC_FieldIndex.FULLFluff:
                    return FULLFluff;
                case PlacedNPC_FieldIndex.RagdollData:
                    return RagdollData;
                default:
                    return base.GetByteArr(index: index);
            }
        }

        void IPropertySupporter<Byte[]>.Set(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByteArr(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetByteArr(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.XPCIFluff:
                    SetXPCIFluff(item, hasBeenSet, cmds);
                    break;
                case PlacedNPC_FieldIndex.FULLFluff:
                    SetFULLFluff(item, hasBeenSet, cmds);
                    break;
                case PlacedNPC_FieldIndex.RagdollData:
                    SetRagdollData(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetByteArr(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<Byte[]>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Byte[]>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte[]>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByteArr(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetByteArr(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.XPCIFluff:
                    _hasBeenSetTracker[index] = false;
                    XPCIFluff = default(Byte[]);
                    break;
                case PlacedNPC_FieldIndex.FULLFluff:
                    _hasBeenSetTracker[index] = false;
                    FULLFluff = default(Byte[]);
                    break;
                case PlacedNPC_FieldIndex.RagdollData:
                    _hasBeenSetTracker[index] = false;
                    RagdollData = default(Byte[]);
                    break;
                default:
                    base.UnsetByteArr(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte[]> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ByteArr_subscriptions == null)
            {
                _ByteArr_subscriptions = new ObjectCentralizationSubscriptions<Byte[]>();
            }
            _ByteArr_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Unsubscribe(
            int index,
            object owner)
        {
            _ByteArr_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte[]>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte[] IPropertySupporter<Byte[]>.DefaultValue(int index)
        {
            return DefaultValueByteArr(index: index);
        }

        protected override Byte[] DefaultValueByteArr(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.RagdollData:
                    return default(Byte[]);
                default:
                    return base.DefaultValueByteArr(index: index);
            }
        }

        #endregion

        #region IPropertySupporter DistantLODData
        protected ObjectCentralizationSubscriptions<DistantLODData> _DistantLODData_subscriptions;
        DistantLODData IPropertySupporter<DistantLODData>.Get(int index)
        {
            return GetDistantLODData(index: index);
        }

        protected DistantLODData GetDistantLODData(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.DistantLODData:
                    return DistantLODData;
                default:
                    throw new ArgumentException($"Unknown index for field type DistantLODData: {index}");
            }
        }

        void IPropertySupporter<DistantLODData>.Set(
            int index,
            DistantLODData item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetDistantLODData(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetDistantLODData(
            int index,
            DistantLODData item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.DistantLODData:
                    SetDistantLODData(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type DistantLODData: {index}");
            }
        }

        bool IPropertySupporter<DistantLODData>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<DistantLODData>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<DistantLODData>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetDistantLODData(
                index: index,
                cmds: cmds);
        }

        protected void UnsetDistantLODData(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.DistantLODData:
                    _hasBeenSetTracker[index] = false;
                    DistantLODData = default(DistantLODData);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type DistantLODData: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<DistantLODData>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<DistantLODData> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_DistantLODData_subscriptions == null)
            {
                _DistantLODData_subscriptions = new ObjectCentralizationSubscriptions<DistantLODData>();
            }
            _DistantLODData_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<DistantLODData>.Unsubscribe(
            int index,
            object owner)
        {
            _DistantLODData_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<DistantLODData>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        DistantLODData IPropertySupporter<DistantLODData>.DefaultValue(int index)
        {
            return DefaultValueDistantLODData(index: index);
        }

        protected DistantLODData DefaultValueDistantLODData(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.DistantLODData:
                    return default(DistantLODData);
                default:
                    throw new ArgumentException($"Unknown index for field type DistantLODData: {index}");
            }
        }

        #endregion

        #region IPropertySupporter EnableParent
        protected ObjectCentralizationSubscriptions<EnableParent> _EnableParent_subscriptions;
        EnableParent IPropertySupporter<EnableParent>.Get(int index)
        {
            return GetEnableParent(index: index);
        }

        protected EnableParent GetEnableParent(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.EnableParent:
                    return EnableParent;
                default:
                    throw new ArgumentException($"Unknown index for field type EnableParent: {index}");
            }
        }

        void IPropertySupporter<EnableParent>.Set(
            int index,
            EnableParent item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetEnableParent(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetEnableParent(
            int index,
            EnableParent item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.EnableParent:
                    SetEnableParent(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type EnableParent: {index}");
            }
        }

        bool IPropertySupporter<EnableParent>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<EnableParent>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<EnableParent>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetEnableParent(
                index: index,
                cmds: cmds);
        }

        protected void UnsetEnableParent(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.EnableParent:
                    _hasBeenSetTracker[index] = false;
                    EnableParent = default(EnableParent);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type EnableParent: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<EnableParent>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<EnableParent> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_EnableParent_subscriptions == null)
            {
                _EnableParent_subscriptions = new ObjectCentralizationSubscriptions<EnableParent>();
            }
            _EnableParent_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<EnableParent>.Unsubscribe(
            int index,
            object owner)
        {
            _EnableParent_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<EnableParent>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        EnableParent IPropertySupporter<EnableParent>.DefaultValue(int index)
        {
            return DefaultValueEnableParent(index: index);
        }

        protected EnableParent DefaultValueEnableParent(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.EnableParent:
                    return default(EnableParent);
                default:
                    throw new ArgumentException($"Unknown index for field type EnableParent: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.Scale:
                    return Scale;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.Scale:
                    SetScale(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.Scale:
                    _hasBeenSetTracker[index] = false;
                    Scale = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.Scale:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter P3Float
        protected ObjectCentralizationSubscriptions<P3Float> _P3Float_subscriptions;
        P3Float IPropertySupporter<P3Float>.Get(int index)
        {
            return GetP3Float(index: index);
        }

        protected P3Float GetP3Float(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.Position:
                    return Position;
                case PlacedNPC_FieldIndex.Rotation:
                    return Rotation;
                default:
                    throw new ArgumentException($"Unknown index for field type P3Float: {index}");
            }
        }

        void IPropertySupporter<P3Float>.Set(
            int index,
            P3Float item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetP3Float(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetP3Float(
            int index,
            P3Float item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.Position:
                    SetPosition(item, hasBeenSet, cmds);
                    break;
                case PlacedNPC_FieldIndex.Rotation:
                    SetRotation(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type P3Float: {index}");
            }
        }

        bool IPropertySupporter<P3Float>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<P3Float>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<P3Float>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetP3Float(
                index: index,
                cmds: cmds);
        }

        protected void UnsetP3Float(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.Position:
                    _hasBeenSetTracker[index] = false;
                    Position = default(P3Float);
                    break;
                case PlacedNPC_FieldIndex.Rotation:
                    _hasBeenSetTracker[index] = false;
                    Rotation = default(P3Float);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type P3Float: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<P3Float>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<P3Float> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_P3Float_subscriptions == null)
            {
                _P3Float_subscriptions = new ObjectCentralizationSubscriptions<P3Float>();
            }
            _P3Float_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<P3Float>.Unsubscribe(
            int index,
            object owner)
        {
            _P3Float_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<P3Float>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        P3Float IPropertySupporter<P3Float>.DefaultValue(int index)
        {
            return DefaultValueP3Float(index: index);
        }

        protected P3Float DefaultValueP3Float(int index)
        {
            switch ((PlacedNPC_FieldIndex)index)
            {
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                    return default(P3Float);
                default:
                    throw new ArgumentException($"Unknown index for field type P3Float: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PlacedNPC_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Base_Property;
            if (EnableParent != null)
            {
                foreach (var item in EnableParent.Links)
                {
                    yield return item;
                }
            }
            yield return MerchantContainer_Property;
            yield return Horse_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static PlacedNPC Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PlacedNPC Create_Binary(
            MutagenFrame frame,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static PlacedNPC Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<PlacedNPC>(
                record: new PlacedNPC(),
                frame: frame,
                errorMask: errorMask,
                recType: PlacedNPC_Registration.ACHR_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static PlacedNPC Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static PlacedNPC Create_Binary(
            string path,
            out PlacedNPC_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static PlacedNPC Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static PlacedNPC Create_Binary(
            Stream stream,
            out PlacedNPC_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out PlacedNPC_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out Placed_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            PlacedNPCCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            PlacedNPC item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            Placed.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            PlacedNPC item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x454D414E: // NAME
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        property: item.Base_Property,
                        fieldIndex: (int)PlacedNPC_FieldIndex.Base,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Base);
                case 0x49435058: // XPCI
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.XPCIFluff);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] XPCIFluffParse,
                            errorMask: errorMask))
                        {
                            item.XPCIFluff = XPCIFluffParse;
                        }
                        else
                        {
                            item.UnsetXPCIFluff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.XPCIFluff);
                case 0x4C4C5546: // FULL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.FULLFluff);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] FULLFluffParse,
                            errorMask: errorMask))
                        {
                            item.FULLFluff = FULLFluffParse;
                        }
                        else
                        {
                            item.UnsetFULLFluff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.FULLFluff);
                case 0x444F4C58: // XLOD
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.DistantLODData);
                        if (LoquiBinaryTranslation<DistantLODData>.Instance.Parse(
                            frame: frame,
                            item: out DistantLODData DistantLODDataParse,
                            errorMask: errorMask))
                        {
                            item.DistantLODData = DistantLODDataParse;
                        }
                        else
                        {
                            item.UnsetDistantLODData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.DistantLODData);
                case 0x50534558: // XESP
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.EnableParent);
                        if (LoquiBinaryTranslation<EnableParent>.Instance.Parse(
                            frame: frame,
                            item: out EnableParent EnableParentParse,
                            errorMask: errorMask))
                        {
                            item.EnableParent = EnableParentParse;
                        }
                        else
                        {
                            item.UnsetEnableParent();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.EnableParent);
                case 0x43524D58: // XMRC
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        property: item.MerchantContainer_Property,
                        fieldIndex: (int)PlacedNPC_FieldIndex.MerchantContainer,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.MerchantContainer);
                case 0x53524858: // XHRS
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        property: item.Horse_Property,
                        fieldIndex: (int)PlacedNPC_FieldIndex.Horse,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Horse);
                case 0x44475258: // XRGD
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.RagdollData);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] RagdollDataParse,
                            errorMask: errorMask))
                        {
                            item.RagdollData = RagdollDataParse;
                        }
                        else
                        {
                            item.UnsetRagdollData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.RagdollData);
                case 0x4C435358: // XSCL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Scale);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single ScaleParse,
                            errorMask: errorMask))
                        {
                            item.Scale = ScaleParse;
                        }
                        else
                        {
                            item.UnsetScale();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Scale);
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Position);
                            if (Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out P3Float PositionParse,
                                errorMask: errorMask))
                            {
                                item.Position = PositionParse;
                            }
                            else
                            {
                                item.UnsetPosition();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)PlacedNPC_FieldIndex.Rotation);
                            if (Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out P3Float RotationParse,
                                errorMask: errorMask))
                            {
                                item.Rotation = RotationParse;
                            }
                            else
                            {
                                item.UnsetRotation();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)PlacedNPC_FieldIndex.Rotation);
                default:
                    return Placed.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public PlacedNPC Copy(
            PlacedNPC_CopyMask copyMask = null,
            IPlacedNPCGetter def = null)
        {
            return PlacedNPC.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PlacedNPC Copy(
            IPlacedNPC item,
            PlacedNPC_CopyMask copyMask = null,
            IPlacedNPCGetter def = null)
        {
            PlacedNPC ret;
            if (item.GetType().Equals(typeof(PlacedNPC)))
            {
                ret = new PlacedNPC();
            }
            else
            {
                ret = (PlacedNPC)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PlacedNPC Copy_ToLoqui(
            IPlacedNPCGetter item,
            PlacedNPC_CopyMask copyMask = null,
            IPlacedNPCGetter def = null)
        {
            PlacedNPC ret;
            if (item.GetType().Equals(typeof(PlacedNPC)))
            {
                ret = new PlacedNPC() as PlacedNPC;
            }
            else
            {
                ret = (PlacedNPC)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IPlacedNPCGetter rhs,
            PlacedNPC_CopyMask copyMask,
            IPlacedNPCGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPlacedNPCGetter rhs,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_CopyMask copyMask = null,
            IPlacedNPCGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedNPCCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IPlacedNPCGetter rhs,
            ErrorMaskBuilder errorMask,
            PlacedNPC_CopyMask copyMask = null,
            IPlacedNPCGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            PlacedNPCCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    this.Base_Property.Set(
                        (FormIDSetLink<NPC>)obj,
                        cmds);
                    break;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    this.SetXPCIFluff(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case PlacedNPC_FieldIndex.FULLFluff:
                    this.SetFULLFluff(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case PlacedNPC_FieldIndex.DistantLODData:
                    this.SetDistantLODData(
                        (DistantLODData)obj,
                        cmds: cmds);
                    break;
                case PlacedNPC_FieldIndex.EnableParent:
                    this.SetEnableParent(
                        (EnableParent)obj,
                        cmds: cmds);
                    break;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    this.MerchantContainer_Property.Set(
                        (FormIDSetLink<PlacedObject>)obj,
                        cmds);
                    break;
                case PlacedNPC_FieldIndex.Horse:
                    this.Horse_Property.Set(
                        (FormIDSetLink<PlacedCreature>)obj,
                        cmds);
                    break;
                case PlacedNPC_FieldIndex.RagdollData:
                    this.SetRagdollData(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case PlacedNPC_FieldIndex.Scale:
                    this.SetScale(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case PlacedNPC_FieldIndex.Position:
                    this.SetPosition(
                        (P3Float)obj,
                        cmds: cmds);
                    break;
                case PlacedNPC_FieldIndex.Rotation:
                    this.SetRotation(
                        (P3Float)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            PlacedNPCCommon.Clear(this, cmds);
        }


        public new static PlacedNPC Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PlacedNPC();
            foreach (var pair in fields)
            {
                CopyInInternal_PlacedNPC(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_PlacedNPC(PlacedNPC obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PlacedNPC_FieldIndex enu))
            {
                CopyInInternal_Placed(obj, pair);
            }
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    obj.Base_Property.Set(
                        (FormIDSetLink<NPC>)pair.Value,
                        null);
                    break;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    obj.SetXPCIFluff(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case PlacedNPC_FieldIndex.FULLFluff:
                    obj.SetFULLFluff(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case PlacedNPC_FieldIndex.DistantLODData:
                    obj.SetDistantLODData(
                        (DistantLODData)pair.Value,
                        cmds: null);
                    break;
                case PlacedNPC_FieldIndex.EnableParent:
                    obj.SetEnableParent(
                        (EnableParent)pair.Value,
                        cmds: null);
                    break;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    obj.MerchantContainer_Property.Set(
                        (FormIDSetLink<PlacedObject>)pair.Value,
                        null);
                    break;
                case PlacedNPC_FieldIndex.Horse:
                    obj.Horse_Property.Set(
                        (FormIDSetLink<PlacedCreature>)pair.Value,
                        null);
                    break;
                case PlacedNPC_FieldIndex.RagdollData:
                    obj.SetRagdollData(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case PlacedNPC_FieldIndex.Scale:
                    obj.SetScale(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case PlacedNPC_FieldIndex.Position:
                    obj.SetPosition(
                        (P3Float)pair.Value,
                        cmds: null);
                    break;
                case PlacedNPC_FieldIndex.Rotation:
                    obj.SetRotation(
                        (P3Float)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, PlacedNPC obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedNPC : IPlacedNPCGetter, IPlaced, ILoquiClass<IPlacedNPC, IPlacedNPCGetter>, ILoquiClass<PlacedNPC, IPlacedNPCGetter>
    {
        new NPC Base { get; set; }
        new Byte[] XPCIFluff { get; set; }
        new INotifyingSetItem<Byte[]> XPCIFluff_Property { get; }

        new Byte[] FULLFluff { get; set; }
        new INotifyingSetItem<Byte[]> FULLFluff_Property { get; }

        new DistantLODData DistantLODData { get; set; }
        new INotifyingSetItem<DistantLODData> DistantLODData_Property { get; }

        new EnableParent EnableParent { get; set; }
        new INotifyingSetItem<EnableParent> EnableParent_Property { get; }

        new PlacedObject MerchantContainer { get; set; }
        new PlacedCreature Horse { get; set; }
        new Byte[] RagdollData { get; set; }
        new INotifyingSetItem<Byte[]> RagdollData_Property { get; }

        new Single Scale { get; set; }
        new INotifyingSetItem<Single> Scale_Property { get; }

        new P3Float Position { get; set; }
        new INotifyingItem<P3Float> Position_Property { get; }

        new P3Float Rotation { get; set; }
        new INotifyingItem<P3Float> Rotation_Property { get; }

    }

    public partial interface IPlacedNPCGetter : IPlacedGetter
    {
        #region Base
        NPC Base { get; }
        FormIDSetLink<NPC> Base_Property { get; }

        #endregion
        #region XPCIFluff
        Byte[] XPCIFluff { get; }
        INotifyingSetItemGetter<Byte[]> XPCIFluff_Property { get; }

        #endregion
        #region FULLFluff
        Byte[] FULLFluff { get; }
        INotifyingSetItemGetter<Byte[]> FULLFluff_Property { get; }

        #endregion
        #region DistantLODData
        DistantLODData DistantLODData { get; }
        INotifyingSetItemGetter<DistantLODData> DistantLODData_Property { get; }

        #endregion
        #region EnableParent
        EnableParent EnableParent { get; }
        INotifyingSetItemGetter<EnableParent> EnableParent_Property { get; }

        #endregion
        #region MerchantContainer
        PlacedObject MerchantContainer { get; }
        FormIDSetLink<PlacedObject> MerchantContainer_Property { get; }

        #endregion
        #region Horse
        PlacedCreature Horse { get; }
        FormIDSetLink<PlacedCreature> Horse_Property { get; }

        #endregion
        #region RagdollData
        Byte[] RagdollData { get; }
        INotifyingSetItemGetter<Byte[]> RagdollData_Property { get; }

        #endregion
        #region Scale
        Single Scale { get; }
        INotifyingSetItemGetter<Single> Scale_Property { get; }

        #endregion
        #region Position
        P3Float Position { get; }
        INotifyingItemGetter<P3Float> Position_Property { get; }

        #endregion
        #region Rotation
        P3Float Rotation { get; }
        INotifyingItemGetter<P3Float> Rotation_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PlacedNPC_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Base = 5,
        XPCIFluff = 6,
        FULLFluff = 7,
        DistantLODData = 8,
        EnableParent = 9,
        MerchantContainer = 10,
        Horse = 11,
        RagdollData = 12,
        Scale = 13,
        Position = 14,
        Rotation = 15,
    }
    #endregion

    #region Registration
    public class PlacedNPC_Registration : ILoquiRegistration
    {
        public static readonly PlacedNPC_Registration Instance = new PlacedNPC_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 137,
            version: 0);

        public const string GUID = "1bd10cd8-4d9b-4cc0-9639-51f02a1b2e36";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(PlacedNPC_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedNPC_ErrorMask);

        public static readonly Type ClassType = typeof(PlacedNPC);

        public static readonly Type GetterType = typeof(IPlacedNPCGetter);

        public static readonly Type SetterType = typeof(IPlacedNPC);

        public static readonly Type CommonType = typeof(PlacedNPCCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedNPC";

        public const string Name = "PlacedNPC";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BASE":
                    return (ushort)PlacedNPC_FieldIndex.Base;
                case "XPCIFLUFF":
                    return (ushort)PlacedNPC_FieldIndex.XPCIFluff;
                case "FULLFLUFF":
                    return (ushort)PlacedNPC_FieldIndex.FULLFluff;
                case "DISTANTLODDATA":
                    return (ushort)PlacedNPC_FieldIndex.DistantLODData;
                case "ENABLEPARENT":
                    return (ushort)PlacedNPC_FieldIndex.EnableParent;
                case "MERCHANTCONTAINER":
                    return (ushort)PlacedNPC_FieldIndex.MerchantContainer;
                case "HORSE":
                    return (ushort)PlacedNPC_FieldIndex.Horse;
                case "RAGDOLLDATA":
                    return (ushort)PlacedNPC_FieldIndex.RagdollData;
                case "SCALE":
                    return (ushort)PlacedNPC_FieldIndex.Scale;
                case "POSITION":
                    return (ushort)PlacedNPC_FieldIndex.Position;
                case "ROTATION":
                    return (ushort)PlacedNPC_FieldIndex.Rotation;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                    return true;
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    return "Base";
                case PlacedNPC_FieldIndex.XPCIFluff:
                    return "XPCIFluff";
                case PlacedNPC_FieldIndex.FULLFluff:
                    return "FULLFluff";
                case PlacedNPC_FieldIndex.DistantLODData:
                    return "DistantLODData";
                case PlacedNPC_FieldIndex.EnableParent:
                    return "EnableParent";
                case PlacedNPC_FieldIndex.MerchantContainer:
                    return "MerchantContainer";
                case PlacedNPC_FieldIndex.Horse:
                    return "Horse";
                case PlacedNPC_FieldIndex.RagdollData:
                    return "RagdollData";
                case PlacedNPC_FieldIndex.Scale:
                    return "Scale";
                case PlacedNPC_FieldIndex.Position:
                    return "Position";
                case PlacedNPC_FieldIndex.Rotation:
                    return "Rotation";
                default:
                    return Placed_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                case PlacedNPC_FieldIndex.XPCIFluff:
                case PlacedNPC_FieldIndex.FULLFluff:
                case PlacedNPC_FieldIndex.DistantLODData:
                case PlacedNPC_FieldIndex.EnableParent:
                case PlacedNPC_FieldIndex.MerchantContainer:
                case PlacedNPC_FieldIndex.Horse:
                case PlacedNPC_FieldIndex.RagdollData:
                case PlacedNPC_FieldIndex.Scale:
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    return typeof(FormIDSetLink<NPC>);
                case PlacedNPC_FieldIndex.XPCIFluff:
                    return typeof(Byte[]);
                case PlacedNPC_FieldIndex.FULLFluff:
                    return typeof(Byte[]);
                case PlacedNPC_FieldIndex.DistantLODData:
                    return typeof(DistantLODData);
                case PlacedNPC_FieldIndex.EnableParent:
                    return typeof(EnableParent);
                case PlacedNPC_FieldIndex.MerchantContainer:
                    return typeof(FormIDSetLink<PlacedObject>);
                case PlacedNPC_FieldIndex.Horse:
                    return typeof(FormIDSetLink<PlacedCreature>);
                case PlacedNPC_FieldIndex.RagdollData:
                    return typeof(Byte[]);
                case PlacedNPC_FieldIndex.Scale:
                    return typeof(Single);
                case PlacedNPC_FieldIndex.Position:
                    return typeof(P3Float);
                case PlacedNPC_FieldIndex.Rotation:
                    return typeof(P3Float);
                default:
                    return Placed_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType XPCI_HEADER = new RecordType("XPCI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType XLOD_HEADER = new RecordType("XLOD");
        public static readonly RecordType XESP_HEADER = new RecordType("XESP");
        public static readonly RecordType XMRC_HEADER = new RecordType("XMRC");
        public static readonly RecordType XHRS_HEADER = new RecordType("XHRS");
        public static readonly RecordType XRGD_HEADER = new RecordType("XRGD");
        public static readonly RecordType XSCL_HEADER = new RecordType("XSCL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ACHR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class PlacedNPCCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IPlacedNPC item,
            IPlacedNPCGetter rhs,
            IPlacedNPCGetter def,
            ErrorMaskBuilder errorMask,
            PlacedNPC_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            PlacedCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Base ?? true)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.Base);
                try
                {
                    item.Base_Property.SetToWithDefault(
                        rhs: rhs.Base_Property,
                        def: def?.Base_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.XPCIFluff ?? true)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.XPCIFluff);
                try
                {
                    item.XPCIFluff_Property.SetToWithDefault(
                        rhs: rhs.XPCIFluff_Property,
                        def: def?.XPCIFluff_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.FULLFluff ?? true)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.FULLFluff);
                try
                {
                    item.FULLFluff_Property.SetToWithDefault(
                        rhs: rhs.FULLFluff_Property,
                        def: def?.FULLFluff_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.DistantLODData.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.DistantLODData);
                try
                {
                    item.DistantLODData_Property.SetToWithDefault(
                        rhs.DistantLODData_Property,
                        def?.DistantLODData_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.DistantLODData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    DistantLODDataCommon.CopyFieldsFrom(
                                        item: item.DistantLODData,
                                        rhs: rhs.DistantLODData,
                                        def: def?.DistantLODData,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.DistantLODData.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(DistantLODData);
                                    return DistantLODData.Copy(
                                        r,
                                        copyMask?.DistantLODData?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.DistantLODData?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.EnableParent.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.EnableParent);
                try
                {
                    item.EnableParent_Property.SetToWithDefault(
                        rhs.EnableParent_Property,
                        def?.EnableParent_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.EnableParent.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    EnableParentCommon.CopyFieldsFrom(
                                        item: item.EnableParent,
                                        rhs: rhs.EnableParent,
                                        def: def?.EnableParent,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.EnableParent.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(EnableParent);
                                    return EnableParent.Copy(
                                        r,
                                        copyMask?.EnableParent?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.EnableParent?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MerchantContainer ?? true)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.MerchantContainer);
                try
                {
                    item.MerchantContainer_Property.SetToWithDefault(
                        rhs: rhs.MerchantContainer_Property,
                        def: def?.MerchantContainer_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Horse ?? true)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.Horse);
                try
                {
                    item.Horse_Property.SetToWithDefault(
                        rhs: rhs.Horse_Property,
                        def: def?.Horse_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.RagdollData ?? true)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.RagdollData);
                try
                {
                    item.RagdollData_Property.SetToWithDefault(
                        rhs: rhs.RagdollData_Property,
                        def: def?.RagdollData_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Scale ?? true)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.Scale);
                try
                {
                    item.Scale_Property.SetToWithDefault(
                        rhs: rhs.Scale_Property,
                        def: def?.Scale_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Position ?? true)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.Position);
                try
                {
                    item.Position_Property.Set(
                        value: rhs.Position,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Rotation ?? true)
            {
                errorMask.PushIndex((int)PlacedNPC_FieldIndex.Rotation);
                try
                {
                    item.Rotation_Property.Set(
                        value: rhs.Rotation,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IPlacedNPC obj,
            NotifyingFireParameters cmds = null)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case PlacedNPC_FieldIndex.Base:
                    obj.Base_Property.HasBeenSet = on;
                    break;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    obj.XPCIFluff_Property.HasBeenSet = on;
                    break;
                case PlacedNPC_FieldIndex.FULLFluff:
                    obj.FULLFluff_Property.HasBeenSet = on;
                    break;
                case PlacedNPC_FieldIndex.DistantLODData:
                    obj.DistantLODData_Property.HasBeenSet = on;
                    break;
                case PlacedNPC_FieldIndex.EnableParent:
                    obj.EnableParent_Property.HasBeenSet = on;
                    break;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    obj.MerchantContainer_Property.HasBeenSet = on;
                    break;
                case PlacedNPC_FieldIndex.Horse:
                    obj.Horse_Property.HasBeenSet = on;
                    break;
                case PlacedNPC_FieldIndex.RagdollData:
                    obj.RagdollData_Property.HasBeenSet = on;
                    break;
                case PlacedNPC_FieldIndex.Scale:
                    obj.Scale_Property.HasBeenSet = on;
                    break;
                default:
                    PlacedCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IPlacedNPC obj,
            NotifyingUnsetParameters cmds = null)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    obj.Base_Property.Unset(cmds);
                    break;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    obj.XPCIFluff_Property.Unset(cmds);
                    break;
                case PlacedNPC_FieldIndex.FULLFluff:
                    obj.FULLFluff_Property.Unset(cmds);
                    break;
                case PlacedNPC_FieldIndex.DistantLODData:
                    obj.DistantLODData_Property.Unset(cmds);
                    break;
                case PlacedNPC_FieldIndex.EnableParent:
                    obj.EnableParent_Property.Unset(cmds);
                    break;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    obj.MerchantContainer_Property.Unset(cmds);
                    break;
                case PlacedNPC_FieldIndex.Horse:
                    obj.Horse_Property.Unset(cmds);
                    break;
                case PlacedNPC_FieldIndex.RagdollData:
                    obj.RagdollData_Property.Unset(cmds);
                    break;
                case PlacedNPC_FieldIndex.Scale:
                    obj.Scale_Property.Unset(cmds);
                    break;
                case PlacedNPC_FieldIndex.Position:
                    obj.Position = default(P3Float);
                    break;
                case PlacedNPC_FieldIndex.Rotation:
                    obj.Rotation = default(P3Float);
                    break;
                default:
                    PlacedCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IPlacedNPC obj)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Position:
                case PlacedNPC_FieldIndex.Rotation:
                    return true;
                case PlacedNPC_FieldIndex.Base:
                    return obj.Base_Property.HasBeenSet;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    return obj.XPCIFluff_Property.HasBeenSet;
                case PlacedNPC_FieldIndex.FULLFluff:
                    return obj.FULLFluff_Property.HasBeenSet;
                case PlacedNPC_FieldIndex.DistantLODData:
                    return obj.DistantLODData_Property.HasBeenSet;
                case PlacedNPC_FieldIndex.EnableParent:
                    return obj.EnableParent_Property.HasBeenSet;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    return obj.MerchantContainer_Property.HasBeenSet;
                case PlacedNPC_FieldIndex.Horse:
                    return obj.Horse_Property.HasBeenSet;
                case PlacedNPC_FieldIndex.RagdollData:
                    return obj.RagdollData_Property.HasBeenSet;
                case PlacedNPC_FieldIndex.Scale:
                    return obj.Scale_Property.HasBeenSet;
                default:
                    return PlacedCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IPlacedNPCGetter obj)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    return obj.Base;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    return obj.XPCIFluff;
                case PlacedNPC_FieldIndex.FULLFluff:
                    return obj.FULLFluff;
                case PlacedNPC_FieldIndex.DistantLODData:
                    return obj.DistantLODData;
                case PlacedNPC_FieldIndex.EnableParent:
                    return obj.EnableParent;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    return obj.MerchantContainer;
                case PlacedNPC_FieldIndex.Horse:
                    return obj.Horse;
                case PlacedNPC_FieldIndex.RagdollData:
                    return obj.RagdollData;
                case PlacedNPC_FieldIndex.Scale:
                    return obj.Scale;
                case PlacedNPC_FieldIndex.Position:
                    return obj.Position;
                case PlacedNPC_FieldIndex.Rotation:
                    return obj.Rotation;
                default:
                    return PlacedCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IPlacedNPC item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Base_Property.Unset(cmds.ToUnsetParams());
            item.XPCIFluff_Property.Unset(cmds.ToUnsetParams());
            item.FULLFluff_Property.Unset(cmds.ToUnsetParams());
            item.DistantLODData_Property.Unset(cmds.ToUnsetParams());
            item.EnableParent_Property.Unset(cmds.ToUnsetParams());
            item.MerchantContainer_Property.Unset(cmds.ToUnsetParams());
            item.Horse_Property.Unset(cmds.ToUnsetParams());
            item.RagdollData_Property.Unset(cmds.ToUnsetParams());
            item.Scale_Property.Unset(cmds.ToUnsetParams());
            item.Position = default(P3Float);
            item.Rotation = default(P3Float);
        }

        public static PlacedNPC_Mask<bool> GetEqualsMask(
            this IPlacedNPCGetter item,
            IPlacedNPCGetter rhs)
        {
            var ret = new PlacedNPC_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IPlacedNPCGetter item,
            IPlacedNPCGetter rhs,
            PlacedNPC_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Base = item.Base_Property.Equals(rhs.Base_Property, (l, r) => l == r);
            ret.XPCIFluff = item.XPCIFluff_Property.Equals(rhs.XPCIFluff_Property, (l, r) => l.EqualsFast(r));
            ret.FULLFluff = item.FULLFluff_Property.Equals(rhs.FULLFluff_Property, (l, r) => l.EqualsFast(r));
            ret.DistantLODData = item.DistantLODData_Property.LoquiEqualsHelper(rhs.DistantLODData_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.EnableParent = item.EnableParent_Property.LoquiEqualsHelper(rhs.EnableParent_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.MerchantContainer = item.MerchantContainer_Property.Equals(rhs.MerchantContainer_Property, (l, r) => l == r);
            ret.Horse = item.Horse_Property.Equals(rhs.Horse_Property, (l, r) => l == r);
            ret.RagdollData = item.RagdollData_Property.Equals(rhs.RagdollData_Property, (l, r) => l.EqualsFast(r));
            ret.Scale = item.Scale_Property.Equals(rhs.Scale_Property, (l, r) => l == r);
            ret.Position = item.Position == rhs.Position;
            ret.Rotation = item.Rotation == rhs.Rotation;
            PlacedCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IPlacedNPCGetter item,
            string name = null,
            PlacedNPC_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IPlacedNPCGetter item,
            FileGeneration fg,
            string name = null,
            PlacedNPC_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(PlacedNPC)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(PlacedNPC)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Base ?? true)
                {
                    fg.AppendLine($"Base => {item.Base_Property}");
                }
                if (printMask?.XPCIFluff ?? true)
                {
                    fg.AppendLine($"XPCIFluff => {item.XPCIFluff}");
                }
                if (printMask?.FULLFluff ?? true)
                {
                    fg.AppendLine($"FULLFluff => {item.FULLFluff}");
                }
                if (printMask?.DistantLODData?.Overall ?? true)
                {
                    item.DistantLODData?.ToString(fg, "DistantLODData");
                }
                if (printMask?.EnableParent?.Overall ?? true)
                {
                    item.EnableParent?.ToString(fg, "EnableParent");
                }
                if (printMask?.MerchantContainer ?? true)
                {
                    fg.AppendLine($"MerchantContainer => {item.MerchantContainer_Property}");
                }
                if (printMask?.Horse ?? true)
                {
                    fg.AppendLine($"Horse => {item.Horse_Property}");
                }
                if (printMask?.RagdollData ?? true)
                {
                    fg.AppendLine($"RagdollData => {item.RagdollData}");
                }
                if (printMask?.Scale ?? true)
                {
                    fg.AppendLine($"Scale => {item.Scale}");
                }
                if (printMask?.Position ?? true)
                {
                    fg.AppendLine($"Position => {item.Position}");
                }
                if (printMask?.Rotation ?? true)
                {
                    fg.AppendLine($"Rotation => {item.Rotation}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IPlacedNPCGetter item,
            PlacedNPC_Mask<bool?> checkMask)
        {
            if (checkMask.Base.HasValue && checkMask.Base.Value != item.Base_Property.HasBeenSet) return false;
            if (checkMask.XPCIFluff.HasValue && checkMask.XPCIFluff.Value != item.XPCIFluff_Property.HasBeenSet) return false;
            if (checkMask.FULLFluff.HasValue && checkMask.FULLFluff.Value != item.FULLFluff_Property.HasBeenSet) return false;
            if (checkMask.DistantLODData.Overall.HasValue && checkMask.DistantLODData.Overall.Value != item.DistantLODData_Property.HasBeenSet) return false;
            if (checkMask.DistantLODData.Specific != null && (item.DistantLODData == null || !item.DistantLODData.HasBeenSet(checkMask.DistantLODData.Specific))) return false;
            if (checkMask.EnableParent.Overall.HasValue && checkMask.EnableParent.Overall.Value != item.EnableParent_Property.HasBeenSet) return false;
            if (checkMask.EnableParent.Specific != null && (item.EnableParent == null || !item.EnableParent.HasBeenSet(checkMask.EnableParent.Specific))) return false;
            if (checkMask.MerchantContainer.HasValue && checkMask.MerchantContainer.Value != item.MerchantContainer_Property.HasBeenSet) return false;
            if (checkMask.Horse.HasValue && checkMask.Horse.Value != item.Horse_Property.HasBeenSet) return false;
            if (checkMask.RagdollData.HasValue && checkMask.RagdollData.Value != item.RagdollData_Property.HasBeenSet) return false;
            if (checkMask.Scale.HasValue && checkMask.Scale.Value != item.Scale_Property.HasBeenSet) return false;
            return true;
        }

        public static PlacedNPC_Mask<bool> GetHasBeenSetMask(IPlacedNPCGetter item)
        {
            var ret = new PlacedNPC_Mask<bool>();
            ret.Base = item.Base_Property.HasBeenSet;
            ret.XPCIFluff = item.XPCIFluff_Property.HasBeenSet;
            ret.FULLFluff = item.FULLFluff_Property.HasBeenSet;
            ret.DistantLODData = new MaskItem<bool, DistantLODData_Mask<bool>>(item.DistantLODData_Property.HasBeenSet, DistantLODDataCommon.GetHasBeenSetMask(item.DistantLODData));
            ret.EnableParent = new MaskItem<bool, EnableParent_Mask<bool>>(item.EnableParent_Property.HasBeenSet, EnableParentCommon.GetHasBeenSetMask(item.EnableParent));
            ret.MerchantContainer = item.MerchantContainer_Property.HasBeenSet;
            ret.Horse = item.Horse_Property.HasBeenSet;
            ret.RagdollData = item.RagdollData_Property.HasBeenSet;
            ret.Scale = item.Scale_Property.HasBeenSet;
            ret.Position = true;
            ret.Rotation = true;
            return ret;
        }

        public static PlacedNPC_FieldIndex? ConvertFieldIndex(Placed_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static PlacedNPC_FieldIndex ConvertFieldIndex(Placed_FieldIndex index)
        {
            switch (index)
            {
                case Placed_FieldIndex.MajorRecordFlags:
                    return (PlacedNPC_FieldIndex)((int)index);
                case Placed_FieldIndex.FormID:
                    return (PlacedNPC_FieldIndex)((int)index);
                case Placed_FieldIndex.Version:
                    return (PlacedNPC_FieldIndex)((int)index);
                case Placed_FieldIndex.EditorID:
                    return (PlacedNPC_FieldIndex)((int)index);
                case Placed_FieldIndex.RecordType:
                    return (PlacedNPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static PlacedNPC_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static PlacedNPC_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (PlacedNPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (PlacedNPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PlacedNPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedNPC_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (PlacedNPC_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            IPlacedNPCGetter item,
            bool doMasks,
            out PlacedNPC_ErrorMask errorMask,
            PlacedNPC_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            IPlacedNPCGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PlacedNPC");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PlacedNPC");
            }
            if (item.Base_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Base) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Base),
                    item: item.Base?.FormID,
                    fieldIndex: (int)PlacedNPC_FieldIndex.Base,
                    errorMask: errorMask);
            }
            if (item.XPCIFluff_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.XPCIFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.XPCIFluff),
                    item: item.XPCIFluff_Property,
                    fieldIndex: (int)PlacedNPC_FieldIndex.XPCIFluff,
                    errorMask: errorMask);
            }
            if (item.FULLFluff_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.FULLFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FULLFluff),
                    item: item.FULLFluff_Property,
                    fieldIndex: (int)PlacedNPC_FieldIndex.FULLFluff,
                    errorMask: errorMask);
            }
            if (item.DistantLODData_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.DistantLODData) ?? true))
            {
                LoquiXmlTranslation<DistantLODData>.Instance.Write(
                    node: elem,
                    item: item.DistantLODData_Property,
                    name: nameof(item.DistantLODData),
                    fieldIndex: (int)PlacedNPC_FieldIndex.DistantLODData,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            if (item.EnableParent_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.EnableParent) ?? true))
            {
                LoquiXmlTranslation<EnableParent>.Instance.Write(
                    node: elem,
                    item: item.EnableParent_Property,
                    name: nameof(item.EnableParent),
                    fieldIndex: (int)PlacedNPC_FieldIndex.EnableParent,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            if (item.MerchantContainer_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.MerchantContainer) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.MerchantContainer),
                    item: item.MerchantContainer?.FormID,
                    fieldIndex: (int)PlacedNPC_FieldIndex.MerchantContainer,
                    errorMask: errorMask);
            }
            if (item.Horse_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Horse) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Horse),
                    item: item.Horse?.FormID,
                    fieldIndex: (int)PlacedNPC_FieldIndex.Horse,
                    errorMask: errorMask);
            }
            if (item.RagdollData_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.RagdollData) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RagdollData),
                    item: item.RagdollData_Property,
                    fieldIndex: (int)PlacedNPC_FieldIndex.RagdollData,
                    errorMask: errorMask);
            }
            if (item.Scale_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Scale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Scale),
                    item: item.Scale_Property,
                    fieldIndex: (int)PlacedNPC_FieldIndex.Scale,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Position) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Position),
                    item: item.Position_Property,
                    fieldIndex: (int)PlacedNPC_FieldIndex.Position,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedNPC_FieldIndex.Rotation) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Rotation),
                    item: item.Rotation_Property,
                    fieldIndex: (int)PlacedNPC_FieldIndex.Rotation,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            PlacedNPC item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out PlacedNPC_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = PlacedNPC_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            PlacedNPC item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: PlacedNPC_Registration.ACHR_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            PlacedNPC item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Base_Property,
                fieldIndex: (int)PlacedNPC_FieldIndex.Base,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.NAME_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XPCIFluff_Property,
                fieldIndex: (int)PlacedNPC_FieldIndex.XPCIFluff,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.XPCI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FULLFluff_Property,
                fieldIndex: (int)PlacedNPC_FieldIndex.FULLFluff,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.FULL_HEADER),
                nullable: false);
            LoquiBinaryTranslation<DistantLODData>.Instance.Write(
                writer: writer,
                item: item.DistantLODData_Property,
                fieldIndex: (int)PlacedNPC_FieldIndex.DistantLODData,
                errorMask: errorMask);
            LoquiBinaryTranslation<EnableParent>.Instance.Write(
                writer: writer,
                item: item.EnableParent_Property,
                fieldIndex: (int)PlacedNPC_FieldIndex.EnableParent,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MerchantContainer_Property,
                fieldIndex: (int)PlacedNPC_FieldIndex.MerchantContainer,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.XMRC_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Horse_Property,
                fieldIndex: (int)PlacedNPC_FieldIndex.Horse,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.XHRS_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RagdollData_Property,
                fieldIndex: (int)PlacedNPC_FieldIndex.RagdollData,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.XRGD_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Scale_Property,
                fieldIndex: (int)PlacedNPC_FieldIndex.Scale,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.XSCL_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(PlacedNPC_Registration.DATA_HEADER)))
            {
                Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Position_Property,
                    fieldIndex: (int)PlacedNPC_FieldIndex.Position,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Rotation_Property,
                    fieldIndex: (int)PlacedNPC_FieldIndex.Rotation,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class PlacedNPC_Mask<T> : Placed_Mask<T>, IMask<T>, IEquatable<PlacedNPC_Mask<T>>
    {
        #region Ctors
        public PlacedNPC_Mask()
        {
        }

        public PlacedNPC_Mask(T initialValue)
        {
            this.Base = initialValue;
            this.XPCIFluff = initialValue;
            this.FULLFluff = initialValue;
            this.DistantLODData = new MaskItem<T, DistantLODData_Mask<T>>(initialValue, new DistantLODData_Mask<T>(initialValue));
            this.EnableParent = new MaskItem<T, EnableParent_Mask<T>>(initialValue, new EnableParent_Mask<T>(initialValue));
            this.MerchantContainer = initialValue;
            this.Horse = initialValue;
            this.RagdollData = initialValue;
            this.Scale = initialValue;
            this.Position = initialValue;
            this.Rotation = initialValue;
        }
        #endregion

        #region Members
        public T Base;
        public T XPCIFluff;
        public T FULLFluff;
        public MaskItem<T, DistantLODData_Mask<T>> DistantLODData { get; set; }
        public MaskItem<T, EnableParent_Mask<T>> EnableParent { get; set; }
        public T MerchantContainer;
        public T Horse;
        public T RagdollData;
        public T Scale;
        public T Position;
        public T Rotation;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PlacedNPC_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PlacedNPC_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Base, rhs.Base)) return false;
            if (!object.Equals(this.XPCIFluff, rhs.XPCIFluff)) return false;
            if (!object.Equals(this.FULLFluff, rhs.FULLFluff)) return false;
            if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
            if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
            if (!object.Equals(this.MerchantContainer, rhs.MerchantContainer)) return false;
            if (!object.Equals(this.Horse, rhs.Horse)) return false;
            if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
            if (!object.Equals(this.Scale, rhs.Scale)) return false;
            if (!object.Equals(this.Position, rhs.Position)) return false;
            if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Base?.GetHashCode());
            ret = ret.CombineHashCode(this.XPCIFluff?.GetHashCode());
            ret = ret.CombineHashCode(this.FULLFluff?.GetHashCode());
            ret = ret.CombineHashCode(this.DistantLODData?.GetHashCode());
            ret = ret.CombineHashCode(this.EnableParent?.GetHashCode());
            ret = ret.CombineHashCode(this.MerchantContainer?.GetHashCode());
            ret = ret.CombineHashCode(this.Horse?.GetHashCode());
            ret = ret.CombineHashCode(this.RagdollData?.GetHashCode());
            ret = ret.CombineHashCode(this.Scale?.GetHashCode());
            ret = ret.CombineHashCode(this.Position?.GetHashCode());
            ret = ret.CombineHashCode(this.Rotation?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Base)) return false;
            if (!eval(this.XPCIFluff)) return false;
            if (!eval(this.FULLFluff)) return false;
            if (DistantLODData != null)
            {
                if (!eval(this.DistantLODData.Overall)) return false;
                if (this.DistantLODData.Specific != null && !this.DistantLODData.Specific.AllEqual(eval)) return false;
            }
            if (EnableParent != null)
            {
                if (!eval(this.EnableParent.Overall)) return false;
                if (this.EnableParent.Specific != null && !this.EnableParent.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.MerchantContainer)) return false;
            if (!eval(this.Horse)) return false;
            if (!eval(this.RagdollData)) return false;
            if (!eval(this.Scale)) return false;
            if (!eval(this.Position)) return false;
            if (!eval(this.Rotation)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new PlacedNPC_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PlacedNPC_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PlacedNPC_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Base = eval(this.Base);
            obj.XPCIFluff = eval(this.XPCIFluff);
            obj.FULLFluff = eval(this.FULLFluff);
            if (this.DistantLODData != null)
            {
                obj.DistantLODData = new MaskItem<R, DistantLODData_Mask<R>>();
                obj.DistantLODData.Overall = eval(this.DistantLODData.Overall);
                if (this.DistantLODData.Specific != null)
                {
                    obj.DistantLODData.Specific = this.DistantLODData.Specific.Translate(eval);
                }
            }
            if (this.EnableParent != null)
            {
                obj.EnableParent = new MaskItem<R, EnableParent_Mask<R>>();
                obj.EnableParent.Overall = eval(this.EnableParent.Overall);
                if (this.EnableParent.Specific != null)
                {
                    obj.EnableParent.Specific = this.EnableParent.Specific.Translate(eval);
                }
            }
            obj.MerchantContainer = eval(this.MerchantContainer);
            obj.Horse = eval(this.Horse);
            obj.RagdollData = eval(this.RagdollData);
            obj.Scale = eval(this.Scale);
            obj.Position = eval(this.Position);
            obj.Rotation = eval(this.Rotation);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PlacedNPC_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PlacedNPC_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PlacedNPC_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Base ?? true)
                {
                    fg.AppendLine($"Base => {Base}");
                }
                if (printMask?.XPCIFluff ?? true)
                {
                    fg.AppendLine($"XPCIFluff => {XPCIFluff}");
                }
                if (printMask?.FULLFluff ?? true)
                {
                    fg.AppendLine($"FULLFluff => {FULLFluff}");
                }
                if (printMask?.DistantLODData?.Overall ?? true)
                {
                    DistantLODData?.ToString(fg);
                }
                if (printMask?.EnableParent?.Overall ?? true)
                {
                    EnableParent?.ToString(fg);
                }
                if (printMask?.MerchantContainer ?? true)
                {
                    fg.AppendLine($"MerchantContainer => {MerchantContainer}");
                }
                if (printMask?.Horse ?? true)
                {
                    fg.AppendLine($"Horse => {Horse}");
                }
                if (printMask?.RagdollData ?? true)
                {
                    fg.AppendLine($"RagdollData => {RagdollData}");
                }
                if (printMask?.Scale ?? true)
                {
                    fg.AppendLine($"Scale => {Scale}");
                }
                if (printMask?.Position ?? true)
                {
                    fg.AppendLine($"Position => {Position}");
                }
                if (printMask?.Rotation ?? true)
                {
                    fg.AppendLine($"Rotation => {Rotation}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PlacedNPC_ErrorMask : Placed_ErrorMask, IErrorMask<PlacedNPC_ErrorMask>
    {
        #region Members
        public Exception Base;
        public Exception XPCIFluff;
        public Exception FULLFluff;
        public MaskItem<Exception, DistantLODData_ErrorMask> DistantLODData;
        public MaskItem<Exception, EnableParent_ErrorMask> EnableParent;
        public Exception MerchantContainer;
        public Exception Horse;
        public Exception RagdollData;
        public Exception Scale;
        public Exception Position;
        public Exception Rotation;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    return Base;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    return XPCIFluff;
                case PlacedNPC_FieldIndex.FULLFluff:
                    return FULLFluff;
                case PlacedNPC_FieldIndex.DistantLODData:
                    return DistantLODData;
                case PlacedNPC_FieldIndex.EnableParent:
                    return EnableParent;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    return MerchantContainer;
                case PlacedNPC_FieldIndex.Horse:
                    return Horse;
                case PlacedNPC_FieldIndex.RagdollData:
                    return RagdollData;
                case PlacedNPC_FieldIndex.Scale:
                    return Scale;
                case PlacedNPC_FieldIndex.Position:
                    return Position;
                case PlacedNPC_FieldIndex.Rotation:
                    return Rotation;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    this.Base = ex;
                    break;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    this.XPCIFluff = ex;
                    break;
                case PlacedNPC_FieldIndex.FULLFluff:
                    this.FULLFluff = ex;
                    break;
                case PlacedNPC_FieldIndex.DistantLODData:
                    this.DistantLODData = new MaskItem<Exception, DistantLODData_ErrorMask>(ex, null);
                    break;
                case PlacedNPC_FieldIndex.EnableParent:
                    this.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(ex, null);
                    break;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    this.MerchantContainer = ex;
                    break;
                case PlacedNPC_FieldIndex.Horse:
                    this.Horse = ex;
                    break;
                case PlacedNPC_FieldIndex.RagdollData:
                    this.RagdollData = ex;
                    break;
                case PlacedNPC_FieldIndex.Scale:
                    this.Scale = ex;
                    break;
                case PlacedNPC_FieldIndex.Position:
                    this.Position = ex;
                    break;
                case PlacedNPC_FieldIndex.Rotation:
                    this.Rotation = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            PlacedNPC_FieldIndex enu = (PlacedNPC_FieldIndex)index;
            switch (enu)
            {
                case PlacedNPC_FieldIndex.Base:
                    this.Base = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.XPCIFluff:
                    this.XPCIFluff = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.FULLFluff:
                    this.FULLFluff = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.DistantLODData:
                    this.DistantLODData = (MaskItem<Exception, DistantLODData_ErrorMask>)obj;
                    break;
                case PlacedNPC_FieldIndex.EnableParent:
                    this.EnableParent = (MaskItem<Exception, EnableParent_ErrorMask>)obj;
                    break;
                case PlacedNPC_FieldIndex.MerchantContainer:
                    this.MerchantContainer = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.Horse:
                    this.Horse = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.RagdollData:
                    this.RagdollData = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.Scale:
                    this.Scale = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.Position:
                    this.Position = (Exception)obj;
                    break;
                case PlacedNPC_FieldIndex.Rotation:
                    this.Rotation = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Base != null) return true;
            if (XPCIFluff != null) return true;
            if (FULLFluff != null) return true;
            if (DistantLODData != null) return true;
            if (EnableParent != null) return true;
            if (MerchantContainer != null) return true;
            if (Horse != null) return true;
            if (RagdollData != null) return true;
            if (Scale != null) return true;
            if (Position != null) return true;
            if (Rotation != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("PlacedNPC_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Base => {Base}");
            fg.AppendLine($"XPCIFluff => {XPCIFluff}");
            fg.AppendLine($"FULLFluff => {FULLFluff}");
            DistantLODData?.ToString(fg);
            EnableParent?.ToString(fg);
            fg.AppendLine($"MerchantContainer => {MerchantContainer}");
            fg.AppendLine($"Horse => {Horse}");
            fg.AppendLine($"RagdollData => {RagdollData}");
            fg.AppendLine($"Scale => {Scale}");
            fg.AppendLine($"Position => {Position}");
            fg.AppendLine($"Rotation => {Rotation}");
        }
        #endregion

        #region Combine
        public PlacedNPC_ErrorMask Combine(PlacedNPC_ErrorMask rhs)
        {
            var ret = new PlacedNPC_ErrorMask();
            ret.Base = this.Base.Combine(rhs.Base);
            ret.XPCIFluff = this.XPCIFluff.Combine(rhs.XPCIFluff);
            ret.FULLFluff = this.FULLFluff.Combine(rhs.FULLFluff);
            ret.DistantLODData = new MaskItem<Exception, DistantLODData_ErrorMask>(this.DistantLODData.Overall.Combine(rhs.DistantLODData.Overall), ((IErrorMask<DistantLODData_ErrorMask>)this.DistantLODData.Specific).Combine(rhs.DistantLODData.Specific));
            ret.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(this.EnableParent.Overall.Combine(rhs.EnableParent.Overall), ((IErrorMask<EnableParent_ErrorMask>)this.EnableParent.Specific).Combine(rhs.EnableParent.Specific));
            ret.MerchantContainer = this.MerchantContainer.Combine(rhs.MerchantContainer);
            ret.Horse = this.Horse.Combine(rhs.Horse);
            ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
            ret.Scale = this.Scale.Combine(rhs.Scale);
            ret.Position = this.Position.Combine(rhs.Position);
            ret.Rotation = this.Rotation.Combine(rhs.Rotation);
            return ret;
        }
        public static PlacedNPC_ErrorMask Combine(PlacedNPC_ErrorMask lhs, PlacedNPC_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PlacedNPC_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PlacedNPC_ErrorMask();
        }
        #endregion

    }
    public class PlacedNPC_CopyMask : Placed_CopyMask
    {
        #region Members
        public bool Base;
        public bool XPCIFluff;
        public bool FULLFluff;
        public MaskItem<CopyOption, DistantLODData_CopyMask> DistantLODData;
        public MaskItem<CopyOption, EnableParent_CopyMask> EnableParent;
        public bool MerchantContainer;
        public bool Horse;
        public bool RagdollData;
        public bool Scale;
        public bool Position;
        public bool Rotation;
        #endregion

    }
    public class PlacedNPC_TranslationMask : Placed_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Base;
        public bool XPCIFluff;
        public bool FULLFluff;
        public MaskItem<bool, DistantLODData_TranslationMask> DistantLODData;
        public MaskItem<bool, EnableParent_TranslationMask> EnableParent;
        public bool MerchantContainer;
        public bool Horse;
        public bool RagdollData;
        public bool Scale;
        public bool Position;
        public bool Rotation;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Base, null));
            ret.Add((XPCIFluff, null));
            ret.Add((FULLFluff, null));
            ret.Add((DistantLODData?.Overall ?? true, DistantLODData?.Specific?.GetCrystal()));
            ret.Add((EnableParent?.Overall ?? true, EnableParent?.Specific?.GetCrystal()));
            ret.Add((MerchantContainer, null));
            ret.Add((Horse, null));
            ret.Add((RagdollData, null));
            ret.Add((Scale, null));
            ret.Add((Position, null));
            ret.Add((Rotation, null));
        }
    }
    #endregion





    #endregion

}
