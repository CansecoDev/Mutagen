/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedNpc :
        OblivionMajorRecord,
        IPlacedNpcInternal,
        ILoquiObjectSetter<PlacedNpc>,
        IEquatable<PlacedNpc>,
        IEqualsMask
    {
        #region Ctor
        protected PlacedNpc()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        public FormLinkNullable<Npc> Base { get; set; } = new FormLinkNullable<Npc>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<INpcGetter> IPlacedNpcGetter.Base => this.Base;
        #endregion
        #region XPCIFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XPCIFluff;
        public MemorySlice<Byte>? XPCIFluff
        {
            get => this._XPCIFluff;
            set => this._XPCIFluff = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedNpcGetter.XPCIFluff => this.XPCIFluff;
        #endregion
        #region FULLFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FULLFluff;
        public MemorySlice<Byte>? FULLFluff
        {
            get => this._FULLFluff;
            set => this._FULLFluff = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedNpcGetter.FULLFluff => this.FULLFluff;
        #endregion
        #region DistantLODData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DistantLODData? _DistantLODData;
        public DistantLODData? DistantLODData
        {
            get => _DistantLODData;
            set => _DistantLODData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDistantLODDataGetter? IPlacedNpcGetter.DistantLODData => this.DistantLODData;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IPlacedNpcGetter.EnableParent => this.EnableParent;
        #endregion
        #region MerchantContainer
        public FormLinkNullable<PlacedObject> MerchantContainer { get; set; } = new FormLinkNullable<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IPlacedObjectGetter> IPlacedNpcGetter.MerchantContainer => this.MerchantContainer;
        #endregion
        #region Horse
        public FormLinkNullable<PlacedCreature> Horse { get; set; } = new FormLinkNullable<PlacedCreature>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IPlacedCreatureGetter> IPlacedNpcGetter.Horse => this.Horse;
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RagdollData;
        public MemorySlice<Byte>? RagdollData
        {
            get => this._RagdollData;
            set => this._RagdollData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedNpcGetter.RagdollData => this.RagdollData;
        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.Scale => this.Scale;
        #endregion
        #region Location
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Location? _Location;
        public Location? Location
        {
            get => _Location;
            set => _Location = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationGetter? IPlacedNpcGetter.Location => this.Location;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedNpcMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlacedNpcGetter rhs)) return false;
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(PlacedNpc obj)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => PlacedNpcXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PlacedNpcXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new PlacedNpc CreateFromXml(
            XElement node,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PlacedNpc CreateFromXml(
            XElement node,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedNpc.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static PlacedNpc CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new PlacedNpc();
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static PlacedNpc CreateFromXml(
            string path,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PlacedNpc CreateFromXml(
            string path,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedNpc CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PlacedNpc CreateFromXml(
            Stream stream,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PlacedNpc CreateFromXml(
            Stream stream,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedNpc CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Base = initialValue;
                this.XPCIFluff = initialValue;
                this.FULLFluff = initialValue;
                this.DistantLODData = new MaskItem<TItem, DistantLODData.Mask<TItem>?>(initialValue, new DistantLODData.Mask<TItem>(initialValue));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.MerchantContainer = initialValue;
                this.Horse = initialValue;
                this.RagdollData = initialValue;
                this.Scale = initialValue;
                this.Location = new MaskItem<TItem, Location.Mask<TItem>?>(initialValue, new Location.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Base,
                TItem XPCIFluff,
                TItem FULLFluff,
                TItem DistantLODData,
                TItem EnableParent,
                TItem MerchantContainer,
                TItem Horse,
                TItem RagdollData,
                TItem Scale,
                TItem Location)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Base = Base;
                this.XPCIFluff = XPCIFluff;
                this.FULLFluff = FULLFluff;
                this.DistantLODData = new MaskItem<TItem, DistantLODData.Mask<TItem>?>(DistantLODData, new DistantLODData.Mask<TItem>(DistantLODData));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.MerchantContainer = MerchantContainer;
                this.Horse = Horse;
                this.RagdollData = RagdollData;
                this.Scale = Scale;
                this.Location = new MaskItem<TItem, Location.Mask<TItem>?>(Location, new Location.Mask<TItem>(Location));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Base;
            public TItem XPCIFluff;
            public TItem FULLFluff;
            public MaskItem<TItem, DistantLODData.Mask<TItem>?>? DistantLODData { get; set; }
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public TItem MerchantContainer;
            public TItem Horse;
            public TItem RagdollData;
            public TItem Scale;
            public MaskItem<TItem, Location.Mask<TItem>?>? Location { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.XPCIFluff, rhs.XPCIFluff)) return false;
                if (!object.Equals(this.FULLFluff, rhs.FULLFluff)) return false;
                if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.MerchantContainer, rhs.MerchantContainer)) return false;
                if (!object.Equals(this.Horse, rhs.Horse)) return false;
                if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Base);
                hash.Add(this.XPCIFluff);
                hash.Add(this.FULLFluff);
                hash.Add(this.DistantLODData);
                hash.Add(this.EnableParent);
                hash.Add(this.MerchantContainer);
                hash.Add(this.Horse);
                hash.Add(this.RagdollData);
                hash.Add(this.Scale);
                hash.Add(this.Location);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Base)) return false;
                if (!eval(this.XPCIFluff)) return false;
                if (!eval(this.FULLFluff)) return false;
                if (DistantLODData != null)
                {
                    if (!eval(this.DistantLODData.Overall)) return false;
                    if (this.DistantLODData.Specific != null && !this.DistantLODData.Specific.All(eval)) return false;
                }
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (!eval(this.MerchantContainer)) return false;
                if (!eval(this.Horse)) return false;
                if (!eval(this.RagdollData)) return false;
                if (!eval(this.Scale)) return false;
                if (Location != null)
                {
                    if (!eval(this.Location.Overall)) return false;
                    if (this.Location.Specific != null && !this.Location.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Base)) return true;
                if (eval(this.XPCIFluff)) return true;
                if (eval(this.FULLFluff)) return true;
                if (DistantLODData != null)
                {
                    if (eval(this.DistantLODData.Overall)) return true;
                    if (this.DistantLODData.Specific != null && this.DistantLODData.Specific.Any(eval)) return true;
                }
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (eval(this.MerchantContainer)) return true;
                if (eval(this.Horse)) return true;
                if (eval(this.RagdollData)) return true;
                if (eval(this.Scale)) return true;
                if (Location != null)
                {
                    if (eval(this.Location.Overall)) return true;
                    if (this.Location.Specific != null && this.Location.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedNpc.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Base = eval(this.Base);
                obj.XPCIFluff = eval(this.XPCIFluff);
                obj.FULLFluff = eval(this.FULLFluff);
                obj.DistantLODData = this.DistantLODData == null ? null : new MaskItem<R, DistantLODData.Mask<R>?>(eval(this.DistantLODData.Overall), this.DistantLODData.Specific?.Translate(eval));
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.MerchantContainer = eval(this.MerchantContainer);
                obj.Horse = eval(this.Horse);
                obj.RagdollData = eval(this.RagdollData);
                obj.Scale = eval(this.Scale);
                obj.Location = this.Location == null ? null : new MaskItem<R, Location.Mask<R>?>(eval(this.Location.Overall), this.Location.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PlacedNpc.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PlacedNpc.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PlacedNpc.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Base ?? true)
                    {
                        fg.AppendItem(Base, "Base");
                    }
                    if (printMask?.XPCIFluff ?? true)
                    {
                        fg.AppendItem(XPCIFluff, "XPCIFluff");
                    }
                    if (printMask?.FULLFluff ?? true)
                    {
                        fg.AppendItem(FULLFluff, "FULLFluff");
                    }
                    if (printMask?.DistantLODData?.Overall ?? true)
                    {
                        DistantLODData?.ToString(fg);
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.ToString(fg);
                    }
                    if (printMask?.MerchantContainer ?? true)
                    {
                        fg.AppendItem(MerchantContainer, "MerchantContainer");
                    }
                    if (printMask?.Horse ?? true)
                    {
                        fg.AppendItem(Horse, "Horse");
                    }
                    if (printMask?.RagdollData ?? true)
                    {
                        fg.AppendItem(RagdollData, "RagdollData");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        fg.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.Location?.Overall ?? true)
                    {
                        Location?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Base;
            public Exception? XPCIFluff;
            public Exception? FULLFluff;
            public MaskItem<Exception?, DistantLODData.ErrorMask?>? DistantLODData;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public Exception? MerchantContainer;
            public Exception? Horse;
            public Exception? RagdollData;
            public Exception? Scale;
            public MaskItem<Exception?, Location.ErrorMask?>? Location;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.Base:
                        return Base;
                    case PlacedNpc_FieldIndex.XPCIFluff:
                        return XPCIFluff;
                    case PlacedNpc_FieldIndex.FULLFluff:
                        return FULLFluff;
                    case PlacedNpc_FieldIndex.DistantLODData:
                        return DistantLODData;
                    case PlacedNpc_FieldIndex.EnableParent:
                        return EnableParent;
                    case PlacedNpc_FieldIndex.MerchantContainer:
                        return MerchantContainer;
                    case PlacedNpc_FieldIndex.Horse:
                        return Horse;
                    case PlacedNpc_FieldIndex.RagdollData:
                        return RagdollData;
                    case PlacedNpc_FieldIndex.Scale:
                        return Scale;
                    case PlacedNpc_FieldIndex.Location:
                        return Location;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.Base:
                        this.Base = ex;
                        break;
                    case PlacedNpc_FieldIndex.XPCIFluff:
                        this.XPCIFluff = ex;
                        break;
                    case PlacedNpc_FieldIndex.FULLFluff:
                        this.FULLFluff = ex;
                        break;
                    case PlacedNpc_FieldIndex.DistantLODData:
                        this.DistantLODData = new MaskItem<Exception?, DistantLODData.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.MerchantContainer:
                        this.MerchantContainer = ex;
                        break;
                    case PlacedNpc_FieldIndex.Horse:
                        this.Horse = ex;
                        break;
                    case PlacedNpc_FieldIndex.RagdollData:
                        this.RagdollData = ex;
                        break;
                    case PlacedNpc_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case PlacedNpc_FieldIndex.Location:
                        this.Location = new MaskItem<Exception?, Location.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.Base:
                        this.Base = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.XPCIFluff:
                        this.XPCIFluff = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.FULLFluff:
                        this.FULLFluff = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.DistantLODData:
                        this.DistantLODData = (MaskItem<Exception?, DistantLODData.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.MerchantContainer:
                        this.MerchantContainer = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Horse:
                        this.Horse = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.RagdollData:
                        this.RagdollData = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Location:
                        this.Location = (MaskItem<Exception?, Location.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Base != null) return true;
                if (XPCIFluff != null) return true;
                if (FULLFluff != null) return true;
                if (DistantLODData != null) return true;
                if (EnableParent != null) return true;
                if (MerchantContainer != null) return true;
                if (Horse != null) return true;
                if (RagdollData != null) return true;
                if (Scale != null) return true;
                if (Location != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Base, "Base");
                fg.AppendItem(XPCIFluff, "XPCIFluff");
                fg.AppendItem(FULLFluff, "FULLFluff");
                DistantLODData?.ToString(fg);
                EnableParent?.ToString(fg);
                fg.AppendItem(MerchantContainer, "MerchantContainer");
                fg.AppendItem(Horse, "Horse");
                fg.AppendItem(RagdollData, "RagdollData");
                fg.AppendItem(Scale, "Scale");
                Location?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Base = this.Base.Combine(rhs.Base);
                ret.XPCIFluff = this.XPCIFluff.Combine(rhs.XPCIFluff);
                ret.FULLFluff = this.FULLFluff.Combine(rhs.FULLFluff);
                ret.DistantLODData = this.DistantLODData.Combine(rhs.DistantLODData, (l, r) => l.Combine(r));
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.MerchantContainer = this.MerchantContainer.Combine(rhs.MerchantContainer);
                ret.Horse = this.Horse.Combine(rhs.Horse);
                ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Location = this.Location.Combine(rhs.Location, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Base;
            public bool XPCIFluff;
            public bool FULLFluff;
            public MaskItem<bool, DistantLODData.TranslationMask?> DistantLODData;
            public MaskItem<bool, EnableParent.TranslationMask?> EnableParent;
            public bool MerchantContainer;
            public bool Horse;
            public bool RagdollData;
            public bool Scale;
            public MaskItem<bool, Location.TranslationMask?> Location;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Base = defaultOn;
                this.XPCIFluff = defaultOn;
                this.FULLFluff = defaultOn;
                this.DistantLODData = new MaskItem<bool, DistantLODData.TranslationMask?>(defaultOn, null);
                this.EnableParent = new MaskItem<bool, EnableParent.TranslationMask?>(defaultOn, null);
                this.MerchantContainer = defaultOn;
                this.Horse = defaultOn;
                this.RagdollData = defaultOn;
                this.Scale = defaultOn;
                this.Location = new MaskItem<bool, Location.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Base, null));
                ret.Add((XPCIFluff, null));
                ret.Add((FULLFluff, null));
                ret.Add((DistantLODData?.Overall ?? true, DistantLODData?.Specific?.GetCrystal()));
                ret.Add((EnableParent?.Overall ?? true, EnableParent?.Specific?.GetCrystal()));
                ret.Add((MerchantContainer, null));
                ret.Add((Horse, null));
                ret.Add((RagdollData, null));
                ret.Add((Scale, null));
                ret.Add((Location?.Overall ?? true, Location?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = PlacedNpc_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => PlacedNpcCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => PlacedNpcCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedNpcCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedNpcCommon.Instance.RemapLinks(this, mapping);
        public PlacedNpc(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public PlacedNpc(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public PlacedNpc(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedNpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedNpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new PlacedNpc CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static PlacedNpc CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PlacedNpc();
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPlacedNpcGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedNpc GetNew()
        {
            return new PlacedNpc();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedNpc :
        IPlacedNpcGetter,
        IOblivionMajorRecord,
        IPlaced,
        ILoquiObjectSetter<IPlacedNpcInternal>
    {
        new FormLinkNullable<Npc> Base { get; set; }
        new MemorySlice<Byte>? XPCIFluff { get; set; }
        new MemorySlice<Byte>? FULLFluff { get; set; }
        new DistantLODData? DistantLODData { get; set; }
        new EnableParent? EnableParent { get; set; }
        new FormLinkNullable<PlacedObject> MerchantContainer { get; set; }
        new FormLinkNullable<PlacedCreature> Horse { get; set; }
        new MemorySlice<Byte>? RagdollData { get; set; }
        new Single? Scale { get; set; }
        new Location? Location { get; set; }
    }

    public partial interface IPlacedNpcInternal :
        IOblivionMajorRecordInternal,
        IPlacedNpc,
        IPlacedNpcGetter
    {
    }

    public partial interface IPlacedNpcGetter :
        IOblivionMajorRecordGetter,
        IPlacedGetter,
        ILoquiObject<IPlacedNpcGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => PlacedNpc_Registration.Instance;
        IFormLinkNullable<INpcGetter> Base { get; }
        ReadOnlyMemorySlice<Byte>? XPCIFluff { get; }
        ReadOnlyMemorySlice<Byte>? FULLFluff { get; }
        IDistantLODDataGetter? DistantLODData { get; }
        IEnableParentGetter? EnableParent { get; }
        IFormLinkNullable<IPlacedObjectGetter> MerchantContainer { get; }
        IFormLinkNullable<IPlacedCreatureGetter> Horse { get; }
        ReadOnlyMemorySlice<Byte>? RagdollData { get; }
        Single? Scale { get; }
        ILocationGetter? Location { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedNpcMixIn
    {
        public static void Clear(this IPlacedNpcInternal item)
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedNpc.Mask<bool> GetEqualsMask(
            this IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlacedNpcGetter item,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlacedNpcGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPlacedNpcGetter item,
            PlacedNpc.Mask<bool?> checkMask)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PlacedNpc.Mask<bool> GetHasBeenSetMask(this IPlacedNpcGetter item)
        {
            var ret = new PlacedNpc.Mask<bool>(false);
            ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPlacedNpcGetter item,
            IPlacedNpcGetter rhs)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPlacedNpcInternal lhs,
            IPlacedNpcGetter rhs,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = PlacedNpc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedNpcInternal lhs,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPlacedNpcInternal item,
            XElement node,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPlacedNpcInternal item,
            XElement node,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedNpc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IPlacedNpcInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedNpcInternal item,
            string path,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedNpcInternal item,
            string path,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedNpcInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPlacedNpcInternal item,
            Stream stream,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedNpcInternal item,
            Stream stream,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedNpcInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PlacedNpc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPlacedNpcInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IPlacedNpcInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PlacedNpc_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Base = 5,
        XPCIFluff = 6,
        FULLFluff = 7,
        DistantLODData = 8,
        EnableParent = 9,
        MerchantContainer = 10,
        Horse = 11,
        RagdollData = 12,
        Scale = 13,
        Location = 14,
    }
    #endregion

    #region Registration
    public partial class PlacedNpc_Registration : ILoquiRegistration
    {
        public static readonly PlacedNpc_Registration Instance = new PlacedNpc_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 137,
            version: 0);

        public const string GUID = "1bd10cd8-4d9b-4cc0-9639-51f02a1b2e36";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(PlacedNpc.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedNpc.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedNpc);

        public static readonly Type GetterType = typeof(IPlacedNpcGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedNpc);

        public static readonly Type? InternalSetterType = typeof(IPlacedNpcInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedNpc";

        public const string Name = "PlacedNpc";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BASE":
                    return (ushort)PlacedNpc_FieldIndex.Base;
                case "XPCIFLUFF":
                    return (ushort)PlacedNpc_FieldIndex.XPCIFluff;
                case "FULLFLUFF":
                    return (ushort)PlacedNpc_FieldIndex.FULLFluff;
                case "DISTANTLODDATA":
                    return (ushort)PlacedNpc_FieldIndex.DistantLODData;
                case "ENABLEPARENT":
                    return (ushort)PlacedNpc_FieldIndex.EnableParent;
                case "MERCHANTCONTAINER":
                    return (ushort)PlacedNpc_FieldIndex.MerchantContainer;
                case "HORSE":
                    return (ushort)PlacedNpc_FieldIndex.Horse;
                case "RAGDOLLDATA":
                    return (ushort)PlacedNpc_FieldIndex.RagdollData;
                case "SCALE":
                    return (ushort)PlacedNpc_FieldIndex.Scale;
                case "LOCATION":
                    return (ushort)PlacedNpc_FieldIndex.Location;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
            switch (enu)
            {
                case PlacedNpc_FieldIndex.Base:
                case PlacedNpc_FieldIndex.XPCIFluff:
                case PlacedNpc_FieldIndex.FULLFluff:
                case PlacedNpc_FieldIndex.DistantLODData:
                case PlacedNpc_FieldIndex.EnableParent:
                case PlacedNpc_FieldIndex.MerchantContainer:
                case PlacedNpc_FieldIndex.Horse:
                case PlacedNpc_FieldIndex.RagdollData:
                case PlacedNpc_FieldIndex.Scale:
                case PlacedNpc_FieldIndex.Location:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
            switch (enu)
            {
                case PlacedNpc_FieldIndex.DistantLODData:
                case PlacedNpc_FieldIndex.EnableParent:
                case PlacedNpc_FieldIndex.Location:
                    return true;
                case PlacedNpc_FieldIndex.Base:
                case PlacedNpc_FieldIndex.XPCIFluff:
                case PlacedNpc_FieldIndex.FULLFluff:
                case PlacedNpc_FieldIndex.MerchantContainer:
                case PlacedNpc_FieldIndex.Horse:
                case PlacedNpc_FieldIndex.RagdollData:
                case PlacedNpc_FieldIndex.Scale:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
            switch (enu)
            {
                case PlacedNpc_FieldIndex.Base:
                case PlacedNpc_FieldIndex.XPCIFluff:
                case PlacedNpc_FieldIndex.FULLFluff:
                case PlacedNpc_FieldIndex.DistantLODData:
                case PlacedNpc_FieldIndex.EnableParent:
                case PlacedNpc_FieldIndex.MerchantContainer:
                case PlacedNpc_FieldIndex.Horse:
                case PlacedNpc_FieldIndex.RagdollData:
                case PlacedNpc_FieldIndex.Scale:
                case PlacedNpc_FieldIndex.Location:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
            switch (enu)
            {
                case PlacedNpc_FieldIndex.Base:
                    return "Base";
                case PlacedNpc_FieldIndex.XPCIFluff:
                    return "XPCIFluff";
                case PlacedNpc_FieldIndex.FULLFluff:
                    return "FULLFluff";
                case PlacedNpc_FieldIndex.DistantLODData:
                    return "DistantLODData";
                case PlacedNpc_FieldIndex.EnableParent:
                    return "EnableParent";
                case PlacedNpc_FieldIndex.MerchantContainer:
                    return "MerchantContainer";
                case PlacedNpc_FieldIndex.Horse:
                    return "Horse";
                case PlacedNpc_FieldIndex.RagdollData:
                    return "RagdollData";
                case PlacedNpc_FieldIndex.Scale:
                    return "Scale";
                case PlacedNpc_FieldIndex.Location:
                    return "Location";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
            switch (enu)
            {
                case PlacedNpc_FieldIndex.Base:
                case PlacedNpc_FieldIndex.XPCIFluff:
                case PlacedNpc_FieldIndex.FULLFluff:
                case PlacedNpc_FieldIndex.DistantLODData:
                case PlacedNpc_FieldIndex.EnableParent:
                case PlacedNpc_FieldIndex.MerchantContainer:
                case PlacedNpc_FieldIndex.Horse:
                case PlacedNpc_FieldIndex.RagdollData:
                case PlacedNpc_FieldIndex.Scale:
                case PlacedNpc_FieldIndex.Location:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
            switch (enu)
            {
                case PlacedNpc_FieldIndex.Base:
                case PlacedNpc_FieldIndex.XPCIFluff:
                case PlacedNpc_FieldIndex.FULLFluff:
                case PlacedNpc_FieldIndex.DistantLODData:
                case PlacedNpc_FieldIndex.EnableParent:
                case PlacedNpc_FieldIndex.MerchantContainer:
                case PlacedNpc_FieldIndex.Horse:
                case PlacedNpc_FieldIndex.RagdollData:
                case PlacedNpc_FieldIndex.Scale:
                case PlacedNpc_FieldIndex.Location:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
            switch (enu)
            {
                case PlacedNpc_FieldIndex.Base:
                    return typeof(FormLinkNullable<Npc>);
                case PlacedNpc_FieldIndex.XPCIFluff:
                    return typeof(MemorySlice<Byte>);
                case PlacedNpc_FieldIndex.FULLFluff:
                    return typeof(MemorySlice<Byte>);
                case PlacedNpc_FieldIndex.DistantLODData:
                    return typeof(DistantLODData);
                case PlacedNpc_FieldIndex.EnableParent:
                    return typeof(EnableParent);
                case PlacedNpc_FieldIndex.MerchantContainer:
                    return typeof(FormLinkNullable<PlacedObject>);
                case PlacedNpc_FieldIndex.Horse:
                    return typeof(FormLinkNullable<PlacedCreature>);
                case PlacedNpc_FieldIndex.RagdollData:
                    return typeof(MemorySlice<Byte>);
                case PlacedNpc_FieldIndex.Scale:
                    return typeof(Single);
                case PlacedNpc_FieldIndex.Location:
                    return typeof(Location);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PlacedNpcXmlWriteTranslation);
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType XPCI_HEADER = new RecordType("XPCI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType XLOD_HEADER = new RecordType("XLOD");
        public static readonly RecordType XESP_HEADER = new RecordType("XESP");
        public static readonly RecordType XMRC_HEADER = new RecordType("XMRC");
        public static readonly RecordType XHRS_HEADER = new RecordType("XHRS");
        public static readonly RecordType XRGD_HEADER = new RecordType("XRGD");
        public static readonly RecordType XSCL_HEADER = new RecordType("XSCL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = ACHR_HEADER;
        public static readonly Type BinaryWriteTranslation = typeof(PlacedNpcBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PlacedNpcSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly PlacedNpcSetterCommon Instance = new PlacedNpcSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedNpcInternal item)
        {
            ClearPartial();
            item.Base = FormLinkNullable<Npc>.Null;
            item.XPCIFluff = default;
            item.FULLFluff = default;
            item.DistantLODData = null;
            item.EnableParent = null;
            item.MerchantContainer = FormLinkNullable<PlacedObject>.Null;
            item.Horse = FormLinkNullable<PlacedCreature>.Null;
            item.RagdollData = default;
            item.Scale = default;
            item.Location = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPlacedNpcInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedNpcInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IPlacedNpcInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IPlacedNpcInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    PlacedNpcXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (PlacedNpc)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (PlacedNpc)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedNpcInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IPlacedNpcInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PlacedNpcBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedNpcBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedNpc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedNpc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PlacedNpcCommon : OblivionMajorRecordCommon
    {
        public new static readonly PlacedNpcCommon Instance = new PlacedNpcCommon();

        public PlacedNpc.Mask<bool> GetEqualsMask(
            IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedNpc.Mask<bool>(false);
            ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            PlacedNpc.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Base = object.Equals(item.Base, rhs.Base);
            ret.XPCIFluff = MemorySliceExt.Equal(item.XPCIFluff, rhs.XPCIFluff);
            ret.FULLFluff = MemorySliceExt.Equal(item.FULLFluff, rhs.FULLFluff);
            ret.DistantLODData = EqualsMaskHelper.EqualsHelper(
                item.DistantLODData,
                rhs.DistantLODData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MerchantContainer = object.Equals(item.MerchantContainer, rhs.MerchantContainer);
            ret.Horse = object.Equals(item.Horse, rhs.Horse);
            ret.RagdollData = MemorySliceExt.Equal(item.RagdollData, rhs.RagdollData);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.Location = EqualsMaskHelper.EqualsHelper(
                item.Location,
                rhs.Location,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPlacedNpcGetter item,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPlacedNpcGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PlacedNpc =>");
            }
            else
            {
                fg.AppendLine($"{name} (PlacedNpc) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPlacedNpcGetter item,
            FileGeneration fg,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Base ?? true)
                && item.Base.TryGet(out var BaseItem))
            {
                fg.AppendItem(BaseItem, "Base");
            }
            if ((printMask?.XPCIFluff ?? true)
                && item.XPCIFluff.TryGet(out var XPCIFluffItem))
            {
                fg.AppendLine($"XPCIFluff => {SpanExt.ToHexString(XPCIFluffItem)}");
            }
            if ((printMask?.FULLFluff ?? true)
                && item.FULLFluff.TryGet(out var FULLFluffItem))
            {
                fg.AppendLine($"FULLFluff => {SpanExt.ToHexString(FULLFluffItem)}");
            }
            if ((printMask?.DistantLODData?.Overall ?? true)
                && item.DistantLODData.TryGet(out var DistantLODDataItem))
            {
                DistantLODDataItem?.ToString(fg, "DistantLODData");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent.TryGet(out var EnableParentItem))
            {
                EnableParentItem?.ToString(fg, "EnableParent");
            }
            if ((printMask?.MerchantContainer ?? true)
                && item.MerchantContainer.TryGet(out var MerchantContainerItem))
            {
                fg.AppendItem(MerchantContainerItem, "MerchantContainer");
            }
            if ((printMask?.Horse ?? true)
                && item.Horse.TryGet(out var HorseItem))
            {
                fg.AppendItem(HorseItem, "Horse");
            }
            if ((printMask?.RagdollData ?? true)
                && item.RagdollData.TryGet(out var RagdollDataItem))
            {
                fg.AppendLine($"RagdollData => {SpanExt.ToHexString(RagdollDataItem)}");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale.TryGet(out var ScaleItem))
            {
                fg.AppendItem(ScaleItem, "Scale");
            }
            if ((printMask?.Location?.Overall ?? true)
                && item.Location.TryGet(out var LocationItem))
            {
                LocationItem?.ToString(fg, "Location");
            }
        }
        
        public bool HasBeenSet(
            IPlacedNpcGetter item,
            PlacedNpc.Mask<bool?> checkMask)
        {
            if (checkMask.Base.HasValue && checkMask.Base.Value != (item.Base.FormKey != null)) return false;
            if (checkMask.XPCIFluff.HasValue && checkMask.XPCIFluff.Value != (item.XPCIFluff != null)) return false;
            if (checkMask.FULLFluff.HasValue && checkMask.FULLFluff.Value != (item.FULLFluff != null)) return false;
            if (checkMask.DistantLODData?.Overall.HasValue ?? false && checkMask.DistantLODData.Overall.Value != (item.DistantLODData != null)) return false;
            if (checkMask.DistantLODData?.Specific != null && (item.DistantLODData == null || !item.DistantLODData.HasBeenSet(checkMask.DistantLODData.Specific))) return false;
            if (checkMask.EnableParent?.Overall.HasValue ?? false && checkMask.EnableParent.Overall.Value != (item.EnableParent != null)) return false;
            if (checkMask.EnableParent?.Specific != null && (item.EnableParent == null || !item.EnableParent.HasBeenSet(checkMask.EnableParent.Specific))) return false;
            if (checkMask.MerchantContainer.HasValue && checkMask.MerchantContainer.Value != (item.MerchantContainer.FormKey != null)) return false;
            if (checkMask.Horse.HasValue && checkMask.Horse.Value != (item.Horse.FormKey != null)) return false;
            if (checkMask.RagdollData.HasValue && checkMask.RagdollData.Value != (item.RagdollData != null)) return false;
            if (checkMask.Scale.HasValue && checkMask.Scale.Value != (item.Scale != null)) return false;
            if (checkMask.Location?.Overall.HasValue ?? false && checkMask.Location.Overall.Value != (item.Location != null)) return false;
            if (checkMask.Location?.Specific != null && (item.Location == null || !item.Location.HasBeenSet(checkMask.Location.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IPlacedNpcGetter item,
            PlacedNpc.Mask<bool> mask)
        {
            mask.Base = (item.Base.FormKey != null);
            mask.XPCIFluff = (item.XPCIFluff != null);
            mask.FULLFluff = (item.FULLFluff != null);
            var itemDistantLODData = item.DistantLODData;
            mask.DistantLODData = new MaskItem<bool, DistantLODData.Mask<bool>?>(itemDistantLODData != null, itemDistantLODData?.GetHasBeenSetMask());
            var itemEnableParent = item.EnableParent;
            mask.EnableParent = new MaskItem<bool, EnableParent.Mask<bool>?>(itemEnableParent != null, itemEnableParent?.GetHasBeenSetMask());
            mask.MerchantContainer = (item.MerchantContainer.FormKey != null);
            mask.Horse = (item.Horse.FormKey != null);
            mask.RagdollData = (item.RagdollData != null);
            mask.Scale = (item.Scale != null);
            var itemLocation = item.Location;
            mask.Location = new MaskItem<bool, Location.Mask<bool>?>(itemLocation != null, itemLocation?.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static PlacedNpc_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNpc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (PlacedNpc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (PlacedNpc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (PlacedNpc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (PlacedNpc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedNpc_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedNpc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedNpcGetter? lhs,
            IPlacedNpcGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Base.Equals(rhs.Base)) return false;
            if (!MemorySliceExt.Equal(lhs.XPCIFluff, rhs.XPCIFluff)) return false;
            if (!MemorySliceExt.Equal(lhs.FULLFluff, rhs.FULLFluff)) return false;
            if (!object.Equals(lhs.DistantLODData, rhs.DistantLODData)) return false;
            if (!object.Equals(lhs.EnableParent, rhs.EnableParent)) return false;
            if (!lhs.MerchantContainer.Equals(rhs.MerchantContainer)) return false;
            if (!lhs.Horse.Equals(rhs.Horse)) return false;
            if (!MemorySliceExt.Equal(lhs.RagdollData, rhs.RagdollData)) return false;
            if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            if (!object.Equals(lhs.Location, rhs.Location)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedNpcGetter?)lhs,
                rhs: rhs as IPlacedNpcGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedNpcGetter?)lhs,
                rhs: rhs as IPlacedNpcGetter);
        }
        
        public virtual int GetHashCode(IPlacedNpcGetter item)
        {
            var hash = new HashCode();
            if (item.Base.TryGet(out var Baseitem))
            {
                hash.Add(Baseitem);
            }
            if (item.XPCIFluff.TryGet(out var XPCIFluffItem))
            {
                hash.Add(XPCIFluffItem);
            }
            if (item.FULLFluff.TryGet(out var FULLFluffItem))
            {
                hash.Add(FULLFluffItem);
            }
            if (item.DistantLODData.TryGet(out var DistantLODDataitem))
            {
                hash.Add(DistantLODDataitem);
            }
            if (item.EnableParent.TryGet(out var EnableParentitem))
            {
                hash.Add(EnableParentitem);
            }
            if (item.MerchantContainer.TryGet(out var MerchantContaineritem))
            {
                hash.Add(MerchantContaineritem);
            }
            if (item.Horse.TryGet(out var Horseitem))
            {
                hash.Add(Horseitem);
            }
            if (item.RagdollData.TryGet(out var RagdollDataItem))
            {
                hash.Add(RagdollDataItem);
            }
            if (item.Scale.TryGet(out var Scaleitem))
            {
                hash.Add(Scaleitem);
            }
            if (item.Location.TryGet(out var Locationitem))
            {
                hash.Add(Locationitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedNpcGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedNpcGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedNpc.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IPlacedNpcGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Base.FormKey.TryGet(out var BaseKey))
            {
                yield return BaseKey;
            }
            if (obj.EnableParent.TryGet(out var EnableParentItems))
            {
                foreach (var item in EnableParentItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MerchantContainer.FormKey.TryGet(out var MerchantContainerKey))
            {
                yield return MerchantContainerKey;
            }
            if (obj.Horse.FormKey.TryGet(out var HorseKey))
            {
                yield return HorseKey;
            }
            yield break;
        }
        
        public void RemapLinks(IPlacedNpcGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(PlacedNpc obj, PlacedNpc rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new PlacedNpc(getNextFormKey());
            ret.DeepCopyIn((PlacedNpc)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (PlacedNpc)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class PlacedNpcSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly PlacedNpcSetterTranslationCommon Instance = new PlacedNpcSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IPlacedNpcInternal item,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IPlacedNpc item,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Base) ?? true))
            {
                item.Base = rhs.Base.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.XPCIFluff) ?? true))
            {
                if(rhs.XPCIFluff.TryGet(out var XPCIFluffrhs))
                {
                    item.XPCIFluff = XPCIFluffrhs.ToArray();
                }
                else
                {
                    item.XPCIFluff = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.FULLFluff) ?? true))
            {
                if(rhs.FULLFluff.TryGet(out var FULLFluffrhs))
                {
                    item.FULLFluff = FULLFluffrhs.ToArray();
                }
                else
                {
                    item.FULLFluff = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.DistantLODData) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.DistantLODData);
                try
                {
                    if(rhs.DistantLODData.TryGet(out var rhsDistantLODData))
                    {
                        item.DistantLODData = rhsDistantLODData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.DistantLODData));
                    }
                    else
                    {
                        item.DistantLODData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent.TryGet(out var rhsEnableParent))
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.MerchantContainer) ?? true))
            {
                item.MerchantContainer = rhs.MerchantContainer.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Horse) ?? true))
            {
                item.Horse = rhs.Horse.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.RagdollData) ?? true))
            {
                if(rhs.RagdollData.TryGet(out var RagdollDatarhs))
                {
                    item.RagdollData = RagdollDatarhs.ToArray();
                }
                else
                {
                    item.RagdollData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Location) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Location);
                try
                {
                    if(rhs.Location.TryGet(out var rhsLocation))
                    {
                        item.Location = rhsLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Location));
                    }
                    else
                    {
                        item.Location = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedNpcInternal)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedNpc)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedNpcInternal)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedNpc)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PlacedNpc
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNpc_Registration.Instance;
        public new static PlacedNpc_Registration Registration => PlacedNpc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedNpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedNpcSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedNpcSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedNpcXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static PlacedNpcXmlWriteTranslation Instance = new PlacedNpcXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPlacedNpcGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Base.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Base) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Base),
                    item: item.Base.FormKey.Value,
                    fieldIndex: (int)PlacedNpc_FieldIndex.Base,
                    errorMask: errorMask);
            }
            if ((item.XPCIFluff != null)
                && (translationMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.XPCIFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.XPCIFluff),
                    item: item.XPCIFluff.Value,
                    fieldIndex: (int)PlacedNpc_FieldIndex.XPCIFluff,
                    errorMask: errorMask);
            }
            if ((item.FULLFluff != null)
                && (translationMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.FULLFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FULLFluff),
                    item: item.FULLFluff.Value,
                    fieldIndex: (int)PlacedNpc_FieldIndex.FULLFluff,
                    errorMask: errorMask);
            }
            if ((item.DistantLODData != null)
                && (translationMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.DistantLODData) ?? true))
            {
                if (item.DistantLODData.TryGet(out var DistantLODDataItem))
                {
                    ((DistantLODDataXmlWriteTranslation)((IXmlItem)DistantLODDataItem).XmlWriteTranslator).Write(
                        item: DistantLODDataItem,
                        node: node,
                        name: nameof(item.DistantLODData),
                        fieldIndex: (int)PlacedNpc_FieldIndex.DistantLODData,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.DistantLODData));
                }
            }
            if ((item.EnableParent != null)
                && (translationMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.EnableParent) ?? true))
            {
                if (item.EnableParent.TryGet(out var EnableParentItem))
                {
                    ((EnableParentXmlWriteTranslation)((IXmlItem)EnableParentItem).XmlWriteTranslator).Write(
                        item: EnableParentItem,
                        node: node,
                        name: nameof(item.EnableParent),
                        fieldIndex: (int)PlacedNpc_FieldIndex.EnableParent,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.EnableParent));
                }
            }
            if ((item.MerchantContainer.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.MerchantContainer) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MerchantContainer),
                    item: item.MerchantContainer.FormKey.Value,
                    fieldIndex: (int)PlacedNpc_FieldIndex.MerchantContainer,
                    errorMask: errorMask);
            }
            if ((item.Horse.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Horse) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Horse),
                    item: item.Horse.FormKey.Value,
                    fieldIndex: (int)PlacedNpc_FieldIndex.Horse,
                    errorMask: errorMask);
            }
            if ((item.RagdollData != null)
                && (translationMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.RagdollData) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RagdollData),
                    item: item.RagdollData.Value,
                    fieldIndex: (int)PlacedNpc_FieldIndex.RagdollData,
                    errorMask: errorMask);
            }
            if ((item.Scale != null)
                && (translationMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Scale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Scale),
                    item: item.Scale.Value,
                    fieldIndex: (int)PlacedNpc_FieldIndex.Scale,
                    errorMask: errorMask);
            }
            if ((item.Location != null)
                && (translationMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Location) ?? true))
            {
                if (item.Location.TryGet(out var LocationItem))
                {
                    ((LocationXmlWriteTranslation)((IXmlItem)LocationItem).XmlWriteTranslator).Write(
                        item: LocationItem,
                        node: node,
                        name: nameof(item.Location),
                        fieldIndex: (int)PlacedNpc_FieldIndex.Location,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Location));
                }
            }
        }

        public void Write(
            XElement node,
            IPlacedNpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PlacedNpc");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PlacedNpc");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class PlacedNpcXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static PlacedNpcXmlCreateTranslation Instance = new PlacedNpcXmlCreateTranslation();

        public static void FillPublicXml(
            IPlacedNpcInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PlacedNpcXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPlacedNpcInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Base":
                    errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Base);
                    try
                    {
                        item.Base = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "XPCIFluff":
                    errorMask?.PushIndex((int)PlacedNpc_FieldIndex.XPCIFluff);
                    try
                    {
                        item.XPCIFluff = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FULLFluff":
                    errorMask?.PushIndex((int)PlacedNpc_FieldIndex.FULLFluff);
                    try
                    {
                        item.FULLFluff = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DistantLODData":
                    errorMask?.PushIndex((int)PlacedNpc_FieldIndex.DistantLODData);
                    try
                    {
                        item.DistantLODData = LoquiXmlTranslation<DistantLODData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.DistantLODData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnableParent":
                    errorMask?.PushIndex((int)PlacedNpc_FieldIndex.EnableParent);
                    try
                    {
                        item.EnableParent = LoquiXmlTranslation<EnableParent>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.EnableParent));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MerchantContainer":
                    errorMask?.PushIndex((int)PlacedNpc_FieldIndex.MerchantContainer);
                    try
                    {
                        item.MerchantContainer = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Horse":
                    errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Horse);
                    try
                    {
                        item.Horse = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RagdollData":
                    errorMask?.PushIndex((int)PlacedNpc_FieldIndex.RagdollData);
                    try
                    {
                        item.RagdollData = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scale":
                    errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Scale);
                    try
                    {
                        item.Scale = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Location":
                    errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Location);
                    try
                    {
                        item.Location = LoquiXmlTranslation<Location>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Location));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class PlacedNpcXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPlacedNpcGetter item,
            XElement node,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedNpcXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedNpc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPlacedNpcGetter item,
            string path,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPlacedNpcGetter item,
            Stream stream,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedNpcBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PlacedNpcBinaryWriteTranslation Instance = new PlacedNpcBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IPlacedNpcGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Base,
                header: recordTypeConverter.ConvertToCustom(PlacedNpc_Registration.NAME_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XPCIFluff,
                header: recordTypeConverter.ConvertToCustom(PlacedNpc_Registration.XPCI_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FULLFluff,
                header: recordTypeConverter.ConvertToCustom(PlacedNpc_Registration.FULL_HEADER));
            if (item.DistantLODData.TryGet(out var DistantLODDataItem))
            {
                ((DistantLODDataBinaryWriteTranslation)((IBinaryItem)DistantLODDataItem).BinaryWriteTranslator).Write(
                    item: DistantLODDataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.EnableParent.TryGet(out var EnableParentItem))
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MerchantContainer,
                header: recordTypeConverter.ConvertToCustom(PlacedNpc_Registration.XMRC_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Horse,
                header: recordTypeConverter.ConvertToCustom(PlacedNpc_Registration.XHRS_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RagdollData,
                header: recordTypeConverter.ConvertToCustom(PlacedNpc_Registration.XRGD_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: recordTypeConverter.ConvertToCustom(PlacedNpc_Registration.XSCL_HEADER));
            if (item.Location.TryGet(out var LocationItem))
            {
                using (HeaderExport.Subrecord(writer, PlacedNpc_Registration.DATA_HEADER))
                {
                    ((LocationBinaryWriteTranslation)((IBinaryItem)LocationItem).BinaryWriteTranslator).Write(
                        item: LocationItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IPlacedNpcGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(PlacedNpc_Registration.ACHR_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PlacedNpcBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static PlacedNpcBinaryCreateTranslation Instance = new PlacedNpcBinaryCreateTranslation();

        public override RecordType RecordType => PlacedNpc_Registration.ACHR_HEADER;
        public static void FillBinaryStructs(
            IPlacedNpcInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IPlacedNpcInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x454D414E: // NAME
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Base = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.Base);
                }
                case 0x49435058: // XPCI
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XPCIFluff = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.XPCIFluff);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FULLFluff = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.FULLFluff);
                }
                case 0x444F4C58: // XLOD
                {
                    item.DistantLODData = Mutagen.Bethesda.Oblivion.DistantLODData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.DistantLODData);
                }
                case 0x50534558: // XESP
                {
                    item.EnableParent = Mutagen.Bethesda.Oblivion.EnableParent.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.EnableParent);
                }
                case 0x43524D58: // XMRC
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MerchantContainer = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.MerchantContainer);
                }
                case 0x53524858: // XHRS
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Horse = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.Horse);
                }
                case 0x44475258: // XRGD
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.RagdollData);
                }
                case 0x4C435358: // XSCL
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.Scale);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.Location = Mutagen.Bethesda.Oblivion.Location.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.Location);
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class PlacedNpcBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedNpcBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IPlacedNpcGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNpc_Registration.Instance;
        public new static PlacedNpc_Registration Registration => PlacedNpc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedNpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedNpcSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPlacedNpcGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => PlacedNpcCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => PlacedNpcCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedNpcCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedNpcCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => PlacedNpcXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PlacedNpcXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedNpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedNpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Base
        private int? _BaseLocation;
        public bool Base_IsSet => _BaseLocation.HasValue;
        public IFormLinkNullable<INpcGetter> Base => _BaseLocation.HasValue ? new FormLinkNullable<INpcGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BaseLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<INpcGetter>.Null;
        #endregion
        #region XPCIFluff
        private int? _XPCIFluffLocation;
        public ReadOnlyMemorySlice<Byte>? XPCIFluff => _XPCIFluffLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _XPCIFluffLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FULLFluff
        private int? _FULLFluffLocation;
        public ReadOnlyMemorySlice<Byte>? FULLFluff => _FULLFluffLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _FULLFluffLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DistantLODData
        private RangeInt32? _DistantLODDataLocation;
        public IDistantLODDataGetter? DistantLODData => _DistantLODDataLocation.HasValue ? DistantLODDataBinaryOverlay.DistantLODDataFactory(new BinaryMemoryReadStream(_data.Slice(_DistantLODDataLocation!.Value.Min)), _package) : default;
        public bool DistantLODData_IsSet => _DistantLODDataLocation.HasValue;
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(new BinaryMemoryReadStream(_data.Slice(_EnableParentLocation!.Value.Min)), _package) : default;
        public bool EnableParent_IsSet => _EnableParentLocation.HasValue;
        #endregion
        #region MerchantContainer
        private int? _MerchantContainerLocation;
        public bool MerchantContainer_IsSet => _MerchantContainerLocation.HasValue;
        public IFormLinkNullable<IPlacedObjectGetter> MerchantContainer => _MerchantContainerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MerchantContainerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region Horse
        private int? _HorseLocation;
        public bool Horse_IsSet => _HorseLocation.HasValue;
        public IFormLinkNullable<IPlacedCreatureGetter> Horse => _HorseLocation.HasValue ? new FormLinkNullable<IPlacedCreatureGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _HorseLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedCreatureGetter>.Null;
        #endregion
        #region RagdollData
        private int? _RagdollDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollData => _RagdollDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _RagdollDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _ScaleLocation.Value, _package.MetaData.Constants)) : default(Single?);
        #endregion
        public ILocationGetter? Location { get; private set; }
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedNpcBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PlacedNpcBinaryOverlay PlacedNpcFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new PlacedNpcBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PlacedNpcBinaryOverlay PlacedNpcFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PlacedNpcFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x454D414E: // NAME
                {
                    _BaseLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.Base);
                }
                case 0x49435058: // XPCI
                {
                    _XPCIFluffLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.XPCIFluff);
                }
                case 0x4C4C5546: // FULL
                {
                    _FULLFluffLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.FULLFluff);
                }
                case 0x444F4C58: // XLOD
                {
                    _DistantLODDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.DistantLODData);
                }
                case 0x50534558: // XESP
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.EnableParent);
                }
                case 0x43524D58: // XMRC
                {
                    _MerchantContainerLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.MerchantContainer);
                }
                case 0x53524858: // XHRS
                {
                    _HorseLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.Horse);
                }
                case 0x44475258: // XRGD
                {
                    _RagdollDataLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.RagdollData);
                }
                case 0x4C435358: // XSCL
                {
                    _ScaleLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.Scale);
                }
                case 0x41544144: // DATA
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.Location = LocationBinaryOverlay.LocationFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)PlacedNpc_FieldIndex.Location);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedNpcMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

