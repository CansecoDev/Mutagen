/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedObject :
        OblivionMajorRecord,
        IPlacedObjectInternal,
        ILoquiObjectSetter<PlacedObject>,
        IPlaced,
        ILinkSubContainer,
        IEquatable<PlacedObject>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static PlacedObject_Registration Registration => PlacedObject_Registration.Instance;
        protected override object CommonInstance => PlacedObjectCommon.Instance;

        #region Ctor
        protected PlacedObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        public IFormIDSetLink<OblivionMajorRecord> Base_Property { get; } = new FormIDSetLink<OblivionMajorRecord>();
        public OblivionMajorRecord Base { get => Base_Property.Item; set => Base_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<OblivionMajorRecord> IPlacedObject.Base_Property => this.Base_Property;
        IOblivionMajorRecordInternalGetter IPlacedObjectGetter.Base => this.Base_Property.Item;
        IFormIDSetLinkGetter<IOblivionMajorRecordInternalGetter> IPlacedObjectGetter.Base_Property => this.Base_Property;
        #endregion
        #region XPCIFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool XPCIFluff_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.XPCIFluff];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.XPCIFluff, nameof(XPCIFluff_IsSet));
        }
        bool IPlacedObjectGetter.XPCIFluff_IsSet => XPCIFluff_IsSet;
        protected Byte[] _XPCIFluff;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] XPCIFluff
        {
            get => this._XPCIFluff;
            set => XPCIFluff_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IPlacedObjectGetter.XPCIFluff => this.XPCIFluff;
        public void XPCIFluff_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _XPCIFluff, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.XPCIFluff, nameof(XPCIFluff), nameof(XPCIFluff_IsSet));
        }
        public void XPCIFluff_Unset()
        {
            this.XPCIFluff_Set(default(Byte[]), false);
        }
        #endregion
        #region FULLFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool FULLFluff_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.FULLFluff];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.FULLFluff, nameof(FULLFluff_IsSet));
        }
        bool IPlacedObjectGetter.FULLFluff_IsSet => FULLFluff_IsSet;
        protected Byte[] _FULLFluff;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] FULLFluff
        {
            get => this._FULLFluff;
            set => FULLFluff_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IPlacedObjectGetter.FULLFluff => this.FULLFluff;
        public void FULLFluff_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _FULLFluff, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.FULLFluff, nameof(FULLFluff), nameof(FULLFluff_IsSet));
        }
        public void FULLFluff_Unset()
        {
            this.FULLFluff_Set(default(Byte[]), false);
        }
        #endregion
        #region TeleportDestination
        public bool TeleportDestination_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.TeleportDestination];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.TeleportDestination, nameof(TeleportDestination_IsSet));
        }
        bool IPlacedObjectGetter.TeleportDestination_IsSet => TeleportDestination_IsSet;
        private TeleportDestination _TeleportDestination;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TeleportDestination TeleportDestination
        {
            get => _TeleportDestination;
            set => TeleportDestination_Set(value);
        }
        public void TeleportDestination_Set(
            TeleportDestination value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _TeleportDestination, value, _hasBeenSetTracker, hasBeenSet, (int)PlacedObject_FieldIndex.TeleportDestination, nameof(TeleportDestination), nameof(TeleportDestination_IsSet));
        }
        public void TeleportDestination_Unset()
        {
            this.TeleportDestination_Set(default(TeleportDestination), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITeleportDestinationGetter IPlacedObjectGetter.TeleportDestination => this.TeleportDestination;
        #endregion
        #region Lock
        public bool Lock_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Lock];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.Lock, nameof(Lock_IsSet));
        }
        bool IPlacedObjectGetter.Lock_IsSet => Lock_IsSet;
        private LockInformation _Lock;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LockInformation Lock
        {
            get => _Lock;
            set => Lock_Set(value);
        }
        public void Lock_Set(
            LockInformation value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Lock, value, _hasBeenSetTracker, hasBeenSet, (int)PlacedObject_FieldIndex.Lock, nameof(Lock), nameof(Lock_IsSet));
        }
        public void Lock_Unset()
        {
            this.Lock_Set(default(LockInformation), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILockInformationGetter IPlacedObjectGetter.Lock => this.Lock;
        #endregion
        #region Owner
        public IFormIDSetLink<IOwner> Owner_Property { get; } = new FormIDSetLink<IOwner>();
        public IOwner Owner { get => Owner_Property.Item; set => Owner_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<IOwner> IPlacedObject.Owner_Property => this.Owner_Property;
        IOwner IPlacedObjectGetter.Owner => this.Owner_Property.Item;
        IFormIDSetLinkGetter<IOwner> IPlacedObjectGetter.Owner_Property => this.Owner_Property;
        #endregion
        #region FactionRank
        public bool FactionRank_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.FactionRank];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.FactionRank, nameof(FactionRank_IsSet));
        }
        bool IPlacedObjectGetter.FactionRank_IsSet => FactionRank_IsSet;
        private Int32 _FactionRank;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FactionRank
        {
            get => this._FactionRank;
            set => FactionRank_Set(value);
        }
        Int32 IPlacedObjectGetter.FactionRank => this.FactionRank;
        public void FactionRank_Set(
            Int32 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _FactionRank, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.FactionRank, nameof(FactionRank), nameof(FactionRank_IsSet));
        }
        public void FactionRank_Unset()
        {
            this.FactionRank_Set(default(Int32), false);
        }
        #endregion
        #region GlobalVariable
        public IFormIDSetLink<Global> GlobalVariable_Property { get; } = new FormIDSetLink<Global>();
        public Global GlobalVariable { get => GlobalVariable_Property.Item; set => GlobalVariable_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Global> IPlacedObject.GlobalVariable_Property => this.GlobalVariable_Property;
        IGlobalInternalGetter IPlacedObjectGetter.GlobalVariable => this.GlobalVariable_Property.Item;
        IFormIDSetLinkGetter<IGlobalInternalGetter> IPlacedObjectGetter.GlobalVariable_Property => this.GlobalVariable_Property;
        #endregion
        #region EnableParent
        public bool EnableParent_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.EnableParent];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.EnableParent, nameof(EnableParent_IsSet));
        }
        bool IPlacedObjectGetter.EnableParent_IsSet => EnableParent_IsSet;
        private EnableParent _EnableParent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public EnableParent EnableParent
        {
            get => _EnableParent;
            set => EnableParent_Set(value);
        }
        public void EnableParent_Set(
            EnableParent value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _EnableParent, value, _hasBeenSetTracker, hasBeenSet, (int)PlacedObject_FieldIndex.EnableParent, nameof(EnableParent), nameof(EnableParent_IsSet));
        }
        public void EnableParent_Unset()
        {
            this.EnableParent_Set(default(EnableParent), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter IPlacedObjectGetter.EnableParent => this.EnableParent;
        #endregion
        #region Target
        public IFormIDSetLink<IPlaced> Target_Property { get; } = new FormIDSetLink<IPlaced>();
        public IPlaced Target { get => Target_Property.Item; set => Target_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<IPlaced> IPlacedObject.Target_Property => this.Target_Property;
        IPlaced IPlacedObjectGetter.Target => this.Target_Property.Item;
        IFormIDSetLinkGetter<IPlaced> IPlacedObjectGetter.Target_Property => this.Target_Property;
        #endregion
        #region SpeedTreeSeed
        public bool SpeedTreeSeed_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.SpeedTreeSeed];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.SpeedTreeSeed, nameof(SpeedTreeSeed_IsSet));
        }
        bool IPlacedObjectGetter.SpeedTreeSeed_IsSet => SpeedTreeSeed_IsSet;
        private Byte _SpeedTreeSeed;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte SpeedTreeSeed
        {
            get => this._SpeedTreeSeed;
            set => SpeedTreeSeed_Set(value);
        }
        Byte IPlacedObjectGetter.SpeedTreeSeed => this.SpeedTreeSeed;
        public void SpeedTreeSeed_Set(
            Byte value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _SpeedTreeSeed, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.SpeedTreeSeed, nameof(SpeedTreeSeed), nameof(SpeedTreeSeed_IsSet));
        }
        public void SpeedTreeSeed_Unset()
        {
            this.SpeedTreeSeed_Set(default(Byte), false);
        }
        #endregion
        #region DistantLODData
        public bool DistantLODData_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.DistantLODData];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.DistantLODData, nameof(DistantLODData_IsSet));
        }
        bool IPlacedObjectGetter.DistantLODData_IsSet => DistantLODData_IsSet;
        private DistantLODData _DistantLODData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DistantLODData DistantLODData
        {
            get => _DistantLODData;
            set => DistantLODData_Set(value);
        }
        public void DistantLODData_Set(
            DistantLODData value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _DistantLODData, value, _hasBeenSetTracker, hasBeenSet, (int)PlacedObject_FieldIndex.DistantLODData, nameof(DistantLODData), nameof(DistantLODData_IsSet));
        }
        public void DistantLODData_Unset()
        {
            this.DistantLODData_Set(default(DistantLODData), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDistantLODDataGetter IPlacedObjectGetter.DistantLODData => this.DistantLODData;
        #endregion
        #region Charge
        public bool Charge_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Charge];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.Charge, nameof(Charge_IsSet));
        }
        bool IPlacedObjectGetter.Charge_IsSet => Charge_IsSet;
        private Single _Charge;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Charge
        {
            get => this._Charge;
            set => Charge_Set(value);
        }
        Single IPlacedObjectGetter.Charge => this.Charge;
        public void Charge_Set(
            Single value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Charge, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.Charge, nameof(Charge), nameof(Charge_IsSet));
        }
        public void Charge_Unset()
        {
            this.Charge_Set(default(Single), false);
        }
        #endregion
        #region Health
        public bool Health_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Health];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.Health, nameof(Health_IsSet));
        }
        bool IPlacedObjectGetter.Health_IsSet => Health_IsSet;
        private Int32 _Health;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 Health
        {
            get => this._Health;
            set => Health_Set(value);
        }
        Int32 IPlacedObjectGetter.Health => this.Health;
        public void Health_Set(
            Int32 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Health, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.Health, nameof(Health), nameof(Health_IsSet));
        }
        public void Health_Unset()
        {
            this.Health_Set(default(Int32), false);
        }
        #endregion
        #region LevelModifier
        public bool LevelModifier_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.LevelModifier];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.LevelModifier, nameof(LevelModifier_IsSet));
        }
        bool IPlacedObjectGetter.LevelModifier_IsSet => LevelModifier_IsSet;
        private Int32 _LevelModifier;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 LevelModifier
        {
            get => this._LevelModifier;
            set => LevelModifier_Set(value);
        }
        Int32 IPlacedObjectGetter.LevelModifier => this.LevelModifier;
        public void LevelModifier_Set(
            Int32 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _LevelModifier, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.LevelModifier, nameof(LevelModifier), nameof(LevelModifier_IsSet));
        }
        public void LevelModifier_Unset()
        {
            this.LevelModifier_Set(default(Int32), false);
        }
        #endregion
        #region Unknown
        public IFormIDSetLink<OblivionMajorRecord> Unknown_Property { get; } = new FormIDSetLink<OblivionMajorRecord>();
        public OblivionMajorRecord Unknown { get => Unknown_Property.Item; set => Unknown_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<OblivionMajorRecord> IPlacedObject.Unknown_Property => this.Unknown_Property;
        IOblivionMajorRecordInternalGetter IPlacedObjectGetter.Unknown => this.Unknown_Property.Item;
        IFormIDSetLinkGetter<IOblivionMajorRecordInternalGetter> IPlacedObjectGetter.Unknown_Property => this.Unknown_Property;
        #endregion
        #region ActionFlags
        public bool ActionFlags_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.ActionFlags];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.ActionFlags, nameof(ActionFlags_IsSet));
        }
        bool IPlacedObjectGetter.ActionFlags_IsSet => ActionFlags_IsSet;
        private PlacedObject.ActionFlag _ActionFlags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PlacedObject.ActionFlag ActionFlags
        {
            get => this._ActionFlags;
            set => ActionFlags_Set(value);
        }
        PlacedObject.ActionFlag IPlacedObjectGetter.ActionFlags => this.ActionFlags;
        public void ActionFlags_Set(
            PlacedObject.ActionFlag value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _ActionFlags, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.ActionFlags, nameof(ActionFlags), nameof(ActionFlags_IsSet));
        }
        public void ActionFlags_Unset()
        {
            this.ActionFlags_Set(default(PlacedObject.ActionFlag), false);
        }
        #endregion
        #region Count
        public bool Count_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Count];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.Count, nameof(Count_IsSet));
        }
        bool IPlacedObjectGetter.Count_IsSet => Count_IsSet;
        private Int32 _Count;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 Count
        {
            get => this._Count;
            set => Count_Set(value);
        }
        Int32 IPlacedObjectGetter.Count => this.Count;
        public void Count_Set(
            Int32 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Count, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.Count, nameof(Count), nameof(Count_IsSet));
        }
        public void Count_Unset()
        {
            this.Count_Set(default(Int32), false);
        }
        #endregion
        #region MapMarker
        public bool MapMarker_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.MapMarker];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.MapMarker, nameof(MapMarker_IsSet));
        }
        bool IPlacedObjectGetter.MapMarker_IsSet => MapMarker_IsSet;
        private MapMarker _MapMarker;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MapMarker MapMarker
        {
            get => _MapMarker;
            set => MapMarker_Set(value);
        }
        public void MapMarker_Set(
            MapMarker value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _MapMarker, value, _hasBeenSetTracker, hasBeenSet, (int)PlacedObject_FieldIndex.MapMarker, nameof(MapMarker), nameof(MapMarker_IsSet));
        }
        public void MapMarker_Unset()
        {
            this.MapMarker_Set(default(MapMarker), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMapMarkerGetter IPlacedObjectGetter.MapMarker => this.MapMarker;
        #endregion
        #region OpenByDefault
        private Boolean _OpenByDefault;
        public Boolean OpenByDefault
        {
            get => this._OpenByDefault;
            set => this.RaiseAndSetIfChanged(ref this._OpenByDefault, value, nameof(OpenByDefault));
        }
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool RagdollData_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.RagdollData];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.RagdollData, nameof(RagdollData_IsSet));
        }
        bool IPlacedObjectGetter.RagdollData_IsSet => RagdollData_IsSet;
        protected Byte[] _RagdollData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] RagdollData
        {
            get => this._RagdollData;
            set => RagdollData_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IPlacedObjectGetter.RagdollData => this.RagdollData;
        public void RagdollData_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _RagdollData, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.RagdollData, nameof(RagdollData), nameof(RagdollData_IsSet));
        }
        public void RagdollData_Unset()
        {
            this.RagdollData_Set(default(Byte[]), false);
        }
        #endregion
        #region Scale
        public bool Scale_IsSet
        {
            get => _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Scale];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)PlacedObject_FieldIndex.Scale, nameof(Scale_IsSet));
        }
        bool IPlacedObjectGetter.Scale_IsSet => Scale_IsSet;
        private Single _Scale;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Scale
        {
            get => this._Scale;
            set => Scale_Set(value);
        }
        Single IPlacedObjectGetter.Scale => this.Scale;
        public void Scale_Set(
            Single value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Scale, value, _hasBeenSetTracker, markSet, (int)PlacedObject_FieldIndex.Scale, nameof(Scale), nameof(Scale_IsSet));
        }
        public void Scale_Unset()
        {
            this.Scale_Set(default(Single), false);
        }
        #endregion
        #region ContainedSoul
        public IFormIDSetLink<SoulGem> ContainedSoul_Property { get; } = new FormIDSetLink<SoulGem>();
        public SoulGem ContainedSoul { get => ContainedSoul_Property.Item; set => ContainedSoul_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<SoulGem> IPlacedObject.ContainedSoul_Property => this.ContainedSoul_Property;
        ISoulGemInternalGetter IPlacedObjectGetter.ContainedSoul => this.ContainedSoul_Property.Item;
        IFormIDSetLinkGetter<ISoulGemInternalGetter> IPlacedObjectGetter.ContainedSoul_Property => this.ContainedSoul_Property;
        #endregion
        #region Position
        private P3Float _Position;
        public P3Float Position
        {
            get => this._Position;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Position, value, nameof(Position));
            }
        }
        #endregion
        #region Rotation
        private P3Float _Rotation;
        public P3Float Rotation
        {
            get => this._Rotation;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Rotation, value, nameof(Rotation));
            }
        }
        #endregion
        #region DATADataTypeState
        private PlacedObject.DATADataType _DATADataTypeState;
        public PlacedObject.DATADataType DATADataTypeState
        {
            get => this._DATADataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._DATADataTypeState, value, nameof(DATADataTypeState));
        }
        PlacedObject.DATADataType IPlacedObjectInternal.DATADataTypeState
        {
            get => this.DATADataTypeState;
            set => this.DATADataTypeState = value;
        }
        PlacedObject.DATADataType IPlacedObjectInternalGetter.DATADataTypeState
        {
            get => this.DATADataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPlacedObjectInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            PlacedObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IPlacedObjectInternalGetter rhs)) return false;
            return ((PlacedObjectCommon)this.CommonInstance).Equals(this, rhs);
        }

        public bool Equals(PlacedObject obj)
        {
            return ((PlacedObjectCommon)this.CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedObjectCommon)this.CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => PlacedObjectXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static PlacedObject CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            PlacedObject_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PlacedObject CreateFromXml(
            XElement node,
            out PlacedObject_ErrorMask errorMask,
            bool doMasks = true,
            PlacedObject_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static PlacedObject CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new PlacedObject() : null;
                    break;
                default:
                    break;
            }
            var ret = new PlacedObject();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    PlacedObjectXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PlacedObject CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            PlacedObject_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PlacedObject CreateFromXml(
            string path,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedObject CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            PlacedObject_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PlacedObject CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            PlacedObject_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PlacedObject CreateFromXml(
            Stream stream,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedObject CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            PlacedObject_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            PlacedObject item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= PlacedObject.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                    return _hasBeenSetTracker[index];
                case PlacedObject_FieldIndex.Base:
                    return Base_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Owner:
                    return Owner_Property.HasBeenSet;
                case PlacedObject_FieldIndex.GlobalVariable:
                    return GlobalVariable_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Target:
                    return Target_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Unknown:
                    return Unknown_Property.HasBeenSet;
                case PlacedObject_FieldIndex.ContainedSoul:
                    return ContainedSoul_Property.HasBeenSet;
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PlacedObject_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Base_Property;
            if (TeleportDestination != null)
            {
                foreach (var item in TeleportDestination.Links)
                {
                    yield return item;
                }
            }
            if (Lock != null)
            {
                foreach (var item in Lock.Links)
                {
                    yield return item;
                }
            }
            yield return Owner_Property;
            yield return GlobalVariable_Property;
            if (EnableParent != null)
            {
                foreach (var item in EnableParent.Links)
                {
                    yield return item;
                }
            }
            yield return Target_Property;
            yield return Unknown_Property;
            yield return ContainedSoul_Property;
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            Base_Property.Link(
                modList,
                sourceMod);
            if (TeleportDestination != null)
            {
                TeleportDestination?.Link(
                    modList,
                    sourceMod);
            }
            if (Lock != null)
            {
                Lock?.Link(
                    modList,
                    sourceMod);
            }
            Owner_Property.Link(
                modList,
                sourceMod);
            GlobalVariable_Property.Link(
                modList,
                sourceMod);
            if (EnableParent != null)
            {
                EnableParent?.Link(
                    modList,
                    sourceMod);
            }
            Target_Property.Link(
                modList,
                sourceMod);
            Unknown_Property.Link(
                modList,
                sourceMod);
            ContainedSoul_Property.Link(
                modList,
                sourceMod);
        }

        public PlacedObject(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public PlacedObject(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(PlacedObject obj, PlacedObject rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new PlacedObject(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => PlacedObjectBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static PlacedObject CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PlacedObject CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out PlacedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static PlacedObject CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<PlacedObject>(
                record: new PlacedObject(),
                frame: frame,
                errorMask: errorMask,
                recType: PlacedObject_Registration.REFR_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            PlacedObject item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            PlacedObject item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x454D414E: // NAME
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Base_Property);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Base);
                }
                case 0x49435058: // XPCI
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] XPCIFluffParse))
                    {
                        item.XPCIFluff = XPCIFluffParse;
                    }
                    else
                    {
                        item.XPCIFluff = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.XPCIFluff);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] FULLFluffParse))
                    {
                        item.FULLFluff = FULLFluffParse;
                    }
                    else
                    {
                        item.FULLFluff = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.FULLFluff);
                }
                case 0x4C455458: // XTEL
                {
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                        item.TeleportDestination = Mutagen.Bethesda.Oblivion.TeleportDestination.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.TeleportDestination);
                }
                case 0x434F4C58: // XLOC
                {
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                        item.Lock = Mutagen.Bethesda.Oblivion.LockInformation.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Lock);
                }
                case 0x4E574F58: // XOWN
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Owner_Property);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Owner);
                }
                case 0x4B4E5258: // XRNK
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    item.FactionRank = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.FactionRank);
                }
                case 0x424C4758: // XGLB
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.GlobalVariable_Property);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.GlobalVariable);
                }
                case 0x50534558: // XESP
                {
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                        item.EnableParent = Mutagen.Bethesda.Oblivion.EnableParent.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.EnableParent);
                }
                case 0x47525458: // XTRG
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Target_Property);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Target);
                }
                case 0x44455358: // XSED
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    item.SpeedTreeSeed = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.SpeedTreeSeed);
                }
                case 0x444F4C58: // XLOD
                {
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.DistantLODData);
                        item.DistantLODData = Mutagen.Bethesda.Oblivion.DistantLODData.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.DistantLODData);
                }
                case 0x47484358: // XCHG
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Single ChargeParse))
                    {
                        item.Charge = ChargeParse;
                    }
                    else
                    {
                        item.Charge = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Charge);
                }
                case 0x544C4858: // XHLT
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    item.Health = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Health);
                }
                case 0x4D434C58: // XLCM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    item.LevelModifier = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.LevelModifier);
                }
                case 0x4D545258: // XRTM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Unknown_Property);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Unknown);
                }
                case 0x54434158: // XACT
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (EnumBinaryTranslation<PlacedObject.ActionFlag>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out PlacedObject.ActionFlag ActionFlagsParse))
                    {
                        item.ActionFlags = ActionFlagsParse;
                    }
                    else
                    {
                        item.ActionFlags = default(PlacedObject.ActionFlag);
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.ActionFlags);
                }
                case 0x544E4358: // XCNT
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    item.Count = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Count);
                }
                case 0x4B524D58: // XMRK
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                        item.MapMarker = Mutagen.Bethesda.Oblivion.MapMarker.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.MapMarker);
                }
                case 0x4D414E4F: // ONAM
                {
                    PlacedObjectBinaryCreateTranslation.FillBinaryOpenByDefaultCustomPublic(
                        frame: frame.SpawnWithLength(Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength),
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.OpenByDefault);
                }
                case 0x44475258: // XRGD
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] RagdollDataParse))
                    {
                        item.RagdollData = RagdollDataParse;
                    }
                    else
                    {
                        item.RagdollData = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.RagdollData);
                }
                case 0x4C435358: // XSCL
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Single ScaleParse))
                    {
                        item.Scale = ScaleParse;
                    }
                    else
                    {
                        item.Scale = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Scale);
                }
                case 0x4C4F5358: // XSOL
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.ContainedSoul_Property);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.ContainedSoul);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    if (Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out P3Float PositionParse))
                    {
                        item.Position = PositionParse;
                    }
                    else
                    {
                        item.Position = default(P3Float);
                    }
                    if (Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out P3Float RotationParse))
                    {
                        item.Rotation = RotationParse;
                    }
                    else
                    {
                        item.Rotation = default(P3Float);
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Rotation);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public PlacedObject Copy(
            PlacedObject_CopyMask copyMask = null,
            PlacedObject def = null)
        {
            return PlacedObject.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PlacedObject Copy(
            PlacedObject item,
            PlacedObject_CopyMask copyMask = null,
            PlacedObject def = null)
        {
            PlacedObject ret;
            if (item.GetType().Equals(typeof(PlacedObject)))
            {
                ret = new PlacedObject();
            }
            else
            {
                ret = (PlacedObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PlacedObject Copy_ToLoqui(
            PlacedObject item,
            PlacedObject_CopyMask copyMask = null,
            PlacedObject def = null)
        {
            PlacedObject ret;
            if (item.GetType().Equals(typeof(PlacedObject)))
            {
                ret = new PlacedObject() as PlacedObject;
            }
            else
            {
                ret = (PlacedObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            PlacedObject rhs,
            PlacedObject_CopyMask copyMask,
            PlacedObject def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            PlacedObject rhs,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_CopyMask copyMask = null,
            PlacedObject def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            PlacedObject rhs,
            ErrorMaskBuilder errorMask,
            PlacedObject_CopyMask copyMask = null,
            PlacedObject def = null)
        {
            PlacedObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    this.Base_Property.Set((IFormIDSetLink<OblivionMajorRecord>)obj);
                    break;
                case PlacedObject_FieldIndex.XPCIFluff:
                    this.XPCIFluff = (Byte[])obj;
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    this.FULLFluff = (Byte[])obj;
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    this.TeleportDestination = (TeleportDestination)obj;
                    break;
                case PlacedObject_FieldIndex.Lock:
                    this.Lock = (LockInformation)obj;
                    break;
                case PlacedObject_FieldIndex.Owner:
                    this.Owner_Property.Set((IFormIDSetLink<IOwner>)obj);
                    break;
                case PlacedObject_FieldIndex.FactionRank:
                    this.FactionRank = (Int32)obj;
                    break;
                case PlacedObject_FieldIndex.GlobalVariable:
                    this.GlobalVariable_Property.Set((IFormIDSetLink<Global>)obj);
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    this.EnableParent = (EnableParent)obj;
                    break;
                case PlacedObject_FieldIndex.Target:
                    this.Target_Property.Set((IFormIDSetLink<IPlaced>)obj);
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    this.SpeedTreeSeed = (Byte)obj;
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    this.DistantLODData = (DistantLODData)obj;
                    break;
                case PlacedObject_FieldIndex.Charge:
                    this.Charge = (Single)obj;
                    break;
                case PlacedObject_FieldIndex.Health:
                    this.Health = (Int32)obj;
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    this.LevelModifier = (Int32)obj;
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    this.Unknown_Property.Set((IFormIDSetLink<OblivionMajorRecord>)obj);
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    this.ActionFlags = (PlacedObject.ActionFlag)obj;
                    break;
                case PlacedObject_FieldIndex.Count:
                    this.Count = (Int32)obj;
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    this.MapMarker = (MapMarker)obj;
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    this.OpenByDefault = (Boolean)obj;
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    this.RagdollData = (Byte[])obj;
                    break;
                case PlacedObject_FieldIndex.Scale:
                    this.Scale = (Single)obj;
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    this.ContainedSoul_Property.Set((IFormIDSetLink<SoulGem>)obj);
                    break;
                case PlacedObject_FieldIndex.Position:
                    this.Position = (P3Float)obj;
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    this.Rotation = (P3Float)obj;
                    break;
                case PlacedObject_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (PlacedObject.DATADataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            PlacedObjectCommon.Instance.Clear(this);
        }

        public new static PlacedObject Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PlacedObject();
            foreach (var pair in fields)
            {
                CopyInInternal_PlacedObject(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_PlacedObject(PlacedObject obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PlacedObject_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    obj.Base_Property.Set((IFormIDSetLink<OblivionMajorRecord>)pair.Value);
                    break;
                case PlacedObject_FieldIndex.XPCIFluff:
                    obj.XPCIFluff = (Byte[])pair.Value;
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    obj.FULLFluff = (Byte[])pair.Value;
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    obj.TeleportDestination = (TeleportDestination)pair.Value;
                    break;
                case PlacedObject_FieldIndex.Lock:
                    obj.Lock = (LockInformation)pair.Value;
                    break;
                case PlacedObject_FieldIndex.Owner:
                    obj.Owner_Property.Set((IFormIDSetLink<IOwner>)pair.Value);
                    break;
                case PlacedObject_FieldIndex.FactionRank:
                    obj.FactionRank = (Int32)pair.Value;
                    break;
                case PlacedObject_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.Set((IFormIDSetLink<Global>)pair.Value);
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    obj.EnableParent = (EnableParent)pair.Value;
                    break;
                case PlacedObject_FieldIndex.Target:
                    obj.Target_Property.Set((IFormIDSetLink<IPlaced>)pair.Value);
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    obj.SpeedTreeSeed = (Byte)pair.Value;
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    obj.DistantLODData = (DistantLODData)pair.Value;
                    break;
                case PlacedObject_FieldIndex.Charge:
                    obj.Charge = (Single)pair.Value;
                    break;
                case PlacedObject_FieldIndex.Health:
                    obj.Health = (Int32)pair.Value;
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    obj.LevelModifier = (Int32)pair.Value;
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    obj.Unknown_Property.Set((IFormIDSetLink<OblivionMajorRecord>)pair.Value);
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    obj.ActionFlags = (PlacedObject.ActionFlag)pair.Value;
                    break;
                case PlacedObject_FieldIndex.Count:
                    obj.Count = (Int32)pair.Value;
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    obj.MapMarker = (MapMarker)pair.Value;
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    obj.OpenByDefault = (Boolean)pair.Value;
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    obj.RagdollData = (Byte[])pair.Value;
                    break;
                case PlacedObject_FieldIndex.Scale:
                    obj.Scale = (Single)pair.Value;
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    obj.ContainedSoul_Property.Set((IFormIDSetLink<SoulGem>)pair.Value);
                    break;
                case PlacedObject_FieldIndex.Position:
                    obj.Position = (P3Float)pair.Value;
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    obj.Rotation = (P3Float)pair.Value;
                    break;
                case PlacedObject_FieldIndex.DATADataTypeState:
                    obj.DATADataTypeState = (PlacedObject.DATADataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IPlacedObject :
        IPlacedObjectInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IPlacedObjectInternal>
    {
        new OblivionMajorRecord Base { get; set; }
        new IFormIDSetLink<OblivionMajorRecord> Base_Property { get; }
        new Byte[] XPCIFluff { get; set; }
        new bool XPCIFluff_IsSet { get; set; }
        void XPCIFluff_Set(Byte[] value, bool hasBeenSet = true);
        void XPCIFluff_Unset();

        new Byte[] FULLFluff { get; set; }
        new bool FULLFluff_IsSet { get; set; }
        void FULLFluff_Set(Byte[] value, bool hasBeenSet = true);
        void FULLFluff_Unset();

        new TeleportDestination TeleportDestination { get; set; }
        new bool TeleportDestination_IsSet { get; set; }
        void TeleportDestination_Set(TeleportDestination value, bool hasBeenSet = true);
        void TeleportDestination_Unset();

        new LockInformation Lock { get; set; }
        new bool Lock_IsSet { get; set; }
        void Lock_Set(LockInformation value, bool hasBeenSet = true);
        void Lock_Unset();

        new IOwner Owner { get; set; }
        new IFormIDSetLink<IOwner> Owner_Property { get; }
        new Int32 FactionRank { get; set; }
        new bool FactionRank_IsSet { get; set; }
        void FactionRank_Set(Int32 value, bool hasBeenSet = true);
        void FactionRank_Unset();

        new Global GlobalVariable { get; set; }
        new IFormIDSetLink<Global> GlobalVariable_Property { get; }
        new EnableParent EnableParent { get; set; }
        new bool EnableParent_IsSet { get; set; }
        void EnableParent_Set(EnableParent value, bool hasBeenSet = true);
        void EnableParent_Unset();

        new IPlaced Target { get; set; }
        new IFormIDSetLink<IPlaced> Target_Property { get; }
        new Byte SpeedTreeSeed { get; set; }
        new bool SpeedTreeSeed_IsSet { get; set; }
        void SpeedTreeSeed_Set(Byte value, bool hasBeenSet = true);
        void SpeedTreeSeed_Unset();

        new DistantLODData DistantLODData { get; set; }
        new bool DistantLODData_IsSet { get; set; }
        void DistantLODData_Set(DistantLODData value, bool hasBeenSet = true);
        void DistantLODData_Unset();

        new Single Charge { get; set; }
        new bool Charge_IsSet { get; set; }
        void Charge_Set(Single value, bool hasBeenSet = true);
        void Charge_Unset();

        new Int32 Health { get; set; }
        new bool Health_IsSet { get; set; }
        void Health_Set(Int32 value, bool hasBeenSet = true);
        void Health_Unset();

        new Int32 LevelModifier { get; set; }
        new bool LevelModifier_IsSet { get; set; }
        void LevelModifier_Set(Int32 value, bool hasBeenSet = true);
        void LevelModifier_Unset();

        new OblivionMajorRecord Unknown { get; set; }
        new IFormIDSetLink<OblivionMajorRecord> Unknown_Property { get; }
        new PlacedObject.ActionFlag ActionFlags { get; set; }
        new bool ActionFlags_IsSet { get; set; }
        void ActionFlags_Set(PlacedObject.ActionFlag value, bool hasBeenSet = true);
        void ActionFlags_Unset();

        new Int32 Count { get; set; }
        new bool Count_IsSet { get; set; }
        void Count_Set(Int32 value, bool hasBeenSet = true);
        void Count_Unset();

        new MapMarker MapMarker { get; set; }
        new bool MapMarker_IsSet { get; set; }
        void MapMarker_Set(MapMarker value, bool hasBeenSet = true);
        void MapMarker_Unset();

        new Boolean OpenByDefault { get; set; }

        new Byte[] RagdollData { get; set; }
        new bool RagdollData_IsSet { get; set; }
        void RagdollData_Set(Byte[] value, bool hasBeenSet = true);
        void RagdollData_Unset();

        new Single Scale { get; set; }
        new bool Scale_IsSet { get; set; }
        void Scale_Set(Single value, bool hasBeenSet = true);
        void Scale_Unset();

        new SoulGem ContainedSoul { get; set; }
        new IFormIDSetLink<SoulGem> ContainedSoul_Property { get; }
        new P3Float Position { get; set; }

        new P3Float Rotation { get; set; }

        void CopyFieldsFrom(
            PlacedObject rhs,
            ErrorMaskBuilder errorMask = null,
            PlacedObject_CopyMask copyMask = null,
            PlacedObject def = null);
    }

    public partial interface IPlacedObjectInternal :
        IOblivionMajorRecordInternal,
        IPlacedObject,
        IPlacedObjectInternalGetter
    {
        new OblivionMajorRecord Base { get; set; }
        new IFormIDSetLink<OblivionMajorRecord> Base_Property { get; }
        new IOwner Owner { get; set; }
        new IFormIDSetLink<IOwner> Owner_Property { get; }
        new Global GlobalVariable { get; set; }
        new IFormIDSetLink<Global> GlobalVariable_Property { get; }
        new IPlaced Target { get; set; }
        new IFormIDSetLink<IPlaced> Target_Property { get; }
        new OblivionMajorRecord Unknown { get; set; }
        new IFormIDSetLink<OblivionMajorRecord> Unknown_Property { get; }
        new SoulGem ContainedSoul { get; set; }
        new IFormIDSetLink<SoulGem> ContainedSoul_Property { get; }
        new PlacedObject.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IPlacedObjectGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IPlacedObjectInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Base
        IOblivionMajorRecordInternalGetter Base { get; }
        IFormIDSetLinkGetter<IOblivionMajorRecordInternalGetter> Base_Property { get; }

        #endregion
        #region XPCIFluff
        ReadOnlySpan<Byte> XPCIFluff { get; }
        bool XPCIFluff_IsSet { get; }

        #endregion
        #region FULLFluff
        ReadOnlySpan<Byte> FULLFluff { get; }
        bool FULLFluff_IsSet { get; }

        #endregion
        #region TeleportDestination
        ITeleportDestinationGetter TeleportDestination { get; }
        bool TeleportDestination_IsSet { get; }

        #endregion
        #region Lock
        ILockInformationGetter Lock { get; }
        bool Lock_IsSet { get; }

        #endregion
        #region Owner
        IOwner Owner { get; }
        IFormIDSetLinkGetter<IOwner> Owner_Property { get; }

        #endregion
        #region FactionRank
        Int32 FactionRank { get; }
        bool FactionRank_IsSet { get; }

        #endregion
        #region GlobalVariable
        IGlobalInternalGetter GlobalVariable { get; }
        IFormIDSetLinkGetter<IGlobalInternalGetter> GlobalVariable_Property { get; }

        #endregion
        #region EnableParent
        IEnableParentGetter EnableParent { get; }
        bool EnableParent_IsSet { get; }

        #endregion
        #region Target
        IPlaced Target { get; }
        IFormIDSetLinkGetter<IPlaced> Target_Property { get; }

        #endregion
        #region SpeedTreeSeed
        Byte SpeedTreeSeed { get; }
        bool SpeedTreeSeed_IsSet { get; }

        #endregion
        #region DistantLODData
        IDistantLODDataGetter DistantLODData { get; }
        bool DistantLODData_IsSet { get; }

        #endregion
        #region Charge
        Single Charge { get; }
        bool Charge_IsSet { get; }

        #endregion
        #region Health
        Int32 Health { get; }
        bool Health_IsSet { get; }

        #endregion
        #region LevelModifier
        Int32 LevelModifier { get; }
        bool LevelModifier_IsSet { get; }

        #endregion
        #region Unknown
        IOblivionMajorRecordInternalGetter Unknown { get; }
        IFormIDSetLinkGetter<IOblivionMajorRecordInternalGetter> Unknown_Property { get; }

        #endregion
        #region ActionFlags
        PlacedObject.ActionFlag ActionFlags { get; }
        bool ActionFlags_IsSet { get; }

        #endregion
        #region Count
        Int32 Count { get; }
        bool Count_IsSet { get; }

        #endregion
        #region MapMarker
        IMapMarkerGetter MapMarker { get; }
        bool MapMarker_IsSet { get; }

        #endregion
        #region OpenByDefault
        Boolean OpenByDefault { get; }

        #endregion
        #region RagdollData
        ReadOnlySpan<Byte> RagdollData { get; }
        bool RagdollData_IsSet { get; }

        #endregion
        #region Scale
        Single Scale { get; }
        bool Scale_IsSet { get; }

        #endregion
        #region ContainedSoul
        ISoulGemInternalGetter ContainedSoul { get; }
        IFormIDSetLinkGetter<ISoulGemInternalGetter> ContainedSoul_Property { get; }

        #endregion
        #region Position
        P3Float Position { get; }

        #endregion
        #region Rotation
        P3Float Rotation { get; }

        #endregion

    }

    public partial interface IPlacedObjectInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IPlacedObjectGetter
    {
        #region DATADataTypeState
        PlacedObject.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class PlacedObjectMixIn
    {
        public static void Clear(this IPlacedObjectInternal item)
        {
            ((PlacedObjectCommon)item.CommonInstance).Clear(item: item);
        }

        public static PlacedObject_Mask<bool> GetEqualsMask(
            this IPlacedObjectInternalGetter item,
            IPlacedObjectInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedObjectCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlacedObjectInternalGetter item,
            string name = null,
            PlacedObject_Mask<bool> printMask = null)
        {
            return ((PlacedObjectCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlacedObjectInternalGetter item,
            FileGeneration fg,
            string name = null,
            PlacedObject_Mask<bool> printMask = null)
        {
            ((PlacedObjectCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPlacedObjectInternalGetter item,
            PlacedObject_Mask<bool?> checkMask)
        {
            return ((PlacedObjectCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PlacedObject_Mask<bool> GetHasBeenSetMask(this IPlacedObjectInternalGetter item)
        {
            var ret = new PlacedObject_Mask<bool>();
            ((PlacedObjectCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPlacedObjectInternalGetter item,
            IPlacedObjectInternalGetter rhs)
        {
            return ((PlacedObjectCommon)item.CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PlacedObject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Base = 5,
        XPCIFluff = 6,
        FULLFluff = 7,
        TeleportDestination = 8,
        Lock = 9,
        Owner = 10,
        FactionRank = 11,
        GlobalVariable = 12,
        EnableParent = 13,
        Target = 14,
        SpeedTreeSeed = 15,
        DistantLODData = 16,
        Charge = 17,
        Health = 18,
        LevelModifier = 19,
        Unknown = 20,
        ActionFlags = 21,
        Count = 22,
        MapMarker = 23,
        OpenByDefault = 24,
        RagdollData = 25,
        Scale = 26,
        ContainedSoul = 27,
        Position = 28,
        Rotation = 29,
        DATADataTypeState = 30,
    }
    #endregion

    #region Registration
    public class PlacedObject_Registration : ILoquiRegistration
    {
        public static readonly PlacedObject_Registration Instance = new PlacedObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 121,
            version: 0);

        public const string GUID = "7a559a46-7ef9-49e9-98c1-ec16c3df81f2";

        public const ushort AdditionalFieldCount = 26;

        public const ushort FieldCount = 31;

        public static readonly Type MaskType = typeof(PlacedObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedObject_ErrorMask);

        public static readonly Type ClassType = typeof(PlacedObject);

        public static readonly Type GetterType = typeof(IPlacedObjectGetter);

        public static readonly Type InternalGetterType = typeof(IPlacedObjectInternalGetter);

        public static readonly Type SetterType = typeof(IPlacedObject);

        public static readonly Type InternalSetterType = typeof(IPlacedObjectInternal);

        public static readonly Type CommonType = typeof(PlacedObjectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedObject";

        public const string Name = "PlacedObject";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BASE":
                    return (ushort)PlacedObject_FieldIndex.Base;
                case "XPCIFLUFF":
                    return (ushort)PlacedObject_FieldIndex.XPCIFluff;
                case "FULLFLUFF":
                    return (ushort)PlacedObject_FieldIndex.FULLFluff;
                case "TELEPORTDESTINATION":
                    return (ushort)PlacedObject_FieldIndex.TeleportDestination;
                case "LOCK":
                    return (ushort)PlacedObject_FieldIndex.Lock;
                case "OWNER":
                    return (ushort)PlacedObject_FieldIndex.Owner;
                case "FACTIONRANK":
                    return (ushort)PlacedObject_FieldIndex.FactionRank;
                case "GLOBALVARIABLE":
                    return (ushort)PlacedObject_FieldIndex.GlobalVariable;
                case "ENABLEPARENT":
                    return (ushort)PlacedObject_FieldIndex.EnableParent;
                case "TARGET":
                    return (ushort)PlacedObject_FieldIndex.Target;
                case "SPEEDTREESEED":
                    return (ushort)PlacedObject_FieldIndex.SpeedTreeSeed;
                case "DISTANTLODDATA":
                    return (ushort)PlacedObject_FieldIndex.DistantLODData;
                case "CHARGE":
                    return (ushort)PlacedObject_FieldIndex.Charge;
                case "HEALTH":
                    return (ushort)PlacedObject_FieldIndex.Health;
                case "LEVELMODIFIER":
                    return (ushort)PlacedObject_FieldIndex.LevelModifier;
                case "UNKNOWN":
                    return (ushort)PlacedObject_FieldIndex.Unknown;
                case "ACTIONFLAGS":
                    return (ushort)PlacedObject_FieldIndex.ActionFlags;
                case "COUNT":
                    return (ushort)PlacedObject_FieldIndex.Count;
                case "MAPMARKER":
                    return (ushort)PlacedObject_FieldIndex.MapMarker;
                case "OPENBYDEFAULT":
                    return (ushort)PlacedObject_FieldIndex.OpenByDefault;
                case "RAGDOLLDATA":
                    return (ushort)PlacedObject_FieldIndex.RagdollData;
                case "SCALE":
                    return (ushort)PlacedObject_FieldIndex.Scale;
                case "CONTAINEDSOUL":
                    return (ushort)PlacedObject_FieldIndex.ContainedSoul;
                case "POSITION":
                    return (ushort)PlacedObject_FieldIndex.Position;
                case "ROTATION":
                    return (ushort)PlacedObject_FieldIndex.Rotation;
                case "DATADATATYPESTATE":
                    return (ushort)PlacedObject_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.MapMarker:
                    return true;
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return "Base";
                case PlacedObject_FieldIndex.XPCIFluff:
                    return "XPCIFluff";
                case PlacedObject_FieldIndex.FULLFluff:
                    return "FULLFluff";
                case PlacedObject_FieldIndex.TeleportDestination:
                    return "TeleportDestination";
                case PlacedObject_FieldIndex.Lock:
                    return "Lock";
                case PlacedObject_FieldIndex.Owner:
                    return "Owner";
                case PlacedObject_FieldIndex.FactionRank:
                    return "FactionRank";
                case PlacedObject_FieldIndex.GlobalVariable:
                    return "GlobalVariable";
                case PlacedObject_FieldIndex.EnableParent:
                    return "EnableParent";
                case PlacedObject_FieldIndex.Target:
                    return "Target";
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return "SpeedTreeSeed";
                case PlacedObject_FieldIndex.DistantLODData:
                    return "DistantLODData";
                case PlacedObject_FieldIndex.Charge:
                    return "Charge";
                case PlacedObject_FieldIndex.Health:
                    return "Health";
                case PlacedObject_FieldIndex.LevelModifier:
                    return "LevelModifier";
                case PlacedObject_FieldIndex.Unknown:
                    return "Unknown";
                case PlacedObject_FieldIndex.ActionFlags:
                    return "ActionFlags";
                case PlacedObject_FieldIndex.Count:
                    return "Count";
                case PlacedObject_FieldIndex.MapMarker:
                    return "MapMarker";
                case PlacedObject_FieldIndex.OpenByDefault:
                    return "OpenByDefault";
                case PlacedObject_FieldIndex.RagdollData:
                    return "RagdollData";
                case PlacedObject_FieldIndex.Scale:
                    return "Scale";
                case PlacedObject_FieldIndex.ContainedSoul:
                    return "ContainedSoul";
                case PlacedObject_FieldIndex.Position:
                    return "Position";
                case PlacedObject_FieldIndex.Rotation:
                    return "Rotation";
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return typeof(IFormIDSetLink<OblivionMajorRecord>);
                case PlacedObject_FieldIndex.XPCIFluff:
                    return typeof(Byte[]);
                case PlacedObject_FieldIndex.FULLFluff:
                    return typeof(Byte[]);
                case PlacedObject_FieldIndex.TeleportDestination:
                    return typeof(TeleportDestination);
                case PlacedObject_FieldIndex.Lock:
                    return typeof(LockInformation);
                case PlacedObject_FieldIndex.Owner:
                    return typeof(IFormIDSetLink<IOwner>);
                case PlacedObject_FieldIndex.FactionRank:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.GlobalVariable:
                    return typeof(IFormIDSetLink<Global>);
                case PlacedObject_FieldIndex.EnableParent:
                    return typeof(EnableParent);
                case PlacedObject_FieldIndex.Target:
                    return typeof(IFormIDSetLink<IPlaced>);
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return typeof(Byte);
                case PlacedObject_FieldIndex.DistantLODData:
                    return typeof(DistantLODData);
                case PlacedObject_FieldIndex.Charge:
                    return typeof(Single);
                case PlacedObject_FieldIndex.Health:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.LevelModifier:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.Unknown:
                    return typeof(IFormIDSetLink<OblivionMajorRecord>);
                case PlacedObject_FieldIndex.ActionFlags:
                    return typeof(PlacedObject.ActionFlag);
                case PlacedObject_FieldIndex.Count:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.MapMarker:
                    return typeof(MapMarker);
                case PlacedObject_FieldIndex.OpenByDefault:
                    return typeof(Boolean);
                case PlacedObject_FieldIndex.RagdollData:
                    return typeof(Byte[]);
                case PlacedObject_FieldIndex.Scale:
                    return typeof(Single);
                case PlacedObject_FieldIndex.ContainedSoul:
                    return typeof(IFormIDSetLink<SoulGem>);
                case PlacedObject_FieldIndex.Position:
                    return typeof(P3Float);
                case PlacedObject_FieldIndex.Rotation:
                    return typeof(P3Float);
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return typeof(PlacedObject.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PlacedObjectXmlWriteTranslation);
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType XPCI_HEADER = new RecordType("XPCI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType XTEL_HEADER = new RecordType("XTEL");
        public static readonly RecordType XLOC_HEADER = new RecordType("XLOC");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType XESP_HEADER = new RecordType("XESP");
        public static readonly RecordType XTRG_HEADER = new RecordType("XTRG");
        public static readonly RecordType XSED_HEADER = new RecordType("XSED");
        public static readonly RecordType XLOD_HEADER = new RecordType("XLOD");
        public static readonly RecordType XCHG_HEADER = new RecordType("XCHG");
        public static readonly RecordType XHLT_HEADER = new RecordType("XHLT");
        public static readonly RecordType XLCM_HEADER = new RecordType("XLCM");
        public static readonly RecordType XRTM_HEADER = new RecordType("XRTM");
        public static readonly RecordType XACT_HEADER = new RecordType("XACT");
        public static readonly RecordType XCNT_HEADER = new RecordType("XCNT");
        public static readonly RecordType XMRK_HEADER = new RecordType("XMRK");
        public static readonly RecordType ONAM_HEADER = new RecordType("ONAM");
        public static readonly RecordType XRGD_HEADER = new RecordType("XRGD");
        public static readonly RecordType XSCL_HEADER = new RecordType("XSCL");
        public static readonly RecordType XSOL_HEADER = new RecordType("XSOL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = REFR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 23;
        public static readonly Type BinaryWriteTranslation = typeof(PlacedObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PlacedObjectCommon : OblivionMajorRecordCommon
    {
        public static readonly PlacedObjectCommon Instance = new PlacedObjectCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            PlacedObject item,
            PlacedObject rhs,
            PlacedObject def,
            ErrorMaskBuilder errorMask,
            PlacedObject_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Base ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Base);
                try
                {
                    item.Base_Property.SetLink(
                        rhs: rhs.Base_Property,
                        def: def?.Base_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.XPCIFluff ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.XPCIFluff);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.XPCIFluff,
                        rhsHasBeenSet: rhs.XPCIFluff_IsSet,
                        defItem: def?.XPCIFluff ?? default(Byte[]),
                        defHasBeenSet: def?.XPCIFluff_IsSet ?? false,
                        outRhsItem: out var rhsXPCIFluffItem,
                        outDefItem: out var defXPCIFluffItem))
                    {
                        item.XPCIFluff = rhsXPCIFluffItem;
                    }
                    else
                    {
                        item.XPCIFluff_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FULLFluff ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.FULLFluff);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FULLFluff,
                        rhsHasBeenSet: rhs.FULLFluff_IsSet,
                        defItem: def?.FULLFluff ?? default(Byte[]),
                        defHasBeenSet: def?.FULLFluff_IsSet ?? false,
                        outRhsItem: out var rhsFULLFluffItem,
                        outDefItem: out var defFULLFluffItem))
                    {
                        item.FULLFluff = rhsFULLFluffItem;
                    }
                    else
                    {
                        item.FULLFluff_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TeleportDestination.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.TeleportDestination,
                        rhsHasBeenSet: rhs.TeleportDestination_IsSet,
                        defItem: def?.TeleportDestination,
                        defHasBeenSet: def?.TeleportDestination_IsSet ?? false,
                        outRhsItem: out var rhsTeleportDestinationItem,
                        outDefItem: out var defTeleportDestinationItem))
                    {
                        switch (copyMask?.TeleportDestination.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                TeleportDestinationCommon.CopyFieldsFrom(
                                    item: item.TeleportDestination,
                                    rhs: rhs.TeleportDestination,
                                    def: def?.TeleportDestination,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.TeleportDestination.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.TeleportDestination = TeleportDestination.Copy(
                                    rhsTeleportDestinationItem,
                                    copyMask?.TeleportDestination?.Specific,
                                    def: defTeleportDestinationItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.TeleportDestination?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.TeleportDestination_Set(
                            value: default(TeleportDestination),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Lock.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Lock,
                        rhsHasBeenSet: rhs.Lock_IsSet,
                        defItem: def?.Lock,
                        defHasBeenSet: def?.Lock_IsSet ?? false,
                        outRhsItem: out var rhsLockItem,
                        outDefItem: out var defLockItem))
                    {
                        switch (copyMask?.Lock.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                LockInformationCommon.CopyFieldsFrom(
                                    item: item.Lock,
                                    rhs: rhs.Lock,
                                    def: def?.Lock,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Lock.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Lock = LockInformation.Copy(
                                    rhsLockItem,
                                    copyMask?.Lock?.Specific,
                                    def: defLockItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Lock?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Lock_Set(
                            value: default(LockInformation),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Owner ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Owner);
                try
                {
                    item.Owner_Property.SetLink(
                        rhs: rhs.Owner_Property,
                        def: def?.Owner_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FactionRank ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.FactionRank);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FactionRank,
                        rhsHasBeenSet: rhs.FactionRank_IsSet,
                        defItem: def?.FactionRank ?? default(Int32),
                        defHasBeenSet: def?.FactionRank_IsSet ?? false,
                        outRhsItem: out var rhsFactionRankItem,
                        outDefItem: out var defFactionRankItem))
                    {
                        item.FactionRank = rhsFactionRankItem;
                    }
                    else
                    {
                        item.FactionRank_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.GlobalVariable ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.GlobalVariable);
                try
                {
                    item.GlobalVariable_Property.SetLink(
                        rhs: rhs.GlobalVariable_Property,
                        def: def?.GlobalVariable_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EnableParent.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.EnableParent,
                        rhsHasBeenSet: rhs.EnableParent_IsSet,
                        defItem: def?.EnableParent,
                        defHasBeenSet: def?.EnableParent_IsSet ?? false,
                        outRhsItem: out var rhsEnableParentItem,
                        outDefItem: out var defEnableParentItem))
                    {
                        switch (copyMask?.EnableParent.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                EnableParentCommon.CopyFieldsFrom(
                                    item: item.EnableParent,
                                    rhs: rhs.EnableParent,
                                    def: def?.EnableParent,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.EnableParent.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.EnableParent = EnableParent.Copy(
                                    rhsEnableParentItem,
                                    copyMask?.EnableParent?.Specific,
                                    def: defEnableParentItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.EnableParent?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.EnableParent_Set(
                            value: default(EnableParent),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Target ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Target);
                try
                {
                    item.Target_Property.SetLink(
                        rhs: rhs.Target_Property,
                        def: def?.Target_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SpeedTreeSeed ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.SpeedTreeSeed);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.SpeedTreeSeed,
                        rhsHasBeenSet: rhs.SpeedTreeSeed_IsSet,
                        defItem: def?.SpeedTreeSeed ?? default(Byte),
                        defHasBeenSet: def?.SpeedTreeSeed_IsSet ?? false,
                        outRhsItem: out var rhsSpeedTreeSeedItem,
                        outDefItem: out var defSpeedTreeSeedItem))
                    {
                        item.SpeedTreeSeed = rhsSpeedTreeSeedItem;
                    }
                    else
                    {
                        item.SpeedTreeSeed_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DistantLODData.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.DistantLODData);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.DistantLODData,
                        rhsHasBeenSet: rhs.DistantLODData_IsSet,
                        defItem: def?.DistantLODData,
                        defHasBeenSet: def?.DistantLODData_IsSet ?? false,
                        outRhsItem: out var rhsDistantLODDataItem,
                        outDefItem: out var defDistantLODDataItem))
                    {
                        switch (copyMask?.DistantLODData.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                DistantLODDataCommon.CopyFieldsFrom(
                                    item: item.DistantLODData,
                                    rhs: rhs.DistantLODData,
                                    def: def?.DistantLODData,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.DistantLODData.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.DistantLODData = DistantLODData.Copy(
                                    rhsDistantLODDataItem,
                                    copyMask?.DistantLODData?.Specific,
                                    def: defDistantLODDataItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.DistantLODData?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.DistantLODData_Set(
                            value: default(DistantLODData),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Charge ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Charge);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Charge,
                        rhsHasBeenSet: rhs.Charge_IsSet,
                        defItem: def?.Charge ?? default(Single),
                        defHasBeenSet: def?.Charge_IsSet ?? false,
                        outRhsItem: out var rhsChargeItem,
                        outDefItem: out var defChargeItem))
                    {
                        item.Charge = rhsChargeItem;
                    }
                    else
                    {
                        item.Charge_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Health ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Health);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Health,
                        rhsHasBeenSet: rhs.Health_IsSet,
                        defItem: def?.Health ?? default(Int32),
                        defHasBeenSet: def?.Health_IsSet ?? false,
                        outRhsItem: out var rhsHealthItem,
                        outDefItem: out var defHealthItem))
                    {
                        item.Health = rhsHealthItem;
                    }
                    else
                    {
                        item.Health_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LevelModifier ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LevelModifier);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.LevelModifier,
                        rhsHasBeenSet: rhs.LevelModifier_IsSet,
                        defItem: def?.LevelModifier ?? default(Int32),
                        defHasBeenSet: def?.LevelModifier_IsSet ?? false,
                        outRhsItem: out var rhsLevelModifierItem,
                        outDefItem: out var defLevelModifierItem))
                    {
                        item.LevelModifier = rhsLevelModifierItem;
                    }
                    else
                    {
                        item.LevelModifier_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Unknown ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Unknown);
                try
                {
                    item.Unknown_Property.SetLink(
                        rhs: rhs.Unknown_Property,
                        def: def?.Unknown_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ActionFlags ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.ActionFlags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ActionFlags,
                        rhsHasBeenSet: rhs.ActionFlags_IsSet,
                        defItem: def?.ActionFlags ?? default(PlacedObject.ActionFlag),
                        defHasBeenSet: def?.ActionFlags_IsSet ?? false,
                        outRhsItem: out var rhsActionFlagsItem,
                        outDefItem: out var defActionFlagsItem))
                    {
                        item.ActionFlags = rhsActionFlagsItem;
                    }
                    else
                    {
                        item.ActionFlags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Count ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Count);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Count,
                        rhsHasBeenSet: rhs.Count_IsSet,
                        defItem: def?.Count ?? default(Int32),
                        defHasBeenSet: def?.Count_IsSet ?? false,
                        outRhsItem: out var rhsCountItem,
                        outDefItem: out var defCountItem))
                    {
                        item.Count = rhsCountItem;
                    }
                    else
                    {
                        item.Count_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MapMarker.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MapMarker,
                        rhsHasBeenSet: rhs.MapMarker_IsSet,
                        defItem: def?.MapMarker,
                        defHasBeenSet: def?.MapMarker_IsSet ?? false,
                        outRhsItem: out var rhsMapMarkerItem,
                        outDefItem: out var defMapMarkerItem))
                    {
                        switch (copyMask?.MapMarker.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                MapMarkerCommon.CopyFieldsFrom(
                                    item: item.MapMarker,
                                    rhs: rhs.MapMarker,
                                    def: def?.MapMarker,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.MapMarker.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.MapMarker = MapMarker.Copy(
                                    rhsMapMarkerItem,
                                    copyMask?.MapMarker?.Specific,
                                    def: defMapMarkerItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.MapMarker?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.MapMarker_Set(
                            value: default(MapMarker),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.OpenByDefault ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.OpenByDefault);
                try
                {
                    item.OpenByDefault = rhs.OpenByDefault;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RagdollData ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.RagdollData);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.RagdollData,
                        rhsHasBeenSet: rhs.RagdollData_IsSet,
                        defItem: def?.RagdollData ?? default(Byte[]),
                        defHasBeenSet: def?.RagdollData_IsSet ?? false,
                        outRhsItem: out var rhsRagdollDataItem,
                        outDefItem: out var defRagdollDataItem))
                    {
                        item.RagdollData = rhsRagdollDataItem;
                    }
                    else
                    {
                        item.RagdollData_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Scale ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Scale);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Scale,
                        rhsHasBeenSet: rhs.Scale_IsSet,
                        defItem: def?.Scale ?? default(Single),
                        defHasBeenSet: def?.Scale_IsSet ?? false,
                        outRhsItem: out var rhsScaleItem,
                        outDefItem: out var defScaleItem))
                    {
                        item.Scale = rhsScaleItem;
                    }
                    else
                    {
                        item.Scale_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ContainedSoul ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.ContainedSoul);
                try
                {
                    item.ContainedSoul_Property.SetLink(
                        rhs: rhs.ContainedSoul_Property,
                        def: def?.ContainedSoul_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Position ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Position);
                try
                {
                    item.Position = rhs.Position;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Rotation ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Rotation);
                try
                {
                    item.Rotation = rhs.Rotation;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IPlacedObjectInternal item)
        {
            ClearPartial();
            item.Base_Property.Unset();
            item.XPCIFluff_Unset();
            item.FULLFluff_Unset();
            item.TeleportDestination_Unset();
            item.Lock_Unset();
            item.Owner_Property.Unset();
            item.FactionRank_Unset();
            item.GlobalVariable_Property.Unset();
            item.EnableParent_Unset();
            item.Target_Property.Unset();
            item.SpeedTreeSeed_Unset();
            item.DistantLODData_Unset();
            item.Charge_Unset();
            item.Health_Unset();
            item.LevelModifier_Unset();
            item.Unknown_Property.Unset();
            item.ActionFlags_Unset();
            item.Count_Unset();
            item.MapMarker_Unset();
            item.OpenByDefault = default(Boolean);
            item.RagdollData_Unset();
            item.Scale_Unset();
            item.ContainedSoul_Property.Unset();
            item.Position = default(P3Float);
            item.Rotation = default(P3Float);
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }

        public PlacedObject_Mask<bool> GetEqualsMask(
            IPlacedObjectInternalGetter item,
            IPlacedObjectInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedObject_Mask<bool>();
            ((PlacedObjectCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IPlacedObjectInternalGetter item,
            IPlacedObjectInternalGetter rhs,
            PlacedObject_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Base = item.Base_Property.FormKey == rhs.Base_Property.FormKey;
            ret.XPCIFluff = item.XPCIFluff_IsSet == rhs.XPCIFluff_IsSet && MemoryExtensions.SequenceEqual(item.XPCIFluff, rhs.XPCIFluff);
            ret.FULLFluff = item.FULLFluff_IsSet == rhs.FULLFluff_IsSet && MemoryExtensions.SequenceEqual(item.FULLFluff, rhs.FULLFluff);
            ret.TeleportDestination = EqualsMaskHelper.EqualsHelper(
                item.TeleportDestination_IsSet,
                rhs.TeleportDestination_IsSet,
                item.TeleportDestination,
                rhs.TeleportDestination,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Lock = EqualsMaskHelper.EqualsHelper(
                item.Lock_IsSet,
                rhs.Lock_IsSet,
                item.Lock,
                rhs.Lock,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Owner = item.Owner_Property.FormKey == rhs.Owner_Property.FormKey;
            ret.FactionRank = item.FactionRank_IsSet == rhs.FactionRank_IsSet && item.FactionRank == rhs.FactionRank;
            ret.GlobalVariable = item.GlobalVariable_Property.FormKey == rhs.GlobalVariable_Property.FormKey;
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent_IsSet,
                rhs.EnableParent_IsSet,
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Target = item.Target_Property.FormKey == rhs.Target_Property.FormKey;
            ret.SpeedTreeSeed = item.SpeedTreeSeed_IsSet == rhs.SpeedTreeSeed_IsSet && item.SpeedTreeSeed == rhs.SpeedTreeSeed;
            ret.DistantLODData = EqualsMaskHelper.EqualsHelper(
                item.DistantLODData_IsSet,
                rhs.DistantLODData_IsSet,
                item.DistantLODData,
                rhs.DistantLODData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Charge = item.Charge_IsSet == rhs.Charge_IsSet && item.Charge.EqualsWithin(rhs.Charge);
            ret.Health = item.Health_IsSet == rhs.Health_IsSet && item.Health == rhs.Health;
            ret.LevelModifier = item.LevelModifier_IsSet == rhs.LevelModifier_IsSet && item.LevelModifier == rhs.LevelModifier;
            ret.Unknown = item.Unknown_Property.FormKey == rhs.Unknown_Property.FormKey;
            ret.ActionFlags = item.ActionFlags_IsSet == rhs.ActionFlags_IsSet && item.ActionFlags == rhs.ActionFlags;
            ret.Count = item.Count_IsSet == rhs.Count_IsSet && item.Count == rhs.Count;
            ret.MapMarker = EqualsMaskHelper.EqualsHelper(
                item.MapMarker_IsSet,
                rhs.MapMarker_IsSet,
                item.MapMarker,
                rhs.MapMarker,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.OpenByDefault = item.OpenByDefault == rhs.OpenByDefault;
            ret.RagdollData = item.RagdollData_IsSet == rhs.RagdollData_IsSet && MemoryExtensions.SequenceEqual(item.RagdollData, rhs.RagdollData);
            ret.Scale = item.Scale_IsSet == rhs.Scale_IsSet && item.Scale.EqualsWithin(rhs.Scale);
            ret.ContainedSoul = item.ContainedSoul_Property.FormKey == rhs.ContainedSoul_Property.FormKey;
            ret.Position = item.Position.Equals(rhs.Position);
            ret.Rotation = item.Rotation.Equals(rhs.Rotation);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IPlacedObjectInternalGetter item,
            string name = null,
            PlacedObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IPlacedObjectInternalGetter item,
            FileGeneration fg,
            string name = null,
            PlacedObject_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PlacedObject =>");
            }
            else
            {
                fg.AppendLine($"{name} (PlacedObject) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IPlacedObjectInternalGetter item,
            FileGeneration fg,
            PlacedObject_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Base ?? true)
            {
                fg.AppendLine($"Base => {item.Base_Property}");
            }
            if (printMask?.XPCIFluff ?? true)
            {
                fg.AppendLine($"XPCIFluff => {SpanExt.ToHexString(item.XPCIFluff)}");
            }
            if (printMask?.FULLFluff ?? true)
            {
                fg.AppendLine($"FULLFluff => {SpanExt.ToHexString(item.FULLFluff)}");
            }
            if (printMask?.TeleportDestination?.Overall ?? true)
            {
                item.TeleportDestination?.ToString(fg, "TeleportDestination");
            }
            if (printMask?.Lock?.Overall ?? true)
            {
                item.Lock?.ToString(fg, "Lock");
            }
            if (printMask?.Owner ?? true)
            {
                fg.AppendLine($"Owner => {item.Owner_Property}");
            }
            if (printMask?.FactionRank ?? true)
            {
                fg.AppendLine($"FactionRank => {item.FactionRank}");
            }
            if (printMask?.GlobalVariable ?? true)
            {
                fg.AppendLine($"GlobalVariable => {item.GlobalVariable_Property}");
            }
            if (printMask?.EnableParent?.Overall ?? true)
            {
                item.EnableParent?.ToString(fg, "EnableParent");
            }
            if (printMask?.Target ?? true)
            {
                fg.AppendLine($"Target => {item.Target_Property}");
            }
            if (printMask?.SpeedTreeSeed ?? true)
            {
                fg.AppendLine($"SpeedTreeSeed => {item.SpeedTreeSeed}");
            }
            if (printMask?.DistantLODData?.Overall ?? true)
            {
                item.DistantLODData?.ToString(fg, "DistantLODData");
            }
            if (printMask?.Charge ?? true)
            {
                fg.AppendLine($"Charge => {item.Charge}");
            }
            if (printMask?.Health ?? true)
            {
                fg.AppendLine($"Health => {item.Health}");
            }
            if (printMask?.LevelModifier ?? true)
            {
                fg.AppendLine($"LevelModifier => {item.LevelModifier}");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {item.Unknown_Property}");
            }
            if (printMask?.ActionFlags ?? true)
            {
                fg.AppendLine($"ActionFlags => {item.ActionFlags}");
            }
            if (printMask?.Count ?? true)
            {
                fg.AppendLine($"Count => {item.Count}");
            }
            if (printMask?.MapMarker?.Overall ?? true)
            {
                item.MapMarker?.ToString(fg, "MapMarker");
            }
            if (printMask?.OpenByDefault ?? true)
            {
                fg.AppendLine($"OpenByDefault => {item.OpenByDefault}");
            }
            if (printMask?.RagdollData ?? true)
            {
                fg.AppendLine($"RagdollData => {SpanExt.ToHexString(item.RagdollData)}");
            }
            if (printMask?.Scale ?? true)
            {
                fg.AppendLine($"Scale => {item.Scale}");
            }
            if (printMask?.ContainedSoul ?? true)
            {
                fg.AppendLine($"ContainedSoul => {item.ContainedSoul_Property}");
            }
            if (printMask?.Position ?? true)
            {
                fg.AppendLine($"Position => {item.Position}");
            }
            if (printMask?.Rotation ?? true)
            {
                fg.AppendLine($"Rotation => {item.Rotation}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IPlacedObjectInternalGetter item,
            PlacedObject_Mask<bool?> checkMask)
        {
            if (checkMask.Base.HasValue && checkMask.Base.Value != item.Base_Property.HasBeenSet) return false;
            if (checkMask.XPCIFluff.HasValue && checkMask.XPCIFluff.Value != item.XPCIFluff_IsSet) return false;
            if (checkMask.FULLFluff.HasValue && checkMask.FULLFluff.Value != item.FULLFluff_IsSet) return false;
            if (checkMask.TeleportDestination.Overall.HasValue && checkMask.TeleportDestination.Overall.Value != item.TeleportDestination_IsSet) return false;
            if (checkMask.TeleportDestination.Specific != null && (item.TeleportDestination == null || !item.TeleportDestination.HasBeenSet(checkMask.TeleportDestination.Specific))) return false;
            if (checkMask.Lock.Overall.HasValue && checkMask.Lock.Overall.Value != item.Lock_IsSet) return false;
            if (checkMask.Lock.Specific != null && (item.Lock == null || !item.Lock.HasBeenSet(checkMask.Lock.Specific))) return false;
            if (checkMask.Owner.HasValue && checkMask.Owner.Value != item.Owner_Property.HasBeenSet) return false;
            if (checkMask.FactionRank.HasValue && checkMask.FactionRank.Value != item.FactionRank_IsSet) return false;
            if (checkMask.GlobalVariable.HasValue && checkMask.GlobalVariable.Value != item.GlobalVariable_Property.HasBeenSet) return false;
            if (checkMask.EnableParent.Overall.HasValue && checkMask.EnableParent.Overall.Value != item.EnableParent_IsSet) return false;
            if (checkMask.EnableParent.Specific != null && (item.EnableParent == null || !item.EnableParent.HasBeenSet(checkMask.EnableParent.Specific))) return false;
            if (checkMask.Target.HasValue && checkMask.Target.Value != item.Target_Property.HasBeenSet) return false;
            if (checkMask.SpeedTreeSeed.HasValue && checkMask.SpeedTreeSeed.Value != item.SpeedTreeSeed_IsSet) return false;
            if (checkMask.DistantLODData.Overall.HasValue && checkMask.DistantLODData.Overall.Value != item.DistantLODData_IsSet) return false;
            if (checkMask.DistantLODData.Specific != null && (item.DistantLODData == null || !item.DistantLODData.HasBeenSet(checkMask.DistantLODData.Specific))) return false;
            if (checkMask.Charge.HasValue && checkMask.Charge.Value != item.Charge_IsSet) return false;
            if (checkMask.Health.HasValue && checkMask.Health.Value != item.Health_IsSet) return false;
            if (checkMask.LevelModifier.HasValue && checkMask.LevelModifier.Value != item.LevelModifier_IsSet) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_Property.HasBeenSet) return false;
            if (checkMask.ActionFlags.HasValue && checkMask.ActionFlags.Value != item.ActionFlags_IsSet) return false;
            if (checkMask.Count.HasValue && checkMask.Count.Value != item.Count_IsSet) return false;
            if (checkMask.MapMarker.Overall.HasValue && checkMask.MapMarker.Overall.Value != item.MapMarker_IsSet) return false;
            if (checkMask.MapMarker.Specific != null && (item.MapMarker == null || !item.MapMarker.HasBeenSet(checkMask.MapMarker.Specific))) return false;
            if (checkMask.RagdollData.HasValue && checkMask.RagdollData.Value != item.RagdollData_IsSet) return false;
            if (checkMask.Scale.HasValue && checkMask.Scale.Value != item.Scale_IsSet) return false;
            if (checkMask.ContainedSoul.HasValue && checkMask.ContainedSoul.Value != item.ContainedSoul_Property.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IPlacedObjectInternalGetter item,
            PlacedObject_Mask<bool> mask)
        {
            mask.Base = item.Base_Property.HasBeenSet;
            mask.XPCIFluff = item.XPCIFluff_IsSet;
            mask.FULLFluff = item.FULLFluff_IsSet;
            mask.TeleportDestination = new MaskItem<bool, TeleportDestination_Mask<bool>>(item.TeleportDestination_IsSet, item.TeleportDestination.GetHasBeenSetMask());
            mask.Lock = new MaskItem<bool, LockInformation_Mask<bool>>(item.Lock_IsSet, item.Lock.GetHasBeenSetMask());
            mask.Owner = item.Owner_Property.HasBeenSet;
            mask.FactionRank = item.FactionRank_IsSet;
            mask.GlobalVariable = item.GlobalVariable_Property.HasBeenSet;
            mask.EnableParent = new MaskItem<bool, EnableParent_Mask<bool>>(item.EnableParent_IsSet, item.EnableParent.GetHasBeenSetMask());
            mask.Target = item.Target_Property.HasBeenSet;
            mask.SpeedTreeSeed = item.SpeedTreeSeed_IsSet;
            mask.DistantLODData = new MaskItem<bool, DistantLODData_Mask<bool>>(item.DistantLODData_IsSet, item.DistantLODData.GetHasBeenSetMask());
            mask.Charge = item.Charge_IsSet;
            mask.Health = item.Health_IsSet;
            mask.LevelModifier = item.LevelModifier_IsSet;
            mask.Unknown = item.Unknown_Property.HasBeenSet;
            mask.ActionFlags = item.ActionFlags_IsSet;
            mask.Count = item.Count_IsSet;
            mask.MapMarker = new MaskItem<bool, MapMarker_Mask<bool>>(item.MapMarker_IsSet, item.MapMarker.GetHasBeenSetMask());
            mask.OpenByDefault = true;
            mask.RagdollData = item.RagdollData_IsSet;
            mask.Scale = item.Scale_IsSet;
            mask.ContainedSoul = item.ContainedSoul_Property.HasBeenSet;
            mask.Position = true;
            mask.Rotation = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static PlacedObject_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static PlacedObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IPlacedObjectInternalGetter lhs,
            IPlacedObjectInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Base_Property.HasBeenSet != rhs.Base_Property.HasBeenSet) return false;
            if (lhs.Base_Property.HasBeenSet)
            {
                if (!lhs.Base_Property.Equals(rhs.Base_Property)) return false;
            }
            if (lhs.XPCIFluff_IsSet != rhs.XPCIFluff_IsSet) return false;
            if (lhs.XPCIFluff_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.XPCIFluff, rhs.XPCIFluff)) return false;
            }
            if (lhs.FULLFluff_IsSet != rhs.FULLFluff_IsSet) return false;
            if (lhs.FULLFluff_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.FULLFluff, rhs.FULLFluff)) return false;
            }
            if (lhs.TeleportDestination_IsSet != rhs.TeleportDestination_IsSet) return false;
            if (lhs.TeleportDestination_IsSet)
            {
                if (!object.Equals(lhs.TeleportDestination, rhs.TeleportDestination)) return false;
            }
            if (lhs.Lock_IsSet != rhs.Lock_IsSet) return false;
            if (lhs.Lock_IsSet)
            {
                if (!object.Equals(lhs.Lock, rhs.Lock)) return false;
            }
            if (lhs.Owner_Property.HasBeenSet != rhs.Owner_Property.HasBeenSet) return false;
            if (lhs.Owner_Property.HasBeenSet)
            {
                if (!lhs.Owner_Property.Equals(rhs.Owner_Property)) return false;
            }
            if (lhs.FactionRank_IsSet != rhs.FactionRank_IsSet) return false;
            if (lhs.FactionRank_IsSet)
            {
                if (lhs.FactionRank != rhs.FactionRank) return false;
            }
            if (lhs.GlobalVariable_Property.HasBeenSet != rhs.GlobalVariable_Property.HasBeenSet) return false;
            if (lhs.GlobalVariable_Property.HasBeenSet)
            {
                if (!lhs.GlobalVariable_Property.Equals(rhs.GlobalVariable_Property)) return false;
            }
            if (lhs.EnableParent_IsSet != rhs.EnableParent_IsSet) return false;
            if (lhs.EnableParent_IsSet)
            {
                if (!object.Equals(lhs.EnableParent, rhs.EnableParent)) return false;
            }
            if (lhs.Target_Property.HasBeenSet != rhs.Target_Property.HasBeenSet) return false;
            if (lhs.Target_Property.HasBeenSet)
            {
                if (!lhs.Target_Property.Equals(rhs.Target_Property)) return false;
            }
            if (lhs.SpeedTreeSeed_IsSet != rhs.SpeedTreeSeed_IsSet) return false;
            if (lhs.SpeedTreeSeed_IsSet)
            {
                if (lhs.SpeedTreeSeed != rhs.SpeedTreeSeed) return false;
            }
            if (lhs.DistantLODData_IsSet != rhs.DistantLODData_IsSet) return false;
            if (lhs.DistantLODData_IsSet)
            {
                if (!object.Equals(lhs.DistantLODData, rhs.DistantLODData)) return false;
            }
            if (lhs.Charge_IsSet != rhs.Charge_IsSet) return false;
            if (lhs.Charge_IsSet)
            {
                if (!lhs.Charge.EqualsWithin(rhs.Charge)) return false;
            }
            if (lhs.Health_IsSet != rhs.Health_IsSet) return false;
            if (lhs.Health_IsSet)
            {
                if (lhs.Health != rhs.Health) return false;
            }
            if (lhs.LevelModifier_IsSet != rhs.LevelModifier_IsSet) return false;
            if (lhs.LevelModifier_IsSet)
            {
                if (lhs.LevelModifier != rhs.LevelModifier) return false;
            }
            if (lhs.Unknown_Property.HasBeenSet != rhs.Unknown_Property.HasBeenSet) return false;
            if (lhs.Unknown_Property.HasBeenSet)
            {
                if (!lhs.Unknown_Property.Equals(rhs.Unknown_Property)) return false;
            }
            if (lhs.ActionFlags_IsSet != rhs.ActionFlags_IsSet) return false;
            if (lhs.ActionFlags_IsSet)
            {
                if (lhs.ActionFlags != rhs.ActionFlags) return false;
            }
            if (lhs.Count_IsSet != rhs.Count_IsSet) return false;
            if (lhs.Count_IsSet)
            {
                if (lhs.Count != rhs.Count) return false;
            }
            if (lhs.MapMarker_IsSet != rhs.MapMarker_IsSet) return false;
            if (lhs.MapMarker_IsSet)
            {
                if (!object.Equals(lhs.MapMarker, rhs.MapMarker)) return false;
            }
            if (lhs.OpenByDefault != rhs.OpenByDefault) return false;
            if (lhs.RagdollData_IsSet != rhs.RagdollData_IsSet) return false;
            if (lhs.RagdollData_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.RagdollData, rhs.RagdollData)) return false;
            }
            if (lhs.Scale_IsSet != rhs.Scale_IsSet) return false;
            if (lhs.Scale_IsSet)
            {
                if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if (lhs.ContainedSoul_Property.HasBeenSet != rhs.ContainedSoul_Property.HasBeenSet) return false;
            if (lhs.ContainedSoul_Property.HasBeenSet)
            {
                if (!lhs.ContainedSoul_Property.Equals(rhs.ContainedSoul_Property)) return false;
            }
            if (!lhs.Position.Equals(rhs.Position)) return false;
            if (!lhs.Rotation.Equals(rhs.Rotation)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }

        public override bool Equals(
            IOblivionMajorRecordInternalGetter lhs,
            IOblivionMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IPlacedObjectInternalGetter)lhs,
                rhs: rhs as IPlacedObjectInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IPlacedObjectInternalGetter)lhs,
                rhs: rhs as IPlacedObjectInternalGetter);
        }

        public virtual int GetHashCode(IPlacedObjectInternalGetter item)
        {
            int ret = 0;
            if (item.Base_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Base).CombineHashCode(ret);
            }
            if (item.XPCIFluff_IsSet)
            {
                ret = HashHelper.GetHashCode(item.XPCIFluff).CombineHashCode(ret);
            }
            if (item.FULLFluff_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FULLFluff).CombineHashCode(ret);
            }
            if (item.TeleportDestination_IsSet)
            {
                ret = HashHelper.GetHashCode(item.TeleportDestination).CombineHashCode(ret);
            }
            if (item.Lock_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Lock).CombineHashCode(ret);
            }
            if (item.Owner_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Owner).CombineHashCode(ret);
            }
            if (item.FactionRank_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FactionRank).CombineHashCode(ret);
            }
            if (item.GlobalVariable_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.GlobalVariable).CombineHashCode(ret);
            }
            if (item.EnableParent_IsSet)
            {
                ret = HashHelper.GetHashCode(item.EnableParent).CombineHashCode(ret);
            }
            if (item.Target_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Target).CombineHashCode(ret);
            }
            if (item.SpeedTreeSeed_IsSet)
            {
                ret = HashHelper.GetHashCode(item.SpeedTreeSeed).CombineHashCode(ret);
            }
            if (item.DistantLODData_IsSet)
            {
                ret = HashHelper.GetHashCode(item.DistantLODData).CombineHashCode(ret);
            }
            if (item.Charge_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Charge).CombineHashCode(ret);
            }
            if (item.Health_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Health).CombineHashCode(ret);
            }
            if (item.LevelModifier_IsSet)
            {
                ret = HashHelper.GetHashCode(item.LevelModifier).CombineHashCode(ret);
            }
            if (item.Unknown_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Unknown).CombineHashCode(ret);
            }
            if (item.ActionFlags_IsSet)
            {
                ret = HashHelper.GetHashCode(item.ActionFlags).CombineHashCode(ret);
            }
            if (item.Count_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Count).CombineHashCode(ret);
            }
            if (item.MapMarker_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MapMarker).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.OpenByDefault).CombineHashCode(ret);
            if (item.RagdollData_IsSet)
            {
                ret = HashHelper.GetHashCode(item.RagdollData).CombineHashCode(ret);
            }
            if (item.Scale_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Scale).CombineHashCode(ret);
            }
            if (item.ContainedSoul_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.ContainedSoul).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Position).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Rotation).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IOblivionMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IPlacedObjectInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IPlacedObjectInternalGetter)item);
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class PlacedObjectXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static PlacedObjectXmlWriteTranslation Instance = new PlacedObjectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPlacedObjectInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Base_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Base) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Base),
                    item: item.Base_Property?.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.Base,
                    errorMask: errorMask);
            }
            if (item.XPCIFluff_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XPCIFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.XPCIFluff),
                    item: item.XPCIFluff,
                    fieldIndex: (int)PlacedObject_FieldIndex.XPCIFluff,
                    errorMask: errorMask);
            }
            if (item.FULLFluff_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FULLFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FULLFluff),
                    item: item.FULLFluff,
                    fieldIndex: (int)PlacedObject_FieldIndex.FULLFluff,
                    errorMask: errorMask);
            }
            if (item.TeleportDestination_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportDestination) ?? true))
            {
                ((TeleportDestinationXmlWriteTranslation)((IXmlItem)item.TeleportDestination).XmlWriteTranslator).Write(
                    item: item.TeleportDestination,
                    node: node,
                    name: nameof(item.TeleportDestination),
                    fieldIndex: (int)PlacedObject_FieldIndex.TeleportDestination,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination));
            }
            if (item.Lock_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Lock) ?? true))
            {
                ((LockInformationXmlWriteTranslation)((IXmlItem)item.Lock).XmlWriteTranslator).Write(
                    item: item.Lock,
                    node: node,
                    name: nameof(item.Lock),
                    fieldIndex: (int)PlacedObject_FieldIndex.Lock,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock));
            }
            if (item.Owner_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Owner) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Owner),
                    item: item.Owner_Property?.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if (item.FactionRank_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FactionRank) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FactionRank),
                    item: item.FactionRank,
                    fieldIndex: (int)PlacedObject_FieldIndex.FactionRank,
                    errorMask: errorMask);
            }
            if (item.GlobalVariable_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.GlobalVariable) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GlobalVariable),
                    item: item.GlobalVariable_Property?.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.GlobalVariable,
                    errorMask: errorMask);
            }
            if (item.EnableParent_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EnableParent) ?? true))
            {
                ((EnableParentXmlWriteTranslation)((IXmlItem)item.EnableParent).XmlWriteTranslator).Write(
                    item: item.EnableParent,
                    node: node,
                    name: nameof(item.EnableParent),
                    fieldIndex: (int)PlacedObject_FieldIndex.EnableParent,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent));
            }
            if (item.Target_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Target) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Target),
                    item: item.Target_Property?.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.Target,
                    errorMask: errorMask);
            }
            if (item.SpeedTreeSeed_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.SpeedTreeSeed) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SpeedTreeSeed),
                    item: item.SpeedTreeSeed,
                    fieldIndex: (int)PlacedObject_FieldIndex.SpeedTreeSeed,
                    errorMask: errorMask);
            }
            if (item.DistantLODData_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DistantLODData) ?? true))
            {
                ((DistantLODDataXmlWriteTranslation)((IXmlItem)item.DistantLODData).XmlWriteTranslator).Write(
                    item: item.DistantLODData,
                    node: node,
                    name: nameof(item.DistantLODData),
                    fieldIndex: (int)PlacedObject_FieldIndex.DistantLODData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.DistantLODData));
            }
            if (item.Charge_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Charge) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Charge),
                    item: item.Charge,
                    fieldIndex: (int)PlacedObject_FieldIndex.Charge,
                    errorMask: errorMask);
            }
            if (item.Health_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Health) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Health),
                    item: item.Health,
                    fieldIndex: (int)PlacedObject_FieldIndex.Health,
                    errorMask: errorMask);
            }
            if (item.LevelModifier_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LevelModifier) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LevelModifier),
                    item: item.LevelModifier,
                    fieldIndex: (int)PlacedObject_FieldIndex.LevelModifier,
                    errorMask: errorMask);
            }
            if (item.Unknown_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Unknown) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown_Property?.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if (item.ActionFlags_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ActionFlags) ?? true))
            {
                EnumXmlTranslation<PlacedObject.ActionFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.ActionFlags),
                    item: item.ActionFlags,
                    fieldIndex: (int)PlacedObject_FieldIndex.ActionFlags,
                    errorMask: errorMask);
            }
            if (item.Count_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Count) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Count),
                    item: item.Count,
                    fieldIndex: (int)PlacedObject_FieldIndex.Count,
                    errorMask: errorMask);
            }
            if (item.MapMarker_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MapMarker) ?? true))
            {
                ((MapMarkerXmlWriteTranslation)((IXmlItem)item.MapMarker).XmlWriteTranslator).Write(
                    item: item.MapMarker,
                    node: node,
                    name: nameof(item.MapMarker),
                    fieldIndex: (int)PlacedObject_FieldIndex.MapMarker,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker));
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.OpenByDefault) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OpenByDefault),
                    item: item.OpenByDefault,
                    fieldIndex: (int)PlacedObject_FieldIndex.OpenByDefault,
                    errorMask: errorMask);
            }
            if (item.RagdollData_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollData) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RagdollData),
                    item: item.RagdollData,
                    fieldIndex: (int)PlacedObject_FieldIndex.RagdollData,
                    errorMask: errorMask);
            }
            if (item.Scale_IsSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Scale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Scale),
                    item: item.Scale,
                    fieldIndex: (int)PlacedObject_FieldIndex.Scale,
                    errorMask: errorMask);
            }
            if (item.ContainedSoul_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ContainedSoul) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ContainedSoul),
                    item: item.ContainedSoul_Property?.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(PlacedObject.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Position) ?? true))
                {
                    P3FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Position),
                        item: item.Position,
                        fieldIndex: (int)PlacedObject_FieldIndex.Position,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Rotation) ?? true))
                {
                    P3FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Rotation),
                        item: item.Rotation,
                        fieldIndex: (int)PlacedObject_FieldIndex.Rotation,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<PlacedObject.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)PlacedObject_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IPlacedObjectInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PlacedObject");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PlacedObject");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPlacedObjectInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPlacedObjectInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPlacedObjectInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class PlacedObjectXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static PlacedObjectXmlCreateTranslation Instance = new PlacedObjectXmlCreateTranslation();

        public static void FillPublicXml(
            IPlacedObjectInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PlacedObjectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPlacedObjectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Base":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Base_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Base,
                        errorMask: errorMask);
                    break;
                case "XPCIFluff":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.XPCIFluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] XPCIFluffParse,
                            errorMask: errorMask))
                        {
                            item.XPCIFluff = XPCIFluffParse;
                        }
                        else
                        {
                            item.XPCIFluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FULLFluff":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.FULLFluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FULLFluffParse,
                            errorMask: errorMask))
                        {
                            item.FULLFluff = FULLFluffParse;
                        }
                        else
                        {
                            item.FULLFluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TeleportDestination":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                        if (LoquiXmlTranslation<TeleportDestination>.Instance.Parse(
                            node: node,
                            item: out TeleportDestination TeleportDestinationParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination)))
                        {
                            item.TeleportDestination = TeleportDestinationParse;
                        }
                        else
                        {
                            item.TeleportDestination = default(TeleportDestination);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lock":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                        if (LoquiXmlTranslation<LockInformation>.Instance.Parse(
                            node: node,
                            item: out LockInformation LockParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock)))
                        {
                            item.Lock = LockParse;
                        }
                        else
                        {
                            item.Lock = default(LockInformation);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Owner":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Owner_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Owner,
                        errorMask: errorMask);
                    break;
                case "FactionRank":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.FactionRank);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 FactionRankParse,
                            errorMask: errorMask))
                        {
                            item.FactionRank = FactionRankParse;
                        }
                        else
                        {
                            item.FactionRank = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlobalVariable":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.GlobalVariable_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.GlobalVariable,
                        errorMask: errorMask);
                    break;
                case "EnableParent":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                        if (LoquiXmlTranslation<EnableParent>.Instance.Parse(
                            node: node,
                            item: out EnableParent EnableParentParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent)))
                        {
                            item.EnableParent = EnableParentParse;
                        }
                        else
                        {
                            item.EnableParent = default(EnableParent);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Target":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Target_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Target,
                        errorMask: errorMask);
                    break;
                case "SpeedTreeSeed":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.SpeedTreeSeed);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte SpeedTreeSeedParse,
                            errorMask: errorMask))
                        {
                            item.SpeedTreeSeed = SpeedTreeSeedParse;
                        }
                        else
                        {
                            item.SpeedTreeSeed = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DistantLODData":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.DistantLODData);
                        if (LoquiXmlTranslation<DistantLODData>.Instance.Parse(
                            node: node,
                            item: out DistantLODData DistantLODDataParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.DistantLODData)))
                        {
                            item.DistantLODData = DistantLODDataParse;
                        }
                        else
                        {
                            item.DistantLODData = default(DistantLODData);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Charge":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Charge);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ChargeParse,
                            errorMask: errorMask))
                        {
                            item.Charge = ChargeParse;
                        }
                        else
                        {
                            item.Charge = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Health);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 HealthParse,
                            errorMask: errorMask))
                        {
                            item.Health = HealthParse;
                        }
                        else
                        {
                            item.Health = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LevelModifier":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.LevelModifier);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 LevelModifierParse,
                            errorMask: errorMask))
                        {
                            item.LevelModifier = LevelModifierParse;
                        }
                        else
                        {
                            item.LevelModifier = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Unknown_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                        errorMask: errorMask);
                    break;
                case "ActionFlags":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.ActionFlags);
                        if (EnumXmlTranslation<PlacedObject.ActionFlag>.Instance.Parse(
                            node: node,
                            item: out PlacedObject.ActionFlag ActionFlagsParse,
                            errorMask: errorMask))
                        {
                            item.ActionFlags = ActionFlagsParse;
                        }
                        else
                        {
                            item.ActionFlags = default(PlacedObject.ActionFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Count":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Count);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 CountParse,
                            errorMask: errorMask))
                        {
                            item.Count = CountParse;
                        }
                        else
                        {
                            item.Count = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapMarker":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                        if (LoquiXmlTranslation<MapMarker>.Instance.Parse(
                            node: node,
                            item: out MapMarker MapMarkerParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker)))
                        {
                            item.MapMarker = MapMarkerParse;
                        }
                        else
                        {
                            item.MapMarker = default(MapMarker);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OpenByDefault":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.OpenByDefault);
                        if (BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Boolean OpenByDefaultParse,
                            errorMask: errorMask))
                        {
                            item.OpenByDefault = OpenByDefaultParse;
                        }
                        else
                        {
                            item.OpenByDefault = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RagdollData":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.RagdollData);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] RagdollDataParse,
                            errorMask: errorMask))
                        {
                            item.RagdollData = RagdollDataParse;
                        }
                        else
                        {
                            item.RagdollData = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scale":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Scale);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ScaleParse,
                            errorMask: errorMask))
                        {
                            item.Scale = ScaleParse;
                        }
                        else
                        {
                            item.Scale = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ContainedSoul":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.ContainedSoul_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                        errorMask: errorMask);
                    break;
                case "Position":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Position);
                        if (P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P3Float PositionParse,
                            errorMask: errorMask))
                        {
                            item.Position = PositionParse;
                        }
                        else
                        {
                            item.Position = default(P3Float);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= PlacedObject.DATADataType.Has;
                    break;
                case "Rotation":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Rotation);
                        if (P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P3Float RotationParse,
                            errorMask: errorMask))
                        {
                            item.Rotation = RotationParse;
                        }
                        else
                        {
                            item.Rotation = default(P3Float);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<PlacedObject.DATADataType>.Instance.Parse(
                            node: node,
                            item: out PlacedObject.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(PlacedObject.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class PlacedObjectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPlacedObjectInternalGetter item,
            XElement node,
            out PlacedObject_ErrorMask errorMask,
            bool doMasks = true,
            PlacedObject_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PlacedObjectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPlacedObjectInternalGetter item,
            string path,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPlacedObjectInternalGetter item,
            Stream stream,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class PlacedObject_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<PlacedObject_Mask<T>>
    {
        #region Ctors
        public PlacedObject_Mask()
        {
        }

        public PlacedObject_Mask(T initialValue)
        {
            this.Base = initialValue;
            this.XPCIFluff = initialValue;
            this.FULLFluff = initialValue;
            this.TeleportDestination = new MaskItem<T, TeleportDestination_Mask<T>>(initialValue, new TeleportDestination_Mask<T>(initialValue));
            this.Lock = new MaskItem<T, LockInformation_Mask<T>>(initialValue, new LockInformation_Mask<T>(initialValue));
            this.Owner = initialValue;
            this.FactionRank = initialValue;
            this.GlobalVariable = initialValue;
            this.EnableParent = new MaskItem<T, EnableParent_Mask<T>>(initialValue, new EnableParent_Mask<T>(initialValue));
            this.Target = initialValue;
            this.SpeedTreeSeed = initialValue;
            this.DistantLODData = new MaskItem<T, DistantLODData_Mask<T>>(initialValue, new DistantLODData_Mask<T>(initialValue));
            this.Charge = initialValue;
            this.Health = initialValue;
            this.LevelModifier = initialValue;
            this.Unknown = initialValue;
            this.ActionFlags = initialValue;
            this.Count = initialValue;
            this.MapMarker = new MaskItem<T, MapMarker_Mask<T>>(initialValue, new MapMarker_Mask<T>(initialValue));
            this.OpenByDefault = initialValue;
            this.RagdollData = initialValue;
            this.Scale = initialValue;
            this.ContainedSoul = initialValue;
            this.Position = initialValue;
            this.Rotation = initialValue;
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Base;
        public T XPCIFluff;
        public T FULLFluff;
        public MaskItem<T, TeleportDestination_Mask<T>> TeleportDestination { get; set; }
        public MaskItem<T, LockInformation_Mask<T>> Lock { get; set; }
        public T Owner;
        public T FactionRank;
        public T GlobalVariable;
        public MaskItem<T, EnableParent_Mask<T>> EnableParent { get; set; }
        public T Target;
        public T SpeedTreeSeed;
        public MaskItem<T, DistantLODData_Mask<T>> DistantLODData { get; set; }
        public T Charge;
        public T Health;
        public T LevelModifier;
        public T Unknown;
        public T ActionFlags;
        public T Count;
        public MaskItem<T, MapMarker_Mask<T>> MapMarker { get; set; }
        public T OpenByDefault;
        public T RagdollData;
        public T Scale;
        public T ContainedSoul;
        public T Position;
        public T Rotation;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PlacedObject_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PlacedObject_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Base, rhs.Base)) return false;
            if (!object.Equals(this.XPCIFluff, rhs.XPCIFluff)) return false;
            if (!object.Equals(this.FULLFluff, rhs.FULLFluff)) return false;
            if (!object.Equals(this.TeleportDestination, rhs.TeleportDestination)) return false;
            if (!object.Equals(this.Lock, rhs.Lock)) return false;
            if (!object.Equals(this.Owner, rhs.Owner)) return false;
            if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
            if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
            if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
            if (!object.Equals(this.Target, rhs.Target)) return false;
            if (!object.Equals(this.SpeedTreeSeed, rhs.SpeedTreeSeed)) return false;
            if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
            if (!object.Equals(this.Charge, rhs.Charge)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.LevelModifier, rhs.LevelModifier)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            if (!object.Equals(this.ActionFlags, rhs.ActionFlags)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            if (!object.Equals(this.MapMarker, rhs.MapMarker)) return false;
            if (!object.Equals(this.OpenByDefault, rhs.OpenByDefault)) return false;
            if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
            if (!object.Equals(this.Scale, rhs.Scale)) return false;
            if (!object.Equals(this.ContainedSoul, rhs.ContainedSoul)) return false;
            if (!object.Equals(this.Position, rhs.Position)) return false;
            if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Base?.GetHashCode());
            ret = ret.CombineHashCode(this.XPCIFluff?.GetHashCode());
            ret = ret.CombineHashCode(this.FULLFluff?.GetHashCode());
            ret = ret.CombineHashCode(this.TeleportDestination?.GetHashCode());
            ret = ret.CombineHashCode(this.Lock?.GetHashCode());
            ret = ret.CombineHashCode(this.Owner?.GetHashCode());
            ret = ret.CombineHashCode(this.FactionRank?.GetHashCode());
            ret = ret.CombineHashCode(this.GlobalVariable?.GetHashCode());
            ret = ret.CombineHashCode(this.EnableParent?.GetHashCode());
            ret = ret.CombineHashCode(this.Target?.GetHashCode());
            ret = ret.CombineHashCode(this.SpeedTreeSeed?.GetHashCode());
            ret = ret.CombineHashCode(this.DistantLODData?.GetHashCode());
            ret = ret.CombineHashCode(this.Charge?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.LevelModifier?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(this.ActionFlags?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            ret = ret.CombineHashCode(this.MapMarker?.GetHashCode());
            ret = ret.CombineHashCode(this.OpenByDefault?.GetHashCode());
            ret = ret.CombineHashCode(this.RagdollData?.GetHashCode());
            ret = ret.CombineHashCode(this.Scale?.GetHashCode());
            ret = ret.CombineHashCode(this.ContainedSoul?.GetHashCode());
            ret = ret.CombineHashCode(this.Position?.GetHashCode());
            ret = ret.CombineHashCode(this.Rotation?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Base)) return false;
            if (!eval(this.XPCIFluff)) return false;
            if (!eval(this.FULLFluff)) return false;
            if (TeleportDestination != null)
            {
                if (!eval(this.TeleportDestination.Overall)) return false;
                if (this.TeleportDestination.Specific != null && !this.TeleportDestination.Specific.AllEqual(eval)) return false;
            }
            if (Lock != null)
            {
                if (!eval(this.Lock.Overall)) return false;
                if (this.Lock.Specific != null && !this.Lock.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Owner)) return false;
            if (!eval(this.FactionRank)) return false;
            if (!eval(this.GlobalVariable)) return false;
            if (EnableParent != null)
            {
                if (!eval(this.EnableParent.Overall)) return false;
                if (this.EnableParent.Specific != null && !this.EnableParent.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Target)) return false;
            if (!eval(this.SpeedTreeSeed)) return false;
            if (DistantLODData != null)
            {
                if (!eval(this.DistantLODData.Overall)) return false;
                if (this.DistantLODData.Specific != null && !this.DistantLODData.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Charge)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.LevelModifier)) return false;
            if (!eval(this.Unknown)) return false;
            if (!eval(this.ActionFlags)) return false;
            if (!eval(this.Count)) return false;
            if (MapMarker != null)
            {
                if (!eval(this.MapMarker.Overall)) return false;
                if (this.MapMarker.Specific != null && !this.MapMarker.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.OpenByDefault)) return false;
            if (!eval(this.RagdollData)) return false;
            if (!eval(this.Scale)) return false;
            if (!eval(this.ContainedSoul)) return false;
            if (!eval(this.Position)) return false;
            if (!eval(this.Rotation)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new PlacedObject_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PlacedObject_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PlacedObject_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Base = eval(this.Base);
            obj.XPCIFluff = eval(this.XPCIFluff);
            obj.FULLFluff = eval(this.FULLFluff);
            if (this.TeleportDestination != null)
            {
                obj.TeleportDestination = new MaskItem<R, TeleportDestination_Mask<R>>();
                obj.TeleportDestination.Overall = eval(this.TeleportDestination.Overall);
                if (this.TeleportDestination.Specific != null)
                {
                    obj.TeleportDestination.Specific = this.TeleportDestination.Specific.Translate(eval);
                }
            }
            if (this.Lock != null)
            {
                obj.Lock = new MaskItem<R, LockInformation_Mask<R>>();
                obj.Lock.Overall = eval(this.Lock.Overall);
                if (this.Lock.Specific != null)
                {
                    obj.Lock.Specific = this.Lock.Specific.Translate(eval);
                }
            }
            obj.Owner = eval(this.Owner);
            obj.FactionRank = eval(this.FactionRank);
            obj.GlobalVariable = eval(this.GlobalVariable);
            if (this.EnableParent != null)
            {
                obj.EnableParent = new MaskItem<R, EnableParent_Mask<R>>();
                obj.EnableParent.Overall = eval(this.EnableParent.Overall);
                if (this.EnableParent.Specific != null)
                {
                    obj.EnableParent.Specific = this.EnableParent.Specific.Translate(eval);
                }
            }
            obj.Target = eval(this.Target);
            obj.SpeedTreeSeed = eval(this.SpeedTreeSeed);
            if (this.DistantLODData != null)
            {
                obj.DistantLODData = new MaskItem<R, DistantLODData_Mask<R>>();
                obj.DistantLODData.Overall = eval(this.DistantLODData.Overall);
                if (this.DistantLODData.Specific != null)
                {
                    obj.DistantLODData.Specific = this.DistantLODData.Specific.Translate(eval);
                }
            }
            obj.Charge = eval(this.Charge);
            obj.Health = eval(this.Health);
            obj.LevelModifier = eval(this.LevelModifier);
            obj.Unknown = eval(this.Unknown);
            obj.ActionFlags = eval(this.ActionFlags);
            obj.Count = eval(this.Count);
            if (this.MapMarker != null)
            {
                obj.MapMarker = new MaskItem<R, MapMarker_Mask<R>>();
                obj.MapMarker.Overall = eval(this.MapMarker.Overall);
                if (this.MapMarker.Specific != null)
                {
                    obj.MapMarker.Specific = this.MapMarker.Specific.Translate(eval);
                }
            }
            obj.OpenByDefault = eval(this.OpenByDefault);
            obj.RagdollData = eval(this.RagdollData);
            obj.Scale = eval(this.Scale);
            obj.ContainedSoul = eval(this.ContainedSoul);
            obj.Position = eval(this.Position);
            obj.Rotation = eval(this.Rotation);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PlacedObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PlacedObject_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PlacedObject_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Base ?? true)
                {
                    fg.AppendLine($"Base => {Base}");
                }
                if (printMask?.XPCIFluff ?? true)
                {
                    fg.AppendLine($"XPCIFluff => {XPCIFluff}");
                }
                if (printMask?.FULLFluff ?? true)
                {
                    fg.AppendLine($"FULLFluff => {FULLFluff}");
                }
                if (printMask?.TeleportDestination?.Overall ?? true)
                {
                    TeleportDestination?.ToString(fg);
                }
                if (printMask?.Lock?.Overall ?? true)
                {
                    Lock?.ToString(fg);
                }
                if (printMask?.Owner ?? true)
                {
                    fg.AppendLine($"Owner => {Owner}");
                }
                if (printMask?.FactionRank ?? true)
                {
                    fg.AppendLine($"FactionRank => {FactionRank}");
                }
                if (printMask?.GlobalVariable ?? true)
                {
                    fg.AppendLine($"GlobalVariable => {GlobalVariable}");
                }
                if (printMask?.EnableParent?.Overall ?? true)
                {
                    EnableParent?.ToString(fg);
                }
                if (printMask?.Target ?? true)
                {
                    fg.AppendLine($"Target => {Target}");
                }
                if (printMask?.SpeedTreeSeed ?? true)
                {
                    fg.AppendLine($"SpeedTreeSeed => {SpeedTreeSeed}");
                }
                if (printMask?.DistantLODData?.Overall ?? true)
                {
                    DistantLODData?.ToString(fg);
                }
                if (printMask?.Charge ?? true)
                {
                    fg.AppendLine($"Charge => {Charge}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.LevelModifier ?? true)
                {
                    fg.AppendLine($"LevelModifier => {LevelModifier}");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
                if (printMask?.ActionFlags ?? true)
                {
                    fg.AppendLine($"ActionFlags => {ActionFlags}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {Count}");
                }
                if (printMask?.MapMarker?.Overall ?? true)
                {
                    MapMarker?.ToString(fg);
                }
                if (printMask?.OpenByDefault ?? true)
                {
                    fg.AppendLine($"OpenByDefault => {OpenByDefault}");
                }
                if (printMask?.RagdollData ?? true)
                {
                    fg.AppendLine($"RagdollData => {RagdollData}");
                }
                if (printMask?.Scale ?? true)
                {
                    fg.AppendLine($"Scale => {Scale}");
                }
                if (printMask?.ContainedSoul ?? true)
                {
                    fg.AppendLine($"ContainedSoul => {ContainedSoul}");
                }
                if (printMask?.Position ?? true)
                {
                    fg.AppendLine($"Position => {Position}");
                }
                if (printMask?.Rotation ?? true)
                {
                    fg.AppendLine($"Rotation => {Rotation}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PlacedObject_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<PlacedObject_ErrorMask>
    {
        #region Members
        public Exception Base;
        public Exception XPCIFluff;
        public Exception FULLFluff;
        public MaskItem<Exception, TeleportDestination_ErrorMask> TeleportDestination;
        public MaskItem<Exception, LockInformation_ErrorMask> Lock;
        public Exception Owner;
        public Exception FactionRank;
        public Exception GlobalVariable;
        public MaskItem<Exception, EnableParent_ErrorMask> EnableParent;
        public Exception Target;
        public Exception SpeedTreeSeed;
        public MaskItem<Exception, DistantLODData_ErrorMask> DistantLODData;
        public Exception Charge;
        public Exception Health;
        public Exception LevelModifier;
        public Exception Unknown;
        public Exception ActionFlags;
        public Exception Count;
        public MaskItem<Exception, MapMarker_ErrorMask> MapMarker;
        public Exception OpenByDefault;
        public Exception RagdollData;
        public Exception Scale;
        public Exception ContainedSoul;
        public Exception Position;
        public Exception Rotation;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return Base;
                case PlacedObject_FieldIndex.XPCIFluff:
                    return XPCIFluff;
                case PlacedObject_FieldIndex.FULLFluff:
                    return FULLFluff;
                case PlacedObject_FieldIndex.TeleportDestination:
                    return TeleportDestination;
                case PlacedObject_FieldIndex.Lock:
                    return Lock;
                case PlacedObject_FieldIndex.Owner:
                    return Owner;
                case PlacedObject_FieldIndex.FactionRank:
                    return FactionRank;
                case PlacedObject_FieldIndex.GlobalVariable:
                    return GlobalVariable;
                case PlacedObject_FieldIndex.EnableParent:
                    return EnableParent;
                case PlacedObject_FieldIndex.Target:
                    return Target;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return SpeedTreeSeed;
                case PlacedObject_FieldIndex.DistantLODData:
                    return DistantLODData;
                case PlacedObject_FieldIndex.Charge:
                    return Charge;
                case PlacedObject_FieldIndex.Health:
                    return Health;
                case PlacedObject_FieldIndex.LevelModifier:
                    return LevelModifier;
                case PlacedObject_FieldIndex.Unknown:
                    return Unknown;
                case PlacedObject_FieldIndex.ActionFlags:
                    return ActionFlags;
                case PlacedObject_FieldIndex.Count:
                    return Count;
                case PlacedObject_FieldIndex.MapMarker:
                    return MapMarker;
                case PlacedObject_FieldIndex.OpenByDefault:
                    return OpenByDefault;
                case PlacedObject_FieldIndex.RagdollData:
                    return RagdollData;
                case PlacedObject_FieldIndex.Scale:
                    return Scale;
                case PlacedObject_FieldIndex.ContainedSoul:
                    return ContainedSoul;
                case PlacedObject_FieldIndex.Position:
                    return Position;
                case PlacedObject_FieldIndex.Rotation:
                    return Rotation;
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    this.Base = ex;
                    break;
                case PlacedObject_FieldIndex.XPCIFluff:
                    this.XPCIFluff = ex;
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    this.FULLFluff = ex;
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    this.TeleportDestination = new MaskItem<Exception, TeleportDestination_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Lock:
                    this.Lock = new MaskItem<Exception, LockInformation_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Owner:
                    this.Owner = ex;
                    break;
                case PlacedObject_FieldIndex.FactionRank:
                    this.FactionRank = ex;
                    break;
                case PlacedObject_FieldIndex.GlobalVariable:
                    this.GlobalVariable = ex;
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    this.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Target:
                    this.Target = ex;
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    this.SpeedTreeSeed = ex;
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    this.DistantLODData = new MaskItem<Exception, DistantLODData_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Charge:
                    this.Charge = ex;
                    break;
                case PlacedObject_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    this.LevelModifier = ex;
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    this.ActionFlags = ex;
                    break;
                case PlacedObject_FieldIndex.Count:
                    this.Count = ex;
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    this.MapMarker = new MaskItem<Exception, MapMarker_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    this.OpenByDefault = ex;
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    this.RagdollData = ex;
                    break;
                case PlacedObject_FieldIndex.Scale:
                    this.Scale = ex;
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    this.ContainedSoul = ex;
                    break;
                case PlacedObject_FieldIndex.Position:
                    this.Position = ex;
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    this.Rotation = ex;
                    break;
                case PlacedObject_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    this.Base = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.XPCIFluff:
                    this.XPCIFluff = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    this.FULLFluff = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    this.TeleportDestination = (MaskItem<Exception, TeleportDestination_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Lock:
                    this.Lock = (MaskItem<Exception, LockInformation_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Owner:
                    this.Owner = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.FactionRank:
                    this.FactionRank = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.GlobalVariable:
                    this.GlobalVariable = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    this.EnableParent = (MaskItem<Exception, EnableParent_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Target:
                    this.Target = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    this.SpeedTreeSeed = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    this.DistantLODData = (MaskItem<Exception, DistantLODData_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Charge:
                    this.Charge = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    this.LevelModifier = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    this.ActionFlags = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Count:
                    this.Count = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    this.MapMarker = (MaskItem<Exception, MapMarker_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    this.OpenByDefault = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    this.RagdollData = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Scale:
                    this.Scale = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    this.ContainedSoul = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Position:
                    this.Position = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    this.Rotation = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Base != null) return true;
            if (XPCIFluff != null) return true;
            if (FULLFluff != null) return true;
            if (TeleportDestination != null) return true;
            if (Lock != null) return true;
            if (Owner != null) return true;
            if (FactionRank != null) return true;
            if (GlobalVariable != null) return true;
            if (EnableParent != null) return true;
            if (Target != null) return true;
            if (SpeedTreeSeed != null) return true;
            if (DistantLODData != null) return true;
            if (Charge != null) return true;
            if (Health != null) return true;
            if (LevelModifier != null) return true;
            if (Unknown != null) return true;
            if (ActionFlags != null) return true;
            if (Count != null) return true;
            if (MapMarker != null) return true;
            if (OpenByDefault != null) return true;
            if (RagdollData != null) return true;
            if (Scale != null) return true;
            if (ContainedSoul != null) return true;
            if (Position != null) return true;
            if (Rotation != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("PlacedObject_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Base => {Base}");
            fg.AppendLine($"XPCIFluff => {XPCIFluff}");
            fg.AppendLine($"FULLFluff => {FULLFluff}");
            TeleportDestination?.ToString(fg);
            Lock?.ToString(fg);
            fg.AppendLine($"Owner => {Owner}");
            fg.AppendLine($"FactionRank => {FactionRank}");
            fg.AppendLine($"GlobalVariable => {GlobalVariable}");
            EnableParent?.ToString(fg);
            fg.AppendLine($"Target => {Target}");
            fg.AppendLine($"SpeedTreeSeed => {SpeedTreeSeed}");
            DistantLODData?.ToString(fg);
            fg.AppendLine($"Charge => {Charge}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"LevelModifier => {LevelModifier}");
            fg.AppendLine($"Unknown => {Unknown}");
            fg.AppendLine($"ActionFlags => {ActionFlags}");
            fg.AppendLine($"Count => {Count}");
            MapMarker?.ToString(fg);
            fg.AppendLine($"OpenByDefault => {OpenByDefault}");
            fg.AppendLine($"RagdollData => {RagdollData}");
            fg.AppendLine($"Scale => {Scale}");
            fg.AppendLine($"ContainedSoul => {ContainedSoul}");
            fg.AppendLine($"Position => {Position}");
            fg.AppendLine($"Rotation => {Rotation}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public PlacedObject_ErrorMask Combine(PlacedObject_ErrorMask rhs)
        {
            var ret = new PlacedObject_ErrorMask();
            ret.Base = this.Base.Combine(rhs.Base);
            ret.XPCIFluff = this.XPCIFluff.Combine(rhs.XPCIFluff);
            ret.FULLFluff = this.FULLFluff.Combine(rhs.FULLFluff);
            ret.TeleportDestination = new MaskItem<Exception, TeleportDestination_ErrorMask>(this.TeleportDestination.Overall.Combine(rhs.TeleportDestination.Overall), ((IErrorMask<TeleportDestination_ErrorMask>)this.TeleportDestination.Specific).Combine(rhs.TeleportDestination.Specific));
            ret.Lock = new MaskItem<Exception, LockInformation_ErrorMask>(this.Lock.Overall.Combine(rhs.Lock.Overall), ((IErrorMask<LockInformation_ErrorMask>)this.Lock.Specific).Combine(rhs.Lock.Specific));
            ret.Owner = this.Owner.Combine(rhs.Owner);
            ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
            ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
            ret.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(this.EnableParent.Overall.Combine(rhs.EnableParent.Overall), ((IErrorMask<EnableParent_ErrorMask>)this.EnableParent.Specific).Combine(rhs.EnableParent.Specific));
            ret.Target = this.Target.Combine(rhs.Target);
            ret.SpeedTreeSeed = this.SpeedTreeSeed.Combine(rhs.SpeedTreeSeed);
            ret.DistantLODData = new MaskItem<Exception, DistantLODData_ErrorMask>(this.DistantLODData.Overall.Combine(rhs.DistantLODData.Overall), ((IErrorMask<DistantLODData_ErrorMask>)this.DistantLODData.Specific).Combine(rhs.DistantLODData.Specific));
            ret.Charge = this.Charge.Combine(rhs.Charge);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.LevelModifier = this.LevelModifier.Combine(rhs.LevelModifier);
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            ret.ActionFlags = this.ActionFlags.Combine(rhs.ActionFlags);
            ret.Count = this.Count.Combine(rhs.Count);
            ret.MapMarker = new MaskItem<Exception, MapMarker_ErrorMask>(this.MapMarker.Overall.Combine(rhs.MapMarker.Overall), ((IErrorMask<MapMarker_ErrorMask>)this.MapMarker.Specific).Combine(rhs.MapMarker.Specific));
            ret.OpenByDefault = this.OpenByDefault.Combine(rhs.OpenByDefault);
            ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
            ret.Scale = this.Scale.Combine(rhs.Scale);
            ret.ContainedSoul = this.ContainedSoul.Combine(rhs.ContainedSoul);
            ret.Position = this.Position.Combine(rhs.Position);
            ret.Rotation = this.Rotation.Combine(rhs.Rotation);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static PlacedObject_ErrorMask Combine(PlacedObject_ErrorMask lhs, PlacedObject_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PlacedObject_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PlacedObject_ErrorMask();
        }
        #endregion

    }
    public class PlacedObject_CopyMask : OblivionMajorRecord_CopyMask
    {
        public PlacedObject_CopyMask()
        {
        }

        public PlacedObject_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Base = defaultOn;
            this.XPCIFluff = defaultOn;
            this.FULLFluff = defaultOn;
            this.TeleportDestination = new MaskItem<CopyOption, TeleportDestination_CopyMask>(deepCopyOption, default);
            this.Lock = new MaskItem<CopyOption, LockInformation_CopyMask>(deepCopyOption, default);
            this.Owner = defaultOn;
            this.FactionRank = defaultOn;
            this.GlobalVariable = defaultOn;
            this.EnableParent = new MaskItem<CopyOption, EnableParent_CopyMask>(deepCopyOption, default);
            this.Target = defaultOn;
            this.SpeedTreeSeed = defaultOn;
            this.DistantLODData = new MaskItem<CopyOption, DistantLODData_CopyMask>(deepCopyOption, default);
            this.Charge = defaultOn;
            this.Health = defaultOn;
            this.LevelModifier = defaultOn;
            this.Unknown = defaultOn;
            this.ActionFlags = defaultOn;
            this.Count = defaultOn;
            this.MapMarker = new MaskItem<CopyOption, MapMarker_CopyMask>(deepCopyOption, default);
            this.OpenByDefault = defaultOn;
            this.RagdollData = defaultOn;
            this.Scale = defaultOn;
            this.ContainedSoul = defaultOn;
            this.Position = defaultOn;
            this.Rotation = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public bool Base;
        public bool XPCIFluff;
        public bool FULLFluff;
        public MaskItem<CopyOption, TeleportDestination_CopyMask> TeleportDestination;
        public MaskItem<CopyOption, LockInformation_CopyMask> Lock;
        public bool Owner;
        public bool FactionRank;
        public bool GlobalVariable;
        public MaskItem<CopyOption, EnableParent_CopyMask> EnableParent;
        public bool Target;
        public bool SpeedTreeSeed;
        public MaskItem<CopyOption, DistantLODData_CopyMask> DistantLODData;
        public bool Charge;
        public bool Health;
        public bool LevelModifier;
        public bool Unknown;
        public bool ActionFlags;
        public bool Count;
        public MaskItem<CopyOption, MapMarker_CopyMask> MapMarker;
        public bool OpenByDefault;
        public bool RagdollData;
        public bool Scale;
        public bool ContainedSoul;
        public bool Position;
        public bool Rotation;
        public bool DATADataTypeState;
        #endregion

    }

    public class PlacedObject_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Base;
        public bool XPCIFluff;
        public bool FULLFluff;
        public MaskItem<bool, TeleportDestination_TranslationMask> TeleportDestination;
        public MaskItem<bool, LockInformation_TranslationMask> Lock;
        public bool Owner;
        public bool FactionRank;
        public bool GlobalVariable;
        public MaskItem<bool, EnableParent_TranslationMask> EnableParent;
        public bool Target;
        public bool SpeedTreeSeed;
        public MaskItem<bool, DistantLODData_TranslationMask> DistantLODData;
        public bool Charge;
        public bool Health;
        public bool LevelModifier;
        public bool Unknown;
        public bool ActionFlags;
        public bool Count;
        public MaskItem<bool, MapMarker_TranslationMask> MapMarker;
        public bool OpenByDefault;
        public bool RagdollData;
        public bool Scale;
        public bool ContainedSoul;
        public bool Position;
        public bool Rotation;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public PlacedObject_TranslationMask()
            : base()
        {
        }

        public PlacedObject_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Base = defaultOn;
            this.XPCIFluff = defaultOn;
            this.FULLFluff = defaultOn;
            this.TeleportDestination = new MaskItem<bool, TeleportDestination_TranslationMask>(defaultOn, null);
            this.Lock = new MaskItem<bool, LockInformation_TranslationMask>(defaultOn, null);
            this.Owner = defaultOn;
            this.FactionRank = defaultOn;
            this.GlobalVariable = defaultOn;
            this.EnableParent = new MaskItem<bool, EnableParent_TranslationMask>(defaultOn, null);
            this.Target = defaultOn;
            this.SpeedTreeSeed = defaultOn;
            this.DistantLODData = new MaskItem<bool, DistantLODData_TranslationMask>(defaultOn, null);
            this.Charge = defaultOn;
            this.Health = defaultOn;
            this.LevelModifier = defaultOn;
            this.Unknown = defaultOn;
            this.ActionFlags = defaultOn;
            this.Count = defaultOn;
            this.MapMarker = new MaskItem<bool, MapMarker_TranslationMask>(defaultOn, null);
            this.OpenByDefault = defaultOn;
            this.RagdollData = defaultOn;
            this.Scale = defaultOn;
            this.ContainedSoul = defaultOn;
            this.Position = defaultOn;
            this.Rotation = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Base, null));
            ret.Add((XPCIFluff, null));
            ret.Add((FULLFluff, null));
            ret.Add((TeleportDestination?.Overall ?? true, TeleportDestination?.Specific?.GetCrystal()));
            ret.Add((Lock?.Overall ?? true, Lock?.Specific?.GetCrystal()));
            ret.Add((Owner, null));
            ret.Add((FactionRank, null));
            ret.Add((GlobalVariable, null));
            ret.Add((EnableParent?.Overall ?? true, EnableParent?.Specific?.GetCrystal()));
            ret.Add((Target, null));
            ret.Add((SpeedTreeSeed, null));
            ret.Add((DistantLODData?.Overall ?? true, DistantLODData?.Specific?.GetCrystal()));
            ret.Add((Charge, null));
            ret.Add((Health, null));
            ret.Add((LevelModifier, null));
            ret.Add((Unknown, null));
            ret.Add((ActionFlags, null));
            ret.Add((Count, null));
            ret.Add((MapMarker?.Overall ?? true, MapMarker?.Specific?.GetCrystal()));
            ret.Add((OpenByDefault, null));
            ret.Add((RagdollData, null));
            ret.Add((Scale, null));
            ret.Add((ContainedSoul, null));
            ret.Add((Position, null));
            ret.Add((Rotation, null));
            ret.Add((DATADataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class PlacedObjectBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PlacedObjectBinaryWriteTranslation Instance = new PlacedObjectBinaryWriteTranslation();

        static partial void WriteBinaryOpenByDefaultCustom(
            MutagenWriter writer,
            IPlacedObjectInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryOpenByDefault(
            MutagenWriter writer,
            IPlacedObjectInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryOpenByDefaultCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            IPlacedObjectInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IPlacedObjectInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Base_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Base_Property,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.NAME_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.XPCIFluff_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.XPCIFluff,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XPCI_HEADER),
                    nullable: false);
            }
            if (item.FULLFluff_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FULLFluff,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.TeleportDestination_IsSet)
            {
                ((TeleportDestinationBinaryWriteTranslation)((IBinaryItem)item.TeleportDestination).BinaryWriteTranslator).Write(
                    item: item.TeleportDestination,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Lock_IsSet)
            {
                ((LockInformationBinaryWriteTranslation)((IBinaryItem)item.Lock).BinaryWriteTranslator).Write(
                    item: item.Lock,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Owner_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Owner_Property,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XOWN_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.FactionRank_IsSet)
            {
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FactionRank,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRNK_HEADER),
                    nullable: false);
            }
            if (item.GlobalVariable_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.GlobalVariable_Property,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XGLB_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.EnableParent_IsSet)
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)item.EnableParent).BinaryWriteTranslator).Write(
                    item: item.EnableParent,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Target_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Target_Property,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XTRG_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.SpeedTreeSeed_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SpeedTreeSeed,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSED_HEADER),
                    nullable: false);
            }
            if (item.DistantLODData_IsSet)
            {
                ((DistantLODDataBinaryWriteTranslation)((IBinaryItem)item.DistantLODData).BinaryWriteTranslator).Write(
                    item: item.DistantLODData,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Charge_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Charge,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XCHG_HEADER),
                    nullable: false);
            }
            if (item.Health_IsSet)
            {
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Health,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XHLT_HEADER),
                    nullable: false);
            }
            if (item.LevelModifier_IsSet)
            {
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LevelModifier,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XLCM_HEADER),
                    nullable: false);
            }
            if (item.Unknown_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown_Property,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRTM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.ActionFlags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<PlacedObject.ActionFlag>.Instance.Write(
                    writer,
                    item.ActionFlags,
                    length: 4,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XACT_HEADER),
                    nullable: false);
            }
            if (item.Count_IsSet)
            {
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Count,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XCNT_HEADER),
                    nullable: false);
            }
            if (item.MapMarker_IsSet)
            {
                using (HeaderExport.ExportHeader(writer, PlacedObject_Registration.XMRK_HEADER, ObjectType.Subrecord)) { }
                ((MapMarkerBinaryWriteTranslation)((IBinaryItem)item.MapMarker).BinaryWriteTranslator).Write(
                    item: item.MapMarker,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            PlacedObjectBinaryWriteTranslation.WriteBinaryOpenByDefault(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            if (item.RagdollData_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RagdollData,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRGD_HEADER),
                    nullable: false);
            }
            if (item.Scale_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Scale,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSCL_HEADER),
                    nullable: false);
            }
            if (item.ContainedSoul_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ContainedSoul_Property,
                    header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSOL_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.DATADataTypeState.HasFlag(PlacedObject.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(PlacedObject_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Position);
                    Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Rotation);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IPlacedObjectInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: PlacedObject_Registration.REFR_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPlacedObjectInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPlacedObjectInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPlacedObjectInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class PlacedObjectBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static PlacedObjectBinaryCreateTranslation Instance = new PlacedObjectBinaryCreateTranslation();

        static partial void FillBinaryOpenByDefaultCustom(
            MutagenFrame frame,
            PlacedObject item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryOpenByDefaultCustomPublic(
            MutagenFrame frame,
            PlacedObject item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryOpenByDefaultCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class PlacedObjectBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPlacedObjectInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out PlacedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PlacedObjectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
