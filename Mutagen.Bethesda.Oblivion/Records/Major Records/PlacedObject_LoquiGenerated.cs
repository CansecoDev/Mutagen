/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedObject : 
        Placed,
        IPlacedObject,
        ILoquiObject<PlacedObject>,
        ILoquiObjectSetter,
        IPropertySupporter<Byte[]>,
        IPropertySupporter<TeleportDestination>,
        IPropertySupporter<LockInformation>,
        IPropertySupporter<Int32>,
        IPropertySupporter<EnableParent>,
        IPropertySupporter<Byte>,
        IPropertySupporter<DistantLODData>,
        IPropertySupporter<Single>,
        IPropertySupporter<PlacedObject.ActionFlag>,
        IPropertySupporter<MapMarker>,
        IPropertySupporter<Boolean>,
        IPropertySupporter<P3Float>,
        IEquatable<PlacedObject>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static PlacedObject_Registration Registration => PlacedObject_Registration.Instance;

        #region Ctor
        public PlacedObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        public FormIDSetLink<MajorRecord> Base_Property { get; } = new FormIDSetLink<MajorRecord>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MajorRecord Base { get => Base_Property.Item; set => Base_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<MajorRecord> IPlacedObjectGetter.Base_Property => this.Base_Property;
        #endregion
        #region XPCIFluff
        protected Byte[] _XPCIFluff;
        protected PropertyForwarder<PlacedObject, Byte[]> _XPCIFluffForwarder;
        public INotifyingSetItem<Byte[]> XPCIFluff_Property => _XPCIFluffForwarder ?? (_XPCIFluffForwarder = new PropertyForwarder<PlacedObject, Byte[]>(this, (int)PlacedObject_FieldIndex.XPCIFluff));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] XPCIFluff
        {
            get => this._XPCIFluff;
            set => this.SetXPCIFluff(value);
        }
        protected void SetXPCIFluff(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.XPCIFluff];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(XPCIFluff, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.XPCIFluff] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = XPCIFluff;
                _XPCIFluff = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.XPCIFluff,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _XPCIFluff = item;
            }
        }
        protected void UnsetXPCIFluff()
        {
            SetXPCIFluff(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IPlacedObject.XPCIFluff_Property => this.XPCIFluff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IPlacedObjectGetter.XPCIFluff_Property => this.XPCIFluff_Property;
        #endregion
        #region FULLFluff
        protected Byte[] _FULLFluff;
        protected PropertyForwarder<PlacedObject, Byte[]> _FULLFluffForwarder;
        public INotifyingSetItem<Byte[]> FULLFluff_Property => _FULLFluffForwarder ?? (_FULLFluffForwarder = new PropertyForwarder<PlacedObject, Byte[]>(this, (int)PlacedObject_FieldIndex.FULLFluff));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] FULLFluff
        {
            get => this._FULLFluff;
            set => this.SetFULLFluff(value);
        }
        protected void SetFULLFluff(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.FULLFluff];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(FULLFluff, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.FULLFluff] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = FULLFluff;
                _FULLFluff = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.FULLFluff,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _FULLFluff = item;
            }
        }
        protected void UnsetFULLFluff()
        {
            SetFULLFluff(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IPlacedObject.FULLFluff_Property => this.FULLFluff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IPlacedObjectGetter.FULLFluff_Property => this.FULLFluff_Property;
        #endregion
        #region TeleportDestination
        protected TeleportDestination _TeleportDestination;
        protected PropertyForwarder<PlacedObject, TeleportDestination> _TeleportDestinationForwarder;
        public INotifyingSetItem<TeleportDestination> TeleportDestination_Property => _TeleportDestinationForwarder ?? (_TeleportDestinationForwarder = new PropertyForwarder<PlacedObject, TeleportDestination>(this, (int)PlacedObject_FieldIndex.TeleportDestination));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TeleportDestination TeleportDestination
        {
            get => this._TeleportDestination;
            set => this.SetTeleportDestination(value);
        }
        protected void SetTeleportDestination(
            TeleportDestination item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.TeleportDestination];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(TeleportDestination, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.TeleportDestination] = hasBeenSet;
            }
            if (_TeleportDestination_subscriptions != null)
            {
                var tmp = TeleportDestination;
                _TeleportDestination = item;
                _TeleportDestination_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.TeleportDestination,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _TeleportDestination = item;
            }
        }
        protected void UnsetTeleportDestination()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.TeleportDestination] = false;
            TeleportDestination = default(TeleportDestination);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<TeleportDestination> IPlacedObject.TeleportDestination_Property => this.TeleportDestination_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<TeleportDestination> IPlacedObjectGetter.TeleportDestination_Property => this.TeleportDestination_Property;
        #endregion
        #region Lock
        protected LockInformation _Lock;
        protected PropertyForwarder<PlacedObject, LockInformation> _LockForwarder;
        public INotifyingSetItem<LockInformation> Lock_Property => _LockForwarder ?? (_LockForwarder = new PropertyForwarder<PlacedObject, LockInformation>(this, (int)PlacedObject_FieldIndex.Lock));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LockInformation Lock
        {
            get => this._Lock;
            set => this.SetLock(value);
        }
        protected void SetLock(
            LockInformation item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Lock];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Lock, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Lock] = hasBeenSet;
            }
            if (_LockInformation_subscriptions != null)
            {
                var tmp = Lock;
                _Lock = item;
                _LockInformation_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.Lock,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Lock = item;
            }
        }
        protected void UnsetLock()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Lock] = false;
            Lock = default(LockInformation);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<LockInformation> IPlacedObject.Lock_Property => this.Lock_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<LockInformation> IPlacedObjectGetter.Lock_Property => this.Lock_Property;
        #endregion
        #region Owner
        public FormIDSetLink<Faction> Owner_Property { get; } = new FormIDSetLink<Faction>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Faction Owner { get => Owner_Property.Item; set => Owner_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Faction> IPlacedObjectGetter.Owner_Property => this.Owner_Property;
        #endregion
        #region FactionRank
        protected Int32 _FactionRank;
        protected PropertyForwarder<PlacedObject, Int32> _FactionRankForwarder;
        public INotifyingSetItem<Int32> FactionRank_Property => _FactionRankForwarder ?? (_FactionRankForwarder = new PropertyForwarder<PlacedObject, Int32>(this, (int)PlacedObject_FieldIndex.FactionRank));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FactionRank
        {
            get => this._FactionRank;
            set => this.SetFactionRank(value);
        }
        protected void SetFactionRank(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.FactionRank];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && FactionRank == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.FactionRank] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = FactionRank;
                _FactionRank = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.FactionRank,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _FactionRank = item;
            }
        }
        protected void UnsetFactionRank()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.FactionRank] = false;
            FactionRank = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> IPlacedObject.FactionRank_Property => this.FactionRank_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> IPlacedObjectGetter.FactionRank_Property => this.FactionRank_Property;
        #endregion
        #region GlobalVariable
        public FormIDSetLink<Global> GlobalVariable_Property { get; } = new FormIDSetLink<Global>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Global GlobalVariable { get => GlobalVariable_Property.Item; set => GlobalVariable_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Global> IPlacedObjectGetter.GlobalVariable_Property => this.GlobalVariable_Property;
        #endregion
        #region EnableParent
        protected EnableParent _EnableParent;
        protected PropertyForwarder<PlacedObject, EnableParent> _EnableParentForwarder;
        public INotifyingSetItem<EnableParent> EnableParent_Property => _EnableParentForwarder ?? (_EnableParentForwarder = new PropertyForwarder<PlacedObject, EnableParent>(this, (int)PlacedObject_FieldIndex.EnableParent));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public EnableParent EnableParent
        {
            get => this._EnableParent;
            set => this.SetEnableParent(value);
        }
        protected void SetEnableParent(
            EnableParent item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.EnableParent];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(EnableParent, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.EnableParent] = hasBeenSet;
            }
            if (_EnableParent_subscriptions != null)
            {
                var tmp = EnableParent;
                _EnableParent = item;
                _EnableParent_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.EnableParent,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _EnableParent = item;
            }
        }
        protected void UnsetEnableParent()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.EnableParent] = false;
            EnableParent = default(EnableParent);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<EnableParent> IPlacedObject.EnableParent_Property => this.EnableParent_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<EnableParent> IPlacedObjectGetter.EnableParent_Property => this.EnableParent_Property;
        #endregion
        #region Target
        public FormIDSetLink<PlacedObject> Target_Property { get; } = new FormIDSetLink<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PlacedObject Target { get => Target_Property.Item; set => Target_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<PlacedObject> IPlacedObjectGetter.Target_Property => this.Target_Property;
        #endregion
        #region SpeedTreeSeed
        protected Byte _SpeedTreeSeed;
        protected PropertyForwarder<PlacedObject, Byte> _SpeedTreeSeedForwarder;
        public INotifyingSetItem<Byte> SpeedTreeSeed_Property => _SpeedTreeSeedForwarder ?? (_SpeedTreeSeedForwarder = new PropertyForwarder<PlacedObject, Byte>(this, (int)PlacedObject_FieldIndex.SpeedTreeSeed));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte SpeedTreeSeed
        {
            get => this._SpeedTreeSeed;
            set => this.SetSpeedTreeSeed(value);
        }
        protected void SetSpeedTreeSeed(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.SpeedTreeSeed];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && SpeedTreeSeed == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.SpeedTreeSeed] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = SpeedTreeSeed;
                _SpeedTreeSeed = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.SpeedTreeSeed,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _SpeedTreeSeed = item;
            }
        }
        protected void UnsetSpeedTreeSeed()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.SpeedTreeSeed] = false;
            SpeedTreeSeed = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte> IPlacedObject.SpeedTreeSeed_Property => this.SpeedTreeSeed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte> IPlacedObjectGetter.SpeedTreeSeed_Property => this.SpeedTreeSeed_Property;
        #endregion
        #region DistantLODData
        protected DistantLODData _DistantLODData;
        protected PropertyForwarder<PlacedObject, DistantLODData> _DistantLODDataForwarder;
        public INotifyingSetItem<DistantLODData> DistantLODData_Property => _DistantLODDataForwarder ?? (_DistantLODDataForwarder = new PropertyForwarder<PlacedObject, DistantLODData>(this, (int)PlacedObject_FieldIndex.DistantLODData));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DistantLODData DistantLODData
        {
            get => this._DistantLODData;
            set => this.SetDistantLODData(value);
        }
        protected void SetDistantLODData(
            DistantLODData item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.DistantLODData];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(DistantLODData, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.DistantLODData] = hasBeenSet;
            }
            if (_DistantLODData_subscriptions != null)
            {
                var tmp = DistantLODData;
                _DistantLODData = item;
                _DistantLODData_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.DistantLODData,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _DistantLODData = item;
            }
        }
        protected void UnsetDistantLODData()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.DistantLODData] = false;
            DistantLODData = default(DistantLODData);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<DistantLODData> IPlacedObject.DistantLODData_Property => this.DistantLODData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<DistantLODData> IPlacedObjectGetter.DistantLODData_Property => this.DistantLODData_Property;
        #endregion
        #region Charge
        protected Single _Charge;
        protected PropertyForwarder<PlacedObject, Single> _ChargeForwarder;
        public INotifyingSetItem<Single> Charge_Property => _ChargeForwarder ?? (_ChargeForwarder = new PropertyForwarder<PlacedObject, Single>(this, (int)PlacedObject_FieldIndex.Charge));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Charge
        {
            get => this._Charge;
            set => this.SetCharge(value);
        }
        protected void SetCharge(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Charge];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Charge == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Charge] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Charge;
                _Charge = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.Charge,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Charge = item;
            }
        }
        protected void UnsetCharge()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Charge] = false;
            Charge = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> IPlacedObject.Charge_Property => this.Charge_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> IPlacedObjectGetter.Charge_Property => this.Charge_Property;
        #endregion
        #region Health
        protected Int32 _Health;
        protected PropertyForwarder<PlacedObject, Int32> _HealthForwarder;
        public INotifyingSetItem<Int32> Health_Property => _HealthForwarder ?? (_HealthForwarder = new PropertyForwarder<PlacedObject, Int32>(this, (int)PlacedObject_FieldIndex.Health));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 Health
        {
            get => this._Health;
            set => this.SetHealth(value);
        }
        protected void SetHealth(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Health];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Health == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Health] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = Health;
                _Health = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.Health,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Health = item;
            }
        }
        protected void UnsetHealth()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Health] = false;
            Health = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> IPlacedObject.Health_Property => this.Health_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> IPlacedObjectGetter.Health_Property => this.Health_Property;
        #endregion
        #region LevelModifier
        protected Int32 _LevelModifier;
        protected PropertyForwarder<PlacedObject, Int32> _LevelModifierForwarder;
        public INotifyingSetItem<Int32> LevelModifier_Property => _LevelModifierForwarder ?? (_LevelModifierForwarder = new PropertyForwarder<PlacedObject, Int32>(this, (int)PlacedObject_FieldIndex.LevelModifier));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 LevelModifier
        {
            get => this._LevelModifier;
            set => this.SetLevelModifier(value);
        }
        protected void SetLevelModifier(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.LevelModifier];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && LevelModifier == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.LevelModifier] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = LevelModifier;
                _LevelModifier = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.LevelModifier,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _LevelModifier = item;
            }
        }
        protected void UnsetLevelModifier()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.LevelModifier] = false;
            LevelModifier = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> IPlacedObject.LevelModifier_Property => this.LevelModifier_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> IPlacedObjectGetter.LevelModifier_Property => this.LevelModifier_Property;
        #endregion
        #region Unknown
        public FormIDSetLink<MajorRecord> Unknown_Property { get; } = new FormIDSetLink<MajorRecord>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MajorRecord Unknown { get => Unknown_Property.Item; set => Unknown_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<MajorRecord> IPlacedObjectGetter.Unknown_Property => this.Unknown_Property;
        #endregion
        #region ActionFlags
        protected PlacedObject.ActionFlag _ActionFlags;
        protected PropertyForwarder<PlacedObject, PlacedObject.ActionFlag> _ActionFlagsForwarder;
        public INotifyingSetItem<PlacedObject.ActionFlag> ActionFlags_Property => _ActionFlagsForwarder ?? (_ActionFlagsForwarder = new PropertyForwarder<PlacedObject, PlacedObject.ActionFlag>(this, (int)PlacedObject_FieldIndex.ActionFlags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PlacedObject.ActionFlag ActionFlags
        {
            get => this._ActionFlags;
            set => this.SetActionFlags(value);
        }
        protected void SetActionFlags(
            PlacedObject.ActionFlag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.ActionFlags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ActionFlags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.ActionFlags] = hasBeenSet;
            }
            if (_PlacedObjectActionFlag_subscriptions != null)
            {
                var tmp = ActionFlags;
                _ActionFlags = item;
                _PlacedObjectActionFlag_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.ActionFlags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ActionFlags = item;
            }
        }
        protected void UnsetActionFlags()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.ActionFlags] = false;
            ActionFlags = default(PlacedObject.ActionFlag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<PlacedObject.ActionFlag> IPlacedObject.ActionFlags_Property => this.ActionFlags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<PlacedObject.ActionFlag> IPlacedObjectGetter.ActionFlags_Property => this.ActionFlags_Property;
        #endregion
        #region Count
        protected Int32 _Count;
        protected PropertyForwarder<PlacedObject, Int32> _CountForwarder;
        public INotifyingSetItem<Int32> Count_Property => _CountForwarder ?? (_CountForwarder = new PropertyForwarder<PlacedObject, Int32>(this, (int)PlacedObject_FieldIndex.Count));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 Count
        {
            get => this._Count;
            set => this.SetCount(value);
        }
        protected void SetCount(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Count];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Count == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Count] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = Count;
                _Count = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.Count,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Count = item;
            }
        }
        protected void UnsetCount()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Count] = false;
            Count = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> IPlacedObject.Count_Property => this.Count_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> IPlacedObjectGetter.Count_Property => this.Count_Property;
        #endregion
        #region MapMarker
        protected MapMarker _MapMarker;
        protected PropertyForwarder<PlacedObject, MapMarker> _MapMarkerForwarder;
        public INotifyingSetItem<MapMarker> MapMarker_Property => _MapMarkerForwarder ?? (_MapMarkerForwarder = new PropertyForwarder<PlacedObject, MapMarker>(this, (int)PlacedObject_FieldIndex.MapMarker));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MapMarker MapMarker
        {
            get => this._MapMarker;
            set => this.SetMapMarker(value);
        }
        protected void SetMapMarker(
            MapMarker item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.MapMarker];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(MapMarker, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.MapMarker] = hasBeenSet;
            }
            if (_MapMarker_subscriptions != null)
            {
                var tmp = MapMarker;
                _MapMarker = item;
                _MapMarker_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.MapMarker,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MapMarker = item;
            }
        }
        protected void UnsetMapMarker()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.MapMarker] = false;
            MapMarker = default(MapMarker);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<MapMarker> IPlacedObject.MapMarker_Property => this.MapMarker_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<MapMarker> IPlacedObjectGetter.MapMarker_Property => this.MapMarker_Property;
        #endregion
        #region OpenByDefault
        protected Boolean _OpenByDefault;
        protected PropertyForwarder<PlacedObject, Boolean> _OpenByDefaultForwarder;
        public INotifyingSetItem<Boolean> OpenByDefault_Property => _OpenByDefaultForwarder ?? (_OpenByDefaultForwarder = new PropertyForwarder<PlacedObject, Boolean>(this, (int)PlacedObject_FieldIndex.OpenByDefault));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Boolean OpenByDefault
        {
            get => this._OpenByDefault;
            set => this.SetOpenByDefault(value);
        }
        protected void SetOpenByDefault(
            Boolean item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.OpenByDefault];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && OpenByDefault == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.OpenByDefault] = hasBeenSet;
            }
            if (_Boolean_subscriptions != null)
            {
                var tmp = OpenByDefault;
                _OpenByDefault = item;
                _Boolean_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.OpenByDefault,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _OpenByDefault = item;
            }
        }
        protected void UnsetOpenByDefault()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.OpenByDefault] = false;
            OpenByDefault = default(Boolean);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Boolean> IPlacedObject.OpenByDefault_Property => this.OpenByDefault_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Boolean> IPlacedObjectGetter.OpenByDefault_Property => this.OpenByDefault_Property;
        #endregion
        #region RagdollData
        protected Byte[] _RagdollData;
        protected PropertyForwarder<PlacedObject, Byte[]> _RagdollDataForwarder;
        public INotifyingSetItem<Byte[]> RagdollData_Property => _RagdollDataForwarder ?? (_RagdollDataForwarder = new PropertyForwarder<PlacedObject, Byte[]>(this, (int)PlacedObject_FieldIndex.RagdollData));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] RagdollData
        {
            get => this._RagdollData;
            set => this.SetRagdollData(value);
        }
        protected void SetRagdollData(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.RagdollData];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(RagdollData, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.RagdollData] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = RagdollData;
                _RagdollData = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.RagdollData,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _RagdollData = item;
            }
        }
        protected void UnsetRagdollData()
        {
            SetRagdollData(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IPlacedObject.RagdollData_Property => this.RagdollData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IPlacedObjectGetter.RagdollData_Property => this.RagdollData_Property;
        #endregion
        #region Scale
        protected Single _Scale;
        protected PropertyForwarder<PlacedObject, Single> _ScaleForwarder;
        public INotifyingSetItem<Single> Scale_Property => _ScaleForwarder ?? (_ScaleForwarder = new PropertyForwarder<PlacedObject, Single>(this, (int)PlacedObject_FieldIndex.Scale));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Scale
        {
            get => this._Scale;
            set => this.SetScale(value);
        }
        protected void SetScale(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Scale];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Scale == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Scale] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Scale;
                _Scale = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.Scale,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Scale = item;
            }
        }
        protected void UnsetScale()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Scale] = false;
            Scale = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> IPlacedObject.Scale_Property => this.Scale_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> IPlacedObjectGetter.Scale_Property => this.Scale_Property;
        #endregion
        #region ContainedSoul
        public FormIDSetLink<SoulGem> ContainedSoul_Property { get; } = new FormIDSetLink<SoulGem>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public SoulGem ContainedSoul { get => ContainedSoul_Property.Item; set => ContainedSoul_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<SoulGem> IPlacedObjectGetter.ContainedSoul_Property => this.ContainedSoul_Property;
        #endregion
        #region Position
        protected P3Float _Position;
        protected PropertyForwarder<PlacedObject, P3Float> _PositionForwarder;
        public INotifyingSetItem<P3Float> Position_Property => _PositionForwarder ?? (_PositionForwarder = new PropertyForwarder<PlacedObject, P3Float>(this, (int)PlacedObject_FieldIndex.Position));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P3Float Position
        {
            get => this._Position;
            set => this.SetPosition(value);
        }
        protected void SetPosition(
            P3Float item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Position];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Position == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Position] = hasBeenSet;
            }
            if (_P3Float_subscriptions != null)
            {
                var tmp = Position;
                _Position = item;
                _P3Float_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.Position,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Position = item;
            }
        }
        protected void UnsetPosition()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Position] = false;
            Position = default(P3Float);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P3Float> IPlacedObject.Position_Property => this.Position_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P3Float> IPlacedObjectGetter.Position_Property => this.Position_Property;
        #endregion
        #region Rotation
        protected P3Float _Rotation;
        protected PropertyForwarder<PlacedObject, P3Float> _RotationForwarder;
        public INotifyingSetItem<P3Float> Rotation_Property => _RotationForwarder ?? (_RotationForwarder = new PropertyForwarder<PlacedObject, P3Float>(this, (int)PlacedObject_FieldIndex.Rotation));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P3Float Rotation
        {
            get => this._Rotation;
            set => this.SetRotation(value);
        }
        protected void SetRotation(
            P3Float item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Rotation];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Rotation == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Rotation] = hasBeenSet;
            }
            if (_P3Float_subscriptions != null)
            {
                var tmp = Rotation;
                _Rotation = item;
                _P3Float_subscriptions.FireSubscriptions(
                    index: (int)PlacedObject_FieldIndex.Rotation,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Rotation = item;
            }
        }
        protected void UnsetRotation()
        {
            _hasBeenSetTracker[(int)PlacedObject_FieldIndex.Rotation] = false;
            Rotation = default(P3Float);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P3Float> IPlacedObject.Rotation_Property => this.Rotation_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P3Float> IPlacedObjectGetter.Rotation_Property => this.Rotation_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => PlacedObjectCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => PlacedObjectCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => PlacedObjectCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            PlacedObjectCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<PlacedObject>.GetEqualsMask(PlacedObject rhs) => PlacedObjectCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IPlacedObjectGetter>.GetEqualsMask(IPlacedObjectGetter rhs) => PlacedObjectCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return PlacedObjectCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            PlacedObject_Mask<bool> printMask = null)
        {
            return PlacedObjectCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            PlacedObjectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new PlacedObject_Mask<bool> GetHasBeenSetMask()
        {
            return PlacedObjectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is PlacedObject rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PlacedObject rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Base_Property.HasBeenSet != rhs.Base_Property.HasBeenSet) return false;
            if (Base_Property.HasBeenSet)
            {
                if (!this.Base_Property.Equals(rhs.Base_Property)) return false;
            }
            if (XPCIFluff_Property.HasBeenSet != rhs.XPCIFluff_Property.HasBeenSet) return false;
            if (XPCIFluff_Property.HasBeenSet)
            {
                if (!this.XPCIFluff.EqualsFast(rhs.XPCIFluff)) return false;
            }
            if (FULLFluff_Property.HasBeenSet != rhs.FULLFluff_Property.HasBeenSet) return false;
            if (FULLFluff_Property.HasBeenSet)
            {
                if (!this.FULLFluff.EqualsFast(rhs.FULLFluff)) return false;
            }
            if (TeleportDestination_Property.HasBeenSet != rhs.TeleportDestination_Property.HasBeenSet) return false;
            if (TeleportDestination_Property.HasBeenSet)
            {
                if (!object.Equals(this.TeleportDestination, rhs.TeleportDestination)) return false;
            }
            if (Lock_Property.HasBeenSet != rhs.Lock_Property.HasBeenSet) return false;
            if (Lock_Property.HasBeenSet)
            {
                if (!object.Equals(this.Lock, rhs.Lock)) return false;
            }
            if (Owner_Property.HasBeenSet != rhs.Owner_Property.HasBeenSet) return false;
            if (Owner_Property.HasBeenSet)
            {
                if (!this.Owner_Property.Equals(rhs.Owner_Property)) return false;
            }
            if (FactionRank_Property.HasBeenSet != rhs.FactionRank_Property.HasBeenSet) return false;
            if (FactionRank_Property.HasBeenSet)
            {
                if (this.FactionRank != rhs.FactionRank) return false;
            }
            if (GlobalVariable_Property.HasBeenSet != rhs.GlobalVariable_Property.HasBeenSet) return false;
            if (GlobalVariable_Property.HasBeenSet)
            {
                if (!this.GlobalVariable_Property.Equals(rhs.GlobalVariable_Property)) return false;
            }
            if (EnableParent_Property.HasBeenSet != rhs.EnableParent_Property.HasBeenSet) return false;
            if (EnableParent_Property.HasBeenSet)
            {
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
            }
            if (Target_Property.HasBeenSet != rhs.Target_Property.HasBeenSet) return false;
            if (Target_Property.HasBeenSet)
            {
                if (!this.Target_Property.Equals(rhs.Target_Property)) return false;
            }
            if (SpeedTreeSeed_Property.HasBeenSet != rhs.SpeedTreeSeed_Property.HasBeenSet) return false;
            if (SpeedTreeSeed_Property.HasBeenSet)
            {
                if (this.SpeedTreeSeed != rhs.SpeedTreeSeed) return false;
            }
            if (DistantLODData_Property.HasBeenSet != rhs.DistantLODData_Property.HasBeenSet) return false;
            if (DistantLODData_Property.HasBeenSet)
            {
                if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
            }
            if (Charge_Property.HasBeenSet != rhs.Charge_Property.HasBeenSet) return false;
            if (Charge_Property.HasBeenSet)
            {
                if (!this.Charge.EqualsWithin(rhs.Charge)) return false;
            }
            if (Health_Property.HasBeenSet != rhs.Health_Property.HasBeenSet) return false;
            if (Health_Property.HasBeenSet)
            {
                if (this.Health != rhs.Health) return false;
            }
            if (LevelModifier_Property.HasBeenSet != rhs.LevelModifier_Property.HasBeenSet) return false;
            if (LevelModifier_Property.HasBeenSet)
            {
                if (this.LevelModifier != rhs.LevelModifier) return false;
            }
            if (Unknown_Property.HasBeenSet != rhs.Unknown_Property.HasBeenSet) return false;
            if (Unknown_Property.HasBeenSet)
            {
                if (!this.Unknown_Property.Equals(rhs.Unknown_Property)) return false;
            }
            if (ActionFlags_Property.HasBeenSet != rhs.ActionFlags_Property.HasBeenSet) return false;
            if (ActionFlags_Property.HasBeenSet)
            {
                if (this.ActionFlags != rhs.ActionFlags) return false;
            }
            if (Count_Property.HasBeenSet != rhs.Count_Property.HasBeenSet) return false;
            if (Count_Property.HasBeenSet)
            {
                if (this.Count != rhs.Count) return false;
            }
            if (MapMarker_Property.HasBeenSet != rhs.MapMarker_Property.HasBeenSet) return false;
            if (MapMarker_Property.HasBeenSet)
            {
                if (!object.Equals(this.MapMarker, rhs.MapMarker)) return false;
            }
            if (this.OpenByDefault != rhs.OpenByDefault) return false;
            if (RagdollData_Property.HasBeenSet != rhs.RagdollData_Property.HasBeenSet) return false;
            if (RagdollData_Property.HasBeenSet)
            {
                if (!this.RagdollData.EqualsFast(rhs.RagdollData)) return false;
            }
            if (Scale_Property.HasBeenSet != rhs.Scale_Property.HasBeenSet) return false;
            if (Scale_Property.HasBeenSet)
            {
                if (!this.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if (ContainedSoul_Property.HasBeenSet != rhs.ContainedSoul_Property.HasBeenSet) return false;
            if (ContainedSoul_Property.HasBeenSet)
            {
                if (!this.ContainedSoul_Property.Equals(rhs.ContainedSoul_Property)) return false;
            }
            if (this.Position != rhs.Position) return false;
            if (this.Rotation != rhs.Rotation) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Base_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Base).CombineHashCode(ret);
            }
            if (XPCIFluff_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(XPCIFluff).CombineHashCode(ret);
            }
            if (FULLFluff_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FULLFluff).CombineHashCode(ret);
            }
            if (TeleportDestination_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TeleportDestination).CombineHashCode(ret);
            }
            if (Lock_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Lock).CombineHashCode(ret);
            }
            if (Owner_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Owner).CombineHashCode(ret);
            }
            if (FactionRank_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FactionRank).CombineHashCode(ret);
            }
            if (GlobalVariable_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(GlobalVariable).CombineHashCode(ret);
            }
            if (EnableParent_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnableParent).CombineHashCode(ret);
            }
            if (Target_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Target).CombineHashCode(ret);
            }
            if (SpeedTreeSeed_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SpeedTreeSeed).CombineHashCode(ret);
            }
            if (DistantLODData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DistantLODData).CombineHashCode(ret);
            }
            if (Charge_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Charge).CombineHashCode(ret);
            }
            if (Health_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Health).CombineHashCode(ret);
            }
            if (LevelModifier_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(LevelModifier).CombineHashCode(ret);
            }
            if (Unknown_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Unknown).CombineHashCode(ret);
            }
            if (ActionFlags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ActionFlags).CombineHashCode(ret);
            }
            if (Count_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Count).CombineHashCode(ret);
            }
            if (MapMarker_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MapMarker).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(OpenByDefault).CombineHashCode(ret);
            if (RagdollData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RagdollData).CombineHashCode(ret);
            }
            if (Scale_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Scale).CombineHashCode(ret);
            }
            if (ContainedSoul_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ContainedSoul).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Position).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Rotation).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static PlacedObject Create_Xml(
            XElement root,
            PlacedObject_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PlacedObject Create_Xml(
            XElement root,
            out PlacedObject_ErrorMask errorMask,
            bool doMasks = true,
            PlacedObject_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PlacedObject Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new PlacedObject();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PlacedObject Create_Xml(
            string path,
            PlacedObject_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static PlacedObject Create_Xml(
            string path,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedObject Create_Xml(
            Stream stream,
            PlacedObject_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static PlacedObject Create_Xml(
            Stream stream,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<PlacedObject>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out Placed_ErrorMask errorMask,
            Placed_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out PlacedObject_ErrorMask errorMask,
            bool doMasks = true,
            PlacedObject_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out Placed_ErrorMask errorMask,
            bool doMasks = true,
            Placed_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            PlacedObjectCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            PlacedObject item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Base":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Base_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Base,
                        errorMask: errorMask);
                    break;
                case "XPCIFluff":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.XPCIFluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] XPCIFluffParse,
                            errorMask: errorMask))
                        {
                            item.XPCIFluff = XPCIFluffParse;
                        }
                        else
                        {
                            item.UnsetXPCIFluff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FULLFluff":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.FULLFluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] FULLFluffParse,
                            errorMask: errorMask))
                        {
                            item.FULLFluff = FULLFluffParse;
                        }
                        else
                        {
                            item.UnsetFULLFluff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TeleportDestination":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                        if (LoquiXmlTranslation<TeleportDestination>.Instance.Parse(
                            root: root,
                            item: out TeleportDestination TeleportDestinationParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination)))
                        {
                            item.TeleportDestination = TeleportDestinationParse;
                        }
                        else
                        {
                            item.UnsetTeleportDestination();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lock":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                        if (LoquiXmlTranslation<LockInformation>.Instance.Parse(
                            root: root,
                            item: out LockInformation LockParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock)))
                        {
                            item.Lock = LockParse;
                        }
                        else
                        {
                            item.UnsetLock();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Owner":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Owner_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Owner,
                        errorMask: errorMask);
                    break;
                case "FactionRank":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.FactionRank);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 FactionRankParse,
                            errorMask: errorMask))
                        {
                            item.FactionRank = FactionRankParse;
                        }
                        else
                        {
                            item.UnsetFactionRank();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlobalVariable":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.GlobalVariable_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.GlobalVariable,
                        errorMask: errorMask);
                    break;
                case "EnableParent":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                        if (LoquiXmlTranslation<EnableParent>.Instance.Parse(
                            root: root,
                            item: out EnableParent EnableParentParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent)))
                        {
                            item.EnableParent = EnableParentParse;
                        }
                        else
                        {
                            item.UnsetEnableParent();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Target":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Target_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Target,
                        errorMask: errorMask);
                    break;
                case "SpeedTreeSeed":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.SpeedTreeSeed);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte SpeedTreeSeedParse,
                            errorMask: errorMask))
                        {
                            item.SpeedTreeSeed = SpeedTreeSeedParse;
                        }
                        else
                        {
                            item.UnsetSpeedTreeSeed();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DistantLODData":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.DistantLODData);
                        if (LoquiXmlTranslation<DistantLODData>.Instance.Parse(
                            root: root,
                            item: out DistantLODData DistantLODDataParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.DistantLODData)))
                        {
                            item.DistantLODData = DistantLODDataParse;
                        }
                        else
                        {
                            item.UnsetDistantLODData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Charge":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Charge);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single ChargeParse,
                            errorMask: errorMask))
                        {
                            item.Charge = ChargeParse;
                        }
                        else
                        {
                            item.UnsetCharge();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Health);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 HealthParse,
                            errorMask: errorMask))
                        {
                            item.Health = HealthParse;
                        }
                        else
                        {
                            item.UnsetHealth();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LevelModifier":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.LevelModifier);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 LevelModifierParse,
                            errorMask: errorMask))
                        {
                            item.LevelModifier = LevelModifierParse;
                        }
                        else
                        {
                            item.UnsetLevelModifier();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Unknown_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                        errorMask: errorMask);
                    break;
                case "ActionFlags":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.ActionFlags);
                        if (EnumXmlTranslation<PlacedObject.ActionFlag>.Instance.Parse(
                            root: root,
                            item: out PlacedObject.ActionFlag ActionFlagsParse,
                            errorMask: errorMask))
                        {
                            item.ActionFlags = ActionFlagsParse;
                        }
                        else
                        {
                            item.UnsetActionFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Count":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Count);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 CountParse,
                            errorMask: errorMask))
                        {
                            item.Count = CountParse;
                        }
                        else
                        {
                            item.UnsetCount();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapMarker":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                        if (LoquiXmlTranslation<MapMarker>.Instance.Parse(
                            root: root,
                            item: out MapMarker MapMarkerParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker)))
                        {
                            item.MapMarker = MapMarkerParse;
                        }
                        else
                        {
                            item.UnsetMapMarker();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OpenByDefault":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.OpenByDefault);
                        if (BooleanXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Boolean OpenByDefaultParse,
                            errorMask: errorMask))
                        {
                            item.OpenByDefault = OpenByDefaultParse;
                        }
                        else
                        {
                            item.UnsetOpenByDefault();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RagdollData":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.RagdollData);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] RagdollDataParse,
                            errorMask: errorMask))
                        {
                            item.RagdollData = RagdollDataParse;
                        }
                        else
                        {
                            item.UnsetRagdollData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scale":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Scale);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single ScaleParse,
                            errorMask: errorMask))
                        {
                            item.Scale = ScaleParse;
                        }
                        else
                        {
                            item.UnsetScale();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ContainedSoul":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.ContainedSoul_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                        errorMask: errorMask);
                    break;
                case "Position":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Position);
                        if (P3FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out P3Float PositionParse,
                            errorMask: errorMask))
                        {
                            item.Position = PositionParse;
                        }
                        else
                        {
                            item.UnsetPosition();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Rotation":
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Rotation);
                        if (P3FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out P3Float RotationParse,
                            errorMask: errorMask))
                        {
                            item.Rotation = RotationParse;
                        }
                        else
                        {
                            item.UnsetRotation();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    Placed.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                    return _hasBeenSetTracker[index];
                case PlacedObject_FieldIndex.Base:
                    return Base_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Owner:
                    return Owner_Property.HasBeenSet;
                case PlacedObject_FieldIndex.GlobalVariable:
                    return GlobalVariable_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Target:
                    return Target_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Unknown:
                    return Unknown_Property.HasBeenSet;
                case PlacedObject_FieldIndex.ContainedSoul:
                    return ContainedSoul_Property.HasBeenSet;
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter Byte[]
        protected ObjectCentralizationSubscriptions<Byte[]> _ByteArr_subscriptions;
        Byte[] IPropertySupporter<Byte[]>.Get(int index)
        {
            return GetByteArr(index: index);
        }

        protected Byte[] GetByteArr(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.XPCIFluff:
                    return XPCIFluff;
                case PlacedObject_FieldIndex.FULLFluff:
                    return FULLFluff;
                case PlacedObject_FieldIndex.RagdollData:
                    return RagdollData;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        void IPropertySupporter<Byte[]>.Set(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByteArr(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByteArr(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.XPCIFluff:
                    SetXPCIFluff(item, hasBeenSet, cmds);
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    SetFULLFluff(item, hasBeenSet, cmds);
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    SetRagdollData(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        bool IPropertySupporter<Byte[]>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte[]>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte[]>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByteArr(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByteArr(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.XPCIFluff:
                    SetXPCIFluff(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    SetFULLFluff(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    SetRagdollData(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte[]> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ByteArr_subscriptions == null)
            {
                _ByteArr_subscriptions = new ObjectCentralizationSubscriptions<Byte[]>();
            }
            _ByteArr_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Unsubscribe(
            int index,
            object owner)
        {
            _ByteArr_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte[]>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte[] IPropertySupporter<Byte[]>.DefaultValue(int index)
        {
            return DefaultValueByteArr(index: index);
        }

        protected Byte[] DefaultValueByteArr(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.RagdollData:
                    return default(Byte[]);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        #endregion

        #region IPropertySupporter TeleportDestination
        protected ObjectCentralizationSubscriptions<TeleportDestination> _TeleportDestination_subscriptions;
        TeleportDestination IPropertySupporter<TeleportDestination>.Get(int index)
        {
            return GetTeleportDestination(index: index);
        }

        protected TeleportDestination GetTeleportDestination(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.TeleportDestination:
                    return TeleportDestination;
                default:
                    throw new ArgumentException($"Unknown index for field type TeleportDestination: {index}");
            }
        }

        void IPropertySupporter<TeleportDestination>.Set(
            int index,
            TeleportDestination item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetTeleportDestination(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetTeleportDestination(
            int index,
            TeleportDestination item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.TeleportDestination:
                    SetTeleportDestination(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type TeleportDestination: {index}");
            }
        }

        bool IPropertySupporter<TeleportDestination>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<TeleportDestination>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<TeleportDestination>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetTeleportDestination(
                index: index,
                cmds: cmds);
        }

        protected void UnsetTeleportDestination(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.TeleportDestination:
                    SetTeleportDestination(
                        item: default(TeleportDestination),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type TeleportDestination: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<TeleportDestination>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<TeleportDestination> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_TeleportDestination_subscriptions == null)
            {
                _TeleportDestination_subscriptions = new ObjectCentralizationSubscriptions<TeleportDestination>();
            }
            _TeleportDestination_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<TeleportDestination>.Unsubscribe(
            int index,
            object owner)
        {
            _TeleportDestination_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<TeleportDestination>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        TeleportDestination IPropertySupporter<TeleportDestination>.DefaultValue(int index)
        {
            return DefaultValueTeleportDestination(index: index);
        }

        protected TeleportDestination DefaultValueTeleportDestination(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.TeleportDestination:
                    return default(TeleportDestination);
                default:
                    throw new ArgumentException($"Unknown index for field type TeleportDestination: {index}");
            }
        }

        #endregion

        #region IPropertySupporter LockInformation
        protected ObjectCentralizationSubscriptions<LockInformation> _LockInformation_subscriptions;
        LockInformation IPropertySupporter<LockInformation>.Get(int index)
        {
            return GetLockInformation(index: index);
        }

        protected LockInformation GetLockInformation(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Lock:
                    return Lock;
                default:
                    throw new ArgumentException($"Unknown index for field type LockInformation: {index}");
            }
        }

        void IPropertySupporter<LockInformation>.Set(
            int index,
            LockInformation item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetLockInformation(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetLockInformation(
            int index,
            LockInformation item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Lock:
                    SetLock(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type LockInformation: {index}");
            }
        }

        bool IPropertySupporter<LockInformation>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<LockInformation>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<LockInformation>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetLockInformation(
                index: index,
                cmds: cmds);
        }

        protected void UnsetLockInformation(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Lock:
                    SetLock(
                        item: default(LockInformation),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type LockInformation: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<LockInformation>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<LockInformation> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_LockInformation_subscriptions == null)
            {
                _LockInformation_subscriptions = new ObjectCentralizationSubscriptions<LockInformation>();
            }
            _LockInformation_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<LockInformation>.Unsubscribe(
            int index,
            object owner)
        {
            _LockInformation_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<LockInformation>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        LockInformation IPropertySupporter<LockInformation>.DefaultValue(int index)
        {
            return DefaultValueLockInformation(index: index);
        }

        protected LockInformation DefaultValueLockInformation(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Lock:
                    return default(LockInformation);
                default:
                    throw new ArgumentException($"Unknown index for field type LockInformation: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Int32
        protected ObjectCentralizationSubscriptions<Int32> _Int32_subscriptions;
        Int32 IPropertySupporter<Int32>.Get(int index)
        {
            return GetInt32(index: index);
        }

        protected Int32 GetInt32(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.FactionRank:
                    return FactionRank;
                case PlacedObject_FieldIndex.Health:
                    return Health;
                case PlacedObject_FieldIndex.LevelModifier:
                    return LevelModifier;
                case PlacedObject_FieldIndex.Count:
                    return Count;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        void IPropertySupporter<Int32>.Set(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetInt32(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.FactionRank:
                    SetFactionRank(item, hasBeenSet, cmds);
                    break;
                case PlacedObject_FieldIndex.Health:
                    SetHealth(item, hasBeenSet, cmds);
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    SetLevelModifier(item, hasBeenSet, cmds);
                    break;
                case PlacedObject_FieldIndex.Count:
                    SetCount(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        bool IPropertySupporter<Int32>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Int32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Int32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.FactionRank:
                    SetFactionRank(
                        item: default(Int32),
                        hasBeenSet: false);
                    break;
                case PlacedObject_FieldIndex.Health:
                    SetHealth(
                        item: default(Int32),
                        hasBeenSet: false);
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    SetLevelModifier(
                        item: default(Int32),
                        hasBeenSet: false);
                    break;
                case PlacedObject_FieldIndex.Count:
                    SetCount(
                        item: default(Int32),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Int32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Int32_subscriptions == null)
            {
                _Int32_subscriptions = new ObjectCentralizationSubscriptions<Int32>();
            }
            _Int32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Unsubscribe(
            int index,
            object owner)
        {
            _Int32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Int32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Int32 IPropertySupporter<Int32>.DefaultValue(int index)
        {
            return DefaultValueInt32(index: index);
        }

        protected Int32 DefaultValueInt32(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Count:
                    return default(Int32);
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        #endregion

        #region IPropertySupporter EnableParent
        protected ObjectCentralizationSubscriptions<EnableParent> _EnableParent_subscriptions;
        EnableParent IPropertySupporter<EnableParent>.Get(int index)
        {
            return GetEnableParent(index: index);
        }

        protected EnableParent GetEnableParent(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.EnableParent:
                    return EnableParent;
                default:
                    throw new ArgumentException($"Unknown index for field type EnableParent: {index}");
            }
        }

        void IPropertySupporter<EnableParent>.Set(
            int index,
            EnableParent item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetEnableParent(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetEnableParent(
            int index,
            EnableParent item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.EnableParent:
                    SetEnableParent(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type EnableParent: {index}");
            }
        }

        bool IPropertySupporter<EnableParent>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<EnableParent>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<EnableParent>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetEnableParent(
                index: index,
                cmds: cmds);
        }

        protected void UnsetEnableParent(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.EnableParent:
                    SetEnableParent(
                        item: default(EnableParent),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type EnableParent: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<EnableParent>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<EnableParent> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_EnableParent_subscriptions == null)
            {
                _EnableParent_subscriptions = new ObjectCentralizationSubscriptions<EnableParent>();
            }
            _EnableParent_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<EnableParent>.Unsubscribe(
            int index,
            object owner)
        {
            _EnableParent_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<EnableParent>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        EnableParent IPropertySupporter<EnableParent>.DefaultValue(int index)
        {
            return DefaultValueEnableParent(index: index);
        }

        protected EnableParent DefaultValueEnableParent(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.EnableParent:
                    return default(EnableParent);
                default:
                    throw new ArgumentException($"Unknown index for field type EnableParent: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte
        protected ObjectCentralizationSubscriptions<Byte> _Byte_subscriptions;
        Byte IPropertySupporter<Byte>.Get(int index)
        {
            return GetByte(index: index);
        }

        protected Byte GetByte(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return SpeedTreeSeed;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        void IPropertySupporter<Byte>.Set(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByte(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByte(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    SetSpeedTreeSeed(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        bool IPropertySupporter<Byte>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByte(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByte(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    SetSpeedTreeSeed(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Byte_subscriptions == null)
            {
                _Byte_subscriptions = new ObjectCentralizationSubscriptions<Byte>();
            }
            _Byte_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Unsubscribe(
            int index,
            object owner)
        {
            _Byte_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte IPropertySupporter<Byte>.DefaultValue(int index)
        {
            return DefaultValueByte(index: index);
        }

        protected Byte DefaultValueByte(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return default(Byte);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        #endregion

        #region IPropertySupporter DistantLODData
        protected ObjectCentralizationSubscriptions<DistantLODData> _DistantLODData_subscriptions;
        DistantLODData IPropertySupporter<DistantLODData>.Get(int index)
        {
            return GetDistantLODData(index: index);
        }

        protected DistantLODData GetDistantLODData(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.DistantLODData:
                    return DistantLODData;
                default:
                    throw new ArgumentException($"Unknown index for field type DistantLODData: {index}");
            }
        }

        void IPropertySupporter<DistantLODData>.Set(
            int index,
            DistantLODData item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetDistantLODData(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetDistantLODData(
            int index,
            DistantLODData item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.DistantLODData:
                    SetDistantLODData(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type DistantLODData: {index}");
            }
        }

        bool IPropertySupporter<DistantLODData>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<DistantLODData>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<DistantLODData>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetDistantLODData(
                index: index,
                cmds: cmds);
        }

        protected void UnsetDistantLODData(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.DistantLODData:
                    SetDistantLODData(
                        item: default(DistantLODData),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type DistantLODData: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<DistantLODData>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<DistantLODData> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_DistantLODData_subscriptions == null)
            {
                _DistantLODData_subscriptions = new ObjectCentralizationSubscriptions<DistantLODData>();
            }
            _DistantLODData_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<DistantLODData>.Unsubscribe(
            int index,
            object owner)
        {
            _DistantLODData_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<DistantLODData>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        DistantLODData IPropertySupporter<DistantLODData>.DefaultValue(int index)
        {
            return DefaultValueDistantLODData(index: index);
        }

        protected DistantLODData DefaultValueDistantLODData(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.DistantLODData:
                    return default(DistantLODData);
                default:
                    throw new ArgumentException($"Unknown index for field type DistantLODData: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Charge:
                    return Charge;
                case PlacedObject_FieldIndex.Scale:
                    return Scale;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Charge:
                    SetCharge(item, hasBeenSet, cmds);
                    break;
                case PlacedObject_FieldIndex.Scale:
                    SetScale(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Charge:
                    SetCharge(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case PlacedObject_FieldIndex.Scale:
                    SetScale(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Scale:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter PlacedObject.ActionFlag
        protected ObjectCentralizationSubscriptions<PlacedObject.ActionFlag> _PlacedObjectActionFlag_subscriptions;
        PlacedObject.ActionFlag IPropertySupporter<PlacedObject.ActionFlag>.Get(int index)
        {
            return GetPlacedObjectActionFlag(index: index);
        }

        protected PlacedObject.ActionFlag GetPlacedObjectActionFlag(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.ActionFlags:
                    return ActionFlags;
                default:
                    throw new ArgumentException($"Unknown index for field type PlacedObject.ActionFlag: {index}");
            }
        }

        void IPropertySupporter<PlacedObject.ActionFlag>.Set(
            int index,
            PlacedObject.ActionFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetPlacedObjectActionFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetPlacedObjectActionFlag(
            int index,
            PlacedObject.ActionFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.ActionFlags:
                    SetActionFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type PlacedObject.ActionFlag: {index}");
            }
        }

        bool IPropertySupporter<PlacedObject.ActionFlag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<PlacedObject.ActionFlag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<PlacedObject.ActionFlag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetPlacedObjectActionFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetPlacedObjectActionFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.ActionFlags:
                    SetActionFlags(
                        item: default(PlacedObject.ActionFlag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type PlacedObject.ActionFlag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<PlacedObject.ActionFlag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<PlacedObject.ActionFlag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_PlacedObjectActionFlag_subscriptions == null)
            {
                _PlacedObjectActionFlag_subscriptions = new ObjectCentralizationSubscriptions<PlacedObject.ActionFlag>();
            }
            _PlacedObjectActionFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<PlacedObject.ActionFlag>.Unsubscribe(
            int index,
            object owner)
        {
            _PlacedObjectActionFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<PlacedObject.ActionFlag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        PlacedObject.ActionFlag IPropertySupporter<PlacedObject.ActionFlag>.DefaultValue(int index)
        {
            return DefaultValuePlacedObjectActionFlag(index: index);
        }

        protected PlacedObject.ActionFlag DefaultValuePlacedObjectActionFlag(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.ActionFlags:
                    return default(PlacedObject.ActionFlag);
                default:
                    throw new ArgumentException($"Unknown index for field type PlacedObject.ActionFlag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter MapMarker
        protected ObjectCentralizationSubscriptions<MapMarker> _MapMarker_subscriptions;
        MapMarker IPropertySupporter<MapMarker>.Get(int index)
        {
            return GetMapMarker(index: index);
        }

        protected MapMarker GetMapMarker(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.MapMarker:
                    return MapMarker;
                default:
                    throw new ArgumentException($"Unknown index for field type MapMarker: {index}");
            }
        }

        void IPropertySupporter<MapMarker>.Set(
            int index,
            MapMarker item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetMapMarker(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetMapMarker(
            int index,
            MapMarker item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.MapMarker:
                    SetMapMarker(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type MapMarker: {index}");
            }
        }

        bool IPropertySupporter<MapMarker>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<MapMarker>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<MapMarker>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetMapMarker(
                index: index,
                cmds: cmds);
        }

        protected void UnsetMapMarker(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.MapMarker:
                    SetMapMarker(
                        item: default(MapMarker),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type MapMarker: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<MapMarker>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<MapMarker> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_MapMarker_subscriptions == null)
            {
                _MapMarker_subscriptions = new ObjectCentralizationSubscriptions<MapMarker>();
            }
            _MapMarker_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<MapMarker>.Unsubscribe(
            int index,
            object owner)
        {
            _MapMarker_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<MapMarker>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        MapMarker IPropertySupporter<MapMarker>.DefaultValue(int index)
        {
            return DefaultValueMapMarker(index: index);
        }

        protected MapMarker DefaultValueMapMarker(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.MapMarker:
                    return default(MapMarker);
                default:
                    throw new ArgumentException($"Unknown index for field type MapMarker: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Boolean
        protected ObjectCentralizationSubscriptions<Boolean> _Boolean_subscriptions;
        Boolean IPropertySupporter<Boolean>.Get(int index)
        {
            return GetBoolean(index: index);
        }

        protected Boolean GetBoolean(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.OpenByDefault:
                    return OpenByDefault;
                default:
                    throw new ArgumentException($"Unknown index for field type Boolean: {index}");
            }
        }

        void IPropertySupporter<Boolean>.Set(
            int index,
            Boolean item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetBoolean(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetBoolean(
            int index,
            Boolean item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.OpenByDefault:
                    SetOpenByDefault(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Boolean: {index}");
            }
        }

        bool IPropertySupporter<Boolean>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Boolean>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Boolean>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetBoolean(
                index: index,
                cmds: cmds);
        }

        protected void UnsetBoolean(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.OpenByDefault:
                    SetOpenByDefault(
                        item: default(Boolean),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Boolean: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Boolean>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Boolean> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Boolean_subscriptions == null)
            {
                _Boolean_subscriptions = new ObjectCentralizationSubscriptions<Boolean>();
            }
            _Boolean_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Boolean>.Unsubscribe(
            int index,
            object owner)
        {
            _Boolean_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Boolean>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Boolean IPropertySupporter<Boolean>.DefaultValue(int index)
        {
            return DefaultValueBoolean(index: index);
        }

        protected Boolean DefaultValueBoolean(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.OpenByDefault:
                    return default(Boolean);
                default:
                    throw new ArgumentException($"Unknown index for field type Boolean: {index}");
            }
        }

        #endregion

        #region IPropertySupporter P3Float
        protected ObjectCentralizationSubscriptions<P3Float> _P3Float_subscriptions;
        P3Float IPropertySupporter<P3Float>.Get(int index)
        {
            return GetP3Float(index: index);
        }

        protected P3Float GetP3Float(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Position:
                    return Position;
                case PlacedObject_FieldIndex.Rotation:
                    return Rotation;
                default:
                    throw new ArgumentException($"Unknown index for field type P3Float: {index}");
            }
        }

        void IPropertySupporter<P3Float>.Set(
            int index,
            P3Float item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetP3Float(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetP3Float(
            int index,
            P3Float item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Position:
                    SetPosition(item, hasBeenSet, cmds);
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    SetRotation(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type P3Float: {index}");
            }
        }

        bool IPropertySupporter<P3Float>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<P3Float>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<P3Float>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetP3Float(
                index: index,
                cmds: cmds);
        }

        protected void UnsetP3Float(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Position:
                    SetPosition(
                        item: default(P3Float),
                        hasBeenSet: false);
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    SetRotation(
                        item: default(P3Float),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type P3Float: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<P3Float>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<P3Float> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_P3Float_subscriptions == null)
            {
                _P3Float_subscriptions = new ObjectCentralizationSubscriptions<P3Float>();
            }
            _P3Float_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<P3Float>.Unsubscribe(
            int index,
            object owner)
        {
            _P3Float_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<P3Float>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        P3Float IPropertySupporter<P3Float>.DefaultValue(int index)
        {
            return DefaultValueP3Float(index: index);
        }

        protected P3Float DefaultValueP3Float(int index)
        {
            switch ((PlacedObject_FieldIndex)index)
            {
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return default(P3Float);
                default:
                    throw new ArgumentException($"Unknown index for field type P3Float: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PlacedObject_Registration.TRIGGERING_RECORD_TYPE;
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Base_Property;
            if (TeleportDestination != null)
            {
                foreach (var item in TeleportDestination.Links)
                {
                    yield return item;
                }
            }
            if (Lock != null)
            {
                foreach (var item in Lock.Links)
                {
                    yield return item;
                }
            }
            yield return Owner_Property;
            yield return GlobalVariable_Property;
            if (EnableParent != null)
            {
                foreach (var item in EnableParent.Links)
                {
                    yield return item;
                }
            }
            yield return Target_Property;
            yield return Unknown_Property;
            yield return ContainedSoul_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static PlacedObject Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static PlacedObject Create_Binary(
            MutagenFrame frame,
            out PlacedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PlacedObject Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<PlacedObject>(
                record: new PlacedObject(),
                frame: frame,
                errorMask: errorMask,
                recType: PlacedObject_Registration.REFR_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static PlacedObject Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static PlacedObject Create_Binary(
            string path,
            out PlacedObject_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static PlacedObject Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static PlacedObject Create_Binary(
            Stream stream,
            out PlacedObject_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out PlacedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out PlacedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out PlacedObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out Placed_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            PlacedObjectCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_OpenByDefault_Custom(
            MutagenFrame frame,
            PlacedObject item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_OpenByDefault_Custom(
            MutagenWriter writer,
            PlacedObject item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_OpenByDefault(
            MutagenWriter writer,
            PlacedObject item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_OpenByDefault_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            PlacedObject item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            Placed.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            PlacedObject item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x454D414E: // NAME
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Base_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Base,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Base);
                case 0x49435058: // XPCI
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.XPCIFluff);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] XPCIFluffParse,
                            errorMask: errorMask))
                        {
                            item.XPCIFluff = XPCIFluffParse;
                        }
                        else
                        {
                            item.UnsetXPCIFluff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.XPCIFluff);
                case 0x4C4C5546: // FULL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.FULLFluff);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] FULLFluffParse,
                            errorMask: errorMask))
                        {
                            item.FULLFluff = FULLFluffParse;
                        }
                        else
                        {
                            item.UnsetFULLFluff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.FULLFluff);
                case 0x4C455458: // XTEL
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                        if (LoquiBinaryTranslation<TeleportDestination>.Instance.Parse(
                            frame: frame,
                            item: out TeleportDestination TeleportDestinationParse,
                            errorMask: errorMask))
                        {
                            item.TeleportDestination = TeleportDestinationParse;
                        }
                        else
                        {
                            item.UnsetTeleportDestination();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.TeleportDestination);
                case 0x434F4C58: // XLOC
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                        if (LoquiBinaryTranslation<LockInformation>.Instance.Parse(
                            frame: frame,
                            item: out LockInformation LockParse,
                            errorMask: errorMask))
                        {
                            item.Lock = LockParse;
                        }
                        else
                        {
                            item.UnsetLock();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Lock);
                case 0x4E574F58: // XOWN
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Owner_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Owner,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Owner);
                case 0x4B4E5258: // XRNK
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.FactionRank);
                        if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Int32 FactionRankParse,
                            errorMask: errorMask))
                        {
                            item.FactionRank = FactionRankParse;
                        }
                        else
                        {
                            item.UnsetFactionRank();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.FactionRank);
                case 0x424C4758: // XGLB
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.GlobalVariable_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.GlobalVariable,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.GlobalVariable);
                case 0x50534558: // XESP
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                        if (LoquiBinaryTranslation<EnableParent>.Instance.Parse(
                            frame: frame,
                            item: out EnableParent EnableParentParse,
                            errorMask: errorMask))
                        {
                            item.EnableParent = EnableParentParse;
                        }
                        else
                        {
                            item.UnsetEnableParent();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.EnableParent);
                case 0x47525458: // XTRG
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Target_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Target,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Target);
                case 0x44455358: // XSED
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.SpeedTreeSeed);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte SpeedTreeSeedParse,
                            errorMask: errorMask))
                        {
                            item.SpeedTreeSeed = SpeedTreeSeedParse;
                        }
                        else
                        {
                            item.UnsetSpeedTreeSeed();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.SpeedTreeSeed);
                case 0x444F4C58: // XLOD
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.DistantLODData);
                        if (LoquiBinaryTranslation<DistantLODData>.Instance.Parse(
                            frame: frame,
                            item: out DistantLODData DistantLODDataParse,
                            errorMask: errorMask))
                        {
                            item.DistantLODData = DistantLODDataParse;
                        }
                        else
                        {
                            item.UnsetDistantLODData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.DistantLODData);
                case 0x47484358: // XCHG
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Charge);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single ChargeParse,
                            errorMask: errorMask))
                        {
                            item.Charge = ChargeParse;
                        }
                        else
                        {
                            item.UnsetCharge();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Charge);
                case 0x544C4858: // XHLT
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Health);
                        if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Int32 HealthParse,
                            errorMask: errorMask))
                        {
                            item.Health = HealthParse;
                        }
                        else
                        {
                            item.UnsetHealth();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Health);
                case 0x4D434C58: // XLCM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.LevelModifier);
                        if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Int32 LevelModifierParse,
                            errorMask: errorMask))
                        {
                            item.LevelModifier = LevelModifierParse;
                        }
                        else
                        {
                            item.UnsetLevelModifier();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.LevelModifier);
                case 0x4D545258: // XRTM
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Unknown_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Unknown);
                case 0x54434158: // XACT
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.ActionFlags);
                        if (EnumBinaryTranslation<PlacedObject.ActionFlag>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out PlacedObject.ActionFlag ActionFlagsParse,
                            errorMask: errorMask))
                        {
                            item.ActionFlags = ActionFlagsParse;
                        }
                        else
                        {
                            item.UnsetActionFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.ActionFlags);
                case 0x544E4358: // XCNT
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Count);
                        if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Int32 CountParse,
                            errorMask: errorMask))
                        {
                            item.Count = CountParse;
                        }
                        else
                        {
                            item.UnsetCount();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Count);
                case 0x4B524D58: // XMRK
                    frame.Position += Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                        if (LoquiBinaryTranslation<MapMarker>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            item: out MapMarker MapMarkerParse,
                            errorMask: errorMask))
                        {
                            item.MapMarker = MapMarkerParse;
                        }
                        else
                        {
                            item.UnsetMapMarker();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.MapMarker);
                case 0x4D414E4F: // ONAM
                    using (var subFrame = frame.SpawnWithLength(Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                    {
                        FillBinary_OpenByDefault_Custom(
                            frame: subFrame,
                            item: item,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.OpenByDefault);
                case 0x44475258: // XRGD
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.RagdollData);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] RagdollDataParse,
                            errorMask: errorMask))
                        {
                            item.RagdollData = RagdollDataParse;
                        }
                        else
                        {
                            item.UnsetRagdollData();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.RagdollData);
                case 0x4C435358: // XSCL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)PlacedObject_FieldIndex.Scale);
                        if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Single ScaleParse,
                            errorMask: errorMask))
                        {
                            item.Scale = ScaleParse;
                        }
                        else
                        {
                            item.UnsetScale();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Scale);
                case 0x4C4F5358: // XSOL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.ContainedSoul_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.ContainedSoul);
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.DATADataTypeState = DATADataType.Has;
                        }
                        try
                        {
                            errorMask?.PushIndex((int)PlacedObject_FieldIndex.Position);
                            if (Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out P3Float PositionParse,
                                errorMask: errorMask))
                            {
                                item.Position = PositionParse;
                            }
                            else
                            {
                                item.UnsetPosition();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)PlacedObject_FieldIndex.Rotation);
                            if (Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out P3Float RotationParse,
                                errorMask: errorMask))
                            {
                                item.Rotation = RotationParse;
                            }
                            else
                            {
                                item.UnsetRotation();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Rotation);
                default:
                    return Placed.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public PlacedObject Copy(
            PlacedObject_CopyMask copyMask = null,
            IPlacedObjectGetter def = null)
        {
            return PlacedObject.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PlacedObject Copy(
            IPlacedObject item,
            PlacedObject_CopyMask copyMask = null,
            IPlacedObjectGetter def = null)
        {
            PlacedObject ret;
            if (item.GetType().Equals(typeof(PlacedObject)))
            {
                ret = new PlacedObject();
            }
            else
            {
                ret = (PlacedObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PlacedObject Copy_ToLoqui(
            IPlacedObjectGetter item,
            PlacedObject_CopyMask copyMask = null,
            IPlacedObjectGetter def = null)
        {
            PlacedObject ret;
            if (item.GetType().Equals(typeof(PlacedObject)))
            {
                ret = new PlacedObject() as PlacedObject;
            }
            else
            {
                ret = (PlacedObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IPlacedObjectGetter rhs,
            PlacedObject_CopyMask copyMask,
            IPlacedObjectGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPlacedObjectGetter rhs,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_CopyMask copyMask = null,
            IPlacedObjectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder errorMask,
            PlacedObject_CopyMask copyMask = null,
            IPlacedObjectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            PlacedObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    this.Base_Property.Set(
                        (FormIDSetLink<MajorRecord>)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.XPCIFluff:
                    this.SetXPCIFluff(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    this.SetFULLFluff(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    this.SetTeleportDestination(
                        (TeleportDestination)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.Lock:
                    this.SetLock(
                        (LockInformation)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.Owner:
                    this.Owner_Property.Set(
                        (FormIDSetLink<Faction>)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.FactionRank:
                    this.SetFactionRank(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.GlobalVariable:
                    this.GlobalVariable_Property.Set(
                        (FormIDSetLink<Global>)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    this.SetEnableParent(
                        (EnableParent)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.Target:
                    this.Target_Property.Set(
                        (FormIDSetLink<PlacedObject>)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    this.SetSpeedTreeSeed(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    this.SetDistantLODData(
                        (DistantLODData)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.Charge:
                    this.SetCharge(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.Health:
                    this.SetHealth(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    this.SetLevelModifier(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    this.Unknown_Property.Set(
                        (FormIDSetLink<MajorRecord>)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    this.SetActionFlags(
                        (PlacedObject.ActionFlag)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.Count:
                    this.SetCount(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    this.SetMapMarker(
                        (MapMarker)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    this.SetOpenByDefault(
                        (Boolean)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    this.SetRagdollData(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.Scale:
                    this.SetScale(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    this.ContainedSoul_Property.Set(
                        (FormIDSetLink<SoulGem>)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Position:
                    this.SetPosition(
                        (P3Float)obj,
                        cmds: cmds);
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    this.SetRotation(
                        (P3Float)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            PlacedObjectCommon.Clear(this, cmds);
        }


        public new static PlacedObject Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PlacedObject();
            foreach (var pair in fields)
            {
                CopyInInternal_PlacedObject(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_PlacedObject(PlacedObject obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PlacedObject_FieldIndex enu))
            {
                CopyInInternal_Placed(obj, pair);
            }
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    obj.Base_Property.Set(
                        (FormIDSetLink<MajorRecord>)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.XPCIFluff:
                    obj.SetXPCIFluff(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    obj.SetFULLFluff(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    obj.SetTeleportDestination(
                        (TeleportDestination)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.Lock:
                    obj.SetLock(
                        (LockInformation)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.Owner:
                    obj.Owner_Property.Set(
                        (FormIDSetLink<Faction>)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.FactionRank:
                    obj.SetFactionRank(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.Set(
                        (FormIDSetLink<Global>)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    obj.SetEnableParent(
                        (EnableParent)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.Target:
                    obj.Target_Property.Set(
                        (FormIDSetLink<PlacedObject>)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    obj.SetSpeedTreeSeed(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    obj.SetDistantLODData(
                        (DistantLODData)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.Charge:
                    obj.SetCharge(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.Health:
                    obj.SetHealth(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    obj.SetLevelModifier(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    obj.Unknown_Property.Set(
                        (FormIDSetLink<MajorRecord>)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    obj.SetActionFlags(
                        (PlacedObject.ActionFlag)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.Count:
                    obj.SetCount(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    obj.SetMapMarker(
                        (MapMarker)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    obj.SetOpenByDefault(
                        (Boolean)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    obj.SetRagdollData(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.Scale:
                    obj.SetScale(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    obj.ContainedSoul_Property.Set(
                        (FormIDSetLink<SoulGem>)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Position:
                    obj.SetPosition(
                        (P3Float)pair.Value,
                        cmds: null);
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    obj.SetRotation(
                        (P3Float)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, PlacedObject obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedObject : IPlacedObjectGetter, IPlaced, ILoquiClass<IPlacedObject, IPlacedObjectGetter>, ILoquiClass<PlacedObject, IPlacedObjectGetter>
    {
        new MajorRecord Base { get; set; }
        new Byte[] XPCIFluff { get; set; }
        new INotifyingSetItem<Byte[]> XPCIFluff_Property { get; }

        new Byte[] FULLFluff { get; set; }
        new INotifyingSetItem<Byte[]> FULLFluff_Property { get; }

        new TeleportDestination TeleportDestination { get; set; }
        new INotifyingSetItem<TeleportDestination> TeleportDestination_Property { get; }

        new LockInformation Lock { get; set; }
        new INotifyingSetItem<LockInformation> Lock_Property { get; }

        new Faction Owner { get; set; }
        new Int32 FactionRank { get; set; }
        new INotifyingSetItem<Int32> FactionRank_Property { get; }

        new Global GlobalVariable { get; set; }
        new EnableParent EnableParent { get; set; }
        new INotifyingSetItem<EnableParent> EnableParent_Property { get; }

        new PlacedObject Target { get; set; }
        new Byte SpeedTreeSeed { get; set; }
        new INotifyingSetItem<Byte> SpeedTreeSeed_Property { get; }

        new DistantLODData DistantLODData { get; set; }
        new INotifyingSetItem<DistantLODData> DistantLODData_Property { get; }

        new Single Charge { get; set; }
        new INotifyingSetItem<Single> Charge_Property { get; }

        new Int32 Health { get; set; }
        new INotifyingSetItem<Int32> Health_Property { get; }

        new Int32 LevelModifier { get; set; }
        new INotifyingSetItem<Int32> LevelModifier_Property { get; }

        new MajorRecord Unknown { get; set; }
        new PlacedObject.ActionFlag ActionFlags { get; set; }
        new INotifyingSetItem<PlacedObject.ActionFlag> ActionFlags_Property { get; }

        new Int32 Count { get; set; }
        new INotifyingSetItem<Int32> Count_Property { get; }

        new MapMarker MapMarker { get; set; }
        new INotifyingSetItem<MapMarker> MapMarker_Property { get; }

        new Boolean OpenByDefault { get; set; }
        new INotifyingItem<Boolean> OpenByDefault_Property { get; }

        new Byte[] RagdollData { get; set; }
        new INotifyingSetItem<Byte[]> RagdollData_Property { get; }

        new Single Scale { get; set; }
        new INotifyingSetItem<Single> Scale_Property { get; }

        new SoulGem ContainedSoul { get; set; }
        new P3Float Position { get; set; }
        new INotifyingItem<P3Float> Position_Property { get; }

        new P3Float Rotation { get; set; }
        new INotifyingItem<P3Float> Rotation_Property { get; }

    }

    public partial interface IPlacedObjectGetter : IPlacedGetter
    {
        #region Base
        MajorRecord Base { get; }
        FormIDSetLink<MajorRecord> Base_Property { get; }

        #endregion
        #region XPCIFluff
        Byte[] XPCIFluff { get; }
        INotifyingSetItemGetter<Byte[]> XPCIFluff_Property { get; }

        #endregion
        #region FULLFluff
        Byte[] FULLFluff { get; }
        INotifyingSetItemGetter<Byte[]> FULLFluff_Property { get; }

        #endregion
        #region TeleportDestination
        TeleportDestination TeleportDestination { get; }
        INotifyingSetItemGetter<TeleportDestination> TeleportDestination_Property { get; }

        #endregion
        #region Lock
        LockInformation Lock { get; }
        INotifyingSetItemGetter<LockInformation> Lock_Property { get; }

        #endregion
        #region Owner
        Faction Owner { get; }
        FormIDSetLink<Faction> Owner_Property { get; }

        #endregion
        #region FactionRank
        Int32 FactionRank { get; }
        INotifyingSetItemGetter<Int32> FactionRank_Property { get; }

        #endregion
        #region GlobalVariable
        Global GlobalVariable { get; }
        FormIDSetLink<Global> GlobalVariable_Property { get; }

        #endregion
        #region EnableParent
        EnableParent EnableParent { get; }
        INotifyingSetItemGetter<EnableParent> EnableParent_Property { get; }

        #endregion
        #region Target
        PlacedObject Target { get; }
        FormIDSetLink<PlacedObject> Target_Property { get; }

        #endregion
        #region SpeedTreeSeed
        Byte SpeedTreeSeed { get; }
        INotifyingSetItemGetter<Byte> SpeedTreeSeed_Property { get; }

        #endregion
        #region DistantLODData
        DistantLODData DistantLODData { get; }
        INotifyingSetItemGetter<DistantLODData> DistantLODData_Property { get; }

        #endregion
        #region Charge
        Single Charge { get; }
        INotifyingSetItemGetter<Single> Charge_Property { get; }

        #endregion
        #region Health
        Int32 Health { get; }
        INotifyingSetItemGetter<Int32> Health_Property { get; }

        #endregion
        #region LevelModifier
        Int32 LevelModifier { get; }
        INotifyingSetItemGetter<Int32> LevelModifier_Property { get; }

        #endregion
        #region Unknown
        MajorRecord Unknown { get; }
        FormIDSetLink<MajorRecord> Unknown_Property { get; }

        #endregion
        #region ActionFlags
        PlacedObject.ActionFlag ActionFlags { get; }
        INotifyingSetItemGetter<PlacedObject.ActionFlag> ActionFlags_Property { get; }

        #endregion
        #region Count
        Int32 Count { get; }
        INotifyingSetItemGetter<Int32> Count_Property { get; }

        #endregion
        #region MapMarker
        MapMarker MapMarker { get; }
        INotifyingSetItemGetter<MapMarker> MapMarker_Property { get; }

        #endregion
        #region OpenByDefault
        Boolean OpenByDefault { get; }
        INotifyingItemGetter<Boolean> OpenByDefault_Property { get; }

        #endregion
        #region RagdollData
        Byte[] RagdollData { get; }
        INotifyingSetItemGetter<Byte[]> RagdollData_Property { get; }

        #endregion
        #region Scale
        Single Scale { get; }
        INotifyingSetItemGetter<Single> Scale_Property { get; }

        #endregion
        #region ContainedSoul
        SoulGem ContainedSoul { get; }
        FormIDSetLink<SoulGem> ContainedSoul_Property { get; }

        #endregion
        #region Position
        P3Float Position { get; }
        INotifyingItemGetter<P3Float> Position_Property { get; }

        #endregion
        #region Rotation
        P3Float Rotation { get; }
        INotifyingItemGetter<P3Float> Rotation_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PlacedObject_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Base = 5,
        XPCIFluff = 6,
        FULLFluff = 7,
        TeleportDestination = 8,
        Lock = 9,
        Owner = 10,
        FactionRank = 11,
        GlobalVariable = 12,
        EnableParent = 13,
        Target = 14,
        SpeedTreeSeed = 15,
        DistantLODData = 16,
        Charge = 17,
        Health = 18,
        LevelModifier = 19,
        Unknown = 20,
        ActionFlags = 21,
        Count = 22,
        MapMarker = 23,
        OpenByDefault = 24,
        RagdollData = 25,
        Scale = 26,
        ContainedSoul = 27,
        Position = 28,
        Rotation = 29,
    }
    #endregion

    #region Registration
    public class PlacedObject_Registration : ILoquiRegistration
    {
        public static readonly PlacedObject_Registration Instance = new PlacedObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 121,
            version: 0);

        public const string GUID = "7a559a46-7ef9-49e9-98c1-ec16c3df81f2";

        public const ushort AdditionalFieldCount = 25;

        public const ushort FieldCount = 30;

        public static readonly Type MaskType = typeof(PlacedObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedObject_ErrorMask);

        public static readonly Type ClassType = typeof(PlacedObject);

        public static readonly Type GetterType = typeof(IPlacedObjectGetter);

        public static readonly Type SetterType = typeof(IPlacedObject);

        public static readonly Type CommonType = typeof(PlacedObjectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedObject";

        public const string Name = "PlacedObject";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BASE":
                    return (ushort)PlacedObject_FieldIndex.Base;
                case "XPCIFLUFF":
                    return (ushort)PlacedObject_FieldIndex.XPCIFluff;
                case "FULLFLUFF":
                    return (ushort)PlacedObject_FieldIndex.FULLFluff;
                case "TELEPORTDESTINATION":
                    return (ushort)PlacedObject_FieldIndex.TeleportDestination;
                case "LOCK":
                    return (ushort)PlacedObject_FieldIndex.Lock;
                case "OWNER":
                    return (ushort)PlacedObject_FieldIndex.Owner;
                case "FACTIONRANK":
                    return (ushort)PlacedObject_FieldIndex.FactionRank;
                case "GLOBALVARIABLE":
                    return (ushort)PlacedObject_FieldIndex.GlobalVariable;
                case "ENABLEPARENT":
                    return (ushort)PlacedObject_FieldIndex.EnableParent;
                case "TARGET":
                    return (ushort)PlacedObject_FieldIndex.Target;
                case "SPEEDTREESEED":
                    return (ushort)PlacedObject_FieldIndex.SpeedTreeSeed;
                case "DISTANTLODDATA":
                    return (ushort)PlacedObject_FieldIndex.DistantLODData;
                case "CHARGE":
                    return (ushort)PlacedObject_FieldIndex.Charge;
                case "HEALTH":
                    return (ushort)PlacedObject_FieldIndex.Health;
                case "LEVELMODIFIER":
                    return (ushort)PlacedObject_FieldIndex.LevelModifier;
                case "UNKNOWN":
                    return (ushort)PlacedObject_FieldIndex.Unknown;
                case "ACTIONFLAGS":
                    return (ushort)PlacedObject_FieldIndex.ActionFlags;
                case "COUNT":
                    return (ushort)PlacedObject_FieldIndex.Count;
                case "MAPMARKER":
                    return (ushort)PlacedObject_FieldIndex.MapMarker;
                case "OPENBYDEFAULT":
                    return (ushort)PlacedObject_FieldIndex.OpenByDefault;
                case "RAGDOLLDATA":
                    return (ushort)PlacedObject_FieldIndex.RagdollData;
                case "SCALE":
                    return (ushort)PlacedObject_FieldIndex.Scale;
                case "CONTAINEDSOUL":
                    return (ushort)PlacedObject_FieldIndex.ContainedSoul;
                case "POSITION":
                    return (ushort)PlacedObject_FieldIndex.Position;
                case "ROTATION":
                    return (ushort)PlacedObject_FieldIndex.Rotation;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.MapMarker:
                    return true;
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return "Base";
                case PlacedObject_FieldIndex.XPCIFluff:
                    return "XPCIFluff";
                case PlacedObject_FieldIndex.FULLFluff:
                    return "FULLFluff";
                case PlacedObject_FieldIndex.TeleportDestination:
                    return "TeleportDestination";
                case PlacedObject_FieldIndex.Lock:
                    return "Lock";
                case PlacedObject_FieldIndex.Owner:
                    return "Owner";
                case PlacedObject_FieldIndex.FactionRank:
                    return "FactionRank";
                case PlacedObject_FieldIndex.GlobalVariable:
                    return "GlobalVariable";
                case PlacedObject_FieldIndex.EnableParent:
                    return "EnableParent";
                case PlacedObject_FieldIndex.Target:
                    return "Target";
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return "SpeedTreeSeed";
                case PlacedObject_FieldIndex.DistantLODData:
                    return "DistantLODData";
                case PlacedObject_FieldIndex.Charge:
                    return "Charge";
                case PlacedObject_FieldIndex.Health:
                    return "Health";
                case PlacedObject_FieldIndex.LevelModifier:
                    return "LevelModifier";
                case PlacedObject_FieldIndex.Unknown:
                    return "Unknown";
                case PlacedObject_FieldIndex.ActionFlags:
                    return "ActionFlags";
                case PlacedObject_FieldIndex.Count:
                    return "Count";
                case PlacedObject_FieldIndex.MapMarker:
                    return "MapMarker";
                case PlacedObject_FieldIndex.OpenByDefault:
                    return "OpenByDefault";
                case PlacedObject_FieldIndex.RagdollData:
                    return "RagdollData";
                case PlacedObject_FieldIndex.Scale:
                    return "Scale";
                case PlacedObject_FieldIndex.ContainedSoul:
                    return "ContainedSoul";
                case PlacedObject_FieldIndex.Position:
                    return "Position";
                case PlacedObject_FieldIndex.Rotation:
                    return "Rotation";
                default:
                    return Placed_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return typeof(FormIDSetLink<MajorRecord>);
                case PlacedObject_FieldIndex.XPCIFluff:
                    return typeof(Byte[]);
                case PlacedObject_FieldIndex.FULLFluff:
                    return typeof(Byte[]);
                case PlacedObject_FieldIndex.TeleportDestination:
                    return typeof(TeleportDestination);
                case PlacedObject_FieldIndex.Lock:
                    return typeof(LockInformation);
                case PlacedObject_FieldIndex.Owner:
                    return typeof(FormIDSetLink<Faction>);
                case PlacedObject_FieldIndex.FactionRank:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.GlobalVariable:
                    return typeof(FormIDSetLink<Global>);
                case PlacedObject_FieldIndex.EnableParent:
                    return typeof(EnableParent);
                case PlacedObject_FieldIndex.Target:
                    return typeof(FormIDSetLink<PlacedObject>);
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return typeof(Byte);
                case PlacedObject_FieldIndex.DistantLODData:
                    return typeof(DistantLODData);
                case PlacedObject_FieldIndex.Charge:
                    return typeof(Single);
                case PlacedObject_FieldIndex.Health:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.LevelModifier:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.Unknown:
                    return typeof(FormIDSetLink<MajorRecord>);
                case PlacedObject_FieldIndex.ActionFlags:
                    return typeof(PlacedObject.ActionFlag);
                case PlacedObject_FieldIndex.Count:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.MapMarker:
                    return typeof(MapMarker);
                case PlacedObject_FieldIndex.OpenByDefault:
                    return typeof(Boolean);
                case PlacedObject_FieldIndex.RagdollData:
                    return typeof(Byte[]);
                case PlacedObject_FieldIndex.Scale:
                    return typeof(Single);
                case PlacedObject_FieldIndex.ContainedSoul:
                    return typeof(FormIDSetLink<SoulGem>);
                case PlacedObject_FieldIndex.Position:
                    return typeof(P3Float);
                case PlacedObject_FieldIndex.Rotation:
                    return typeof(P3Float);
                default:
                    return Placed_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType XPCI_HEADER = new RecordType("XPCI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType XTEL_HEADER = new RecordType("XTEL");
        public static readonly RecordType XLOC_HEADER = new RecordType("XLOC");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType XESP_HEADER = new RecordType("XESP");
        public static readonly RecordType XTRG_HEADER = new RecordType("XTRG");
        public static readonly RecordType XSED_HEADER = new RecordType("XSED");
        public static readonly RecordType XLOD_HEADER = new RecordType("XLOD");
        public static readonly RecordType XCHG_HEADER = new RecordType("XCHG");
        public static readonly RecordType XHLT_HEADER = new RecordType("XHLT");
        public static readonly RecordType XLCM_HEADER = new RecordType("XLCM");
        public static readonly RecordType XRTM_HEADER = new RecordType("XRTM");
        public static readonly RecordType XACT_HEADER = new RecordType("XACT");
        public static readonly RecordType XCNT_HEADER = new RecordType("XCNT");
        public static readonly RecordType XMRK_HEADER = new RecordType("XMRK");
        public static readonly RecordType ONAM_HEADER = new RecordType("ONAM");
        public static readonly RecordType XRGD_HEADER = new RecordType("XRGD");
        public static readonly RecordType XSCL_HEADER = new RecordType("XSCL");
        public static readonly RecordType XSOL_HEADER = new RecordType("XSOL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = REFR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 23;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class PlacedObjectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IPlacedObject item,
            IPlacedObjectGetter rhs,
            IPlacedObjectGetter def,
            ErrorMaskBuilder errorMask,
            PlacedObject_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            PlacedCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Base ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Base);
                try
                {
                    item.Base_Property.SetToWithDefault(
                        rhs: rhs.Base_Property,
                        def: def?.Base_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.XPCIFluff ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.XPCIFluff);
                try
                {
                    item.XPCIFluff_Property.SetToWithDefault(
                        rhs: rhs.XPCIFluff_Property,
                        def: def?.XPCIFluff_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FULLFluff ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.FULLFluff);
                try
                {
                    item.FULLFluff_Property.SetToWithDefault(
                        rhs: rhs.FULLFluff_Property,
                        def: def?.FULLFluff_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TeleportDestination.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                try
                {
                    item.TeleportDestination_Property.SetToWithDefault(
                        rhs.TeleportDestination_Property,
                        def?.TeleportDestination_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.TeleportDestination.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    TeleportDestinationCommon.CopyFieldsFrom(
                                        item: item.TeleportDestination,
                                        rhs: rhs.TeleportDestination,
                                        def: def?.TeleportDestination,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.TeleportDestination.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(TeleportDestination);
                                    return TeleportDestination.Copy(
                                        r,
                                        copyMask?.TeleportDestination?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.TeleportDestination?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Lock.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                try
                {
                    item.Lock_Property.SetToWithDefault(
                        rhs.Lock_Property,
                        def?.Lock_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Lock.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    LockInformationCommon.CopyFieldsFrom(
                                        item: item.Lock,
                                        rhs: rhs.Lock,
                                        def: def?.Lock,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.Lock.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(LockInformation);
                                    return LockInformation.Copy(
                                        r,
                                        copyMask?.Lock?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Lock?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Owner ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Owner);
                try
                {
                    item.Owner_Property.SetToWithDefault(
                        rhs: rhs.Owner_Property,
                        def: def?.Owner_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FactionRank ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.FactionRank);
                try
                {
                    item.FactionRank_Property.SetToWithDefault(
                        rhs: rhs.FactionRank_Property,
                        def: def?.FactionRank_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.GlobalVariable ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.GlobalVariable);
                try
                {
                    item.GlobalVariable_Property.SetToWithDefault(
                        rhs: rhs.GlobalVariable_Property,
                        def: def?.GlobalVariable_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EnableParent.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                try
                {
                    item.EnableParent_Property.SetToWithDefault(
                        rhs.EnableParent_Property,
                        def?.EnableParent_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.EnableParent.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    EnableParentCommon.CopyFieldsFrom(
                                        item: item.EnableParent,
                                        rhs: rhs.EnableParent,
                                        def: def?.EnableParent,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.EnableParent.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(EnableParent);
                                    return EnableParent.Copy(
                                        r,
                                        copyMask?.EnableParent?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.EnableParent?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Target ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Target);
                try
                {
                    item.Target_Property.SetToWithDefault(
                        rhs: rhs.Target_Property,
                        def: def?.Target_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SpeedTreeSeed ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.SpeedTreeSeed);
                try
                {
                    item.SpeedTreeSeed_Property.SetToWithDefault(
                        rhs: rhs.SpeedTreeSeed_Property,
                        def: def?.SpeedTreeSeed_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DistantLODData.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.DistantLODData);
                try
                {
                    item.DistantLODData_Property.SetToWithDefault(
                        rhs.DistantLODData_Property,
                        def?.DistantLODData_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.DistantLODData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    DistantLODDataCommon.CopyFieldsFrom(
                                        item: item.DistantLODData,
                                        rhs: rhs.DistantLODData,
                                        def: def?.DistantLODData,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.DistantLODData.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(DistantLODData);
                                    return DistantLODData.Copy(
                                        r,
                                        copyMask?.DistantLODData?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.DistantLODData?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Charge ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Charge);
                try
                {
                    item.Charge_Property.SetToWithDefault(
                        rhs: rhs.Charge_Property,
                        def: def?.Charge_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Health ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Health);
                try
                {
                    item.Health_Property.SetToWithDefault(
                        rhs: rhs.Health_Property,
                        def: def?.Health_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LevelModifier ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LevelModifier);
                try
                {
                    item.LevelModifier_Property.SetToWithDefault(
                        rhs: rhs.LevelModifier_Property,
                        def: def?.LevelModifier_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Unknown ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Unknown);
                try
                {
                    item.Unknown_Property.SetToWithDefault(
                        rhs: rhs.Unknown_Property,
                        def: def?.Unknown_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ActionFlags ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.ActionFlags);
                try
                {
                    item.ActionFlags_Property.SetToWithDefault(
                        rhs: rhs.ActionFlags_Property,
                        def: def?.ActionFlags_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Count ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Count);
                try
                {
                    item.Count_Property.SetToWithDefault(
                        rhs: rhs.Count_Property,
                        def: def?.Count_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MapMarker.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                try
                {
                    item.MapMarker_Property.SetToWithDefault(
                        rhs.MapMarker_Property,
                        def?.MapMarker_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.MapMarker.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    MapMarkerCommon.CopyFieldsFrom(
                                        item: item.MapMarker,
                                        rhs: rhs.MapMarker,
                                        def: def?.MapMarker,
                                        errorMask: errorMask,
                                        copyMask: copyMask?.MapMarker.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(MapMarker);
                                    return MapMarker.Copy(
                                        r,
                                        copyMask?.MapMarker?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.MapMarker?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.OpenByDefault ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.OpenByDefault);
                try
                {
                    item.OpenByDefault_Property.Set(
                        value: rhs.OpenByDefault,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RagdollData ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.RagdollData);
                try
                {
                    item.RagdollData_Property.SetToWithDefault(
                        rhs: rhs.RagdollData_Property,
                        def: def?.RagdollData_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Scale ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Scale);
                try
                {
                    item.Scale_Property.SetToWithDefault(
                        rhs: rhs.Scale_Property,
                        def: def?.Scale_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ContainedSoul ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.ContainedSoul);
                try
                {
                    item.ContainedSoul_Property.SetToWithDefault(
                        rhs: rhs.ContainedSoul_Property,
                        def: def?.ContainedSoul_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Position ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Position);
                try
                {
                    item.Position_Property.Set(
                        value: rhs.Position,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Rotation ?? true)
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Rotation);
                try
                {
                    item.Rotation_Property.Set(
                        value: rhs.Rotation,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IPlacedObject obj,
            NotifyingFireParameters cmds = null)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case PlacedObject_FieldIndex.Base:
                    obj.Base_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.XPCIFluff:
                    obj.XPCIFluff_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    obj.FULLFluff_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    obj.TeleportDestination_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Lock:
                    obj.Lock_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Owner:
                    obj.Owner_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.FactionRank:
                    obj.FactionRank_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    obj.EnableParent_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Target:
                    obj.Target_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    obj.SpeedTreeSeed_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    obj.DistantLODData_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Charge:
                    obj.Charge_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Health:
                    obj.Health_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    obj.LevelModifier_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    obj.Unknown_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    obj.ActionFlags_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Count:
                    obj.Count_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    obj.MapMarker_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    obj.RagdollData_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Scale:
                    obj.Scale_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    obj.ContainedSoul_Property.HasBeenSet = on;
                    break;
                default:
                    PlacedCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IPlacedObject obj,
            NotifyingUnsetParameters cmds = null)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    obj.Base_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.XPCIFluff:
                    obj.XPCIFluff_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    obj.FULLFluff_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    obj.TeleportDestination_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Lock:
                    obj.Lock_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Owner:
                    obj.Owner_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.FactionRank:
                    obj.FactionRank_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.GlobalVariable:
                    obj.GlobalVariable_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    obj.EnableParent_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Target:
                    obj.Target_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    obj.SpeedTreeSeed_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    obj.DistantLODData_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Charge:
                    obj.Charge_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Health:
                    obj.Health_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    obj.LevelModifier_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    obj.Unknown_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    obj.ActionFlags_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Count:
                    obj.Count_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    obj.MapMarker_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    obj.OpenByDefault = default(Boolean);
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    obj.RagdollData_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Scale:
                    obj.Scale_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    obj.ContainedSoul_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Position:
                    obj.Position = default(P3Float);
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    obj.Rotation = default(P3Float);
                    break;
                default:
                    PlacedCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IPlacedObject obj)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return true;
                case PlacedObject_FieldIndex.Base:
                    return obj.Base_Property.HasBeenSet;
                case PlacedObject_FieldIndex.XPCIFluff:
                    return obj.XPCIFluff_Property.HasBeenSet;
                case PlacedObject_FieldIndex.FULLFluff:
                    return obj.FULLFluff_Property.HasBeenSet;
                case PlacedObject_FieldIndex.TeleportDestination:
                    return obj.TeleportDestination_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Lock:
                    return obj.Lock_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Owner:
                    return obj.Owner_Property.HasBeenSet;
                case PlacedObject_FieldIndex.FactionRank:
                    return obj.FactionRank_Property.HasBeenSet;
                case PlacedObject_FieldIndex.GlobalVariable:
                    return obj.GlobalVariable_Property.HasBeenSet;
                case PlacedObject_FieldIndex.EnableParent:
                    return obj.EnableParent_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Target:
                    return obj.Target_Property.HasBeenSet;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return obj.SpeedTreeSeed_Property.HasBeenSet;
                case PlacedObject_FieldIndex.DistantLODData:
                    return obj.DistantLODData_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Charge:
                    return obj.Charge_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Health:
                    return obj.Health_Property.HasBeenSet;
                case PlacedObject_FieldIndex.LevelModifier:
                    return obj.LevelModifier_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Unknown:
                    return obj.Unknown_Property.HasBeenSet;
                case PlacedObject_FieldIndex.ActionFlags:
                    return obj.ActionFlags_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Count:
                    return obj.Count_Property.HasBeenSet;
                case PlacedObject_FieldIndex.MapMarker:
                    return obj.MapMarker_Property.HasBeenSet;
                case PlacedObject_FieldIndex.RagdollData:
                    return obj.RagdollData_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Scale:
                    return obj.Scale_Property.HasBeenSet;
                case PlacedObject_FieldIndex.ContainedSoul:
                    return obj.ContainedSoul_Property.HasBeenSet;
                default:
                    return PlacedCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IPlacedObjectGetter obj)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return obj.Base;
                case PlacedObject_FieldIndex.XPCIFluff:
                    return obj.XPCIFluff;
                case PlacedObject_FieldIndex.FULLFluff:
                    return obj.FULLFluff;
                case PlacedObject_FieldIndex.TeleportDestination:
                    return obj.TeleportDestination;
                case PlacedObject_FieldIndex.Lock:
                    return obj.Lock;
                case PlacedObject_FieldIndex.Owner:
                    return obj.Owner;
                case PlacedObject_FieldIndex.FactionRank:
                    return obj.FactionRank;
                case PlacedObject_FieldIndex.GlobalVariable:
                    return obj.GlobalVariable;
                case PlacedObject_FieldIndex.EnableParent:
                    return obj.EnableParent;
                case PlacedObject_FieldIndex.Target:
                    return obj.Target;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return obj.SpeedTreeSeed;
                case PlacedObject_FieldIndex.DistantLODData:
                    return obj.DistantLODData;
                case PlacedObject_FieldIndex.Charge:
                    return obj.Charge;
                case PlacedObject_FieldIndex.Health:
                    return obj.Health;
                case PlacedObject_FieldIndex.LevelModifier:
                    return obj.LevelModifier;
                case PlacedObject_FieldIndex.Unknown:
                    return obj.Unknown;
                case PlacedObject_FieldIndex.ActionFlags:
                    return obj.ActionFlags;
                case PlacedObject_FieldIndex.Count:
                    return obj.Count;
                case PlacedObject_FieldIndex.MapMarker:
                    return obj.MapMarker;
                case PlacedObject_FieldIndex.OpenByDefault:
                    return obj.OpenByDefault;
                case PlacedObject_FieldIndex.RagdollData:
                    return obj.RagdollData;
                case PlacedObject_FieldIndex.Scale:
                    return obj.Scale;
                case PlacedObject_FieldIndex.ContainedSoul:
                    return obj.ContainedSoul;
                case PlacedObject_FieldIndex.Position:
                    return obj.Position;
                case PlacedObject_FieldIndex.Rotation:
                    return obj.Rotation;
                default:
                    return PlacedCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IPlacedObject item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Base_Property.Unset(cmds.ToUnsetParams());
            item.XPCIFluff_Property.Unset(cmds.ToUnsetParams());
            item.FULLFluff_Property.Unset(cmds.ToUnsetParams());
            item.TeleportDestination_Property.Unset(cmds.ToUnsetParams());
            item.Lock_Property.Unset(cmds.ToUnsetParams());
            item.Owner_Property.Unset(cmds.ToUnsetParams());
            item.FactionRank_Property.Unset(cmds.ToUnsetParams());
            item.GlobalVariable_Property.Unset(cmds.ToUnsetParams());
            item.EnableParent_Property.Unset(cmds.ToUnsetParams());
            item.Target_Property.Unset(cmds.ToUnsetParams());
            item.SpeedTreeSeed_Property.Unset(cmds.ToUnsetParams());
            item.DistantLODData_Property.Unset(cmds.ToUnsetParams());
            item.Charge_Property.Unset(cmds.ToUnsetParams());
            item.Health_Property.Unset(cmds.ToUnsetParams());
            item.LevelModifier_Property.Unset(cmds.ToUnsetParams());
            item.Unknown_Property.Unset(cmds.ToUnsetParams());
            item.ActionFlags_Property.Unset(cmds.ToUnsetParams());
            item.Count_Property.Unset(cmds.ToUnsetParams());
            item.MapMarker_Property.Unset(cmds.ToUnsetParams());
            item.OpenByDefault = default(Boolean);
            item.RagdollData_Property.Unset(cmds.ToUnsetParams());
            item.Scale_Property.Unset(cmds.ToUnsetParams());
            item.ContainedSoul_Property.Unset(cmds.ToUnsetParams());
            item.Position = default(P3Float);
            item.Rotation = default(P3Float);
        }

        public static PlacedObject_Mask<bool> GetEqualsMask(
            this IPlacedObjectGetter item,
            IPlacedObjectGetter rhs)
        {
            var ret = new PlacedObject_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            PlacedObject_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Base = item.Base_Property.Equals(rhs.Base_Property, (l, r) => l == r);
            ret.XPCIFluff = item.XPCIFluff_Property.Equals(rhs.XPCIFluff_Property, (l, r) => l.EqualsFast(r));
            ret.FULLFluff = item.FULLFluff_Property.Equals(rhs.FULLFluff_Property, (l, r) => l.EqualsFast(r));
            ret.TeleportDestination = item.TeleportDestination_Property.LoquiEqualsHelper(rhs.TeleportDestination_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Lock = item.Lock_Property.LoquiEqualsHelper(rhs.Lock_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Owner = item.Owner_Property.Equals(rhs.Owner_Property, (l, r) => l == r);
            ret.FactionRank = item.FactionRank_Property.Equals(rhs.FactionRank_Property, (l, r) => l == r);
            ret.GlobalVariable = item.GlobalVariable_Property.Equals(rhs.GlobalVariable_Property, (l, r) => l == r);
            ret.EnableParent = item.EnableParent_Property.LoquiEqualsHelper(rhs.EnableParent_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Target = item.Target_Property.Equals(rhs.Target_Property, (l, r) => l == r);
            ret.SpeedTreeSeed = item.SpeedTreeSeed_Property.Equals(rhs.SpeedTreeSeed_Property, (l, r) => l == r);
            ret.DistantLODData = item.DistantLODData_Property.LoquiEqualsHelper(rhs.DistantLODData_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Charge = item.Charge_Property.Equals(rhs.Charge_Property, (l, r) => l == r);
            ret.Health = item.Health_Property.Equals(rhs.Health_Property, (l, r) => l == r);
            ret.LevelModifier = item.LevelModifier_Property.Equals(rhs.LevelModifier_Property, (l, r) => l == r);
            ret.Unknown = item.Unknown_Property.Equals(rhs.Unknown_Property, (l, r) => l == r);
            ret.ActionFlags = item.ActionFlags_Property.Equals(rhs.ActionFlags_Property, (l, r) => l == r);
            ret.Count = item.Count_Property.Equals(rhs.Count_Property, (l, r) => l == r);
            ret.MapMarker = item.MapMarker_Property.LoquiEqualsHelper(rhs.MapMarker_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.OpenByDefault = item.OpenByDefault == rhs.OpenByDefault;
            ret.RagdollData = item.RagdollData_Property.Equals(rhs.RagdollData_Property, (l, r) => l.EqualsFast(r));
            ret.Scale = item.Scale_Property.Equals(rhs.Scale_Property, (l, r) => l == r);
            ret.ContainedSoul = item.ContainedSoul_Property.Equals(rhs.ContainedSoul_Property, (l, r) => l == r);
            ret.Position = item.Position == rhs.Position;
            ret.Rotation = item.Rotation == rhs.Rotation;
            PlacedCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IPlacedObjectGetter item,
            string name = null,
            PlacedObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IPlacedObjectGetter item,
            FileGeneration fg,
            string name = null,
            PlacedObject_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(PlacedObject)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(PlacedObject)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Base ?? true)
                {
                    fg.AppendLine($"Base => {item.Base_Property}");
                }
                if (printMask?.XPCIFluff ?? true)
                {
                    fg.AppendLine($"XPCIFluff => {item.XPCIFluff}");
                }
                if (printMask?.FULLFluff ?? true)
                {
                    fg.AppendLine($"FULLFluff => {item.FULLFluff}");
                }
                if (printMask?.TeleportDestination?.Overall ?? true)
                {
                    item.TeleportDestination?.ToString(fg, "TeleportDestination");
                }
                if (printMask?.Lock?.Overall ?? true)
                {
                    item.Lock?.ToString(fg, "Lock");
                }
                if (printMask?.Owner ?? true)
                {
                    fg.AppendLine($"Owner => {item.Owner_Property}");
                }
                if (printMask?.FactionRank ?? true)
                {
                    fg.AppendLine($"FactionRank => {item.FactionRank}");
                }
                if (printMask?.GlobalVariable ?? true)
                {
                    fg.AppendLine($"GlobalVariable => {item.GlobalVariable_Property}");
                }
                if (printMask?.EnableParent?.Overall ?? true)
                {
                    item.EnableParent?.ToString(fg, "EnableParent");
                }
                if (printMask?.Target ?? true)
                {
                    fg.AppendLine($"Target => {item.Target_Property}");
                }
                if (printMask?.SpeedTreeSeed ?? true)
                {
                    fg.AppendLine($"SpeedTreeSeed => {item.SpeedTreeSeed}");
                }
                if (printMask?.DistantLODData?.Overall ?? true)
                {
                    item.DistantLODData?.ToString(fg, "DistantLODData");
                }
                if (printMask?.Charge ?? true)
                {
                    fg.AppendLine($"Charge => {item.Charge}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {item.Health}");
                }
                if (printMask?.LevelModifier ?? true)
                {
                    fg.AppendLine($"LevelModifier => {item.LevelModifier}");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {item.Unknown_Property}");
                }
                if (printMask?.ActionFlags ?? true)
                {
                    fg.AppendLine($"ActionFlags => {item.ActionFlags}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {item.Count}");
                }
                if (printMask?.MapMarker?.Overall ?? true)
                {
                    item.MapMarker?.ToString(fg, "MapMarker");
                }
                if (printMask?.OpenByDefault ?? true)
                {
                    fg.AppendLine($"OpenByDefault => {item.OpenByDefault}");
                }
                if (printMask?.RagdollData ?? true)
                {
                    fg.AppendLine($"RagdollData => {item.RagdollData}");
                }
                if (printMask?.Scale ?? true)
                {
                    fg.AppendLine($"Scale => {item.Scale}");
                }
                if (printMask?.ContainedSoul ?? true)
                {
                    fg.AppendLine($"ContainedSoul => {item.ContainedSoul_Property}");
                }
                if (printMask?.Position ?? true)
                {
                    fg.AppendLine($"Position => {item.Position}");
                }
                if (printMask?.Rotation ?? true)
                {
                    fg.AppendLine($"Rotation => {item.Rotation}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IPlacedObjectGetter item,
            PlacedObject_Mask<bool?> checkMask)
        {
            if (checkMask.Base.HasValue && checkMask.Base.Value != item.Base_Property.HasBeenSet) return false;
            if (checkMask.XPCIFluff.HasValue && checkMask.XPCIFluff.Value != item.XPCIFluff_Property.HasBeenSet) return false;
            if (checkMask.FULLFluff.HasValue && checkMask.FULLFluff.Value != item.FULLFluff_Property.HasBeenSet) return false;
            if (checkMask.TeleportDestination.Overall.HasValue && checkMask.TeleportDestination.Overall.Value != item.TeleportDestination_Property.HasBeenSet) return false;
            if (checkMask.TeleportDestination.Specific != null && (item.TeleportDestination == null || !item.TeleportDestination.HasBeenSet(checkMask.TeleportDestination.Specific))) return false;
            if (checkMask.Lock.Overall.HasValue && checkMask.Lock.Overall.Value != item.Lock_Property.HasBeenSet) return false;
            if (checkMask.Lock.Specific != null && (item.Lock == null || !item.Lock.HasBeenSet(checkMask.Lock.Specific))) return false;
            if (checkMask.Owner.HasValue && checkMask.Owner.Value != item.Owner_Property.HasBeenSet) return false;
            if (checkMask.FactionRank.HasValue && checkMask.FactionRank.Value != item.FactionRank_Property.HasBeenSet) return false;
            if (checkMask.GlobalVariable.HasValue && checkMask.GlobalVariable.Value != item.GlobalVariable_Property.HasBeenSet) return false;
            if (checkMask.EnableParent.Overall.HasValue && checkMask.EnableParent.Overall.Value != item.EnableParent_Property.HasBeenSet) return false;
            if (checkMask.EnableParent.Specific != null && (item.EnableParent == null || !item.EnableParent.HasBeenSet(checkMask.EnableParent.Specific))) return false;
            if (checkMask.Target.HasValue && checkMask.Target.Value != item.Target_Property.HasBeenSet) return false;
            if (checkMask.SpeedTreeSeed.HasValue && checkMask.SpeedTreeSeed.Value != item.SpeedTreeSeed_Property.HasBeenSet) return false;
            if (checkMask.DistantLODData.Overall.HasValue && checkMask.DistantLODData.Overall.Value != item.DistantLODData_Property.HasBeenSet) return false;
            if (checkMask.DistantLODData.Specific != null && (item.DistantLODData == null || !item.DistantLODData.HasBeenSet(checkMask.DistantLODData.Specific))) return false;
            if (checkMask.Charge.HasValue && checkMask.Charge.Value != item.Charge_Property.HasBeenSet) return false;
            if (checkMask.Health.HasValue && checkMask.Health.Value != item.Health_Property.HasBeenSet) return false;
            if (checkMask.LevelModifier.HasValue && checkMask.LevelModifier.Value != item.LevelModifier_Property.HasBeenSet) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_Property.HasBeenSet) return false;
            if (checkMask.ActionFlags.HasValue && checkMask.ActionFlags.Value != item.ActionFlags_Property.HasBeenSet) return false;
            if (checkMask.Count.HasValue && checkMask.Count.Value != item.Count_Property.HasBeenSet) return false;
            if (checkMask.MapMarker.Overall.HasValue && checkMask.MapMarker.Overall.Value != item.MapMarker_Property.HasBeenSet) return false;
            if (checkMask.MapMarker.Specific != null && (item.MapMarker == null || !item.MapMarker.HasBeenSet(checkMask.MapMarker.Specific))) return false;
            if (checkMask.RagdollData.HasValue && checkMask.RagdollData.Value != item.RagdollData_Property.HasBeenSet) return false;
            if (checkMask.Scale.HasValue && checkMask.Scale.Value != item.Scale_Property.HasBeenSet) return false;
            if (checkMask.ContainedSoul.HasValue && checkMask.ContainedSoul.Value != item.ContainedSoul_Property.HasBeenSet) return false;
            return true;
        }

        public static PlacedObject_Mask<bool> GetHasBeenSetMask(IPlacedObjectGetter item)
        {
            var ret = new PlacedObject_Mask<bool>();
            ret.Base = item.Base_Property.HasBeenSet;
            ret.XPCIFluff = item.XPCIFluff_Property.HasBeenSet;
            ret.FULLFluff = item.FULLFluff_Property.HasBeenSet;
            ret.TeleportDestination = new MaskItem<bool, TeleportDestination_Mask<bool>>(item.TeleportDestination_Property.HasBeenSet, TeleportDestinationCommon.GetHasBeenSetMask(item.TeleportDestination));
            ret.Lock = new MaskItem<bool, LockInformation_Mask<bool>>(item.Lock_Property.HasBeenSet, LockInformationCommon.GetHasBeenSetMask(item.Lock));
            ret.Owner = item.Owner_Property.HasBeenSet;
            ret.FactionRank = item.FactionRank_Property.HasBeenSet;
            ret.GlobalVariable = item.GlobalVariable_Property.HasBeenSet;
            ret.EnableParent = new MaskItem<bool, EnableParent_Mask<bool>>(item.EnableParent_Property.HasBeenSet, EnableParentCommon.GetHasBeenSetMask(item.EnableParent));
            ret.Target = item.Target_Property.HasBeenSet;
            ret.SpeedTreeSeed = item.SpeedTreeSeed_Property.HasBeenSet;
            ret.DistantLODData = new MaskItem<bool, DistantLODData_Mask<bool>>(item.DistantLODData_Property.HasBeenSet, DistantLODDataCommon.GetHasBeenSetMask(item.DistantLODData));
            ret.Charge = item.Charge_Property.HasBeenSet;
            ret.Health = item.Health_Property.HasBeenSet;
            ret.LevelModifier = item.LevelModifier_Property.HasBeenSet;
            ret.Unknown = item.Unknown_Property.HasBeenSet;
            ret.ActionFlags = item.ActionFlags_Property.HasBeenSet;
            ret.Count = item.Count_Property.HasBeenSet;
            ret.MapMarker = new MaskItem<bool, MapMarker_Mask<bool>>(item.MapMarker_Property.HasBeenSet, MapMarkerCommon.GetHasBeenSetMask(item.MapMarker));
            ret.OpenByDefault = true;
            ret.RagdollData = item.RagdollData_Property.HasBeenSet;
            ret.Scale = item.Scale_Property.HasBeenSet;
            ret.ContainedSoul = item.ContainedSoul_Property.HasBeenSet;
            ret.Position = true;
            ret.Rotation = true;
            return ret;
        }

        public static PlacedObject_FieldIndex? ConvertFieldIndex(Placed_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static PlacedObject_FieldIndex ConvertFieldIndex(Placed_FieldIndex index)
        {
            switch (index)
            {
                case Placed_FieldIndex.MajorRecordFlags:
                    return (PlacedObject_FieldIndex)((int)index);
                case Placed_FieldIndex.FormID:
                    return (PlacedObject_FieldIndex)((int)index);
                case Placed_FieldIndex.Version:
                    return (PlacedObject_FieldIndex)((int)index);
                case Placed_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                case Placed_FieldIndex.RecordType:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static PlacedObject_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static PlacedObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            PlacedObject item,
            bool doMasks,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            PlacedObject item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PlacedObject");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PlacedObject");
            }
            if (item.Base_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Base) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Base),
                    item: item.Base_Property?.FormID,
                    fieldIndex: (int)PlacedObject_FieldIndex.Base,
                    errorMask: errorMask);
            }
            if (item.XPCIFluff_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XPCIFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.XPCIFluff),
                    item: item.XPCIFluff_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.XPCIFluff,
                    errorMask: errorMask);
            }
            if (item.FULLFluff_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FULLFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FULLFluff),
                    item: item.FULLFluff_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.FULLFluff,
                    errorMask: errorMask);
            }
            if (item.TeleportDestination_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportDestination) ?? true))
            {
                LoquiXmlTranslation<TeleportDestination>.Instance.Write(
                    node: elem,
                    item: item.TeleportDestination_Property,
                    name: nameof(item.TeleportDestination),
                    fieldIndex: (int)PlacedObject_FieldIndex.TeleportDestination,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination));
            }
            if (item.Lock_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Lock) ?? true))
            {
                LoquiXmlTranslation<LockInformation>.Instance.Write(
                    node: elem,
                    item: item.Lock_Property,
                    name: nameof(item.Lock),
                    fieldIndex: (int)PlacedObject_FieldIndex.Lock,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock));
            }
            if (item.Owner_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Owner) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Owner),
                    item: item.Owner_Property?.FormID,
                    fieldIndex: (int)PlacedObject_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if (item.FactionRank_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FactionRank) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FactionRank),
                    item: item.FactionRank_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.FactionRank,
                    errorMask: errorMask);
            }
            if (item.GlobalVariable_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.GlobalVariable) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.GlobalVariable),
                    item: item.GlobalVariable_Property?.FormID,
                    fieldIndex: (int)PlacedObject_FieldIndex.GlobalVariable,
                    errorMask: errorMask);
            }
            if (item.EnableParent_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EnableParent) ?? true))
            {
                LoquiXmlTranslation<EnableParent>.Instance.Write(
                    node: elem,
                    item: item.EnableParent_Property,
                    name: nameof(item.EnableParent),
                    fieldIndex: (int)PlacedObject_FieldIndex.EnableParent,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent));
            }
            if (item.Target_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Target) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Target),
                    item: item.Target_Property?.FormID,
                    fieldIndex: (int)PlacedObject_FieldIndex.Target,
                    errorMask: errorMask);
            }
            if (item.SpeedTreeSeed_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.SpeedTreeSeed) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.SpeedTreeSeed),
                    item: item.SpeedTreeSeed_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.SpeedTreeSeed,
                    errorMask: errorMask);
            }
            if (item.DistantLODData_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DistantLODData) ?? true))
            {
                LoquiXmlTranslation<DistantLODData>.Instance.Write(
                    node: elem,
                    item: item.DistantLODData_Property,
                    name: nameof(item.DistantLODData),
                    fieldIndex: (int)PlacedObject_FieldIndex.DistantLODData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.DistantLODData));
            }
            if (item.Charge_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Charge) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Charge),
                    item: item.Charge_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.Charge,
                    errorMask: errorMask);
            }
            if (item.Health_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Health) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Health),
                    item: item.Health_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.Health,
                    errorMask: errorMask);
            }
            if (item.LevelModifier_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LevelModifier) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.LevelModifier),
                    item: item.LevelModifier_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.LevelModifier,
                    errorMask: errorMask);
            }
            if (item.Unknown_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Unknown) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Unknown),
                    item: item.Unknown_Property?.FormID,
                    fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if (item.ActionFlags_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ActionFlags) ?? true))
            {
                EnumXmlTranslation<PlacedObject.ActionFlag>.Instance.Write(
                    node: elem,
                    name: nameof(item.ActionFlags),
                    item: item.ActionFlags_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.ActionFlags,
                    errorMask: errorMask);
            }
            if (item.Count_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Count) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Count),
                    item: item.Count_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.Count,
                    errorMask: errorMask);
            }
            if (item.MapMarker_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MapMarker) ?? true))
            {
                LoquiXmlTranslation<MapMarker>.Instance.Write(
                    node: elem,
                    item: item.MapMarker_Property,
                    name: nameof(item.MapMarker),
                    fieldIndex: (int)PlacedObject_FieldIndex.MapMarker,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker));
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.OpenByDefault) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.OpenByDefault),
                    item: item.OpenByDefault_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.OpenByDefault,
                    errorMask: errorMask);
            }
            if (item.RagdollData_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollData) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RagdollData),
                    item: item.RagdollData_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.RagdollData,
                    errorMask: errorMask);
            }
            if (item.Scale_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Scale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Scale),
                    item: item.Scale_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.Scale,
                    errorMask: errorMask);
            }
            if (item.ContainedSoul_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ContainedSoul) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ContainedSoul),
                    item: item.ContainedSoul_Property?.FormID,
                    fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Position) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Position),
                    item: item.Position_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.Position,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Rotation) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Rotation),
                    item: item.Rotation_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.Rotation,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            PlacedObject item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out PlacedObject_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = PlacedObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            PlacedObject item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: PlacedObject_Registration.REFR_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            PlacedObject item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Base_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Base,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.NAME_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XPCIFluff_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.XPCIFluff,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XPCI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FULLFluff_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.FULLFluff,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.FULL_HEADER),
                nullable: false);
            LoquiBinaryTranslation<TeleportDestination>.Instance.Write(
                writer: writer,
                item: item.TeleportDestination_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.TeleportDestination,
                errorMask: errorMask);
            LoquiBinaryTranslation<LockInformation>.Instance.Write(
                writer: writer,
                item: item.Lock_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Lock,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Owner_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Owner,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XOWN_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FactionRank_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.FactionRank,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRNK_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GlobalVariable_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.GlobalVariable,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XGLB_HEADER),
                nullable: false);
            LoquiBinaryTranslation<EnableParent>.Instance.Write(
                writer: writer,
                item: item.EnableParent_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.EnableParent,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Target_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Target,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XTRG_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SpeedTreeSeed_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.SpeedTreeSeed,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSED_HEADER),
                nullable: false);
            LoquiBinaryTranslation<DistantLODData>.Instance.Write(
                writer: writer,
                item: item.DistantLODData_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.DistantLODData,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Charge_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Charge,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XCHG_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Health_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Health,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XHLT_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LevelModifier_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.LevelModifier,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XLCM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRTM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<PlacedObject.ActionFlag>.Instance.Write(
                writer,
                item.ActionFlags_Property,
                length: 4,
                fieldIndex: (int)PlacedObject_FieldIndex.ActionFlags,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XACT_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Count_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Count,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XCNT_HEADER),
                nullable: false);
            if (item.MapMarker_Property.HasBeenSet)
            {
                using (HeaderExport.ExportHeader(writer, PlacedObject_Registration.XMRK_HEADER, ObjectType.Subrecord)) { }
            }
            LoquiBinaryTranslation<MapMarker>.Instance.Write(
                writer: writer,
                item: item.MapMarker_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.MapMarker,
                errorMask: errorMask);
            PlacedObject.WriteBinary_OpenByDefault(
                writer: writer,
                item: item,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RagdollData_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.RagdollData,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRGD_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Scale_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Scale,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSCL_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ContainedSoul_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSOL_HEADER),
                nullable: false);
            if (item.DATADataTypeState.HasFlag(PlacedObject.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(PlacedObject_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Position_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Position,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Rotation_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Rotation,
                        errorMask: errorMask);
                }
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class PlacedObject_Mask<T> : Placed_Mask<T>, IMask<T>, IEquatable<PlacedObject_Mask<T>>
    {
        #region Ctors
        public PlacedObject_Mask()
        {
        }

        public PlacedObject_Mask(T initialValue)
        {
            this.Base = initialValue;
            this.XPCIFluff = initialValue;
            this.FULLFluff = initialValue;
            this.TeleportDestination = new MaskItem<T, TeleportDestination_Mask<T>>(initialValue, new TeleportDestination_Mask<T>(initialValue));
            this.Lock = new MaskItem<T, LockInformation_Mask<T>>(initialValue, new LockInformation_Mask<T>(initialValue));
            this.Owner = initialValue;
            this.FactionRank = initialValue;
            this.GlobalVariable = initialValue;
            this.EnableParent = new MaskItem<T, EnableParent_Mask<T>>(initialValue, new EnableParent_Mask<T>(initialValue));
            this.Target = initialValue;
            this.SpeedTreeSeed = initialValue;
            this.DistantLODData = new MaskItem<T, DistantLODData_Mask<T>>(initialValue, new DistantLODData_Mask<T>(initialValue));
            this.Charge = initialValue;
            this.Health = initialValue;
            this.LevelModifier = initialValue;
            this.Unknown = initialValue;
            this.ActionFlags = initialValue;
            this.Count = initialValue;
            this.MapMarker = new MaskItem<T, MapMarker_Mask<T>>(initialValue, new MapMarker_Mask<T>(initialValue));
            this.OpenByDefault = initialValue;
            this.RagdollData = initialValue;
            this.Scale = initialValue;
            this.ContainedSoul = initialValue;
            this.Position = initialValue;
            this.Rotation = initialValue;
        }
        #endregion

        #region Members
        public T Base;
        public T XPCIFluff;
        public T FULLFluff;
        public MaskItem<T, TeleportDestination_Mask<T>> TeleportDestination { get; set; }
        public MaskItem<T, LockInformation_Mask<T>> Lock { get; set; }
        public T Owner;
        public T FactionRank;
        public T GlobalVariable;
        public MaskItem<T, EnableParent_Mask<T>> EnableParent { get; set; }
        public T Target;
        public T SpeedTreeSeed;
        public MaskItem<T, DistantLODData_Mask<T>> DistantLODData { get; set; }
        public T Charge;
        public T Health;
        public T LevelModifier;
        public T Unknown;
        public T ActionFlags;
        public T Count;
        public MaskItem<T, MapMarker_Mask<T>> MapMarker { get; set; }
        public T OpenByDefault;
        public T RagdollData;
        public T Scale;
        public T ContainedSoul;
        public T Position;
        public T Rotation;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PlacedObject_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PlacedObject_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Base, rhs.Base)) return false;
            if (!object.Equals(this.XPCIFluff, rhs.XPCIFluff)) return false;
            if (!object.Equals(this.FULLFluff, rhs.FULLFluff)) return false;
            if (!object.Equals(this.TeleportDestination, rhs.TeleportDestination)) return false;
            if (!object.Equals(this.Lock, rhs.Lock)) return false;
            if (!object.Equals(this.Owner, rhs.Owner)) return false;
            if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
            if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
            if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
            if (!object.Equals(this.Target, rhs.Target)) return false;
            if (!object.Equals(this.SpeedTreeSeed, rhs.SpeedTreeSeed)) return false;
            if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
            if (!object.Equals(this.Charge, rhs.Charge)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.LevelModifier, rhs.LevelModifier)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            if (!object.Equals(this.ActionFlags, rhs.ActionFlags)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            if (!object.Equals(this.MapMarker, rhs.MapMarker)) return false;
            if (!object.Equals(this.OpenByDefault, rhs.OpenByDefault)) return false;
            if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
            if (!object.Equals(this.Scale, rhs.Scale)) return false;
            if (!object.Equals(this.ContainedSoul, rhs.ContainedSoul)) return false;
            if (!object.Equals(this.Position, rhs.Position)) return false;
            if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Base?.GetHashCode());
            ret = ret.CombineHashCode(this.XPCIFluff?.GetHashCode());
            ret = ret.CombineHashCode(this.FULLFluff?.GetHashCode());
            ret = ret.CombineHashCode(this.TeleportDestination?.GetHashCode());
            ret = ret.CombineHashCode(this.Lock?.GetHashCode());
            ret = ret.CombineHashCode(this.Owner?.GetHashCode());
            ret = ret.CombineHashCode(this.FactionRank?.GetHashCode());
            ret = ret.CombineHashCode(this.GlobalVariable?.GetHashCode());
            ret = ret.CombineHashCode(this.EnableParent?.GetHashCode());
            ret = ret.CombineHashCode(this.Target?.GetHashCode());
            ret = ret.CombineHashCode(this.SpeedTreeSeed?.GetHashCode());
            ret = ret.CombineHashCode(this.DistantLODData?.GetHashCode());
            ret = ret.CombineHashCode(this.Charge?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.LevelModifier?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(this.ActionFlags?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            ret = ret.CombineHashCode(this.MapMarker?.GetHashCode());
            ret = ret.CombineHashCode(this.OpenByDefault?.GetHashCode());
            ret = ret.CombineHashCode(this.RagdollData?.GetHashCode());
            ret = ret.CombineHashCode(this.Scale?.GetHashCode());
            ret = ret.CombineHashCode(this.ContainedSoul?.GetHashCode());
            ret = ret.CombineHashCode(this.Position?.GetHashCode());
            ret = ret.CombineHashCode(this.Rotation?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Base)) return false;
            if (!eval(this.XPCIFluff)) return false;
            if (!eval(this.FULLFluff)) return false;
            if (TeleportDestination != null)
            {
                if (!eval(this.TeleportDestination.Overall)) return false;
                if (this.TeleportDestination.Specific != null && !this.TeleportDestination.Specific.AllEqual(eval)) return false;
            }
            if (Lock != null)
            {
                if (!eval(this.Lock.Overall)) return false;
                if (this.Lock.Specific != null && !this.Lock.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Owner)) return false;
            if (!eval(this.FactionRank)) return false;
            if (!eval(this.GlobalVariable)) return false;
            if (EnableParent != null)
            {
                if (!eval(this.EnableParent.Overall)) return false;
                if (this.EnableParent.Specific != null && !this.EnableParent.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Target)) return false;
            if (!eval(this.SpeedTreeSeed)) return false;
            if (DistantLODData != null)
            {
                if (!eval(this.DistantLODData.Overall)) return false;
                if (this.DistantLODData.Specific != null && !this.DistantLODData.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Charge)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.LevelModifier)) return false;
            if (!eval(this.Unknown)) return false;
            if (!eval(this.ActionFlags)) return false;
            if (!eval(this.Count)) return false;
            if (MapMarker != null)
            {
                if (!eval(this.MapMarker.Overall)) return false;
                if (this.MapMarker.Specific != null && !this.MapMarker.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.OpenByDefault)) return false;
            if (!eval(this.RagdollData)) return false;
            if (!eval(this.Scale)) return false;
            if (!eval(this.ContainedSoul)) return false;
            if (!eval(this.Position)) return false;
            if (!eval(this.Rotation)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new PlacedObject_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PlacedObject_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PlacedObject_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Base = eval(this.Base);
            obj.XPCIFluff = eval(this.XPCIFluff);
            obj.FULLFluff = eval(this.FULLFluff);
            if (this.TeleportDestination != null)
            {
                obj.TeleportDestination = new MaskItem<R, TeleportDestination_Mask<R>>();
                obj.TeleportDestination.Overall = eval(this.TeleportDestination.Overall);
                if (this.TeleportDestination.Specific != null)
                {
                    obj.TeleportDestination.Specific = this.TeleportDestination.Specific.Translate(eval);
                }
            }
            if (this.Lock != null)
            {
                obj.Lock = new MaskItem<R, LockInformation_Mask<R>>();
                obj.Lock.Overall = eval(this.Lock.Overall);
                if (this.Lock.Specific != null)
                {
                    obj.Lock.Specific = this.Lock.Specific.Translate(eval);
                }
            }
            obj.Owner = eval(this.Owner);
            obj.FactionRank = eval(this.FactionRank);
            obj.GlobalVariable = eval(this.GlobalVariable);
            if (this.EnableParent != null)
            {
                obj.EnableParent = new MaskItem<R, EnableParent_Mask<R>>();
                obj.EnableParent.Overall = eval(this.EnableParent.Overall);
                if (this.EnableParent.Specific != null)
                {
                    obj.EnableParent.Specific = this.EnableParent.Specific.Translate(eval);
                }
            }
            obj.Target = eval(this.Target);
            obj.SpeedTreeSeed = eval(this.SpeedTreeSeed);
            if (this.DistantLODData != null)
            {
                obj.DistantLODData = new MaskItem<R, DistantLODData_Mask<R>>();
                obj.DistantLODData.Overall = eval(this.DistantLODData.Overall);
                if (this.DistantLODData.Specific != null)
                {
                    obj.DistantLODData.Specific = this.DistantLODData.Specific.Translate(eval);
                }
            }
            obj.Charge = eval(this.Charge);
            obj.Health = eval(this.Health);
            obj.LevelModifier = eval(this.LevelModifier);
            obj.Unknown = eval(this.Unknown);
            obj.ActionFlags = eval(this.ActionFlags);
            obj.Count = eval(this.Count);
            if (this.MapMarker != null)
            {
                obj.MapMarker = new MaskItem<R, MapMarker_Mask<R>>();
                obj.MapMarker.Overall = eval(this.MapMarker.Overall);
                if (this.MapMarker.Specific != null)
                {
                    obj.MapMarker.Specific = this.MapMarker.Specific.Translate(eval);
                }
            }
            obj.OpenByDefault = eval(this.OpenByDefault);
            obj.RagdollData = eval(this.RagdollData);
            obj.Scale = eval(this.Scale);
            obj.ContainedSoul = eval(this.ContainedSoul);
            obj.Position = eval(this.Position);
            obj.Rotation = eval(this.Rotation);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PlacedObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PlacedObject_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PlacedObject_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Base ?? true)
                {
                    fg.AppendLine($"Base => {Base}");
                }
                if (printMask?.XPCIFluff ?? true)
                {
                    fg.AppendLine($"XPCIFluff => {XPCIFluff}");
                }
                if (printMask?.FULLFluff ?? true)
                {
                    fg.AppendLine($"FULLFluff => {FULLFluff}");
                }
                if (printMask?.TeleportDestination?.Overall ?? true)
                {
                    TeleportDestination?.ToString(fg);
                }
                if (printMask?.Lock?.Overall ?? true)
                {
                    Lock?.ToString(fg);
                }
                if (printMask?.Owner ?? true)
                {
                    fg.AppendLine($"Owner => {Owner}");
                }
                if (printMask?.FactionRank ?? true)
                {
                    fg.AppendLine($"FactionRank => {FactionRank}");
                }
                if (printMask?.GlobalVariable ?? true)
                {
                    fg.AppendLine($"GlobalVariable => {GlobalVariable}");
                }
                if (printMask?.EnableParent?.Overall ?? true)
                {
                    EnableParent?.ToString(fg);
                }
                if (printMask?.Target ?? true)
                {
                    fg.AppendLine($"Target => {Target}");
                }
                if (printMask?.SpeedTreeSeed ?? true)
                {
                    fg.AppendLine($"SpeedTreeSeed => {SpeedTreeSeed}");
                }
                if (printMask?.DistantLODData?.Overall ?? true)
                {
                    DistantLODData?.ToString(fg);
                }
                if (printMask?.Charge ?? true)
                {
                    fg.AppendLine($"Charge => {Charge}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.LevelModifier ?? true)
                {
                    fg.AppendLine($"LevelModifier => {LevelModifier}");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
                if (printMask?.ActionFlags ?? true)
                {
                    fg.AppendLine($"ActionFlags => {ActionFlags}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {Count}");
                }
                if (printMask?.MapMarker?.Overall ?? true)
                {
                    MapMarker?.ToString(fg);
                }
                if (printMask?.OpenByDefault ?? true)
                {
                    fg.AppendLine($"OpenByDefault => {OpenByDefault}");
                }
                if (printMask?.RagdollData ?? true)
                {
                    fg.AppendLine($"RagdollData => {RagdollData}");
                }
                if (printMask?.Scale ?? true)
                {
                    fg.AppendLine($"Scale => {Scale}");
                }
                if (printMask?.ContainedSoul ?? true)
                {
                    fg.AppendLine($"ContainedSoul => {ContainedSoul}");
                }
                if (printMask?.Position ?? true)
                {
                    fg.AppendLine($"Position => {Position}");
                }
                if (printMask?.Rotation ?? true)
                {
                    fg.AppendLine($"Rotation => {Rotation}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PlacedObject_ErrorMask : Placed_ErrorMask, IErrorMask<PlacedObject_ErrorMask>
    {
        #region Members
        public Exception Base;
        public Exception XPCIFluff;
        public Exception FULLFluff;
        public MaskItem<Exception, TeleportDestination_ErrorMask> TeleportDestination;
        public MaskItem<Exception, LockInformation_ErrorMask> Lock;
        public Exception Owner;
        public Exception FactionRank;
        public Exception GlobalVariable;
        public MaskItem<Exception, EnableParent_ErrorMask> EnableParent;
        public Exception Target;
        public Exception SpeedTreeSeed;
        public MaskItem<Exception, DistantLODData_ErrorMask> DistantLODData;
        public Exception Charge;
        public Exception Health;
        public Exception LevelModifier;
        public Exception Unknown;
        public Exception ActionFlags;
        public Exception Count;
        public MaskItem<Exception, MapMarker_ErrorMask> MapMarker;
        public Exception OpenByDefault;
        public Exception RagdollData;
        public Exception Scale;
        public Exception ContainedSoul;
        public Exception Position;
        public Exception Rotation;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return Base;
                case PlacedObject_FieldIndex.XPCIFluff:
                    return XPCIFluff;
                case PlacedObject_FieldIndex.FULLFluff:
                    return FULLFluff;
                case PlacedObject_FieldIndex.TeleportDestination:
                    return TeleportDestination;
                case PlacedObject_FieldIndex.Lock:
                    return Lock;
                case PlacedObject_FieldIndex.Owner:
                    return Owner;
                case PlacedObject_FieldIndex.FactionRank:
                    return FactionRank;
                case PlacedObject_FieldIndex.GlobalVariable:
                    return GlobalVariable;
                case PlacedObject_FieldIndex.EnableParent:
                    return EnableParent;
                case PlacedObject_FieldIndex.Target:
                    return Target;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return SpeedTreeSeed;
                case PlacedObject_FieldIndex.DistantLODData:
                    return DistantLODData;
                case PlacedObject_FieldIndex.Charge:
                    return Charge;
                case PlacedObject_FieldIndex.Health:
                    return Health;
                case PlacedObject_FieldIndex.LevelModifier:
                    return LevelModifier;
                case PlacedObject_FieldIndex.Unknown:
                    return Unknown;
                case PlacedObject_FieldIndex.ActionFlags:
                    return ActionFlags;
                case PlacedObject_FieldIndex.Count:
                    return Count;
                case PlacedObject_FieldIndex.MapMarker:
                    return MapMarker;
                case PlacedObject_FieldIndex.OpenByDefault:
                    return OpenByDefault;
                case PlacedObject_FieldIndex.RagdollData:
                    return RagdollData;
                case PlacedObject_FieldIndex.Scale:
                    return Scale;
                case PlacedObject_FieldIndex.ContainedSoul:
                    return ContainedSoul;
                case PlacedObject_FieldIndex.Position:
                    return Position;
                case PlacedObject_FieldIndex.Rotation:
                    return Rotation;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    this.Base = ex;
                    break;
                case PlacedObject_FieldIndex.XPCIFluff:
                    this.XPCIFluff = ex;
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    this.FULLFluff = ex;
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    this.TeleportDestination = new MaskItem<Exception, TeleportDestination_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Lock:
                    this.Lock = new MaskItem<Exception, LockInformation_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Owner:
                    this.Owner = ex;
                    break;
                case PlacedObject_FieldIndex.FactionRank:
                    this.FactionRank = ex;
                    break;
                case PlacedObject_FieldIndex.GlobalVariable:
                    this.GlobalVariable = ex;
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    this.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Target:
                    this.Target = ex;
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    this.SpeedTreeSeed = ex;
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    this.DistantLODData = new MaskItem<Exception, DistantLODData_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Charge:
                    this.Charge = ex;
                    break;
                case PlacedObject_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    this.LevelModifier = ex;
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    this.ActionFlags = ex;
                    break;
                case PlacedObject_FieldIndex.Count:
                    this.Count = ex;
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    this.MapMarker = new MaskItem<Exception, MapMarker_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    this.OpenByDefault = ex;
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    this.RagdollData = ex;
                    break;
                case PlacedObject_FieldIndex.Scale:
                    this.Scale = ex;
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    this.ContainedSoul = ex;
                    break;
                case PlacedObject_FieldIndex.Position:
                    this.Position = ex;
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    this.Rotation = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    this.Base = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.XPCIFluff:
                    this.XPCIFluff = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.FULLFluff:
                    this.FULLFluff = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    this.TeleportDestination = (MaskItem<Exception, TeleportDestination_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Lock:
                    this.Lock = (MaskItem<Exception, LockInformation_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Owner:
                    this.Owner = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.FactionRank:
                    this.FactionRank = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.GlobalVariable:
                    this.GlobalVariable = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    this.EnableParent = (MaskItem<Exception, EnableParent_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Target:
                    this.Target = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    this.SpeedTreeSeed = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    this.DistantLODData = (MaskItem<Exception, DistantLODData_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Charge:
                    this.Charge = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    this.LevelModifier = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    this.ActionFlags = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Count:
                    this.Count = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    this.MapMarker = (MaskItem<Exception, MapMarker_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    this.OpenByDefault = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    this.RagdollData = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Scale:
                    this.Scale = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    this.ContainedSoul = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Position:
                    this.Position = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    this.Rotation = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Base != null) return true;
            if (XPCIFluff != null) return true;
            if (FULLFluff != null) return true;
            if (TeleportDestination != null) return true;
            if (Lock != null) return true;
            if (Owner != null) return true;
            if (FactionRank != null) return true;
            if (GlobalVariable != null) return true;
            if (EnableParent != null) return true;
            if (Target != null) return true;
            if (SpeedTreeSeed != null) return true;
            if (DistantLODData != null) return true;
            if (Charge != null) return true;
            if (Health != null) return true;
            if (LevelModifier != null) return true;
            if (Unknown != null) return true;
            if (ActionFlags != null) return true;
            if (Count != null) return true;
            if (MapMarker != null) return true;
            if (OpenByDefault != null) return true;
            if (RagdollData != null) return true;
            if (Scale != null) return true;
            if (ContainedSoul != null) return true;
            if (Position != null) return true;
            if (Rotation != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("PlacedObject_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Base => {Base}");
            fg.AppendLine($"XPCIFluff => {XPCIFluff}");
            fg.AppendLine($"FULLFluff => {FULLFluff}");
            TeleportDestination?.ToString(fg);
            Lock?.ToString(fg);
            fg.AppendLine($"Owner => {Owner}");
            fg.AppendLine($"FactionRank => {FactionRank}");
            fg.AppendLine($"GlobalVariable => {GlobalVariable}");
            EnableParent?.ToString(fg);
            fg.AppendLine($"Target => {Target}");
            fg.AppendLine($"SpeedTreeSeed => {SpeedTreeSeed}");
            DistantLODData?.ToString(fg);
            fg.AppendLine($"Charge => {Charge}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"LevelModifier => {LevelModifier}");
            fg.AppendLine($"Unknown => {Unknown}");
            fg.AppendLine($"ActionFlags => {ActionFlags}");
            fg.AppendLine($"Count => {Count}");
            MapMarker?.ToString(fg);
            fg.AppendLine($"OpenByDefault => {OpenByDefault}");
            fg.AppendLine($"RagdollData => {RagdollData}");
            fg.AppendLine($"Scale => {Scale}");
            fg.AppendLine($"ContainedSoul => {ContainedSoul}");
            fg.AppendLine($"Position => {Position}");
            fg.AppendLine($"Rotation => {Rotation}");
        }
        #endregion

        #region Combine
        public PlacedObject_ErrorMask Combine(PlacedObject_ErrorMask rhs)
        {
            var ret = new PlacedObject_ErrorMask();
            ret.Base = this.Base.Combine(rhs.Base);
            ret.XPCIFluff = this.XPCIFluff.Combine(rhs.XPCIFluff);
            ret.FULLFluff = this.FULLFluff.Combine(rhs.FULLFluff);
            ret.TeleportDestination = new MaskItem<Exception, TeleportDestination_ErrorMask>(this.TeleportDestination.Overall.Combine(rhs.TeleportDestination.Overall), ((IErrorMask<TeleportDestination_ErrorMask>)this.TeleportDestination.Specific).Combine(rhs.TeleportDestination.Specific));
            ret.Lock = new MaskItem<Exception, LockInformation_ErrorMask>(this.Lock.Overall.Combine(rhs.Lock.Overall), ((IErrorMask<LockInformation_ErrorMask>)this.Lock.Specific).Combine(rhs.Lock.Specific));
            ret.Owner = this.Owner.Combine(rhs.Owner);
            ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
            ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
            ret.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(this.EnableParent.Overall.Combine(rhs.EnableParent.Overall), ((IErrorMask<EnableParent_ErrorMask>)this.EnableParent.Specific).Combine(rhs.EnableParent.Specific));
            ret.Target = this.Target.Combine(rhs.Target);
            ret.SpeedTreeSeed = this.SpeedTreeSeed.Combine(rhs.SpeedTreeSeed);
            ret.DistantLODData = new MaskItem<Exception, DistantLODData_ErrorMask>(this.DistantLODData.Overall.Combine(rhs.DistantLODData.Overall), ((IErrorMask<DistantLODData_ErrorMask>)this.DistantLODData.Specific).Combine(rhs.DistantLODData.Specific));
            ret.Charge = this.Charge.Combine(rhs.Charge);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.LevelModifier = this.LevelModifier.Combine(rhs.LevelModifier);
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            ret.ActionFlags = this.ActionFlags.Combine(rhs.ActionFlags);
            ret.Count = this.Count.Combine(rhs.Count);
            ret.MapMarker = new MaskItem<Exception, MapMarker_ErrorMask>(this.MapMarker.Overall.Combine(rhs.MapMarker.Overall), ((IErrorMask<MapMarker_ErrorMask>)this.MapMarker.Specific).Combine(rhs.MapMarker.Specific));
            ret.OpenByDefault = this.OpenByDefault.Combine(rhs.OpenByDefault);
            ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
            ret.Scale = this.Scale.Combine(rhs.Scale);
            ret.ContainedSoul = this.ContainedSoul.Combine(rhs.ContainedSoul);
            ret.Position = this.Position.Combine(rhs.Position);
            ret.Rotation = this.Rotation.Combine(rhs.Rotation);
            return ret;
        }
        public static PlacedObject_ErrorMask Combine(PlacedObject_ErrorMask lhs, PlacedObject_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PlacedObject_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PlacedObject_ErrorMask();
        }
        #endregion

    }
    public class PlacedObject_CopyMask : Placed_CopyMask
    {
        #region Members
        public bool Base;
        public bool XPCIFluff;
        public bool FULLFluff;
        public MaskItem<CopyOption, TeleportDestination_CopyMask> TeleportDestination;
        public MaskItem<CopyOption, LockInformation_CopyMask> Lock;
        public bool Owner;
        public bool FactionRank;
        public bool GlobalVariable;
        public MaskItem<CopyOption, EnableParent_CopyMask> EnableParent;
        public bool Target;
        public bool SpeedTreeSeed;
        public MaskItem<CopyOption, DistantLODData_CopyMask> DistantLODData;
        public bool Charge;
        public bool Health;
        public bool LevelModifier;
        public bool Unknown;
        public bool ActionFlags;
        public bool Count;
        public MaskItem<CopyOption, MapMarker_CopyMask> MapMarker;
        public bool OpenByDefault;
        public bool RagdollData;
        public bool Scale;
        public bool ContainedSoul;
        public bool Position;
        public bool Rotation;
        #endregion

    }
    public class PlacedObject_TranslationMask : Placed_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Base;
        public bool XPCIFluff;
        public bool FULLFluff;
        public MaskItem<bool, TeleportDestination_TranslationMask> TeleportDestination;
        public MaskItem<bool, LockInformation_TranslationMask> Lock;
        public bool Owner;
        public bool FactionRank;
        public bool GlobalVariable;
        public MaskItem<bool, EnableParent_TranslationMask> EnableParent;
        public bool Target;
        public bool SpeedTreeSeed;
        public MaskItem<bool, DistantLODData_TranslationMask> DistantLODData;
        public bool Charge;
        public bool Health;
        public bool LevelModifier;
        public bool Unknown;
        public bool ActionFlags;
        public bool Count;
        public MaskItem<bool, MapMarker_TranslationMask> MapMarker;
        public bool OpenByDefault;
        public bool RagdollData;
        public bool Scale;
        public bool ContainedSoul;
        public bool Position;
        public bool Rotation;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Base, null));
            ret.Add((XPCIFluff, null));
            ret.Add((FULLFluff, null));
            ret.Add((TeleportDestination?.Overall ?? true, TeleportDestination?.Specific?.GetCrystal()));
            ret.Add((Lock?.Overall ?? true, Lock?.Specific?.GetCrystal()));
            ret.Add((Owner, null));
            ret.Add((FactionRank, null));
            ret.Add((GlobalVariable, null));
            ret.Add((EnableParent?.Overall ?? true, EnableParent?.Specific?.GetCrystal()));
            ret.Add((Target, null));
            ret.Add((SpeedTreeSeed, null));
            ret.Add((DistantLODData?.Overall ?? true, DistantLODData?.Specific?.GetCrystal()));
            ret.Add((Charge, null));
            ret.Add((Health, null));
            ret.Add((LevelModifier, null));
            ret.Add((Unknown, null));
            ret.Add((ActionFlags, null));
            ret.Add((Count, null));
            ret.Add((MapMarker?.Overall ?? true, MapMarker?.Specific?.GetCrystal()));
            ret.Add((OpenByDefault, null));
            ret.Add((RagdollData, null));
            ret.Add((Scale, null));
            ret.Add((ContainedSoul, null));
            ret.Add((Position, null));
            ret.Add((Rotation, null));
        }
    }
    #endregion

    #endregion

}
