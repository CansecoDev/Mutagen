/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedObject : Placed, IPlacedObject, ILoquiObject<PlacedObject>, ILoquiObjectSetter, IEquatable<PlacedObject>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static PlacedObject_Registration Registration => PlacedObject_Registration.Instance;

        #region Ctor
        public PlacedObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        public FormIDSetLink<MajorRecord> Base_Property { get; } = new FormIDSetLink<MajorRecord>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MajorRecord Base { get => Base_Property.Item; set => Base_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<MajorRecord> IPlacedObjectGetter.Base_Property => this.Base_Property;
        #endregion
        #region TeleportDestination
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<TeleportDestination> _TeleportDestination = new NotifyingSetItem<TeleportDestination>();
        public INotifyingSetItem<TeleportDestination> TeleportDestination_Property => this._TeleportDestination;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TeleportDestination IPlacedObjectGetter.TeleportDestination => this.TeleportDestination;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TeleportDestination TeleportDestination { get => _TeleportDestination.Item; set => _TeleportDestination.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<TeleportDestination> IPlacedObject.TeleportDestination_Property => this.TeleportDestination_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<TeleportDestination> IPlacedObjectGetter.TeleportDestination_Property => this.TeleportDestination_Property;
        #endregion
        #region Lock
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<LockInformation> _Lock = new NotifyingSetItem<LockInformation>();
        public INotifyingSetItem<LockInformation> Lock_Property => this._Lock;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        LockInformation IPlacedObjectGetter.Lock => this.Lock;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LockInformation Lock { get => _Lock.Item; set => _Lock.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<LockInformation> IPlacedObject.Lock_Property => this.Lock_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<LockInformation> IPlacedObjectGetter.Lock_Property => this.Lock_Property;
        #endregion
        #region Ownership
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<Ownership> _Ownership = new NotifyingSetItem<Ownership>();
        public INotifyingSetItem<Ownership> Ownership_Property => this._Ownership;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Ownership IPlacedObjectGetter.Ownership => this.Ownership;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Ownership Ownership { get => _Ownership.Item; set => _Ownership.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Ownership> IPlacedObject.Ownership_Property => this.Ownership_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Ownership> IPlacedObjectGetter.Ownership_Property => this.Ownership_Property;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<EnableParent> _EnableParent = new NotifyingSetItem<EnableParent>();
        public INotifyingSetItem<EnableParent> EnableParent_Property => this._EnableParent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        EnableParent IPlacedObjectGetter.EnableParent => this.EnableParent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public EnableParent EnableParent { get => _EnableParent.Item; set => _EnableParent.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<EnableParent> IPlacedObject.EnableParent_Property => this.EnableParent_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<EnableParent> IPlacedObjectGetter.EnableParent_Property => this.EnableParent_Property;
        #endregion
        #region Target
        public FormIDSetLink<PlacedObject> Target_Property { get; } = new FormIDSetLink<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PlacedObject Target { get => Target_Property.Item; set => Target_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<PlacedObject> IPlacedObjectGetter.Target_Property => this.Target_Property;
        #endregion
        #region SpeedTreeSeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Byte> _SpeedTreeSeed = NotifyingSetItem.Factory<Byte>(markAsSet: false);
        public INotifyingSetItem<Byte> SpeedTreeSeed_Property => _SpeedTreeSeed;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte SpeedTreeSeed
        {
            get => this._SpeedTreeSeed.Item;
            set => this._SpeedTreeSeed.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte> IPlacedObject.SpeedTreeSeed_Property => this.SpeedTreeSeed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte> IPlacedObjectGetter.SpeedTreeSeed_Property => this.SpeedTreeSeed_Property;
        #endregion
        #region DistantLODData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<DistantLODData> _DistantLODData = new NotifyingSetItem<DistantLODData>();
        public INotifyingSetItem<DistantLODData> DistantLODData_Property => this._DistantLODData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        DistantLODData IPlacedObjectGetter.DistantLODData => this.DistantLODData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DistantLODData DistantLODData { get => _DistantLODData.Item; set => _DistantLODData.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<DistantLODData> IPlacedObject.DistantLODData_Property => this.DistantLODData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<DistantLODData> IPlacedObjectGetter.DistantLODData_Property => this.DistantLODData_Property;
        #endregion
        #region Charge
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Single> _Charge = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> Charge_Property => _Charge;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Charge
        {
            get => this._Charge.Item;
            set => this._Charge.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> IPlacedObject.Charge_Property => this.Charge_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> IPlacedObjectGetter.Charge_Property => this.Charge_Property;
        #endregion
        #region Health
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Int32> _Health = NotifyingSetItem.Factory<Int32>(markAsSet: false);
        public INotifyingSetItem<Int32> Health_Property => _Health;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 Health
        {
            get => this._Health.Item;
            set => this._Health.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> IPlacedObject.Health_Property => this.Health_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> IPlacedObjectGetter.Health_Property => this.Health_Property;
        #endregion
        #region LevelModifier
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Int32> _LevelModifier = NotifyingSetItem.Factory<Int32>(markAsSet: false);
        public INotifyingSetItem<Int32> LevelModifier_Property => _LevelModifier;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 LevelModifier
        {
            get => this._LevelModifier.Item;
            set => this._LevelModifier.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> IPlacedObject.LevelModifier_Property => this.LevelModifier_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> IPlacedObjectGetter.LevelModifier_Property => this.LevelModifier_Property;
        #endregion
        #region Unknown
        public FormIDSetLink<MajorRecord> Unknown_Property { get; } = new FormIDSetLink<MajorRecord>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MajorRecord Unknown { get => Unknown_Property.Item; set => Unknown_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<MajorRecord> IPlacedObjectGetter.Unknown_Property => this.Unknown_Property;
        #endregion
        #region ActionFlags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<PlacedObject.ActionFlag> _ActionFlags = NotifyingSetItem.Factory<PlacedObject.ActionFlag>(markAsSet: false);
        public INotifyingSetItem<PlacedObject.ActionFlag> ActionFlags_Property => _ActionFlags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public PlacedObject.ActionFlag ActionFlags
        {
            get => this._ActionFlags.Item;
            set => this._ActionFlags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<PlacedObject.ActionFlag> IPlacedObject.ActionFlags_Property => this.ActionFlags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<PlacedObject.ActionFlag> IPlacedObjectGetter.ActionFlags_Property => this.ActionFlags_Property;
        #endregion
        #region Count
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Int32> _Count = NotifyingSetItem.Factory<Int32>(markAsSet: false);
        public INotifyingSetItem<Int32> Count_Property => _Count;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 Count
        {
            get => this._Count.Item;
            set => this._Count.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> IPlacedObject.Count_Property => this.Count_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> IPlacedObjectGetter.Count_Property => this.Count_Property;
        #endregion
        #region MapMarker
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<MapMarker> _MapMarker = new NotifyingSetItem<MapMarker>();
        public INotifyingSetItem<MapMarker> MapMarker_Property => this._MapMarker;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        MapMarker IPlacedObjectGetter.MapMarker => this.MapMarker;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MapMarker MapMarker { get => _MapMarker.Item; set => _MapMarker.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<MapMarker> IPlacedObject.MapMarker_Property => this.MapMarker_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<MapMarker> IPlacedObjectGetter.MapMarker_Property => this.MapMarker_Property;
        #endregion
        #region OpenByDefault
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Boolean> _OpenByDefault = NotifyingItem.Factory<Boolean>();
        public INotifyingItem<Boolean> OpenByDefault_Property => _OpenByDefault;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Boolean OpenByDefault
        {
            get => this._OpenByDefault.Item;
            set => this._OpenByDefault.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Boolean> IPlacedObject.OpenByDefault_Property => this.OpenByDefault_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Boolean> IPlacedObjectGetter.OpenByDefault_Property => this.OpenByDefault_Property;
        #endregion
        #region RagdollData
        protected INotifyingSetItem<Byte[]> _RagdollData = NotifyingSetItem.Factory<Byte[]>(markAsSet: false);
        public INotifyingSetItem<Byte[]> RagdollData_Property => _RagdollData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] RagdollData
        {
            get => this._RagdollData.Item;
            set => this._RagdollData.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IPlacedObject.RagdollData_Property => this.RagdollData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IPlacedObjectGetter.RagdollData_Property => this.RagdollData_Property;
        #endregion
        #region Scale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Single> _Scale = NotifyingSetItem.Factory<Single>(markAsSet: false);
        public INotifyingSetItem<Single> Scale_Property => _Scale;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Scale
        {
            get => this._Scale.Item;
            set => this._Scale.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Single> IPlacedObject.Scale_Property => this.Scale_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Single> IPlacedObjectGetter.Scale_Property => this.Scale_Property;
        #endregion
        #region ContainedSoul
        public FormIDSetLink<SoulGem> ContainedSoul_Property { get; } = new FormIDSetLink<SoulGem>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public SoulGem ContainedSoul { get => ContainedSoul_Property.Item; set => ContainedSoul_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<SoulGem> IPlacedObjectGetter.ContainedSoul_Property => this.ContainedSoul_Property;
        #endregion
        #region Position
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<P3Float> _Position = NotifyingItem.Factory<P3Float>();
        public INotifyingItem<P3Float> Position_Property => _Position;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P3Float Position
        {
            get => this._Position.Item;
            set => this._Position.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P3Float> IPlacedObject.Position_Property => this.Position_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P3Float> IPlacedObjectGetter.Position_Property => this.Position_Property;
        #endregion
        #region Rotation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<P3Float> _Rotation = NotifyingItem.Factory<P3Float>();
        public INotifyingItem<P3Float> Rotation_Property => _Rotation;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P3Float Rotation
        {
            get => this._Rotation.Item;
            set => this._Rotation.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P3Float> IPlacedObject.Rotation_Property => this.Rotation_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P3Float> IPlacedObjectGetter.Rotation_Property => this.Rotation_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => PlacedObjectCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => PlacedObjectCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => PlacedObjectCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            PlacedObjectCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<PlacedObject>.GetEqualsMask(PlacedObject rhs) => PlacedObjectCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IPlacedObjectGetter>.GetEqualsMask(IPlacedObjectGetter rhs) => PlacedObjectCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return PlacedObjectCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            PlacedObject_Mask<bool> printMask = null)
        {
            return PlacedObjectCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            PlacedObjectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new PlacedObject_Mask<bool> GetHasBeenSetMask()
        {
            return PlacedObjectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is PlacedObject rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PlacedObject rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Base_Property.HasBeenSet != rhs.Base_Property.HasBeenSet) return false;
            if (Base_Property.HasBeenSet)
            {
                if (Base != rhs.Base) return false;
            }
            if (TeleportDestination_Property.HasBeenSet != rhs.TeleportDestination_Property.HasBeenSet) return false;
            if (TeleportDestination_Property.HasBeenSet)
            {
                if (!object.Equals(TeleportDestination, rhs.TeleportDestination)) return false;
            }
            if (Lock_Property.HasBeenSet != rhs.Lock_Property.HasBeenSet) return false;
            if (Lock_Property.HasBeenSet)
            {
                if (!object.Equals(Lock, rhs.Lock)) return false;
            }
            if (Ownership_Property.HasBeenSet != rhs.Ownership_Property.HasBeenSet) return false;
            if (Ownership_Property.HasBeenSet)
            {
                if (!object.Equals(Ownership, rhs.Ownership)) return false;
            }
            if (EnableParent_Property.HasBeenSet != rhs.EnableParent_Property.HasBeenSet) return false;
            if (EnableParent_Property.HasBeenSet)
            {
                if (!object.Equals(EnableParent, rhs.EnableParent)) return false;
            }
            if (Target_Property.HasBeenSet != rhs.Target_Property.HasBeenSet) return false;
            if (Target_Property.HasBeenSet)
            {
                if (Target != rhs.Target) return false;
            }
            if (SpeedTreeSeed_Property.HasBeenSet != rhs.SpeedTreeSeed_Property.HasBeenSet) return false;
            if (SpeedTreeSeed_Property.HasBeenSet)
            {
                if (SpeedTreeSeed != rhs.SpeedTreeSeed) return false;
            }
            if (DistantLODData_Property.HasBeenSet != rhs.DistantLODData_Property.HasBeenSet) return false;
            if (DistantLODData_Property.HasBeenSet)
            {
                if (!object.Equals(DistantLODData, rhs.DistantLODData)) return false;
            }
            if (Charge_Property.HasBeenSet != rhs.Charge_Property.HasBeenSet) return false;
            if (Charge_Property.HasBeenSet)
            {
                if (Charge != rhs.Charge) return false;
            }
            if (Health_Property.HasBeenSet != rhs.Health_Property.HasBeenSet) return false;
            if (Health_Property.HasBeenSet)
            {
                if (Health != rhs.Health) return false;
            }
            if (LevelModifier_Property.HasBeenSet != rhs.LevelModifier_Property.HasBeenSet) return false;
            if (LevelModifier_Property.HasBeenSet)
            {
                if (LevelModifier != rhs.LevelModifier) return false;
            }
            if (Unknown_Property.HasBeenSet != rhs.Unknown_Property.HasBeenSet) return false;
            if (Unknown_Property.HasBeenSet)
            {
                if (Unknown != rhs.Unknown) return false;
            }
            if (ActionFlags_Property.HasBeenSet != rhs.ActionFlags_Property.HasBeenSet) return false;
            if (ActionFlags_Property.HasBeenSet)
            {
                if (ActionFlags != rhs.ActionFlags) return false;
            }
            if (Count_Property.HasBeenSet != rhs.Count_Property.HasBeenSet) return false;
            if (Count_Property.HasBeenSet)
            {
                if (Count != rhs.Count) return false;
            }
            if (MapMarker_Property.HasBeenSet != rhs.MapMarker_Property.HasBeenSet) return false;
            if (MapMarker_Property.HasBeenSet)
            {
                if (!object.Equals(MapMarker, rhs.MapMarker)) return false;
            }
            if (OpenByDefault != rhs.OpenByDefault) return false;
            if (RagdollData_Property.HasBeenSet != rhs.RagdollData_Property.HasBeenSet) return false;
            if (RagdollData_Property.HasBeenSet)
            {
                if (!RagdollData.EqualsFast(rhs.RagdollData)) return false;
            }
            if (Scale_Property.HasBeenSet != rhs.Scale_Property.HasBeenSet) return false;
            if (Scale_Property.HasBeenSet)
            {
                if (Scale != rhs.Scale) return false;
            }
            if (ContainedSoul_Property.HasBeenSet != rhs.ContainedSoul_Property.HasBeenSet) return false;
            if (ContainedSoul_Property.HasBeenSet)
            {
                if (ContainedSoul != rhs.ContainedSoul) return false;
            }
            if (Position != rhs.Position) return false;
            if (Rotation != rhs.Rotation) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Base_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Base).CombineHashCode(ret);
            }
            if (TeleportDestination_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TeleportDestination).CombineHashCode(ret);
            }
            if (Lock_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Lock).CombineHashCode(ret);
            }
            if (Ownership_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ownership).CombineHashCode(ret);
            }
            if (EnableParent_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnableParent).CombineHashCode(ret);
            }
            if (Target_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Target).CombineHashCode(ret);
            }
            if (SpeedTreeSeed_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SpeedTreeSeed).CombineHashCode(ret);
            }
            if (DistantLODData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DistantLODData).CombineHashCode(ret);
            }
            if (Charge_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Charge).CombineHashCode(ret);
            }
            if (Health_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Health).CombineHashCode(ret);
            }
            if (LevelModifier_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(LevelModifier).CombineHashCode(ret);
            }
            if (Unknown_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Unknown).CombineHashCode(ret);
            }
            if (ActionFlags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ActionFlags).CombineHashCode(ret);
            }
            if (Count_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Count).CombineHashCode(ret);
            }
            if (MapMarker_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MapMarker).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(OpenByDefault).CombineHashCode(ret);
            if (RagdollData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RagdollData).CombineHashCode(ret);
            }
            if (Scale_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Scale).CombineHashCode(ret);
            }
            if (ContainedSoul_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ContainedSoul).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Position).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Rotation).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static PlacedObject Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static PlacedObject Create_XML(
            XElement root,
            out PlacedObject_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static PlacedObject Create_XML(
            XElement root,
            bool doMasks,
            out PlacedObject_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (PlacedObject Object, PlacedObject_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            PlacedObject_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new PlacedObject_ErrorMask()) : default(Func<PlacedObject_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static PlacedObject Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static PlacedObject Create_XML(
            string path,
            out PlacedObject_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static PlacedObject Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static PlacedObject Create_XML(
            Stream stream,
            out PlacedObject_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<PlacedObject, PlacedObject_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out PlacedObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<PlacedObject, PlacedObject_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out PlacedObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out PlacedObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out Placed_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out PlacedObject_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out PlacedObject_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out PlacedObject_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (PlacedObject_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out PlacedObject_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out PlacedObject_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            PlacedObjectCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static PlacedObject Create_XML_Internal(
            XElement root,
            Func<PlacedObject_ErrorMask> errorMask)
        {
            var ret = new PlacedObject();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            PlacedObject item,
            XElement root,
            string name,
            Func<PlacedObject_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Base":
                    item.Base_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Base,
                        errorMask: errorMask));
                    break;
                case "TeleportDestination":
                    item._TeleportDestination.SetIfSucceeded(LoquiXmlTranslation<TeleportDestination, TeleportDestination_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)PlacedObject_FieldIndex.TeleportDestination,
                        errorMask: errorMask));
                    break;
                case "Lock":
                    item._Lock.SetIfSucceeded(LoquiXmlTranslation<LockInformation, LockInformation_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Lock,
                        errorMask: errorMask));
                    break;
                case "Ownership":
                    item._Ownership.SetIfSucceeded(LoquiXmlTranslation<Ownership, Ownership_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Ownership,
                        errorMask: errorMask));
                    break;
                case "EnableParent":
                    item._EnableParent.SetIfSucceeded(LoquiXmlTranslation<EnableParent, EnableParent_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)PlacedObject_FieldIndex.EnableParent,
                        errorMask: errorMask));
                    break;
                case "Target":
                    item.Target_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Target,
                        errorMask: errorMask));
                    break;
                case "SpeedTreeSeed":
                    item._SpeedTreeSeed.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.SpeedTreeSeed,
                        errorMask: errorMask));
                    break;
                case "DistantLODData":
                    item._DistantLODData.SetIfSucceeded(LoquiXmlTranslation<DistantLODData, DistantLODData_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)PlacedObject_FieldIndex.DistantLODData,
                        errorMask: errorMask));
                    break;
                case "Charge":
                    item._Charge.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Charge,
                        errorMask: errorMask));
                    break;
                case "Health":
                    item._Health.SetIfSucceeded(Int32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Health,
                        errorMask: errorMask));
                    break;
                case "LevelModifier":
                    item._LevelModifier.SetIfSucceeded(Int32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.LevelModifier,
                        errorMask: errorMask));
                    break;
                case "Unknown":
                    item.Unknown_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                        errorMask: errorMask));
                    break;
                case "ActionFlags":
                    item._ActionFlags.SetIfSucceeded(EnumXmlTranslation<PlacedObject.ActionFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)PlacedObject_FieldIndex.ActionFlags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Count":
                    item._Count.SetIfSucceeded(Int32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Count,
                        errorMask: errorMask));
                    break;
                case "MapMarker":
                    item._MapMarker.SetIfSucceeded(LoquiXmlTranslation<MapMarker, MapMarker_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)PlacedObject_FieldIndex.MapMarker,
                        errorMask: errorMask));
                    break;
                case "OpenByDefault":
                    item._OpenByDefault.SetIfSucceeded(BooleanXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.OpenByDefault,
                        errorMask: errorMask));
                    break;
                case "RagdollData":
                    item._RagdollData.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.RagdollData,
                        errorMask: errorMask));
                    break;
                case "Scale":
                    item._Scale.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Scale,
                        errorMask: errorMask));
                    break;
                case "ContainedSoul":
                    item.ContainedSoul_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                        errorMask: errorMask));
                    break;
                case "Position":
                    item._Position.SetIfSucceeded(P3FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Position,
                        errorMask: errorMask));
                    break;
                case "Rotation":
                    item._Rotation.SetIfSucceeded(P3FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)PlacedObject_FieldIndex.Rotation,
                        errorMask: errorMask));
                    break;
                default:
                    Placed.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PlacedObject_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static PlacedObject Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static PlacedObject Create_Binary(
            MutagenFrame frame,
            out PlacedObject_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static PlacedObject Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out PlacedObject_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (PlacedObject Object, PlacedObject_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            PlacedObject_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new PlacedObject_ErrorMask()) : default(Func<PlacedObject_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static PlacedObject Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static PlacedObject Create_Binary(
            string path,
            out PlacedObject_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static PlacedObject Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static PlacedObject Create_Binary(
            Stream stream,
            out PlacedObject_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<PlacedObject, PlacedObject_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out PlacedObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<PlacedObject, PlacedObject_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out PlacedObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out PlacedObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out Placed_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out PlacedObject_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out PlacedObject_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out PlacedObject_ErrorMask errorMask)
        {
            errorMask = (PlacedObject_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out PlacedObject_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out PlacedObject_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            PlacedObjectCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        static partial void FillBinary_OpenByDefault_Custom(
            MutagenFrame frame,
            PlacedObject item,
            int fieldIndex,
            Func<PlacedObject_ErrorMask> errorMask);

        static partial void WriteBinary_OpenByDefault_Custom(
            MutagenWriter writer,
            PlacedObject item,
            int fieldIndex,
            Func<PlacedObject_ErrorMask> errorMask);

        public static void WriteBinary_OpenByDefault(
            MutagenWriter writer,
            PlacedObject item,
            int fieldIndex,
            Func<PlacedObject_ErrorMask> errorMask)
        {
            try
            {
                WriteBinary_OpenByDefault_Custom(
                    writer: writer,
                    item: item,
                    fieldIndex: fieldIndex,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }

        private static PlacedObject Create_Binary_Internal(
            MutagenFrame frame,
            Func<PlacedObject_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<PlacedObject, PlacedObject_ErrorMask, PlacedObject_FieldIndex>(
                record: new PlacedObject(),
                frame: frame,
                errorMask: errorMask,
                recType: PlacedObject_Registration.REFR_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            PlacedObject item,
            MutagenFrame frame,
            Func<PlacedObject_ErrorMask> errorMask)
        {
            Placed.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<PlacedObject_FieldIndex?> Fill_Binary_RecordTypes(
            PlacedObject item,
            MutagenFrame frame,
            Func<PlacedObject_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "NAME":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Base_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.Base,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.Base);
                case "XTEL":
                    item._TeleportDestination.SetIfSucceeded(LoquiBinaryTranslation<TeleportDestination, TeleportDestination_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)PlacedObject_FieldIndex.TeleportDestination,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.TeleportDestination);
                case "XLOC":
                    item._Lock.SetIfSucceeded(LoquiBinaryTranslation<LockInformation, LockInformation_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)PlacedObject_FieldIndex.Lock,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.Lock);
                case "XOWN":
                case "XRNK":
                case "XGLB":
                    item._Ownership.SetIfSucceeded(LoquiBinaryTranslation<Ownership, Ownership_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)PlacedObject_FieldIndex.Ownership,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.Ownership);
                case "XESP":
                    item._EnableParent.SetIfSucceeded(LoquiBinaryTranslation<EnableParent, EnableParent_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)PlacedObject_FieldIndex.EnableParent,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.EnableParent);
                case "XTRG":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Target_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.Target,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.Target);
                case "XSED":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._SpeedTreeSeed.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.SpeedTreeSeed,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.SpeedTreeSeed);
                case "XLOD":
                    item._DistantLODData.SetIfSucceeded(LoquiBinaryTranslation<DistantLODData, DistantLODData_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)PlacedObject_FieldIndex.DistantLODData,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.DistantLODData);
                case "XCHG":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Charge.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.Charge,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.Charge);
                case "XHLT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Health.SetIfSucceeded(Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.Health,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.Health);
                case "XLCM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._LevelModifier.SetIfSucceeded(Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.LevelModifier,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.LevelModifier);
                case "XRTM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Unknown_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.Unknown);
                case "XACT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._ActionFlags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<PlacedObject.ActionFlag>.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.ActionFlags,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.ActionFlags);
                case "XCNT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Count.SetIfSucceeded(Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.Count,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.Count);
                case "XMRK":
                    frame.Position += Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    item._MapMarker.SetIfSucceeded(LoquiBinaryTranslation<MapMarker, MapMarker_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)PlacedObject_FieldIndex.MapMarker,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.MapMarker);
                case "ONAM":
                    try
                    {
                        using (var subFrame = frame.Spawn(Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                        {
                            FillBinary_OpenByDefault_Custom(
                                frame: subFrame,
                                item: item,
                                fieldIndex: (int)PlacedObject_FieldIndex.OpenByDefault,
                                errorMask: errorMask);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask().Overall = ex;
                    }
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.OpenByDefault);
                case "XRGD":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var RagdollDatatryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.RagdollData,
                        errorMask: errorMask);
                    item._RagdollData.SetIfSucceeded(RagdollDatatryGet);
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.RagdollData);
                case "XSCL":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Scale.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.Scale,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.Scale);
                case "XSOL":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.ContainedSoul_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                        errorMask: errorMask));
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.ContainedSoul);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        item._Position.SetIfSucceeded(Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)PlacedObject_FieldIndex.Position,
                            errorMask: errorMask));
                        item._Rotation.SetIfSucceeded(Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)PlacedObject_FieldIndex.Rotation,
                            errorMask: errorMask));
                    }
                    return TryGet<PlacedObject_FieldIndex?>.Succeed(PlacedObject_FieldIndex.Rotation);
                default:
                    return Placed.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => PlacedObjectCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public PlacedObject Copy(
            PlacedObject_CopyMask copyMask = null,
            IPlacedObjectGetter def = null)
        {
            return PlacedObject.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PlacedObject Copy(
            IPlacedObject item,
            PlacedObject_CopyMask copyMask = null,
            IPlacedObjectGetter def = null)
        {
            PlacedObject ret;
            if (item.GetType().Equals(typeof(PlacedObject)))
            {
                ret = new PlacedObject();
            }
            else
            {
                ret = (PlacedObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PlacedObject Copy_ToLoqui(
            IPlacedObjectGetter item,
            PlacedObject_CopyMask copyMask = null,
            IPlacedObjectGetter def = null)
        {
            PlacedObject ret;
            if (item.GetType().Equals(typeof(PlacedObject)))
            {
                ret = new PlacedObject() as PlacedObject;
            }
            else
            {
                ret = (PlacedObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IPlacedObjectGetter rhs,
            PlacedObject_CopyMask copyMask,
            IPlacedObjectGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPlacedObjectGetter rhs,
            out PlacedObject_ErrorMask errorMask,
            PlacedObject_CopyMask copyMask = null,
            IPlacedObjectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            PlacedObject_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new PlacedObject_ErrorMask();
                }
                return retErrorMask;
            };
            PlacedObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    this.Base_Property.Set(
                        (FormIDSetLink<MajorRecord>)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    this._TeleportDestination.Set(
                        (TeleportDestination)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Lock:
                    this._Lock.Set(
                        (LockInformation)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Ownership:
                    this._Ownership.Set(
                        (Ownership)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    this._EnableParent.Set(
                        (EnableParent)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Target:
                    this.Target_Property.Set(
                        (FormIDSetLink<PlacedObject>)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    this._SpeedTreeSeed.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    this._DistantLODData.Set(
                        (DistantLODData)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Charge:
                    this._Charge.Set(
                        (Single)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Health:
                    this._Health.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    this._LevelModifier.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    this.Unknown_Property.Set(
                        (FormIDSetLink<MajorRecord>)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    this._ActionFlags.Set(
                        (PlacedObject.ActionFlag)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Count:
                    this._Count.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    this._MapMarker.Set(
                        (MapMarker)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    this._OpenByDefault.Set(
                        (Boolean)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    this._RagdollData.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Scale:
                    this._Scale.Set(
                        (Single)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    this.ContainedSoul_Property.Set(
                        (FormIDSetLink<SoulGem>)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Position:
                    this._Position.Set(
                        (P3Float)obj,
                        cmds);
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    this._Rotation.Set(
                        (P3Float)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            PlacedObjectCommon.Clear(this, cmds);
        }


        public new static PlacedObject Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PlacedObject();
            foreach (var pair in fields)
            {
                CopyInInternal_PlacedObject(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_PlacedObject(PlacedObject obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PlacedObject_FieldIndex enu))
            {
                CopyInInternal_Placed(obj, pair);
            }
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    obj.Base_Property.Set(
                        (FormIDSetLink<MajorRecord>)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    obj._TeleportDestination.Set(
                        (TeleportDestination)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Lock:
                    obj._Lock.Set(
                        (LockInformation)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Ownership:
                    obj._Ownership.Set(
                        (Ownership)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    obj._EnableParent.Set(
                        (EnableParent)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Target:
                    obj.Target_Property.Set(
                        (FormIDSetLink<PlacedObject>)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    obj._SpeedTreeSeed.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    obj._DistantLODData.Set(
                        (DistantLODData)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Charge:
                    obj._Charge.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Health:
                    obj._Health.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    obj._LevelModifier.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    obj.Unknown_Property.Set(
                        (FormIDSetLink<MajorRecord>)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    obj._ActionFlags.Set(
                        (PlacedObject.ActionFlag)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Count:
                    obj._Count.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    obj._MapMarker.Set(
                        (MapMarker)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    obj._OpenByDefault.Set(
                        (Boolean)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    obj._RagdollData.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Scale:
                    obj._Scale.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    obj.ContainedSoul_Property.Set(
                        (FormIDSetLink<SoulGem>)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Position:
                    obj._Position.Set(
                        (P3Float)pair.Value,
                        null);
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    obj._Rotation.Set(
                        (P3Float)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, PlacedObject obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedObject : IPlacedObjectGetter, IPlaced, ILoquiClass<IPlacedObject, IPlacedObjectGetter>, ILoquiClass<PlacedObject, IPlacedObjectGetter>
    {
        new MajorRecord Base { get; set; }
        new TeleportDestination TeleportDestination { get; set; }
        new INotifyingSetItem<TeleportDestination> TeleportDestination_Property { get; }

        new LockInformation Lock { get; set; }
        new INotifyingSetItem<LockInformation> Lock_Property { get; }

        new Ownership Ownership { get; set; }
        new INotifyingSetItem<Ownership> Ownership_Property { get; }

        new EnableParent EnableParent { get; set; }
        new INotifyingSetItem<EnableParent> EnableParent_Property { get; }

        new PlacedObject Target { get; set; }
        new Byte SpeedTreeSeed { get; set; }
        new INotifyingSetItem<Byte> SpeedTreeSeed_Property { get; }

        new DistantLODData DistantLODData { get; set; }
        new INotifyingSetItem<DistantLODData> DistantLODData_Property { get; }

        new Single Charge { get; set; }
        new INotifyingSetItem<Single> Charge_Property { get; }

        new Int32 Health { get; set; }
        new INotifyingSetItem<Int32> Health_Property { get; }

        new Int32 LevelModifier { get; set; }
        new INotifyingSetItem<Int32> LevelModifier_Property { get; }

        new MajorRecord Unknown { get; set; }
        new PlacedObject.ActionFlag ActionFlags { get; set; }
        new INotifyingSetItem<PlacedObject.ActionFlag> ActionFlags_Property { get; }

        new Int32 Count { get; set; }
        new INotifyingSetItem<Int32> Count_Property { get; }

        new MapMarker MapMarker { get; set; }
        new INotifyingSetItem<MapMarker> MapMarker_Property { get; }

        new Boolean OpenByDefault { get; set; }
        new INotifyingItem<Boolean> OpenByDefault_Property { get; }

        new Byte[] RagdollData { get; set; }
        new INotifyingSetItem<Byte[]> RagdollData_Property { get; }

        new Single Scale { get; set; }
        new INotifyingSetItem<Single> Scale_Property { get; }

        new SoulGem ContainedSoul { get; set; }
        new P3Float Position { get; set; }
        new INotifyingItem<P3Float> Position_Property { get; }

        new P3Float Rotation { get; set; }
        new INotifyingItem<P3Float> Rotation_Property { get; }

    }

    public partial interface IPlacedObjectGetter : IPlacedGetter
    {
        #region Base
        MajorRecord Base { get; }
        FormIDSetLink<MajorRecord> Base_Property { get; }

        #endregion
        #region TeleportDestination
        TeleportDestination TeleportDestination { get; }
        INotifyingSetItemGetter<TeleportDestination> TeleportDestination_Property { get; }

        #endregion
        #region Lock
        LockInformation Lock { get; }
        INotifyingSetItemGetter<LockInformation> Lock_Property { get; }

        #endregion
        #region Ownership
        Ownership Ownership { get; }
        INotifyingSetItemGetter<Ownership> Ownership_Property { get; }

        #endregion
        #region EnableParent
        EnableParent EnableParent { get; }
        INotifyingSetItemGetter<EnableParent> EnableParent_Property { get; }

        #endregion
        #region Target
        PlacedObject Target { get; }
        FormIDSetLink<PlacedObject> Target_Property { get; }

        #endregion
        #region SpeedTreeSeed
        Byte SpeedTreeSeed { get; }
        INotifyingSetItemGetter<Byte> SpeedTreeSeed_Property { get; }

        #endregion
        #region DistantLODData
        DistantLODData DistantLODData { get; }
        INotifyingSetItemGetter<DistantLODData> DistantLODData_Property { get; }

        #endregion
        #region Charge
        Single Charge { get; }
        INotifyingSetItemGetter<Single> Charge_Property { get; }

        #endregion
        #region Health
        Int32 Health { get; }
        INotifyingSetItemGetter<Int32> Health_Property { get; }

        #endregion
        #region LevelModifier
        Int32 LevelModifier { get; }
        INotifyingSetItemGetter<Int32> LevelModifier_Property { get; }

        #endregion
        #region Unknown
        MajorRecord Unknown { get; }
        FormIDSetLink<MajorRecord> Unknown_Property { get; }

        #endregion
        #region ActionFlags
        PlacedObject.ActionFlag ActionFlags { get; }
        INotifyingSetItemGetter<PlacedObject.ActionFlag> ActionFlags_Property { get; }

        #endregion
        #region Count
        Int32 Count { get; }
        INotifyingSetItemGetter<Int32> Count_Property { get; }

        #endregion
        #region MapMarker
        MapMarker MapMarker { get; }
        INotifyingSetItemGetter<MapMarker> MapMarker_Property { get; }

        #endregion
        #region OpenByDefault
        Boolean OpenByDefault { get; }
        INotifyingItemGetter<Boolean> OpenByDefault_Property { get; }

        #endregion
        #region RagdollData
        Byte[] RagdollData { get; }
        INotifyingSetItemGetter<Byte[]> RagdollData_Property { get; }

        #endregion
        #region Scale
        Single Scale { get; }
        INotifyingSetItemGetter<Single> Scale_Property { get; }

        #endregion
        #region ContainedSoul
        SoulGem ContainedSoul { get; }
        FormIDSetLink<SoulGem> ContainedSoul_Property { get; }

        #endregion
        #region Position
        P3Float Position { get; }
        INotifyingItemGetter<P3Float> Position_Property { get; }

        #endregion
        #region Rotation
        P3Float Rotation { get; }
        INotifyingItemGetter<P3Float> Rotation_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PlacedObject_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Base = 5,
        TeleportDestination = 6,
        Lock = 7,
        Ownership = 8,
        EnableParent = 9,
        Target = 10,
        SpeedTreeSeed = 11,
        DistantLODData = 12,
        Charge = 13,
        Health = 14,
        LevelModifier = 15,
        Unknown = 16,
        ActionFlags = 17,
        Count = 18,
        MapMarker = 19,
        OpenByDefault = 20,
        RagdollData = 21,
        Scale = 22,
        ContainedSoul = 23,
        Position = 24,
        Rotation = 25,
    }
    #endregion

    #region Registration
    public class PlacedObject_Registration : ILoquiRegistration
    {
        public static readonly PlacedObject_Registration Instance = new PlacedObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 121,
            version: 0);

        public const string GUID = "7a559a46-7ef9-49e9-98c1-ec16c3df81f2";

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(PlacedObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedObject_ErrorMask);

        public static readonly Type ClassType = typeof(PlacedObject);

        public static readonly Type GetterType = typeof(IPlacedObjectGetter);

        public static readonly Type SetterType = typeof(IPlacedObject);

        public static readonly Type CommonType = typeof(PlacedObjectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedObject";

        public const string Name = "PlacedObject";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BASE":
                    return (ushort)PlacedObject_FieldIndex.Base;
                case "TELEPORTDESTINATION":
                    return (ushort)PlacedObject_FieldIndex.TeleportDestination;
                case "LOCK":
                    return (ushort)PlacedObject_FieldIndex.Lock;
                case "OWNERSHIP":
                    return (ushort)PlacedObject_FieldIndex.Ownership;
                case "ENABLEPARENT":
                    return (ushort)PlacedObject_FieldIndex.EnableParent;
                case "TARGET":
                    return (ushort)PlacedObject_FieldIndex.Target;
                case "SPEEDTREESEED":
                    return (ushort)PlacedObject_FieldIndex.SpeedTreeSeed;
                case "DISTANTLODDATA":
                    return (ushort)PlacedObject_FieldIndex.DistantLODData;
                case "CHARGE":
                    return (ushort)PlacedObject_FieldIndex.Charge;
                case "HEALTH":
                    return (ushort)PlacedObject_FieldIndex.Health;
                case "LEVELMODIFIER":
                    return (ushort)PlacedObject_FieldIndex.LevelModifier;
                case "UNKNOWN":
                    return (ushort)PlacedObject_FieldIndex.Unknown;
                case "ACTIONFLAGS":
                    return (ushort)PlacedObject_FieldIndex.ActionFlags;
                case "COUNT":
                    return (ushort)PlacedObject_FieldIndex.Count;
                case "MAPMARKER":
                    return (ushort)PlacedObject_FieldIndex.MapMarker;
                case "OPENBYDEFAULT":
                    return (ushort)PlacedObject_FieldIndex.OpenByDefault;
                case "RAGDOLLDATA":
                    return (ushort)PlacedObject_FieldIndex.RagdollData;
                case "SCALE":
                    return (ushort)PlacedObject_FieldIndex.Scale;
                case "CONTAINEDSOUL":
                    return (ushort)PlacedObject_FieldIndex.ContainedSoul;
                case "POSITION":
                    return (ushort)PlacedObject_FieldIndex.Position;
                case "ROTATION":
                    return (ushort)PlacedObject_FieldIndex.Rotation;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Ownership:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Ownership:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.MapMarker:
                    return true;
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Ownership:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return "Base";
                case PlacedObject_FieldIndex.TeleportDestination:
                    return "TeleportDestination";
                case PlacedObject_FieldIndex.Lock:
                    return "Lock";
                case PlacedObject_FieldIndex.Ownership:
                    return "Ownership";
                case PlacedObject_FieldIndex.EnableParent:
                    return "EnableParent";
                case PlacedObject_FieldIndex.Target:
                    return "Target";
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return "SpeedTreeSeed";
                case PlacedObject_FieldIndex.DistantLODData:
                    return "DistantLODData";
                case PlacedObject_FieldIndex.Charge:
                    return "Charge";
                case PlacedObject_FieldIndex.Health:
                    return "Health";
                case PlacedObject_FieldIndex.LevelModifier:
                    return "LevelModifier";
                case PlacedObject_FieldIndex.Unknown:
                    return "Unknown";
                case PlacedObject_FieldIndex.ActionFlags:
                    return "ActionFlags";
                case PlacedObject_FieldIndex.Count:
                    return "Count";
                case PlacedObject_FieldIndex.MapMarker:
                    return "MapMarker";
                case PlacedObject_FieldIndex.OpenByDefault:
                    return "OpenByDefault";
                case PlacedObject_FieldIndex.RagdollData:
                    return "RagdollData";
                case PlacedObject_FieldIndex.Scale:
                    return "Scale";
                case PlacedObject_FieldIndex.ContainedSoul:
                    return "ContainedSoul";
                case PlacedObject_FieldIndex.Position:
                    return "Position";
                case PlacedObject_FieldIndex.Rotation:
                    return "Rotation";
                default:
                    return Placed_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Ownership:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Ownership:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return false;
                default:
                    return Placed_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return typeof(FormIDSetLink<MajorRecord>);
                case PlacedObject_FieldIndex.TeleportDestination:
                    return typeof(TeleportDestination);
                case PlacedObject_FieldIndex.Lock:
                    return typeof(LockInformation);
                case PlacedObject_FieldIndex.Ownership:
                    return typeof(Ownership);
                case PlacedObject_FieldIndex.EnableParent:
                    return typeof(EnableParent);
                case PlacedObject_FieldIndex.Target:
                    return typeof(FormIDSetLink<PlacedObject>);
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return typeof(Byte);
                case PlacedObject_FieldIndex.DistantLODData:
                    return typeof(DistantLODData);
                case PlacedObject_FieldIndex.Charge:
                    return typeof(Single);
                case PlacedObject_FieldIndex.Health:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.LevelModifier:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.Unknown:
                    return typeof(FormIDSetLink<MajorRecord>);
                case PlacedObject_FieldIndex.ActionFlags:
                    return typeof(PlacedObject.ActionFlag);
                case PlacedObject_FieldIndex.Count:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.MapMarker:
                    return typeof(MapMarker);
                case PlacedObject_FieldIndex.OpenByDefault:
                    return typeof(Boolean);
                case PlacedObject_FieldIndex.RagdollData:
                    return typeof(Byte[]);
                case PlacedObject_FieldIndex.Scale:
                    return typeof(Single);
                case PlacedObject_FieldIndex.ContainedSoul:
                    return typeof(FormIDSetLink<SoulGem>);
                case PlacedObject_FieldIndex.Position:
                    return typeof(P3Float);
                case PlacedObject_FieldIndex.Rotation:
                    return typeof(P3Float);
                default:
                    return Placed_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType XTEL_HEADER = new RecordType("XTEL");
        public static readonly RecordType XLOC_HEADER = new RecordType("XLOC");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType XESP_HEADER = new RecordType("XESP");
        public static readonly RecordType XTRG_HEADER = new RecordType("XTRG");
        public static readonly RecordType XSED_HEADER = new RecordType("XSED");
        public static readonly RecordType XLOD_HEADER = new RecordType("XLOD");
        public static readonly RecordType XCHG_HEADER = new RecordType("XCHG");
        public static readonly RecordType XHLT_HEADER = new RecordType("XHLT");
        public static readonly RecordType XLCM_HEADER = new RecordType("XLCM");
        public static readonly RecordType XRTM_HEADER = new RecordType("XRTM");
        public static readonly RecordType XACT_HEADER = new RecordType("XACT");
        public static readonly RecordType XCNT_HEADER = new RecordType("XCNT");
        public static readonly RecordType XMRK_HEADER = new RecordType("XMRK");
        public static readonly RecordType ONAM_HEADER = new RecordType("ONAM");
        public static readonly RecordType XRGD_HEADER = new RecordType("XRGD");
        public static readonly RecordType XSCL_HEADER = new RecordType("XSCL");
        public static readonly RecordType XSOL_HEADER = new RecordType("XSOL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = REFR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 19;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class PlacedObjectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IPlacedObject item,
            IPlacedObjectGetter rhs,
            IPlacedObjectGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            PlacedObject_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            PlacedCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Base ?? true)
            {
                try
                {
                    item.Base_Property.SetToWithDefault(
                        rhs: rhs.Base_Property,
                        def: def?.Base_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Base, ex);
                }
            }
            if (copyMask?.TeleportDestination.Overall != CopyOption.Skip)
            {
                try
                {
                    item.TeleportDestination_Property.SetToWithDefault(
                        rhs.TeleportDestination_Property,
                        def?.TeleportDestination_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.TeleportDestination.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    TeleportDestinationCommon.CopyFieldsFrom(
                                        item: item.TeleportDestination,
                                        rhs: rhs.TeleportDestination,
                                        def: def?.TeleportDestination,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<TeleportDestination_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new TeleportDestination_ErrorMask();
                                            baseMask.SetNthMask((int)PlacedObject_FieldIndex.TeleportDestination, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.TeleportDestination.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(TeleportDestination);
                                    return TeleportDestination.Copy(
                                        r,
                                        copyMask?.TeleportDestination?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.TeleportDestination?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.TeleportDestination, ex);
                }
            }
            if (copyMask?.Lock.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Lock_Property.SetToWithDefault(
                        rhs.Lock_Property,
                        def?.Lock_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Lock.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    LockInformationCommon.CopyFieldsFrom(
                                        item: item.Lock,
                                        rhs: rhs.Lock,
                                        def: def?.Lock,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<LockInformation_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new LockInformation_ErrorMask();
                                            baseMask.SetNthMask((int)PlacedObject_FieldIndex.Lock, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Lock.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(LockInformation);
                                    return LockInformation.Copy(
                                        r,
                                        copyMask?.Lock?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Lock?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Lock, ex);
                }
            }
            if (copyMask?.Ownership.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Ownership_Property.SetToWithDefault(
                        rhs.Ownership_Property,
                        def?.Ownership_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Ownership.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    OwnershipCommon.CopyFieldsFrom(
                                        item: item.Ownership,
                                        rhs: rhs.Ownership,
                                        def: def?.Ownership,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Ownership_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new Ownership_ErrorMask();
                                            baseMask.SetNthMask((int)PlacedObject_FieldIndex.Ownership, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Ownership.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Ownership);
                                    return Ownership.Copy(
                                        r,
                                        copyMask?.Ownership?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Ownership?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Ownership, ex);
                }
            }
            if (copyMask?.EnableParent.Overall != CopyOption.Skip)
            {
                try
                {
                    item.EnableParent_Property.SetToWithDefault(
                        rhs.EnableParent_Property,
                        def?.EnableParent_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.EnableParent.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    EnableParentCommon.CopyFieldsFrom(
                                        item: item.EnableParent,
                                        rhs: rhs.EnableParent,
                                        def: def?.EnableParent,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<EnableParent_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new EnableParent_ErrorMask();
                                            baseMask.SetNthMask((int)PlacedObject_FieldIndex.EnableParent, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.EnableParent.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(EnableParent);
                                    return EnableParent.Copy(
                                        r,
                                        copyMask?.EnableParent?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.EnableParent?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.EnableParent, ex);
                }
            }
            if (copyMask?.Target ?? true)
            {
                try
                {
                    item.Target_Property.SetToWithDefault(
                        rhs: rhs.Target_Property,
                        def: def?.Target_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Target, ex);
                }
            }
            if (copyMask?.SpeedTreeSeed ?? true)
            {
                try
                {
                    item.SpeedTreeSeed_Property.SetToWithDefault(
                        rhs: rhs.SpeedTreeSeed_Property,
                        def: def?.SpeedTreeSeed_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.SpeedTreeSeed, ex);
                }
            }
            if (copyMask?.DistantLODData.Overall != CopyOption.Skip)
            {
                try
                {
                    item.DistantLODData_Property.SetToWithDefault(
                        rhs.DistantLODData_Property,
                        def?.DistantLODData_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.DistantLODData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    DistantLODDataCommon.CopyFieldsFrom(
                                        item: item.DistantLODData,
                                        rhs: rhs.DistantLODData,
                                        def: def?.DistantLODData,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<DistantLODData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new DistantLODData_ErrorMask();
                                            baseMask.SetNthMask((int)PlacedObject_FieldIndex.DistantLODData, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.DistantLODData.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(DistantLODData);
                                    return DistantLODData.Copy(
                                        r,
                                        copyMask?.DistantLODData?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.DistantLODData?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.DistantLODData, ex);
                }
            }
            if (copyMask?.Charge ?? true)
            {
                try
                {
                    item.Charge_Property.SetToWithDefault(
                        rhs: rhs.Charge_Property,
                        def: def?.Charge_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Charge, ex);
                }
            }
            if (copyMask?.Health ?? true)
            {
                try
                {
                    item.Health_Property.SetToWithDefault(
                        rhs: rhs.Health_Property,
                        def: def?.Health_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Health, ex);
                }
            }
            if (copyMask?.LevelModifier ?? true)
            {
                try
                {
                    item.LevelModifier_Property.SetToWithDefault(
                        rhs: rhs.LevelModifier_Property,
                        def: def?.LevelModifier_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.LevelModifier, ex);
                }
            }
            if (copyMask?.Unknown ?? true)
            {
                try
                {
                    item.Unknown_Property.SetToWithDefault(
                        rhs: rhs.Unknown_Property,
                        def: def?.Unknown_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Unknown, ex);
                }
            }
            if (copyMask?.ActionFlags ?? true)
            {
                try
                {
                    item.ActionFlags_Property.SetToWithDefault(
                        rhs: rhs.ActionFlags_Property,
                        def: def?.ActionFlags_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.ActionFlags, ex);
                }
            }
            if (copyMask?.Count ?? true)
            {
                try
                {
                    item.Count_Property.SetToWithDefault(
                        rhs: rhs.Count_Property,
                        def: def?.Count_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Count, ex);
                }
            }
            if (copyMask?.MapMarker.Overall != CopyOption.Skip)
            {
                try
                {
                    item.MapMarker_Property.SetToWithDefault(
                        rhs.MapMarker_Property,
                        def?.MapMarker_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.MapMarker.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    MapMarkerCommon.CopyFieldsFrom(
                                        item: item.MapMarker,
                                        rhs: rhs.MapMarker,
                                        def: def?.MapMarker,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<MapMarker_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new MapMarker_ErrorMask();
                                            baseMask.SetNthMask((int)PlacedObject_FieldIndex.MapMarker, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.MapMarker.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(MapMarker);
                                    return MapMarker.Copy(
                                        r,
                                        copyMask?.MapMarker?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.MapMarker?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.MapMarker, ex);
                }
            }
            if (copyMask?.OpenByDefault ?? true)
            {
                try
                {
                    item.OpenByDefault_Property.Set(
                        value: rhs.OpenByDefault,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.OpenByDefault, ex);
                }
            }
            if (copyMask?.RagdollData ?? true)
            {
                try
                {
                    item.RagdollData_Property.SetToWithDefault(
                        rhs: rhs.RagdollData_Property,
                        def: def?.RagdollData_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.RagdollData, ex);
                }
            }
            if (copyMask?.Scale ?? true)
            {
                try
                {
                    item.Scale_Property.SetToWithDefault(
                        rhs: rhs.Scale_Property,
                        def: def?.Scale_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Scale, ex);
                }
            }
            if (copyMask?.ContainedSoul ?? true)
            {
                try
                {
                    item.ContainedSoul_Property.SetToWithDefault(
                        rhs: rhs.ContainedSoul_Property,
                        def: def?.ContainedSoul_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.ContainedSoul, ex);
                }
            }
            if (copyMask?.Position ?? true)
            {
                try
                {
                    item.Position_Property.Set(
                        value: rhs.Position,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Position, ex);
                }
            }
            if (copyMask?.Rotation ?? true)
            {
                try
                {
                    item.Rotation_Property.Set(
                        value: rhs.Rotation,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)PlacedObject_FieldIndex.Rotation, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IPlacedObject obj,
            NotifyingFireParameters cmds = null)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case PlacedObject_FieldIndex.Base:
                    obj.Base_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    obj.TeleportDestination_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Lock:
                    obj.Lock_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Ownership:
                    obj.Ownership_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    obj.EnableParent_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Target:
                    obj.Target_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    obj.SpeedTreeSeed_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    obj.DistantLODData_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Charge:
                    obj.Charge_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Health:
                    obj.Health_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    obj.LevelModifier_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    obj.Unknown_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    obj.ActionFlags_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Count:
                    obj.Count_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    obj.MapMarker_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    obj.RagdollData_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.Scale:
                    obj.Scale_Property.HasBeenSet = on;
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    obj.ContainedSoul_Property.HasBeenSet = on;
                    break;
                default:
                    PlacedCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IPlacedObject obj,
            NotifyingUnsetParameters cmds = null)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    obj.Base_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    obj.TeleportDestination_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Lock:
                    obj.Lock_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Ownership:
                    obj.Ownership_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    obj.EnableParent_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Target:
                    obj.Target_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    obj.SpeedTreeSeed_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    obj.DistantLODData_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Charge:
                    obj.Charge_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Health:
                    obj.Health_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    obj.LevelModifier_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    obj.Unknown_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    obj.ActionFlags_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Count:
                    obj.Count_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    obj.MapMarker_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    obj.OpenByDefault = default(Boolean);
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    obj.RagdollData_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Scale:
                    obj.Scale_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    obj.ContainedSoul_Property.Unset(cmds);
                    break;
                case PlacedObject_FieldIndex.Position:
                    obj.Position = default(P3Float);
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    obj.Rotation = default(P3Float);
                    break;
                default:
                    PlacedCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IPlacedObject obj)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                    return true;
                case PlacedObject_FieldIndex.Base:
                    return obj.Base_Property.HasBeenSet;
                case PlacedObject_FieldIndex.TeleportDestination:
                    return obj.TeleportDestination_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Lock:
                    return obj.Lock_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Ownership:
                    return obj.Ownership_Property.HasBeenSet;
                case PlacedObject_FieldIndex.EnableParent:
                    return obj.EnableParent_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Target:
                    return obj.Target_Property.HasBeenSet;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return obj.SpeedTreeSeed_Property.HasBeenSet;
                case PlacedObject_FieldIndex.DistantLODData:
                    return obj.DistantLODData_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Charge:
                    return obj.Charge_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Health:
                    return obj.Health_Property.HasBeenSet;
                case PlacedObject_FieldIndex.LevelModifier:
                    return obj.LevelModifier_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Unknown:
                    return obj.Unknown_Property.HasBeenSet;
                case PlacedObject_FieldIndex.ActionFlags:
                    return obj.ActionFlags_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Count:
                    return obj.Count_Property.HasBeenSet;
                case PlacedObject_FieldIndex.MapMarker:
                    return obj.MapMarker_Property.HasBeenSet;
                case PlacedObject_FieldIndex.RagdollData:
                    return obj.RagdollData_Property.HasBeenSet;
                case PlacedObject_FieldIndex.Scale:
                    return obj.Scale_Property.HasBeenSet;
                case PlacedObject_FieldIndex.ContainedSoul:
                    return obj.ContainedSoul_Property.HasBeenSet;
                default:
                    return PlacedCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IPlacedObjectGetter obj)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return obj.Base;
                case PlacedObject_FieldIndex.TeleportDestination:
                    return obj.TeleportDestination;
                case PlacedObject_FieldIndex.Lock:
                    return obj.Lock;
                case PlacedObject_FieldIndex.Ownership:
                    return obj.Ownership;
                case PlacedObject_FieldIndex.EnableParent:
                    return obj.EnableParent;
                case PlacedObject_FieldIndex.Target:
                    return obj.Target;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return obj.SpeedTreeSeed;
                case PlacedObject_FieldIndex.DistantLODData:
                    return obj.DistantLODData;
                case PlacedObject_FieldIndex.Charge:
                    return obj.Charge;
                case PlacedObject_FieldIndex.Health:
                    return obj.Health;
                case PlacedObject_FieldIndex.LevelModifier:
                    return obj.LevelModifier;
                case PlacedObject_FieldIndex.Unknown:
                    return obj.Unknown;
                case PlacedObject_FieldIndex.ActionFlags:
                    return obj.ActionFlags;
                case PlacedObject_FieldIndex.Count:
                    return obj.Count;
                case PlacedObject_FieldIndex.MapMarker:
                    return obj.MapMarker;
                case PlacedObject_FieldIndex.OpenByDefault:
                    return obj.OpenByDefault;
                case PlacedObject_FieldIndex.RagdollData:
                    return obj.RagdollData;
                case PlacedObject_FieldIndex.Scale:
                    return obj.Scale;
                case PlacedObject_FieldIndex.ContainedSoul:
                    return obj.ContainedSoul;
                case PlacedObject_FieldIndex.Position:
                    return obj.Position;
                case PlacedObject_FieldIndex.Rotation:
                    return obj.Rotation;
                default:
                    return PlacedCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IPlacedObject item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Base_Property.Unset(cmds.ToUnsetParams());
            item.TeleportDestination_Property.Unset(cmds.ToUnsetParams());
            item.Lock_Property.Unset(cmds.ToUnsetParams());
            item.Ownership_Property.Unset(cmds.ToUnsetParams());
            item.EnableParent_Property.Unset(cmds.ToUnsetParams());
            item.Target_Property.Unset(cmds.ToUnsetParams());
            item.SpeedTreeSeed_Property.Unset(cmds.ToUnsetParams());
            item.DistantLODData_Property.Unset(cmds.ToUnsetParams());
            item.Charge_Property.Unset(cmds.ToUnsetParams());
            item.Health_Property.Unset(cmds.ToUnsetParams());
            item.LevelModifier_Property.Unset(cmds.ToUnsetParams());
            item.Unknown_Property.Unset(cmds.ToUnsetParams());
            item.ActionFlags_Property.Unset(cmds.ToUnsetParams());
            item.Count_Property.Unset(cmds.ToUnsetParams());
            item.MapMarker_Property.Unset(cmds.ToUnsetParams());
            item.OpenByDefault = default(Boolean);
            item.RagdollData_Property.Unset(cmds.ToUnsetParams());
            item.Scale_Property.Unset(cmds.ToUnsetParams());
            item.ContainedSoul_Property.Unset(cmds.ToUnsetParams());
            item.Position = default(P3Float);
            item.Rotation = default(P3Float);
        }

        public static PlacedObject_Mask<bool> GetEqualsMask(
            this IPlacedObjectGetter item,
            IPlacedObjectGetter rhs)
        {
            var ret = new PlacedObject_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            PlacedObject_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Base = item.Base_Property.Equals(rhs.Base_Property, (l, r) => l == r);
            ret.TeleportDestination = item.TeleportDestination_Property.LoquiEqualsHelper(rhs.TeleportDestination_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Lock = item.Lock_Property.LoquiEqualsHelper(rhs.Lock_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Ownership = item.Ownership_Property.LoquiEqualsHelper(rhs.Ownership_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.EnableParent = item.EnableParent_Property.LoquiEqualsHelper(rhs.EnableParent_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Target = item.Target_Property.Equals(rhs.Target_Property, (l, r) => l == r);
            ret.SpeedTreeSeed = item.SpeedTreeSeed_Property.Equals(rhs.SpeedTreeSeed_Property, (l, r) => l == r);
            ret.DistantLODData = item.DistantLODData_Property.LoquiEqualsHelper(rhs.DistantLODData_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Charge = item.Charge_Property.Equals(rhs.Charge_Property, (l, r) => l == r);
            ret.Health = item.Health_Property.Equals(rhs.Health_Property, (l, r) => l == r);
            ret.LevelModifier = item.LevelModifier_Property.Equals(rhs.LevelModifier_Property, (l, r) => l == r);
            ret.Unknown = item.Unknown_Property.Equals(rhs.Unknown_Property, (l, r) => l == r);
            ret.ActionFlags = item.ActionFlags_Property.Equals(rhs.ActionFlags_Property, (l, r) => l == r);
            ret.Count = item.Count_Property.Equals(rhs.Count_Property, (l, r) => l == r);
            ret.MapMarker = item.MapMarker_Property.LoquiEqualsHelper(rhs.MapMarker_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.OpenByDefault = item.OpenByDefault == rhs.OpenByDefault;
            ret.RagdollData = item.RagdollData_Property.Equals(rhs.RagdollData_Property, (l, r) => l.EqualsFast(r));
            ret.Scale = item.Scale_Property.Equals(rhs.Scale_Property, (l, r) => l == r);
            ret.ContainedSoul = item.ContainedSoul_Property.Equals(rhs.ContainedSoul_Property, (l, r) => l == r);
            ret.Position = item.Position == rhs.Position;
            ret.Rotation = item.Rotation == rhs.Rotation;
            PlacedCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IPlacedObjectGetter item,
            string name = null,
            PlacedObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IPlacedObjectGetter item,
            FileGeneration fg,
            string name = null,
            PlacedObject_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(PlacedObject)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(PlacedObject)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Base ?? true)
                {
                    fg.AppendLine($"Base => {item.Base}");
                }
                if (printMask?.TeleportDestination?.Overall ?? true)
                {
                    item.TeleportDestination?.ToString(fg, "TeleportDestination");
                }
                if (printMask?.Lock?.Overall ?? true)
                {
                    item.Lock?.ToString(fg, "Lock");
                }
                if (printMask?.Ownership?.Overall ?? true)
                {
                    item.Ownership?.ToString(fg, "Ownership");
                }
                if (printMask?.EnableParent?.Overall ?? true)
                {
                    item.EnableParent?.ToString(fg, "EnableParent");
                }
                if (printMask?.Target ?? true)
                {
                    fg.AppendLine($"Target => {item.Target}");
                }
                if (printMask?.SpeedTreeSeed ?? true)
                {
                    fg.AppendLine($"SpeedTreeSeed => {item.SpeedTreeSeed}");
                }
                if (printMask?.DistantLODData?.Overall ?? true)
                {
                    item.DistantLODData?.ToString(fg, "DistantLODData");
                }
                if (printMask?.Charge ?? true)
                {
                    fg.AppendLine($"Charge => {item.Charge}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {item.Health}");
                }
                if (printMask?.LevelModifier ?? true)
                {
                    fg.AppendLine($"LevelModifier => {item.LevelModifier}");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {item.Unknown}");
                }
                if (printMask?.ActionFlags ?? true)
                {
                    fg.AppendLine($"ActionFlags => {item.ActionFlags}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {item.Count}");
                }
                if (printMask?.MapMarker?.Overall ?? true)
                {
                    item.MapMarker?.ToString(fg, "MapMarker");
                }
                if (printMask?.OpenByDefault ?? true)
                {
                    fg.AppendLine($"OpenByDefault => {item.OpenByDefault}");
                }
                if (printMask?.RagdollData ?? true)
                {
                    fg.AppendLine($"RagdollData => {item.RagdollData}");
                }
                if (printMask?.Scale ?? true)
                {
                    fg.AppendLine($"Scale => {item.Scale}");
                }
                if (printMask?.ContainedSoul ?? true)
                {
                    fg.AppendLine($"ContainedSoul => {item.ContainedSoul}");
                }
                if (printMask?.Position ?? true)
                {
                    fg.AppendLine($"Position => {item.Position}");
                }
                if (printMask?.Rotation ?? true)
                {
                    fg.AppendLine($"Rotation => {item.Rotation}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IPlacedObjectGetter item,
            PlacedObject_Mask<bool?> checkMask)
        {
            if (checkMask.Base.HasValue && checkMask.Base.Value != item.Base_Property.HasBeenSet) return false;
            if (checkMask.TeleportDestination.Overall.HasValue && checkMask.TeleportDestination.Overall.Value != item.TeleportDestination_Property.HasBeenSet) return false;
            if (checkMask.TeleportDestination.Specific != null && (item.TeleportDestination_Property.Item == null || !item.TeleportDestination_Property.Item.HasBeenSet(checkMask.TeleportDestination.Specific))) return false;
            if (checkMask.Lock.Overall.HasValue && checkMask.Lock.Overall.Value != item.Lock_Property.HasBeenSet) return false;
            if (checkMask.Lock.Specific != null && (item.Lock_Property.Item == null || !item.Lock_Property.Item.HasBeenSet(checkMask.Lock.Specific))) return false;
            if (checkMask.Ownership.Overall.HasValue && checkMask.Ownership.Overall.Value != item.Ownership_Property.HasBeenSet) return false;
            if (checkMask.Ownership.Specific != null && (item.Ownership_Property.Item == null || !item.Ownership_Property.Item.HasBeenSet(checkMask.Ownership.Specific))) return false;
            if (checkMask.EnableParent.Overall.HasValue && checkMask.EnableParent.Overall.Value != item.EnableParent_Property.HasBeenSet) return false;
            if (checkMask.EnableParent.Specific != null && (item.EnableParent_Property.Item == null || !item.EnableParent_Property.Item.HasBeenSet(checkMask.EnableParent.Specific))) return false;
            if (checkMask.Target.HasValue && checkMask.Target.Value != item.Target_Property.HasBeenSet) return false;
            if (checkMask.SpeedTreeSeed.HasValue && checkMask.SpeedTreeSeed.Value != item.SpeedTreeSeed_Property.HasBeenSet) return false;
            if (checkMask.DistantLODData.Overall.HasValue && checkMask.DistantLODData.Overall.Value != item.DistantLODData_Property.HasBeenSet) return false;
            if (checkMask.DistantLODData.Specific != null && (item.DistantLODData_Property.Item == null || !item.DistantLODData_Property.Item.HasBeenSet(checkMask.DistantLODData.Specific))) return false;
            if (checkMask.Charge.HasValue && checkMask.Charge.Value != item.Charge_Property.HasBeenSet) return false;
            if (checkMask.Health.HasValue && checkMask.Health.Value != item.Health_Property.HasBeenSet) return false;
            if (checkMask.LevelModifier.HasValue && checkMask.LevelModifier.Value != item.LevelModifier_Property.HasBeenSet) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_Property.HasBeenSet) return false;
            if (checkMask.ActionFlags.HasValue && checkMask.ActionFlags.Value != item.ActionFlags_Property.HasBeenSet) return false;
            if (checkMask.Count.HasValue && checkMask.Count.Value != item.Count_Property.HasBeenSet) return false;
            if (checkMask.MapMarker.Overall.HasValue && checkMask.MapMarker.Overall.Value != item.MapMarker_Property.HasBeenSet) return false;
            if (checkMask.MapMarker.Specific != null && (item.MapMarker_Property.Item == null || !item.MapMarker_Property.Item.HasBeenSet(checkMask.MapMarker.Specific))) return false;
            if (checkMask.RagdollData.HasValue && checkMask.RagdollData.Value != item.RagdollData_Property.HasBeenSet) return false;
            if (checkMask.Scale.HasValue && checkMask.Scale.Value != item.Scale_Property.HasBeenSet) return false;
            if (checkMask.ContainedSoul.HasValue && checkMask.ContainedSoul.Value != item.ContainedSoul_Property.HasBeenSet) return false;
            return true;
        }

        public static PlacedObject_Mask<bool> GetHasBeenSetMask(IPlacedObjectGetter item)
        {
            var ret = new PlacedObject_Mask<bool>();
            ret.Base = item.Base_Property.HasBeenSet;
            ret.TeleportDestination = new MaskItem<bool, TeleportDestination_Mask<bool>>(item.TeleportDestination_Property.HasBeenSet, TeleportDestinationCommon.GetHasBeenSetMask(item.TeleportDestination_Property.Item));
            ret.Lock = new MaskItem<bool, LockInformation_Mask<bool>>(item.Lock_Property.HasBeenSet, LockInformationCommon.GetHasBeenSetMask(item.Lock_Property.Item));
            ret.Ownership = new MaskItem<bool, Ownership_Mask<bool>>(item.Ownership_Property.HasBeenSet, OwnershipCommon.GetHasBeenSetMask(item.Ownership_Property.Item));
            ret.EnableParent = new MaskItem<bool, EnableParent_Mask<bool>>(item.EnableParent_Property.HasBeenSet, EnableParentCommon.GetHasBeenSetMask(item.EnableParent_Property.Item));
            ret.Target = item.Target_Property.HasBeenSet;
            ret.SpeedTreeSeed = item.SpeedTreeSeed_Property.HasBeenSet;
            ret.DistantLODData = new MaskItem<bool, DistantLODData_Mask<bool>>(item.DistantLODData_Property.HasBeenSet, DistantLODDataCommon.GetHasBeenSetMask(item.DistantLODData_Property.Item));
            ret.Charge = item.Charge_Property.HasBeenSet;
            ret.Health = item.Health_Property.HasBeenSet;
            ret.LevelModifier = item.LevelModifier_Property.HasBeenSet;
            ret.Unknown = item.Unknown_Property.HasBeenSet;
            ret.ActionFlags = item.ActionFlags_Property.HasBeenSet;
            ret.Count = item.Count_Property.HasBeenSet;
            ret.MapMarker = new MaskItem<bool, MapMarker_Mask<bool>>(item.MapMarker_Property.HasBeenSet, MapMarkerCommon.GetHasBeenSetMask(item.MapMarker_Property.Item));
            ret.OpenByDefault = true;
            ret.RagdollData = item.RagdollData_Property.HasBeenSet;
            ret.Scale = item.Scale_Property.HasBeenSet;
            ret.ContainedSoul = item.ContainedSoul_Property.HasBeenSet;
            ret.Position = true;
            ret.Rotation = true;
            return ret;
        }

        public static PlacedObject_FieldIndex? ConvertFieldIndex(Placed_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static PlacedObject_FieldIndex ConvertFieldIndex(Placed_FieldIndex index)
        {
            switch (index)
            {
                case Placed_FieldIndex.MajorRecordFlags:
                    return (PlacedObject_FieldIndex)((int)index);
                case Placed_FieldIndex.FormID:
                    return (PlacedObject_FieldIndex)((int)index);
                case Placed_FieldIndex.Version:
                    return (PlacedObject_FieldIndex)((int)index);
                case Placed_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                case Placed_FieldIndex.RecordType:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static PlacedObject_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static PlacedObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IPlacedObjectGetter item,
            bool doMasks,
            out PlacedObject_ErrorMask errorMask,
            string name = null)
        {
            PlacedObject_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new PlacedObject_ErrorMask()) : default(Func<PlacedObject_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IPlacedObjectGetter item,
            Func<PlacedObject_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.PlacedObject"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.PlacedObject");
                    }
                    if (item.Base_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Base),
                            item: item.Base?.FormID,
                            fieldIndex: (int)PlacedObject_FieldIndex.Base,
                            errorMask: errorMask);
                    }
                    if (item.TeleportDestination_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<TeleportDestination, TeleportDestination_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.TeleportDestination_Property,
                            name: nameof(item.TeleportDestination),
                            fieldIndex: (int)PlacedObject_FieldIndex.TeleportDestination,
                            errorMask: errorMask);
                    }
                    if (item.Lock_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<LockInformation, LockInformation_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Lock_Property,
                            name: nameof(item.Lock),
                            fieldIndex: (int)PlacedObject_FieldIndex.Lock,
                            errorMask: errorMask);
                    }
                    if (item.Ownership_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<Ownership, Ownership_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Ownership_Property,
                            name: nameof(item.Ownership),
                            fieldIndex: (int)PlacedObject_FieldIndex.Ownership,
                            errorMask: errorMask);
                    }
                    if (item.EnableParent_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<EnableParent, EnableParent_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.EnableParent_Property,
                            name: nameof(item.EnableParent),
                            fieldIndex: (int)PlacedObject_FieldIndex.EnableParent,
                            errorMask: errorMask);
                    }
                    if (item.Target_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Target),
                            item: item.Target?.FormID,
                            fieldIndex: (int)PlacedObject_FieldIndex.Target,
                            errorMask: errorMask);
                    }
                    if (item.SpeedTreeSeed_Property.HasBeenSet)
                    {
                        ByteXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.SpeedTreeSeed),
                            item: item.SpeedTreeSeed_Property,
                            fieldIndex: (int)PlacedObject_FieldIndex.SpeedTreeSeed,
                            errorMask: errorMask);
                    }
                    if (item.DistantLODData_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<DistantLODData, DistantLODData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.DistantLODData_Property,
                            name: nameof(item.DistantLODData),
                            fieldIndex: (int)PlacedObject_FieldIndex.DistantLODData,
                            errorMask: errorMask);
                    }
                    if (item.Charge_Property.HasBeenSet)
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Charge),
                            item: item.Charge_Property,
                            fieldIndex: (int)PlacedObject_FieldIndex.Charge,
                            errorMask: errorMask);
                    }
                    if (item.Health_Property.HasBeenSet)
                    {
                        Int32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Health),
                            item: item.Health_Property,
                            fieldIndex: (int)PlacedObject_FieldIndex.Health,
                            errorMask: errorMask);
                    }
                    if (item.LevelModifier_Property.HasBeenSet)
                    {
                        Int32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.LevelModifier),
                            item: item.LevelModifier_Property,
                            fieldIndex: (int)PlacedObject_FieldIndex.LevelModifier,
                            errorMask: errorMask);
                    }
                    if (item.Unknown_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Unknown),
                            item: item.Unknown?.FormID,
                            fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                            errorMask: errorMask);
                    }
                    if (item.ActionFlags_Property.HasBeenSet)
                    {
                        EnumXmlTranslation<PlacedObject.ActionFlag>.Instance.Write(
                            writer: writer,
                            name: nameof(item.ActionFlags),
                            item: item.ActionFlags_Property,
                            fieldIndex: (int)PlacedObject_FieldIndex.ActionFlags,
                            errorMask: errorMask);
                    }
                    if (item.Count_Property.HasBeenSet)
                    {
                        Int32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Count),
                            item: item.Count_Property,
                            fieldIndex: (int)PlacedObject_FieldIndex.Count,
                            errorMask: errorMask);
                    }
                    if (item.MapMarker_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<MapMarker, MapMarker_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.MapMarker_Property,
                            name: nameof(item.MapMarker),
                            fieldIndex: (int)PlacedObject_FieldIndex.MapMarker,
                            errorMask: errorMask);
                    }
                    BooleanXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.OpenByDefault),
                        item: item.OpenByDefault_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.OpenByDefault,
                        errorMask: errorMask);
                    if (item.RagdollData_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.RagdollData),
                            item: item.RagdollData_Property,
                            fieldIndex: (int)PlacedObject_FieldIndex.RagdollData,
                            errorMask: errorMask);
                    }
                    if (item.Scale_Property.HasBeenSet)
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Scale),
                            item: item.Scale_Property,
                            fieldIndex: (int)PlacedObject_FieldIndex.Scale,
                            errorMask: errorMask);
                    }
                    if (item.ContainedSoul_Property.HasBeenSet)
                    {
                        FormIDXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.ContainedSoul),
                            item: item.ContainedSoul?.FormID,
                            fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                            errorMask: errorMask);
                    }
                    P3FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Position),
                        item: item.Position_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Position,
                        errorMask: errorMask);
                    P3FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Rotation),
                        item: item.Rotation_Property,
                        fieldIndex: (int)PlacedObject_FieldIndex.Rotation,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            PlacedObject item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out PlacedObject_ErrorMask errorMask)
        {
            PlacedObject_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new PlacedObject_ErrorMask()) : default(Func<PlacedObject_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            PlacedObject item,
            RecordTypeConverter recordTypeConverter,
            Func<PlacedObject_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: PlacedObject_Registration.REFR_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            PlacedObject item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<PlacedObject_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Base_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Base,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.NAME_HEADER),
                nullable: false);
            LoquiBinaryTranslation<TeleportDestination, TeleportDestination_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.TeleportDestination_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.TeleportDestination,
                errorMask: errorMask);
            LoquiBinaryTranslation<LockInformation, LockInformation_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Lock_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Lock,
                errorMask: errorMask);
            LoquiBinaryTranslation<Ownership, Ownership_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Ownership_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Ownership,
                errorMask: errorMask);
            LoquiBinaryTranslation<EnableParent, EnableParent_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.EnableParent_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.EnableParent,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Target_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Target,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XTRG_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SpeedTreeSeed_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.SpeedTreeSeed,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSED_HEADER),
                nullable: false);
            LoquiBinaryTranslation<DistantLODData, DistantLODData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.DistantLODData_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.DistantLODData,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Charge_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Charge,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XCHG_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Health_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Health,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XHLT_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LevelModifier_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.LevelModifier,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XLCM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRTM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<PlacedObject.ActionFlag>.Instance.Write(
                writer,
                item.ActionFlags_Property,
                length: new ContentLength(4),
                fieldIndex: (int)PlacedObject_FieldIndex.ActionFlags,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XACT_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Count_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Count,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XCNT_HEADER),
                nullable: false);
            using (HeaderExport.ExportHeader(writer, PlacedObject_Registration.XMRK_HEADER, ObjectType.Subrecord)) { }
            LoquiBinaryTranslation<MapMarker, MapMarker_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.MapMarker_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.MapMarker,
                errorMask: errorMask);
            PlacedObject.WriteBinary_OpenByDefault(
                writer: writer,
                item: item,
                fieldIndex: (int)PlacedObject_FieldIndex.OpenByDefault,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RagdollData_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.RagdollData,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRGD_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Scale_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.Scale,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSCL_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ContainedSoul_Property,
                fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSOL_HEADER),
                nullable: false);
            using (HeaderExport.ExportSubRecordHeader(writer, PlacedObject_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Position_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.Position,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Rotation_Property,
                    fieldIndex: (int)PlacedObject_FieldIndex.Rotation,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class PlacedObject_Mask<T> : Placed_Mask<T>, IMask<T>, IEquatable<PlacedObject_Mask<T>>
    {
        #region Ctors
        public PlacedObject_Mask()
        {
        }

        public PlacedObject_Mask(T initialValue)
        {
            this.Base = initialValue;
            this.TeleportDestination = new MaskItem<T, TeleportDestination_Mask<T>>(initialValue, new TeleportDestination_Mask<T>(initialValue));
            this.Lock = new MaskItem<T, LockInformation_Mask<T>>(initialValue, new LockInformation_Mask<T>(initialValue));
            this.Ownership = new MaskItem<T, Ownership_Mask<T>>(initialValue, new Ownership_Mask<T>(initialValue));
            this.EnableParent = new MaskItem<T, EnableParent_Mask<T>>(initialValue, new EnableParent_Mask<T>(initialValue));
            this.Target = initialValue;
            this.SpeedTreeSeed = initialValue;
            this.DistantLODData = new MaskItem<T, DistantLODData_Mask<T>>(initialValue, new DistantLODData_Mask<T>(initialValue));
            this.Charge = initialValue;
            this.Health = initialValue;
            this.LevelModifier = initialValue;
            this.Unknown = initialValue;
            this.ActionFlags = initialValue;
            this.Count = initialValue;
            this.MapMarker = new MaskItem<T, MapMarker_Mask<T>>(initialValue, new MapMarker_Mask<T>(initialValue));
            this.OpenByDefault = initialValue;
            this.RagdollData = initialValue;
            this.Scale = initialValue;
            this.ContainedSoul = initialValue;
            this.Position = initialValue;
            this.Rotation = initialValue;
        }
        #endregion

        #region Members
        public T Base;
        public MaskItem<T, TeleportDestination_Mask<T>> TeleportDestination { get; set; }
        public MaskItem<T, LockInformation_Mask<T>> Lock { get; set; }
        public MaskItem<T, Ownership_Mask<T>> Ownership { get; set; }
        public MaskItem<T, EnableParent_Mask<T>> EnableParent { get; set; }
        public T Target;
        public T SpeedTreeSeed;
        public MaskItem<T, DistantLODData_Mask<T>> DistantLODData { get; set; }
        public T Charge;
        public T Health;
        public T LevelModifier;
        public T Unknown;
        public T ActionFlags;
        public T Count;
        public MaskItem<T, MapMarker_Mask<T>> MapMarker { get; set; }
        public T OpenByDefault;
        public T RagdollData;
        public T Scale;
        public T ContainedSoul;
        public T Position;
        public T Rotation;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PlacedObject_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PlacedObject_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Base, rhs.Base)) return false;
            if (!object.Equals(this.TeleportDestination, rhs.TeleportDestination)) return false;
            if (!object.Equals(this.Lock, rhs.Lock)) return false;
            if (!object.Equals(this.Ownership, rhs.Ownership)) return false;
            if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
            if (!object.Equals(this.Target, rhs.Target)) return false;
            if (!object.Equals(this.SpeedTreeSeed, rhs.SpeedTreeSeed)) return false;
            if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
            if (!object.Equals(this.Charge, rhs.Charge)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.LevelModifier, rhs.LevelModifier)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            if (!object.Equals(this.ActionFlags, rhs.ActionFlags)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            if (!object.Equals(this.MapMarker, rhs.MapMarker)) return false;
            if (!object.Equals(this.OpenByDefault, rhs.OpenByDefault)) return false;
            if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
            if (!object.Equals(this.Scale, rhs.Scale)) return false;
            if (!object.Equals(this.ContainedSoul, rhs.ContainedSoul)) return false;
            if (!object.Equals(this.Position, rhs.Position)) return false;
            if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Base?.GetHashCode());
            ret = ret.CombineHashCode(this.TeleportDestination?.GetHashCode());
            ret = ret.CombineHashCode(this.Lock?.GetHashCode());
            ret = ret.CombineHashCode(this.Ownership?.GetHashCode());
            ret = ret.CombineHashCode(this.EnableParent?.GetHashCode());
            ret = ret.CombineHashCode(this.Target?.GetHashCode());
            ret = ret.CombineHashCode(this.SpeedTreeSeed?.GetHashCode());
            ret = ret.CombineHashCode(this.DistantLODData?.GetHashCode());
            ret = ret.CombineHashCode(this.Charge?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.LevelModifier?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(this.ActionFlags?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            ret = ret.CombineHashCode(this.MapMarker?.GetHashCode());
            ret = ret.CombineHashCode(this.OpenByDefault?.GetHashCode());
            ret = ret.CombineHashCode(this.RagdollData?.GetHashCode());
            ret = ret.CombineHashCode(this.Scale?.GetHashCode());
            ret = ret.CombineHashCode(this.ContainedSoul?.GetHashCode());
            ret = ret.CombineHashCode(this.Position?.GetHashCode());
            ret = ret.CombineHashCode(this.Rotation?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Base)) return false;
            if (TeleportDestination != null)
            {
                if (!eval(this.TeleportDestination.Overall)) return false;
                if (this.TeleportDestination.Specific != null && !this.TeleportDestination.Specific.AllEqual(eval)) return false;
            }
            if (Lock != null)
            {
                if (!eval(this.Lock.Overall)) return false;
                if (this.Lock.Specific != null && !this.Lock.Specific.AllEqual(eval)) return false;
            }
            if (Ownership != null)
            {
                if (!eval(this.Ownership.Overall)) return false;
                if (this.Ownership.Specific != null && !this.Ownership.Specific.AllEqual(eval)) return false;
            }
            if (EnableParent != null)
            {
                if (!eval(this.EnableParent.Overall)) return false;
                if (this.EnableParent.Specific != null && !this.EnableParent.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Target)) return false;
            if (!eval(this.SpeedTreeSeed)) return false;
            if (DistantLODData != null)
            {
                if (!eval(this.DistantLODData.Overall)) return false;
                if (this.DistantLODData.Specific != null && !this.DistantLODData.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Charge)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.LevelModifier)) return false;
            if (!eval(this.Unknown)) return false;
            if (!eval(this.ActionFlags)) return false;
            if (!eval(this.Count)) return false;
            if (MapMarker != null)
            {
                if (!eval(this.MapMarker.Overall)) return false;
                if (this.MapMarker.Specific != null && !this.MapMarker.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.OpenByDefault)) return false;
            if (!eval(this.RagdollData)) return false;
            if (!eval(this.Scale)) return false;
            if (!eval(this.ContainedSoul)) return false;
            if (!eval(this.Position)) return false;
            if (!eval(this.Rotation)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new PlacedObject_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PlacedObject_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PlacedObject_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Base = eval(this.Base);
            if (this.TeleportDestination != null)
            {
                obj.TeleportDestination = new MaskItem<R, TeleportDestination_Mask<R>>();
                obj.TeleportDestination.Overall = eval(this.TeleportDestination.Overall);
                if (this.TeleportDestination.Specific != null)
                {
                    obj.TeleportDestination.Specific = this.TeleportDestination.Specific.Translate(eval);
                }
            }
            if (this.Lock != null)
            {
                obj.Lock = new MaskItem<R, LockInformation_Mask<R>>();
                obj.Lock.Overall = eval(this.Lock.Overall);
                if (this.Lock.Specific != null)
                {
                    obj.Lock.Specific = this.Lock.Specific.Translate(eval);
                }
            }
            if (this.Ownership != null)
            {
                obj.Ownership = new MaskItem<R, Ownership_Mask<R>>();
                obj.Ownership.Overall = eval(this.Ownership.Overall);
                if (this.Ownership.Specific != null)
                {
                    obj.Ownership.Specific = this.Ownership.Specific.Translate(eval);
                }
            }
            if (this.EnableParent != null)
            {
                obj.EnableParent = new MaskItem<R, EnableParent_Mask<R>>();
                obj.EnableParent.Overall = eval(this.EnableParent.Overall);
                if (this.EnableParent.Specific != null)
                {
                    obj.EnableParent.Specific = this.EnableParent.Specific.Translate(eval);
                }
            }
            obj.Target = eval(this.Target);
            obj.SpeedTreeSeed = eval(this.SpeedTreeSeed);
            if (this.DistantLODData != null)
            {
                obj.DistantLODData = new MaskItem<R, DistantLODData_Mask<R>>();
                obj.DistantLODData.Overall = eval(this.DistantLODData.Overall);
                if (this.DistantLODData.Specific != null)
                {
                    obj.DistantLODData.Specific = this.DistantLODData.Specific.Translate(eval);
                }
            }
            obj.Charge = eval(this.Charge);
            obj.Health = eval(this.Health);
            obj.LevelModifier = eval(this.LevelModifier);
            obj.Unknown = eval(this.Unknown);
            obj.ActionFlags = eval(this.ActionFlags);
            obj.Count = eval(this.Count);
            if (this.MapMarker != null)
            {
                obj.MapMarker = new MaskItem<R, MapMarker_Mask<R>>();
                obj.MapMarker.Overall = eval(this.MapMarker.Overall);
                if (this.MapMarker.Specific != null)
                {
                    obj.MapMarker.Specific = this.MapMarker.Specific.Translate(eval);
                }
            }
            obj.OpenByDefault = eval(this.OpenByDefault);
            obj.RagdollData = eval(this.RagdollData);
            obj.Scale = eval(this.Scale);
            obj.ContainedSoul = eval(this.ContainedSoul);
            obj.Position = eval(this.Position);
            obj.Rotation = eval(this.Rotation);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PlacedObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PlacedObject_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PlacedObject_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Base ?? true)
                {
                    fg.AppendLine($"Base => {Base}");
                }
                if (printMask?.TeleportDestination?.Overall ?? true)
                {
                    TeleportDestination?.ToString(fg);
                }
                if (printMask?.Lock?.Overall ?? true)
                {
                    Lock?.ToString(fg);
                }
                if (printMask?.Ownership?.Overall ?? true)
                {
                    Ownership?.ToString(fg);
                }
                if (printMask?.EnableParent?.Overall ?? true)
                {
                    EnableParent?.ToString(fg);
                }
                if (printMask?.Target ?? true)
                {
                    fg.AppendLine($"Target => {Target}");
                }
                if (printMask?.SpeedTreeSeed ?? true)
                {
                    fg.AppendLine($"SpeedTreeSeed => {SpeedTreeSeed}");
                }
                if (printMask?.DistantLODData?.Overall ?? true)
                {
                    DistantLODData?.ToString(fg);
                }
                if (printMask?.Charge ?? true)
                {
                    fg.AppendLine($"Charge => {Charge}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.LevelModifier ?? true)
                {
                    fg.AppendLine($"LevelModifier => {LevelModifier}");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
                if (printMask?.ActionFlags ?? true)
                {
                    fg.AppendLine($"ActionFlags => {ActionFlags}");
                }
                if (printMask?.Count ?? true)
                {
                    fg.AppendLine($"Count => {Count}");
                }
                if (printMask?.MapMarker?.Overall ?? true)
                {
                    MapMarker?.ToString(fg);
                }
                if (printMask?.OpenByDefault ?? true)
                {
                    fg.AppendLine($"OpenByDefault => {OpenByDefault}");
                }
                if (printMask?.RagdollData ?? true)
                {
                    fg.AppendLine($"RagdollData => {RagdollData}");
                }
                if (printMask?.Scale ?? true)
                {
                    fg.AppendLine($"Scale => {Scale}");
                }
                if (printMask?.ContainedSoul ?? true)
                {
                    fg.AppendLine($"ContainedSoul => {ContainedSoul}");
                }
                if (printMask?.Position ?? true)
                {
                    fg.AppendLine($"Position => {Position}");
                }
                if (printMask?.Rotation ?? true)
                {
                    fg.AppendLine($"Rotation => {Rotation}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PlacedObject_ErrorMask : Placed_ErrorMask, IErrorMask<PlacedObject_ErrorMask>
    {
        #region Members
        public Exception Base;
        public MaskItem<Exception, TeleportDestination_ErrorMask> TeleportDestination;
        public MaskItem<Exception, LockInformation_ErrorMask> Lock;
        public MaskItem<Exception, Ownership_ErrorMask> Ownership;
        public MaskItem<Exception, EnableParent_ErrorMask> EnableParent;
        public Exception Target;
        public Exception SpeedTreeSeed;
        public MaskItem<Exception, DistantLODData_ErrorMask> DistantLODData;
        public Exception Charge;
        public Exception Health;
        public Exception LevelModifier;
        public Exception Unknown;
        public Exception ActionFlags;
        public Exception Count;
        public MaskItem<Exception, MapMarker_ErrorMask> MapMarker;
        public Exception OpenByDefault;
        public Exception RagdollData;
        public Exception Scale;
        public Exception ContainedSoul;
        public Exception Position;
        public Exception Rotation;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    this.Base = ex;
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    this.TeleportDestination = new MaskItem<Exception, TeleportDestination_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Lock:
                    this.Lock = new MaskItem<Exception, LockInformation_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Ownership:
                    this.Ownership = new MaskItem<Exception, Ownership_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    this.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Target:
                    this.Target = ex;
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    this.SpeedTreeSeed = ex;
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    this.DistantLODData = new MaskItem<Exception, DistantLODData_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.Charge:
                    this.Charge = ex;
                    break;
                case PlacedObject_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    this.LevelModifier = ex;
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    this.ActionFlags = ex;
                    break;
                case PlacedObject_FieldIndex.Count:
                    this.Count = ex;
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    this.MapMarker = new MaskItem<Exception, MapMarker_ErrorMask>(ex, null);
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    this.OpenByDefault = ex;
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    this.RagdollData = ex;
                    break;
                case PlacedObject_FieldIndex.Scale:
                    this.Scale = ex;
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    this.ContainedSoul = ex;
                    break;
                case PlacedObject_FieldIndex.Position:
                    this.Position = ex;
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    this.Rotation = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    this.Base = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.TeleportDestination:
                    this.TeleportDestination = (MaskItem<Exception, TeleportDestination_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Lock:
                    this.Lock = (MaskItem<Exception, LockInformation_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Ownership:
                    this.Ownership = (MaskItem<Exception, Ownership_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.EnableParent:
                    this.EnableParent = (MaskItem<Exception, EnableParent_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Target:
                    this.Target = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    this.SpeedTreeSeed = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.DistantLODData:
                    this.DistantLODData = (MaskItem<Exception, DistantLODData_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.Charge:
                    this.Charge = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.LevelModifier:
                    this.LevelModifier = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.ActionFlags:
                    this.ActionFlags = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Count:
                    this.Count = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.MapMarker:
                    this.MapMarker = (MaskItem<Exception, MapMarker_ErrorMask>)obj;
                    break;
                case PlacedObject_FieldIndex.OpenByDefault:
                    this.OpenByDefault = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.RagdollData:
                    this.RagdollData = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Scale:
                    this.Scale = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.ContainedSoul:
                    this.ContainedSoul = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Position:
                    this.Position = (Exception)obj;
                    break;
                case PlacedObject_FieldIndex.Rotation:
                    this.Rotation = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Base != null) return true;
            if (TeleportDestination != null) return true;
            if (Lock != null) return true;
            if (Ownership != null) return true;
            if (EnableParent != null) return true;
            if (Target != null) return true;
            if (SpeedTreeSeed != null) return true;
            if (DistantLODData != null) return true;
            if (Charge != null) return true;
            if (Health != null) return true;
            if (LevelModifier != null) return true;
            if (Unknown != null) return true;
            if (ActionFlags != null) return true;
            if (Count != null) return true;
            if (MapMarker != null) return true;
            if (OpenByDefault != null) return true;
            if (RagdollData != null) return true;
            if (Scale != null) return true;
            if (ContainedSoul != null) return true;
            if (Position != null) return true;
            if (Rotation != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("PlacedObject_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Base => {Base}");
            TeleportDestination?.ToString(fg);
            Lock?.ToString(fg);
            Ownership?.ToString(fg);
            EnableParent?.ToString(fg);
            fg.AppendLine($"Target => {Target}");
            fg.AppendLine($"SpeedTreeSeed => {SpeedTreeSeed}");
            DistantLODData?.ToString(fg);
            fg.AppendLine($"Charge => {Charge}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"LevelModifier => {LevelModifier}");
            fg.AppendLine($"Unknown => {Unknown}");
            fg.AppendLine($"ActionFlags => {ActionFlags}");
            fg.AppendLine($"Count => {Count}");
            MapMarker?.ToString(fg);
            fg.AppendLine($"OpenByDefault => {OpenByDefault}");
            fg.AppendLine($"RagdollData => {RagdollData}");
            fg.AppendLine($"Scale => {Scale}");
            fg.AppendLine($"ContainedSoul => {ContainedSoul}");
            fg.AppendLine($"Position => {Position}");
            fg.AppendLine($"Rotation => {Rotation}");
        }
        #endregion

        #region Combine
        public PlacedObject_ErrorMask Combine(PlacedObject_ErrorMask rhs)
        {
            var ret = new PlacedObject_ErrorMask();
            ret.Base = this.Base.Combine(rhs.Base);
            ret.TeleportDestination = new MaskItem<Exception, TeleportDestination_ErrorMask>(this.TeleportDestination.Overall.Combine(rhs.TeleportDestination.Overall), ((IErrorMask<TeleportDestination_ErrorMask>)this.TeleportDestination.Specific).Combine(rhs.TeleportDestination.Specific));
            ret.Lock = new MaskItem<Exception, LockInformation_ErrorMask>(this.Lock.Overall.Combine(rhs.Lock.Overall), ((IErrorMask<LockInformation_ErrorMask>)this.Lock.Specific).Combine(rhs.Lock.Specific));
            ret.Ownership = new MaskItem<Exception, Ownership_ErrorMask>(this.Ownership.Overall.Combine(rhs.Ownership.Overall), ((IErrorMask<Ownership_ErrorMask>)this.Ownership.Specific).Combine(rhs.Ownership.Specific));
            ret.EnableParent = new MaskItem<Exception, EnableParent_ErrorMask>(this.EnableParent.Overall.Combine(rhs.EnableParent.Overall), ((IErrorMask<EnableParent_ErrorMask>)this.EnableParent.Specific).Combine(rhs.EnableParent.Specific));
            ret.Target = this.Target.Combine(rhs.Target);
            ret.SpeedTreeSeed = this.SpeedTreeSeed.Combine(rhs.SpeedTreeSeed);
            ret.DistantLODData = new MaskItem<Exception, DistantLODData_ErrorMask>(this.DistantLODData.Overall.Combine(rhs.DistantLODData.Overall), ((IErrorMask<DistantLODData_ErrorMask>)this.DistantLODData.Specific).Combine(rhs.DistantLODData.Specific));
            ret.Charge = this.Charge.Combine(rhs.Charge);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.LevelModifier = this.LevelModifier.Combine(rhs.LevelModifier);
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            ret.ActionFlags = this.ActionFlags.Combine(rhs.ActionFlags);
            ret.Count = this.Count.Combine(rhs.Count);
            ret.MapMarker = new MaskItem<Exception, MapMarker_ErrorMask>(this.MapMarker.Overall.Combine(rhs.MapMarker.Overall), ((IErrorMask<MapMarker_ErrorMask>)this.MapMarker.Specific).Combine(rhs.MapMarker.Specific));
            ret.OpenByDefault = this.OpenByDefault.Combine(rhs.OpenByDefault);
            ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
            ret.Scale = this.Scale.Combine(rhs.Scale);
            ret.ContainedSoul = this.ContainedSoul.Combine(rhs.ContainedSoul);
            ret.Position = this.Position.Combine(rhs.Position);
            ret.Rotation = this.Rotation.Combine(rhs.Rotation);
            return ret;
        }
        public static PlacedObject_ErrorMask Combine(PlacedObject_ErrorMask lhs, PlacedObject_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class PlacedObject_CopyMask : Placed_CopyMask
    {
        #region Members
        public bool Base;
        public MaskItem<CopyOption, TeleportDestination_CopyMask> TeleportDestination;
        public MaskItem<CopyOption, LockInformation_CopyMask> Lock;
        public MaskItem<CopyOption, Ownership_CopyMask> Ownership;
        public MaskItem<CopyOption, EnableParent_CopyMask> EnableParent;
        public bool Target;
        public bool SpeedTreeSeed;
        public MaskItem<CopyOption, DistantLODData_CopyMask> DistantLODData;
        public bool Charge;
        public bool Health;
        public bool LevelModifier;
        public bool Unknown;
        public bool ActionFlags;
        public bool Count;
        public MaskItem<CopyOption, MapMarker_CopyMask> MapMarker;
        public bool OpenByDefault;
        public bool RagdollData;
        public bool Scale;
        public bool ContainedSoul;
        public bool Position;
        public bool Rotation;
        #endregion

    }
    #endregion




    #endregion

}
