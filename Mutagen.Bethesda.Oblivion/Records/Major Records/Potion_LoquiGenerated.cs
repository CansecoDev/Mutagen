/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Potion :
        ItemAbstract,
        IPotionInternal,
        ILoquiObjectSetter<Potion>,
        INamed,
        ILinkSubContainer,
        IEquatable<Potion>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Potion_Registration.Instance;
        public new static Potion_Registration Registration => Potion_Registration.Instance;
        protected override object CommonInstance => PotionCommon.Instance;

        #region Ctor
        protected Potion()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Potion_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Potion_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IPotionGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IPotionGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Potion_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Model
        public bool Model_IsSet
        {
            get => _hasBeenSetTracker[(int)Potion_FieldIndex.Model];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Potion_FieldIndex.Model, nameof(Model_IsSet));
        }
        bool IPotionGetter.Model_IsSet => Model_IsSet;
        private Model _Model;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Model Model
        {
            get => _Model;
            set => Model_Set(value);
        }
        public void Model_Set(
            Model value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Model, value, _hasBeenSetTracker, hasBeenSet, (int)Potion_FieldIndex.Model, nameof(Model), nameof(Model_IsSet));
        }
        public void Model_Unset()
        {
            this.Model_Set(default(Model), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter IPotionGetter.Model => this.Model;
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Potion_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Potion_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool IPotionGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String IPotionGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)Potion_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region Script
        public IFormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Script> IPotion.Script_Property => this.Script_Property;
        IScriptInternalGetter IPotionGetter.Script => this.Script_Property.Item;
        IFormIDSetLinkGetter<Script> IPotionGetter.Script_Property => this.Script_Property;
        #endregion
        #region Weight
        public bool Weight_IsSet
        {
            get => _hasBeenSetTracker[(int)Potion_FieldIndex.Weight];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Potion_FieldIndex.Weight, nameof(Weight_IsSet));
        }
        bool IPotionGetter.Weight_IsSet => Weight_IsSet;
        private Single _Weight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Weight
        {
            get => this._Weight;
            set => Weight_Set(value);
        }
        Single IPotionGetter.Weight => this.Weight;
        public void Weight_Set(
            Single value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Weight, value, _hasBeenSetTracker, markSet, (int)Potion_FieldIndex.Weight, nameof(Weight), nameof(Weight_IsSet));
        }
        public void Weight_Unset()
        {
            this.Weight_Set(default(Single), false);
        }
        #endregion
        #region Value
        private UInt32 _Value;
        public UInt32 Value
        {
            get => this._Value;
            set
            {
                this.ENITDataTypeState |= ENITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Value, value, nameof(Value));
            }
        }
        #endregion
        #region Flags
        private IngredientFlag _Flags;
        public IngredientFlag Flags
        {
            get => this._Flags;
            set
            {
                this.ENITDataTypeState |= ENITDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Effect> _Effects = new SourceSetList<Effect>();
        public ISourceSetList<Effect> Effects => _Effects;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Effect> IPotion.Effects => _Effects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IEffectInternalGetter> IPotionGetter.Effects => _Effects;
        #endregion

        #endregion
        #region ENITDataTypeState
        private Potion.ENITDataType _ENITDataTypeState;
        public Potion.ENITDataType ENITDataTypeState
        {
            get => this._ENITDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._ENITDataTypeState, value, nameof(ENITDataTypeState));
        }
        Potion.ENITDataType IPotionInternal.ENITDataTypeState
        {
            get => this.ENITDataTypeState;
            set => this.ENITDataTypeState = value;
        }
        Potion.ENITDataType IPotionInternalGetter.ENITDataTypeState
        {
            get => this.ENITDataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPotionInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            PotionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Potion rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Potion rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!string.Equals(this.Name, rhs.Name)) return false;
            }
            if (Model_IsSet != rhs.Model_IsSet) return false;
            if (Model_IsSet)
            {
                if (!object.Equals(this.Model, rhs.Model)) return false;
            }
            if (Icon_IsSet != rhs.Icon_IsSet) return false;
            if (Icon_IsSet)
            {
                if (!string.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (Weight_IsSet != rhs.Weight_IsSet) return false;
            if (Weight_IsSet)
            {
                if (!this.Weight.EqualsWithin(rhs.Weight)) return false;
            }
            if (this.Value != rhs.Value) return false;
            if (this.Flags != rhs.Flags) return false;
            if (Effects.HasBeenSet != rhs.Effects.HasBeenSet) return false;
            if (Effects.HasBeenSet)
            {
                if (!this.Effects.SequenceEqual(rhs.Effects)) return false;
            }
            if (this.ENITDataTypeState != rhs.ENITDataTypeState) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Model_IsSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Weight_IsSet)
            {
                ret = HashHelper.GetHashCode(Weight).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            if (Effects.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Effects).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(ENITDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override object XmlWriteTranslator => PotionXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Potion CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Potion_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Potion CreateFromXml(
            XElement node,
            out Potion_ErrorMask errorMask,
            bool doMasks = true,
            Potion_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Potion_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Potion CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Potion() : null;
                    break;
                default:
                    break;
            }
            var ret = new Potion();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    PotionXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Potion CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Potion_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Potion CreateFromXml(
            string path,
            out Potion_ErrorMask errorMask,
            Potion_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Potion CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Potion_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Potion CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Potion_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Potion CreateFromXml(
            Stream stream,
            out Potion_ErrorMask errorMask,
            Potion_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Potion CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Potion_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Potion item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasENITDataType":
                    item.ENITDataTypeState |= Potion.ENITDataType.Has;
                    break;
                default:
                    ItemAbstract.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Potion_FieldIndex)index)
            {
                case Potion_FieldIndex.Name:
                case Potion_FieldIndex.Model:
                case Potion_FieldIndex.Icon:
                case Potion_FieldIndex.Weight:
                    return _hasBeenSetTracker[index];
                case Potion_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case Potion_FieldIndex.Effects:
                    return Effects.HasBeenSet;
                case Potion_FieldIndex.Value:
                case Potion_FieldIndex.Flags:
                case Potion_FieldIndex.ENITDataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Potion_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum ENITDataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            foreach (var item in Effects.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            Script_Property.Link(
                modList,
                sourceMod);
            foreach (var item in Effects.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        public Potion(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Potion(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(Potion obj, Potion rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Potion(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => PotionBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Potion CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Potion CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Potion_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Potion_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Potion CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Potion>(
                record: new Potion(),
                frame: frame,
                errorMask: errorMask,
                recType: Potion_Registration.ALCH_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Potion item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ItemAbstract.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Potion item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Potion_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    try
                    {
                        errorMask?.PushIndex((int)Potion_FieldIndex.Model);
                        item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Potion_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Potion_FieldIndex.Icon);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Script_Property);
                    return TryGet<int?>.Succeed((int)Potion_FieldIndex.Script);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Single WeightParse))
                    {
                        item.Weight = WeightParse;
                    }
                    else
                    {
                        item.Weight = default(Single);
                    }
                    return TryGet<int?>.Succeed((int)Potion_FieldIndex.Weight);
                }
                case 0x54494E45: // ENIT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.ENITDataTypeState = ENITDataType.Has;
                    }
                    item.Value = dataFrame.ReadUInt32();
                    if (EnumBinaryTranslation<IngredientFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out IngredientFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(IngredientFlag);
                    }
                    return TryGet<int?>.Succeed((int)Potion_FieldIndex.Flags);
                }
                case 0x44494645: // EFID
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Potion_Registration.EFID_HEADER,
                        item: item.Effects,
                        fieldIndex: (int)Potion_FieldIndex.Effects,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Effect listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Effect>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Potion_FieldIndex.Effects);
                }
                default:
                    return ItemAbstract.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Potion Copy(
            Potion_CopyMask copyMask = null,
            Potion def = null)
        {
            return Potion.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Potion Copy(
            Potion item,
            Potion_CopyMask copyMask = null,
            Potion def = null)
        {
            Potion ret;
            if (item.GetType().Equals(typeof(Potion)))
            {
                ret = new Potion();
            }
            else
            {
                ret = (Potion)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Potion Copy_ToLoqui(
            Potion item,
            Potion_CopyMask copyMask = null,
            Potion def = null)
        {
            Potion ret;
            if (item.GetType().Equals(typeof(Potion)))
            {
                ret = new Potion() as Potion;
            }
            else
            {
                ret = (Potion)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Potion rhs,
            Potion_CopyMask copyMask,
            Potion def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Potion rhs,
            out Potion_ErrorMask errorMask,
            Potion_CopyMask copyMask = null,
            Potion def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PotionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Potion_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Potion rhs,
            ErrorMaskBuilder errorMask,
            Potion_CopyMask copyMask = null,
            Potion def = null)
        {
            PotionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Potion_FieldIndex.Model:
                    this.Model = (Model)obj;
                    break;
                case Potion_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case Potion_FieldIndex.Script:
                    this.Script_Property.Set((IFormIDSetLink<Script>)obj);
                    break;
                case Potion_FieldIndex.Weight:
                    this.Weight = (Single)obj;
                    break;
                case Potion_FieldIndex.Value:
                    this.Value = (UInt32)obj;
                    break;
                case Potion_FieldIndex.Flags:
                    this.Flags = (IngredientFlag)obj;
                    break;
                case Potion_FieldIndex.Effects:
                    this._Effects.SetTo((IEnumerable<Effect>)obj);
                    break;
                case Potion_FieldIndex.ENITDataTypeState:
                    this.ENITDataTypeState = (Potion.ENITDataType)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            PotionCommon.Instance.Clear(this);
        }

        public new static Potion Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Potion();
            foreach (var pair in fields)
            {
                CopyInInternal_Potion(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Potion(Potion obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Potion_FieldIndex enu))
            {
                CopyInInternal_ItemAbstract(obj, pair);
            }
            switch (enu)
            {
                case Potion_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Potion_FieldIndex.Model:
                    obj.Model = (Model)pair.Value;
                    break;
                case Potion_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case Potion_FieldIndex.Script:
                    obj.Script_Property.Set((IFormIDSetLink<Script>)pair.Value);
                    break;
                case Potion_FieldIndex.Weight:
                    obj.Weight = (Single)pair.Value;
                    break;
                case Potion_FieldIndex.Value:
                    obj.Value = (UInt32)pair.Value;
                    break;
                case Potion_FieldIndex.Flags:
                    obj.Flags = (IngredientFlag)pair.Value;
                    break;
                case Potion_FieldIndex.Effects:
                    obj._Effects.SetTo((IEnumerable<Effect>)pair.Value);
                    break;
                case Potion_FieldIndex.ENITDataTypeState:
                    obj.ENITDataTypeState = (Potion.ENITDataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IPotion :
        IPotionInternalGetter,
        IItemAbstract,
        ILoquiObjectSetter<IPotionInternal>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new Model Model { get; set; }
        new bool Model_IsSet { get; set; }
        void Model_Set(Model value, bool hasBeenSet = true);
        void Model_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new Single Weight { get; set; }
        new bool Weight_IsSet { get; set; }
        void Weight_Set(Single value, bool hasBeenSet = true);
        void Weight_Unset();

        new UInt32 Value { get; set; }

        new IngredientFlag Flags { get; set; }

        new ISetList<Effect> Effects { get; }
        void CopyFieldsFrom(
            Potion rhs,
            ErrorMaskBuilder errorMask = null,
            Potion_CopyMask copyMask = null,
            Potion def = null);
    }

    public partial interface IPotionInternal :
        IItemAbstractInternal,
        IPotion,
        IPotionInternalGetter
    {
        new Script Script { get; set; }
        new IFormIDSetLink<Script> Script_Property { get; }
        new Potion.ENITDataType ENITDataTypeState { get; set; }

    }

    public partial interface IPotionGetter :
        IItemAbstractGetter,
        ILoquiObject<IPotionInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Model
        IModelGetter Model { get; }
        bool Model_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region Script
        IScriptInternalGetter Script { get; }
        IFormIDSetLinkGetter<Script> Script_Property { get; }

        #endregion
        #region Weight
        Single Weight { get; }
        bool Weight_IsSet { get; }

        #endregion
        #region Value
        UInt32 Value { get; }

        #endregion
        #region Flags
        IngredientFlag Flags { get; }

        #endregion
        #region Effects
        IReadOnlySetList<IEffectInternalGetter> Effects { get; }
        #endregion

    }

    public partial interface IPotionInternalGetter :
        IItemAbstractInternalGetter,
        IPotionGetter
    {
        #region ENITDataTypeState
        Potion.ENITDataType ENITDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class PotionMixIn
    {
        public static void Clear(this IPotionInternal item)
        {
            ((PotionCommon)item.CommonInstance).Clear(item: item);
        }

        public static Potion_Mask<bool> GetEqualsMask(
            this IPotionInternalGetter item,
            IPotionInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PotionCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPotionInternalGetter item,
            string name = null,
            Potion_Mask<bool> printMask = null)
        {
            return ((PotionCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPotionInternalGetter item,
            FileGeneration fg,
            string name = null,
            Potion_Mask<bool> printMask = null)
        {
            ((PotionCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPotionInternalGetter item,
            Potion_Mask<bool?> checkMask)
        {
            return ((PotionCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Potion_Mask<bool> GetHasBeenSetMask(this IPotionInternalGetter item)
        {
            var ret = new Potion_Mask<bool>();
            ((PotionCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Potion_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Icon = 7,
        Script = 8,
        Weight = 9,
        Value = 10,
        Flags = 11,
        Effects = 12,
        ENITDataTypeState = 13,
    }
    #endregion

    #region Registration
    public class Potion_Registration : ILoquiRegistration
    {
        public static readonly Potion_Registration Instance = new Potion_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 98,
            version: 0);

        public const string GUID = "f28ef4d6-1e08-4aab-a73e-af679ad7a30f";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Potion_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Potion_ErrorMask);

        public static readonly Type ClassType = typeof(Potion);

        public static readonly Type GetterType = typeof(IPotionGetter);

        public static readonly Type InternalGetterType = typeof(IPotionInternalGetter);

        public static readonly Type SetterType = typeof(IPotion);

        public static readonly Type InternalSetterType = typeof(IPotionInternal);

        public static readonly Type CommonType = typeof(PotionCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Potion";

        public const string Name = "Potion";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Potion_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Potion_FieldIndex.Model;
                case "ICON":
                    return (ushort)Potion_FieldIndex.Icon;
                case "SCRIPT":
                    return (ushort)Potion_FieldIndex.Script;
                case "WEIGHT":
                    return (ushort)Potion_FieldIndex.Weight;
                case "VALUE":
                    return (ushort)Potion_FieldIndex.Value;
                case "FLAGS":
                    return (ushort)Potion_FieldIndex.Flags;
                case "EFFECTS":
                    return (ushort)Potion_FieldIndex.Effects;
                case "ENITDATATYPESTATE":
                    return (ushort)Potion_FieldIndex.ENITDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Effects:
                    return true;
                case Potion_FieldIndex.Name:
                case Potion_FieldIndex.Model:
                case Potion_FieldIndex.Icon:
                case Potion_FieldIndex.Script:
                case Potion_FieldIndex.Weight:
                case Potion_FieldIndex.Value:
                case Potion_FieldIndex.Flags:
                case Potion_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Model:
                case Potion_FieldIndex.Effects:
                    return true;
                case Potion_FieldIndex.Name:
                case Potion_FieldIndex.Icon:
                case Potion_FieldIndex.Script:
                case Potion_FieldIndex.Weight:
                case Potion_FieldIndex.Value:
                case Potion_FieldIndex.Flags:
                case Potion_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Name:
                case Potion_FieldIndex.Model:
                case Potion_FieldIndex.Icon:
                case Potion_FieldIndex.Script:
                case Potion_FieldIndex.Weight:
                case Potion_FieldIndex.Value:
                case Potion_FieldIndex.Flags:
                case Potion_FieldIndex.Effects:
                case Potion_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Name:
                    return "Name";
                case Potion_FieldIndex.Model:
                    return "Model";
                case Potion_FieldIndex.Icon:
                    return "Icon";
                case Potion_FieldIndex.Script:
                    return "Script";
                case Potion_FieldIndex.Weight:
                    return "Weight";
                case Potion_FieldIndex.Value:
                    return "Value";
                case Potion_FieldIndex.Flags:
                    return "Flags";
                case Potion_FieldIndex.Effects:
                    return "Effects";
                case Potion_FieldIndex.ENITDataTypeState:
                    return "ENITDataTypeState";
                default:
                    return ItemAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Name:
                case Potion_FieldIndex.Model:
                case Potion_FieldIndex.Icon:
                case Potion_FieldIndex.Script:
                case Potion_FieldIndex.Weight:
                case Potion_FieldIndex.Value:
                case Potion_FieldIndex.Flags:
                case Potion_FieldIndex.Effects:
                case Potion_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Name:
                case Potion_FieldIndex.Model:
                case Potion_FieldIndex.Icon:
                case Potion_FieldIndex.Script:
                case Potion_FieldIndex.Weight:
                case Potion_FieldIndex.Value:
                case Potion_FieldIndex.Flags:
                case Potion_FieldIndex.Effects:
                case Potion_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Name:
                    return typeof(String);
                case Potion_FieldIndex.Model:
                    return typeof(Model);
                case Potion_FieldIndex.Icon:
                    return typeof(String);
                case Potion_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case Potion_FieldIndex.Weight:
                    return typeof(Single);
                case Potion_FieldIndex.Value:
                    return typeof(UInt32);
                case Potion_FieldIndex.Flags:
                    return typeof(IngredientFlag);
                case Potion_FieldIndex.Effects:
                    return typeof(SourceSetList<Effect>);
                case Potion_FieldIndex.ENITDataTypeState:
                    return typeof(Potion.ENITDataType);
                default:
                    return ItemAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PotionXmlWriteTranslation);
        public static readonly RecordType ALCH_HEADER = new RecordType("ALCH");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType ENIT_HEADER = new RecordType("ENIT");
        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ALCH_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        public static readonly Type BinaryWriteTranslation = typeof(PotionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PotionCommon : ItemAbstractCommon
    {
        public static readonly PotionCommon Instance = new PotionCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Potion item,
            Potion rhs,
            Potion def,
            ErrorMaskBuilder errorMask,
            Potion_CopyMask copyMask)
        {
            ItemAbstractCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Potion_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Potion_FieldIndex.Model);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Model,
                        rhsHasBeenSet: rhs.Model_IsSet,
                        defItem: def?.Model,
                        defHasBeenSet: def?.Model_IsSet ?? false,
                        outRhsItem: out var rhsModelItem,
                        outDefItem: out var defModelItem))
                    {
                        switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ModelCommon.CopyFieldsFrom(
                                    item: item.Model,
                                    rhs: rhs.Model,
                                    def: def?.Model,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Model.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Model = Model.Copy(
                                    rhsModelItem,
                                    copyMask?.Model?.Specific,
                                    def: defModelItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Model_Set(
                            value: default(Model),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Potion_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)Potion_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetLink(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Weight ?? true)
            {
                errorMask?.PushIndex((int)Potion_FieldIndex.Weight);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Weight,
                        rhsHasBeenSet: rhs.Weight_IsSet,
                        defItem: def?.Weight ?? default(Single),
                        defHasBeenSet: def?.Weight_IsSet ?? false,
                        outRhsItem: out var rhsWeightItem,
                        outDefItem: out var defWeightItem))
                    {
                        item.Weight = rhsWeightItem;
                    }
                    else
                    {
                        item.Weight_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Value ?? true)
            {
                errorMask?.PushIndex((int)Potion_FieldIndex.Value);
                try
                {
                    item.Value = rhs.Value;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Potion_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Effects.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Potion_FieldIndex.Effects);
                try
                {
                    item.Effects.SetToWithDefault<Effect, Effect>(
                        rhs: rhs.Effects,
                        def: def?.Effects,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Effects.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (Effect)r;
                                case CopyOption.MakeCopy:
                                    return Effect.Copy(
                                        r,
                                        copyMask?.Effects?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Effects.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IPotionInternal item)
        {
            ClearPartial();
            item.Name_Unset();
            item.Model_Unset();
            item.Icon_Unset();
            item.Script_Property.Unset();
            item.Weight_Unset();
            item.Value = default(UInt32);
            item.Flags = default(IngredientFlag);
            item.Effects.Unset();
            base.Clear(item);
        }

        public override void Clear(IItemAbstractInternal item)
        {
            Clear(item: (IPotionInternal)item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPotionInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPotionInternal)item);
        }

        public Potion_Mask<bool> GetEqualsMask(
            IPotionInternalGetter item,
            IPotionInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Potion_Mask<bool>();
            ((PotionCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IPotionInternalGetter item,
            IPotionInternalGetter rhs,
            Potion_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model_IsSet,
                rhs.Model_IsSet,
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.Script = item.Script_Property.FormKey == rhs.Script_Property.FormKey;
            ret.Weight = item.Weight_IsSet == rhs.Weight_IsSet && item.Weight.EqualsWithin(rhs.Weight);
            ret.Value = item.Value == rhs.Value;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IPotionInternalGetter item,
            string name = null,
            Potion_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IPotionInternalGetter item,
            FileGeneration fg,
            string name = null,
            Potion_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Potion =>");
            }
            else
            {
                fg.AppendLine($"{name} (Potion) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IPotionInternalGetter item,
            FileGeneration fg,
            Potion_Mask<bool> printMask = null)
        {
            ItemAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script_Property}");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendLine($"Weight => {item.Weight}");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendLine($"Value => {item.Value}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Effects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.ENITDataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IPotionInternalGetter item,
            Potion_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_IsSet) return false;
            if (checkMask.Model.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Weight.HasValue && checkMask.Weight.Value != item.Weight_IsSet) return false;
            if (checkMask.Effects.Overall.HasValue && checkMask.Effects.Overall.Value != item.Effects.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IPotionInternalGetter item,
            Potion_Mask<bool> mask)
        {
            mask.Name = item.Name_IsSet;
            mask.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_IsSet, item.Model.GetHasBeenSetMask());
            mask.Icon = item.Icon_IsSet;
            mask.Script = item.Script_Property.HasBeenSet;
            mask.Weight = item.Weight_IsSet;
            mask.Value = true;
            mask.Flags = true;
            mask.Effects = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Effect_Mask<bool>>>>(item.Effects.HasBeenSet, item.Effects.WithIndex().Select((i) => new MaskItemIndexed<bool, Effect_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.ENITDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Potion_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (Potion_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormKey:
                    return (Potion_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (Potion_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (Potion_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Potion_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Potion_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Potion_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Potion_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Potion_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Potion_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Potion_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Potion_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Potion_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Potion_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Potion_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Potion_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class PotionXmlWriteTranslation :
        ItemAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static PotionXmlWriteTranslation Instance = new PotionXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPotionInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            ItemAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Potion_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Potion_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Model_IsSet
                && (translationMask?.GetShouldTranslate((int)Potion_FieldIndex.Model) ?? true))
            {
                ((ModelXmlWriteTranslation)((IXmlItem)item.Model).XmlWriteTranslator).Write(
                    item: item.Model,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Potion_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Potion_FieldIndex.Model));
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Potion_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Potion_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Potion_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormKey,
                    fieldIndex: (int)Potion_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Weight_IsSet
                && (translationMask?.GetShouldTranslate((int)Potion_FieldIndex.Weight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Weight),
                    item: item.Weight,
                    fieldIndex: (int)Potion_FieldIndex.Weight,
                    errorMask: errorMask);
            }
            if (item.ENITDataTypeState.HasFlag(Potion.ENITDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Potion_FieldIndex.Value) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Value),
                        item: item.Value,
                        fieldIndex: (int)Potion_FieldIndex.Value,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Potion_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<IngredientFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Potion_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if (item.Effects.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Potion_FieldIndex.Effects) ?? true))
            {
                ListXmlTranslation<IEffectInternalGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Effects),
                    item: item.Effects,
                    fieldIndex: (int)Potion_FieldIndex.Effects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Potion_FieldIndex.Effects),
                    transl: (XElement subNode, IEffectInternalGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        ((EffectXmlWriteTranslation)((IXmlItem)subItem).XmlWriteTranslator).Write(
                            item: subItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Potion_FieldIndex.ENITDataTypeState) ?? true))
            {
                EnumXmlTranslation<Potion.ENITDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.ENITDataTypeState),
                    item: item.ENITDataTypeState,
                    fieldIndex: (int)Potion_FieldIndex.ENITDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IPotionInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Potion");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Potion");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPotionInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IItemAbstractInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPotionInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPotionInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPotionInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class PotionXmlCreateTranslation : ItemAbstractXmlCreateTranslation
    {
        public new readonly static PotionXmlCreateTranslation Instance = new PotionXmlCreateTranslation();

        public static void FillPublicXml(
            IPotionInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PotionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPotionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Potion_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Potion_FieldIndex.Model);
                        if (LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            item: out Model ModelParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Potion_FieldIndex.Model)))
                        {
                            item.Model = ModelParse;
                        }
                        else
                        {
                            item.Model = default(Model);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Potion_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Script_Property,
                        fieldIndex: (int)Potion_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "Weight":
                    try
                    {
                        errorMask?.PushIndex((int)Potion_FieldIndex.Weight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WeightParse,
                            errorMask: errorMask))
                        {
                            item.Weight = WeightParse;
                        }
                        else
                        {
                            item.Weight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    try
                    {
                        errorMask?.PushIndex((int)Potion_FieldIndex.Value);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 ValueParse,
                            errorMask: errorMask))
                        {
                            item.Value = ValueParse;
                        }
                        else
                        {
                            item.Value = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.ENITDataTypeState |= Potion.ENITDataType.Has;
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Potion_FieldIndex.Flags);
                        if (EnumXmlTranslation<IngredientFlag>.Instance.Parse(
                            node: node,
                            item: out IngredientFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(IngredientFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Effects":
                    try
                    {
                        errorMask?.PushIndex((int)Potion_FieldIndex.Effects);
                        if (ListXmlTranslation<Effect>.Instance.Parse(
                            node: node,
                            enumer: out var EffectsItem,
                            transl: LoquiXmlTranslation<Effect>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Effects.SetTo(EffectsItem);
                        }
                        else
                        {
                            item.Effects.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ENITDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Potion_FieldIndex.ENITDataTypeState);
                        if (EnumXmlTranslation<Potion.ENITDataType>.Instance.Parse(
                            node: node,
                            item: out Potion.ENITDataType ENITDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.ENITDataTypeState = ENITDataTypeStateParse;
                        }
                        else
                        {
                            item.ENITDataTypeState = default(Potion.ENITDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ItemAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class PotionXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPotionInternalGetter item,
            XElement node,
            out Potion_ErrorMask errorMask,
            bool doMasks = true,
            Potion_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PotionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Potion_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPotionInternalGetter item,
            string path,
            out Potion_ErrorMask errorMask,
            Potion_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPotionInternalGetter item,
            Stream stream,
            out Potion_ErrorMask errorMask,
            Potion_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Potion_Mask<T> : ItemAbstract_Mask<T>, IMask<T>, IEquatable<Potion_Mask<T>>
    {
        #region Ctors
        public Potion_Mask()
        {
        }

        public Potion_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.Script = initialValue;
            this.Weight = initialValue;
            this.Value = initialValue;
            this.Flags = initialValue;
            this.Effects = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Effect_Mask<T>>>>(initialValue, null);
            this.ENITDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public T Script;
        public T Weight;
        public T Value;
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Effect_Mask<T>>>> Effects;
        public T ENITDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Potion_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Potion_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Effects, rhs.Effects)) return false;
            if (!object.Equals(this.ENITDataTypeState, rhs.ENITDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Effects?.GetHashCode());
            ret = ret.CombineHashCode(this.ENITDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Flags)) return false;
            if (this.Effects != null)
            {
                if (!eval(this.Effects.Overall)) return false;
                if (this.Effects.Specific != null)
                {
                    foreach (var item in this.Effects.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.ENITDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Potion_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Potion_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Potion_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            obj.Script = eval(this.Script);
            obj.Weight = eval(this.Weight);
            obj.Value = eval(this.Value);
            obj.Flags = eval(this.Flags);
            if (Effects != null)
            {
                obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect_Mask<R>>>>();
                obj.Effects.Overall = eval(this.Effects.Overall);
                if (Effects.Specific != null)
                {
                    List<MaskItemIndexed<R, Effect_Mask<R>>> l = new List<MaskItemIndexed<R, Effect_Mask<R>>>();
                    obj.Effects.Specific = l;
                    foreach (var item in Effects.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Effect_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Effect_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.ENITDataTypeState = eval(this.ENITDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Effects.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Potion_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Potion_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Potion_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Effects?.Overall ?? true)
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Effects.Overall != null)
                        {
                            fg.AppendLine(Effects.Overall.ToString());
                        }
                        if (Effects.Specific != null)
                        {
                            foreach (var subItem in Effects.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.ENITDataTypeState ?? true)
                {
                    fg.AppendLine($"ENITDataTypeState => {ENITDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Potion_ErrorMask : ItemAbstract_ErrorMask, IErrorMask<Potion_ErrorMask>
    {
        #region Members
        public Exception Name;
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public Exception Script;
        public Exception Weight;
        public Exception Value;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>> Effects;
        public Exception ENITDataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Name:
                    return Name;
                case Potion_FieldIndex.Model:
                    return Model;
                case Potion_FieldIndex.Icon:
                    return Icon;
                case Potion_FieldIndex.Script:
                    return Script;
                case Potion_FieldIndex.Weight:
                    return Weight;
                case Potion_FieldIndex.Value:
                    return Value;
                case Potion_FieldIndex.Flags:
                    return Flags;
                case Potion_FieldIndex.Effects:
                    return Effects;
                case Potion_FieldIndex.ENITDataTypeState:
                    return ENITDataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Potion_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Potion_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Potion_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Potion_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case Potion_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Potion_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Potion_FieldIndex.Effects:
                    this.Effects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>(ex, null);
                    break;
                case Potion_FieldIndex.ENITDataTypeState:
                    this.ENITDataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Potion_FieldIndex enu = (Potion_FieldIndex)index;
            switch (enu)
            {
                case Potion_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Potion_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Potion_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Potion_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Potion_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case Potion_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Potion_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Potion_FieldIndex.Effects:
                    this.Effects = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>)obj;
                    break;
                case Potion_FieldIndex.ENITDataTypeState:
                    this.ENITDataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (Script != null) return true;
            if (Weight != null) return true;
            if (Value != null) return true;
            if (Flags != null) return true;
            if (Effects != null) return true;
            if (ENITDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Potion_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Effects =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Effects.Overall != null)
                {
                    fg.AppendLine(Effects.Overall.ToString());
                }
                if (Effects.Specific != null)
                {
                    foreach (var subItem in Effects.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"ENITDataTypeState => {ENITDataTypeState}");
        }
        #endregion

        #region Combine
        public Potion_ErrorMask Combine(Potion_ErrorMask rhs)
        {
            var ret = new Potion_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Effects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Effect_ErrorMask>>>(this.Effects.Overall.Combine(rhs.Effects.Overall), new List<MaskItem<Exception, Effect_ErrorMask>>(this.Effects.Specific.And(rhs.Effects.Specific)));
            ret.ENITDataTypeState = this.ENITDataTypeState.Combine(rhs.ENITDataTypeState);
            return ret;
        }
        public static Potion_ErrorMask Combine(Potion_ErrorMask lhs, Potion_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Potion_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Potion_ErrorMask();
        }
        #endregion

    }
    public class Potion_CopyMask : ItemAbstract_CopyMask
    {
        public Potion_CopyMask()
        {
        }

        public Potion_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<CopyOption, Model_CopyMask>(deepCopyOption, default);
            this.Icon = defaultOn;
            this.Script = defaultOn;
            this.Weight = defaultOn;
            this.Value = defaultOn;
            this.Flags = defaultOn;
            this.Effects = new MaskItem<CopyOption, Effect_CopyMask>(deepCopyOption, default);
            this.ENITDataTypeState = defaultOn;
        }

        #region Members
        public bool Name;
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public bool Script;
        public bool Weight;
        public bool Value;
        public bool Flags;
        public MaskItem<CopyOption, Effect_CopyMask> Effects;
        public bool ENITDataTypeState;
        #endregion

    }

    public class Potion_TranslationMask : ItemAbstract_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Model_TranslationMask> Model;
        public bool Icon;
        public bool Script;
        public bool Weight;
        public bool Value;
        public bool Flags;
        public MaskItem<bool, Effect_TranslationMask> Effects;
        public bool ENITDataTypeState;
        #endregion

        #region Ctors
        public Potion_TranslationMask()
            : base()
        {
        }

        public Potion_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask>(defaultOn, null);
            this.Icon = defaultOn;
            this.Script = defaultOn;
            this.Weight = defaultOn;
            this.Value = defaultOn;
            this.Flags = defaultOn;
            this.Effects = new MaskItem<bool, Effect_TranslationMask>(defaultOn, null);
            this.ENITDataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Icon, null));
            ret.Add((Script, null));
            ret.Add((Weight, null));
            ret.Add((Value, null));
            ret.Add((Flags, null));
            ret.Add((Effects?.Overall ?? true, Effects?.Specific?.GetCrystal()));
            ret.Add((ENITDataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class PotionBinaryWriteTranslation :
        ItemAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PotionBinaryWriteTranslation Instance = new PotionBinaryWriteTranslation();

        public static void Write_Embedded(
            IPotionInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IPotionInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Potion_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Model_IsSet)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)item.Model).BinaryWriteTranslator).Write(
                    item: item.Model,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(Potion_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.Script_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script_Property,
                    header: recordTypeConverter.ConvertToCustom(Potion_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Weight_IsSet)
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight,
                    header: recordTypeConverter.ConvertToCustom(Potion_Registration.DATA_HEADER),
                    nullable: false);
            }
            if (item.ENITDataTypeState.HasFlag(Potion.ENITDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Potion_Registration.ENIT_HEADER)))
                {
                    writer.Write(item.Value);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<IngredientFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                }
            }
            if (item.Effects.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IEffectInternalGetter>.Instance.Write(
                    writer: writer,
                    items: item.Effects,
                    fieldIndex: (int)Potion_FieldIndex.Effects,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IEffectInternalGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        ((EffectBinaryWriteTranslation)((IBinaryItem)subItem).BinaryWriteTranslator).Write(
                            item: subItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IPotionInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Potion_Registration.ALCH_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPotionInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IItemAbstractInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPotionInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPotionInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IPotionInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class PotionBinaryCreateTranslation : ItemAbstractBinaryCreateTranslation
    {
        public new readonly static PotionBinaryCreateTranslation Instance = new PotionBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class PotionBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPotionInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Potion_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PotionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Potion_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
