/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class QuestCondition : 
        IQuestCondition,
        ILoquiObject<QuestCondition>,
        ILoquiObjectSetter,
        IPropertySupporter<CompareOperator>,
        IEquatable<QuestCondition>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestCondition_Registration.Instance;
        public static QuestCondition_Registration Registration => QuestCondition_Registration.Instance;

        #region Ctor
        public QuestCondition()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CompareOperator
        protected CompareOperator _CompareOperator;
        protected PropertyForwarder<QuestCondition, CompareOperator> _CompareOperatorForwarder;
        public INotifyingSetItem<CompareOperator> CompareOperator_Property => _CompareOperatorForwarder ?? (_CompareOperatorForwarder = new PropertyForwarder<QuestCondition, CompareOperator>(this, (int)QuestCondition_FieldIndex.CompareOperator));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public CompareOperator CompareOperator
        {
            get => this._CompareOperator;
            set => this.SetCompareOperator(value);
        }
        protected void SetCompareOperator(
            CompareOperator item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)QuestCondition_FieldIndex.CompareOperator];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && CompareOperator == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)QuestCondition_FieldIndex.CompareOperator] = hasBeenSet;
            }
            if (_CompareOperator_subscriptions != null)
            {
                var tmp = CompareOperator;
                _CompareOperator = item;
                _CompareOperator_subscriptions.FireSubscriptions(
                    index: (int)QuestCondition_FieldIndex.CompareOperator,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _CompareOperator = item;
            }
        }
        protected void UnsetCompareOperator()
        {
            _hasBeenSetTracker[(int)QuestCondition_FieldIndex.CompareOperator] = false;
            CompareOperator = default(CompareOperator);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<CompareOperator> IQuestCondition.CompareOperator_Property => this.CompareOperator_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<CompareOperator> IQuestConditionGetter.CompareOperator_Property => this.CompareOperator_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => QuestConditionCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => QuestConditionCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => QuestConditionCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            QuestConditionCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<QuestCondition>.GetEqualsMask(QuestCondition rhs) => QuestConditionCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IQuestConditionGetter>.GetEqualsMask(IQuestConditionGetter rhs) => QuestConditionCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return QuestConditionCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            QuestCondition_Mask<bool> printMask = null)
        {
            return QuestConditionCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            QuestConditionCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public QuestCondition_Mask<bool> GetHasBeenSetMask()
        {
            return QuestConditionCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is QuestCondition rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(QuestCondition rhs)
        {
            if (rhs == null) return false;
            if (this.CompareOperator != rhs.CompareOperator) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(CompareOperator).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static QuestCondition Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static QuestCondition Create_XML(
            XElement root,
            out QuestCondition_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = QuestCondition_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static QuestCondition Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new QuestCondition();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static QuestCondition Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static QuestCondition Create_XML(
            string path,
            out QuestCondition_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static QuestCondition Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static QuestCondition Create_XML(
            Stream stream,
            out QuestCondition_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<QuestCondition>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out QuestCondition_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<QuestCondition>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = QuestCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out QuestCondition_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out QuestCondition_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out QuestCondition_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = QuestCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out QuestCondition_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out QuestCondition_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            QuestConditionCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            QuestCondition item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "CompareOperator":
                    try
                    {
                        errorMask?.PushIndex((int)QuestCondition_FieldIndex.CompareOperator);
                        if (EnumXmlTranslation<CompareOperator>.Instance.Parse(
                            root: root,
                            item: out CompareOperator CompareOperatorParse,
                            errorMask: errorMask))
                        {
                            item.CompareOperator = CompareOperatorParse;
                        }
                        else
                        {
                            item.UnsetCompareOperator();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        #region IPropertySupporter CompareOperator
        protected ObjectCentralizationSubscriptions<CompareOperator> _CompareOperator_subscriptions;
        CompareOperator IPropertySupporter<CompareOperator>.Get(int index)
        {
            return GetCompareOperator(index: index);
        }

        protected CompareOperator GetCompareOperator(int index)
        {
            switch ((QuestCondition_FieldIndex)index)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return CompareOperator;
                default:
                    throw new ArgumentException($"Unknown index for field type CompareOperator: {index}");
            }
        }

        void IPropertySupporter<CompareOperator>.Set(
            int index,
            CompareOperator item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetCompareOperator(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetCompareOperator(
            int index,
            CompareOperator item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((QuestCondition_FieldIndex)index)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    SetCompareOperator(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type CompareOperator: {index}");
            }
        }

        bool IPropertySupporter<CompareOperator>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<CompareOperator>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<CompareOperator>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetCompareOperator(
                index: index,
                cmds: cmds);
        }

        protected void UnsetCompareOperator(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((QuestCondition_FieldIndex)index)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    _hasBeenSetTracker[index] = false;
                    CompareOperator = default(CompareOperator);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type CompareOperator: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<CompareOperator>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<CompareOperator> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_CompareOperator_subscriptions == null)
            {
                _CompareOperator_subscriptions = new ObjectCentralizationSubscriptions<CompareOperator>();
            }
            _CompareOperator_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<CompareOperator>.Unsubscribe(
            int index,
            object owner)
        {
            _CompareOperator_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<CompareOperator>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        CompareOperator IPropertySupporter<CompareOperator>.DefaultValue(int index)
        {
            return DefaultValueCompareOperator(index: index);
        }

        protected CompareOperator DefaultValueCompareOperator(int index)
        {
            switch ((QuestCondition_FieldIndex)index)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return default(CompareOperator);
                default:
                    throw new ArgumentException($"Unknown index for field type CompareOperator: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = QuestCondition_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static QuestCondition Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static QuestCondition Create_Binary(
            MutagenFrame frame,
            out QuestCondition_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestCondition_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static QuestCondition Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new QuestCondition();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    recordTypeConverter.ConvertToCustom(QuestCondition_Registration.CTDA_HEADER)));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static QuestCondition Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static QuestCondition Create_Binary(
            string path,
            out QuestCondition_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static QuestCondition Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static QuestCondition Create_Binary(
            Stream stream,
            out QuestCondition_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out QuestCondition_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out QuestCondition_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out QuestCondition_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            QuestConditionCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_CompareOperator_Custom(
            MutagenFrame frame,
            QuestCondition item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_CompareOperator_Custom(
            MutagenWriter writer,
            QuestCondition item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_CompareOperator(
            MutagenWriter writer,
            QuestCondition item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_CompareOperator_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            QuestCondition item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_CompareOperator_Custom(
                frame: frame,
                item: item,
                errorMask: errorMask);
        }

        #endregion

        public QuestCondition Copy(
            QuestCondition_CopyMask copyMask = null,
            IQuestConditionGetter def = null)
        {
            return QuestCondition.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static QuestCondition Copy(
            IQuestCondition item,
            QuestCondition_CopyMask copyMask = null,
            IQuestConditionGetter def = null)
        {
            QuestCondition ret;
            if (item.GetType().Equals(typeof(QuestCondition)))
            {
                ret = new QuestCondition();
            }
            else
            {
                ret = (QuestCondition)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static QuestCondition Copy_ToLoqui(
            IQuestConditionGetter item,
            QuestCondition_CopyMask copyMask = null,
            IQuestConditionGetter def = null)
        {
            QuestCondition ret;
            if (item.GetType().Equals(typeof(QuestCondition)))
            {
                ret = new QuestCondition() as QuestCondition;
            }
            else
            {
                ret = (QuestCondition)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IQuestConditionGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IQuestConditionGetter rhs,
            QuestCondition_CopyMask copyMask,
            IQuestConditionGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IQuestConditionGetter rhs,
            out QuestCondition_ErrorMask errorMask,
            QuestCondition_CopyMask copyMask = null,
            IQuestConditionGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestConditionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = QuestCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IQuestConditionGetter rhs,
            ErrorMaskBuilder errorMask,
            QuestCondition_CopyMask copyMask = null,
            IQuestConditionGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            QuestConditionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    this.SetCompareOperator(
                        (CompareOperator)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            QuestConditionCommon.Clear(this, cmds);
        }


        public static QuestCondition Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new QuestCondition();
            foreach (var pair in fields)
            {
                CopyInInternal_QuestCondition(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_QuestCondition(QuestCondition obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out QuestCondition_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    obj.SetCompareOperator(
                        (CompareOperator)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, QuestCondition obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestCondition : IQuestConditionGetter, ILoquiClass<IQuestCondition, IQuestConditionGetter>, ILoquiClass<QuestCondition, IQuestConditionGetter>
    {
        new CompareOperator CompareOperator { get; set; }
        new INotifyingItem<CompareOperator> CompareOperator_Property { get; }

    }

    public partial interface IQuestConditionGetter : ILoquiObject
    {
        #region CompareOperator
        CompareOperator CompareOperator { get; }
        INotifyingItemGetter<CompareOperator> CompareOperator_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum QuestCondition_FieldIndex
    {
        CompareOperator = 0,
    }
    #endregion

    #region Registration
    public class QuestCondition_Registration : ILoquiRegistration
    {
        public static readonly QuestCondition_Registration Instance = new QuestCondition_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 152,
            version: 0);

        public const string GUID = "7a013c9b-18df-462c-aa29-c48fdbd7928a";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(QuestCondition_Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestCondition_ErrorMask);

        public static readonly Type ClassType = typeof(QuestCondition);

        public static readonly Type GetterType = typeof(IQuestConditionGetter);

        public static readonly Type SetterType = typeof(IQuestCondition);

        public static readonly Type CommonType = typeof(QuestConditionCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.QuestCondition";

        public const string Name = "QuestCondition";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "COMPAREOPERATOR":
                    return (ushort)QuestCondition_FieldIndex.CompareOperator;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return "CompareOperator";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return typeof(CompareOperator);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CTDA_HEADER;
        public const int NumStructFields = 1;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class QuestConditionCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IQuestCondition item,
            IQuestConditionGetter rhs,
            IQuestConditionGetter def,
            ErrorMaskBuilder errorMask,
            QuestCondition_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.CompareOperator ?? true)
            {
                errorMask.PushIndex((int)QuestCondition_FieldIndex.CompareOperator);
                try
                {
                    item.CompareOperator_Property.Set(
                        value: rhs.CompareOperator,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IQuestCondition obj,
            NotifyingFireParameters cmds = null)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IQuestCondition obj,
            NotifyingUnsetParameters cmds = null)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    obj.CompareOperator = default(CompareOperator);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IQuestCondition obj)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IQuestConditionGetter obj)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return obj.CompareOperator;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IQuestCondition item,
            NotifyingUnsetParameters cmds = null)
        {
            item.CompareOperator = default(CompareOperator);
        }

        public static QuestCondition_Mask<bool> GetEqualsMask(
            this IQuestConditionGetter item,
            IQuestConditionGetter rhs)
        {
            var ret = new QuestCondition_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IQuestConditionGetter item,
            IQuestConditionGetter rhs,
            QuestCondition_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.CompareOperator = item.CompareOperator == rhs.CompareOperator;
        }

        public static string ToString(
            this IQuestConditionGetter item,
            string name = null,
            QuestCondition_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IQuestConditionGetter item,
            FileGeneration fg,
            string name = null,
            QuestCondition_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(QuestCondition)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(QuestCondition)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.CompareOperator ?? true)
                {
                    fg.AppendLine($"CompareOperator => {item.CompareOperator}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IQuestConditionGetter item,
            QuestCondition_Mask<bool?> checkMask)
        {
            return true;
        }

        public static QuestCondition_Mask<bool> GetHasBeenSetMask(IQuestConditionGetter item)
        {
            var ret = new QuestCondition_Mask<bool>();
            ret.CompareOperator = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IQuestConditionGetter item,
            bool doMasks,
            out QuestCondition_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = QuestCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IQuestConditionGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.QuestCondition");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.QuestCondition");
            }
            EnumXmlTranslation<CompareOperator>.Instance.Write(
                node: elem,
                name: nameof(item.CompareOperator),
                item: item.CompareOperator_Property,
                fieldIndex: (int)QuestCondition_FieldIndex.CompareOperator,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            QuestCondition item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out QuestCondition_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = QuestCondition_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            QuestCondition item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: QuestCondition_Registration.CTDA_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            QuestCondition item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            QuestCondition.WriteBinary_CompareOperator(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class QuestCondition_Mask<T> : IMask<T>, IEquatable<QuestCondition_Mask<T>>
    {
        #region Ctors
        public QuestCondition_Mask()
        {
        }

        public QuestCondition_Mask(T initialValue)
        {
            this.CompareOperator = initialValue;
        }
        #endregion

        #region Members
        public T CompareOperator;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is QuestCondition_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(QuestCondition_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.CompareOperator, rhs.CompareOperator)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.CompareOperator?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.CompareOperator)) return false;
            return true;
        }
        #endregion

        #region Translate
        public QuestCondition_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new QuestCondition_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(QuestCondition_Mask<R> obj, Func<T, R> eval)
        {
            obj.CompareOperator = eval(this.CompareOperator);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(QuestCondition_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, QuestCondition_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(QuestCondition_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.CompareOperator ?? true)
                {
                    fg.AppendLine($"CompareOperator => {CompareOperator}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class QuestCondition_ErrorMask : IErrorMask, IErrorMask<QuestCondition_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception CompareOperator;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    return CompareOperator;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    this.CompareOperator = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            QuestCondition_FieldIndex enu = (QuestCondition_FieldIndex)index;
            switch (enu)
            {
                case QuestCondition_FieldIndex.CompareOperator:
                    this.CompareOperator = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (CompareOperator != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("QuestCondition_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"CompareOperator => {CompareOperator}");
        }
        #endregion

        #region Combine
        public QuestCondition_ErrorMask Combine(QuestCondition_ErrorMask rhs)
        {
            var ret = new QuestCondition_ErrorMask();
            ret.CompareOperator = this.CompareOperator.Combine(rhs.CompareOperator);
            return ret;
        }
        public static QuestCondition_ErrorMask Combine(QuestCondition_ErrorMask lhs, QuestCondition_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static QuestCondition_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new QuestCondition_ErrorMask();
        }
        #endregion

    }
    public class QuestCondition_CopyMask
    {
        #region Members
        public bool CompareOperator;
        #endregion

    }
    #endregion





    #endregion

}
