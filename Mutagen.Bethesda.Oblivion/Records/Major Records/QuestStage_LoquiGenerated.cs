/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class QuestStage : 
        IQuestStage,
        ILoquiObject<QuestStage>,
        ILoquiObjectSetter,
        IPropertySupporter<UInt16>,
        IEquatable<QuestStage>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestStage_Registration.Instance;
        public static QuestStage_Registration Registration => QuestStage_Registration.Instance;

        #region Ctor
        public QuestStage()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Stage
        protected UInt16 _Stage;
        protected PropertyForwarder<QuestStage, UInt16> _StageForwarder;
        public INotifyingSetItem<UInt16> Stage_Property => _StageForwarder ?? (_StageForwarder = new PropertyForwarder<QuestStage, UInt16>(this, (int)QuestStage_FieldIndex.Stage));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 Stage
        {
            get => this._Stage;
            set => this.SetStage(value);
        }
        protected void SetStage(
            UInt16 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)QuestStage_FieldIndex.Stage];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Stage == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)QuestStage_FieldIndex.Stage] = hasBeenSet;
            }
            if (_UInt16_subscriptions != null)
            {
                var tmp = Stage;
                _Stage = item;
                _UInt16_subscriptions.FireSubscriptions(
                    index: (int)QuestStage_FieldIndex.Stage,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Stage = item;
            }
        }
        protected void UnsetStage()
        {
            _hasBeenSetTracker[(int)QuestStage_FieldIndex.Stage] = false;
            Stage = default(UInt16);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> IQuestStage.Stage_Property => this.Stage_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> IQuestStageGetter.Stage_Property => this.Stage_Property;
        #endregion
        #region LogEntries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<LogEntry> _LogEntries = new NotifyingList<LogEntry>();
        public INotifyingList<LogEntry> LogEntries => _LogEntries;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<LogEntry> LogEntriesEnumerable
        {
            get => _LogEntries;
            set => _LogEntries.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<LogEntry> IQuestStage.LogEntries => _LogEntries;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<LogEntry> IQuestStageGetter.LogEntries => _LogEntries;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => QuestStageCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => QuestStageCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => QuestStageCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            QuestStageCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<QuestStage>.GetEqualsMask(QuestStage rhs) => QuestStageCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IQuestStageGetter>.GetEqualsMask(IQuestStageGetter rhs) => QuestStageCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return QuestStageCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            QuestStage_Mask<bool> printMask = null)
        {
            return QuestStageCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            QuestStageCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public QuestStage_Mask<bool> GetHasBeenSetMask()
        {
            return QuestStageCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is QuestStage rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(QuestStage rhs)
        {
            if (rhs == null) return false;
            if (this.Stage != rhs.Stage) return false;
            if (LogEntries.HasBeenSet != rhs.LogEntries.HasBeenSet) return false;
            if (LogEntries.HasBeenSet)
            {
                if (!this.LogEntries.SequenceEqual(rhs.LogEntries)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Stage).CombineHashCode(ret);
            if (LogEntries.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(LogEntries).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static QuestStage Create_Xml(
            XElement root,
            QuestStage_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static QuestStage Create_Xml(
            XElement root,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true,
            QuestStage_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static QuestStage Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new QuestStage();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static QuestStage Create_Xml(
            string path,
            QuestStage_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static QuestStage Create_Xml(
            string path,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static QuestStage Create_Xml(
            Stream stream,
            QuestStage_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static QuestStage Create_Xml(
            Stream stream,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<QuestStage>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true,
            QuestStage_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            QuestStage_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            QuestStageCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            QuestStage item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Stage":
                    try
                    {
                        errorMask?.PushIndex((int)QuestStage_FieldIndex.Stage);
                        if (UInt16XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt16 StageParse,
                            errorMask: errorMask))
                        {
                            item.Stage = StageParse;
                        }
                        else
                        {
                            item.UnsetStage();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LogEntries":
                    try
                    {
                        errorMask?.PushIndex((int)QuestStage_FieldIndex.LogEntries);
                        if (ListXmlTranslation<LogEntry>.Instance.Parse(
                            root: root,
                            enumer: out var LogEntriesItem,
                            transl: LoquiXmlTranslation<LogEntry>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.LogEntries.SetTo(LogEntriesItem);
                        }
                        else
                        {
                            item.LogEntries.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((QuestStage_FieldIndex)index)
            {
                case QuestStage_FieldIndex.LogEntries:
                    return _hasBeenSetTracker[index];
                case QuestStage_FieldIndex.Stage:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region IPropertySupporter UInt16
        protected ObjectCentralizationSubscriptions<UInt16> _UInt16_subscriptions;
        UInt16 IPropertySupporter<UInt16>.Get(int index)
        {
            return GetUInt16(index: index);
        }

        protected UInt16 GetUInt16(int index)
        {
            switch ((QuestStage_FieldIndex)index)
            {
                case QuestStage_FieldIndex.Stage:
                    return Stage;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        void IPropertySupporter<UInt16>.Set(
            int index,
            UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt16(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt16(
            int index,
            UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((QuestStage_FieldIndex)index)
            {
                case QuestStage_FieldIndex.Stage:
                    SetStage(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        bool IPropertySupporter<UInt16>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<UInt16>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt16>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt16(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt16(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((QuestStage_FieldIndex)index)
            {
                case QuestStage_FieldIndex.Stage:
                    SetStage(
                        item: default(UInt16),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt16>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt16> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt16_subscriptions == null)
            {
                _UInt16_subscriptions = new ObjectCentralizationSubscriptions<UInt16>();
            }
            _UInt16_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt16>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt16_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt16>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt16 IPropertySupporter<UInt16>.DefaultValue(int index)
        {
            return DefaultValueUInt16(index: index);
        }

        protected UInt16 DefaultValueUInt16(int index)
        {
            switch ((QuestStage_FieldIndex)index)
            {
                case QuestStage_FieldIndex.Stage:
                    return default(UInt16);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = QuestStage_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static QuestStage Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static QuestStage Create_Binary(
            MutagenFrame frame,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static QuestStage Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new QuestStage();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static QuestStage Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static QuestStage Create_Binary(
            string path,
            out QuestStage_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static QuestStage Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static QuestStage Create_Binary(
            Stream stream,
            out QuestStage_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out QuestStage_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            QuestStageCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            QuestStage item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            QuestStage item,
            MutagenFrame frame,
            int? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x58444E49: // INDX
                    if (lastParsed.HasValue && lastParsed.Value >= (int)QuestStage_FieldIndex.Stage) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)QuestStage_FieldIndex.Stage);
                        if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out UInt16 StageParse,
                            errorMask: errorMask))
                        {
                            item.Stage = StageParse;
                        }
                        else
                        {
                            item.UnsetStage();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)QuestStage_FieldIndex.Stage);
                case 0x54445351: // QSDT
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                case 0x4D414E43: // CNAM
                case 0x52484353: // SCHR
                case 0x41444353: // SCDA
                case 0x58544353: // SCTX
                case 0x44534C53: // SLSD
                case 0x52564353: // SCVR
                case 0x56524353: // SCRV
                case 0x4F524353: // SCRO
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<LogEntry>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LogEntry_Registration.TriggeringRecordTypes,
                        item: item.LogEntries,
                        fieldIndex: (int)QuestStage_FieldIndex.LogEntries,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<LogEntry>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)QuestStage_FieldIndex.LogEntries);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public QuestStage Copy(
            QuestStage_CopyMask copyMask = null,
            IQuestStageGetter def = null)
        {
            return QuestStage.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static QuestStage Copy(
            IQuestStage item,
            QuestStage_CopyMask copyMask = null,
            IQuestStageGetter def = null)
        {
            QuestStage ret;
            if (item.GetType().Equals(typeof(QuestStage)))
            {
                ret = new QuestStage();
            }
            else
            {
                ret = (QuestStage)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static QuestStage Copy_ToLoqui(
            IQuestStageGetter item,
            QuestStage_CopyMask copyMask = null,
            IQuestStageGetter def = null)
        {
            QuestStage ret;
            if (item.GetType().Equals(typeof(QuestStage)))
            {
                ret = new QuestStage() as QuestStage;
            }
            else
            {
                ret = (QuestStage)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IQuestStageGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IQuestStageGetter rhs,
            QuestStage_CopyMask copyMask,
            IQuestStageGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IQuestStageGetter rhs,
            out QuestStage_ErrorMask errorMask,
            QuestStage_CopyMask copyMask = null,
            IQuestStageGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestStageCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IQuestStageGetter rhs,
            ErrorMaskBuilder errorMask,
            QuestStage_CopyMask copyMask = null,
            IQuestStageGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            QuestStageCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    this.SetStage(
                        (UInt16)obj,
                        cmds: cmds);
                    break;
                case QuestStage_FieldIndex.LogEntries:
                    this._LogEntries.SetTo((IEnumerable<LogEntry>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            QuestStageCommon.Clear(this, cmds);
        }


        public static QuestStage Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new QuestStage();
            foreach (var pair in fields)
            {
                CopyInInternal_QuestStage(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_QuestStage(QuestStage obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out QuestStage_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    obj.SetStage(
                        (UInt16)pair.Value,
                        cmds: null);
                    break;
                case QuestStage_FieldIndex.LogEntries:
                    obj._LogEntries.SetTo((IEnumerable<LogEntry>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, QuestStage obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestStage : IQuestStageGetter, ILoquiClass<IQuestStage, IQuestStageGetter>, ILoquiClass<QuestStage, IQuestStageGetter>
    {
        new UInt16 Stage { get; set; }
        new INotifyingItem<UInt16> Stage_Property { get; }

        new INotifyingList<LogEntry> LogEntries { get; }
    }

    public partial interface IQuestStageGetter : ILoquiObject
    {
        #region Stage
        UInt16 Stage { get; }
        INotifyingItemGetter<UInt16> Stage_Property { get; }

        #endregion
        #region LogEntries
        INotifyingListGetter<LogEntry> LogEntries { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum QuestStage_FieldIndex
    {
        Stage = 0,
        LogEntries = 1,
    }
    #endregion

    #region Registration
    public class QuestStage_Registration : ILoquiRegistration
    {
        public static readonly QuestStage_Registration Instance = new QuestStage_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 155,
            version: 0);

        public const string GUID = "d6976f07-ece4-42a6-9beb-643d202313b5";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(QuestStage_Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestStage_ErrorMask);

        public static readonly Type ClassType = typeof(QuestStage);

        public static readonly Type GetterType = typeof(IQuestStageGetter);

        public static readonly Type SetterType = typeof(IQuestStage);

        public static readonly Type CommonType = typeof(QuestStageCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.QuestStage";

        public const string Name = "QuestStage";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "STAGE":
                    return (ushort)QuestStage_FieldIndex.Stage;
                case "LOGENTRIES":
                    return (ushort)QuestStage_FieldIndex.LogEntries;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.LogEntries:
                    return true;
                case QuestStage_FieldIndex.Stage:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.LogEntries:
                    return true;
                case QuestStage_FieldIndex.Stage:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                case QuestStage_FieldIndex.LogEntries:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    return "Stage";
                case QuestStage_FieldIndex.LogEntries:
                    return "LogEntries";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                case QuestStage_FieldIndex.LogEntries:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                case QuestStage_FieldIndex.LogEntries:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    return typeof(UInt16);
                case QuestStage_FieldIndex.LogEntries:
                    return typeof(NotifyingList<LogEntry>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType QSDT_HEADER = new RecordType("QSDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCDA_HEADER = new RecordType("SCDA");
        public static readonly RecordType SCTX_HEADER = new RecordType("SCTX");
        public static readonly RecordType SLSD_HEADER = new RecordType("SLSD");
        public static readonly RecordType SCVR_HEADER = new RecordType("SCVR");
        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType SCRO_HEADER = new RecordType("SCRO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = INDX_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class QuestStageCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IQuestStage item,
            IQuestStageGetter rhs,
            IQuestStageGetter def,
            ErrorMaskBuilder errorMask,
            QuestStage_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Stage ?? true)
            {
                errorMask?.PushIndex((int)QuestStage_FieldIndex.Stage);
                try
                {
                    item.Stage_Property.Set(
                        value: rhs.Stage,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LogEntries.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)QuestStage_FieldIndex.LogEntries);
                try
                {
                    item.LogEntries.SetToWithDefault(
                        rhs: rhs.LogEntries,
                        def: def?.LogEntries,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.LogEntries.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(LogEntry);
                                    return LogEntry.Copy(
                                        r,
                                        copyMask?.LogEntries?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.LogEntries.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IQuestStage obj,
            NotifyingFireParameters cmds = null)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case QuestStage_FieldIndex.LogEntries:
                    obj.LogEntries.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IQuestStage obj,
            NotifyingUnsetParameters cmds = null)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    obj.Stage = default(UInt16);
                    break;
                case QuestStage_FieldIndex.LogEntries:
                    obj.LogEntries.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IQuestStage obj)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    return true;
                case QuestStage_FieldIndex.LogEntries:
                    return obj.LogEntries.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IQuestStageGetter obj)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    return obj.Stage;
                case QuestStage_FieldIndex.LogEntries:
                    return obj.LogEntries;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IQuestStage item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Stage = default(UInt16);
            item.LogEntries.Unset(cmds.ToUnsetParams());
        }

        public static QuestStage_Mask<bool> GetEqualsMask(
            this IQuestStageGetter item,
            IQuestStageGetter rhs)
        {
            var ret = new QuestStage_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IQuestStageGetter item,
            IQuestStageGetter rhs,
            QuestStage_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Stage = item.Stage == rhs.Stage;
            if (item.LogEntries.HasBeenSet == rhs.LogEntries.HasBeenSet)
            {
                if (item.LogEntries.HasBeenSet)
                {
                    ret.LogEntries = new MaskItem<bool, IEnumerable<MaskItem<bool, LogEntry_Mask<bool>>>>();
                    ret.LogEntries.Specific = item.LogEntries.SelectAgainst<LogEntry, MaskItem<bool, LogEntry_Mask<bool>>>(rhs.LogEntries, ((l, r) =>
                    {
                        MaskItem<bool, LogEntry_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.LogEntries.Overall);
                    ret.LogEntries.Overall = ret.LogEntries.Overall && ret.LogEntries.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.LogEntries = new MaskItem<bool, IEnumerable<MaskItem<bool, LogEntry_Mask<bool>>>>();
                    ret.LogEntries.Overall = true;
                }
            }
            else
            {
                ret.LogEntries = new MaskItem<bool, IEnumerable<MaskItem<bool, LogEntry_Mask<bool>>>>();
                ret.LogEntries.Overall = false;
            }
        }

        public static string ToString(
            this IQuestStageGetter item,
            string name = null,
            QuestStage_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IQuestStageGetter item,
            FileGeneration fg,
            string name = null,
            QuestStage_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(QuestStage)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(QuestStage)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Stage ?? true)
                {
                    fg.AppendLine($"Stage => {item.Stage}");
                }
                if (printMask?.LogEntries?.Overall ?? true)
                {
                    fg.AppendLine("LogEntries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.LogEntries)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IQuestStageGetter item,
            QuestStage_Mask<bool?> checkMask)
        {
            if (checkMask.LogEntries.Overall.HasValue && checkMask.LogEntries.Overall.Value != item.LogEntries.HasBeenSet) return false;
            return true;
        }

        public static QuestStage_Mask<bool> GetHasBeenSetMask(IQuestStageGetter item)
        {
            var ret = new QuestStage_Mask<bool>();
            ret.Stage = true;
            ret.LogEntries = new MaskItem<bool, IEnumerable<MaskItem<bool, LogEntry_Mask<bool>>>>(item.LogEntries.HasBeenSet, item.LogEntries.Select((i) => new MaskItem<bool, LogEntry_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            QuestStage item,
            bool doMasks,
            out QuestStage_ErrorMask errorMask,
            QuestStage_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            QuestStage item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.QuestStage");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.QuestStage");
            }
            if ((translationMask?.GetShouldTranslate((int)QuestStage_FieldIndex.Stage) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Stage),
                    item: item.Stage_Property,
                    fieldIndex: (int)QuestStage_FieldIndex.Stage,
                    errorMask: errorMask);
            }
            if (item.LogEntries.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)QuestStage_FieldIndex.LogEntries) ?? true))
            {
                ListXmlTranslation<LogEntry>.Instance.Write(
                    node: elem,
                    name: nameof(item.LogEntries),
                    item: item.LogEntries,
                    fieldIndex: (int)QuestStage_FieldIndex.LogEntries,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)QuestStage_FieldIndex.LogEntries),
                    transl: (XElement subNode, LogEntry subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<LogEntry>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            QuestStage item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out QuestStage_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = QuestStage_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            QuestStage item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            QuestStage item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Stage_Property,
                fieldIndex: (int)QuestStage_FieldIndex.Stage,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(QuestStage_Registration.INDX_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<LogEntry>.Instance.Write(
                writer: writer,
                items: item.LogEntries,
                fieldIndex: (int)QuestStage_FieldIndex.LogEntries,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<LogEntry>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class QuestStage_Mask<T> : IMask<T>, IEquatable<QuestStage_Mask<T>>
    {
        #region Ctors
        public QuestStage_Mask()
        {
        }

        public QuestStage_Mask(T initialValue)
        {
            this.Stage = initialValue;
            this.LogEntries = new MaskItem<T, IEnumerable<MaskItem<T, LogEntry_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Stage;
        public MaskItem<T, IEnumerable<MaskItem<T, LogEntry_Mask<T>>>> LogEntries;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is QuestStage_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(QuestStage_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Stage, rhs.Stage)) return false;
            if (!object.Equals(this.LogEntries, rhs.LogEntries)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Stage?.GetHashCode());
            ret = ret.CombineHashCode(this.LogEntries?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Stage)) return false;
            if (this.LogEntries != null)
            {
                if (!eval(this.LogEntries.Overall)) return false;
                if (this.LogEntries.Specific != null)
                {
                    foreach (var item in this.LogEntries.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public QuestStage_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new QuestStage_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(QuestStage_Mask<R> obj, Func<T, R> eval)
        {
            obj.Stage = eval(this.Stage);
            if (LogEntries != null)
            {
                obj.LogEntries = new MaskItem<R, IEnumerable<MaskItem<R, LogEntry_Mask<R>>>>();
                obj.LogEntries.Overall = eval(this.LogEntries.Overall);
                if (LogEntries.Specific != null)
                {
                    List<MaskItem<R, LogEntry_Mask<R>>> l = new List<MaskItem<R, LogEntry_Mask<R>>>();
                    obj.LogEntries.Specific = l;
                    foreach (var item in LogEntries.Specific)
                    {
                        MaskItem<R, LogEntry_Mask<R>> mask = default(MaskItem<R, LogEntry_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, LogEntry_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.LogEntries.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(QuestStage_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, QuestStage_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(QuestStage_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Stage ?? true)
                {
                    fg.AppendLine($"Stage => {Stage}");
                }
                if (printMask?.LogEntries?.Overall ?? true)
                {
                    fg.AppendLine("LogEntries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (LogEntries.Overall != null)
                        {
                            fg.AppendLine(LogEntries.Overall.ToString());
                        }
                        if (LogEntries.Specific != null)
                        {
                            foreach (var subItem in LogEntries.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class QuestStage_ErrorMask : IErrorMask, IErrorMask<QuestStage_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Stage;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LogEntry_ErrorMask>>> LogEntries;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    return Stage;
                case QuestStage_FieldIndex.LogEntries:
                    return LogEntries;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    this.Stage = ex;
                    break;
                case QuestStage_FieldIndex.LogEntries:
                    this.LogEntries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LogEntry_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            QuestStage_FieldIndex enu = (QuestStage_FieldIndex)index;
            switch (enu)
            {
                case QuestStage_FieldIndex.Stage:
                    this.Stage = (Exception)obj;
                    break;
                case QuestStage_FieldIndex.LogEntries:
                    this.LogEntries = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LogEntry_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Stage != null) return true;
            if (LogEntries != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("QuestStage_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Stage => {Stage}");
            fg.AppendLine("LogEntries =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (LogEntries.Overall != null)
                {
                    fg.AppendLine(LogEntries.Overall.ToString());
                }
                if (LogEntries.Specific != null)
                {
                    foreach (var subItem in LogEntries.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public QuestStage_ErrorMask Combine(QuestStage_ErrorMask rhs)
        {
            var ret = new QuestStage_ErrorMask();
            ret.Stage = this.Stage.Combine(rhs.Stage);
            ret.LogEntries = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LogEntry_ErrorMask>>>(this.LogEntries.Overall.Combine(rhs.LogEntries.Overall), new List<MaskItem<Exception, LogEntry_ErrorMask>>(this.LogEntries.Specific.And(rhs.LogEntries.Specific)));
            return ret;
        }
        public static QuestStage_ErrorMask Combine(QuestStage_ErrorMask lhs, QuestStage_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static QuestStage_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new QuestStage_ErrorMask();
        }
        #endregion

    }
    public class QuestStage_CopyMask
    {
        #region Members
        public bool Stage;
        public MaskItem<CopyOption, LogEntry_CopyMask> LogEntries;
        #endregion

    }
    public class QuestStage_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Stage;
        public MaskItem<bool, LogEntry_TranslationMask> LogEntries;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Stage, null));
            ret.Add((LogEntries?.Overall ?? true, LogEntries?.Specific?.GetCrystal()));
        }
    }
    #endregion





    #endregion

}
