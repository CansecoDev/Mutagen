/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class QuestTarget :
        LoquiNotifyingObject,
        IQuestTargetInternal,
        ILoquiObjectSetter<QuestTarget>,
        ILinkSubContainer,
        IEquatable<QuestTarget>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestTarget_Registration.Instance;
        public static QuestTarget_Registration Registration => QuestTarget_Registration.Instance;
        protected object CommonInstance => QuestTargetCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public QuestTarget()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Target
        public IFormIDLink<IPlaced> Target_Property { get; } = new FormIDLink<IPlaced>();
        public IPlaced Target { get => Target_Property.Item; set => Target_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLink<IPlaced> IQuestTarget.Target_Property => this.Target_Property;
        IPlaced IQuestTargetGetter.Target => this.Target_Property.Item;
        IFormIDLinkGetter<IPlaced> IQuestTargetGetter.Target_Property => this.Target_Property;
        #endregion
        #region Flags
        private QuestTarget.Flag _Flags;
        public QuestTarget.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.QSTADataTypeState |= QSTADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Condition> _Conditions = new SourceSetList<Condition>();
        public ISourceSetList<Condition> Conditions => _Conditions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Condition> IQuestTarget.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IConditionGetter> IQuestTargetGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region QSTADataTypeState
        private QuestTarget.QSTADataType _QSTADataTypeState;
        public QuestTarget.QSTADataType QSTADataTypeState
        {
            get => this._QSTADataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._QSTADataTypeState, value, nameof(QSTADataTypeState));
        }
        QuestTarget.QSTADataType IQuestTargetInternal.QSTADataTypeState
        {
            get => this.QSTADataTypeState;
            set => this.QSTADataTypeState = value;
        }
        QuestTarget.QSTADataType IQuestTargetInternalGetter.QSTADataTypeState
        {
            get => this.QSTADataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IQuestTargetInternalGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            QuestTargetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is QuestTarget rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(QuestTarget rhs)
        {
            if (rhs == null) return false;
            if (!this.Target_Property.Equals(rhs.Target_Property)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (Conditions.HasBeenSet)
            {
                if (!this.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            if (this.QSTADataTypeState != rhs.QSTADataTypeState) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Target).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            if (Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Conditions).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(QSTADataTypeState).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected IXmlWriteTranslator XmlWriteTranslator => QuestTargetXmlWriteTranslation.Instance;
        IXmlWriteTranslator IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static QuestTarget CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            QuestTarget_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static QuestTarget CreateFromXml(
            XElement node,
            out QuestTarget_ErrorMask errorMask,
            bool doMasks = true,
            QuestTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static QuestTarget CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new QuestTarget() : null;
                    break;
                default:
                    break;
            }
            var ret = new QuestTarget();
            try
            {
                foreach (var elem in node.Elements())
                {
                    QuestTargetXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static QuestTarget CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            QuestTarget_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static QuestTarget CreateFromXml(
            string path,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static QuestTarget CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            QuestTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static QuestTarget CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            QuestTarget_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static QuestTarget CreateFromXml(
            Stream stream,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static QuestTarget CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            QuestTarget_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((QuestTarget_FieldIndex)index)
            {
                case QuestTarget_FieldIndex.Conditions:
                    return Conditions.HasBeenSet;
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = QuestTarget_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum QSTADataType
        {
            Has = 1
        }
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Target_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
            Target_Property.Link(
                modList,
                sourceMod);
        }

        #endregion

        #region Binary Translation
        protected IBinaryWriteTranslator BinaryWriteTranslator => QuestTargetBinaryWriteTranslation.Instance;
        IBinaryWriteTranslator IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static QuestTarget CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static QuestTarget CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out QuestTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static QuestTarget CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new QuestTarget();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            QuestTarget item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            QuestTarget item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x41545351: // QSTA
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)QuestTarget_FieldIndex.Flags) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.QSTADataTypeState = QSTADataType.Has;
                    }
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: dataFrame,
                        masterReferences: masterReferences,
                        item: item.Target_Property);
                    if (EnumBinaryTranslation<QuestTarget.Flag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out QuestTarget.Flag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(QuestTarget.Flag);
                    }
                    return TryGet<int?>.Succeed((int)QuestTarget_FieldIndex.Flags);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)QuestTarget_FieldIndex.Conditions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Condition listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)QuestTarget_FieldIndex.Conditions);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public QuestTarget Copy(
            QuestTarget_CopyMask copyMask = null,
            QuestTarget def = null)
        {
            return QuestTarget.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static QuestTarget Copy(
            QuestTarget item,
            QuestTarget_CopyMask copyMask = null,
            QuestTarget def = null)
        {
            QuestTarget ret;
            if (item.GetType().Equals(typeof(QuestTarget)))
            {
                ret = new QuestTarget();
            }
            else
            {
                ret = (QuestTarget)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static QuestTarget Copy_ToLoqui(
            QuestTarget item,
            QuestTarget_CopyMask copyMask = null,
            QuestTarget def = null)
        {
            QuestTarget ret;
            if (item.GetType().Equals(typeof(QuestTarget)))
            {
                ret = new QuestTarget() as QuestTarget;
            }
            else
            {
                ret = (QuestTarget)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(QuestTarget rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            QuestTarget rhs,
            QuestTarget_CopyMask copyMask,
            QuestTarget def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            QuestTarget rhs,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_CopyMask copyMask = null,
            QuestTarget def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestTargetCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            QuestTarget rhs,
            ErrorMaskBuilder errorMask,
            QuestTarget_CopyMask copyMask = null,
            QuestTarget def = null)
        {
            QuestTargetCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    this.Target_Property.Set((IFormIDLink<IPlaced>)obj);
                    break;
                case QuestTarget_FieldIndex.Flags:
                    this.Flags = (QuestTarget.Flag)obj;
                    break;
                case QuestTarget_FieldIndex.Conditions:
                    this._Conditions.SetTo((IEnumerable<Condition>)obj);
                    break;
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    this.QSTADataTypeState = (QuestTarget.QSTADataType)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            QuestTargetCommon.Instance.Clear(this);
        }

        public static QuestTarget Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new QuestTarget();
            foreach (var pair in fields)
            {
                CopyInInternal_QuestTarget(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_QuestTarget(QuestTarget obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out QuestTarget_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    obj.Target_Property.Set((IFormIDLink<IPlaced>)pair.Value);
                    break;
                case QuestTarget_FieldIndex.Flags:
                    obj.Flags = (QuestTarget.Flag)pair.Value;
                    break;
                case QuestTarget_FieldIndex.Conditions:
                    obj._Conditions.SetTo((IEnumerable<Condition>)pair.Value);
                    break;
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    obj.QSTADataTypeState = (QuestTarget.QSTADataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IQuestTarget :
        IQuestTargetGetter,
        ILoquiObjectSetter<IQuestTargetInternal>
    {
        new IPlaced Target { get; set; }
        new IFormIDLink<IPlaced> Target_Property { get; }
        new QuestTarget.Flag Flags { get; set; }

        new ISetList<Condition> Conditions { get; }
        void CopyFieldsFrom(
            QuestTarget rhs,
            ErrorMaskBuilder errorMask = null,
            QuestTarget_CopyMask copyMask = null,
            QuestTarget def = null);
    }

    public partial interface IQuestTargetInternal :
        IQuestTarget,
        IQuestTargetInternalGetter
    {
        new IPlaced Target { get; set; }
        new IFormIDLink<IPlaced> Target_Property { get; }
        new QuestTarget.QSTADataType QSTADataTypeState { get; set; }

    }

    public partial interface IQuestTargetGetter :
        ILoquiObject,
        ILoquiObject<IQuestTargetInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Target
        IPlaced Target { get; }
        IFormIDLinkGetter<IPlaced> Target_Property { get; }

        #endregion
        #region Flags
        QuestTarget.Flag Flags { get; }

        #endregion
        #region Conditions
        IReadOnlySetList<IConditionGetter> Conditions { get; }
        #endregion

    }

    public partial interface IQuestTargetInternalGetter : IQuestTargetGetter
    {
        #region QSTADataTypeState
        QuestTarget.QSTADataType QSTADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class QuestTargetMixIn
    {
        public static void Clear(this IQuestTargetInternal item)
        {
            ((QuestTargetCommon)item.CommonInstance).Clear(item: item);
        }

        public static QuestTarget_Mask<bool> GetEqualsMask(
            this IQuestTargetInternalGetter item,
            IQuestTargetInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestTargetCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IQuestTargetInternalGetter item,
            string name = null,
            QuestTarget_Mask<bool> printMask = null)
        {
            return ((QuestTargetCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IQuestTargetInternalGetter item,
            FileGeneration fg,
            string name = null,
            QuestTarget_Mask<bool> printMask = null)
        {
            ((QuestTargetCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IQuestTargetInternalGetter item,
            QuestTarget_Mask<bool?> checkMask)
        {
            return ((QuestTargetCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static QuestTarget_Mask<bool> GetHasBeenSetMask(this IQuestTargetInternalGetter item)
        {
            var ret = new QuestTarget_Mask<bool>();
            ((QuestTargetCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum QuestTarget_FieldIndex
    {
        Target = 0,
        Flags = 1,
        Conditions = 2,
        QSTADataTypeState = 3,
    }
    #endregion

    #region Registration
    public class QuestTarget_Registration : ILoquiRegistration
    {
        public static readonly QuestTarget_Registration Instance = new QuestTarget_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 154,
            version: 0);

        public const string GUID = "f3941d6e-a418-41e7-8bfd-dcb8b5520b6a";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(QuestTarget_Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestTarget_ErrorMask);

        public static readonly Type ClassType = typeof(QuestTarget);

        public static readonly Type GetterType = typeof(IQuestTargetGetter);

        public static readonly Type InternalGetterType = typeof(IQuestTargetInternalGetter);

        public static readonly Type SetterType = typeof(IQuestTarget);

        public static readonly Type InternalSetterType = typeof(IQuestTargetInternal);

        public static readonly Type CommonType = typeof(QuestTargetCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.QuestTarget";

        public const string Name = "QuestTarget";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TARGET":
                    return (ushort)QuestTarget_FieldIndex.Target;
                case "FLAGS":
                    return (ushort)QuestTarget_FieldIndex.Flags;
                case "CONDITIONS":
                    return (ushort)QuestTarget_FieldIndex.Conditions;
                case "QSTADATATYPESTATE":
                    return (ushort)QuestTarget_FieldIndex.QSTADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Conditions:
                    return true;
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Conditions:
                    return true;
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                case QuestTarget_FieldIndex.Conditions:
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    return "Target";
                case QuestTarget_FieldIndex.Flags:
                    return "Flags";
                case QuestTarget_FieldIndex.Conditions:
                    return "Conditions";
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    return "QSTADataTypeState";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                case QuestTarget_FieldIndex.Conditions:
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                case QuestTarget_FieldIndex.Conditions:
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    return typeof(IFormIDLink<IPlaced>);
                case QuestTarget_FieldIndex.Flags:
                    return typeof(QuestTarget.Flag);
                case QuestTarget_FieldIndex.Conditions:
                    return typeof(SourceSetList<Condition>);
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    return typeof(QuestTarget.QSTADataType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlTranslation = typeof(QuestTargetXmlWriteTranslation);
        public static readonly RecordType QSTA_HEADER = new RecordType("QSTA");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = QSTA_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryTranslation = typeof(QuestTargetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class QuestTargetCommon
    {
        public static readonly QuestTargetCommon Instance = new QuestTargetCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            QuestTarget item,
            QuestTarget rhs,
            QuestTarget def,
            ErrorMaskBuilder errorMask,
            QuestTarget_CopyMask copyMask)
        {
            if (copyMask?.Target ?? true)
            {
                errorMask?.PushIndex((int)QuestTarget_FieldIndex.Target);
                try
                {
                    item.Target_Property.SetLink(value: rhs.Target_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)QuestTarget_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Conditions.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)QuestTarget_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetToWithDefault<Condition, Condition>(
                        rhs: rhs.Conditions,
                        def: def?.Conditions,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Conditions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (Condition)r;
                                case CopyOption.MakeCopy:
                                    return Condition.Copy(
                                        r,
                                        copyMask?.Conditions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Conditions.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IQuestTargetInternal item)
        {
            ClearPartial();
            item.Target = default(IPlaced);
            item.Flags = default(QuestTarget.Flag);
            item.Conditions.Unset();
        }

        public QuestTarget_Mask<bool> GetEqualsMask(
            IQuestTargetInternalGetter item,
            IQuestTargetInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new QuestTarget_Mask<bool>();
            ((QuestTargetCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IQuestTargetInternalGetter item,
            IQuestTargetInternalGetter rhs,
            QuestTarget_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Target = item.Target_Property.FormKey == rhs.Target_Property.FormKey;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }

        public string ToString(
            IQuestTargetInternalGetter item,
            string name = null,
            QuestTarget_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IQuestTargetInternalGetter item,
            FileGeneration fg,
            string name = null,
            QuestTarget_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"QuestTarget =>");
            }
            else
            {
                fg.AppendLine($"{name} (QuestTarget) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IQuestTargetInternalGetter item,
            FileGeneration fg,
            QuestTarget_Mask<bool> printMask = null)
        {
            if (printMask?.Target ?? true)
            {
                fg.AppendLine($"Target => {item.Target_Property}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.QSTADataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IQuestTargetInternalGetter item,
            QuestTarget_Mask<bool?> checkMask)
        {
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            return true;
        }

        public void FillHasBeenSetMask(
            IQuestTargetInternalGetter item,
            QuestTarget_Mask<bool> mask)
        {
            mask.Target = true;
            mask.Flags = true;
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.QSTADataTypeState = true;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class QuestTargetXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static QuestTargetXmlWriteTranslation Instance = new QuestTargetXmlWriteTranslation();

        public static void WriteToNodeXml(
            IQuestTargetInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.QSTADataTypeState.HasFlag(QuestTarget.QSTADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)QuestTarget_FieldIndex.Target) ?? true))
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Target),
                        item: item.Target_Property?.FormKey,
                        fieldIndex: (int)QuestTarget_FieldIndex.Target,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)QuestTarget_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<QuestTarget.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)QuestTarget_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)QuestTarget_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)QuestTarget_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)QuestTarget_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        ((ConditionXmlWriteTranslation)((IXmlItem)subItem).XmlWriteTranslator).Write(
                            item: subItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)QuestTarget_FieldIndex.QSTADataTypeState) ?? true))
            {
                EnumXmlTranslation<QuestTarget.QSTADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.QSTADataTypeState),
                    item: item.QSTADataTypeState,
                    fieldIndex: (int)QuestTarget_FieldIndex.QSTADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IQuestTargetInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.QuestTarget");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.QuestTarget");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IQuestTargetInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IQuestTargetInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IQuestTargetInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class QuestTargetXmlCreateTranslation
    {
        public readonly static QuestTargetXmlCreateTranslation Instance = new QuestTargetXmlCreateTranslation();

        public static void FillPublicXml(
            IQuestTargetInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    QuestTargetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IQuestTargetInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Target":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Target_Property,
                        fieldIndex: (int)QuestTarget_FieldIndex.Target,
                        errorMask: errorMask);
                    item.QSTADataTypeState |= QuestTarget.QSTADataType.Has;
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)QuestTarget_FieldIndex.Flags);
                        if (EnumXmlTranslation<QuestTarget.Flag>.Instance.Parse(
                            node: node,
                            item: out QuestTarget.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(QuestTarget.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)QuestTarget_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "QSTADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)QuestTarget_FieldIndex.QSTADataTypeState);
                        if (EnumXmlTranslation<QuestTarget.QSTADataType>.Instance.Parse(
                            node: node,
                            item: out QuestTarget.QSTADataType QSTADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.QSTADataTypeState = QSTADataTypeStateParse;
                        }
                        else
                        {
                            item.QSTADataTypeState = default(QuestTarget.QSTADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class QuestTargetXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IQuestTargetInternalGetter item,
            XElement node,
            out QuestTarget_ErrorMask errorMask,
            bool doMasks = true,
            QuestTarget_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((QuestTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IQuestTargetInternalGetter item,
            string path,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IQuestTargetInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IQuestTargetInternalGetter item,
            Stream stream,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IQuestTargetInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IQuestTargetInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((QuestTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IQuestTargetInternalGetter item,
            XElement node,
            string name = null,
            QuestTarget_TranslationMask translationMask = null)
        {
            ((QuestTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IQuestTargetInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((QuestTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IQuestTargetInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((QuestTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class QuestTarget_Mask<T> : IMask<T>, IEquatable<QuestTarget_Mask<T>>
    {
        #region Ctors
        public QuestTarget_Mask()
        {
        }

        public QuestTarget_Mask(T initialValue)
        {
            this.Target = initialValue;
            this.Flags = initialValue;
            this.Conditions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>>(initialValue, null);
            this.QSTADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Target;
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>> Conditions;
        public T QSTADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is QuestTarget_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(QuestTarget_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Target, rhs.Target)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            if (!object.Equals(this.QSTADataTypeState, rhs.QSTADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Target?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            ret = ret.CombineHashCode(this.QSTADataTypeState?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Target)) return false;
            if (!eval(this.Flags)) return false;
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.QSTADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public QuestTarget_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new QuestTarget_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(QuestTarget_Mask<R> obj, Func<T, R> eval)
        {
            obj.Target = eval(this.Target);
            obj.Flags = eval(this.Flags);
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItemIndexed<R, Condition_Mask<R>>> l = new List<MaskItemIndexed<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Condition_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Condition_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.QSTADataTypeState = eval(this.QSTADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Conditions.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(QuestTarget_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, QuestTarget_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(QuestTarget_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Target ?? true)
                {
                    fg.AppendLine($"Target => {Target}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.QSTADataTypeState ?? true)
                {
                    fg.AppendLine($"QSTADataTypeState => {QSTADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class QuestTarget_ErrorMask : IErrorMask, IErrorMask<QuestTarget_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Target;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        public Exception QSTADataTypeState;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    return Target;
                case QuestTarget_FieldIndex.Flags:
                    return Flags;
                case QuestTarget_FieldIndex.Conditions:
                    return Conditions;
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    return QSTADataTypeState;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    this.Target = ex;
                    break;
                case QuestTarget_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case QuestTarget_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    this.QSTADataTypeState = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    this.Target = (Exception)obj;
                    break;
                case QuestTarget_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case QuestTarget_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                case QuestTarget_FieldIndex.QSTADataTypeState:
                    this.QSTADataTypeState = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Target != null) return true;
            if (Flags != null) return true;
            if (Conditions != null) return true;
            if (QSTADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("QuestTarget_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Target => {Target}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"QSTADataTypeState => {QSTADataTypeState}");
        }
        #endregion

        #region Combine
        public QuestTarget_ErrorMask Combine(QuestTarget_ErrorMask rhs)
        {
            var ret = new QuestTarget_ErrorMask();
            ret.Target = this.Target.Combine(rhs.Target);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            ret.QSTADataTypeState = this.QSTADataTypeState.Combine(rhs.QSTADataTypeState);
            return ret;
        }
        public static QuestTarget_ErrorMask Combine(QuestTarget_ErrorMask lhs, QuestTarget_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static QuestTarget_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new QuestTarget_ErrorMask();
        }
        #endregion

    }
    public class QuestTarget_CopyMask
    {
        public QuestTarget_CopyMask()
        {
        }

        public QuestTarget_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Target = defaultOn;
            this.Flags = defaultOn;
            this.Conditions = new MaskItem<CopyOption, Condition_CopyMask>(deepCopyOption, default);
            this.QSTADataTypeState = defaultOn;
        }

        #region Members
        public bool Target;
        public bool Flags;
        public MaskItem<CopyOption, Condition_CopyMask> Conditions;
        public bool QSTADataTypeState;
        #endregion

    }

    public class QuestTarget_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Target;
        public bool Flags;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        public bool QSTADataTypeState;
        #endregion

        #region Ctors
        public QuestTarget_TranslationMask()
        {
        }

        public QuestTarget_TranslationMask(bool defaultOn)
        {
            this.Target = defaultOn;
            this.Flags = defaultOn;
            this.Conditions = new MaskItem<bool, Condition_TranslationMask>(defaultOn, null);
            this.QSTADataTypeState = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Target, null));
            ret.Add((Flags, null));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            ret.Add((QSTADataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class QuestTargetBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static QuestTargetBinaryWriteTranslation Instance = new QuestTargetBinaryWriteTranslation();

        public static void Write_Embedded(
            IQuestTargetInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
        }

        public static void Write_RecordTypes(
            IQuestTargetInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.QSTADataTypeState.HasFlag(QuestTarget.QSTADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(QuestTarget_Registration.QSTA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Target_Property,
                        masterReferences: masterReferences);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<QuestTarget.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                }
            }
            if (item.Conditions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                    writer: writer,
                    items: item.Conditions,
                    fieldIndex: (int)QuestTarget_FieldIndex.Conditions,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IConditionGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        ((ConditionBinaryWriteTranslation)((IBinaryItem)subItem).BinaryWriteTranslator).Write(
                            item: subItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IQuestTargetInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IQuestTargetInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class QuestTargetBinaryCreateTranslation
    {
        public readonly static QuestTargetBinaryCreateTranslation Instance = new QuestTargetBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class QuestTargetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IQuestTargetInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out QuestTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((QuestTargetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IQuestTargetInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((QuestTargetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IQuestTargetInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((QuestTargetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
