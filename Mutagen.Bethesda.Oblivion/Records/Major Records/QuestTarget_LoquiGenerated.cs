/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class QuestTarget : 
        IQuestTarget,
        ILoquiObject<QuestTarget>,
        ILoquiObjectSetter,
        IPropertySupporter<QuestTarget.Flag>,
        IEquatable<QuestTarget>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestTarget_Registration.Instance;
        public static QuestTarget_Registration Registration => QuestTarget_Registration.Instance;

        #region Ctor
        public QuestTarget()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Target
        public FormIDLink<Placed> Target_Property { get; } = new FormIDLink<Placed>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Placed Target { get => Target_Property.Item; set => Target_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Placed> IQuestTargetGetter.Target_Property => this.Target_Property;
        #endregion
        #region Flags
        protected QuestTarget.Flag _Flags;
        protected PropertyForwarder<QuestTarget, QuestTarget.Flag> _FlagsForwarder;
        public INotifyingSetItem<QuestTarget.Flag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<QuestTarget, QuestTarget.Flag>(this, (int)QuestTarget_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public QuestTarget.Flag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            QuestTarget.Flag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)QuestTarget_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)QuestTarget_FieldIndex.Flags] = hasBeenSet;
            }
            if (_QuestTargetFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _QuestTargetFlag_subscriptions.FireSubscriptions(
                    index: (int)QuestTarget_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)QuestTarget_FieldIndex.Flags] = false;
            Flags = default(QuestTarget.Flag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<QuestTarget.Flag> IQuestTarget.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<QuestTarget.Flag> IQuestTargetGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Condition> _Conditions = new NotifyingList<Condition>();
        public INotifyingList<Condition> Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Condition> ConditionsEnumerable
        {
            get => _Conditions;
            set => _Conditions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Condition> IQuestTarget.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Condition> IQuestTargetGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => QuestTargetCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => QuestTargetCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => QuestTargetCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            QuestTargetCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<QuestTarget>.GetEqualsMask(QuestTarget rhs) => QuestTargetCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IQuestTargetGetter>.GetEqualsMask(IQuestTargetGetter rhs) => QuestTargetCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return QuestTargetCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            QuestTarget_Mask<bool> printMask = null)
        {
            return QuestTargetCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            QuestTargetCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public QuestTarget_Mask<bool> GetHasBeenSetMask()
        {
            return QuestTargetCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is QuestTarget rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(QuestTarget rhs)
        {
            if (rhs == null) return false;
            if (!this.Target_Property.Equals(rhs.Target_Property)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (Conditions.HasBeenSet)
            {
                if (!this.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Target).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            if (Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Conditions).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static QuestTarget Create_Xml(
            XElement root,
            QuestTarget_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static QuestTarget Create_Xml(
            XElement root,
            out QuestTarget_ErrorMask errorMask,
            bool doMasks = true,
            QuestTarget_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static QuestTarget Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new QuestTarget();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static QuestTarget Create_Xml(
            string path,
            QuestTarget_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static QuestTarget Create_Xml(
            string path,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static QuestTarget Create_Xml(
            Stream stream,
            QuestTarget_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static QuestTarget Create_Xml(
            Stream stream,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<QuestTarget>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out QuestTarget_ErrorMask errorMask,
            bool doMasks = true,
            QuestTarget_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            QuestTarget_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            QuestTargetCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            QuestTarget item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Target":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        property: item.Target_Property,
                        fieldIndex: (int)QuestTarget_FieldIndex.Target,
                        errorMask: errorMask);
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)QuestTarget_FieldIndex.Flags);
                        if (EnumXmlTranslation<QuestTarget.Flag>.Instance.Parse(
                            root: root,
                            item: out QuestTarget.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)QuestTarget_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            root: root,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((QuestTarget_FieldIndex)index)
            {
                case QuestTarget_FieldIndex.Conditions:
                    return _hasBeenSetTracker[index];
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region IPropertySupporter QuestTarget.Flag
        protected ObjectCentralizationSubscriptions<QuestTarget.Flag> _QuestTargetFlag_subscriptions;
        QuestTarget.Flag IPropertySupporter<QuestTarget.Flag>.Get(int index)
        {
            return GetQuestTargetFlag(index: index);
        }

        protected QuestTarget.Flag GetQuestTargetFlag(int index)
        {
            switch ((QuestTarget_FieldIndex)index)
            {
                case QuestTarget_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type QuestTarget.Flag: {index}");
            }
        }

        void IPropertySupporter<QuestTarget.Flag>.Set(
            int index,
            QuestTarget.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetQuestTargetFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetQuestTargetFlag(
            int index,
            QuestTarget.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((QuestTarget_FieldIndex)index)
            {
                case QuestTarget_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type QuestTarget.Flag: {index}");
            }
        }

        bool IPropertySupporter<QuestTarget.Flag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<QuestTarget.Flag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<QuestTarget.Flag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetQuestTargetFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetQuestTargetFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((QuestTarget_FieldIndex)index)
            {
                case QuestTarget_FieldIndex.Flags:
                    SetFlags(
                        item: default(QuestTarget.Flag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type QuestTarget.Flag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<QuestTarget.Flag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<QuestTarget.Flag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_QuestTargetFlag_subscriptions == null)
            {
                _QuestTargetFlag_subscriptions = new ObjectCentralizationSubscriptions<QuestTarget.Flag>();
            }
            _QuestTargetFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<QuestTarget.Flag>.Unsubscribe(
            int index,
            object owner)
        {
            _QuestTargetFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<QuestTarget.Flag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        QuestTarget.Flag IPropertySupporter<QuestTarget.Flag>.DefaultValue(int index)
        {
            return DefaultValueQuestTargetFlag(index: index);
        }

        protected QuestTarget.Flag DefaultValueQuestTargetFlag(int index)
        {
            switch ((QuestTarget_FieldIndex)index)
            {
                case QuestTarget_FieldIndex.Flags:
                    return default(QuestTarget.Flag);
                default:
                    throw new ArgumentException($"Unknown index for field type QuestTarget.Flag: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = QuestTarget_Registration.TRIGGERING_RECORD_TYPE;
        public QSTADataType QSTADataTypeState;
        [Flags]
        public enum QSTADataType
        {
            Has = 1
        }
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Target_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static QuestTarget Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static QuestTarget Create_Binary(
            MutagenFrame frame,
            out QuestTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static QuestTarget Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new QuestTarget();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static QuestTarget Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static QuestTarget Create_Binary(
            string path,
            out QuestTarget_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static QuestTarget Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static QuestTarget Create_Binary(
            Stream stream,
            out QuestTarget_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out QuestTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out QuestTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out QuestTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            QuestTargetCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            QuestTarget item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            QuestTarget item,
            MutagenFrame frame,
            int? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x41545351: // QSTA
                    if (lastParsed.HasValue && lastParsed.Value >= (int)QuestTarget_FieldIndex.Flags) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.QSTADataTypeState = QSTADataType.Has;
                        }
                        Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                            frame: dataFrame.Spawn(snapToFinalPosition: false),
                            property: item.Target_Property,
                            fieldIndex: (int)QuestTarget_FieldIndex.Target,
                            errorMask: errorMask);
                        try
                        {
                            errorMask?.PushIndex((int)QuestTarget_FieldIndex.Flags);
                            if (EnumBinaryTranslation<QuestTarget.Flag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out QuestTarget.Flag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.UnsetFlags();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)QuestTarget_FieldIndex.Flags);
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)QuestTarget_FieldIndex.Conditions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<Condition>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)QuestTarget_FieldIndex.Conditions);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public QuestTarget Copy(
            QuestTarget_CopyMask copyMask = null,
            IQuestTargetGetter def = null)
        {
            return QuestTarget.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static QuestTarget Copy(
            IQuestTarget item,
            QuestTarget_CopyMask copyMask = null,
            IQuestTargetGetter def = null)
        {
            QuestTarget ret;
            if (item.GetType().Equals(typeof(QuestTarget)))
            {
                ret = new QuestTarget();
            }
            else
            {
                ret = (QuestTarget)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static QuestTarget Copy_ToLoqui(
            IQuestTargetGetter item,
            QuestTarget_CopyMask copyMask = null,
            IQuestTargetGetter def = null)
        {
            QuestTarget ret;
            if (item.GetType().Equals(typeof(QuestTarget)))
            {
                ret = new QuestTarget() as QuestTarget;
            }
            else
            {
                ret = (QuestTarget)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IQuestTargetGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IQuestTargetGetter rhs,
            QuestTarget_CopyMask copyMask,
            IQuestTargetGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IQuestTargetGetter rhs,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_CopyMask copyMask = null,
            IQuestTargetGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestTargetCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IQuestTargetGetter rhs,
            ErrorMaskBuilder errorMask,
            QuestTarget_CopyMask copyMask = null,
            IQuestTargetGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            QuestTargetCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    this.Target_Property.Set(
                        (FormIDLink<Placed>)obj,
                        cmds);
                    break;
                case QuestTarget_FieldIndex.Flags:
                    this.SetFlags(
                        (QuestTarget.Flag)obj,
                        cmds: cmds);
                    break;
                case QuestTarget_FieldIndex.Conditions:
                    this._Conditions.SetTo((IEnumerable<Condition>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            QuestTargetCommon.Clear(this, cmds);
        }


        public static QuestTarget Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new QuestTarget();
            foreach (var pair in fields)
            {
                CopyInInternal_QuestTarget(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_QuestTarget(QuestTarget obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out QuestTarget_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    obj.Target_Property.Set(
                        (FormIDLink<Placed>)pair.Value,
                        null);
                    break;
                case QuestTarget_FieldIndex.Flags:
                    obj.SetFlags(
                        (QuestTarget.Flag)pair.Value,
                        cmds: null);
                    break;
                case QuestTarget_FieldIndex.Conditions:
                    obj._Conditions.SetTo((IEnumerable<Condition>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, QuestTarget obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestTarget : IQuestTargetGetter, ILoquiClass<IQuestTarget, IQuestTargetGetter>, ILoquiClass<QuestTarget, IQuestTargetGetter>
    {
        new Placed Target { get; set; }
        new QuestTarget.Flag Flags { get; set; }
        new INotifyingItem<QuestTarget.Flag> Flags_Property { get; }

        new INotifyingList<Condition> Conditions { get; }
    }

    public partial interface IQuestTargetGetter : ILoquiObject
    {
        #region Target
        Placed Target { get; }
        FormIDLink<Placed> Target_Property { get; }

        #endregion
        #region Flags
        QuestTarget.Flag Flags { get; }
        INotifyingItemGetter<QuestTarget.Flag> Flags_Property { get; }

        #endregion
        #region Conditions
        INotifyingListGetter<Condition> Conditions { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum QuestTarget_FieldIndex
    {
        Target = 0,
        Flags = 1,
        Conditions = 2,
    }
    #endregion

    #region Registration
    public class QuestTarget_Registration : ILoquiRegistration
    {
        public static readonly QuestTarget_Registration Instance = new QuestTarget_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 154,
            version: 0);

        public const string GUID = "f3941d6e-a418-41e7-8bfd-dcb8b5520b6a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(QuestTarget_Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestTarget_ErrorMask);

        public static readonly Type ClassType = typeof(QuestTarget);

        public static readonly Type GetterType = typeof(IQuestTargetGetter);

        public static readonly Type SetterType = typeof(IQuestTarget);

        public static readonly Type CommonType = typeof(QuestTargetCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.QuestTarget";

        public const string Name = "QuestTarget";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TARGET":
                    return (ushort)QuestTarget_FieldIndex.Target;
                case "FLAGS":
                    return (ushort)QuestTarget_FieldIndex.Flags;
                case "CONDITIONS":
                    return (ushort)QuestTarget_FieldIndex.Conditions;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Conditions:
                    return true;
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Conditions:
                    return true;
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                case QuestTarget_FieldIndex.Conditions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    return "Target";
                case QuestTarget_FieldIndex.Flags:
                    return "Flags";
                case QuestTarget_FieldIndex.Conditions:
                    return "Conditions";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                case QuestTarget_FieldIndex.Conditions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                case QuestTarget_FieldIndex.Conditions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    return typeof(FormIDLink<Placed>);
                case QuestTarget_FieldIndex.Flags:
                    return typeof(QuestTarget.Flag);
                case QuestTarget_FieldIndex.Conditions:
                    return typeof(NotifyingList<Condition>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType QSTA_HEADER = new RecordType("QSTA");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = QSTA_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class QuestTargetCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IQuestTarget item,
            IQuestTargetGetter rhs,
            IQuestTargetGetter def,
            ErrorMaskBuilder errorMask,
            QuestTarget_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Target ?? true)
            {
                errorMask?.PushIndex((int)QuestTarget_FieldIndex.Target);
                try
                {
                    item.Target_Property.Set(
                        value: rhs.Target,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)QuestTarget_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Conditions.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)QuestTarget_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetToWithDefault(
                        rhs: rhs.Conditions,
                        def: def?.Conditions,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Conditions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Condition);
                                    return Condition.Copy(
                                        r,
                                        copyMask?.Conditions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Conditions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IQuestTarget obj,
            NotifyingFireParameters cmds = null)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case QuestTarget_FieldIndex.Conditions:
                    obj.Conditions.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IQuestTarget obj,
            NotifyingUnsetParameters cmds = null)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    obj.Target = default(FormIDLink<Placed>);
                    break;
                case QuestTarget_FieldIndex.Flags:
                    obj.Flags = default(QuestTarget.Flag);
                    break;
                case QuestTarget_FieldIndex.Conditions:
                    obj.Conditions.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IQuestTarget obj)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                case QuestTarget_FieldIndex.Flags:
                    return true;
                case QuestTarget_FieldIndex.Conditions:
                    return obj.Conditions.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IQuestTargetGetter obj)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    return obj.Target;
                case QuestTarget_FieldIndex.Flags:
                    return obj.Flags;
                case QuestTarget_FieldIndex.Conditions:
                    return obj.Conditions;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IQuestTarget item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Target = default(FormIDLink<Placed>);
            item.Flags = default(QuestTarget.Flag);
            item.Conditions.Unset(cmds.ToUnsetParams());
        }

        public static QuestTarget_Mask<bool> GetEqualsMask(
            this IQuestTargetGetter item,
            IQuestTargetGetter rhs)
        {
            var ret = new QuestTarget_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IQuestTargetGetter item,
            IQuestTargetGetter rhs,
            QuestTarget_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Target = item.Target == rhs.Target;
            ret.Flags = item.Flags == rhs.Flags;
            if (item.Conditions.HasBeenSet == rhs.Conditions.HasBeenSet)
            {
                if (item.Conditions.HasBeenSet)
                {
                    ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                    ret.Conditions.Specific = item.Conditions.SelectAgainst<Condition, MaskItem<bool, Condition_Mask<bool>>>(rhs.Conditions, ((l, r) =>
                    {
                        MaskItem<bool, Condition_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Conditions.Overall);
                    ret.Conditions.Overall = ret.Conditions.Overall && ret.Conditions.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                    ret.Conditions.Overall = true;
                }
            }
            else
            {
                ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                ret.Conditions.Overall = false;
            }
        }

        public static string ToString(
            this IQuestTargetGetter item,
            string name = null,
            QuestTarget_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IQuestTargetGetter item,
            FileGeneration fg,
            string name = null,
            QuestTarget_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(QuestTarget)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(QuestTarget)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Target ?? true)
                {
                    fg.AppendLine($"Target => {item.Target_Property}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Conditions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IQuestTargetGetter item,
            QuestTarget_Mask<bool?> checkMask)
        {
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            return true;
        }

        public static QuestTarget_Mask<bool> GetHasBeenSetMask(IQuestTargetGetter item)
        {
            var ret = new QuestTarget_Mask<bool>();
            ret.Target = true;
            ret.Flags = true;
            ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.Select((i) => new MaskItem<bool, Condition_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            QuestTarget item,
            bool doMasks,
            out QuestTarget_ErrorMask errorMask,
            QuestTarget_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            QuestTarget item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.QuestTarget");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.QuestTarget");
            }
            if ((translationMask?.GetShouldTranslate((int)QuestTarget_FieldIndex.Target) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Target),
                    item: item.Target_Property?.FormID,
                    fieldIndex: (int)QuestTarget_FieldIndex.Target,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)QuestTarget_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<QuestTarget.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags_Property,
                    fieldIndex: (int)QuestTarget_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)QuestTarget_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<Condition>.Instance.Write(
                    node: elem,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)QuestTarget_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)QuestTarget_FieldIndex.Conditions),
                    transl: (XElement subNode, Condition subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Condition>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            QuestTarget item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out QuestTarget_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = QuestTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            QuestTarget item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            QuestTarget item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            if (item.QSTADataTypeState.HasFlag(QuestTarget.QSTADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(QuestTarget_Registration.QSTA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Target_Property,
                        fieldIndex: (int)QuestTarget_FieldIndex.Target,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<QuestTarget.Flag>.Instance.Write(
                        writer,
                        item.Flags_Property,
                        length: 4,
                        fieldIndex: (int)QuestTarget_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                fieldIndex: (int)QuestTarget_FieldIndex.Conditions,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<Condition>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class QuestTarget_Mask<T> : IMask<T>, IEquatable<QuestTarget_Mask<T>>
    {
        #region Ctors
        public QuestTarget_Mask()
        {
        }

        public QuestTarget_Mask(T initialValue)
        {
            this.Target = initialValue;
            this.Flags = initialValue;
            this.Conditions = new MaskItem<T, IEnumerable<MaskItem<T, Condition_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Target;
        public T Flags;
        public MaskItem<T, IEnumerable<MaskItem<T, Condition_Mask<T>>>> Conditions;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is QuestTarget_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(QuestTarget_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Target, rhs.Target)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Target?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Target)) return false;
            if (!eval(this.Flags)) return false;
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public QuestTarget_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new QuestTarget_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(QuestTarget_Mask<R> obj, Func<T, R> eval)
        {
            obj.Target = eval(this.Target);
            obj.Flags = eval(this.Flags);
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItem<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItem<R, Condition_Mask<R>>> l = new List<MaskItem<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific)
                    {
                        MaskItem<R, Condition_Mask<R>> mask = default(MaskItem<R, Condition_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Condition_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Conditions.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(QuestTarget_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, QuestTarget_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(QuestTarget_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Target ?? true)
                {
                    fg.AppendLine($"Target => {Target}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class QuestTarget_ErrorMask : IErrorMask, IErrorMask<QuestTarget_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Target;
        public Exception Flags;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    return Target;
                case QuestTarget_FieldIndex.Flags:
                    return Flags;
                case QuestTarget_FieldIndex.Conditions:
                    return Conditions;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    this.Target = ex;
                    break;
                case QuestTarget_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case QuestTarget_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            QuestTarget_FieldIndex enu = (QuestTarget_FieldIndex)index;
            switch (enu)
            {
                case QuestTarget_FieldIndex.Target:
                    this.Target = (Exception)obj;
                    break;
                case QuestTarget_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case QuestTarget_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Target != null) return true;
            if (Flags != null) return true;
            if (Conditions != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("QuestTarget_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Target => {Target}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public QuestTarget_ErrorMask Combine(QuestTarget_ErrorMask rhs)
        {
            var ret = new QuestTarget_ErrorMask();
            ret.Target = this.Target.Combine(rhs.Target);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            return ret;
        }
        public static QuestTarget_ErrorMask Combine(QuestTarget_ErrorMask lhs, QuestTarget_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static QuestTarget_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new QuestTarget_ErrorMask();
        }
        #endregion

    }
    public class QuestTarget_CopyMask
    {
        #region Members
        public bool Target;
        public bool Flags;
        public MaskItem<CopyOption, Condition_CopyMask> Conditions;
        #endregion

    }
    public class QuestTarget_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Target;
        public bool Flags;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Target, null));
            ret.Add((Flags, null));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
