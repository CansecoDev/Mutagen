/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Quest : 
        MajorRecord,
        IQuest,
        ILoquiObject<Quest>,
        ILoquiObjectSetter,
        INamed,
        IPropertySupporter<String>,
        IPropertySupporter<Quest.Flag>,
        IPropertySupporter<Byte>,
        IEquatable<Quest>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Quest_Registration.Instance;
        public new static Quest_Registration Registration => Quest_Registration.Instance;

        #region Ctor
        public Quest()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Script
        public FormIDSetLink<Script> Script_Property { get; } = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Script Script { get => Script_Property.Item; set => Script_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Script> IQuestGetter.Script_Property => this.Script_Property;
        #endregion
        #region Name
        protected String _Name;
        protected PropertyForwarder<Quest, String> _NameForwarder;
        public INotifyingSetItem<String> Name_Property => _NameForwarder ?? (_NameForwarder = new PropertyForwarder<Quest, String>(this, (int)Quest_FieldIndex.Name));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => this.SetName(value);
        }
        protected void SetName(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Quest_FieldIndex.Name];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Name == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Quest_FieldIndex.Name] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Name;
                _Name = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Quest_FieldIndex.Name,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Name = item;
            }
        }
        protected void UnsetName()
        {
            _hasBeenSetTracker[(int)Quest_FieldIndex.Name] = false;
            Name = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IQuest.Name_Property => this.Name_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IQuestGetter.Name_Property => this.Name_Property;
        #endregion
        #region Icon
        protected String _Icon;
        protected PropertyForwarder<Quest, String> _IconForwarder;
        public INotifyingSetItem<String> Icon_Property => _IconForwarder ?? (_IconForwarder = new PropertyForwarder<Quest, String>(this, (int)Quest_FieldIndex.Icon));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => this.SetIcon(value);
        }
        protected void SetIcon(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Quest_FieldIndex.Icon];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Icon == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Quest_FieldIndex.Icon] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = Icon;
                _Icon = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)Quest_FieldIndex.Icon,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Icon = item;
            }
        }
        protected void UnsetIcon()
        {
            _hasBeenSetTracker[(int)Quest_FieldIndex.Icon] = false;
            Icon = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IQuest.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IQuestGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region Flags
        protected Quest.Flag _Flags;
        protected PropertyForwarder<Quest, Quest.Flag> _FlagsForwarder;
        public INotifyingSetItem<Quest.Flag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<Quest, Quest.Flag>(this, (int)Quest_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Quest.Flag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            Quest.Flag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Quest_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Quest_FieldIndex.Flags] = hasBeenSet;
            }
            if (_QuestFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _QuestFlag_subscriptions.FireSubscriptions(
                    index: (int)Quest_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)Quest_FieldIndex.Flags] = false;
            Flags = default(Quest.Flag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Quest.Flag> IQuest.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Quest.Flag> IQuestGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Priority
        protected Byte _Priority;
        protected PropertyForwarder<Quest, Byte> _PriorityForwarder;
        public INotifyingSetItem<Byte> Priority_Property => _PriorityForwarder ?? (_PriorityForwarder = new PropertyForwarder<Quest, Byte>(this, (int)Quest_FieldIndex.Priority));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Priority
        {
            get => this._Priority;
            set => this.SetPriority(value);
        }
        protected void SetPriority(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)Quest_FieldIndex.Priority];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Priority == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)Quest_FieldIndex.Priority] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Priority;
                _Priority = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)Quest_FieldIndex.Priority,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Priority = item;
            }
        }
        protected void UnsetPriority()
        {
            _hasBeenSetTracker[(int)Quest_FieldIndex.Priority] = false;
            Priority = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IQuest.Priority_Property => this.Priority_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IQuestGetter.Priority_Property => this.Priority_Property;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Condition> _Conditions = new NotifyingList<Condition>();
        public INotifyingList<Condition> Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Condition> ConditionsEnumerable
        {
            get => _Conditions;
            set => _Conditions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Condition> IQuest.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Condition> IQuestGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Stages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<QuestStage> _Stages = new NotifyingList<QuestStage>();
        public INotifyingList<QuestStage> Stages => _Stages;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<QuestStage> StagesEnumerable
        {
            get => _Stages;
            set => _Stages.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<QuestStage> IQuest.Stages => _Stages;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<QuestStage> IQuestGetter.Stages => _Stages;
        #endregion

        #endregion
        #region Targets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<QuestTarget> _Targets = new NotifyingList<QuestTarget>();
        public INotifyingList<QuestTarget> Targets => _Targets;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<QuestTarget> TargetsEnumerable
        {
            get => _Targets;
            set => _Targets.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<QuestTarget> IQuest.Targets => _Targets;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<QuestTarget> IQuestGetter.Targets => _Targets;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => QuestCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => QuestCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => QuestCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            QuestCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Quest>.GetEqualsMask(Quest rhs) => QuestCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IQuestGetter>.GetEqualsMask(IQuestGetter rhs) => QuestCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return QuestCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Quest_Mask<bool> printMask = null)
        {
            return QuestCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            QuestCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Quest_Mask<bool> GetHasBeenSetMask()
        {
            return QuestCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Quest rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Quest rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Script_Property.HasBeenSet != rhs.Script_Property.HasBeenSet) return false;
            if (Script_Property.HasBeenSet)
            {
                if (!this.Script_Property.Equals(rhs.Script_Property)) return false;
            }
            if (Name_Property.HasBeenSet != rhs.Name_Property.HasBeenSet) return false;
            if (Name_Property.HasBeenSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (this.Flags != rhs.Flags) return false;
            if (this.Priority != rhs.Priority) return false;
            if (Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (Conditions.HasBeenSet)
            {
                if (!this.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            if (Stages.HasBeenSet != rhs.Stages.HasBeenSet) return false;
            if (Stages.HasBeenSet)
            {
                if (!this.Stages.SequenceEqual(rhs.Stages)) return false;
            }
            if (Targets.HasBeenSet != rhs.Targets.HasBeenSet) return false;
            if (Targets.HasBeenSet)
            {
                if (!this.Targets.SequenceEqual(rhs.Targets)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Script_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Script).CombineHashCode(ret);
            }
            if (Name_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Priority).CombineHashCode(ret);
            if (Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Conditions).CombineHashCode(ret);
            }
            if (Stages.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Stages).CombineHashCode(ret);
            }
            if (Targets.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Targets).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Quest Create_Xml(
            XElement root,
            Quest_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Quest Create_Xml(
            XElement root,
            out Quest_ErrorMask errorMask,
            bool doMasks = true,
            Quest_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Quest Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Quest();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Quest Create_Xml(
            string path,
            Quest_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Quest Create_Xml(
            string path,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Quest Create_Xml(
            Stream stream,
            Quest_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Quest Create_Xml(
            Stream stream,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Quest>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Quest_ErrorMask errorMask,
            bool doMasks = true,
            Quest_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            QuestCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Quest item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Script":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root: root,
                        property: item.Script_Property,
                        fieldIndex: (int)Quest_FieldIndex.Script,
                        errorMask: errorMask);
                    break;
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.UnsetIcon();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Flags);
                        if (EnumXmlTranslation<Quest.Flag>.Instance.Parse(
                            root: root,
                            item: out Quest.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Priority":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Priority);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte PriorityParse,
                            errorMask: errorMask))
                        {
                            item.Priority = PriorityParse;
                        }
                        else
                        {
                            item.UnsetPriority();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            root: root,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Stages":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Stages);
                        if (ListXmlTranslation<QuestStage>.Instance.Parse(
                            root: root,
                            enumer: out var StagesItem,
                            transl: LoquiXmlTranslation<QuestStage>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Stages.SetTo(StagesItem);
                        }
                        else
                        {
                            item.Stages.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Targets":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Targets);
                        if (ListXmlTranslation<QuestTarget>.Instance.Parse(
                            root: root,
                            enumer: out var TargetsItem,
                            transl: LoquiXmlTranslation<QuestTarget>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Targets.SetTo(TargetsItem);
                        }
                        else
                        {
                            item.Targets.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_Xml_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                    return _hasBeenSetTracker[index];
                case Quest_FieldIndex.Script:
                    return Script_Property.HasBeenSet;
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region IPropertySupporter String
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected override String GetString(int index)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Name:
                    return Name;
                case Quest_FieldIndex.Icon:
                    return Icon;
                default:
                    return base.GetString(index: index);
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected override void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Name:
                    SetName(item, hasBeenSet, cmds);
                    break;
                case Quest_FieldIndex.Icon:
                    SetIcon(item, hasBeenSet, cmds);
                    break;
                default:
                    base.SetString(
                        index: index,
                        item: item,
                        hasBeenSet: hasBeenSet,
                        cmds: cmds);
                    break;
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected override void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Name:
                    SetName(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                case Quest_FieldIndex.Icon:
                    SetIcon(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    base.UnsetString(
                        index: index,
                        cmds: cmds);
                    break;
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected override String DefaultValueString(int index)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                    return default(String);
                default:
                    return base.DefaultValueString(index: index);
            }
        }

        #endregion

        #region IPropertySupporter Quest.Flag
        protected ObjectCentralizationSubscriptions<Quest.Flag> _QuestFlag_subscriptions;
        Quest.Flag IPropertySupporter<Quest.Flag>.Get(int index)
        {
            return GetQuestFlag(index: index);
        }

        protected Quest.Flag GetQuestFlag(int index)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type Quest.Flag: {index}");
            }
        }

        void IPropertySupporter<Quest.Flag>.Set(
            int index,
            Quest.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetQuestFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetQuestFlag(
            int index,
            Quest.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Quest.Flag: {index}");
            }
        }

        bool IPropertySupporter<Quest.Flag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Quest.Flag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Quest.Flag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetQuestFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetQuestFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Flags:
                    SetFlags(
                        item: default(Quest.Flag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Quest.Flag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Quest.Flag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Quest.Flag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_QuestFlag_subscriptions == null)
            {
                _QuestFlag_subscriptions = new ObjectCentralizationSubscriptions<Quest.Flag>();
            }
            _QuestFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Quest.Flag>.Unsubscribe(
            int index,
            object owner)
        {
            _QuestFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Quest.Flag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Quest.Flag IPropertySupporter<Quest.Flag>.DefaultValue(int index)
        {
            return DefaultValueQuestFlag(index: index);
        }

        protected Quest.Flag DefaultValueQuestFlag(int index)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Flags:
                    return default(Quest.Flag);
                default:
                    throw new ArgumentException($"Unknown index for field type Quest.Flag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte
        protected ObjectCentralizationSubscriptions<Byte> _Byte_subscriptions;
        Byte IPropertySupporter<Byte>.Get(int index)
        {
            return GetByte(index: index);
        }

        protected Byte GetByte(int index)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Priority:
                    return Priority;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        void IPropertySupporter<Byte>.Set(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByte(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByte(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Priority:
                    SetPriority(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        bool IPropertySupporter<Byte>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByte(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByte(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Priority:
                    SetPriority(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Byte_subscriptions == null)
            {
                _Byte_subscriptions = new ObjectCentralizationSubscriptions<Byte>();
            }
            _Byte_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Unsubscribe(
            int index,
            object owner)
        {
            _Byte_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte IPropertySupporter<Byte>.DefaultValue(int index)
        {
            return DefaultValueByte(index: index);
        }

        protected Byte DefaultValueByte(int index)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Priority:
                    return default(Byte);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Quest_Registration.TRIGGERING_RECORD_TYPE;
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Script_Property;
            foreach (var item in Targets.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Quest Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Quest Create_Binary(
            MutagenFrame frame,
            out Quest_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Quest Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Quest>(
                record: new Quest(),
                frame: frame,
                errorMask: errorMask,
                recType: Quest_Registration.QUST_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Quest Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Quest Create_Binary(
            string path,
            out Quest_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Quest Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Quest Create_Binary(
            Stream stream,
            out Quest_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Quest_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Quest_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Quest_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            QuestCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Quest item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Quest item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x49524353: // SCRI
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        property: item.Script_Property,
                        fieldIndex: (int)Quest_FieldIndex.Script,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Script);
                case 0x4C4C5546: // FULL
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.UnsetName();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Name);
                case 0x4E4F4349: // ICON
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Icon);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.UnsetIcon();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Icon);
                case 0x41544144: // DATA
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.DATADataTypeState = DATADataType.Has;
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Quest_FieldIndex.Flags);
                            if (EnumBinaryTranslation<Quest.Flag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(1),
                                item: out Quest.Flag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.UnsetFlags();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Quest_FieldIndex.Priority);
                            if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Byte PriorityParse,
                                errorMask: errorMask))
                            {
                                item.Priority = PriorityParse;
                            }
                            else
                            {
                                item.UnsetPriority();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Priority);
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)Quest_FieldIndex.Conditions,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<Condition>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Conditions);
                case 0x58444E49: // INDX
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<QuestStage>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Quest_Registration.INDX_HEADER,
                        item: item.Stages,
                        fieldIndex: (int)Quest_FieldIndex.Stages,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<QuestStage>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Stages);
                case 0x41545351: // QSTA
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<QuestTarget>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Quest_Registration.QSTA_HEADER,
                        item: item.Targets,
                        fieldIndex: (int)Quest_FieldIndex.Targets,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<QuestTarget>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Targets);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Quest Copy(
            Quest_CopyMask copyMask = null,
            IQuestGetter def = null)
        {
            return Quest.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Quest Copy(
            IQuest item,
            Quest_CopyMask copyMask = null,
            IQuestGetter def = null)
        {
            Quest ret;
            if (item.GetType().Equals(typeof(Quest)))
            {
                ret = new Quest();
            }
            else
            {
                ret = (Quest)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Quest Copy_ToLoqui(
            IQuestGetter item,
            Quest_CopyMask copyMask = null,
            IQuestGetter def = null)
        {
            Quest ret;
            if (item.GetType().Equals(typeof(Quest)))
            {
                ret = new Quest() as Quest;
            }
            else
            {
                ret = (Quest)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IQuestGetter rhs,
            Quest_CopyMask copyMask,
            IQuestGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IQuestGetter rhs,
            out Quest_ErrorMask errorMask,
            Quest_CopyMask copyMask = null,
            IQuestGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IQuestGetter rhs,
            ErrorMaskBuilder errorMask,
            Quest_CopyMask copyMask = null,
            IQuestGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            QuestCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    this.Script_Property.Set(
                        (FormIDSetLink<Script>)obj,
                        cmds);
                    break;
                case Quest_FieldIndex.Name:
                    this.SetName(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Quest_FieldIndex.Icon:
                    this.SetIcon(
                        (String)obj,
                        cmds: cmds);
                    break;
                case Quest_FieldIndex.Flags:
                    this.SetFlags(
                        (Quest.Flag)obj,
                        cmds: cmds);
                    break;
                case Quest_FieldIndex.Priority:
                    this.SetPriority(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case Quest_FieldIndex.Conditions:
                    this._Conditions.SetTo((IEnumerable<Condition>)obj, cmds);
                    break;
                case Quest_FieldIndex.Stages:
                    this._Stages.SetTo((IEnumerable<QuestStage>)obj, cmds);
                    break;
                case Quest_FieldIndex.Targets:
                    this._Targets.SetTo((IEnumerable<QuestTarget>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            QuestCommon.Clear(this, cmds);
        }


        public new static Quest Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Quest();
            foreach (var pair in fields)
            {
                CopyInInternal_Quest(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Quest(Quest obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Quest_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    obj.Script_Property.Set(
                        (FormIDSetLink<Script>)pair.Value,
                        null);
                    break;
                case Quest_FieldIndex.Name:
                    obj.SetName(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Quest_FieldIndex.Icon:
                    obj.SetIcon(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case Quest_FieldIndex.Flags:
                    obj.SetFlags(
                        (Quest.Flag)pair.Value,
                        cmds: null);
                    break;
                case Quest_FieldIndex.Priority:
                    obj.SetPriority(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case Quest_FieldIndex.Conditions:
                    obj._Conditions.SetTo((IEnumerable<Condition>)pair.Value, null);
                    break;
                case Quest_FieldIndex.Stages:
                    obj._Stages.SetTo((IEnumerable<QuestStage>)pair.Value, null);
                    break;
                case Quest_FieldIndex.Targets:
                    obj._Targets.SetTo((IEnumerable<QuestTarget>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Quest obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IQuest : IQuestGetter, IMajorRecord, ILoquiClass<IQuest, IQuestGetter>, ILoquiClass<Quest, IQuestGetter>
    {
        new Script Script { get; set; }
        new String Name { get; set; }
        new INotifyingSetItem<String> Name_Property { get; }

        new String Icon { get; set; }
        new INotifyingSetItem<String> Icon_Property { get; }

        new Quest.Flag Flags { get; set; }
        new INotifyingItem<Quest.Flag> Flags_Property { get; }

        new Byte Priority { get; set; }
        new INotifyingItem<Byte> Priority_Property { get; }

        new INotifyingList<Condition> Conditions { get; }
        new INotifyingList<QuestStage> Stages { get; }
        new INotifyingList<QuestTarget> Targets { get; }
    }

    public partial interface IQuestGetter : IMajorRecordGetter
    {
        #region Script
        Script Script { get; }
        FormIDSetLink<Script> Script_Property { get; }

        #endregion
        #region Name
        String Name { get; }
        INotifyingSetItemGetter<String> Name_Property { get; }

        #endregion
        #region Icon
        String Icon { get; }
        INotifyingSetItemGetter<String> Icon_Property { get; }

        #endregion
        #region Flags
        Quest.Flag Flags { get; }
        INotifyingItemGetter<Quest.Flag> Flags_Property { get; }

        #endregion
        #region Priority
        Byte Priority { get; }
        INotifyingItemGetter<Byte> Priority_Property { get; }

        #endregion
        #region Conditions
        INotifyingListGetter<Condition> Conditions { get; }
        #endregion
        #region Stages
        INotifyingListGetter<QuestStage> Stages { get; }
        #endregion
        #region Targets
        INotifyingListGetter<QuestTarget> Targets { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Quest_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Script = 5,
        Name = 6,
        Icon = 7,
        Flags = 8,
        Priority = 9,
        Conditions = 10,
        Stages = 11,
        Targets = 12,
    }
    #endregion

    #region Registration
    public class Quest_Registration : ILoquiRegistration
    {
        public static readonly Quest_Registration Instance = new Quest_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 148,
            version: 0);

        public const string GUID = "bcd4f22e-1051-4402-9032-895ecb9ac0ac";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(Quest_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Quest_ErrorMask);

        public static readonly Type ClassType = typeof(Quest);

        public static readonly Type GetterType = typeof(IQuestGetter);

        public static readonly Type SetterType = typeof(IQuest);

        public static readonly Type CommonType = typeof(QuestCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Quest";

        public const string Name = "Quest";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SCRIPT":
                    return (ushort)Quest_FieldIndex.Script;
                case "NAME":
                    return (ushort)Quest_FieldIndex.Name;
                case "ICON":
                    return (ushort)Quest_FieldIndex.Icon;
                case "FLAGS":
                    return (ushort)Quest_FieldIndex.Flags;
                case "PRIORITY":
                    return (ushort)Quest_FieldIndex.Priority;
                case "CONDITIONS":
                    return (ushort)Quest_FieldIndex.Conditions;
                case "STAGES":
                    return (ushort)Quest_FieldIndex.Stages;
                case "TARGETS":
                    return (ushort)Quest_FieldIndex.Targets;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                    return true;
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                    return true;
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    return "Script";
                case Quest_FieldIndex.Name:
                    return "Name";
                case Quest_FieldIndex.Icon:
                    return "Icon";
                case Quest_FieldIndex.Flags:
                    return "Flags";
                case Quest_FieldIndex.Priority:
                    return "Priority";
                case Quest_FieldIndex.Conditions:
                    return "Conditions";
                case Quest_FieldIndex.Stages:
                    return "Stages";
                case Quest_FieldIndex.Targets:
                    return "Targets";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    return typeof(FormIDSetLink<Script>);
                case Quest_FieldIndex.Name:
                    return typeof(String);
                case Quest_FieldIndex.Icon:
                    return typeof(String);
                case Quest_FieldIndex.Flags:
                    return typeof(Quest.Flag);
                case Quest_FieldIndex.Priority:
                    return typeof(Byte);
                case Quest_FieldIndex.Conditions:
                    return typeof(NotifyingList<Condition>);
                case Quest_FieldIndex.Stages:
                    return typeof(NotifyingList<QuestStage>);
                case Quest_FieldIndex.Targets:
                    return typeof(NotifyingList<QuestTarget>);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType QUST_HEADER = new RecordType("QUST");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType QSTA_HEADER = new RecordType("QSTA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = QUST_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class QuestCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IQuest item,
            IQuestGetter rhs,
            IQuestGetter def,
            ErrorMaskBuilder errorMask,
            Quest_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Script ?? true)
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Script);
                try
                {
                    item.Script_Property.SetToWithDefault(
                        rhs: rhs.Script_Property,
                        def: def?.Script_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Name);
                try
                {
                    item.Name_Property.SetToWithDefault(
                        rhs: rhs.Name_Property,
                        def: def?.Name_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Icon);
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Priority ?? true)
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Priority);
                try
                {
                    item.Priority_Property.Set(
                        value: rhs.Priority,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Conditions.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetToWithDefault(
                        rhs: rhs.Conditions,
                        def: def?.Conditions,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Conditions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Condition);
                                    return Condition.Copy(
                                        r,
                                        copyMask?.Conditions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Conditions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Stages.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Stages);
                try
                {
                    item.Stages.SetToWithDefault(
                        rhs: rhs.Stages,
                        def: def?.Stages,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Stages.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(QuestStage);
                                    return QuestStage.Copy(
                                        r,
                                        copyMask?.Stages?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Stages.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Targets.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Targets);
                try
                {
                    item.Targets.SetToWithDefault(
                        rhs: rhs.Targets,
                        def: def?.Targets,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Targets.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(QuestTarget);
                                    return QuestTarget.Copy(
                                        r,
                                        copyMask?.Targets?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Targets.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IQuest obj,
            NotifyingFireParameters cmds = null)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Quest_FieldIndex.Script:
                    obj.Script_Property.HasBeenSet = on;
                    break;
                case Quest_FieldIndex.Name:
                    obj.Name_Property.HasBeenSet = on;
                    break;
                case Quest_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case Quest_FieldIndex.Conditions:
                    obj.Conditions.HasBeenSet = on;
                    break;
                case Quest_FieldIndex.Stages:
                    obj.Stages.HasBeenSet = on;
                    break;
                case Quest_FieldIndex.Targets:
                    obj.Targets.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IQuest obj,
            NotifyingUnsetParameters cmds = null)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    obj.Script_Property.Unset(cmds);
                    break;
                case Quest_FieldIndex.Name:
                    obj.Name_Property.Unset(cmds);
                    break;
                case Quest_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Quest_FieldIndex.Flags:
                    obj.Flags = default(Quest.Flag);
                    break;
                case Quest_FieldIndex.Priority:
                    obj.Priority = default(Byte);
                    break;
                case Quest_FieldIndex.Conditions:
                    obj.Conditions.Unset(cmds);
                    break;
                case Quest_FieldIndex.Stages:
                    obj.Stages.Unset(cmds);
                    break;
                case Quest_FieldIndex.Targets:
                    obj.Targets.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IQuest obj)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                    return true;
                case Quest_FieldIndex.Script:
                    return obj.Script_Property.HasBeenSet;
                case Quest_FieldIndex.Name:
                    return obj.Name_Property.HasBeenSet;
                case Quest_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case Quest_FieldIndex.Conditions:
                    return obj.Conditions.HasBeenSet;
                case Quest_FieldIndex.Stages:
                    return obj.Stages.HasBeenSet;
                case Quest_FieldIndex.Targets:
                    return obj.Targets.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IQuestGetter obj)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    return obj.Script;
                case Quest_FieldIndex.Name:
                    return obj.Name;
                case Quest_FieldIndex.Icon:
                    return obj.Icon;
                case Quest_FieldIndex.Flags:
                    return obj.Flags;
                case Quest_FieldIndex.Priority:
                    return obj.Priority;
                case Quest_FieldIndex.Conditions:
                    return obj.Conditions;
                case Quest_FieldIndex.Stages:
                    return obj.Stages;
                case Quest_FieldIndex.Targets:
                    return obj.Targets;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IQuest item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Script_Property.Unset(cmds.ToUnsetParams());
            item.Name_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.Flags = default(Quest.Flag);
            item.Priority = default(Byte);
            item.Conditions.Unset(cmds.ToUnsetParams());
            item.Stages.Unset(cmds.ToUnsetParams());
            item.Targets.Unset(cmds.ToUnsetParams());
        }

        public static Quest_Mask<bool> GetEqualsMask(
            this IQuestGetter item,
            IQuestGetter rhs)
        {
            var ret = new Quest_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IQuestGetter item,
            IQuestGetter rhs,
            Quest_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Script = item.Script_Property.Equals(rhs.Script_Property, (l, r) => l == r);
            ret.Name = item.Name_Property.Equals(rhs.Name_Property, (l, r) => object.Equals(l, r));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.Flags = item.Flags == rhs.Flags;
            ret.Priority = item.Priority == rhs.Priority;
            if (item.Conditions.HasBeenSet == rhs.Conditions.HasBeenSet)
            {
                if (item.Conditions.HasBeenSet)
                {
                    ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                    ret.Conditions.Specific = item.Conditions.SelectAgainst<Condition, MaskItem<bool, Condition_Mask<bool>>>(rhs.Conditions, ((l, r) =>
                    {
                        MaskItem<bool, Condition_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Conditions.Overall);
                    ret.Conditions.Overall = ret.Conditions.Overall && ret.Conditions.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                    ret.Conditions.Overall = true;
                }
            }
            else
            {
                ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>();
                ret.Conditions.Overall = false;
            }
            if (item.Stages.HasBeenSet == rhs.Stages.HasBeenSet)
            {
                if (item.Stages.HasBeenSet)
                {
                    ret.Stages = new MaskItem<bool, IEnumerable<MaskItem<bool, QuestStage_Mask<bool>>>>();
                    ret.Stages.Specific = item.Stages.SelectAgainst<QuestStage, MaskItem<bool, QuestStage_Mask<bool>>>(rhs.Stages, ((l, r) =>
                    {
                        MaskItem<bool, QuestStage_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Stages.Overall);
                    ret.Stages.Overall = ret.Stages.Overall && ret.Stages.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Stages = new MaskItem<bool, IEnumerable<MaskItem<bool, QuestStage_Mask<bool>>>>();
                    ret.Stages.Overall = true;
                }
            }
            else
            {
                ret.Stages = new MaskItem<bool, IEnumerable<MaskItem<bool, QuestStage_Mask<bool>>>>();
                ret.Stages.Overall = false;
            }
            if (item.Targets.HasBeenSet == rhs.Targets.HasBeenSet)
            {
                if (item.Targets.HasBeenSet)
                {
                    ret.Targets = new MaskItem<bool, IEnumerable<MaskItem<bool, QuestTarget_Mask<bool>>>>();
                    ret.Targets.Specific = item.Targets.SelectAgainst<QuestTarget, MaskItem<bool, QuestTarget_Mask<bool>>>(rhs.Targets, ((l, r) =>
                    {
                        MaskItem<bool, QuestTarget_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Targets.Overall);
                    ret.Targets.Overall = ret.Targets.Overall && ret.Targets.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Targets = new MaskItem<bool, IEnumerable<MaskItem<bool, QuestTarget_Mask<bool>>>>();
                    ret.Targets.Overall = true;
                }
            }
            else
            {
                ret.Targets = new MaskItem<bool, IEnumerable<MaskItem<bool, QuestTarget_Mask<bool>>>>();
                ret.Targets.Overall = false;
            }
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IQuestGetter item,
            string name = null,
            Quest_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IQuestGetter item,
            FileGeneration fg,
            string name = null,
            Quest_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Quest)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Quest)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {item.Script_Property}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Priority ?? true)
                {
                    fg.AppendLine($"Priority => {item.Priority}");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Conditions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Stages?.Overall ?? true)
                {
                    fg.AppendLine("Stages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Stages)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Targets?.Overall ?? true)
                {
                    fg.AppendLine("Targets =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Targets)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IQuestGetter item,
            Quest_Mask<bool?> checkMask)
        {
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script_Property.HasBeenSet) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_Property.HasBeenSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            if (checkMask.Stages.Overall.HasValue && checkMask.Stages.Overall.Value != item.Stages.HasBeenSet) return false;
            if (checkMask.Targets.Overall.HasValue && checkMask.Targets.Overall.Value != item.Targets.HasBeenSet) return false;
            return true;
        }

        public static Quest_Mask<bool> GetHasBeenSetMask(IQuestGetter item)
        {
            var ret = new Quest_Mask<bool>();
            ret.Script = item.Script_Property.HasBeenSet;
            ret.Name = item.Name_Property.HasBeenSet;
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.Flags = true;
            ret.Priority = true;
            ret.Conditions = new MaskItem<bool, IEnumerable<MaskItem<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.Select((i) => new MaskItem<bool, Condition_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Stages = new MaskItem<bool, IEnumerable<MaskItem<bool, QuestStage_Mask<bool>>>>(item.Stages.HasBeenSet, item.Stages.Select((i) => new MaskItem<bool, QuestStage_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Targets = new MaskItem<bool, IEnumerable<MaskItem<bool, QuestTarget_Mask<bool>>>>(item.Targets.HasBeenSet, item.Targets.Select((i) => new MaskItem<bool, QuestTarget_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static Quest_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Quest_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Quest_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Quest item,
            bool doMasks,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Quest item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Quest");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Quest");
            }
            if (item.Script_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Script) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Script),
                    item: item.Script_Property?.FormID,
                    fieldIndex: (int)Quest_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Name_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name_Property,
                    fieldIndex: (int)Quest_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Icon_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Icon),
                    item: item.Icon_Property,
                    fieldIndex: (int)Quest_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Quest.Flag>.Instance.Write(
                    node: elem,
                    name: nameof(item.Flags),
                    item: item.Flags_Property,
                    fieldIndex: (int)Quest_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Priority) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Priority),
                    item: item.Priority_Property,
                    fieldIndex: (int)Quest_FieldIndex.Priority,
                    errorMask: errorMask);
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<Condition>.Instance.Write(
                    node: elem,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)Quest_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Quest_FieldIndex.Conditions),
                    transl: (XElement subNode, Condition subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Condition>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.Stages.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Stages) ?? true))
            {
                ListXmlTranslation<QuestStage>.Instance.Write(
                    node: elem,
                    name: nameof(item.Stages),
                    item: item.Stages,
                    fieldIndex: (int)Quest_FieldIndex.Stages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Quest_FieldIndex.Stages),
                    transl: (XElement subNode, QuestStage subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<QuestStage>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.Targets.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Targets) ?? true))
            {
                ListXmlTranslation<QuestTarget>.Instance.Write(
                    node: elem,
                    name: nameof(item.Targets),
                    item: item.Targets,
                    fieldIndex: (int)Quest_FieldIndex.Targets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Quest_FieldIndex.Targets),
                    transl: (XElement subNode, QuestTarget subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<QuestTarget>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Quest item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Quest_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Quest item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Quest_Registration.QUST_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Quest item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script_Property,
                fieldIndex: (int)Quest_FieldIndex.Script,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Quest_Registration.SCRI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name_Property,
                fieldIndex: (int)Quest_FieldIndex.Name,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Quest_Registration.FULL_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)Quest_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Quest_Registration.ICON_HEADER),
                nullable: false);
            if (item.DATADataTypeState.HasFlag(Quest.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Quest_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Quest.Flag>.Instance.Write(
                        writer,
                        item.Flags_Property,
                        length: 1,
                        fieldIndex: (int)Quest_FieldIndex.Flags,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Priority_Property,
                        fieldIndex: (int)Quest_FieldIndex.Priority,
                        errorMask: errorMask);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                fieldIndex: (int)Quest_FieldIndex.Conditions,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<Condition>.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<QuestStage>.Instance.Write(
                writer: writer,
                items: item.Stages,
                fieldIndex: (int)Quest_FieldIndex.Stages,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<QuestStage>.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<QuestTarget>.Instance.Write(
                writer: writer,
                items: item.Targets,
                fieldIndex: (int)Quest_FieldIndex.Targets,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<QuestTarget>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Quest_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Quest_Mask<T>>
    {
        #region Ctors
        public Quest_Mask()
        {
        }

        public Quest_Mask(T initialValue)
        {
            this.Script = initialValue;
            this.Name = initialValue;
            this.Icon = initialValue;
            this.Flags = initialValue;
            this.Priority = initialValue;
            this.Conditions = new MaskItem<T, IEnumerable<MaskItem<T, Condition_Mask<T>>>>(initialValue, null);
            this.Stages = new MaskItem<T, IEnumerable<MaskItem<T, QuestStage_Mask<T>>>>(initialValue, null);
            this.Targets = new MaskItem<T, IEnumerable<MaskItem<T, QuestTarget_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Script;
        public T Name;
        public T Icon;
        public T Flags;
        public T Priority;
        public MaskItem<T, IEnumerable<MaskItem<T, Condition_Mask<T>>>> Conditions;
        public MaskItem<T, IEnumerable<MaskItem<T, QuestStage_Mask<T>>>> Stages;
        public MaskItem<T, IEnumerable<MaskItem<T, QuestTarget_Mask<T>>>> Targets;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Quest_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Quest_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Priority, rhs.Priority)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            if (!object.Equals(this.Stages, rhs.Stages)) return false;
            if (!object.Equals(this.Targets, rhs.Targets)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Priority?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            ret = ret.CombineHashCode(this.Stages?.GetHashCode());
            ret = ret.CombineHashCode(this.Targets?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Priority)) return false;
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Stages != null)
            {
                if (!eval(this.Stages.Overall)) return false;
                if (this.Stages.Specific != null)
                {
                    foreach (var item in this.Stages.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Targets != null)
            {
                if (!eval(this.Targets.Overall)) return false;
                if (this.Targets.Specific != null)
                {
                    foreach (var item in this.Targets.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Quest_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Quest_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Quest_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Script = eval(this.Script);
            obj.Name = eval(this.Name);
            obj.Icon = eval(this.Icon);
            obj.Flags = eval(this.Flags);
            obj.Priority = eval(this.Priority);
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItem<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItem<R, Condition_Mask<R>>> l = new List<MaskItem<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific)
                    {
                        MaskItem<R, Condition_Mask<R>> mask = default(MaskItem<R, Condition_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Condition_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Stages != null)
            {
                obj.Stages = new MaskItem<R, IEnumerable<MaskItem<R, QuestStage_Mask<R>>>>();
                obj.Stages.Overall = eval(this.Stages.Overall);
                if (Stages.Specific != null)
                {
                    List<MaskItem<R, QuestStage_Mask<R>>> l = new List<MaskItem<R, QuestStage_Mask<R>>>();
                    obj.Stages.Specific = l;
                    foreach (var item in Stages.Specific)
                    {
                        MaskItem<R, QuestStage_Mask<R>> mask = default(MaskItem<R, QuestStage_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, QuestStage_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Targets != null)
            {
                obj.Targets = new MaskItem<R, IEnumerable<MaskItem<R, QuestTarget_Mask<R>>>>();
                obj.Targets.Overall = eval(this.Targets.Overall);
                if (Targets.Specific != null)
                {
                    List<MaskItem<R, QuestTarget_Mask<R>>> l = new List<MaskItem<R, QuestTarget_Mask<R>>>();
                    obj.Targets.Specific = l;
                    foreach (var item in Targets.Specific)
                    {
                        MaskItem<R, QuestTarget_Mask<R>> mask = default(MaskItem<R, QuestTarget_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, QuestTarget_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Conditions.Specific = null;
            this.Stages.Specific = null;
            this.Targets.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Quest_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Quest_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Quest_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Priority ?? true)
                {
                    fg.AppendLine($"Priority => {Priority}");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Stages?.Overall ?? true)
                {
                    fg.AppendLine("Stages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Stages.Overall != null)
                        {
                            fg.AppendLine(Stages.Overall.ToString());
                        }
                        if (Stages.Specific != null)
                        {
                            foreach (var subItem in Stages.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Targets?.Overall ?? true)
                {
                    fg.AppendLine("Targets =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Targets.Overall != null)
                        {
                            fg.AppendLine(Targets.Overall.ToString());
                        }
                        if (Targets.Specific != null)
                        {
                            foreach (var subItem in Targets.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Quest_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Quest_ErrorMask>
    {
        #region Members
        public Exception Script;
        public Exception Name;
        public Exception Icon;
        public Exception Flags;
        public Exception Priority;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestStage_ErrorMask>>> Stages;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestTarget_ErrorMask>>> Targets;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    return Script;
                case Quest_FieldIndex.Name:
                    return Name;
                case Quest_FieldIndex.Icon:
                    return Icon;
                case Quest_FieldIndex.Flags:
                    return Flags;
                case Quest_FieldIndex.Priority:
                    return Priority;
                case Quest_FieldIndex.Conditions:
                    return Conditions;
                case Quest_FieldIndex.Stages:
                    return Stages;
                case Quest_FieldIndex.Targets:
                    return Targets;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Quest_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Quest_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Quest_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Quest_FieldIndex.Priority:
                    this.Priority = ex;
                    break;
                case Quest_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                case Quest_FieldIndex.Stages:
                    this.Stages = new MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestStage_ErrorMask>>>(ex, null);
                    break;
                case Quest_FieldIndex.Targets:
                    this.Targets = new MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestTarget_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Quest_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Quest_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Quest_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Quest_FieldIndex.Priority:
                    this.Priority = (Exception)obj;
                    break;
                case Quest_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                case Quest_FieldIndex.Stages:
                    this.Stages = (MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestStage_ErrorMask>>>)obj;
                    break;
                case Quest_FieldIndex.Targets:
                    this.Targets = (MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestTarget_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Script != null) return true;
            if (Name != null) return true;
            if (Icon != null) return true;
            if (Flags != null) return true;
            if (Priority != null) return true;
            if (Conditions != null) return true;
            if (Stages != null) return true;
            if (Targets != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Quest_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Priority => {Priority}");
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Stages =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Stages.Overall != null)
                {
                    fg.AppendLine(Stages.Overall.ToString());
                }
                if (Stages.Specific != null)
                {
                    foreach (var subItem in Stages.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Targets =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Targets.Overall != null)
                {
                    fg.AppendLine(Targets.Overall.ToString());
                }
                if (Targets.Specific != null)
                {
                    foreach (var subItem in Targets.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Quest_ErrorMask Combine(Quest_ErrorMask rhs)
        {
            var ret = new Quest_ErrorMask();
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Priority = this.Priority.Combine(rhs.Priority);
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            ret.Stages = new MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestStage_ErrorMask>>>(this.Stages.Overall.Combine(rhs.Stages.Overall), new List<MaskItem<Exception, QuestStage_ErrorMask>>(this.Stages.Specific.And(rhs.Stages.Specific)));
            ret.Targets = new MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestTarget_ErrorMask>>>(this.Targets.Overall.Combine(rhs.Targets.Overall), new List<MaskItem<Exception, QuestTarget_ErrorMask>>(this.Targets.Specific.And(rhs.Targets.Specific)));
            return ret;
        }
        public static Quest_ErrorMask Combine(Quest_ErrorMask lhs, Quest_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Quest_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Quest_ErrorMask();
        }
        #endregion

    }
    public class Quest_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Script;
        public bool Name;
        public bool Icon;
        public bool Flags;
        public bool Priority;
        public MaskItem<CopyOption, Condition_CopyMask> Conditions;
        public MaskItem<CopyOption, QuestStage_CopyMask> Stages;
        public MaskItem<CopyOption, QuestTarget_CopyMask> Targets;
        #endregion

    }
    public class Quest_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Script;
        public bool Name;
        public bool Icon;
        public bool Flags;
        public bool Priority;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        public MaskItem<bool, QuestStage_TranslationMask> Stages;
        public MaskItem<bool, QuestTarget_TranslationMask> Targets;
        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Script, null));
            ret.Add((Name, null));
            ret.Add((Icon, null));
            ret.Add((Flags, null));
            ret.Add((Priority, null));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            ret.Add((Stages?.Overall ?? true, Stages?.Specific?.GetCrystal()));
            ret.Add((Targets?.Overall ?? true, Targets?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
