/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RaceHair : 
        ReactiveObject,
        IRaceHair,
        ILoquiObject<RaceHair>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<RaceHair>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceHair_Registration.Instance;
        public static RaceHair_Registration Registration => RaceHair_Registration.Instance;

        #region Ctor
        public RaceHair()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Male
        public FormIDLink<Hair> Male_Property { get; } = new FormIDLink<Hair>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Hair Male { get => Male_Property.Item; set => Male_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Hair> IRaceHairGetter.Male_Property => this.Male_Property;
        #endregion
        #region Female
        public FormIDLink<Hair> Female_Property { get; } = new FormIDLink<Hair>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Hair Female { get => Female_Property.Item; set => Female_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Hair> IRaceHairGetter.Female_Property => this.Female_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RaceHairCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RaceHairCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RaceHairCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceHairCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<RaceHair>.GetEqualsMask(RaceHair rhs) => RaceHairCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRaceHairGetter>.GetEqualsMask(IRaceHairGetter rhs) => RaceHairCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            RaceHair_Mask<bool> printMask = null)
        {
            return RaceHairCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceHairCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public RaceHair_Mask<bool> GetHasBeenSetMask()
        {
            return RaceHairCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RaceHair rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceHair rhs)
        {
            if (rhs == null) return false;
            if (!this.Male_Property.Equals(rhs.Male_Property)) return false;
            if (!this.Female_Property.Equals(rhs.Female_Property)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Male).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Female).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static RaceHair Create_Xml(
            XElement root,
            RaceHair_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RaceHair Create_Xml(
            XElement root,
            out RaceHair_ErrorMask errorMask,
            bool doMasks = true,
            RaceHair_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RaceHair_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceHair Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new RaceHair();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RaceHair Create_Xml(
            string path,
            RaceHair_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static RaceHair Create_Xml(
            string path,
            out RaceHair_ErrorMask errorMask,
            RaceHair_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceHair Create_Xml(
            Stream stream,
            RaceHair_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static RaceHair Create_Xml(
            Stream stream,
            out RaceHair_ErrorMask errorMask,
            RaceHair_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out RaceHair_ErrorMask errorMask,
            RaceHair_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = RaceHair_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RaceHair>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out RaceHair_ErrorMask errorMask,
            RaceHair_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out RaceHair_ErrorMask errorMask,
            RaceHair_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out RaceHair_ErrorMask errorMask,
            bool doMasks = true,
            RaceHair_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceHair_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out RaceHair_ErrorMask errorMask,
            RaceHair_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out RaceHair_ErrorMask errorMask,
            RaceHair_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            RaceHair_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            RaceHairCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            RaceHair item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Male":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Male_Property,
                        fieldIndex: (int)RaceHair_FieldIndex.Male,
                        errorMask: errorMask);
                    break;
                case "Female":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        root: root,
                        item: item.Female_Property,
                        fieldIndex: (int)RaceHair_FieldIndex.Female,
                        errorMask: errorMask);
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RaceHair_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Male_Property;
            yield return Female_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            where M : IMod<M>
        {
            Male_Property.Link(
                modList,
                sourceMod,
                cmds);
            Female_Property.Link(
                modList,
                sourceMod,
                cmds);
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceHair Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RaceHair Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RaceHair_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceHair_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceHair Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RaceHair();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    recordTypeConverter.ConvertToCustom(RaceHair_Registration.DNAM_HEADER)));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RaceHair Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static RaceHair Create_Binary(
            string path,
            MasterReferences masterReferences,
            out RaceHair_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        public static RaceHair Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences);
            }
        }

        public static RaceHair Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out RaceHair_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    masterReferences: masterReferences,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RaceHair_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceHair_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out RaceHair_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        masterReferences: masterReferences,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out RaceHair_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    masterReferences: masterReferences,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary_Internal(
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RaceHairCommon.Write_Binary(
                item: this,
                writer: writer,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RaceHair item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                masterReferences: masterReferences,
                item: item.Male_Property,
                fieldIndex: (int)RaceHair_FieldIndex.Male,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                masterReferences: masterReferences,
                item: item.Female_Property,
                fieldIndex: (int)RaceHair_FieldIndex.Female,
                errorMask: errorMask);
        }

        #endregion

        public RaceHair Copy(
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null)
        {
            return RaceHair.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RaceHair Copy(
            IRaceHair item,
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null)
        {
            RaceHair ret;
            if (item.GetType().Equals(typeof(RaceHair)))
            {
                ret = new RaceHair();
            }
            else
            {
                ret = (RaceHair)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RaceHair Copy_ToLoqui(
            IRaceHairGetter item,
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null)
        {
            RaceHair ret;
            if (item.GetType().Equals(typeof(RaceHair)))
            {
                ret = new RaceHair() as RaceHair;
            }
            else
            {
                ret = (RaceHair)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRaceHairGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRaceHairGetter rhs,
            RaceHair_CopyMask copyMask,
            IRaceHairGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRaceHairGetter rhs,
            out RaceHair_ErrorMask errorMask,
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RaceHairCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RaceHair_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRaceHairGetter rhs,
            ErrorMaskBuilder errorMask,
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RaceHairCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    this.Male_Property.Set(
                        (FormIDLink<Hair>)obj,
                        cmds);
                    break;
                case RaceHair_FieldIndex.Female:
                    this.Female_Property.Set(
                        (FormIDLink<Hair>)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceHairCommon.Clear(this, cmds);
        }


        public static RaceHair Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RaceHair();
            foreach (var pair in fields)
            {
                CopyInInternal_RaceHair(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RaceHair(RaceHair obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RaceHair_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    obj.Male_Property.Set(
                        (FormIDLink<Hair>)pair.Value,
                        null);
                    break;
                case RaceHair_FieldIndex.Female:
                    obj.Female_Property.Set(
                        (FormIDLink<Hair>)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RaceHair obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRaceHair : IRaceHairGetter, ILoquiClass<IRaceHair, IRaceHairGetter>, ILoquiClass<RaceHair, IRaceHairGetter>
    {
        new Hair Male { get; set; }
        new Hair Female { get; set; }
    }

    public partial interface IRaceHairGetter : ILoquiObject
    {
        #region Male
        Hair Male { get; }
        FormIDLink<Hair> Male_Property { get; }

        #endregion
        #region Female
        Hair Female { get; }
        FormIDLink<Hair> Female_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RaceHair_FieldIndex
    {
        Male = 0,
        Female = 1,
    }
    #endregion

    #region Registration
    public class RaceHair_Registration : ILoquiRegistration
    {
        public static readonly RaceHair_Registration Instance = new RaceHair_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 33,
            version: 0);

        public const string GUID = "9061ff50-b8b8-429c-9b68-4eb0adf42740";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RaceHair_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceHair_ErrorMask);

        public static readonly Type ClassType = typeof(RaceHair);

        public static readonly Type GetterType = typeof(IRaceHairGetter);

        public static readonly Type SetterType = typeof(IRaceHair);

        public static readonly Type CommonType = typeof(RaceHairCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RaceHair";

        public const string Name = "RaceHair";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MALE":
                    return (ushort)RaceHair_FieldIndex.Male;
                case "FEMALE":
                    return (ushort)RaceHair_FieldIndex.Female;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    return "Male";
                case RaceHair_FieldIndex.Female:
                    return "Female";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    return typeof(FormIDLink<Hair>);
                case RaceHair_FieldIndex.Female:
                    return typeof(FormIDLink<Hair>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DNAM_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RaceHairCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRaceHair item,
            IRaceHairGetter rhs,
            IRaceHairGetter def,
            ErrorMaskBuilder errorMask,
            RaceHair_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Male ?? true)
            {
                errorMask?.PushIndex((int)RaceHair_FieldIndex.Male);
                try
                {
                    item.Male_Property.Set(
                        value: rhs.Male,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Female ?? true)
            {
                errorMask?.PushIndex((int)RaceHair_FieldIndex.Female);
                try
                {
                    item.Female_Property.Set(
                        value: rhs.Female,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRaceHair obj,
            NotifyingFireParameters cmds = null)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRaceHair obj,
            NotifyingUnsetParameters cmds = null)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    obj.Male = default(Hair);
                    break;
                case RaceHair_FieldIndex.Female:
                    obj.Female = default(Hair);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRaceHair obj)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceHairGetter obj)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    return obj.Male;
                case RaceHair_FieldIndex.Female:
                    return obj.Female;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRaceHair item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Male = default(Hair);
            item.Female = default(Hair);
        }

        public static RaceHair_Mask<bool> GetEqualsMask(
            this IRaceHairGetter item,
            IRaceHairGetter rhs)
        {
            var ret = new RaceHair_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceHairGetter item,
            IRaceHairGetter rhs,
            RaceHair_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Male = item.Male == rhs.Male;
            ret.Female = item.Female == rhs.Female;
        }

        public static string ToString(
            this IRaceHairGetter item,
            string name = null,
            RaceHair_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceHairGetter item,
            FileGeneration fg,
            string name = null,
            RaceHair_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RaceHair)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RaceHair)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male ?? true)
                {
                    fg.AppendLine($"Male => {item.Male_Property}");
                }
                if (printMask?.Female ?? true)
                {
                    fg.AppendLine($"Female => {item.Female_Property}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceHairGetter item,
            RaceHair_Mask<bool?> checkMask)
        {
            return true;
        }

        public static RaceHair_Mask<bool> GetHasBeenSetMask(IRaceHairGetter item)
        {
            var ret = new RaceHair_Mask<bool>();
            ret.Male = true;
            ret.Female = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            RaceHair item,
            bool doMasks,
            out RaceHair_ErrorMask errorMask,
            RaceHair_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceHair_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            RaceHair item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RaceHair");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RaceHair");
            }
            if ((translationMask?.GetShouldTranslate((int)RaceHair_FieldIndex.Male) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Male),
                    item: item.Male_Property?.FormKey,
                    fieldIndex: (int)RaceHair_FieldIndex.Male,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceHair_FieldIndex.Female) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Female),
                    item: item.Female_Property?.FormKey,
                    fieldIndex: (int)RaceHair_FieldIndex.Female,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RaceHair item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RaceHair_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                masterReferences: masterReferences,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RaceHair_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RaceHair item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: RaceHair_Registration.DNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            RaceHair item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Male_Property,
                fieldIndex: (int)RaceHair_FieldIndex.Male,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Female_Property,
                fieldIndex: (int)RaceHair_FieldIndex.Female,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class RaceHair_Mask<T> : IMask<T>, IEquatable<RaceHair_Mask<T>>
    {
        #region Ctors
        public RaceHair_Mask()
        {
        }

        public RaceHair_Mask(T initialValue)
        {
            this.Male = initialValue;
            this.Female = initialValue;
        }
        #endregion

        #region Members
        public T Male;
        public T Female;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RaceHair_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceHair_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Male, rhs.Male)) return false;
            if (!object.Equals(this.Female, rhs.Female)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Male?.GetHashCode());
            ret = ret.CombineHashCode(this.Female?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Male)) return false;
            if (!eval(this.Female)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RaceHair_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RaceHair_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RaceHair_Mask<R> obj, Func<T, R> eval)
        {
            obj.Male = eval(this.Male);
            obj.Female = eval(this.Female);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RaceHair_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RaceHair_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RaceHair_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male ?? true)
                {
                    fg.AppendLine($"Male => {Male}");
                }
                if (printMask?.Female ?? true)
                {
                    fg.AppendLine($"Female => {Female}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RaceHair_ErrorMask : IErrorMask, IErrorMask<RaceHair_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Male;
        public Exception Female;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    return Male;
                case RaceHair_FieldIndex.Female:
                    return Female;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    this.Male = ex;
                    break;
                case RaceHair_FieldIndex.Female:
                    this.Female = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    this.Male = (Exception)obj;
                    break;
                case RaceHair_FieldIndex.Female:
                    this.Female = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Male != null) return true;
            if (Female != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RaceHair_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Male => {Male}");
            fg.AppendLine($"Female => {Female}");
        }
        #endregion

        #region Combine
        public RaceHair_ErrorMask Combine(RaceHair_ErrorMask rhs)
        {
            var ret = new RaceHair_ErrorMask();
            ret.Male = this.Male.Combine(rhs.Male);
            ret.Female = this.Female.Combine(rhs.Female);
            return ret;
        }
        public static RaceHair_ErrorMask Combine(RaceHair_ErrorMask lhs, RaceHair_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RaceHair_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RaceHair_ErrorMask();
        }
        #endregion

    }
    public class RaceHair_CopyMask
    {
        #region Members
        public bool Male;
        public bool Female;
        #endregion

    }
    public class RaceHair_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Male;
        public bool Female;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Male, null));
            ret.Add((Female, null));
        }
    }
    #endregion

    #endregion

}
