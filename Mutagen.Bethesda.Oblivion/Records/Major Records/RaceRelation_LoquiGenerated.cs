/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RaceRelation :
        LoquiNotifyingObject,
        IRaceRelation,
        ILoquiObjectSetter<RaceRelation>,
        ILinkSubContainer,
        IEquatable<RaceRelation>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceRelation_Registration.Instance;
        public static RaceRelation_Registration Registration => RaceRelation_Registration.Instance;
        protected object CommonInstance => RaceRelationCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public RaceRelation()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Race
        public IFormIDLink<Race> Race_Property { get; } = new FormIDLink<Race>();
        public Race Race { get => Race_Property.Item; set => Race_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLink<Race> IRaceRelation.Race_Property => this.Race_Property;
        IRaceInternalGetter IRaceRelationGetter.Race => this.Race_Property.Item;
        IFormIDLinkGetter<IRaceInternalGetter> IRaceRelationGetter.Race_Property => this.Race_Property;
        #endregion
        #region Modifier
        private Int32 _Modifier;
        public Int32 Modifier
        {
            get => this._Modifier;
            set => this.RaiseAndSetIfChanged(ref this._Modifier, value, nameof(Modifier));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceRelationGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceRelationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRaceRelationGetter rhs)) return false;
            return ((RaceRelationCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(RaceRelation obj)
        {
            return ((RaceRelationCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((RaceRelationCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => RaceRelationXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static RaceRelation CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RaceRelation_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RaceRelation CreateFromXml(
            XElement node,
            out RaceRelation_ErrorMask errorMask,
            bool doMasks = true,
            RaceRelation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RaceRelation_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceRelation CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RaceRelation() : null;
                    break;
                default:
                    break;
            }
            var ret = new RaceRelation();
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceRelationXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RaceRelation CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RaceRelation_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RaceRelation CreateFromXml(
            string path,
            out RaceRelation_ErrorMask errorMask,
            RaceRelation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceRelation CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RaceRelation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RaceRelation CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RaceRelation_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RaceRelation CreateFromXml(
            Stream stream,
            out RaceRelation_ErrorMask errorMask,
            RaceRelation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceRelation CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RaceRelation_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((RaceRelation_FieldIndex)index)
            {
                case RaceRelation_FieldIndex.Race:
                case RaceRelation_FieldIndex.Modifier:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RaceRelation_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Race_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
            Race_Property.Link(
                modList,
                sourceMod);
        }

        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => RaceRelationBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceRelation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RaceRelation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RaceRelation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceRelation_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceRelation CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RaceRelation();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RaceRelation_Registration.XNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            RaceRelation item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.Race_Property);
            item.Modifier = frame.ReadInt32();
        }

        #endregion

        public RaceRelation Copy(
            RaceRelation_CopyMask copyMask = null,
            RaceRelation def = null)
        {
            return RaceRelation.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RaceRelation Copy(
            RaceRelation item,
            RaceRelation_CopyMask copyMask = null,
            RaceRelation def = null)
        {
            RaceRelation ret;
            if (item.GetType().Equals(typeof(RaceRelation)))
            {
                ret = new RaceRelation();
            }
            else
            {
                ret = (RaceRelation)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RaceRelation Copy_ToLoqui(
            RaceRelation item,
            RaceRelation_CopyMask copyMask = null,
            RaceRelation def = null)
        {
            RaceRelation ret;
            if (item.GetType().Equals(typeof(RaceRelation)))
            {
                ret = new RaceRelation() as RaceRelation;
            }
            else
            {
                ret = (RaceRelation)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(RaceRelation rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            RaceRelation rhs,
            RaceRelation_CopyMask copyMask,
            RaceRelation def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            RaceRelation rhs,
            out RaceRelation_ErrorMask errorMask,
            RaceRelation_CopyMask copyMask = null,
            RaceRelation def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RaceRelationCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RaceRelation_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            RaceRelation rhs,
            ErrorMaskBuilder errorMask,
            RaceRelation_CopyMask copyMask = null,
            RaceRelation def = null)
        {
            RaceRelationCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                    this.Race_Property.Set((IFormIDLink<Race>)obj);
                    break;
                case RaceRelation_FieldIndex.Modifier:
                    this.Modifier = (Int32)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            RaceRelationCommon.Instance.Clear(this);
        }

        public static RaceRelation Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RaceRelation();
            foreach (var pair in fields)
            {
                CopyInInternal_RaceRelation(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RaceRelation(RaceRelation obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RaceRelation_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                    obj.Race_Property.Set((IFormIDLink<Race>)pair.Value);
                    break;
                case RaceRelation_FieldIndex.Modifier:
                    obj.Modifier = (Int32)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRaceRelation :
        IRaceRelationGetter,
        ILoquiObjectSetter<IRaceRelation>
    {
        new Race Race { get; set; }
        new IFormIDLink<Race> Race_Property { get; }
        new Int32 Modifier { get; set; }

        void CopyFieldsFrom(
            RaceRelation rhs,
            ErrorMaskBuilder errorMask = null,
            RaceRelation_CopyMask copyMask = null,
            RaceRelation def = null);
    }

    public partial interface IRaceRelationGetter :
        ILoquiObject,
        ILoquiObject<IRaceRelationGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Race
        IRaceInternalGetter Race { get; }
        IFormIDLinkGetter<IRaceInternalGetter> Race_Property { get; }

        #endregion
        #region Modifier
        Int32 Modifier { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RaceRelationMixIn
    {
        public static void Clear(this IRaceRelation item)
        {
            ((RaceRelationCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static RaceRelation_Mask<bool> GetEqualsMask(
            this IRaceRelationGetter item,
            IRaceRelationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceRelationCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceRelationGetter item,
            string name = null,
            RaceRelation_Mask<bool> printMask = null)
        {
            return ((RaceRelationCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceRelationGetter item,
            FileGeneration fg,
            string name = null,
            RaceRelation_Mask<bool> printMask = null)
        {
            ((RaceRelationCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceRelationGetter item,
            RaceRelation_Mask<bool?> checkMask)
        {
            return ((RaceRelationCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RaceRelation_Mask<bool> GetHasBeenSetMask(this IRaceRelationGetter item)
        {
            var ret = new RaceRelation_Mask<bool>();
            ((RaceRelationCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRaceRelationGetter item,
            IRaceRelationGetter rhs)
        {
            return ((RaceRelationCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RaceRelation_FieldIndex
    {
        Race = 0,
        Modifier = 1,
    }
    #endregion

    #region Registration
    public class RaceRelation_Registration : ILoquiRegistration
    {
        public static readonly RaceRelation_Registration Instance = new RaceRelation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 167,
            version: 0);

        public const string GUID = "503a83fb-a21e-4f6d-b0ca-752d6f972bda";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RaceRelation_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceRelation_ErrorMask);

        public static readonly Type ClassType = typeof(RaceRelation);

        public static readonly Type GetterType = typeof(IRaceRelationGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRaceRelation);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(RaceRelationCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RaceRelation";

        public const string Name = "RaceRelation";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "RACE":
                    return (ushort)RaceRelation_FieldIndex.Race;
                case "MODIFIER":
                    return (ushort)RaceRelation_FieldIndex.Modifier;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                case RaceRelation_FieldIndex.Modifier:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                case RaceRelation_FieldIndex.Modifier:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                case RaceRelation_FieldIndex.Modifier:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                    return "Race";
                case RaceRelation_FieldIndex.Modifier:
                    return "Modifier";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                case RaceRelation_FieldIndex.Modifier:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                case RaceRelation_FieldIndex.Modifier:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                    return typeof(IFormIDLink<Race>);
                case RaceRelation_FieldIndex.Modifier:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RaceRelationXmlWriteTranslation);
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = XNAM_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RaceRelationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceRelationCommon
    {
        public static readonly RaceRelationCommon Instance = new RaceRelationCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            RaceRelation item,
            RaceRelation rhs,
            RaceRelation def,
            ErrorMaskBuilder errorMask,
            RaceRelation_CopyMask copyMask)
        {
            if (copyMask?.Race ?? true)
            {
                errorMask?.PushIndex((int)RaceRelation_FieldIndex.Race);
                try
                {
                    item.Race_Property.SetLink(value: rhs.Race_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Modifier ?? true)
            {
                errorMask?.PushIndex((int)RaceRelation_FieldIndex.Modifier);
                try
                {
                    item.Modifier = rhs.Modifier;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IRaceRelation item)
        {
            ClearPartial();
            item.Race = default(Race);
            item.Modifier = default(Int32);
        }

        public RaceRelation_Mask<bool> GetEqualsMask(
            IRaceRelationGetter item,
            IRaceRelationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RaceRelation_Mask<bool>();
            ((RaceRelationCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IRaceRelationGetter item,
            IRaceRelationGetter rhs,
            RaceRelation_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Race = item.Race_Property.FormKey == rhs.Race_Property.FormKey;
            ret.Modifier = item.Modifier == rhs.Modifier;
        }

        public string ToString(
            IRaceRelationGetter item,
            string name = null,
            RaceRelation_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IRaceRelationGetter item,
            FileGeneration fg,
            string name = null,
            RaceRelation_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RaceRelation =>");
            }
            else
            {
                fg.AppendLine($"{name} (RaceRelation) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IRaceRelationGetter item,
            FileGeneration fg,
            RaceRelation_Mask<bool> printMask = null)
        {
            if (printMask?.Race ?? true)
            {
                fg.AppendLine($"Race => {item.Race_Property}");
            }
            if (printMask?.Modifier ?? true)
            {
                fg.AppendLine($"Modifier => {item.Modifier}");
            }
        }

        public bool HasBeenSet(
            IRaceRelationGetter item,
            RaceRelation_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IRaceRelationGetter item,
            RaceRelation_Mask<bool> mask)
        {
            mask.Race = true;
            mask.Modifier = true;
        }

        #region Equals and Hash
        public virtual bool Equals(
            IRaceRelationGetter lhs,
            IRaceRelationGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Race_Property.Equals(rhs.Race_Property)) return false;
            if (lhs.Modifier != rhs.Modifier) return false;
            return true;
        }

        public virtual int GetHashCode(IRaceRelationGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Race).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Modifier).CombineHashCode(ret);
            return ret;
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RaceRelationXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RaceRelationXmlWriteTranslation Instance = new RaceRelationXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRaceRelationGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RaceRelation_FieldIndex.Race) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Race),
                    item: item.Race_Property?.FormKey,
                    fieldIndex: (int)RaceRelation_FieldIndex.Race,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceRelation_FieldIndex.Modifier) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Modifier),
                    item: item.Modifier,
                    fieldIndex: (int)RaceRelation_FieldIndex.Modifier,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRaceRelationGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RaceRelation");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RaceRelation");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRaceRelationGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRaceRelationGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRaceRelationGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RaceRelationXmlCreateTranslation
    {
        public readonly static RaceRelationXmlCreateTranslation Instance = new RaceRelationXmlCreateTranslation();

        public static void FillPublicXml(
            IRaceRelation item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceRelationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRaceRelation item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Race":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Race_Property,
                        fieldIndex: (int)RaceRelation_FieldIndex.Race,
                        errorMask: errorMask);
                    break;
                case "Modifier":
                    try
                    {
                        errorMask?.PushIndex((int)RaceRelation_FieldIndex.Modifier);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 ModifierParse,
                            errorMask: errorMask))
                        {
                            item.Modifier = ModifierParse;
                        }
                        else
                        {
                            item.Modifier = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class RaceRelationXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRaceRelationGetter item,
            XElement node,
            out RaceRelation_ErrorMask errorMask,
            bool doMasks = true,
            RaceRelation_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RaceRelationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceRelation_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRaceRelationGetter item,
            string path,
            out RaceRelation_ErrorMask errorMask,
            RaceRelation_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceRelationGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceRelationGetter item,
            Stream stream,
            out RaceRelation_ErrorMask errorMask,
            RaceRelation_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceRelationGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceRelationGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RaceRelationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRaceRelationGetter item,
            XElement node,
            string name = null,
            RaceRelation_TranslationMask translationMask = null)
        {
            ((RaceRelationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IRaceRelationGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RaceRelationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceRelationGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RaceRelationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class RaceRelation_Mask<T> : IMask<T>, IEquatable<RaceRelation_Mask<T>>
    {
        #region Ctors
        public RaceRelation_Mask()
        {
        }

        public RaceRelation_Mask(T initialValue)
        {
            this.Race = initialValue;
            this.Modifier = initialValue;
        }
        #endregion

        #region Members
        public T Race;
        public T Modifier;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RaceRelation_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceRelation_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Race, rhs.Race)) return false;
            if (!object.Equals(this.Modifier, rhs.Modifier)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Race?.GetHashCode());
            ret = ret.CombineHashCode(this.Modifier?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Race)) return false;
            if (!eval(this.Modifier)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RaceRelation_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RaceRelation_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RaceRelation_Mask<R> obj, Func<T, R> eval)
        {
            obj.Race = eval(this.Race);
            obj.Modifier = eval(this.Modifier);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RaceRelation_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RaceRelation_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RaceRelation_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Race ?? true)
                {
                    fg.AppendLine($"Race => {Race}");
                }
                if (printMask?.Modifier ?? true)
                {
                    fg.AppendLine($"Modifier => {Modifier}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RaceRelation_ErrorMask : IErrorMask, IErrorMask<RaceRelation_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Race;
        public Exception Modifier;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                    return Race;
                case RaceRelation_FieldIndex.Modifier:
                    return Modifier;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                    this.Race = ex;
                    break;
                case RaceRelation_FieldIndex.Modifier:
                    this.Modifier = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RaceRelation_FieldIndex enu = (RaceRelation_FieldIndex)index;
            switch (enu)
            {
                case RaceRelation_FieldIndex.Race:
                    this.Race = (Exception)obj;
                    break;
                case RaceRelation_FieldIndex.Modifier:
                    this.Modifier = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Race != null) return true;
            if (Modifier != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RaceRelation_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Race => {Race}");
            fg.AppendLine($"Modifier => {Modifier}");
        }
        #endregion

        #region Combine
        public RaceRelation_ErrorMask Combine(RaceRelation_ErrorMask rhs)
        {
            var ret = new RaceRelation_ErrorMask();
            ret.Race = this.Race.Combine(rhs.Race);
            ret.Modifier = this.Modifier.Combine(rhs.Modifier);
            return ret;
        }
        public static RaceRelation_ErrorMask Combine(RaceRelation_ErrorMask lhs, RaceRelation_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RaceRelation_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RaceRelation_ErrorMask();
        }
        #endregion

    }
    public class RaceRelation_CopyMask
    {
        public RaceRelation_CopyMask()
        {
        }

        public RaceRelation_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Race = defaultOn;
            this.Modifier = defaultOn;
        }

        #region Members
        public bool Race;
        public bool Modifier;
        #endregion

    }

    public class RaceRelation_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Race;
        public bool Modifier;
        #endregion

        #region Ctors
        public RaceRelation_TranslationMask()
        {
        }

        public RaceRelation_TranslationMask(bool defaultOn)
        {
            this.Race = defaultOn;
            this.Modifier = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Race, null));
            ret.Add((Modifier, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RaceRelationBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RaceRelationBinaryWriteTranslation Instance = new RaceRelationBinaryWriteTranslation();

        public static void Write_Embedded(
            IRaceRelationGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Race_Property,
                masterReferences: masterReferences);
            writer.Write(item.Modifier);
        }

        public void Write(
            MutagenWriter writer,
            IRaceRelationGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: RaceRelation_Registration.XNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRaceRelationGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RaceRelationBinaryCreateTranslation
    {
        public readonly static RaceRelationBinaryCreateTranslation Instance = new RaceRelationBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class RaceRelationBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRaceRelationGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RaceRelation_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RaceRelationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceRelation_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IRaceRelationGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((RaceRelationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IRaceRelationGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RaceRelationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    public partial class RaceRelationBinaryWrapper :
        BinaryWrapper,
        IRaceRelationGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceRelation_Registration.Instance;
        public static RaceRelation_Registration Registration => RaceRelation_Registration.Instance;
        protected object CommonInstance => RaceRelationCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceRelationGetter)rhs, include);

        protected object XmlWriteTranslator => RaceRelationXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        protected object BinaryWriteTranslator => RaceRelationBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;

        #region Race
        public IFormIDLinkGetter<IRaceInternalGetter> Race_Property => new FormIDLink<IRaceInternalGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0, 4))));
        public IRaceInternalGetter Race => default;
        #endregion
        public Int32 Modifier => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(4, 4));
        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected RaceRelationBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static RaceRelationBinaryWrapper RaceRelationFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new RaceRelationBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x8 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(stream, offset);
            return ret;
        }

    }

    #endregion

    #endregion

}
