/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RaceStatsGendered :
        LoquiNotifyingObject,
        IRaceStatsGendered,
        ILoquiObjectSetter<RaceStatsGendered>,
        IEquatable<RaceStatsGendered>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceStatsGendered_Registration.Instance;
        public static RaceStatsGendered_Registration Registration => RaceStatsGendered_Registration.Instance;
        protected object CommonInstance => RaceStatsGenderedCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public RaceStatsGendered()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Male
        public RaceStats Male { get; set; }
        IRaceStatsGetter IRaceStatsGenderedGetter.Male => Male;
        #endregion
        #region Female
        public RaceStats Female { get; set; }
        IRaceStatsGetter IRaceStatsGenderedGetter.Female => Female;
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceStatsGenderedGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceStatsGenderedMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRaceStatsGenderedGetter rhs)) return false;
            return ((RaceStatsGenderedCommon)this.CommonInstance).Equals(this, rhs);
        }

        public bool Equals(RaceStatsGendered obj)
        {
            return ((RaceStatsGenderedCommon)this.CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((RaceStatsGenderedCommon)this.CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => RaceStatsGenderedXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static RaceStatsGendered CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RaceStatsGendered_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RaceStatsGendered CreateFromXml(
            XElement node,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true,
            RaceStatsGendered_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceStatsGendered CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RaceStatsGendered() : null;
                    break;
                default:
                    break;
            }
            var ret = new RaceStatsGendered();
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceStatsGenderedXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RaceStatsGendered CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RaceStatsGendered_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RaceStatsGendered CreateFromXml(
            string path,
            out RaceStatsGendered_ErrorMask errorMask,
            RaceStatsGendered_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceStatsGendered CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RaceStatsGendered_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RaceStatsGendered CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RaceStatsGendered_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RaceStatsGendered CreateFromXml(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask,
            RaceStatsGendered_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceStatsGendered CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RaceStatsGendered_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((RaceStatsGendered_FieldIndex)index)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RaceStatsGendered_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => RaceStatsGenderedBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceStatsGendered CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RaceStatsGendered CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceStatsGendered CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RaceStatsGendered();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RaceStatsGendered_Registration.ATTR_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            RaceStatsGendered item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            try
            {
                errorMask?.PushIndex((int)RaceStatsGendered_FieldIndex.Male);
                item.Male = Mutagen.Bethesda.Oblivion.RaceStats.CreateFromBinary(
                    frame: frame,
                    recordTypeConverter: null,
                    masterReferences: masterReferences,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RaceStatsGendered_FieldIndex.Female);
                item.Female = Mutagen.Bethesda.Oblivion.RaceStats.CreateFromBinary(
                    frame: frame,
                    recordTypeConverter: null,
                    masterReferences: masterReferences,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public RaceStatsGendered Copy(
            RaceStatsGendered_CopyMask copyMask = null,
            RaceStatsGendered def = null)
        {
            return RaceStatsGendered.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RaceStatsGendered Copy(
            RaceStatsGendered item,
            RaceStatsGendered_CopyMask copyMask = null,
            RaceStatsGendered def = null)
        {
            RaceStatsGendered ret;
            if (item.GetType().Equals(typeof(RaceStatsGendered)))
            {
                ret = new RaceStatsGendered();
            }
            else
            {
                ret = (RaceStatsGendered)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RaceStatsGendered Copy_ToLoqui(
            RaceStatsGendered item,
            RaceStatsGendered_CopyMask copyMask = null,
            RaceStatsGendered def = null)
        {
            RaceStatsGendered ret;
            if (item.GetType().Equals(typeof(RaceStatsGendered)))
            {
                ret = new RaceStatsGendered() as RaceStatsGendered;
            }
            else
            {
                ret = (RaceStatsGendered)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(RaceStatsGendered rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            RaceStatsGendered rhs,
            RaceStatsGendered_CopyMask copyMask,
            RaceStatsGendered def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            RaceStatsGendered rhs,
            out RaceStatsGendered_ErrorMask errorMask,
            RaceStatsGendered_CopyMask copyMask = null,
            RaceStatsGendered def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RaceStatsGenderedCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            RaceStatsGendered rhs,
            ErrorMaskBuilder errorMask,
            RaceStatsGendered_CopyMask copyMask = null,
            RaceStatsGendered def = null)
        {
            RaceStatsGenderedCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    this.Male = (RaceStats)obj;
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    this.Female = (RaceStats)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            RaceStatsGenderedCommon.Instance.Clear(this);
        }

        public static RaceStatsGendered Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RaceStatsGendered();
            foreach (var pair in fields)
            {
                CopyInInternal_RaceStatsGendered(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RaceStatsGendered(RaceStatsGendered obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RaceStatsGendered_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    obj.Male = (RaceStats)pair.Value;
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    obj.Female = (RaceStats)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRaceStatsGendered :
        IRaceStatsGenderedGetter,
        ILoquiObjectSetter<IRaceStatsGendered>
    {
        new RaceStats Male { get; set; }

        new RaceStats Female { get; set; }

        void CopyFieldsFrom(
            RaceStatsGendered rhs,
            ErrorMaskBuilder errorMask = null,
            RaceStatsGendered_CopyMask copyMask = null,
            RaceStatsGendered def = null);
    }

    public partial interface IRaceStatsGenderedGetter :
        ILoquiObject,
        ILoquiObject<IRaceStatsGenderedGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Male
        IRaceStatsGetter Male { get; }

        #endregion
        #region Female
        IRaceStatsGetter Female { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RaceStatsGenderedMixIn
    {
        public static void Clear(this IRaceStatsGendered item)
        {
            ((RaceStatsGenderedCommon)item.CommonInstance).Clear(item: item);
        }

        public static RaceStatsGendered_Mask<bool> GetEqualsMask(
            this IRaceStatsGenderedGetter item,
            IRaceStatsGenderedGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceStatsGenderedCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceStatsGenderedGetter item,
            string name = null,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            return ((RaceStatsGenderedCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceStatsGenderedGetter item,
            FileGeneration fg,
            string name = null,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            ((RaceStatsGenderedCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceStatsGenderedGetter item,
            RaceStatsGendered_Mask<bool?> checkMask)
        {
            return ((RaceStatsGenderedCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RaceStatsGendered_Mask<bool> GetHasBeenSetMask(this IRaceStatsGenderedGetter item)
        {
            var ret = new RaceStatsGendered_Mask<bool>();
            ((RaceStatsGenderedCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRaceStatsGenderedGetter item,
            IRaceStatsGenderedGetter rhs)
        {
            return ((RaceStatsGenderedCommon)item.CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RaceStatsGendered_FieldIndex
    {
        Male = 0,
        Female = 1,
    }
    #endregion

    #region Registration
    public class RaceStatsGendered_Registration : ILoquiRegistration
    {
        public static readonly RaceStatsGendered_Registration Instance = new RaceStatsGendered_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 30,
            version: 0);

        public const string GUID = "f6f95fe6-ec9c-4ddd-9713-820547d6c485";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RaceStatsGendered_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceStatsGendered_ErrorMask);

        public static readonly Type ClassType = typeof(RaceStatsGendered);

        public static readonly Type GetterType = typeof(IRaceStatsGenderedGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRaceStatsGendered);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(RaceStatsGenderedCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RaceStatsGendered";

        public const string Name = "RaceStatsGendered";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MALE":
                    return (ushort)RaceStatsGendered_FieldIndex.Male;
                case "FEMALE":
                    return (ushort)RaceStatsGendered_FieldIndex.Female;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return "Male";
                case RaceStatsGendered_FieldIndex.Female:
                    return "Female";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return typeof(RaceStats);
                case RaceStatsGendered_FieldIndex.Female:
                    return typeof(RaceStats);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RaceStatsGenderedXmlWriteTranslation);
        public static readonly RecordType ATTR_HEADER = new RecordType("ATTR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ATTR_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RaceStatsGenderedBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceStatsGenderedCommon
    {
        public static readonly RaceStatsGenderedCommon Instance = new RaceStatsGenderedCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            RaceStatsGendered item,
            RaceStatsGendered rhs,
            RaceStatsGendered def,
            ErrorMaskBuilder errorMask,
            RaceStatsGendered_CopyMask copyMask)
        {
            if (copyMask?.Male.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)RaceStatsGendered_FieldIndex.Male);
                try
                {
                    switch (copyMask?.Male?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Male = Utility.GetGetterInterfaceReference<RaceStats>(rhs.Male);
                            break;
                        case CopyOption.CopyIn:
                            RaceStatsCommon.CopyFieldsFrom(
                                item: item.Male,
                                rhs: rhs.Male,
                                def: def?.Male,
                                errorMask: errorMask,
                                copyMask: copyMask?.Male.Specific);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Male == null)
                            {
                                item.Male = null;
                            }
                            else
                            {
                                item.Male = RaceStats.Copy(
                                    rhs.Male,
                                    copyMask?.Male?.Specific,
                                    def?.Male);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Male?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Female.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)RaceStatsGendered_FieldIndex.Female);
                try
                {
                    switch (copyMask?.Female?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Female = Utility.GetGetterInterfaceReference<RaceStats>(rhs.Female);
                            break;
                        case CopyOption.CopyIn:
                            RaceStatsCommon.CopyFieldsFrom(
                                item: item.Female,
                                rhs: rhs.Female,
                                def: def?.Female,
                                errorMask: errorMask,
                                copyMask: copyMask?.Female.Specific);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Female == null)
                            {
                                item.Female = null;
                            }
                            else
                            {
                                item.Female = RaceStats.Copy(
                                    rhs.Female,
                                    copyMask?.Female?.Specific,
                                    def?.Female);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Female?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IRaceStatsGendered item)
        {
            ClearPartial();
            item.Male = default(RaceStats);
            item.Female = default(RaceStats);
        }

        public RaceStatsGendered_Mask<bool> GetEqualsMask(
            IRaceStatsGenderedGetter item,
            IRaceStatsGenderedGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RaceStatsGendered_Mask<bool>();
            ((RaceStatsGenderedCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IRaceStatsGenderedGetter item,
            IRaceStatsGenderedGetter rhs,
            RaceStatsGendered_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Male = MaskItemExt.Factory(item.Male.GetEqualsMask(rhs.Male, include), include);
            ret.Female = MaskItemExt.Factory(item.Female.GetEqualsMask(rhs.Female, include), include);
        }

        public string ToString(
            IRaceStatsGenderedGetter item,
            string name = null,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IRaceStatsGenderedGetter item,
            FileGeneration fg,
            string name = null,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RaceStatsGendered =>");
            }
            else
            {
                fg.AppendLine($"{name} (RaceStatsGendered) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IRaceStatsGenderedGetter item,
            FileGeneration fg,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            if (printMask?.Male?.Overall ?? true)
            {
                item.Male?.ToString(fg, "Male");
            }
            if (printMask?.Female?.Overall ?? true)
            {
                item.Female?.ToString(fg, "Female");
            }
        }

        public bool HasBeenSet(
            IRaceStatsGenderedGetter item,
            RaceStatsGendered_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IRaceStatsGenderedGetter item,
            RaceStatsGendered_Mask<bool> mask)
        {
            mask.Male = new MaskItem<bool, RaceStats_Mask<bool>>(true, item.Male.GetHasBeenSetMask());
            mask.Female = new MaskItem<bool, RaceStats_Mask<bool>>(true, item.Female.GetHasBeenSetMask());
        }

        #region Equals and Hash
        public virtual bool Equals(
            IRaceStatsGenderedGetter lhs,
            IRaceStatsGenderedGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.Male, rhs.Male)) return false;
            if (!object.Equals(lhs.Female, rhs.Female)) return false;
            return true;
        }

        public virtual int GetHashCode(IRaceStatsGenderedGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Male).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Female).CombineHashCode(ret);
            return ret;
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RaceStatsGenderedXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RaceStatsGenderedXmlWriteTranslation Instance = new RaceStatsGenderedXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRaceStatsGenderedGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RaceStatsGendered_FieldIndex.Male) ?? true))
            {
                var loquiItem = item.Male;
                ((RaceStatsXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Male),
                    fieldIndex: (int)RaceStatsGendered_FieldIndex.Male,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceStatsGendered_FieldIndex.Male));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStatsGendered_FieldIndex.Female) ?? true))
            {
                var loquiItem = item.Female;
                ((RaceStatsXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Female),
                    fieldIndex: (int)RaceStatsGendered_FieldIndex.Female,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceStatsGendered_FieldIndex.Female));
            }
        }

        public void Write(
            XElement node,
            IRaceStatsGenderedGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RaceStatsGendered");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RaceStatsGendered");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRaceStatsGenderedGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRaceStatsGenderedGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRaceStatsGenderedGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RaceStatsGenderedXmlCreateTranslation
    {
        public readonly static RaceStatsGenderedXmlCreateTranslation Instance = new RaceStatsGenderedXmlCreateTranslation();

        public static void FillPublicXml(
            IRaceStatsGendered item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceStatsGenderedXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRaceStatsGendered item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Male":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStatsGendered_FieldIndex.Male);
                        if (LoquiXmlTranslation<RaceStats>.Instance.Parse(
                            node: node,
                            item: out RaceStats MaleParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceStatsGendered_FieldIndex.Male)))
                        {
                            item.Male = MaleParse;
                        }
                        else
                        {
                            item.Male = default(RaceStats);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Female":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStatsGendered_FieldIndex.Female);
                        if (LoquiXmlTranslation<RaceStats>.Instance.Parse(
                            node: node,
                            item: out RaceStats FemaleParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceStatsGendered_FieldIndex.Female)))
                        {
                            item.Female = FemaleParse;
                        }
                        else
                        {
                            item.Female = default(RaceStats);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class RaceStatsGenderedXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRaceStatsGenderedGetter item,
            XElement node,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true,
            RaceStatsGendered_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RaceStatsGenderedXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRaceStatsGenderedGetter item,
            string path,
            out RaceStatsGendered_ErrorMask errorMask,
            RaceStatsGendered_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceStatsGenderedGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceStatsGenderedGetter item,
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask,
            RaceStatsGendered_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceStatsGenderedGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceStatsGenderedGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RaceStatsGenderedXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRaceStatsGenderedGetter item,
            XElement node,
            string name = null,
            RaceStatsGendered_TranslationMask translationMask = null)
        {
            ((RaceStatsGenderedXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IRaceStatsGenderedGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RaceStatsGenderedXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceStatsGenderedGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RaceStatsGenderedXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class RaceStatsGendered_Mask<T> : IMask<T>, IEquatable<RaceStatsGendered_Mask<T>>
    {
        #region Ctors
        public RaceStatsGendered_Mask()
        {
        }

        public RaceStatsGendered_Mask(T initialValue)
        {
            this.Male = new MaskItem<T, RaceStats_Mask<T>>(initialValue, new RaceStats_Mask<T>(initialValue));
            this.Female = new MaskItem<T, RaceStats_Mask<T>>(initialValue, new RaceStats_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, RaceStats_Mask<T>> Male { get; set; }
        public MaskItem<T, RaceStats_Mask<T>> Female { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStatsGendered_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStatsGendered_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Male, rhs.Male)) return false;
            if (!object.Equals(this.Female, rhs.Female)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Male?.GetHashCode());
            ret = ret.CombineHashCode(this.Female?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (Male != null)
            {
                if (!eval(this.Male.Overall)) return false;
                if (this.Male.Specific != null && !this.Male.Specific.AllEqual(eval)) return false;
            }
            if (Female != null)
            {
                if (!eval(this.Female.Overall)) return false;
                if (this.Female.Specific != null && !this.Female.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public RaceStatsGendered_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RaceStatsGendered_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RaceStatsGendered_Mask<R> obj, Func<T, R> eval)
        {
            if (this.Male != null)
            {
                obj.Male = new MaskItem<R, RaceStats_Mask<R>>();
                obj.Male.Overall = eval(this.Male.Overall);
                if (this.Male.Specific != null)
                {
                    obj.Male.Specific = this.Male.Specific.Translate(eval);
                }
            }
            if (this.Female != null)
            {
                obj.Female = new MaskItem<R, RaceStats_Mask<R>>();
                obj.Female.Overall = eval(this.Female.Overall);
                if (this.Female.Specific != null)
                {
                    obj.Female.Specific = this.Female.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RaceStatsGendered_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RaceStatsGendered_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RaceStatsGendered_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male?.Overall ?? true)
                {
                    Male?.ToString(fg);
                }
                if (printMask?.Female?.Overall ?? true)
                {
                    Female?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RaceStatsGendered_ErrorMask : IErrorMask, IErrorMask<RaceStatsGendered_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, RaceStats_ErrorMask> Male;
        public MaskItem<Exception, RaceStats_ErrorMask> Female;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return Male;
                case RaceStatsGendered_FieldIndex.Female:
                    return Female;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    this.Male = new MaskItem<Exception, RaceStats_ErrorMask>(ex, null);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    this.Female = new MaskItem<Exception, RaceStats_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    this.Male = (MaskItem<Exception, RaceStats_ErrorMask>)obj;
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    this.Female = (MaskItem<Exception, RaceStats_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Male != null) return true;
            if (Female != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RaceStatsGendered_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            Male?.ToString(fg);
            Female?.ToString(fg);
        }
        #endregion

        #region Combine
        public RaceStatsGendered_ErrorMask Combine(RaceStatsGendered_ErrorMask rhs)
        {
            var ret = new RaceStatsGendered_ErrorMask();
            ret.Male = new MaskItem<Exception, RaceStats_ErrorMask>(this.Male.Overall.Combine(rhs.Male.Overall), ((IErrorMask<RaceStats_ErrorMask>)this.Male.Specific).Combine(rhs.Male.Specific));
            ret.Female = new MaskItem<Exception, RaceStats_ErrorMask>(this.Female.Overall.Combine(rhs.Female.Overall), ((IErrorMask<RaceStats_ErrorMask>)this.Female.Specific).Combine(rhs.Female.Specific));
            return ret;
        }
        public static RaceStatsGendered_ErrorMask Combine(RaceStatsGendered_ErrorMask lhs, RaceStatsGendered_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RaceStatsGendered_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RaceStatsGendered_ErrorMask();
        }
        #endregion

    }
    public class RaceStatsGendered_CopyMask
    {
        public RaceStatsGendered_CopyMask()
        {
        }

        public RaceStatsGendered_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Male = new MaskItem<CopyOption, RaceStats_CopyMask>(deepCopyOption, default);
            this.Female = new MaskItem<CopyOption, RaceStats_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public MaskItem<CopyOption, RaceStats_CopyMask> Male;
        public MaskItem<CopyOption, RaceStats_CopyMask> Female;
        #endregion

    }

    public class RaceStatsGendered_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, RaceStats_TranslationMask> Male;
        public MaskItem<bool, RaceStats_TranslationMask> Female;
        #endregion

        #region Ctors
        public RaceStatsGendered_TranslationMask()
        {
        }

        public RaceStatsGendered_TranslationMask(bool defaultOn)
        {
            this.Male = new MaskItem<bool, RaceStats_TranslationMask>(defaultOn, null);
            this.Female = new MaskItem<bool, RaceStats_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Male?.Overall ?? true, Male?.Specific?.GetCrystal()));
            ret.Add((Female?.Overall ?? true, Female?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RaceStatsGenderedBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RaceStatsGenderedBinaryWriteTranslation Instance = new RaceStatsGenderedBinaryWriteTranslation();

        public static void Write_Embedded(
            IRaceStatsGenderedGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            {
                var loquiItem = item.Male;
                ((RaceStatsBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            {
                var loquiItem = item.Female;
                ((RaceStatsBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
        }

        public void Write(
            MutagenWriter writer,
            IRaceStatsGenderedGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: RaceStatsGendered_Registration.ATTR_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRaceStatsGenderedGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RaceStatsGenderedBinaryCreateTranslation
    {
        public readonly static RaceStatsGenderedBinaryCreateTranslation Instance = new RaceStatsGenderedBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class RaceStatsGenderedBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRaceStatsGenderedGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RaceStatsGenderedBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IRaceStatsGenderedGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((RaceStatsGenderedBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IRaceStatsGenderedGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RaceStatsGenderedBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    public partial class RaceStatsGenderedBinaryWrapper : IRaceStatsGenderedGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceStatsGendered_Registration.Instance;
        public static RaceStatsGendered_Registration Registration => RaceStatsGendered_Registration.Instance;
        protected object CommonInstance => RaceStatsGenderedCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceStatsGenderedGetter)rhs, include);

        protected object XmlWriteTranslator => RaceStatsGenderedXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        protected object BinaryWriteTranslator => RaceStatsGenderedBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        protected ReadOnlyMemorySlice<byte> _data;
        protected BinaryWrapperFactoryPackage _package;

        public IRaceStatsGetter Male => RaceStatsBinaryWrapper.RaceStatsFactory(new BinaryMemoryReadStream(_data.Slice(0)), _package);
        public IRaceStatsGetter Female => RaceStatsBinaryWrapper.RaceStatsFactory(new BinaryMemoryReadStream(_data.Slice(8)), _package);
        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected RaceStatsGenderedBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
        {
            this._data = bytes;
            this._package = package;
        }

        public static RaceStatsGenderedBinaryWrapper RaceStatsGenderedFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new RaceStatsGenderedBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(stream, offset);
            return ret;
        }

    }

    #endregion

    #endregion

}
