/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RaceStatsGendered : 
        IRaceStatsGendered,
        ILoquiObject<RaceStatsGendered>,
        ILoquiObjectSetter,
        IPropertySupporter<RaceStats>,
        IEquatable<RaceStatsGendered>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceStatsGendered_Registration.Instance;
        public static RaceStatsGendered_Registration Registration => RaceStatsGendered_Registration.Instance;

        #region Ctor
        public RaceStatsGendered()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Male
        protected RaceStats _Male;
        protected PropertyForwarder<RaceStatsGendered, RaceStats> _MaleForwarder;
        public INotifyingSetItem<RaceStats> Male_Property => _MaleForwarder ?? (_MaleForwarder = new PropertyForwarder<RaceStatsGendered, RaceStats>(this, (int)RaceStatsGendered_FieldIndex.Male));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RaceStats Male
        {
            get => this._Male;
            set => this.SetMale(value);
        }
        protected void SetMale(
            RaceStats item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RaceStatsGendered_FieldIndex.Male];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Male, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RaceStatsGendered_FieldIndex.Male] = hasBeenSet;
            }
            if (_RaceStats_subscriptions != null)
            {
                var tmp = Male;
                _Male = item;
                _RaceStats_subscriptions.FireSubscriptions(
                    index: (int)RaceStatsGendered_FieldIndex.Male,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Male = item;
            }
        }
        protected void UnsetMale()
        {
            _hasBeenSetTracker[(int)RaceStatsGendered_FieldIndex.Male] = false;
            Male = default(RaceStats);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<RaceStats> IRaceStatsGendered.Male_Property => this.Male_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<RaceStats> IRaceStatsGenderedGetter.Male_Property => this.Male_Property;
        #endregion
        #region Female
        protected RaceStats _Female;
        protected PropertyForwarder<RaceStatsGendered, RaceStats> _FemaleForwarder;
        public INotifyingSetItem<RaceStats> Female_Property => _FemaleForwarder ?? (_FemaleForwarder = new PropertyForwarder<RaceStatsGendered, RaceStats>(this, (int)RaceStatsGendered_FieldIndex.Female));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RaceStats Female
        {
            get => this._Female;
            set => this.SetFemale(value);
        }
        protected void SetFemale(
            RaceStats item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RaceStatsGendered_FieldIndex.Female];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Female, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RaceStatsGendered_FieldIndex.Female] = hasBeenSet;
            }
            if (_RaceStats_subscriptions != null)
            {
                var tmp = Female;
                _Female = item;
                _RaceStats_subscriptions.FireSubscriptions(
                    index: (int)RaceStatsGendered_FieldIndex.Female,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Female = item;
            }
        }
        protected void UnsetFemale()
        {
            _hasBeenSetTracker[(int)RaceStatsGendered_FieldIndex.Female] = false;
            Female = default(RaceStats);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<RaceStats> IRaceStatsGendered.Female_Property => this.Female_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<RaceStats> IRaceStatsGenderedGetter.Female_Property => this.Female_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RaceStatsGenderedCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RaceStatsGenderedCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RaceStatsGenderedCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceStatsGenderedCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<RaceStatsGendered>.GetEqualsMask(RaceStatsGendered rhs) => RaceStatsGenderedCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRaceStatsGenderedGetter>.GetEqualsMask(IRaceStatsGenderedGetter rhs) => RaceStatsGenderedCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RaceStatsGenderedCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            return RaceStatsGenderedCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceStatsGenderedCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public RaceStatsGendered_Mask<bool> GetHasBeenSetMask()
        {
            return RaceStatsGenderedCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStatsGendered rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStatsGendered rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Male, rhs.Male)) return false;
            if (!object.Equals(this.Female, rhs.Female)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Male).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Female).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static RaceStatsGendered Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RaceStatsGendered Create_XML(
            XElement root,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RaceStatsGendered Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RaceStatsGendered();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RaceStatsGendered Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RaceStatsGendered Create_XML(
            string path,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RaceStatsGendered Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RaceStatsGendered Create_XML(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RaceStatsGendered>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RaceStatsGendered_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<RaceStatsGendered>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RaceStatsGendered_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            RaceStatsGenderedCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            RaceStatsGendered item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Male":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStatsGendered_FieldIndex.Male);
                        if (LoquiXmlTranslation<RaceStats>.Instance.Parse(
                            root: root,
                            item: out RaceStats MaleParse,
                            errorMask: errorMask))
                        {
                            item.Male = MaleParse;
                        }
                        else
                        {
                            item.UnsetMale();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Female":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStatsGendered_FieldIndex.Female);
                        if (LoquiXmlTranslation<RaceStats>.Instance.Parse(
                            root: root,
                            item: out RaceStats FemaleParse,
                            errorMask: errorMask))
                        {
                            item.Female = FemaleParse;
                        }
                        else
                        {
                            item.UnsetFemale();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        #region IPropertySupporter RaceStats
        protected ObjectCentralizationSubscriptions<RaceStats> _RaceStats_subscriptions;
        RaceStats IPropertySupporter<RaceStats>.Get(int index)
        {
            return GetRaceStats(index: index);
        }

        protected RaceStats GetRaceStats(int index)
        {
            switch ((RaceStatsGendered_FieldIndex)index)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return Male;
                case RaceStatsGendered_FieldIndex.Female:
                    return Female;
                default:
                    throw new ArgumentException($"Unknown index for field type RaceStats: {index}");
            }
        }

        void IPropertySupporter<RaceStats>.Set(
            int index,
            RaceStats item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetRaceStats(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetRaceStats(
            int index,
            RaceStats item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((RaceStatsGendered_FieldIndex)index)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    SetMale(item, hasBeenSet, cmds);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    SetFemale(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type RaceStats: {index}");
            }
        }

        bool IPropertySupporter<RaceStats>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<RaceStats>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<RaceStats>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetRaceStats(
                index: index,
                cmds: cmds);
        }

        protected void UnsetRaceStats(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((RaceStatsGendered_FieldIndex)index)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    _hasBeenSetTracker[index] = false;
                    Male = default(RaceStats);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    _hasBeenSetTracker[index] = false;
                    Female = default(RaceStats);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type RaceStats: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<RaceStats>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<RaceStats> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_RaceStats_subscriptions == null)
            {
                _RaceStats_subscriptions = new ObjectCentralizationSubscriptions<RaceStats>();
            }
            _RaceStats_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<RaceStats>.Unsubscribe(
            int index,
            object owner)
        {
            _RaceStats_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<RaceStats>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        RaceStats IPropertySupporter<RaceStats>.DefaultValue(int index)
        {
            return DefaultValueRaceStats(index: index);
        }

        protected RaceStats DefaultValueRaceStats(int index)
        {
            switch ((RaceStatsGendered_FieldIndex)index)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return default(RaceStats);
                default:
                    throw new ArgumentException($"Unknown index for field type RaceStats: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RaceStatsGendered_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceStatsGendered Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RaceStatsGendered Create_Binary(
            MutagenFrame frame,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RaceStatsGendered Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RaceStatsGendered();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    recordTypeConverter.ConvertToCustom(RaceStatsGendered_Registration.ATTR_HEADER)));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RaceStatsGendered Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceStatsGendered Create_Binary(
            string path,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RaceStatsGendered Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceStatsGendered Create_Binary(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RaceStatsGenderedCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RaceStatsGendered item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            try
            {
                errorMask?.PushIndex((int)RaceStatsGendered_FieldIndex.Male);
                if (LoquiBinaryTranslation<RaceStats>.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out RaceStats MaleParse,
                    errorMask: errorMask))
                {
                    item.Male = MaleParse;
                }
                else
                {
                    item.UnsetMale();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RaceStatsGendered_FieldIndex.Female);
                if (LoquiBinaryTranslation<RaceStats>.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out RaceStats FemaleParse,
                    errorMask: errorMask))
                {
                    item.Female = FemaleParse;
                }
                else
                {
                    item.UnsetFemale();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public RaceStatsGendered Copy(
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null)
        {
            return RaceStatsGendered.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RaceStatsGendered Copy(
            IRaceStatsGendered item,
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null)
        {
            RaceStatsGendered ret;
            if (item.GetType().Equals(typeof(RaceStatsGendered)))
            {
                ret = new RaceStatsGendered();
            }
            else
            {
                ret = (RaceStatsGendered)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RaceStatsGendered Copy_ToLoqui(
            IRaceStatsGenderedGetter item,
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null)
        {
            RaceStatsGendered ret;
            if (item.GetType().Equals(typeof(RaceStatsGendered)))
            {
                ret = new RaceStatsGendered() as RaceStatsGendered;
            }
            else
            {
                ret = (RaceStatsGendered)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRaceStatsGenderedGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRaceStatsGenderedGetter rhs,
            RaceStatsGendered_CopyMask copyMask,
            IRaceStatsGenderedGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRaceStatsGenderedGetter rhs,
            out RaceStatsGendered_ErrorMask errorMask,
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RaceStatsGenderedCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRaceStatsGenderedGetter rhs,
            ErrorMaskBuilder errorMask,
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RaceStatsGenderedCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    this.SetMale(
                        (RaceStats)obj,
                        cmds: cmds);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    this.SetFemale(
                        (RaceStats)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceStatsGenderedCommon.Clear(this, cmds);
        }


        public static RaceStatsGendered Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RaceStatsGendered();
            foreach (var pair in fields)
            {
                CopyInInternal_RaceStatsGendered(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RaceStatsGendered(RaceStatsGendered obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RaceStatsGendered_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    obj.SetMale(
                        (RaceStats)pair.Value,
                        cmds: null);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    obj.SetFemale(
                        (RaceStats)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RaceStatsGendered obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRaceStatsGendered : IRaceStatsGenderedGetter, ILoquiClass<IRaceStatsGendered, IRaceStatsGenderedGetter>, ILoquiClass<RaceStatsGendered, IRaceStatsGenderedGetter>
    {
        new RaceStats Male { get; set; }
        new INotifyingItem<RaceStats> Male_Property { get; }

        new RaceStats Female { get; set; }
        new INotifyingItem<RaceStats> Female_Property { get; }

    }

    public partial interface IRaceStatsGenderedGetter : ILoquiObject
    {
        #region Male
        RaceStats Male { get; }
        INotifyingItemGetter<RaceStats> Male_Property { get; }

        #endregion
        #region Female
        RaceStats Female { get; }
        INotifyingItemGetter<RaceStats> Female_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RaceStatsGendered_FieldIndex
    {
        Male = 0,
        Female = 1,
    }
    #endregion

    #region Registration
    public class RaceStatsGendered_Registration : ILoquiRegistration
    {
        public static readonly RaceStatsGendered_Registration Instance = new RaceStatsGendered_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 30,
            version: 0);

        public const string GUID = "f6f95fe6-ec9c-4ddd-9713-820547d6c485";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RaceStatsGendered_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceStatsGendered_ErrorMask);

        public static readonly Type ClassType = typeof(RaceStatsGendered);

        public static readonly Type GetterType = typeof(IRaceStatsGenderedGetter);

        public static readonly Type SetterType = typeof(IRaceStatsGendered);

        public static readonly Type CommonType = typeof(RaceStatsGenderedCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RaceStatsGendered";

        public const string Name = "RaceStatsGendered";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MALE":
                    return (ushort)RaceStatsGendered_FieldIndex.Male;
                case "FEMALE":
                    return (ushort)RaceStatsGendered_FieldIndex.Female;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return "Male";
                case RaceStatsGendered_FieldIndex.Female:
                    return "Female";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return typeof(RaceStats);
                case RaceStatsGendered_FieldIndex.Female:
                    return typeof(RaceStats);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType ATTR_HEADER = new RecordType("ATTR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ATTR_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RaceStatsGenderedCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRaceStatsGendered item,
            IRaceStatsGenderedGetter rhs,
            IRaceStatsGenderedGetter def,
            ErrorMaskBuilder errorMask,
            RaceStatsGendered_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Male.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)RaceStatsGendered_FieldIndex.Male);
                try
                {
                    switch (copyMask?.Male?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Male = rhs.Male;
                            break;
                        case CopyOption.CopyIn:
                            RaceStatsCommon.CopyFieldsFrom(
                                item: item.Male,
                                rhs: rhs.Male,
                                def: def?.Male,
                                errorMask: errorMask,
                                copyMask: copyMask?.Male.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Male == null)
                            {
                                item.Male = null;
                            }
                            else
                            {
                                item.Male = RaceStats.Copy(
                                    rhs.Male,
                                    copyMask?.Male?.Specific,
                                    def?.Male);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Male?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Female.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)RaceStatsGendered_FieldIndex.Female);
                try
                {
                    switch (copyMask?.Female?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Female = rhs.Female;
                            break;
                        case CopyOption.CopyIn:
                            RaceStatsCommon.CopyFieldsFrom(
                                item: item.Female,
                                rhs: rhs.Female,
                                def: def?.Female,
                                errorMask: errorMask,
                                copyMask: copyMask?.Female.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Female == null)
                            {
                                item.Female = null;
                            }
                            else
                            {
                                item.Female = RaceStats.Copy(
                                    rhs.Female,
                                    copyMask?.Female?.Specific,
                                    def?.Female);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Female?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRaceStatsGendered obj,
            NotifyingFireParameters cmds = null)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRaceStatsGendered obj,
            NotifyingUnsetParameters cmds = null)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    obj.Male = default(RaceStats);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    obj.Female = default(RaceStats);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRaceStatsGendered obj)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceStatsGenderedGetter obj)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return obj.Male;
                case RaceStatsGendered_FieldIndex.Female:
                    return obj.Female;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRaceStatsGendered item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Male = default(RaceStats);
            item.Female = default(RaceStats);
        }

        public static RaceStatsGendered_Mask<bool> GetEqualsMask(
            this IRaceStatsGenderedGetter item,
            IRaceStatsGenderedGetter rhs)
        {
            var ret = new RaceStatsGendered_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceStatsGenderedGetter item,
            IRaceStatsGenderedGetter rhs,
            RaceStatsGendered_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Male = new MaskItem<bool, RaceStats_Mask<bool>>();
            ret.Male.Specific = RaceStatsCommon.GetEqualsMask(item.Male, rhs.Male);
            ret.Male.Overall = ret.Male.Specific.AllEqual((b) => b);
            ret.Female = new MaskItem<bool, RaceStats_Mask<bool>>();
            ret.Female.Specific = RaceStatsCommon.GetEqualsMask(item.Female, rhs.Female);
            ret.Female.Overall = ret.Female.Specific.AllEqual((b) => b);
        }

        public static string ToString(
            this IRaceStatsGenderedGetter item,
            string name = null,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceStatsGenderedGetter item,
            FileGeneration fg,
            string name = null,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RaceStatsGendered)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RaceStatsGendered)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male?.Overall ?? true)
                {
                    item.Male?.ToString(fg, "Male");
                }
                if (printMask?.Female?.Overall ?? true)
                {
                    item.Female?.ToString(fg, "Female");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceStatsGenderedGetter item,
            RaceStatsGendered_Mask<bool?> checkMask)
        {
            return true;
        }

        public static RaceStatsGendered_Mask<bool> GetHasBeenSetMask(IRaceStatsGenderedGetter item)
        {
            var ret = new RaceStatsGendered_Mask<bool>();
            ret.Male = new MaskItem<bool, RaceStats_Mask<bool>>(true, RaceStatsCommon.GetHasBeenSetMask(item.Male));
            ret.Female = new MaskItem<bool, RaceStats_Mask<bool>>(true, RaceStatsCommon.GetHasBeenSetMask(item.Female));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IRaceStatsGenderedGetter item,
            bool doMasks,
            out RaceStatsGendered_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IRaceStatsGenderedGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RaceStatsGendered");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RaceStatsGendered");
            }
            LoquiXmlTranslation<RaceStats>.Instance.Write(
                node: elem,
                item: item.Male_Property,
                name: nameof(item.Male),
                fieldIndex: (int)RaceStatsGendered_FieldIndex.Male,
                errorMask: errorMask);
            LoquiXmlTranslation<RaceStats>.Instance.Write(
                node: elem,
                item: item.Female_Property,
                name: nameof(item.Female),
                fieldIndex: (int)RaceStatsGendered_FieldIndex.Female,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RaceStatsGendered item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RaceStatsGendered_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RaceStatsGendered item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: RaceStatsGendered_Registration.ATTR_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            RaceStatsGendered item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            LoquiBinaryTranslation<RaceStats>.Instance.Write(
                writer: writer,
                item: item.Male_Property,
                fieldIndex: (int)RaceStatsGendered_FieldIndex.Male,
                errorMask: errorMask);
            LoquiBinaryTranslation<RaceStats>.Instance.Write(
                writer: writer,
                item: item.Female_Property,
                fieldIndex: (int)RaceStatsGendered_FieldIndex.Female,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RaceStatsGendered_Mask<T> : IMask<T>, IEquatable<RaceStatsGendered_Mask<T>>
    {
        #region Ctors
        public RaceStatsGendered_Mask()
        {
        }

        public RaceStatsGendered_Mask(T initialValue)
        {
            this.Male = new MaskItem<T, RaceStats_Mask<T>>(initialValue, new RaceStats_Mask<T>(initialValue));
            this.Female = new MaskItem<T, RaceStats_Mask<T>>(initialValue, new RaceStats_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, RaceStats_Mask<T>> Male { get; set; }
        public MaskItem<T, RaceStats_Mask<T>> Female { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStatsGendered_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStatsGendered_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Male, rhs.Male)) return false;
            if (!object.Equals(this.Female, rhs.Female)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Male?.GetHashCode());
            ret = ret.CombineHashCode(this.Female?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (Male != null)
            {
                if (!eval(this.Male.Overall)) return false;
                if (this.Male.Specific != null && !this.Male.Specific.AllEqual(eval)) return false;
            }
            if (Female != null)
            {
                if (!eval(this.Female.Overall)) return false;
                if (this.Female.Specific != null && !this.Female.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public RaceStatsGendered_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RaceStatsGendered_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RaceStatsGendered_Mask<R> obj, Func<T, R> eval)
        {
            if (this.Male != null)
            {
                obj.Male = new MaskItem<R, RaceStats_Mask<R>>();
                obj.Male.Overall = eval(this.Male.Overall);
                if (this.Male.Specific != null)
                {
                    obj.Male.Specific = this.Male.Specific.Translate(eval);
                }
            }
            if (this.Female != null)
            {
                obj.Female = new MaskItem<R, RaceStats_Mask<R>>();
                obj.Female.Overall = eval(this.Female.Overall);
                if (this.Female.Specific != null)
                {
                    obj.Female.Specific = this.Female.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RaceStatsGendered_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RaceStatsGendered_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RaceStatsGendered_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male?.Overall ?? true)
                {
                    Male?.ToString(fg);
                }
                if (printMask?.Female?.Overall ?? true)
                {
                    Female?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RaceStatsGendered_ErrorMask : IErrorMask, IErrorMask<RaceStatsGendered_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, RaceStats_ErrorMask> Male;
        public MaskItem<Exception, RaceStats_ErrorMask> Female;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return Male;
                case RaceStatsGendered_FieldIndex.Female:
                    return Female;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    this.Male = new MaskItem<Exception, RaceStats_ErrorMask>(ex, null);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    this.Female = new MaskItem<Exception, RaceStats_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    this.Male = (MaskItem<Exception, RaceStats_ErrorMask>)obj;
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    this.Female = (MaskItem<Exception, RaceStats_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Male != null) return true;
            if (Female != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RaceStatsGendered_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            Male?.ToString(fg);
            Female?.ToString(fg);
        }
        #endregion

        #region Combine
        public RaceStatsGendered_ErrorMask Combine(RaceStatsGendered_ErrorMask rhs)
        {
            var ret = new RaceStatsGendered_ErrorMask();
            ret.Male = new MaskItem<Exception, RaceStats_ErrorMask>(this.Male.Overall.Combine(rhs.Male.Overall), ((IErrorMask<RaceStats_ErrorMask>)this.Male.Specific).Combine(rhs.Male.Specific));
            ret.Female = new MaskItem<Exception, RaceStats_ErrorMask>(this.Female.Overall.Combine(rhs.Female.Overall), ((IErrorMask<RaceStats_ErrorMask>)this.Female.Specific).Combine(rhs.Female.Specific));
            return ret;
        }
        public static RaceStatsGendered_ErrorMask Combine(RaceStatsGendered_ErrorMask lhs, RaceStatsGendered_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RaceStatsGendered_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RaceStatsGendered_ErrorMask();
        }
        #endregion

    }
    public class RaceStatsGendered_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, RaceStats_CopyMask> Male;
        public MaskItem<CopyOption, RaceStats_CopyMask> Female;
        #endregion

    }
    #endregion





    #endregion

}
