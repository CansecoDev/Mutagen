/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RaceStats :
        LoquiNotifyingObject,
        IRaceStats,
        ILoquiObjectSetter<RaceStats>,
        IEquatable<RaceStats>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceStats_Registration.Instance;
        public static RaceStats_Registration Registration => RaceStats_Registration.Instance;
        protected object CommonInstance => RaceStatsCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public RaceStats()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Strength
        private Byte _Strength;
        public Byte Strength
        {
            get => this._Strength;
            set => this.RaiseAndSetIfChanged(ref this._Strength, value, nameof(Strength));
        }
        #endregion
        #region Intelligence
        private Byte _Intelligence;
        public Byte Intelligence
        {
            get => this._Intelligence;
            set => this.RaiseAndSetIfChanged(ref this._Intelligence, value, nameof(Intelligence));
        }
        #endregion
        #region Willpower
        private Byte _Willpower;
        public Byte Willpower
        {
            get => this._Willpower;
            set => this.RaiseAndSetIfChanged(ref this._Willpower, value, nameof(Willpower));
        }
        #endregion
        #region Agility
        private Byte _Agility;
        public Byte Agility
        {
            get => this._Agility;
            set => this.RaiseAndSetIfChanged(ref this._Agility, value, nameof(Agility));
        }
        #endregion
        #region Speed
        private Byte _Speed;
        public Byte Speed
        {
            get => this._Speed;
            set => this.RaiseAndSetIfChanged(ref this._Speed, value, nameof(Speed));
        }
        #endregion
        #region Endurance
        private Byte _Endurance;
        public Byte Endurance
        {
            get => this._Endurance;
            set => this.RaiseAndSetIfChanged(ref this._Endurance, value, nameof(Endurance));
        }
        #endregion
        #region Personality
        private Byte _Personality;
        public Byte Personality
        {
            get => this._Personality;
            set => this.RaiseAndSetIfChanged(ref this._Personality, value, nameof(Personality));
        }
        #endregion
        #region Luck
        private Byte _Luck;
        public Byte Luck
        {
            get => this._Luck;
            set => this.RaiseAndSetIfChanged(ref this._Luck, value, nameof(Luck));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceStatsGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceStatsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStats rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStats rhs)
        {
            if (rhs == null) return false;
            if (this.Strength != rhs.Strength) return false;
            if (this.Intelligence != rhs.Intelligence) return false;
            if (this.Willpower != rhs.Willpower) return false;
            if (this.Agility != rhs.Agility) return false;
            if (this.Speed != rhs.Speed) return false;
            if (this.Endurance != rhs.Endurance) return false;
            if (this.Personality != rhs.Personality) return false;
            if (this.Luck != rhs.Luck) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Strength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Intelligence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Willpower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Agility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Endurance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Personality).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Luck).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected object XmlWriteTranslator => RaceStatsXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static RaceStats CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RaceStats_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RaceStats CreateFromXml(
            XElement node,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true,
            RaceStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceStats CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RaceStats() : null;
                    break;
                default:
                    break;
            }
            var ret = new RaceStats();
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceStatsXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RaceStats CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RaceStats_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RaceStats CreateFromXml(
            string path,
            out RaceStats_ErrorMask errorMask,
            RaceStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceStats CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RaceStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RaceStats CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RaceStats_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RaceStats CreateFromXml(
            Stream stream,
            out RaceStats_ErrorMask errorMask,
            RaceStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceStats CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RaceStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((RaceStats_FieldIndex)index)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => RaceStatsBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceStats CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RaceStats CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceStats CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RaceStats();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            RaceStats item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            item.Strength = frame.ReadUInt8();
            item.Intelligence = frame.ReadUInt8();
            item.Willpower = frame.ReadUInt8();
            item.Agility = frame.ReadUInt8();
            item.Speed = frame.ReadUInt8();
            item.Endurance = frame.ReadUInt8();
            item.Personality = frame.ReadUInt8();
            item.Luck = frame.ReadUInt8();
        }

        #endregion

        public RaceStats Copy(
            RaceStats_CopyMask copyMask = null,
            RaceStats def = null)
        {
            return RaceStats.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RaceStats Copy(
            RaceStats item,
            RaceStats_CopyMask copyMask = null,
            RaceStats def = null)
        {
            RaceStats ret;
            if (item.GetType().Equals(typeof(RaceStats)))
            {
                ret = new RaceStats();
            }
            else
            {
                ret = (RaceStats)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RaceStats Copy_ToLoqui(
            RaceStats item,
            RaceStats_CopyMask copyMask = null,
            RaceStats def = null)
        {
            RaceStats ret;
            if (item.GetType().Equals(typeof(RaceStats)))
            {
                ret = new RaceStats() as RaceStats;
            }
            else
            {
                ret = (RaceStats)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(RaceStats rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            RaceStats rhs,
            RaceStats_CopyMask copyMask,
            RaceStats def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            RaceStats rhs,
            out RaceStats_ErrorMask errorMask,
            RaceStats_CopyMask copyMask = null,
            RaceStats def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RaceStatsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            RaceStats rhs,
            ErrorMaskBuilder errorMask,
            RaceStats_CopyMask copyMask = null,
            RaceStats def = null)
        {
            RaceStatsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    this.Strength = (Byte)obj;
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    this.Intelligence = (Byte)obj;
                    break;
                case RaceStats_FieldIndex.Willpower:
                    this.Willpower = (Byte)obj;
                    break;
                case RaceStats_FieldIndex.Agility:
                    this.Agility = (Byte)obj;
                    break;
                case RaceStats_FieldIndex.Speed:
                    this.Speed = (Byte)obj;
                    break;
                case RaceStats_FieldIndex.Endurance:
                    this.Endurance = (Byte)obj;
                    break;
                case RaceStats_FieldIndex.Personality:
                    this.Personality = (Byte)obj;
                    break;
                case RaceStats_FieldIndex.Luck:
                    this.Luck = (Byte)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            RaceStatsCommon.Instance.Clear(this);
        }

        public static RaceStats Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RaceStats();
            foreach (var pair in fields)
            {
                CopyInInternal_RaceStats(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RaceStats(RaceStats obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RaceStats_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    obj.Strength = (Byte)pair.Value;
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    obj.Intelligence = (Byte)pair.Value;
                    break;
                case RaceStats_FieldIndex.Willpower:
                    obj.Willpower = (Byte)pair.Value;
                    break;
                case RaceStats_FieldIndex.Agility:
                    obj.Agility = (Byte)pair.Value;
                    break;
                case RaceStats_FieldIndex.Speed:
                    obj.Speed = (Byte)pair.Value;
                    break;
                case RaceStats_FieldIndex.Endurance:
                    obj.Endurance = (Byte)pair.Value;
                    break;
                case RaceStats_FieldIndex.Personality:
                    obj.Personality = (Byte)pair.Value;
                    break;
                case RaceStats_FieldIndex.Luck:
                    obj.Luck = (Byte)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRaceStats :
        IRaceStatsGetter,
        ILoquiObjectSetter<IRaceStats>
    {
        new Byte Strength { get; set; }

        new Byte Intelligence { get; set; }

        new Byte Willpower { get; set; }

        new Byte Agility { get; set; }

        new Byte Speed { get; set; }

        new Byte Endurance { get; set; }

        new Byte Personality { get; set; }

        new Byte Luck { get; set; }

        void CopyFieldsFrom(
            RaceStats rhs,
            ErrorMaskBuilder errorMask = null,
            RaceStats_CopyMask copyMask = null,
            RaceStats def = null);
    }

    public partial interface IRaceStatsGetter :
        ILoquiObject,
        ILoquiObject<IRaceStatsGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Strength
        Byte Strength { get; }

        #endregion
        #region Intelligence
        Byte Intelligence { get; }

        #endregion
        #region Willpower
        Byte Willpower { get; }

        #endregion
        #region Agility
        Byte Agility { get; }

        #endregion
        #region Speed
        Byte Speed { get; }

        #endregion
        #region Endurance
        Byte Endurance { get; }

        #endregion
        #region Personality
        Byte Personality { get; }

        #endregion
        #region Luck
        Byte Luck { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RaceStatsMixIn
    {
        public static void Clear(this IRaceStats item)
        {
            ((RaceStatsCommon)item.CommonInstance).Clear(item: item);
        }

        public static RaceStats_Mask<bool> GetEqualsMask(
            this IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceStatsCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceStatsGetter item,
            string name = null,
            RaceStats_Mask<bool> printMask = null)
        {
            return ((RaceStatsCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceStatsGetter item,
            FileGeneration fg,
            string name = null,
            RaceStats_Mask<bool> printMask = null)
        {
            ((RaceStatsCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceStatsGetter item,
            RaceStats_Mask<bool?> checkMask)
        {
            return ((RaceStatsCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RaceStats_Mask<bool> GetHasBeenSetMask(this IRaceStatsGetter item)
        {
            var ret = new RaceStats_Mask<bool>();
            ((RaceStatsCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RaceStats_FieldIndex
    {
        Strength = 0,
        Intelligence = 1,
        Willpower = 2,
        Agility = 3,
        Speed = 4,
        Endurance = 5,
        Personality = 6,
        Luck = 7,
    }
    #endregion

    #region Registration
    public class RaceStats_Registration : ILoquiRegistration
    {
        public static readonly RaceStats_Registration Instance = new RaceStats_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 31,
            version: 0);

        public const string GUID = "3cbe1b09-d220-47e3-a57d-3d9a4feada8b";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(RaceStats_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceStats_ErrorMask);

        public static readonly Type ClassType = typeof(RaceStats);

        public static readonly Type GetterType = typeof(IRaceStatsGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRaceStats);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(RaceStatsCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RaceStats";

        public const string Name = "RaceStats";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "STRENGTH":
                    return (ushort)RaceStats_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)RaceStats_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)RaceStats_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)RaceStats_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)RaceStats_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)RaceStats_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)RaceStats_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)RaceStats_FieldIndex.Luck;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return "Strength";
                case RaceStats_FieldIndex.Intelligence:
                    return "Intelligence";
                case RaceStats_FieldIndex.Willpower:
                    return "Willpower";
                case RaceStats_FieldIndex.Agility:
                    return "Agility";
                case RaceStats_FieldIndex.Speed:
                    return "Speed";
                case RaceStats_FieldIndex.Endurance:
                    return "Endurance";
                case RaceStats_FieldIndex.Personality:
                    return "Personality";
                case RaceStats_FieldIndex.Luck:
                    return "Luck";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Intelligence:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Willpower:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Agility:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Speed:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Endurance:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Personality:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Luck:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RaceStatsXmlWriteTranslation);
        public const int NumStructFields = 8;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RaceStatsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceStatsCommon
    {
        public static readonly RaceStatsCommon Instance = new RaceStatsCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            RaceStats item,
            RaceStats rhs,
            RaceStats def,
            ErrorMaskBuilder errorMask,
            RaceStats_CopyMask copyMask)
        {
            if (copyMask?.Strength ?? true)
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Strength);
                try
                {
                    item.Strength = rhs.Strength;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Intelligence ?? true)
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Intelligence);
                try
                {
                    item.Intelligence = rhs.Intelligence;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Willpower ?? true)
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Willpower);
                try
                {
                    item.Willpower = rhs.Willpower;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Agility ?? true)
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Agility);
                try
                {
                    item.Agility = rhs.Agility;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Speed ?? true)
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Speed);
                try
                {
                    item.Speed = rhs.Speed;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Endurance ?? true)
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Endurance);
                try
                {
                    item.Endurance = rhs.Endurance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Personality ?? true)
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Personality);
                try
                {
                    item.Personality = rhs.Personality;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Luck ?? true)
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Luck);
                try
                {
                    item.Luck = rhs.Luck;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IRaceStats item)
        {
            ClearPartial();
            item.Strength = default(Byte);
            item.Intelligence = default(Byte);
            item.Willpower = default(Byte);
            item.Agility = default(Byte);
            item.Speed = default(Byte);
            item.Endurance = default(Byte);
            item.Personality = default(Byte);
            item.Luck = default(Byte);
        }

        public RaceStats_Mask<bool> GetEqualsMask(
            IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RaceStats_Mask<bool>();
            ((RaceStatsCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            RaceStats_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
        }

        public string ToString(
            IRaceStatsGetter item,
            string name = null,
            RaceStats_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IRaceStatsGetter item,
            FileGeneration fg,
            string name = null,
            RaceStats_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RaceStats =>");
            }
            else
            {
                fg.AppendLine($"{name} (RaceStats) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IRaceStatsGetter item,
            FileGeneration fg,
            RaceStats_Mask<bool> printMask = null)
        {
            if (printMask?.Strength ?? true)
            {
                fg.AppendLine($"Strength => {item.Strength}");
            }
            if (printMask?.Intelligence ?? true)
            {
                fg.AppendLine($"Intelligence => {item.Intelligence}");
            }
            if (printMask?.Willpower ?? true)
            {
                fg.AppendLine($"Willpower => {item.Willpower}");
            }
            if (printMask?.Agility ?? true)
            {
                fg.AppendLine($"Agility => {item.Agility}");
            }
            if (printMask?.Speed ?? true)
            {
                fg.AppendLine($"Speed => {item.Speed}");
            }
            if (printMask?.Endurance ?? true)
            {
                fg.AppendLine($"Endurance => {item.Endurance}");
            }
            if (printMask?.Personality ?? true)
            {
                fg.AppendLine($"Personality => {item.Personality}");
            }
            if (printMask?.Luck ?? true)
            {
                fg.AppendLine($"Luck => {item.Luck}");
            }
        }

        public bool HasBeenSet(
            IRaceStatsGetter item,
            RaceStats_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IRaceStatsGetter item,
            RaceStats_Mask<bool> mask)
        {
            mask.Strength = true;
            mask.Intelligence = true;
            mask.Willpower = true;
            mask.Agility = true;
            mask.Speed = true;
            mask.Endurance = true;
            mask.Personality = true;
            mask.Luck = true;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RaceStatsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RaceStatsXmlWriteTranslation Instance = new RaceStatsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRaceStatsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Strength) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Strength),
                    item: item.Strength,
                    fieldIndex: (int)RaceStats_FieldIndex.Strength,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Intelligence) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Intelligence),
                    item: item.Intelligence,
                    fieldIndex: (int)RaceStats_FieldIndex.Intelligence,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Willpower) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Willpower),
                    item: item.Willpower,
                    fieldIndex: (int)RaceStats_FieldIndex.Willpower,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Agility) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Agility),
                    item: item.Agility,
                    fieldIndex: (int)RaceStats_FieldIndex.Agility,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Speed) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Speed),
                    item: item.Speed,
                    fieldIndex: (int)RaceStats_FieldIndex.Speed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Endurance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Endurance),
                    item: item.Endurance,
                    fieldIndex: (int)RaceStats_FieldIndex.Endurance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Personality) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Personality),
                    item: item.Personality,
                    fieldIndex: (int)RaceStats_FieldIndex.Personality,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Luck) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Luck),
                    item: item.Luck,
                    fieldIndex: (int)RaceStats_FieldIndex.Luck,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRaceStatsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RaceStats");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RaceStats");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRaceStatsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRaceStatsGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRaceStatsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RaceStatsXmlCreateTranslation
    {
        public readonly static RaceStatsXmlCreateTranslation Instance = new RaceStatsXmlCreateTranslation();

        public static void FillPublicXml(
            IRaceStats item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceStatsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRaceStats item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Strength":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Strength);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte StrengthParse,
                            errorMask: errorMask))
                        {
                            item.Strength = StrengthParse;
                        }
                        else
                        {
                            item.Strength = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Intelligence":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Intelligence);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte IntelligenceParse,
                            errorMask: errorMask))
                        {
                            item.Intelligence = IntelligenceParse;
                        }
                        else
                        {
                            item.Intelligence = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Willpower":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Willpower);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte WillpowerParse,
                            errorMask: errorMask))
                        {
                            item.Willpower = WillpowerParse;
                        }
                        else
                        {
                            item.Willpower = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Agility":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Agility);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte AgilityParse,
                            errorMask: errorMask))
                        {
                            item.Agility = AgilityParse;
                        }
                        else
                        {
                            item.Agility = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speed":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Speed);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte SpeedParse,
                            errorMask: errorMask))
                        {
                            item.Speed = SpeedParse;
                        }
                        else
                        {
                            item.Speed = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Endurance":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Endurance);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte EnduranceParse,
                            errorMask: errorMask))
                        {
                            item.Endurance = EnduranceParse;
                        }
                        else
                        {
                            item.Endurance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Personality":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Personality);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte PersonalityParse,
                            errorMask: errorMask))
                        {
                            item.Personality = PersonalityParse;
                        }
                        else
                        {
                            item.Personality = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Luck":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Luck);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte LuckParse,
                            errorMask: errorMask))
                        {
                            item.Luck = LuckParse;
                        }
                        else
                        {
                            item.Luck = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class RaceStatsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRaceStatsGetter item,
            XElement node,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true,
            RaceStats_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RaceStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            string path,
            out RaceStats_ErrorMask errorMask,
            RaceStats_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            Stream stream,
            out RaceStats_ErrorMask errorMask,
            RaceStats_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RaceStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            XElement node,
            string name = null,
            RaceStats_TranslationMask translationMask = null)
        {
            ((RaceStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RaceStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RaceStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class RaceStats_Mask<T> : IMask<T>, IEquatable<RaceStats_Mask<T>>
    {
        #region Ctors
        public RaceStats_Mask()
        {
        }

        public RaceStats_Mask(T initialValue)
        {
            this.Strength = initialValue;
            this.Intelligence = initialValue;
            this.Willpower = initialValue;
            this.Agility = initialValue;
            this.Speed = initialValue;
            this.Endurance = initialValue;
            this.Personality = initialValue;
            this.Luck = initialValue;
        }
        #endregion

        #region Members
        public T Strength;
        public T Intelligence;
        public T Willpower;
        public T Agility;
        public T Speed;
        public T Endurance;
        public T Personality;
        public T Luck;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStats_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStats_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Strength, rhs.Strength)) return false;
            if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
            if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
            if (!object.Equals(this.Agility, rhs.Agility)) return false;
            if (!object.Equals(this.Speed, rhs.Speed)) return false;
            if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
            if (!object.Equals(this.Personality, rhs.Personality)) return false;
            if (!object.Equals(this.Luck, rhs.Luck)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Strength?.GetHashCode());
            ret = ret.CombineHashCode(this.Intelligence?.GetHashCode());
            ret = ret.CombineHashCode(this.Willpower?.GetHashCode());
            ret = ret.CombineHashCode(this.Agility?.GetHashCode());
            ret = ret.CombineHashCode(this.Speed?.GetHashCode());
            ret = ret.CombineHashCode(this.Endurance?.GetHashCode());
            ret = ret.CombineHashCode(this.Personality?.GetHashCode());
            ret = ret.CombineHashCode(this.Luck?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Strength)) return false;
            if (!eval(this.Intelligence)) return false;
            if (!eval(this.Willpower)) return false;
            if (!eval(this.Agility)) return false;
            if (!eval(this.Speed)) return false;
            if (!eval(this.Endurance)) return false;
            if (!eval(this.Personality)) return false;
            if (!eval(this.Luck)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RaceStats_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RaceStats_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RaceStats_Mask<R> obj, Func<T, R> eval)
        {
            obj.Strength = eval(this.Strength);
            obj.Intelligence = eval(this.Intelligence);
            obj.Willpower = eval(this.Willpower);
            obj.Agility = eval(this.Agility);
            obj.Speed = eval(this.Speed);
            obj.Endurance = eval(this.Endurance);
            obj.Personality = eval(this.Personality);
            obj.Luck = eval(this.Luck);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RaceStats_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RaceStats_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RaceStats_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {Luck}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RaceStats_ErrorMask : IErrorMask, IErrorMask<RaceStats_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Strength;
        public Exception Intelligence;
        public Exception Willpower;
        public Exception Agility;
        public Exception Speed;
        public Exception Endurance;
        public Exception Personality;
        public Exception Luck;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return Strength;
                case RaceStats_FieldIndex.Intelligence:
                    return Intelligence;
                case RaceStats_FieldIndex.Willpower:
                    return Willpower;
                case RaceStats_FieldIndex.Agility:
                    return Agility;
                case RaceStats_FieldIndex.Speed:
                    return Speed;
                case RaceStats_FieldIndex.Endurance:
                    return Endurance;
                case RaceStats_FieldIndex.Personality:
                    return Personality;
                case RaceStats_FieldIndex.Luck:
                    return Luck;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    this.Strength = ex;
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    this.Intelligence = ex;
                    break;
                case RaceStats_FieldIndex.Willpower:
                    this.Willpower = ex;
                    break;
                case RaceStats_FieldIndex.Agility:
                    this.Agility = ex;
                    break;
                case RaceStats_FieldIndex.Speed:
                    this.Speed = ex;
                    break;
                case RaceStats_FieldIndex.Endurance:
                    this.Endurance = ex;
                    break;
                case RaceStats_FieldIndex.Personality:
                    this.Personality = ex;
                    break;
                case RaceStats_FieldIndex.Luck:
                    this.Luck = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    this.Strength = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    this.Intelligence = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Willpower:
                    this.Willpower = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Agility:
                    this.Agility = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Speed:
                    this.Speed = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Endurance:
                    this.Endurance = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Personality:
                    this.Personality = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Luck:
                    this.Luck = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Strength != null) return true;
            if (Intelligence != null) return true;
            if (Willpower != null) return true;
            if (Agility != null) return true;
            if (Speed != null) return true;
            if (Endurance != null) return true;
            if (Personality != null) return true;
            if (Luck != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RaceStats_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Strength => {Strength}");
            fg.AppendLine($"Intelligence => {Intelligence}");
            fg.AppendLine($"Willpower => {Willpower}");
            fg.AppendLine($"Agility => {Agility}");
            fg.AppendLine($"Speed => {Speed}");
            fg.AppendLine($"Endurance => {Endurance}");
            fg.AppendLine($"Personality => {Personality}");
            fg.AppendLine($"Luck => {Luck}");
        }
        #endregion

        #region Combine
        public RaceStats_ErrorMask Combine(RaceStats_ErrorMask rhs)
        {
            var ret = new RaceStats_ErrorMask();
            ret.Strength = this.Strength.Combine(rhs.Strength);
            ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
            ret.Willpower = this.Willpower.Combine(rhs.Willpower);
            ret.Agility = this.Agility.Combine(rhs.Agility);
            ret.Speed = this.Speed.Combine(rhs.Speed);
            ret.Endurance = this.Endurance.Combine(rhs.Endurance);
            ret.Personality = this.Personality.Combine(rhs.Personality);
            ret.Luck = this.Luck.Combine(rhs.Luck);
            return ret;
        }
        public static RaceStats_ErrorMask Combine(RaceStats_ErrorMask lhs, RaceStats_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RaceStats_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RaceStats_ErrorMask();
        }
        #endregion

    }
    public class RaceStats_CopyMask
    {
        public RaceStats_CopyMask()
        {
        }

        public RaceStats_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Strength = defaultOn;
            this.Intelligence = defaultOn;
            this.Willpower = defaultOn;
            this.Agility = defaultOn;
            this.Speed = defaultOn;
            this.Endurance = defaultOn;
            this.Personality = defaultOn;
            this.Luck = defaultOn;
        }

        #region Members
        public bool Strength;
        public bool Intelligence;
        public bool Willpower;
        public bool Agility;
        public bool Speed;
        public bool Endurance;
        public bool Personality;
        public bool Luck;
        #endregion

    }

    public class RaceStats_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Strength;
        public bool Intelligence;
        public bool Willpower;
        public bool Agility;
        public bool Speed;
        public bool Endurance;
        public bool Personality;
        public bool Luck;
        #endregion

        #region Ctors
        public RaceStats_TranslationMask()
        {
        }

        public RaceStats_TranslationMask(bool defaultOn)
        {
            this.Strength = defaultOn;
            this.Intelligence = defaultOn;
            this.Willpower = defaultOn;
            this.Agility = defaultOn;
            this.Speed = defaultOn;
            this.Endurance = defaultOn;
            this.Personality = defaultOn;
            this.Luck = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Strength, null));
            ret.Add((Intelligence, null));
            ret.Add((Willpower, null));
            ret.Add((Agility, null));
            ret.Add((Speed, null));
            ret.Add((Endurance, null));
            ret.Add((Personality, null));
            ret.Add((Luck, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RaceStatsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RaceStatsBinaryWriteTranslation Instance = new RaceStatsBinaryWriteTranslation();

        public static void Write_Embedded(
            IRaceStatsGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            writer.Write(item.Strength);
            writer.Write(item.Intelligence);
            writer.Write(item.Willpower);
            writer.Write(item.Agility);
            writer.Write(item.Speed);
            writer.Write(item.Endurance);
            writer.Write(item.Personality);
            writer.Write(item.Luck);
        }

        public void Write(
            MutagenWriter writer,
            IRaceStatsGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRaceStatsGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RaceStatsBinaryCreateTranslation
    {
        public readonly static RaceStatsBinaryCreateTranslation Instance = new RaceStatsBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class RaceStatsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRaceStatsGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RaceStatsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IRaceStatsGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((RaceStatsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IRaceStatsGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RaceStatsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
