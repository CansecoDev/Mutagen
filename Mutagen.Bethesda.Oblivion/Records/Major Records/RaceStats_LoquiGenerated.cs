/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RaceStats : 
        IRaceStats,
        ILoquiObject<RaceStats>,
        ILoquiObjectSetter,
        IPropertySupporter<Byte>,
        IEquatable<RaceStats>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceStats_Registration.Instance;
        public static RaceStats_Registration Registration => RaceStats_Registration.Instance;

        #region Ctor
        public RaceStats()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Strength
        protected Byte _Strength;
        protected PropertyForwarder<RaceStats, Byte> _StrengthForwarder;
        public INotifyingSetItem<Byte> Strength_Property => _StrengthForwarder ?? (_StrengthForwarder = new PropertyForwarder<RaceStats, Byte>(this, (int)RaceStats_FieldIndex.Strength));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Strength
        {
            get => this._Strength;
            set => this.SetStrength(value);
        }
        protected void SetStrength(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RaceStats_FieldIndex.Strength];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Strength == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RaceStats_FieldIndex.Strength] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Strength;
                _Strength = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RaceStats_FieldIndex.Strength,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Strength = item;
            }
        }
        protected void UnsetStrength()
        {
            _hasBeenSetTracker[(int)RaceStats_FieldIndex.Strength] = false;
            Strength = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Strength_Property => this.Strength_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Strength_Property => this.Strength_Property;
        #endregion
        #region Intelligence
        protected Byte _Intelligence;
        protected PropertyForwarder<RaceStats, Byte> _IntelligenceForwarder;
        public INotifyingSetItem<Byte> Intelligence_Property => _IntelligenceForwarder ?? (_IntelligenceForwarder = new PropertyForwarder<RaceStats, Byte>(this, (int)RaceStats_FieldIndex.Intelligence));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Intelligence
        {
            get => this._Intelligence;
            set => this.SetIntelligence(value);
        }
        protected void SetIntelligence(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RaceStats_FieldIndex.Intelligence];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Intelligence == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RaceStats_FieldIndex.Intelligence] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Intelligence;
                _Intelligence = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RaceStats_FieldIndex.Intelligence,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Intelligence = item;
            }
        }
        protected void UnsetIntelligence()
        {
            _hasBeenSetTracker[(int)RaceStats_FieldIndex.Intelligence] = false;
            Intelligence = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Intelligence_Property => this.Intelligence_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Intelligence_Property => this.Intelligence_Property;
        #endregion
        #region Willpower
        protected Byte _Willpower;
        protected PropertyForwarder<RaceStats, Byte> _WillpowerForwarder;
        public INotifyingSetItem<Byte> Willpower_Property => _WillpowerForwarder ?? (_WillpowerForwarder = new PropertyForwarder<RaceStats, Byte>(this, (int)RaceStats_FieldIndex.Willpower));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Willpower
        {
            get => this._Willpower;
            set => this.SetWillpower(value);
        }
        protected void SetWillpower(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RaceStats_FieldIndex.Willpower];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Willpower == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RaceStats_FieldIndex.Willpower] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Willpower;
                _Willpower = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RaceStats_FieldIndex.Willpower,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Willpower = item;
            }
        }
        protected void UnsetWillpower()
        {
            _hasBeenSetTracker[(int)RaceStats_FieldIndex.Willpower] = false;
            Willpower = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Willpower_Property => this.Willpower_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Willpower_Property => this.Willpower_Property;
        #endregion
        #region Agility
        protected Byte _Agility;
        protected PropertyForwarder<RaceStats, Byte> _AgilityForwarder;
        public INotifyingSetItem<Byte> Agility_Property => _AgilityForwarder ?? (_AgilityForwarder = new PropertyForwarder<RaceStats, Byte>(this, (int)RaceStats_FieldIndex.Agility));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Agility
        {
            get => this._Agility;
            set => this.SetAgility(value);
        }
        protected void SetAgility(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RaceStats_FieldIndex.Agility];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Agility == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RaceStats_FieldIndex.Agility] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Agility;
                _Agility = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RaceStats_FieldIndex.Agility,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Agility = item;
            }
        }
        protected void UnsetAgility()
        {
            _hasBeenSetTracker[(int)RaceStats_FieldIndex.Agility] = false;
            Agility = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Agility_Property => this.Agility_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Agility_Property => this.Agility_Property;
        #endregion
        #region Speed
        protected Byte _Speed;
        protected PropertyForwarder<RaceStats, Byte> _SpeedForwarder;
        public INotifyingSetItem<Byte> Speed_Property => _SpeedForwarder ?? (_SpeedForwarder = new PropertyForwarder<RaceStats, Byte>(this, (int)RaceStats_FieldIndex.Speed));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Speed
        {
            get => this._Speed;
            set => this.SetSpeed(value);
        }
        protected void SetSpeed(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RaceStats_FieldIndex.Speed];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Speed == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RaceStats_FieldIndex.Speed] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Speed;
                _Speed = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RaceStats_FieldIndex.Speed,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Speed = item;
            }
        }
        protected void UnsetSpeed()
        {
            _hasBeenSetTracker[(int)RaceStats_FieldIndex.Speed] = false;
            Speed = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Speed_Property => this.Speed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Speed_Property => this.Speed_Property;
        #endregion
        #region Endurance
        protected Byte _Endurance;
        protected PropertyForwarder<RaceStats, Byte> _EnduranceForwarder;
        public INotifyingSetItem<Byte> Endurance_Property => _EnduranceForwarder ?? (_EnduranceForwarder = new PropertyForwarder<RaceStats, Byte>(this, (int)RaceStats_FieldIndex.Endurance));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Endurance
        {
            get => this._Endurance;
            set => this.SetEndurance(value);
        }
        protected void SetEndurance(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RaceStats_FieldIndex.Endurance];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Endurance == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RaceStats_FieldIndex.Endurance] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Endurance;
                _Endurance = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RaceStats_FieldIndex.Endurance,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Endurance = item;
            }
        }
        protected void UnsetEndurance()
        {
            _hasBeenSetTracker[(int)RaceStats_FieldIndex.Endurance] = false;
            Endurance = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Endurance_Property => this.Endurance_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Endurance_Property => this.Endurance_Property;
        #endregion
        #region Personality
        protected Byte _Personality;
        protected PropertyForwarder<RaceStats, Byte> _PersonalityForwarder;
        public INotifyingSetItem<Byte> Personality_Property => _PersonalityForwarder ?? (_PersonalityForwarder = new PropertyForwarder<RaceStats, Byte>(this, (int)RaceStats_FieldIndex.Personality));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Personality
        {
            get => this._Personality;
            set => this.SetPersonality(value);
        }
        protected void SetPersonality(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RaceStats_FieldIndex.Personality];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Personality == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RaceStats_FieldIndex.Personality] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Personality;
                _Personality = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RaceStats_FieldIndex.Personality,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Personality = item;
            }
        }
        protected void UnsetPersonality()
        {
            _hasBeenSetTracker[(int)RaceStats_FieldIndex.Personality] = false;
            Personality = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Personality_Property => this.Personality_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Personality_Property => this.Personality_Property;
        #endregion
        #region Luck
        protected Byte _Luck;
        protected PropertyForwarder<RaceStats, Byte> _LuckForwarder;
        public INotifyingSetItem<Byte> Luck_Property => _LuckForwarder ?? (_LuckForwarder = new PropertyForwarder<RaceStats, Byte>(this, (int)RaceStats_FieldIndex.Luck));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Luck
        {
            get => this._Luck;
            set => this.SetLuck(value);
        }
        protected void SetLuck(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RaceStats_FieldIndex.Luck];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Luck == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RaceStats_FieldIndex.Luck] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Luck;
                _Luck = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RaceStats_FieldIndex.Luck,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Luck = item;
            }
        }
        protected void UnsetLuck()
        {
            _hasBeenSetTracker[(int)RaceStats_FieldIndex.Luck] = false;
            Luck = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Luck_Property => this.Luck_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Luck_Property => this.Luck_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RaceStatsCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RaceStatsCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RaceStatsCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceStatsCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<RaceStats>.GetEqualsMask(RaceStats rhs) => RaceStatsCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRaceStatsGetter>.GetEqualsMask(IRaceStatsGetter rhs) => RaceStatsCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RaceStatsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RaceStats_Mask<bool> printMask = null)
        {
            return RaceStatsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceStatsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public RaceStats_Mask<bool> GetHasBeenSetMask()
        {
            return RaceStatsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStats rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStats rhs)
        {
            if (rhs == null) return false;
            if (this.Strength != rhs.Strength) return false;
            if (this.Intelligence != rhs.Intelligence) return false;
            if (this.Willpower != rhs.Willpower) return false;
            if (this.Agility != rhs.Agility) return false;
            if (this.Speed != rhs.Speed) return false;
            if (this.Endurance != rhs.Endurance) return false;
            if (this.Personality != rhs.Personality) return false;
            if (this.Luck != rhs.Luck) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Strength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Intelligence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Willpower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Agility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Endurance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Personality).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Luck).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static RaceStats Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RaceStats Create_XML(
            XElement root,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RaceStats Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RaceStats();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RaceStats Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RaceStats Create_XML(
            string path,
            out RaceStats_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RaceStats Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RaceStats Create_XML(
            Stream stream,
            out RaceStats_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RaceStats>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RaceStats_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<RaceStats>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RaceStats_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RaceStats_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            RaceStatsCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            RaceStats item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Strength":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Strength);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte StrengthParse,
                            errorMask: errorMask))
                        {
                            item.Strength = StrengthParse;
                        }
                        else
                        {
                            item.UnsetStrength();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Intelligence":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Intelligence);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte IntelligenceParse,
                            errorMask: errorMask))
                        {
                            item.Intelligence = IntelligenceParse;
                        }
                        else
                        {
                            item.UnsetIntelligence();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Willpower":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Willpower);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte WillpowerParse,
                            errorMask: errorMask))
                        {
                            item.Willpower = WillpowerParse;
                        }
                        else
                        {
                            item.UnsetWillpower();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Agility":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Agility);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte AgilityParse,
                            errorMask: errorMask))
                        {
                            item.Agility = AgilityParse;
                        }
                        else
                        {
                            item.UnsetAgility();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speed":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Speed);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte SpeedParse,
                            errorMask: errorMask))
                        {
                            item.Speed = SpeedParse;
                        }
                        else
                        {
                            item.UnsetSpeed();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Endurance":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Endurance);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte EnduranceParse,
                            errorMask: errorMask))
                        {
                            item.Endurance = EnduranceParse;
                        }
                        else
                        {
                            item.UnsetEndurance();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Personality":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Personality);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte PersonalityParse,
                            errorMask: errorMask))
                        {
                            item.Personality = PersonalityParse;
                        }
                        else
                        {
                            item.UnsetPersonality();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Luck":
                    try
                    {
                        errorMask?.PushIndex((int)RaceStats_FieldIndex.Luck);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte LuckParse,
                            errorMask: errorMask))
                        {
                            item.Luck = LuckParse;
                        }
                        else
                        {
                            item.UnsetLuck();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        #region IPropertySupporter Byte
        protected ObjectCentralizationSubscriptions<Byte> _Byte_subscriptions;
        Byte IPropertySupporter<Byte>.Get(int index)
        {
            return GetByte(index: index);
        }

        protected Byte GetByte(int index)
        {
            switch ((RaceStats_FieldIndex)index)
            {
                case RaceStats_FieldIndex.Strength:
                    return Strength;
                case RaceStats_FieldIndex.Intelligence:
                    return Intelligence;
                case RaceStats_FieldIndex.Willpower:
                    return Willpower;
                case RaceStats_FieldIndex.Agility:
                    return Agility;
                case RaceStats_FieldIndex.Speed:
                    return Speed;
                case RaceStats_FieldIndex.Endurance:
                    return Endurance;
                case RaceStats_FieldIndex.Personality:
                    return Personality;
                case RaceStats_FieldIndex.Luck:
                    return Luck;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        void IPropertySupporter<Byte>.Set(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByte(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByte(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((RaceStats_FieldIndex)index)
            {
                case RaceStats_FieldIndex.Strength:
                    SetStrength(item, hasBeenSet, cmds);
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    SetIntelligence(item, hasBeenSet, cmds);
                    break;
                case RaceStats_FieldIndex.Willpower:
                    SetWillpower(item, hasBeenSet, cmds);
                    break;
                case RaceStats_FieldIndex.Agility:
                    SetAgility(item, hasBeenSet, cmds);
                    break;
                case RaceStats_FieldIndex.Speed:
                    SetSpeed(item, hasBeenSet, cmds);
                    break;
                case RaceStats_FieldIndex.Endurance:
                    SetEndurance(item, hasBeenSet, cmds);
                    break;
                case RaceStats_FieldIndex.Personality:
                    SetPersonality(item, hasBeenSet, cmds);
                    break;
                case RaceStats_FieldIndex.Luck:
                    SetLuck(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        bool IPropertySupporter<Byte>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<Byte>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByte(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByte(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((RaceStats_FieldIndex)index)
            {
                case RaceStats_FieldIndex.Strength:
                    _hasBeenSetTracker[index] = false;
                    Strength = default(Byte);
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    _hasBeenSetTracker[index] = false;
                    Intelligence = default(Byte);
                    break;
                case RaceStats_FieldIndex.Willpower:
                    _hasBeenSetTracker[index] = false;
                    Willpower = default(Byte);
                    break;
                case RaceStats_FieldIndex.Agility:
                    _hasBeenSetTracker[index] = false;
                    Agility = default(Byte);
                    break;
                case RaceStats_FieldIndex.Speed:
                    _hasBeenSetTracker[index] = false;
                    Speed = default(Byte);
                    break;
                case RaceStats_FieldIndex.Endurance:
                    _hasBeenSetTracker[index] = false;
                    Endurance = default(Byte);
                    break;
                case RaceStats_FieldIndex.Personality:
                    _hasBeenSetTracker[index] = false;
                    Personality = default(Byte);
                    break;
                case RaceStats_FieldIndex.Luck:
                    _hasBeenSetTracker[index] = false;
                    Luck = default(Byte);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Byte_subscriptions == null)
            {
                _Byte_subscriptions = new ObjectCentralizationSubscriptions<Byte>();
            }
            _Byte_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Unsubscribe(
            int index,
            object owner)
        {
            _Byte_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte IPropertySupporter<Byte>.DefaultValue(int index)
        {
            return DefaultValueByte(index: index);
        }

        protected Byte DefaultValueByte(int index)
        {
            switch ((RaceStats_FieldIndex)index)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return default(Byte);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceStats Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RaceStats Create_Binary(
            MutagenFrame frame,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RaceStats Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RaceStats();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RaceStats Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceStats Create_Binary(
            string path,
            out RaceStats_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RaceStats Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceStats Create_Binary(
            Stream stream,
            out RaceStats_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RaceStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RaceStatsCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RaceStats item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            try
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Strength);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte StrengthParse,
                    errorMask: errorMask))
                {
                    item.Strength = StrengthParse;
                }
                else
                {
                    item.UnsetStrength();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Intelligence);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte IntelligenceParse,
                    errorMask: errorMask))
                {
                    item.Intelligence = IntelligenceParse;
                }
                else
                {
                    item.UnsetIntelligence();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Willpower);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte WillpowerParse,
                    errorMask: errorMask))
                {
                    item.Willpower = WillpowerParse;
                }
                else
                {
                    item.UnsetWillpower();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Agility);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte AgilityParse,
                    errorMask: errorMask))
                {
                    item.Agility = AgilityParse;
                }
                else
                {
                    item.UnsetAgility();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Speed);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte SpeedParse,
                    errorMask: errorMask))
                {
                    item.Speed = SpeedParse;
                }
                else
                {
                    item.UnsetSpeed();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Endurance);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte EnduranceParse,
                    errorMask: errorMask))
                {
                    item.Endurance = EnduranceParse;
                }
                else
                {
                    item.UnsetEndurance();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Personality);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte PersonalityParse,
                    errorMask: errorMask))
                {
                    item.Personality = PersonalityParse;
                }
                else
                {
                    item.UnsetPersonality();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RaceStats_FieldIndex.Luck);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte LuckParse,
                    errorMask: errorMask))
                {
                    item.Luck = LuckParse;
                }
                else
                {
                    item.UnsetLuck();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public RaceStats Copy(
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null)
        {
            return RaceStats.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RaceStats Copy(
            IRaceStats item,
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null)
        {
            RaceStats ret;
            if (item.GetType().Equals(typeof(RaceStats)))
            {
                ret = new RaceStats();
            }
            else
            {
                ret = (RaceStats)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RaceStats Copy_ToLoqui(
            IRaceStatsGetter item,
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null)
        {
            RaceStats ret;
            if (item.GetType().Equals(typeof(RaceStats)))
            {
                ret = new RaceStats() as RaceStats;
            }
            else
            {
                ret = (RaceStats)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRaceStatsGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRaceStatsGetter rhs,
            RaceStats_CopyMask copyMask,
            IRaceStatsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRaceStatsGetter rhs,
            out RaceStats_ErrorMask errorMask,
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RaceStatsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRaceStatsGetter rhs,
            ErrorMaskBuilder errorMask,
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RaceStatsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    this.SetStrength(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    this.SetIntelligence(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case RaceStats_FieldIndex.Willpower:
                    this.SetWillpower(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case RaceStats_FieldIndex.Agility:
                    this.SetAgility(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case RaceStats_FieldIndex.Speed:
                    this.SetSpeed(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case RaceStats_FieldIndex.Endurance:
                    this.SetEndurance(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case RaceStats_FieldIndex.Personality:
                    this.SetPersonality(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case RaceStats_FieldIndex.Luck:
                    this.SetLuck(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceStatsCommon.Clear(this, cmds);
        }


        public static RaceStats Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RaceStats();
            foreach (var pair in fields)
            {
                CopyInInternal_RaceStats(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RaceStats(RaceStats obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RaceStats_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    obj.SetStrength(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    obj.SetIntelligence(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case RaceStats_FieldIndex.Willpower:
                    obj.SetWillpower(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case RaceStats_FieldIndex.Agility:
                    obj.SetAgility(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case RaceStats_FieldIndex.Speed:
                    obj.SetSpeed(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case RaceStats_FieldIndex.Endurance:
                    obj.SetEndurance(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case RaceStats_FieldIndex.Personality:
                    obj.SetPersonality(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case RaceStats_FieldIndex.Luck:
                    obj.SetLuck(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RaceStats obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRaceStats : IRaceStatsGetter, ILoquiClass<IRaceStats, IRaceStatsGetter>, ILoquiClass<RaceStats, IRaceStatsGetter>
    {
        new Byte Strength { get; set; }
        new INotifyingItem<Byte> Strength_Property { get; }

        new Byte Intelligence { get; set; }
        new INotifyingItem<Byte> Intelligence_Property { get; }

        new Byte Willpower { get; set; }
        new INotifyingItem<Byte> Willpower_Property { get; }

        new Byte Agility { get; set; }
        new INotifyingItem<Byte> Agility_Property { get; }

        new Byte Speed { get; set; }
        new INotifyingItem<Byte> Speed_Property { get; }

        new Byte Endurance { get; set; }
        new INotifyingItem<Byte> Endurance_Property { get; }

        new Byte Personality { get; set; }
        new INotifyingItem<Byte> Personality_Property { get; }

        new Byte Luck { get; set; }
        new INotifyingItem<Byte> Luck_Property { get; }

    }

    public partial interface IRaceStatsGetter : ILoquiObject
    {
        #region Strength
        Byte Strength { get; }
        INotifyingItemGetter<Byte> Strength_Property { get; }

        #endregion
        #region Intelligence
        Byte Intelligence { get; }
        INotifyingItemGetter<Byte> Intelligence_Property { get; }

        #endregion
        #region Willpower
        Byte Willpower { get; }
        INotifyingItemGetter<Byte> Willpower_Property { get; }

        #endregion
        #region Agility
        Byte Agility { get; }
        INotifyingItemGetter<Byte> Agility_Property { get; }

        #endregion
        #region Speed
        Byte Speed { get; }
        INotifyingItemGetter<Byte> Speed_Property { get; }

        #endregion
        #region Endurance
        Byte Endurance { get; }
        INotifyingItemGetter<Byte> Endurance_Property { get; }

        #endregion
        #region Personality
        Byte Personality { get; }
        INotifyingItemGetter<Byte> Personality_Property { get; }

        #endregion
        #region Luck
        Byte Luck { get; }
        INotifyingItemGetter<Byte> Luck_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RaceStats_FieldIndex
    {
        Strength = 0,
        Intelligence = 1,
        Willpower = 2,
        Agility = 3,
        Speed = 4,
        Endurance = 5,
        Personality = 6,
        Luck = 7,
    }
    #endregion

    #region Registration
    public class RaceStats_Registration : ILoquiRegistration
    {
        public static readonly RaceStats_Registration Instance = new RaceStats_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 31,
            version: 0);

        public const string GUID = "3cbe1b09-d220-47e3-a57d-3d9a4feada8b";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(RaceStats_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceStats_ErrorMask);

        public static readonly Type ClassType = typeof(RaceStats);

        public static readonly Type GetterType = typeof(IRaceStatsGetter);

        public static readonly Type SetterType = typeof(IRaceStats);

        public static readonly Type CommonType = typeof(RaceStatsCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RaceStats";

        public const string Name = "RaceStats";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "STRENGTH":
                    return (ushort)RaceStats_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)RaceStats_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)RaceStats_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)RaceStats_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)RaceStats_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)RaceStats_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)RaceStats_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)RaceStats_FieldIndex.Luck;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return "Strength";
                case RaceStats_FieldIndex.Intelligence:
                    return "Intelligence";
                case RaceStats_FieldIndex.Willpower:
                    return "Willpower";
                case RaceStats_FieldIndex.Agility:
                    return "Agility";
                case RaceStats_FieldIndex.Speed:
                    return "Speed";
                case RaceStats_FieldIndex.Endurance:
                    return "Endurance";
                case RaceStats_FieldIndex.Personality:
                    return "Personality";
                case RaceStats_FieldIndex.Luck:
                    return "Luck";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Intelligence:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Willpower:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Agility:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Speed:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Endurance:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Personality:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Luck:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 8;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RaceStatsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRaceStats item,
            IRaceStatsGetter rhs,
            IRaceStatsGetter def,
            ErrorMaskBuilder errorMask,
            RaceStats_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Strength ?? true)
            {
                errorMask.PushIndex((int)RaceStats_FieldIndex.Strength);
                try
                {
                    item.Strength_Property.Set(
                        value: rhs.Strength,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Intelligence ?? true)
            {
                errorMask.PushIndex((int)RaceStats_FieldIndex.Intelligence);
                try
                {
                    item.Intelligence_Property.Set(
                        value: rhs.Intelligence,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Willpower ?? true)
            {
                errorMask.PushIndex((int)RaceStats_FieldIndex.Willpower);
                try
                {
                    item.Willpower_Property.Set(
                        value: rhs.Willpower,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Agility ?? true)
            {
                errorMask.PushIndex((int)RaceStats_FieldIndex.Agility);
                try
                {
                    item.Agility_Property.Set(
                        value: rhs.Agility,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Speed ?? true)
            {
                errorMask.PushIndex((int)RaceStats_FieldIndex.Speed);
                try
                {
                    item.Speed_Property.Set(
                        value: rhs.Speed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Endurance ?? true)
            {
                errorMask.PushIndex((int)RaceStats_FieldIndex.Endurance);
                try
                {
                    item.Endurance_Property.Set(
                        value: rhs.Endurance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Personality ?? true)
            {
                errorMask.PushIndex((int)RaceStats_FieldIndex.Personality);
                try
                {
                    item.Personality_Property.Set(
                        value: rhs.Personality,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Luck ?? true)
            {
                errorMask.PushIndex((int)RaceStats_FieldIndex.Luck);
                try
                {
                    item.Luck_Property.Set(
                        value: rhs.Luck,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRaceStats obj,
            NotifyingFireParameters cmds = null)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRaceStats obj,
            NotifyingUnsetParameters cmds = null)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    obj.Strength = default(Byte);
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    obj.Intelligence = default(Byte);
                    break;
                case RaceStats_FieldIndex.Willpower:
                    obj.Willpower = default(Byte);
                    break;
                case RaceStats_FieldIndex.Agility:
                    obj.Agility = default(Byte);
                    break;
                case RaceStats_FieldIndex.Speed:
                    obj.Speed = default(Byte);
                    break;
                case RaceStats_FieldIndex.Endurance:
                    obj.Endurance = default(Byte);
                    break;
                case RaceStats_FieldIndex.Personality:
                    obj.Personality = default(Byte);
                    break;
                case RaceStats_FieldIndex.Luck:
                    obj.Luck = default(Byte);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRaceStats obj)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceStatsGetter obj)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return obj.Strength;
                case RaceStats_FieldIndex.Intelligence:
                    return obj.Intelligence;
                case RaceStats_FieldIndex.Willpower:
                    return obj.Willpower;
                case RaceStats_FieldIndex.Agility:
                    return obj.Agility;
                case RaceStats_FieldIndex.Speed:
                    return obj.Speed;
                case RaceStats_FieldIndex.Endurance:
                    return obj.Endurance;
                case RaceStats_FieldIndex.Personality:
                    return obj.Personality;
                case RaceStats_FieldIndex.Luck:
                    return obj.Luck;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRaceStats item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Strength = default(Byte);
            item.Intelligence = default(Byte);
            item.Willpower = default(Byte);
            item.Agility = default(Byte);
            item.Speed = default(Byte);
            item.Endurance = default(Byte);
            item.Personality = default(Byte);
            item.Luck = default(Byte);
        }

        public static RaceStats_Mask<bool> GetEqualsMask(
            this IRaceStatsGetter item,
            IRaceStatsGetter rhs)
        {
            var ret = new RaceStats_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            RaceStats_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
        }

        public static string ToString(
            this IRaceStatsGetter item,
            string name = null,
            RaceStats_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceStatsGetter item,
            FileGeneration fg,
            string name = null,
            RaceStats_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RaceStats)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RaceStats)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {item.Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {item.Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {item.Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {item.Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {item.Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {item.Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {item.Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {item.Luck}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceStatsGetter item,
            RaceStats_Mask<bool?> checkMask)
        {
            return true;
        }

        public static RaceStats_Mask<bool> GetHasBeenSetMask(IRaceStatsGetter item)
        {
            var ret = new RaceStats_Mask<bool>();
            ret.Strength = true;
            ret.Intelligence = true;
            ret.Willpower = true;
            ret.Agility = true;
            ret.Speed = true;
            ret.Endurance = true;
            ret.Personality = true;
            ret.Luck = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IRaceStatsGetter item,
            bool doMasks,
            out RaceStats_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IRaceStatsGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RaceStats");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RaceStats");
            }
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Strength),
                item: item.Strength_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Strength,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Intelligence),
                item: item.Intelligence_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Intelligence,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Willpower),
                item: item.Willpower_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Willpower,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Agility),
                item: item.Agility_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Agility,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Speed),
                item: item.Speed_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Speed,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Endurance),
                item: item.Endurance_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Endurance,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Personality),
                item: item.Personality_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Personality,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Luck),
                item: item.Luck_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Luck,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RaceStats item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RaceStats_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RaceStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RaceStats item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_Embedded(
            RaceStats item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Strength_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Strength,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Intelligence_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Intelligence,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Willpower_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Willpower,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Agility_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Agility,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Speed_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Speed,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Endurance_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Endurance,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Personality_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Personality,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Luck_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Luck,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RaceStats_Mask<T> : IMask<T>, IEquatable<RaceStats_Mask<T>>
    {
        #region Ctors
        public RaceStats_Mask()
        {
        }

        public RaceStats_Mask(T initialValue)
        {
            this.Strength = initialValue;
            this.Intelligence = initialValue;
            this.Willpower = initialValue;
            this.Agility = initialValue;
            this.Speed = initialValue;
            this.Endurance = initialValue;
            this.Personality = initialValue;
            this.Luck = initialValue;
        }
        #endregion

        #region Members
        public T Strength;
        public T Intelligence;
        public T Willpower;
        public T Agility;
        public T Speed;
        public T Endurance;
        public T Personality;
        public T Luck;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStats_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStats_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Strength, rhs.Strength)) return false;
            if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
            if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
            if (!object.Equals(this.Agility, rhs.Agility)) return false;
            if (!object.Equals(this.Speed, rhs.Speed)) return false;
            if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
            if (!object.Equals(this.Personality, rhs.Personality)) return false;
            if (!object.Equals(this.Luck, rhs.Luck)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Strength?.GetHashCode());
            ret = ret.CombineHashCode(this.Intelligence?.GetHashCode());
            ret = ret.CombineHashCode(this.Willpower?.GetHashCode());
            ret = ret.CombineHashCode(this.Agility?.GetHashCode());
            ret = ret.CombineHashCode(this.Speed?.GetHashCode());
            ret = ret.CombineHashCode(this.Endurance?.GetHashCode());
            ret = ret.CombineHashCode(this.Personality?.GetHashCode());
            ret = ret.CombineHashCode(this.Luck?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Strength)) return false;
            if (!eval(this.Intelligence)) return false;
            if (!eval(this.Willpower)) return false;
            if (!eval(this.Agility)) return false;
            if (!eval(this.Speed)) return false;
            if (!eval(this.Endurance)) return false;
            if (!eval(this.Personality)) return false;
            if (!eval(this.Luck)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RaceStats_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RaceStats_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RaceStats_Mask<R> obj, Func<T, R> eval)
        {
            obj.Strength = eval(this.Strength);
            obj.Intelligence = eval(this.Intelligence);
            obj.Willpower = eval(this.Willpower);
            obj.Agility = eval(this.Agility);
            obj.Speed = eval(this.Speed);
            obj.Endurance = eval(this.Endurance);
            obj.Personality = eval(this.Personality);
            obj.Luck = eval(this.Luck);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RaceStats_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RaceStats_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RaceStats_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {Luck}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RaceStats_ErrorMask : IErrorMask, IErrorMask<RaceStats_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Strength;
        public Exception Intelligence;
        public Exception Willpower;
        public Exception Agility;
        public Exception Speed;
        public Exception Endurance;
        public Exception Personality;
        public Exception Luck;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return Strength;
                case RaceStats_FieldIndex.Intelligence:
                    return Intelligence;
                case RaceStats_FieldIndex.Willpower:
                    return Willpower;
                case RaceStats_FieldIndex.Agility:
                    return Agility;
                case RaceStats_FieldIndex.Speed:
                    return Speed;
                case RaceStats_FieldIndex.Endurance:
                    return Endurance;
                case RaceStats_FieldIndex.Personality:
                    return Personality;
                case RaceStats_FieldIndex.Luck:
                    return Luck;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    this.Strength = ex;
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    this.Intelligence = ex;
                    break;
                case RaceStats_FieldIndex.Willpower:
                    this.Willpower = ex;
                    break;
                case RaceStats_FieldIndex.Agility:
                    this.Agility = ex;
                    break;
                case RaceStats_FieldIndex.Speed:
                    this.Speed = ex;
                    break;
                case RaceStats_FieldIndex.Endurance:
                    this.Endurance = ex;
                    break;
                case RaceStats_FieldIndex.Personality:
                    this.Personality = ex;
                    break;
                case RaceStats_FieldIndex.Luck:
                    this.Luck = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    this.Strength = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    this.Intelligence = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Willpower:
                    this.Willpower = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Agility:
                    this.Agility = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Speed:
                    this.Speed = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Endurance:
                    this.Endurance = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Personality:
                    this.Personality = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Luck:
                    this.Luck = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Strength != null) return true;
            if (Intelligence != null) return true;
            if (Willpower != null) return true;
            if (Agility != null) return true;
            if (Speed != null) return true;
            if (Endurance != null) return true;
            if (Personality != null) return true;
            if (Luck != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RaceStats_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Strength => {Strength}");
            fg.AppendLine($"Intelligence => {Intelligence}");
            fg.AppendLine($"Willpower => {Willpower}");
            fg.AppendLine($"Agility => {Agility}");
            fg.AppendLine($"Speed => {Speed}");
            fg.AppendLine($"Endurance => {Endurance}");
            fg.AppendLine($"Personality => {Personality}");
            fg.AppendLine($"Luck => {Luck}");
        }
        #endregion

        #region Combine
        public RaceStats_ErrorMask Combine(RaceStats_ErrorMask rhs)
        {
            var ret = new RaceStats_ErrorMask();
            ret.Strength = this.Strength.Combine(rhs.Strength);
            ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
            ret.Willpower = this.Willpower.Combine(rhs.Willpower);
            ret.Agility = this.Agility.Combine(rhs.Agility);
            ret.Speed = this.Speed.Combine(rhs.Speed);
            ret.Endurance = this.Endurance.Combine(rhs.Endurance);
            ret.Personality = this.Personality.Combine(rhs.Personality);
            ret.Luck = this.Luck.Combine(rhs.Luck);
            return ret;
        }
        public static RaceStats_ErrorMask Combine(RaceStats_ErrorMask lhs, RaceStats_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RaceStats_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RaceStats_ErrorMask();
        }
        #endregion

    }
    public class RaceStats_CopyMask
    {
        #region Members
        public bool Strength;
        public bool Intelligence;
        public bool Willpower;
        public bool Agility;
        public bool Speed;
        public bool Endurance;
        public bool Personality;
        public bool Luck;
        #endregion

    }
    #endregion





    #endregion

}
