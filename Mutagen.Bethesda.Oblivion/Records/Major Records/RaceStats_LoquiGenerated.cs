/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RaceStats : IRaceStats, ILoquiObjectSetter, IEquatable<RaceStats>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceStats_Registration.Instance;
        public static RaceStats_Registration Registration => RaceStats_Registration.Instance;

        #region Ctor
        public RaceStats()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Strength
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Byte> _Strength = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Strength_Property => _Strength;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Strength
        {
            get => this._Strength.Item;
            set => this._Strength.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Strength_Property => this.Strength_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Strength_Property => this.Strength_Property;
        #endregion
        #region Intelligence
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Byte> _Intelligence = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Intelligence_Property => _Intelligence;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Intelligence
        {
            get => this._Intelligence.Item;
            set => this._Intelligence.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Intelligence_Property => this.Intelligence_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Intelligence_Property => this.Intelligence_Property;
        #endregion
        #region Willpower
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Byte> _Willpower = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Willpower_Property => _Willpower;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Willpower
        {
            get => this._Willpower.Item;
            set => this._Willpower.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Willpower_Property => this.Willpower_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Willpower_Property => this.Willpower_Property;
        #endregion
        #region Agility
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Byte> _Agility = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Agility_Property => _Agility;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Agility
        {
            get => this._Agility.Item;
            set => this._Agility.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Agility_Property => this.Agility_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Agility_Property => this.Agility_Property;
        #endregion
        #region Speed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Byte> _Speed = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Speed_Property => _Speed;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Speed
        {
            get => this._Speed.Item;
            set => this._Speed.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Speed_Property => this.Speed_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Speed_Property => this.Speed_Property;
        #endregion
        #region Endurance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Byte> _Endurance = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Endurance_Property => _Endurance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Endurance
        {
            get => this._Endurance.Item;
            set => this._Endurance.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Endurance_Property => this.Endurance_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Endurance_Property => this.Endurance_Property;
        #endregion
        #region Personality
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Byte> _Personality = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Personality_Property => _Personality;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Personality
        {
            get => this._Personality.Item;
            set => this._Personality.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Personality_Property => this.Personality_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Personality_Property => this.Personality_Property;
        #endregion
        #region Luck
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly INotifyingItem<Byte> _Luck = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Luck_Property => _Luck;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Luck
        {
            get => this._Luck.Item;
            set => this._Luck.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRaceStats.Luck_Property => this.Luck_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRaceStatsGetter.Luck_Property => this.Luck_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RaceStatsCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RaceStatsCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RaceStatsCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceStatsCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return RaceStatsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RaceStats_Mask<bool> printMask = null)
        {
            return RaceStatsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceStatsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public RaceStats_Mask<bool> GetHasBeenSetMask()
        {
            return RaceStatsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStats rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStats rhs)
        {
            if (rhs == null) return false;
            if (Strength != rhs.Strength) return false;
            if (Intelligence != rhs.Intelligence) return false;
            if (Willpower != rhs.Willpower) return false;
            if (Agility != rhs.Agility) return false;
            if (Speed != rhs.Speed) return false;
            if (Endurance != rhs.Endurance) return false;
            if (Personality != rhs.Personality) return false;
            if (Luck != rhs.Luck) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Strength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Intelligence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Willpower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Agility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Endurance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Personality).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Luck).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static RaceStats Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static RaceStats Create_XML(
            XElement root,
            out RaceStats_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static RaceStats Create_XML(
            XElement root,
            bool doMasks,
            out RaceStats_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (RaceStats Object, RaceStats_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            RaceStats_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceStats_ErrorMask()) : default(Func<RaceStats_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static RaceStats Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RaceStats Create_XML(
            string path,
            out RaceStats_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RaceStats Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RaceStats Create_XML(
            Stream stream,
            out RaceStats_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RaceStats, RaceStats_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RaceStats_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RaceStats, RaceStats_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RaceStats_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RaceStats_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out RaceStats_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (RaceStats_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out RaceStats_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out RaceStats_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RaceStatsCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static RaceStats Create_XML_Internal(
            XElement root,
            Func<RaceStats_ErrorMask> errorMask)
        {
            var ret = new RaceStats();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            RaceStats item,
            XElement root,
            string name,
            Func<RaceStats_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Strength":
                    item._Strength.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)RaceStats_FieldIndex.Strength,
                        errorMask: errorMask));
                    break;
                case "Intelligence":
                    item._Intelligence.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)RaceStats_FieldIndex.Intelligence,
                        errorMask: errorMask));
                    break;
                case "Willpower":
                    item._Willpower.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)RaceStats_FieldIndex.Willpower,
                        errorMask: errorMask));
                    break;
                case "Agility":
                    item._Agility.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)RaceStats_FieldIndex.Agility,
                        errorMask: errorMask));
                    break;
                case "Speed":
                    item._Speed.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)RaceStats_FieldIndex.Speed,
                        errorMask: errorMask));
                    break;
                case "Endurance":
                    item._Endurance.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)RaceStats_FieldIndex.Endurance,
                        errorMask: errorMask));
                    break;
                case "Personality":
                    item._Personality.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)RaceStats_FieldIndex.Personality,
                        errorMask: errorMask));
                    break;
                case "Luck":
                    item._Luck.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)RaceStats_FieldIndex.Luck,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceStats Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static RaceStats Create_Binary(
            MutagenFrame frame,
            out RaceStats_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static RaceStats Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out RaceStats_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (RaceStats Object, RaceStats_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            RaceStats_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceStats_ErrorMask()) : default(Func<RaceStats_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static RaceStats Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceStats Create_Binary(
            string path,
            out RaceStats_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RaceStats Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceStats Create_Binary(
            Stream stream,
            out RaceStats_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<RaceStats, RaceStats_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out RaceStats_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<RaceStats, RaceStats_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out RaceStats_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out RaceStats_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RaceStats_ErrorMask errorMask)
        {
            errorMask = (RaceStats_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out RaceStats_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RaceStats_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            RaceStatsCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static RaceStats Create_Binary_Internal(
            MutagenFrame frame,
            Func<RaceStats_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new RaceStats();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            RaceStats item,
            MutagenFrame frame,
            Func<RaceStats_ErrorMask> errorMask)
        {
            item._Strength.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceStats_FieldIndex.Strength,
                errorMask: errorMask));
            item._Intelligence.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceStats_FieldIndex.Intelligence,
                errorMask: errorMask));
            item._Willpower.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceStats_FieldIndex.Willpower,
                errorMask: errorMask));
            item._Agility.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceStats_FieldIndex.Agility,
                errorMask: errorMask));
            item._Speed.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceStats_FieldIndex.Speed,
                errorMask: errorMask));
            item._Endurance.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceStats_FieldIndex.Endurance,
                errorMask: errorMask));
            item._Personality.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceStats_FieldIndex.Personality,
                errorMask: errorMask));
            item._Luck.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceStats_FieldIndex.Luck,
                errorMask: errorMask));
        }

        #endregion

        public RaceStats Copy(
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null)
        {
            return RaceStats.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RaceStats Copy(
            IRaceStats item,
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null)
        {
            RaceStats ret;
            if (item.GetType().Equals(typeof(RaceStats)))
            {
                ret = new RaceStats();
            }
            else
            {
                ret = (RaceStats)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null)
            where CopyType : class, IRaceStats
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(RaceStats)))
            {
                ret = new RaceStats() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static RaceStats Copy_ToLoqui(
            IRaceStatsGetter item,
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null)
        {
            RaceStats ret;
            if (item.GetType().Equals(typeof(RaceStats)))
            {
                ret = new RaceStats() as RaceStats;
            }
            else
            {
                ret = (RaceStats)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    this._Strength.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    this._Intelligence.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case RaceStats_FieldIndex.Willpower:
                    this._Willpower.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case RaceStats_FieldIndex.Agility:
                    this._Agility.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case RaceStats_FieldIndex.Speed:
                    this._Speed.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case RaceStats_FieldIndex.Endurance:
                    this._Endurance.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case RaceStats_FieldIndex.Personality:
                    this._Personality.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case RaceStats_FieldIndex.Luck:
                    this._Luck.Set(
                        (Byte)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceStatsCommon.Clear(this, cmds);
        }


        public static RaceStats Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RaceStats();
            foreach (var pair in fields)
            {
                CopyInInternal_RaceStats(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RaceStats(RaceStats obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RaceStats_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    obj._Strength.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    obj._Intelligence.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case RaceStats_FieldIndex.Willpower:
                    obj._Willpower.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case RaceStats_FieldIndex.Agility:
                    obj._Agility.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case RaceStats_FieldIndex.Speed:
                    obj._Speed.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case RaceStats_FieldIndex.Endurance:
                    obj._Endurance.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case RaceStats_FieldIndex.Personality:
                    obj._Personality.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case RaceStats_FieldIndex.Luck:
                    obj._Luck.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RaceStats obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IRaceStats : IRaceStatsGetter, ILoquiClass<IRaceStats, IRaceStatsGetter>, ILoquiClass<RaceStats, IRaceStatsGetter>
    {
        new Byte Strength { get; set; }
        new INotifyingItem<Byte> Strength_Property { get; }

        new Byte Intelligence { get; set; }
        new INotifyingItem<Byte> Intelligence_Property { get; }

        new Byte Willpower { get; set; }
        new INotifyingItem<Byte> Willpower_Property { get; }

        new Byte Agility { get; set; }
        new INotifyingItem<Byte> Agility_Property { get; }

        new Byte Speed { get; set; }
        new INotifyingItem<Byte> Speed_Property { get; }

        new Byte Endurance { get; set; }
        new INotifyingItem<Byte> Endurance_Property { get; }

        new Byte Personality { get; set; }
        new INotifyingItem<Byte> Personality_Property { get; }

        new Byte Luck { get; set; }
        new INotifyingItem<Byte> Luck_Property { get; }

    }

    public interface IRaceStatsGetter : ILoquiObject
    {
        #region Strength
        Byte Strength { get; }
        INotifyingItemGetter<Byte> Strength_Property { get; }

        #endregion
        #region Intelligence
        Byte Intelligence { get; }
        INotifyingItemGetter<Byte> Intelligence_Property { get; }

        #endregion
        #region Willpower
        Byte Willpower { get; }
        INotifyingItemGetter<Byte> Willpower_Property { get; }

        #endregion
        #region Agility
        Byte Agility { get; }
        INotifyingItemGetter<Byte> Agility_Property { get; }

        #endregion
        #region Speed
        Byte Speed { get; }
        INotifyingItemGetter<Byte> Speed_Property { get; }

        #endregion
        #region Endurance
        Byte Endurance { get; }
        INotifyingItemGetter<Byte> Endurance_Property { get; }

        #endregion
        #region Personality
        Byte Personality { get; }
        INotifyingItemGetter<Byte> Personality_Property { get; }

        #endregion
        #region Luck
        Byte Luck { get; }
        INotifyingItemGetter<Byte> Luck_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RaceStats_FieldIndex
    {
        Strength = 0,
        Intelligence = 1,
        Willpower = 2,
        Agility = 3,
        Speed = 4,
        Endurance = 5,
        Personality = 6,
        Luck = 7,
    }
    #endregion

    #region Registration
    public class RaceStats_Registration : ILoquiRegistration
    {
        public static readonly RaceStats_Registration Instance = new RaceStats_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 31,
            version: 0);

        public const string GUID = "3cbe1b09-d220-47e3-a57d-3d9a4feada8b";

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(RaceStats_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceStats_ErrorMask);

        public static readonly Type ClassType = typeof(RaceStats);

        public static readonly Type GetterType = typeof(IRaceStatsGetter);

        public static readonly Type SetterType = typeof(IRaceStats);

        public static readonly Type CommonType = typeof(RaceStatsCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RaceStats";

        public const string Name = "RaceStats";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "STRENGTH":
                    return (ushort)RaceStats_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)RaceStats_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)RaceStats_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)RaceStats_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)RaceStats_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)RaceStats_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)RaceStats_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)RaceStats_FieldIndex.Luck;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return "Strength";
                case RaceStats_FieldIndex.Intelligence:
                    return "Intelligence";
                case RaceStats_FieldIndex.Willpower:
                    return "Willpower";
                case RaceStats_FieldIndex.Agility:
                    return "Agility";
                case RaceStats_FieldIndex.Speed:
                    return "Speed";
                case RaceStats_FieldIndex.Endurance:
                    return "Endurance";
                case RaceStats_FieldIndex.Personality:
                    return "Personality";
                case RaceStats_FieldIndex.Luck:
                    return "Luck";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Intelligence:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Willpower:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Agility:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Speed:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Endurance:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Personality:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Luck:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 8;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RaceStatsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IRaceStats item,
            IRaceStatsGetter rhs,
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            RaceStatsCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRaceStats item,
            IRaceStatsGetter rhs,
            out RaceStats_ErrorMask errorMask,
            RaceStats_CopyMask copyMask = null,
            IRaceStatsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            RaceStatsCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRaceStats item,
            IRaceStatsGetter rhs,
            IRaceStatsGetter def,
            bool doMasks,
            out RaceStats_ErrorMask errorMask,
            RaceStats_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            RaceStats_ErrorMask retErrorMask = null;
            Func<RaceStats_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new RaceStats_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IRaceStats item,
            IRaceStatsGetter rhs,
            IRaceStatsGetter def,
            bool doMasks,
            Func<RaceStats_ErrorMask> errorMask,
            RaceStats_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Strength ?? true)
            {
                try
                {
                    item.Strength_Property.Set(
                        value: rhs.Strength,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceStats_FieldIndex.Strength, ex);
                }
            }
            if (copyMask?.Intelligence ?? true)
            {
                try
                {
                    item.Intelligence_Property.Set(
                        value: rhs.Intelligence,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceStats_FieldIndex.Intelligence, ex);
                }
            }
            if (copyMask?.Willpower ?? true)
            {
                try
                {
                    item.Willpower_Property.Set(
                        value: rhs.Willpower,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceStats_FieldIndex.Willpower, ex);
                }
            }
            if (copyMask?.Agility ?? true)
            {
                try
                {
                    item.Agility_Property.Set(
                        value: rhs.Agility,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceStats_FieldIndex.Agility, ex);
                }
            }
            if (copyMask?.Speed ?? true)
            {
                try
                {
                    item.Speed_Property.Set(
                        value: rhs.Speed,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceStats_FieldIndex.Speed, ex);
                }
            }
            if (copyMask?.Endurance ?? true)
            {
                try
                {
                    item.Endurance_Property.Set(
                        value: rhs.Endurance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceStats_FieldIndex.Endurance, ex);
                }
            }
            if (copyMask?.Personality ?? true)
            {
                try
                {
                    item.Personality_Property.Set(
                        value: rhs.Personality,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceStats_FieldIndex.Personality, ex);
                }
            }
            if (copyMask?.Luck ?? true)
            {
                try
                {
                    item.Luck_Property.Set(
                        value: rhs.Luck,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceStats_FieldIndex.Luck, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRaceStats obj,
            NotifyingFireParameters cmds = null)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRaceStats obj,
            NotifyingUnsetParameters cmds = null)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    obj.Strength = default(Byte);
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    obj.Intelligence = default(Byte);
                    break;
                case RaceStats_FieldIndex.Willpower:
                    obj.Willpower = default(Byte);
                    break;
                case RaceStats_FieldIndex.Agility:
                    obj.Agility = default(Byte);
                    break;
                case RaceStats_FieldIndex.Speed:
                    obj.Speed = default(Byte);
                    break;
                case RaceStats_FieldIndex.Endurance:
                    obj.Endurance = default(Byte);
                    break;
                case RaceStats_FieldIndex.Personality:
                    obj.Personality = default(Byte);
                    break;
                case RaceStats_FieldIndex.Luck:
                    obj.Luck = default(Byte);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRaceStats obj)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceStatsGetter obj)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return obj.Strength;
                case RaceStats_FieldIndex.Intelligence:
                    return obj.Intelligence;
                case RaceStats_FieldIndex.Willpower:
                    return obj.Willpower;
                case RaceStats_FieldIndex.Agility:
                    return obj.Agility;
                case RaceStats_FieldIndex.Speed:
                    return obj.Speed;
                case RaceStats_FieldIndex.Endurance:
                    return obj.Endurance;
                case RaceStats_FieldIndex.Personality:
                    return obj.Personality;
                case RaceStats_FieldIndex.Luck:
                    return obj.Luck;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRaceStats item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Strength = default(Byte);
            item.Intelligence = default(Byte);
            item.Willpower = default(Byte);
            item.Agility = default(Byte);
            item.Speed = default(Byte);
            item.Endurance = default(Byte);
            item.Personality = default(Byte);
            item.Luck = default(Byte);
        }

        public static RaceStats_Mask<bool> GetEqualsMask(
            this IRaceStatsGetter item,
            IRaceStatsGetter rhs)
        {
            var ret = new RaceStats_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            RaceStats_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
        }

        public static string ToString(
            this IRaceStatsGetter item,
            string name = null,
            RaceStats_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceStatsGetter item,
            FileGeneration fg,
            string name = null,
            RaceStats_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RaceStats)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RaceStats)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {item.Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {item.Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {item.Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {item.Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {item.Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {item.Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {item.Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {item.Luck}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceStatsGetter item,
            RaceStats_Mask<bool?> checkMask)
        {
            return true;
        }

        public static RaceStats_Mask<bool> GetHasBeenSetMask(IRaceStatsGetter item)
        {
            var ret = new RaceStats_Mask<bool>();
            ret.Strength = true;
            ret.Intelligence = true;
            ret.Willpower = true;
            ret.Agility = true;
            ret.Speed = true;
            ret.Endurance = true;
            ret.Personality = true;
            ret.Luck = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRaceStatsGetter item,
            bool doMasks,
            out RaceStats_ErrorMask errorMask,
            string name = null)
        {
            RaceStats_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceStats_ErrorMask()) : default(Func<RaceStats_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRaceStatsGetter item,
            Func<RaceStats_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.RaceStats"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.RaceStats");
                    }
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Strength),
                        item: item.Strength_Property,
                        fieldIndex: (int)RaceStats_FieldIndex.Strength,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Intelligence),
                        item: item.Intelligence_Property,
                        fieldIndex: (int)RaceStats_FieldIndex.Intelligence,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Willpower),
                        item: item.Willpower_Property,
                        fieldIndex: (int)RaceStats_FieldIndex.Willpower,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Agility),
                        item: item.Agility_Property,
                        fieldIndex: (int)RaceStats_FieldIndex.Agility,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Speed),
                        item: item.Speed_Property,
                        fieldIndex: (int)RaceStats_FieldIndex.Speed,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Endurance),
                        item: item.Endurance_Property,
                        fieldIndex: (int)RaceStats_FieldIndex.Endurance,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Personality),
                        item: item.Personality_Property,
                        fieldIndex: (int)RaceStats_FieldIndex.Personality,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Luck),
                        item: item.Luck_Property,
                        fieldIndex: (int)RaceStats_FieldIndex.Luck,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RaceStats item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RaceStats_ErrorMask errorMask)
        {
            RaceStats_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceStats_ErrorMask()) : default(Func<RaceStats_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            RaceStats item,
            RecordTypeConverter recordTypeConverter,
            Func<RaceStats_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            RaceStats item,
            MutagenWriter writer,
            Func<RaceStats_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Strength_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Strength,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Intelligence_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Intelligence,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Willpower_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Willpower,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Agility_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Agility,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Speed_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Speed,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Endurance_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Endurance,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Personality_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Personality,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Luck_Property,
                fieldIndex: (int)RaceStats_FieldIndex.Luck,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RaceStats_Mask<T> : IMask<T>, IEquatable<RaceStats_Mask<T>>
    {
        #region Ctors
        public RaceStats_Mask()
        {
        }

        public RaceStats_Mask(T initialValue)
        {
            this.Strength = initialValue;
            this.Intelligence = initialValue;
            this.Willpower = initialValue;
            this.Agility = initialValue;
            this.Speed = initialValue;
            this.Endurance = initialValue;
            this.Personality = initialValue;
            this.Luck = initialValue;
        }
        #endregion

        #region Members
        public T Strength;
        public T Intelligence;
        public T Willpower;
        public T Agility;
        public T Speed;
        public T Endurance;
        public T Personality;
        public T Luck;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStats_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStats_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Strength, rhs.Strength)) return false;
            if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
            if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
            if (!object.Equals(this.Agility, rhs.Agility)) return false;
            if (!object.Equals(this.Speed, rhs.Speed)) return false;
            if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
            if (!object.Equals(this.Personality, rhs.Personality)) return false;
            if (!object.Equals(this.Luck, rhs.Luck)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Strength?.GetHashCode());
            ret = ret.CombineHashCode(this.Intelligence?.GetHashCode());
            ret = ret.CombineHashCode(this.Willpower?.GetHashCode());
            ret = ret.CombineHashCode(this.Agility?.GetHashCode());
            ret = ret.CombineHashCode(this.Speed?.GetHashCode());
            ret = ret.CombineHashCode(this.Endurance?.GetHashCode());
            ret = ret.CombineHashCode(this.Personality?.GetHashCode());
            ret = ret.CombineHashCode(this.Luck?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Strength)) return false;
            if (!eval(this.Intelligence)) return false;
            if (!eval(this.Willpower)) return false;
            if (!eval(this.Agility)) return false;
            if (!eval(this.Speed)) return false;
            if (!eval(this.Endurance)) return false;
            if (!eval(this.Personality)) return false;
            if (!eval(this.Luck)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RaceStats_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RaceStats_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RaceStats_Mask<R> obj, Func<T, R> eval)
        {
            obj.Strength = eval(this.Strength);
            obj.Intelligence = eval(this.Intelligence);
            obj.Willpower = eval(this.Willpower);
            obj.Agility = eval(this.Agility);
            obj.Speed = eval(this.Speed);
            obj.Endurance = eval(this.Endurance);
            obj.Personality = eval(this.Personality);
            obj.Luck = eval(this.Luck);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RaceStats_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RaceStats_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RaceStats_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Strength ?? true)
                {
                    fg.AppendLine($"Strength => {Strength}");
                }
                if (printMask?.Intelligence ?? true)
                {
                    fg.AppendLine($"Intelligence => {Intelligence}");
                }
                if (printMask?.Willpower ?? true)
                {
                    fg.AppendLine($"Willpower => {Willpower}");
                }
                if (printMask?.Agility ?? true)
                {
                    fg.AppendLine($"Agility => {Agility}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {Speed}");
                }
                if (printMask?.Endurance ?? true)
                {
                    fg.AppendLine($"Endurance => {Endurance}");
                }
                if (printMask?.Personality ?? true)
                {
                    fg.AppendLine($"Personality => {Personality}");
                }
                if (printMask?.Luck ?? true)
                {
                    fg.AppendLine($"Luck => {Luck}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RaceStats_ErrorMask : IErrorMask, IErrorMask<RaceStats_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Strength;
        public Exception Intelligence;
        public Exception Willpower;
        public Exception Agility;
        public Exception Speed;
        public Exception Endurance;
        public Exception Personality;
        public Exception Luck;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    this.Strength = ex;
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    this.Intelligence = ex;
                    break;
                case RaceStats_FieldIndex.Willpower:
                    this.Willpower = ex;
                    break;
                case RaceStats_FieldIndex.Agility:
                    this.Agility = ex;
                    break;
                case RaceStats_FieldIndex.Speed:
                    this.Speed = ex;
                    break;
                case RaceStats_FieldIndex.Endurance:
                    this.Endurance = ex;
                    break;
                case RaceStats_FieldIndex.Personality:
                    this.Personality = ex;
                    break;
                case RaceStats_FieldIndex.Luck:
                    this.Luck = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    this.Strength = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Intelligence:
                    this.Intelligence = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Willpower:
                    this.Willpower = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Agility:
                    this.Agility = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Speed:
                    this.Speed = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Endurance:
                    this.Endurance = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Personality:
                    this.Personality = (Exception)obj;
                    break;
                case RaceStats_FieldIndex.Luck:
                    this.Luck = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Strength != null) return true;
            if (Intelligence != null) return true;
            if (Willpower != null) return true;
            if (Agility != null) return true;
            if (Speed != null) return true;
            if (Endurance != null) return true;
            if (Personality != null) return true;
            if (Luck != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RaceStats_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Strength => {Strength}");
            fg.AppendLine($"Intelligence => {Intelligence}");
            fg.AppendLine($"Willpower => {Willpower}");
            fg.AppendLine($"Agility => {Agility}");
            fg.AppendLine($"Speed => {Speed}");
            fg.AppendLine($"Endurance => {Endurance}");
            fg.AppendLine($"Personality => {Personality}");
            fg.AppendLine($"Luck => {Luck}");
        }
        #endregion

        #region Combine
        public RaceStats_ErrorMask Combine(RaceStats_ErrorMask rhs)
        {
            var ret = new RaceStats_ErrorMask();
            ret.Strength = this.Strength.Combine(rhs.Strength);
            ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
            ret.Willpower = this.Willpower.Combine(rhs.Willpower);
            ret.Agility = this.Agility.Combine(rhs.Agility);
            ret.Speed = this.Speed.Combine(rhs.Speed);
            ret.Endurance = this.Endurance.Combine(rhs.Endurance);
            ret.Personality = this.Personality.Combine(rhs.Personality);
            ret.Luck = this.Luck.Combine(rhs.Luck);
            return ret;
        }
        public static RaceStats_ErrorMask Combine(RaceStats_ErrorMask lhs, RaceStats_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class RaceStats_CopyMask
    {
        #region Members
        public bool Strength;
        public bool Intelligence;
        public bool Willpower;
        public bool Agility;
        public bool Speed;
        public bool Endurance;
        public bool Personality;
        public bool Luck;
        #endregion

    }
    #endregion




    #endregion

}
