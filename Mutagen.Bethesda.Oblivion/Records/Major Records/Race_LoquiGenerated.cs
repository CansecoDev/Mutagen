/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Race : 
        MajorRecord,
        IRace,
        ILoquiObject<Race>,
        ILoquiObjectSetter,
        INamed,
        ILinkSubContainer,
        IEquatable<Race>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;

        #region Ctor
        protected Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.Name];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.Name, nameof(Name_IsSet));
        }
        bool IRaceGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IRaceGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Name, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.Name, nameof(Name), nameof(Name_IsSet));
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.Description];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.Description, nameof(Description_IsSet));
        }
        bool IRaceGetter.Description_IsSet => Description_IsSet;
        private String _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        String IRaceGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Description, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.Description, nameof(Description), nameof(Description_IsSet));
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<FormIDSetLink<Spell>> _Spells = new SourceSetList<FormIDSetLink<Spell>>();
        public ISourceSetList<FormIDSetLink<Spell>> Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<Spell>> SpellsEnumerable
        {
            get => _Spells.Items;
            set => _Spells.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<FormIDSetLink<Spell>> IRace.Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<FormIDSetLink<Spell>> IRaceGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<RaceRelation> _Relations = new SourceSetList<RaceRelation>();
        public ISourceSetList<RaceRelation> Relations => _Relations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RaceRelation> RelationsEnumerable
        {
            get => _Relations.Items;
            set => _Relations.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<RaceRelation> IRace.Relations => _Relations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<RaceRelation> IRaceGetter.Relations => _Relations;
        #endregion

        #endregion
        #region SkillBoosts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<SkillBoost> _SkillBoosts = new SourceBoundedSetList<SkillBoost>(max: 7);
        public ISourceSetList<SkillBoost> SkillBoosts => _SkillBoosts;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<SkillBoost> SkillBoostsEnumerable
        {
            get => _SkillBoosts.Items;
            set => _SkillBoosts.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<SkillBoost> IRace.SkillBoosts => _SkillBoosts;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<SkillBoost> IRaceGetter.SkillBoosts => _SkillBoosts;
        #endregion

        #endregion
        #region Fluff
        private Byte[] _Fluff = new byte[4];
        public Byte[] Fluff
        {
            get => _Fluff;
            set
            {
                this._Fluff = value;
                if (value == null)
                {
                    this._Fluff = new byte[4];
                }
            }
        }
        #endregion
        #region MaleHeight
        private Single _MaleHeight;
        public Single MaleHeight
        {
            get => this._MaleHeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._MaleHeight, value, nameof(MaleHeight));
            }
        }
        #endregion
        #region FemaleHeight
        private Single _FemaleHeight;
        public Single FemaleHeight
        {
            get => this._FemaleHeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FemaleHeight, value, nameof(FemaleHeight));
            }
        }
        #endregion
        #region MaleWeight
        private Single _MaleWeight;
        public Single MaleWeight
        {
            get => this._MaleWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._MaleWeight, value, nameof(MaleWeight));
            }
        }
        #endregion
        #region FemaleWeight
        private Single _FemaleWeight;
        public Single FemaleWeight
        {
            get => this._FemaleWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._FemaleWeight, value, nameof(FemaleWeight));
            }
        }
        #endregion
        #region Flags
        private Race.Flag _Flags;
        public Race.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region Voices
        public bool Voices_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.Voices];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.Voices, nameof(Voices_IsSet));
        }
        bool IRaceGetter.Voices_IsSet => Voices_IsSet;
        private RaceVoices _Voices;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RaceVoices Voices
        {
            get => _Voices;
            set => Voices_Set(value);
        }
        public void Voices_Set(
            RaceVoices value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Voices, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.Voices, nameof(Voices), nameof(Voices_IsSet));
        }
        public void Voices_Unset()
        {
            this.Voices_Set(default(RaceVoices), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RaceVoices IRaceGetter.Voices => this.Voices;
        #endregion
        #region DefaultHair
        public bool DefaultHair_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.DefaultHair];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.DefaultHair, nameof(DefaultHair_IsSet));
        }
        bool IRaceGetter.DefaultHair_IsSet => DefaultHair_IsSet;
        private RaceHair _DefaultHair;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RaceHair DefaultHair
        {
            get => _DefaultHair;
            set => DefaultHair_Set(value);
        }
        public void DefaultHair_Set(
            RaceHair value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _DefaultHair, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.DefaultHair, nameof(DefaultHair), nameof(DefaultHair_IsSet));
        }
        public void DefaultHair_Unset()
        {
            this.DefaultHair_Set(default(RaceHair), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RaceHair IRaceGetter.DefaultHair => this.DefaultHair;
        #endregion
        #region DefaultHairColor
        public bool DefaultHairColor_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.DefaultHairColor];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.DefaultHairColor, nameof(DefaultHairColor_IsSet));
        }
        bool IRaceGetter.DefaultHairColor_IsSet => DefaultHairColor_IsSet;
        private Byte _DefaultHairColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte DefaultHairColor
        {
            get => this._DefaultHairColor;
            set => DefaultHairColor_Set(value);
        }
        Byte IRaceGetter.DefaultHairColor => this.DefaultHairColor;
        public void DefaultHairColor_Set(
            Byte value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _DefaultHairColor, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.DefaultHairColor, nameof(DefaultHairColor), nameof(DefaultHairColor_IsSet));
        }
        public void DefaultHairColor_Unset()
        {
            this.DefaultHairColor_Set(default(Byte), false);
        }
        #endregion
        #region FaceGenMainClamp
        public bool FaceGenMainClamp_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.FaceGenMainClamp];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.FaceGenMainClamp, nameof(FaceGenMainClamp_IsSet));
        }
        bool IRaceGetter.FaceGenMainClamp_IsSet => FaceGenMainClamp_IsSet;
        private Int32 _FaceGenMainClamp;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FaceGenMainClamp
        {
            get => this._FaceGenMainClamp;
            set => FaceGenMainClamp_Set(value);
        }
        Int32 IRaceGetter.FaceGenMainClamp => this.FaceGenMainClamp;
        public void FaceGenMainClamp_Set(
            Int32 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _FaceGenMainClamp, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.FaceGenMainClamp, nameof(FaceGenMainClamp), nameof(FaceGenMainClamp_IsSet));
        }
        public void FaceGenMainClamp_Unset()
        {
            this.FaceGenMainClamp_Set(default(Int32), false);
        }
        #endregion
        #region FaceGenFaceClamp
        public bool FaceGenFaceClamp_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.FaceGenFaceClamp];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.FaceGenFaceClamp, nameof(FaceGenFaceClamp_IsSet));
        }
        bool IRaceGetter.FaceGenFaceClamp_IsSet => FaceGenFaceClamp_IsSet;
        private Int32 _FaceGenFaceClamp;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FaceGenFaceClamp
        {
            get => this._FaceGenFaceClamp;
            set => FaceGenFaceClamp_Set(value);
        }
        Int32 IRaceGetter.FaceGenFaceClamp => this.FaceGenFaceClamp;
        public void FaceGenFaceClamp_Set(
            Int32 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _FaceGenFaceClamp, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.FaceGenFaceClamp, nameof(FaceGenFaceClamp), nameof(FaceGenFaceClamp_IsSet));
        }
        public void FaceGenFaceClamp_Unset()
        {
            this.FaceGenFaceClamp_Set(default(Int32), false);
        }
        #endregion
        #region RaceStats
        public bool RaceStats_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.RaceStats];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.RaceStats, nameof(RaceStats_IsSet));
        }
        bool IRaceGetter.RaceStats_IsSet => RaceStats_IsSet;
        private RaceStatsGendered _RaceStats;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RaceStatsGendered RaceStats
        {
            get => _RaceStats;
            set => RaceStats_Set(value);
        }
        public void RaceStats_Set(
            RaceStatsGendered value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _RaceStats, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.RaceStats, nameof(RaceStats), nameof(RaceStats_IsSet));
        }
        public void RaceStats_Unset()
        {
            this.RaceStats_Set(default(RaceStatsGendered), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RaceStatsGendered IRaceGetter.RaceStats => this.RaceStats;
        #endregion
        #region FaceData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<FacePart> _FaceData = new SourceSetList<FacePart>();
        public ISourceSetList<FacePart> FaceData => _FaceData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FacePart> FaceDataEnumerable
        {
            get => _FaceData.Items;
            set => _FaceData.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<FacePart> IRace.FaceData => _FaceData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<FacePart> IRaceGetter.FaceData => _FaceData;
        #endregion

        #endregion
        #region BodyData
        public bool BodyData_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.BodyData];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.BodyData, nameof(BodyData_IsSet));
        }
        bool IRaceGetter.BodyData_IsSet => BodyData_IsSet;
        private GenderedBodyData _BodyData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public GenderedBodyData BodyData
        {
            get => _BodyData;
            set => BodyData_Set(value);
        }
        public void BodyData_Set(
            GenderedBodyData value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _BodyData, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.BodyData, nameof(BodyData), nameof(BodyData_IsSet));
        }
        public void BodyData_Unset()
        {
            this.BodyData_Set(default(GenderedBodyData), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        GenderedBodyData IRaceGetter.BodyData => this.BodyData;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<FormIDLink<Hair>> _Hairs = new SourceSetList<FormIDLink<Hair>>();
        public ISourceSetList<FormIDLink<Hair>> Hairs => _Hairs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDLink<Hair>> HairsEnumerable
        {
            get => _Hairs.Items;
            set => _Hairs.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<FormIDLink<Hair>> IRace.Hairs => _Hairs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<FormIDLink<Hair>> IRaceGetter.Hairs => _Hairs;
        #endregion

        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<FormIDLink<Eye>> _Eyes = new SourceSetList<FormIDLink<Eye>>();
        public ISourceSetList<FormIDLink<Eye>> Eyes => _Eyes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDLink<Eye>> EyesEnumerable
        {
            get => _Eyes.Items;
            set => _Eyes.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<FormIDLink<Eye>> IRace.Eyes => _Eyes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<FormIDLink<Eye>> IRaceGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region FaceGenData
        public bool FaceGenData_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.FaceGenData];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.FaceGenData, nameof(FaceGenData_IsSet));
        }
        bool IRaceGetter.FaceGenData_IsSet => FaceGenData_IsSet;
        private FaceGenData _FaceGenData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FaceGenData FaceGenData
        {
            get => _FaceGenData;
            set => FaceGenData_Set(value);
        }
        public void FaceGenData_Set(
            FaceGenData value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _FaceGenData, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.FaceGenData, nameof(FaceGenData), nameof(FaceGenData_IsSet));
        }
        public void FaceGenData_Unset()
        {
            this.FaceGenData_Set(default(FaceGenData), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FaceGenData IRaceGetter.FaceGenData => this.FaceGenData;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool Unknown_IsSet
        {
            get => _hasBeenSetTracker[(int)Race_FieldIndex.Unknown];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Race_FieldIndex.Unknown, nameof(Unknown_IsSet));
        }
        bool IRaceGetter.Unknown_IsSet => Unknown_IsSet;
        protected Byte[] _Unknown;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Unknown
        {
            get => this._Unknown;
            set => Unknown_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte[] IRaceGetter.Unknown => this.Unknown;
        public void Unknown_Set(
            Byte[] value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Unknown, value, _hasBeenSetTracker, markSet, (int)Race_FieldIndex.Unknown, nameof(Unknown), nameof(Unknown_IsSet));
        }
        public void Unknown_Unset()
        {
            this.Unknown_Set(default(Byte[]), false);
        }
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RaceCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RaceCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RaceCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Race>.GetEqualsMask(Race rhs, EqualsMaskHelper.Include include) => RaceCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IRaceGetter>.GetEqualsMask(IRaceGetter rhs, EqualsMaskHelper.Include include) => RaceCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            return RaceCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Race_Mask<bool> GetHasBeenSetMask()
        {
            return RaceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Race rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Race rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_IsSet != rhs.Name_IsSet) return false;
            if (Name_IsSet)
            {
                if (!object.Equals(this.Name, rhs.Name)) return false;
            }
            if (Description_IsSet != rhs.Description_IsSet) return false;
            if (Description_IsSet)
            {
                if (!object.Equals(this.Description, rhs.Description)) return false;
            }
            if (Spells.HasBeenSet != rhs.Spells.HasBeenSet) return false;
            if (Spells.HasBeenSet)
            {
                if (!this.Spells.SequenceEqual(rhs.Spells)) return false;
            }
            if (Relations.HasBeenSet != rhs.Relations.HasBeenSet) return false;
            if (Relations.HasBeenSet)
            {
                if (!this.Relations.SequenceEqual(rhs.Relations)) return false;
            }
            if (!this.SkillBoosts.SequenceEqual(rhs.SkillBoosts)) return false;
            if (!this.Fluff.EqualsFast(rhs.Fluff)) return false;
            if (!this.MaleHeight.EqualsWithin(rhs.MaleHeight)) return false;
            if (!this.FemaleHeight.EqualsWithin(rhs.FemaleHeight)) return false;
            if (!this.MaleWeight.EqualsWithin(rhs.MaleWeight)) return false;
            if (!this.FemaleWeight.EqualsWithin(rhs.FemaleWeight)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (Voices_IsSet != rhs.Voices_IsSet) return false;
            if (Voices_IsSet)
            {
                if (!object.Equals(this.Voices, rhs.Voices)) return false;
            }
            if (DefaultHair_IsSet != rhs.DefaultHair_IsSet) return false;
            if (DefaultHair_IsSet)
            {
                if (!object.Equals(this.DefaultHair, rhs.DefaultHair)) return false;
            }
            if (DefaultHairColor_IsSet != rhs.DefaultHairColor_IsSet) return false;
            if (DefaultHairColor_IsSet)
            {
                if (this.DefaultHairColor != rhs.DefaultHairColor) return false;
            }
            if (FaceGenMainClamp_IsSet != rhs.FaceGenMainClamp_IsSet) return false;
            if (FaceGenMainClamp_IsSet)
            {
                if (this.FaceGenMainClamp != rhs.FaceGenMainClamp) return false;
            }
            if (FaceGenFaceClamp_IsSet != rhs.FaceGenFaceClamp_IsSet) return false;
            if (FaceGenFaceClamp_IsSet)
            {
                if (this.FaceGenFaceClamp != rhs.FaceGenFaceClamp) return false;
            }
            if (RaceStats_IsSet != rhs.RaceStats_IsSet) return false;
            if (RaceStats_IsSet)
            {
                if (!object.Equals(this.RaceStats, rhs.RaceStats)) return false;
            }
            if (FaceData.HasBeenSet != rhs.FaceData.HasBeenSet) return false;
            if (FaceData.HasBeenSet)
            {
                if (!this.FaceData.SequenceEqual(rhs.FaceData)) return false;
            }
            if (BodyData_IsSet != rhs.BodyData_IsSet) return false;
            if (BodyData_IsSet)
            {
                if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
            }
            if (Hairs.HasBeenSet != rhs.Hairs.HasBeenSet) return false;
            if (Hairs.HasBeenSet)
            {
                if (!this.Hairs.SequenceEqual(rhs.Hairs)) return false;
            }
            if (Eyes.HasBeenSet != rhs.Eyes.HasBeenSet) return false;
            if (Eyes.HasBeenSet)
            {
                if (!this.Eyes.SequenceEqual(rhs.Eyes)) return false;
            }
            if (FaceGenData_IsSet != rhs.FaceGenData_IsSet) return false;
            if (FaceGenData_IsSet)
            {
                if (!object.Equals(this.FaceGenData, rhs.FaceGenData)) return false;
            }
            if (Unknown_IsSet != rhs.Unknown_IsSet) return false;
            if (Unknown_IsSet)
            {
                if (!this.Unknown.EqualsFast(rhs.Unknown)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_IsSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            if (Description_IsSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Spells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Spells).CombineHashCode(ret);
            }
            if (Relations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Relations).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(SkillBoosts).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaleHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FemaleHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaleWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FemaleWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            if (Voices_IsSet)
            {
                ret = HashHelper.GetHashCode(Voices).CombineHashCode(ret);
            }
            if (DefaultHair_IsSet)
            {
                ret = HashHelper.GetHashCode(DefaultHair).CombineHashCode(ret);
            }
            if (DefaultHairColor_IsSet)
            {
                ret = HashHelper.GetHashCode(DefaultHairColor).CombineHashCode(ret);
            }
            if (FaceGenMainClamp_IsSet)
            {
                ret = HashHelper.GetHashCode(FaceGenMainClamp).CombineHashCode(ret);
            }
            if (FaceGenFaceClamp_IsSet)
            {
                ret = HashHelper.GetHashCode(FaceGenFaceClamp).CombineHashCode(ret);
            }
            if (RaceStats_IsSet)
            {
                ret = HashHelper.GetHashCode(RaceStats).CombineHashCode(ret);
            }
            if (FaceData.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceData).CombineHashCode(ret);
            }
            if (BodyData_IsSet)
            {
                ret = HashHelper.GetHashCode(BodyData).CombineHashCode(ret);
            }
            if (Hairs.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Hairs).CombineHashCode(ret);
            }
            if (Eyes.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Eyes).CombineHashCode(ret);
            }
            if (FaceGenData_IsSet)
            {
                ret = HashHelper.GetHashCode(FaceGenData).CombineHashCode(ret);
            }
            if (Unknown_IsSet)
            {
                ret = HashHelper.GetHashCode(Unknown).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static Race Create_Xml(
            XElement node,
            Race_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Race Create_Xml(
            XElement node,
            out Race_ErrorMask errorMask,
            bool doMasks = true,
            Race_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Race Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Race();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RaceCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Race Create_Xml(
            string path,
            Race_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static Race Create_Xml(
            string path,
            out Race_ErrorMask errorMask,
            Race_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Race Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Race_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Race Create_Xml(
            Stream stream,
            Race_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static Race Create_Xml(
            Stream stream,
            out Race_ErrorMask errorMask,
            Race_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Race Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Race_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out Race_ErrorMask errorMask,
            Race_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Race>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Race_ErrorMask errorMask,
            Race_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Race_ErrorMask errorMask,
            Race_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Race_ErrorMask errorMask,
            bool doMasks = true,
            Race_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Race_ErrorMask errorMask,
            Race_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Race_ErrorMask errorMask,
            Race_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            RaceCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            Race item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    MajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Race_FieldIndex)index)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return _hasBeenSetTracker[index];
                case Race_FieldIndex.Spells:
                    return Spells.HasBeenSet;
                case Race_FieldIndex.Relations:
                    return Relations.HasBeenSet;
                case Race_FieldIndex.FaceData:
                    return FaceData.HasBeenSet;
                case Race_FieldIndex.Hairs:
                    return Hairs.HasBeenSet;
                case Race_FieldIndex.Eyes:
                    return Eyes.HasBeenSet;
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Race_Registration.TRIGGERING_RECORD_TYPE;
        public DATADataType DATADataTypeState;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Spells)
            {
                yield return item;
            }
            foreach (var item in Relations.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            if (Voices != null)
            {
                foreach (var item in Voices.Links)
                {
                    yield return item;
                }
            }
            if (DefaultHair != null)
            {
                foreach (var item in DefaultHair.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in Hairs)
            {
                yield return item;
            }
            foreach (var item in Eyes)
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            
        {
            base.Link(
                modList,
                sourceMod,
                cmds);
            foreach (var item in Spells)
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            foreach (var item in Relations.Items)
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            if (Voices != null)
            {
                Voices?.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            if (DefaultHair != null)
            {
                DefaultHair?.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            foreach (var item in Hairs)
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
            foreach (var item in Eyes)
            {
                item.Link(
                    modList,
                    sourceMod,
                    cmds);
            }
        }

        public Race(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(Race obj, Race rhs, Func<FormKey> getNextFormKey, IList<(MajorRecord Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override MajorRecord Duplicate(Func<FormKey> getNextFormKey, IList<(MajorRecord Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Race(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Race Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Race Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Race_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Race Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Race>(
                record: new Race(),
                frame: frame,
                errorMask: errorMask,
                recType: Race_Registration.RACE_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Race Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static Race Create_Binary(
            string path,
            MasterReferences masterReferences,
            out Race_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Race Create_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static Race Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static Race Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Race_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Race Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Race_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out Race_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out Race_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RaceCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Race item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Race item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Name);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Name);
                case 0x43534544: // DESC
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Description);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Description);
                case 0x4F4C5053: // SPLO
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Spell>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.SPLO_HEADER,
                        masterReferences: masterReferences,
                        item: item.Spells,
                        fieldIndex: (int)Race_FieldIndex.Spells,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormKeyBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Spells);
                case 0x4D414E58: // XNAM
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RaceRelation>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.XNAM_HEADER,
                        item: item.Relations,
                        fieldIndex: (int)Race_FieldIndex.Relations,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out RaceRelation listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<RaceRelation>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Relations);
                case 0x41544144: // DATA
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.SpawnWithLength(contentLength))
                    {
                        if (!dataFrame.Complete)
                        {
                            item.DATADataTypeState = DATADataType.Has;
                        }
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<SkillBoost>.Instance.ParseRepeatedItem(
                            frame: frame,
                            amount: 7,
                            item: item.SkillBoosts,
                            fieldIndex: (int)Race_FieldIndex.SkillBoosts,
                            errorMask: errorMask,
                            transl: (MutagenFrame r, out SkillBoost listSubItem, ErrorMaskBuilder listErrMask) =>
                            {
                                return LoquiBinaryTranslation<SkillBoost>.Instance.Parse(
                                    frame: r.Spawn(snapToFinalPosition: false),
                                    item: out listSubItem,
                                    errorMask: listErrMask,
                                    masterReferences: masterReferences);
                            }
                            );
                        try
                        {
                            errorMask?.PushIndex((int)Race_FieldIndex.Fluff);
                            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(4),
                                item: out Byte[] FluffParse,
                                errorMask: errorMask))
                            {
                                item.Fluff = FluffParse;
                            }
                            else
                            {
                                item.Fluff = default(Byte[]);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Race_FieldIndex.MaleHeight);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single MaleHeightParse,
                                errorMask: errorMask))
                            {
                                item.MaleHeight = MaleHeightParse;
                            }
                            else
                            {
                                item.MaleHeight = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Race_FieldIndex.FemaleHeight);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FemaleHeightParse,
                                errorMask: errorMask))
                            {
                                item.FemaleHeight = FemaleHeightParse;
                            }
                            else
                            {
                                item.FemaleHeight = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Race_FieldIndex.MaleWeight);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single MaleWeightParse,
                                errorMask: errorMask))
                            {
                                item.MaleWeight = MaleWeightParse;
                            }
                            else
                            {
                                item.MaleWeight = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Race_FieldIndex.FemaleWeight);
                            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                                frame: dataFrame.Spawn(snapToFinalPosition: false),
                                item: out Single FemaleWeightParse,
                                errorMask: errorMask))
                            {
                                item.FemaleWeight = FemaleWeightParse;
                            }
                            else
                            {
                                item.FemaleWeight = default(Single);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                        try
                        {
                            errorMask?.PushIndex((int)Race_FieldIndex.Flags);
                            if (EnumBinaryTranslation<Race.Flag>.Instance.Parse(
                                frame: dataFrame.SpawnWithLength(2),
                                item: out Race.Flag FlagsParse,
                                errorMask: errorMask))
                            {
                                item.Flags = FlagsParse;
                            }
                            else
                            {
                                item.Flags = default(Race.Flag);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Flags);
                case 0x4D414E56: // VNAM
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Voices);
                        if (LoquiBinaryTranslation<RaceVoices>.Instance.Parse(
                            frame: frame,
                            masterReferences: masterReferences,
                            item: out RaceVoices VoicesParse,
                            errorMask: errorMask))
                        {
                            item.Voices = VoicesParse;
                        }
                        else
                        {
                            item.Voices = default(RaceVoices);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Voices);
                case 0x4D414E44: // DNAM
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.DefaultHair);
                        if (LoquiBinaryTranslation<RaceHair>.Instance.Parse(
                            frame: frame,
                            masterReferences: masterReferences,
                            item: out RaceHair DefaultHairParse,
                            errorMask: errorMask))
                        {
                            item.DefaultHair = DefaultHairParse;
                        }
                        else
                        {
                            item.DefaultHair = default(RaceHair);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHair);
                case 0x4D414E43: // CNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.DefaultHairColor);
                        if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte DefaultHairColorParse,
                            errorMask: errorMask))
                        {
                            item.DefaultHairColor = DefaultHairColorParse;
                        }
                        else
                        {
                            item.DefaultHairColor = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHairColor);
                case 0x4D414E50: // PNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FaceGenMainClamp);
                        if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Int32 FaceGenMainClampParse,
                            errorMask: errorMask))
                        {
                            item.FaceGenMainClamp = FaceGenMainClampParse;
                        }
                        else
                        {
                            item.FaceGenMainClamp = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenMainClamp);
                case 0x4D414E55: // UNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FaceGenFaceClamp);
                        if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Int32 FaceGenFaceClampParse,
                            errorMask: errorMask))
                        {
                            item.FaceGenFaceClamp = FaceGenFaceClampParse;
                        }
                        else
                        {
                            item.FaceGenFaceClamp = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenFaceClamp);
                case 0x52545441: // ATTR
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.RaceStats);
                        if (LoquiBinaryTranslation<RaceStatsGendered>.Instance.Parse(
                            frame: frame,
                            masterReferences: masterReferences,
                            item: out RaceStatsGendered RaceStatsParse,
                            errorMask: errorMask))
                        {
                            item.RaceStats = RaceStatsParse;
                        }
                        else
                        {
                            item.RaceStats = default(RaceStatsGendered);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.RaceStats);
                case 0x304D414E: // NAM0
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FacePart>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: FacePart_Registration.TriggeringRecordTypes,
                        item: item.FaceData,
                        fieldIndex: (int)Race_FieldIndex.FaceData,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out FacePart listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<FacePart>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceData);
                case 0x314D414E: // NAM1
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.BodyData);
                        if (LoquiBinaryTranslation<GenderedBodyData>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            masterReferences: masterReferences,
                            item: out GenderedBodyData BodyDataParse,
                            errorMask: errorMask))
                        {
                            item.BodyData = BodyDataParse;
                        }
                        else
                        {
                            item.BodyData = default(GenderedBodyData);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyData);
                case 0x4D414E48: // HNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Hair>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Hairs,
                        fieldIndex: (int)Race_FieldIndex.Hairs,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormKeyBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Hairs);
                case 0x4D414E45: // ENAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Eye>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Eyes,
                        fieldIndex: (int)Race_FieldIndex.Eyes,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: FormKeyBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Eyes);
                case 0x53474746: // FGGS
                case 0x41474746: // FGGA
                case 0x53544746: // FGTS
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FaceGenData);
                        if (LoquiBinaryTranslation<FaceGenData>.Instance.Parse(
                            frame: frame.Spawn(snapToFinalPosition: false),
                            masterReferences: masterReferences,
                            item: out FaceGenData FaceGenDataParse,
                            errorMask: errorMask))
                        {
                            item.FaceGenData = FaceGenDataParse;
                        }
                        else
                        {
                            item.FaceGenData = default(FaceGenData);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenData);
                case 0x4D414E53: // SNAM
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Unknown);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] UnknownParse,
                            errorMask: errorMask))
                        {
                            item.Unknown = UnknownParse;
                        }
                        else
                        {
                            item.Unknown = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Unknown);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Race Copy(
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            return Race.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Race Copy(
            IRace item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            Race ret;
            if (item.GetType().Equals(typeof(Race)))
            {
                ret = new Race();
            }
            else
            {
                ret = (Race)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Race Copy_ToLoqui(
            IRaceGetter item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            Race ret;
            if (item.GetType().Equals(typeof(Race)))
            {
                ret = new Race() as Race;
            }
            else
            {
                ret = (Race)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IRaceGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRaceGetter rhs,
            Race_CopyMask copyMask,
            IRaceGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRaceGetter rhs,
            out Race_ErrorMask errorMask,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RaceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRaceGetter rhs,
            ErrorMaskBuilder errorMask,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RaceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Race_FieldIndex.Description:
                    this.Description = (String)obj;
                    break;
                case Race_FieldIndex.Spells:
                    this._Spells.SetTo((IEnumerable<FormIDSetLink<Spell>>)obj);
                    break;
                case Race_FieldIndex.Relations:
                    this._Relations.SetTo((IEnumerable<RaceRelation>)obj);
                    break;
                case Race_FieldIndex.SkillBoosts:
                    this._SkillBoosts.SetTo((IEnumerable<SkillBoost>)obj);
                    break;
                case Race_FieldIndex.Fluff:
                    this.Fluff = (Byte[])obj;
                    break;
                case Race_FieldIndex.MaleHeight:
                    this.MaleHeight = (Single)obj;
                    break;
                case Race_FieldIndex.FemaleHeight:
                    this.FemaleHeight = (Single)obj;
                    break;
                case Race_FieldIndex.MaleWeight:
                    this.MaleWeight = (Single)obj;
                    break;
                case Race_FieldIndex.FemaleWeight:
                    this.FemaleWeight = (Single)obj;
                    break;
                case Race_FieldIndex.Flags:
                    this.Flags = (Race.Flag)obj;
                    break;
                case Race_FieldIndex.Voices:
                    this.Voices = (RaceVoices)obj;
                    break;
                case Race_FieldIndex.DefaultHair:
                    this.DefaultHair = (RaceHair)obj;
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    this.DefaultHairColor = (Byte)obj;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    this.FaceGenMainClamp = (Int32)obj;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    this.FaceGenFaceClamp = (Int32)obj;
                    break;
                case Race_FieldIndex.RaceStats:
                    this.RaceStats = (RaceStatsGendered)obj;
                    break;
                case Race_FieldIndex.FaceData:
                    this._FaceData.SetTo((IEnumerable<FacePart>)obj);
                    break;
                case Race_FieldIndex.BodyData:
                    this.BodyData = (GenderedBodyData)obj;
                    break;
                case Race_FieldIndex.Hairs:
                    this._Hairs.SetTo((IEnumerable<FormIDLink<Hair>>)obj);
                    break;
                case Race_FieldIndex.Eyes:
                    this._Eyes.SetTo((IEnumerable<FormIDLink<Eye>>)obj);
                    break;
                case Race_FieldIndex.FaceGenData:
                    this.FaceGenData = (FaceGenData)obj;
                    break;
                case Race_FieldIndex.Unknown:
                    this.Unknown = (Byte[])obj;
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceCommon.Clear(this, cmds);
        }


        public new static Race Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Race();
            foreach (var pair in fields)
            {
                CopyInInternal_Race(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Race(Race obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Race_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Race_FieldIndex.Description:
                    obj.Description = (String)pair.Value;
                    break;
                case Race_FieldIndex.Spells:
                    obj._Spells.SetTo((IEnumerable<FormIDSetLink<Spell>>)pair.Value);
                    break;
                case Race_FieldIndex.Relations:
                    obj._Relations.SetTo((IEnumerable<RaceRelation>)pair.Value);
                    break;
                case Race_FieldIndex.SkillBoosts:
                    obj._SkillBoosts.SetTo((IEnumerable<SkillBoost>)pair.Value);
                    break;
                case Race_FieldIndex.Fluff:
                    obj.Fluff = (Byte[])pair.Value;
                    break;
                case Race_FieldIndex.MaleHeight:
                    obj.MaleHeight = (Single)pair.Value;
                    break;
                case Race_FieldIndex.FemaleHeight:
                    obj.FemaleHeight = (Single)pair.Value;
                    break;
                case Race_FieldIndex.MaleWeight:
                    obj.MaleWeight = (Single)pair.Value;
                    break;
                case Race_FieldIndex.FemaleWeight:
                    obj.FemaleWeight = (Single)pair.Value;
                    break;
                case Race_FieldIndex.Flags:
                    obj.Flags = (Race.Flag)pair.Value;
                    break;
                case Race_FieldIndex.Voices:
                    obj.Voices = (RaceVoices)pair.Value;
                    break;
                case Race_FieldIndex.DefaultHair:
                    obj.DefaultHair = (RaceHair)pair.Value;
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    obj.DefaultHairColor = (Byte)pair.Value;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    obj.FaceGenMainClamp = (Int32)pair.Value;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    obj.FaceGenFaceClamp = (Int32)pair.Value;
                    break;
                case Race_FieldIndex.RaceStats:
                    obj.RaceStats = (RaceStatsGendered)pair.Value;
                    break;
                case Race_FieldIndex.FaceData:
                    obj._FaceData.SetTo((IEnumerable<FacePart>)pair.Value);
                    break;
                case Race_FieldIndex.BodyData:
                    obj.BodyData = (GenderedBodyData)pair.Value;
                    break;
                case Race_FieldIndex.Hairs:
                    obj._Hairs.SetTo((IEnumerable<FormIDLink<Hair>>)pair.Value);
                    break;
                case Race_FieldIndex.Eyes:
                    obj._Eyes.SetTo((IEnumerable<FormIDLink<Eye>>)pair.Value);
                    break;
                case Race_FieldIndex.FaceGenData:
                    obj.FaceGenData = (FaceGenData)pair.Value;
                    break;
                case Race_FieldIndex.Unknown:
                    obj.Unknown = (Byte[])pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Race obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRace : IRaceGetter, IMajorRecord, ILoquiClass<IRace, IRaceGetter>, ILoquiClass<Race, IRaceGetter>
    {
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String item, bool hasBeenSet = true);
        void Name_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String item, bool hasBeenSet = true);
        void Description_Unset();

        new ISourceSetList<FormIDSetLink<Spell>> Spells { get; }
        new ISourceSetList<RaceRelation> Relations { get; }
        new ISourceSetList<SkillBoost> SkillBoosts { get; }
        new Byte[] Fluff { get; set; }

        new Single MaleHeight { get; set; }

        new Single FemaleHeight { get; set; }

        new Single MaleWeight { get; set; }

        new Single FemaleWeight { get; set; }

        new Race.Flag Flags { get; set; }

        new RaceVoices Voices { get; set; }
        new bool Voices_IsSet { get; set; }
        void Voices_Set(RaceVoices item, bool hasBeenSet = true);
        void Voices_Unset();

        new RaceHair DefaultHair { get; set; }
        new bool DefaultHair_IsSet { get; set; }
        void DefaultHair_Set(RaceHair item, bool hasBeenSet = true);
        void DefaultHair_Unset();

        new Byte DefaultHairColor { get; set; }
        new bool DefaultHairColor_IsSet { get; set; }
        void DefaultHairColor_Set(Byte item, bool hasBeenSet = true);
        void DefaultHairColor_Unset();

        new Int32 FaceGenMainClamp { get; set; }
        new bool FaceGenMainClamp_IsSet { get; set; }
        void FaceGenMainClamp_Set(Int32 item, bool hasBeenSet = true);
        void FaceGenMainClamp_Unset();

        new Int32 FaceGenFaceClamp { get; set; }
        new bool FaceGenFaceClamp_IsSet { get; set; }
        void FaceGenFaceClamp_Set(Int32 item, bool hasBeenSet = true);
        void FaceGenFaceClamp_Unset();

        new RaceStatsGendered RaceStats { get; set; }
        new bool RaceStats_IsSet { get; set; }
        void RaceStats_Set(RaceStatsGendered item, bool hasBeenSet = true);
        void RaceStats_Unset();

        new ISourceSetList<FacePart> FaceData { get; }
        new GenderedBodyData BodyData { get; set; }
        new bool BodyData_IsSet { get; set; }
        void BodyData_Set(GenderedBodyData item, bool hasBeenSet = true);
        void BodyData_Unset();

        new ISourceSetList<FormIDLink<Hair>> Hairs { get; }
        new ISourceSetList<FormIDLink<Eye>> Eyes { get; }
        new FaceGenData FaceGenData { get; set; }
        new bool FaceGenData_IsSet { get; set; }
        void FaceGenData_Set(FaceGenData item, bool hasBeenSet = true);
        void FaceGenData_Unset();

        new Byte[] Unknown { get; set; }
        new bool Unknown_IsSet { get; set; }
        void Unknown_Set(Byte[] item, bool hasBeenSet = true);
        void Unknown_Unset();

    }

    public partial interface IRaceGetter : IMajorRecordGetter
    {
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region Spells
        IObservableSetList<FormIDSetLink<Spell>> Spells { get; }
        #endregion
        #region Relations
        IObservableSetList<RaceRelation> Relations { get; }
        #endregion
        #region SkillBoosts
        IObservableSetList<SkillBoost> SkillBoosts { get; }
        #endregion
        #region Fluff
        Byte[] Fluff { get; }

        #endregion
        #region MaleHeight
        Single MaleHeight { get; }

        #endregion
        #region FemaleHeight
        Single FemaleHeight { get; }

        #endregion
        #region MaleWeight
        Single MaleWeight { get; }

        #endregion
        #region FemaleWeight
        Single FemaleWeight { get; }

        #endregion
        #region Flags
        Race.Flag Flags { get; }

        #endregion
        #region Voices
        RaceVoices Voices { get; }
        bool Voices_IsSet { get; }

        #endregion
        #region DefaultHair
        RaceHair DefaultHair { get; }
        bool DefaultHair_IsSet { get; }

        #endregion
        #region DefaultHairColor
        Byte DefaultHairColor { get; }
        bool DefaultHairColor_IsSet { get; }

        #endregion
        #region FaceGenMainClamp
        Int32 FaceGenMainClamp { get; }
        bool FaceGenMainClamp_IsSet { get; }

        #endregion
        #region FaceGenFaceClamp
        Int32 FaceGenFaceClamp { get; }
        bool FaceGenFaceClamp_IsSet { get; }

        #endregion
        #region RaceStats
        RaceStatsGendered RaceStats { get; }
        bool RaceStats_IsSet { get; }

        #endregion
        #region FaceData
        IObservableSetList<FacePart> FaceData { get; }
        #endregion
        #region BodyData
        GenderedBodyData BodyData { get; }
        bool BodyData_IsSet { get; }

        #endregion
        #region Hairs
        IObservableSetList<FormIDLink<Hair>> Hairs { get; }
        #endregion
        #region Eyes
        IObservableSetList<FormIDLink<Eye>> Eyes { get; }
        #endregion
        #region FaceGenData
        FaceGenData FaceGenData { get; }
        bool FaceGenData_IsSet { get; }

        #endregion
        #region Unknown
        Byte[] Unknown { get; }
        bool Unknown_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Race_FieldIndex
    {
        MajorRecordFlags = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Description = 6,
        Spells = 7,
        Relations = 8,
        SkillBoosts = 9,
        Fluff = 10,
        MaleHeight = 11,
        FemaleHeight = 12,
        MaleWeight = 13,
        FemaleWeight = 14,
        Flags = 15,
        Voices = 16,
        DefaultHair = 17,
        DefaultHairColor = 18,
        FaceGenMainClamp = 19,
        FaceGenFaceClamp = 20,
        RaceStats = 21,
        FaceData = 22,
        BodyData = 23,
        Hairs = 24,
        Eyes = 25,
        FaceGenData = 26,
        Unknown = 27,
    }
    #endregion

    #region Registration
    public class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "265136e6-60a6-4ade-a7c4-b31197fb95e5";

        public const ushort AdditionalFieldCount = 23;

        public const ushort FieldCount = 28;

        public static readonly Type MaskType = typeof(Race_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race_ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type CommonType = typeof(RaceCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Race_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Race_FieldIndex.Description;
                case "SPELLS":
                    return (ushort)Race_FieldIndex.Spells;
                case "RELATIONS":
                    return (ushort)Race_FieldIndex.Relations;
                case "SKILLBOOSTS":
                    return (ushort)Race_FieldIndex.SkillBoosts;
                case "FLUFF":
                    return (ushort)Race_FieldIndex.Fluff;
                case "MALEHEIGHT":
                    return (ushort)Race_FieldIndex.MaleHeight;
                case "FEMALEHEIGHT":
                    return (ushort)Race_FieldIndex.FemaleHeight;
                case "MALEWEIGHT":
                    return (ushort)Race_FieldIndex.MaleWeight;
                case "FEMALEWEIGHT":
                    return (ushort)Race_FieldIndex.FemaleWeight;
                case "FLAGS":
                    return (ushort)Race_FieldIndex.Flags;
                case "VOICES":
                    return (ushort)Race_FieldIndex.Voices;
                case "DEFAULTHAIR":
                    return (ushort)Race_FieldIndex.DefaultHair;
                case "DEFAULTHAIRCOLOR":
                    return (ushort)Race_FieldIndex.DefaultHairColor;
                case "FACEGENMAINCLAMP":
                    return (ushort)Race_FieldIndex.FaceGenMainClamp;
                case "FACEGENFACECLAMP":
                    return (ushort)Race_FieldIndex.FaceGenFaceClamp;
                case "RACESTATS":
                    return (ushort)Race_FieldIndex.RaceStats;
                case "FACEDATA":
                    return (ushort)Race_FieldIndex.FaceData;
                case "BODYDATA":
                    return (ushort)Race_FieldIndex.BodyData;
                case "HAIRS":
                    return (ushort)Race_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)Race_FieldIndex.Eyes;
                case "FACEGENDATA":
                    return (ushort)Race_FieldIndex.FaceGenData;
                case "UNKNOWN":
                    return (ushort)Race_FieldIndex.Unknown;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                    return true;
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                    return true;
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return "Name";
                case Race_FieldIndex.Description:
                    return "Description";
                case Race_FieldIndex.Spells:
                    return "Spells";
                case Race_FieldIndex.Relations:
                    return "Relations";
                case Race_FieldIndex.SkillBoosts:
                    return "SkillBoosts";
                case Race_FieldIndex.Fluff:
                    return "Fluff";
                case Race_FieldIndex.MaleHeight:
                    return "MaleHeight";
                case Race_FieldIndex.FemaleHeight:
                    return "FemaleHeight";
                case Race_FieldIndex.MaleWeight:
                    return "MaleWeight";
                case Race_FieldIndex.FemaleWeight:
                    return "FemaleWeight";
                case Race_FieldIndex.Flags:
                    return "Flags";
                case Race_FieldIndex.Voices:
                    return "Voices";
                case Race_FieldIndex.DefaultHair:
                    return "DefaultHair";
                case Race_FieldIndex.DefaultHairColor:
                    return "DefaultHairColor";
                case Race_FieldIndex.FaceGenMainClamp:
                    return "FaceGenMainClamp";
                case Race_FieldIndex.FaceGenFaceClamp:
                    return "FaceGenFaceClamp";
                case Race_FieldIndex.RaceStats:
                    return "RaceStats";
                case Race_FieldIndex.FaceData:
                    return "FaceData";
                case Race_FieldIndex.BodyData:
                    return "BodyData";
                case Race_FieldIndex.Hairs:
                    return "Hairs";
                case Race_FieldIndex.Eyes:
                    return "Eyes";
                case Race_FieldIndex.FaceGenData:
                    return "FaceGenData";
                case Race_FieldIndex.Unknown:
                    return "Unknown";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return typeof(String);
                case Race_FieldIndex.Description:
                    return typeof(String);
                case Race_FieldIndex.Spells:
                    return typeof(SourceSetList<FormIDSetLink<Spell>>);
                case Race_FieldIndex.Relations:
                    return typeof(SourceSetList<RaceRelation>);
                case Race_FieldIndex.SkillBoosts:
                    return typeof(SourceSetList<SkillBoost>);
                case Race_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case Race_FieldIndex.MaleHeight:
                    return typeof(Single);
                case Race_FieldIndex.FemaleHeight:
                    return typeof(Single);
                case Race_FieldIndex.MaleWeight:
                    return typeof(Single);
                case Race_FieldIndex.FemaleWeight:
                    return typeof(Single);
                case Race_FieldIndex.Flags:
                    return typeof(Race.Flag);
                case Race_FieldIndex.Voices:
                    return typeof(RaceVoices);
                case Race_FieldIndex.DefaultHair:
                    return typeof(RaceHair);
                case Race_FieldIndex.DefaultHairColor:
                    return typeof(Byte);
                case Race_FieldIndex.FaceGenMainClamp:
                    return typeof(Int32);
                case Race_FieldIndex.FaceGenFaceClamp:
                    return typeof(Int32);
                case Race_FieldIndex.RaceStats:
                    return typeof(RaceStatsGendered);
                case Race_FieldIndex.FaceData:
                    return typeof(SourceSetList<FacePart>);
                case Race_FieldIndex.BodyData:
                    return typeof(GenderedBodyData);
                case Race_FieldIndex.Hairs:
                    return typeof(SourceSetList<FormIDLink<Hair>>);
                case Race_FieldIndex.Eyes:
                    return typeof(SourceSetList<FormIDLink<Eye>>);
                case Race_FieldIndex.FaceGenData:
                    return typeof(FaceGenData);
                case Race_FieldIndex.Unknown:
                    return typeof(Byte[]);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType VNAM_HEADER = new RecordType("VNAM");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType UNAM_HEADER = new RecordType("UNAM");
        public static readonly RecordType ATTR_HEADER = new RecordType("ATTR");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType FGGS_HEADER = new RecordType("FGGS");
        public static readonly RecordType FGGA_HEADER = new RecordType("FGGA");
        public static readonly RecordType FGTS_HEADER = new RecordType("FGTS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RACE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 16;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RaceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRace item,
            IRaceGetter rhs,
            IRaceGetter def,
            ErrorMaskBuilder errorMask,
            Race_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Name);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Name,
                        rhsHasBeenSet: rhs.Name_IsSet,
                        defItem: def?.Name ?? default(String),
                        defHasBeenSet: def?.Name_IsSet ?? false,
                        outRhsItem: out var rhsNameItem,
                        outDefItem: out var defNameItem))
                    {
                        item.Name = rhsNameItem;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Description ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Description);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Description,
                        rhsHasBeenSet: rhs.Description_IsSet,
                        defItem: def?.Description ?? default(String),
                        defHasBeenSet: def?.Description_IsSet ?? false,
                        outRhsItem: out var rhsDescriptionItem,
                        outDefItem: out var defDescriptionItem))
                    {
                        item.Description = rhsDescriptionItem;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Spells != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Spells);
                try
                {
                    item.Spells.SetToWithDefault(
                        rhs.Spells,
                        def?.Spells);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Relations.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Relations);
                try
                {
                    item.Relations.SetToWithDefault(
                        rhs: rhs.Relations,
                        def: def?.Relations,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Relations.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return RaceRelation.Copy(
                                        r,
                                        copyMask?.Relations?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Relations.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SkillBoosts.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoosts);
                try
                {
                    item.SkillBoosts.SetToWithDefault(
                        rhs: rhs.SkillBoosts,
                        def: def?.SkillBoosts,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.SkillBoosts.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return SkillBoost.Copy(
                                        r,
                                        copyMask?.SkillBoosts?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.SkillBoosts.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Fluff);
                try
                {
                    item.Fluff = rhs.Fluff;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaleHeight ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MaleHeight);
                try
                {
                    item.MaleHeight = rhs.MaleHeight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FemaleHeight ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FemaleHeight);
                try
                {
                    item.FemaleHeight = rhs.FemaleHeight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaleWeight ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MaleWeight);
                try
                {
                    item.MaleWeight = rhs.MaleWeight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FemaleWeight ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FemaleWeight);
                try
                {
                    item.FemaleWeight = rhs.FemaleWeight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Voices.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Voices);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Voices,
                        rhsHasBeenSet: rhs.Voices_IsSet,
                        defItem: def?.Voices,
                        defHasBeenSet: def?.Voices_IsSet ?? false,
                        outRhsItem: out var rhsVoicesItem,
                        outDefItem: out var defVoicesItem))
                    {
                        switch (copyMask?.Voices.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.Voices = rhsVoicesItem;
                                break;
                            case CopyOption.CopyIn:
                                RaceVoicesCommon.CopyFieldsFrom(
                                    item: item.Voices,
                                    rhs: rhs.Voices,
                                    def: def?.Voices,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Voices.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.Voices = RaceVoices.Copy(
                                    rhsVoicesItem,
                                    copyMask?.Voices?.Specific,
                                    def: defVoicesItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Voices?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Voices_Set(
                            item: default(RaceVoices),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DefaultHair.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.DefaultHair);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.DefaultHair,
                        rhsHasBeenSet: rhs.DefaultHair_IsSet,
                        defItem: def?.DefaultHair,
                        defHasBeenSet: def?.DefaultHair_IsSet ?? false,
                        outRhsItem: out var rhsDefaultHairItem,
                        outDefItem: out var defDefaultHairItem))
                    {
                        switch (copyMask?.DefaultHair.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.DefaultHair = rhsDefaultHairItem;
                                break;
                            case CopyOption.CopyIn:
                                RaceHairCommon.CopyFieldsFrom(
                                    item: item.DefaultHair,
                                    rhs: rhs.DefaultHair,
                                    def: def?.DefaultHair,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.DefaultHair.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.DefaultHair = RaceHair.Copy(
                                    rhsDefaultHairItem,
                                    copyMask?.DefaultHair?.Specific,
                                    def: defDefaultHairItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.DefaultHair?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.DefaultHair_Set(
                            item: default(RaceHair),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DefaultHairColor ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.DefaultHairColor);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.DefaultHairColor,
                        rhsHasBeenSet: rhs.DefaultHairColor_IsSet,
                        defItem: def?.DefaultHairColor ?? default(Byte),
                        defHasBeenSet: def?.DefaultHairColor_IsSet ?? false,
                        outRhsItem: out var rhsDefaultHairColorItem,
                        outDefItem: out var defDefaultHairColorItem))
                    {
                        item.DefaultHairColor = rhsDefaultHairColorItem;
                    }
                    else
                    {
                        item.DefaultHairColor_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FaceGenMainClamp ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceGenMainClamp);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FaceGenMainClamp,
                        rhsHasBeenSet: rhs.FaceGenMainClamp_IsSet,
                        defItem: def?.FaceGenMainClamp ?? default(Int32),
                        defHasBeenSet: def?.FaceGenMainClamp_IsSet ?? false,
                        outRhsItem: out var rhsFaceGenMainClampItem,
                        outDefItem: out var defFaceGenMainClampItem))
                    {
                        item.FaceGenMainClamp = rhsFaceGenMainClampItem;
                    }
                    else
                    {
                        item.FaceGenMainClamp_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FaceGenFaceClamp ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceGenFaceClamp);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FaceGenFaceClamp,
                        rhsHasBeenSet: rhs.FaceGenFaceClamp_IsSet,
                        defItem: def?.FaceGenFaceClamp ?? default(Int32),
                        defHasBeenSet: def?.FaceGenFaceClamp_IsSet ?? false,
                        outRhsItem: out var rhsFaceGenFaceClampItem,
                        outDefItem: out var defFaceGenFaceClampItem))
                    {
                        item.FaceGenFaceClamp = rhsFaceGenFaceClampItem;
                    }
                    else
                    {
                        item.FaceGenFaceClamp_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RaceStats.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.RaceStats);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.RaceStats,
                        rhsHasBeenSet: rhs.RaceStats_IsSet,
                        defItem: def?.RaceStats,
                        defHasBeenSet: def?.RaceStats_IsSet ?? false,
                        outRhsItem: out var rhsRaceStatsItem,
                        outDefItem: out var defRaceStatsItem))
                    {
                        switch (copyMask?.RaceStats.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.RaceStats = rhsRaceStatsItem;
                                break;
                            case CopyOption.CopyIn:
                                RaceStatsGenderedCommon.CopyFieldsFrom(
                                    item: item.RaceStats,
                                    rhs: rhs.RaceStats,
                                    def: def?.RaceStats,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.RaceStats.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.RaceStats = RaceStatsGendered.Copy(
                                    rhsRaceStatsItem,
                                    copyMask?.RaceStats?.Specific,
                                    def: defRaceStatsItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.RaceStats?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.RaceStats_Set(
                            item: default(RaceStatsGendered),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FaceData.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceData);
                try
                {
                    item.FaceData.SetToWithDefault(
                        rhs: rhs.FaceData,
                        def: def?.FaceData,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.FaceData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return FacePart.Copy(
                                        r,
                                        copyMask?.FaceData?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.FaceData.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BodyData.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.BodyData);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.BodyData,
                        rhsHasBeenSet: rhs.BodyData_IsSet,
                        defItem: def?.BodyData,
                        defHasBeenSet: def?.BodyData_IsSet ?? false,
                        outRhsItem: out var rhsBodyDataItem,
                        outDefItem: out var defBodyDataItem))
                    {
                        switch (copyMask?.BodyData.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.BodyData = rhsBodyDataItem;
                                break;
                            case CopyOption.CopyIn:
                                GenderedBodyDataCommon.CopyFieldsFrom(
                                    item: item.BodyData,
                                    rhs: rhs.BodyData,
                                    def: def?.BodyData,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.BodyData.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.BodyData = GenderedBodyData.Copy(
                                    rhsBodyDataItem,
                                    copyMask?.BodyData?.Specific,
                                    def: defBodyDataItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.BodyData?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.BodyData_Set(
                            item: default(GenderedBodyData),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Hairs != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                try
                {
                    item.Hairs.SetToWithDefault(
                        rhs.Hairs,
                        def?.Hairs);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Eyes != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                try
                {
                    item.Eyes.SetToWithDefault(
                        rhs.Eyes,
                        def?.Eyes);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FaceGenData.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceGenData);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FaceGenData,
                        rhsHasBeenSet: rhs.FaceGenData_IsSet,
                        defItem: def?.FaceGenData,
                        defHasBeenSet: def?.FaceGenData_IsSet ?? false,
                        outRhsItem: out var rhsFaceGenDataItem,
                        outDefItem: out var defFaceGenDataItem))
                    {
                        switch (copyMask?.FaceGenData.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.FaceGenData = rhsFaceGenDataItem;
                                break;
                            case CopyOption.CopyIn:
                                FaceGenDataCommon.CopyFieldsFrom(
                                    item: item.FaceGenData,
                                    rhs: rhs.FaceGenData,
                                    def: def?.FaceGenData,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.FaceGenData.Specific,
                                    cmds: cmds);
                                break;
                            case CopyOption.MakeCopy:
                                item.FaceGenData = FaceGenData.Copy(
                                    rhsFaceGenDataItem,
                                    copyMask?.FaceGenData?.Specific,
                                    def: defFaceGenDataItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.FaceGenData?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.FaceGenData_Set(
                            item: default(FaceGenData),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Unknown ?? true)
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Unknown);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Unknown,
                        rhsHasBeenSet: rhs.Unknown_IsSet,
                        defItem: def?.Unknown ?? default(Byte[]),
                        defHasBeenSet: def?.Unknown_IsSet ?? false,
                        outRhsItem: out var rhsUnknownItem,
                        outDefItem: out var defUnknownItem))
                    {
                        item.Unknown = rhsUnknownItem;
                    }
                    else
                    {
                        item.Unknown_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRace obj,
            NotifyingFireParameters cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Race_FieldIndex.Name:
                    obj.Name_IsSet = on;
                    break;
                case Race_FieldIndex.Description:
                    obj.Description_IsSet = on;
                    break;
                case Race_FieldIndex.Spells:
                    obj.Spells.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Relations:
                    obj.Relations.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Voices:
                    obj.Voices_IsSet = on;
                    break;
                case Race_FieldIndex.DefaultHair:
                    obj.DefaultHair_IsSet = on;
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    obj.DefaultHairColor_IsSet = on;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    obj.FaceGenMainClamp_IsSet = on;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    obj.FaceGenFaceClamp_IsSet = on;
                    break;
                case Race_FieldIndex.RaceStats:
                    obj.RaceStats_IsSet = on;
                    break;
                case Race_FieldIndex.FaceData:
                    obj.FaceData.HasBeenSet = on;
                    break;
                case Race_FieldIndex.BodyData:
                    obj.BodyData_IsSet = on;
                    break;
                case Race_FieldIndex.Hairs:
                    obj.Hairs.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Eyes:
                    obj.Eyes.HasBeenSet = on;
                    break;
                case Race_FieldIndex.FaceGenData:
                    obj.FaceGenData_IsSet = on;
                    break;
                case Race_FieldIndex.Unknown:
                    obj.Unknown_IsSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRace obj,
            NotifyingUnsetParameters cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    obj.Name_Unset();
                    break;
                case Race_FieldIndex.Description:
                    obj.Description_Unset();
                    break;
                case Race_FieldIndex.Spells:
                    obj.Spells.Unset();
                    break;
                case Race_FieldIndex.Relations:
                    obj.Relations.Unset();
                    break;
                case Race_FieldIndex.SkillBoosts:
                    obj.SkillBoosts.Unset();
                    break;
                case Race_FieldIndex.Fluff:
                    obj.Fluff = default(Byte[]);
                    break;
                case Race_FieldIndex.MaleHeight:
                    obj.MaleHeight = default(Single);
                    break;
                case Race_FieldIndex.FemaleHeight:
                    obj.FemaleHeight = default(Single);
                    break;
                case Race_FieldIndex.MaleWeight:
                    obj.MaleWeight = default(Single);
                    break;
                case Race_FieldIndex.FemaleWeight:
                    obj.FemaleWeight = default(Single);
                    break;
                case Race_FieldIndex.Flags:
                    obj.Flags = default(Race.Flag);
                    break;
                case Race_FieldIndex.Voices:
                    obj.Voices_Unset();
                    break;
                case Race_FieldIndex.DefaultHair:
                    obj.DefaultHair_Unset();
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    obj.DefaultHairColor_Unset();
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    obj.FaceGenMainClamp_Unset();
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    obj.FaceGenFaceClamp_Unset();
                    break;
                case Race_FieldIndex.RaceStats:
                    obj.RaceStats_Unset();
                    break;
                case Race_FieldIndex.FaceData:
                    obj.FaceData.Unset();
                    break;
                case Race_FieldIndex.BodyData:
                    obj.BodyData_Unset();
                    break;
                case Race_FieldIndex.Hairs:
                    obj.Hairs.Unset();
                    break;
                case Race_FieldIndex.Eyes:
                    obj.Eyes.Unset();
                    break;
                case Race_FieldIndex.FaceGenData:
                    obj.FaceGenData_Unset();
                    break;
                case Race_FieldIndex.Unknown:
                    obj.Unknown_Unset();
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRace obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                    return true;
                case Race_FieldIndex.Name:
                    return obj.Name_IsSet;
                case Race_FieldIndex.Description:
                    return obj.Description_IsSet;
                case Race_FieldIndex.Spells:
                    return obj.Spells.HasBeenSet;
                case Race_FieldIndex.Relations:
                    return obj.Relations.HasBeenSet;
                case Race_FieldIndex.Voices:
                    return obj.Voices_IsSet;
                case Race_FieldIndex.DefaultHair:
                    return obj.DefaultHair_IsSet;
                case Race_FieldIndex.DefaultHairColor:
                    return obj.DefaultHairColor_IsSet;
                case Race_FieldIndex.FaceGenMainClamp:
                    return obj.FaceGenMainClamp_IsSet;
                case Race_FieldIndex.FaceGenFaceClamp:
                    return obj.FaceGenFaceClamp_IsSet;
                case Race_FieldIndex.RaceStats:
                    return obj.RaceStats_IsSet;
                case Race_FieldIndex.FaceData:
                    return obj.FaceData.HasBeenSet;
                case Race_FieldIndex.BodyData:
                    return obj.BodyData_IsSet;
                case Race_FieldIndex.Hairs:
                    return obj.Hairs.HasBeenSet;
                case Race_FieldIndex.Eyes:
                    return obj.Eyes.HasBeenSet;
                case Race_FieldIndex.FaceGenData:
                    return obj.FaceGenData_IsSet;
                case Race_FieldIndex.Unknown:
                    return obj.Unknown_IsSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceGetter obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return obj.Name;
                case Race_FieldIndex.Description:
                    return obj.Description;
                case Race_FieldIndex.Spells:
                    return obj.Spells;
                case Race_FieldIndex.Relations:
                    return obj.Relations;
                case Race_FieldIndex.SkillBoosts:
                    return obj.SkillBoosts;
                case Race_FieldIndex.Fluff:
                    return obj.Fluff;
                case Race_FieldIndex.MaleHeight:
                    return obj.MaleHeight;
                case Race_FieldIndex.FemaleHeight:
                    return obj.FemaleHeight;
                case Race_FieldIndex.MaleWeight:
                    return obj.MaleWeight;
                case Race_FieldIndex.FemaleWeight:
                    return obj.FemaleWeight;
                case Race_FieldIndex.Flags:
                    return obj.Flags;
                case Race_FieldIndex.Voices:
                    return obj.Voices;
                case Race_FieldIndex.DefaultHair:
                    return obj.DefaultHair;
                case Race_FieldIndex.DefaultHairColor:
                    return obj.DefaultHairColor;
                case Race_FieldIndex.FaceGenMainClamp:
                    return obj.FaceGenMainClamp;
                case Race_FieldIndex.FaceGenFaceClamp:
                    return obj.FaceGenFaceClamp;
                case Race_FieldIndex.RaceStats:
                    return obj.RaceStats;
                case Race_FieldIndex.FaceData:
                    return obj.FaceData;
                case Race_FieldIndex.BodyData:
                    return obj.BodyData;
                case Race_FieldIndex.Hairs:
                    return obj.Hairs;
                case Race_FieldIndex.Eyes:
                    return obj.Eyes;
                case Race_FieldIndex.FaceGenData:
                    return obj.FaceGenData;
                case Race_FieldIndex.Unknown:
                    return obj.Unknown;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRace item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Unset();
            item.Description_Unset();
            item.Spells.Unset();
            item.Relations.Unset();
            item.SkillBoosts.Unset();
            item.Fluff = default(Byte[]);
            item.MaleHeight = default(Single);
            item.FemaleHeight = default(Single);
            item.MaleWeight = default(Single);
            item.FemaleWeight = default(Single);
            item.Flags = default(Race.Flag);
            item.Voices_Unset();
            item.DefaultHair_Unset();
            item.DefaultHairColor_Unset();
            item.FaceGenMainClamp_Unset();
            item.FaceGenFaceClamp_Unset();
            item.RaceStats_Unset();
            item.FaceData.Unset();
            item.BodyData_Unset();
            item.Hairs.Unset();
            item.Eyes.Unset();
            item.FaceGenData_Unset();
            item.Unknown_Unset();
        }

        public static Race_Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Race_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && object.Equals(item.Name, rhs.Name);
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && object.Equals(item.Description, rhs.Description);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SkillBoosts = item.SkillBoosts.CollectionEqualsHelper(
                rhs.SkillBoosts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Fluff = item.Fluff.EqualsFast(rhs.Fluff);
            ret.MaleHeight = item.MaleHeight.EqualsWithin(rhs.MaleHeight);
            ret.FemaleHeight = item.FemaleHeight.EqualsWithin(rhs.FemaleHeight);
            ret.MaleWeight = item.MaleWeight.EqualsWithin(rhs.MaleWeight);
            ret.FemaleWeight = item.FemaleWeight.EqualsWithin(rhs.FemaleWeight);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Voices = EqualsMaskHelper.EqualsHelper(
                item.Voices_IsSet,
                rhs.Voices_IsSet,
                item.Voices,
                rhs.Voices,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.DefaultHair = EqualsMaskHelper.EqualsHelper(
                item.DefaultHair_IsSet,
                rhs.DefaultHair_IsSet,
                item.DefaultHair,
                rhs.DefaultHair,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.DefaultHairColor = item.DefaultHairColor_IsSet == rhs.DefaultHairColor_IsSet && item.DefaultHairColor == rhs.DefaultHairColor;
            ret.FaceGenMainClamp = item.FaceGenMainClamp_IsSet == rhs.FaceGenMainClamp_IsSet && item.FaceGenMainClamp == rhs.FaceGenMainClamp;
            ret.FaceGenFaceClamp = item.FaceGenFaceClamp_IsSet == rhs.FaceGenFaceClamp_IsSet && item.FaceGenFaceClamp == rhs.FaceGenFaceClamp;
            ret.RaceStats = EqualsMaskHelper.EqualsHelper(
                item.RaceStats_IsSet,
                rhs.RaceStats_IsSet,
                item.RaceStats,
                rhs.RaceStats,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.FaceData = item.FaceData.CollectionEqualsHelper(
                rhs.FaceData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyData = EqualsMaskHelper.EqualsHelper(
                item.BodyData_IsSet,
                rhs.BodyData_IsSet,
                item.BodyData,
                rhs.BodyData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Hairs = item.Hairs.CollectionEqualsHelper(
                rhs.Hairs,
                (l, r) => object.Equals(l, r),
                include);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.FaceGenData = EqualsMaskHelper.EqualsHelper(
                item.FaceGenData_IsSet,
                rhs.FaceGenData_IsSet,
                item.FaceGenData,
                rhs.FaceGenData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Unknown = item.Unknown_IsSet == rhs.Unknown_IsSet && item.Unknown.EqualsFast(rhs.Unknown);
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRaceGetter item,
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceGetter item,
            FileGeneration fg,
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Race)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Race)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Spells)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Relations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SkillBoosts?.Overall ?? true)
                {
                    fg.AppendLine("SkillBoosts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SkillBoosts)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.MaleHeight ?? true)
                {
                    fg.AppendLine($"MaleHeight => {item.MaleHeight}");
                }
                if (printMask?.FemaleHeight ?? true)
                {
                    fg.AppendLine($"FemaleHeight => {item.FemaleHeight}");
                }
                if (printMask?.MaleWeight ?? true)
                {
                    fg.AppendLine($"MaleWeight => {item.MaleWeight}");
                }
                if (printMask?.FemaleWeight ?? true)
                {
                    fg.AppendLine($"FemaleWeight => {item.FemaleWeight}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Voices?.Overall ?? true)
                {
                    item.Voices?.ToString(fg, "Voices");
                }
                if (printMask?.DefaultHair?.Overall ?? true)
                {
                    item.DefaultHair?.ToString(fg, "DefaultHair");
                }
                if (printMask?.DefaultHairColor ?? true)
                {
                    fg.AppendLine($"DefaultHairColor => {item.DefaultHairColor}");
                }
                if (printMask?.FaceGenMainClamp ?? true)
                {
                    fg.AppendLine($"FaceGenMainClamp => {item.FaceGenMainClamp}");
                }
                if (printMask?.FaceGenFaceClamp ?? true)
                {
                    fg.AppendLine($"FaceGenFaceClamp => {item.FaceGenFaceClamp}");
                }
                if (printMask?.RaceStats?.Overall ?? true)
                {
                    item.RaceStats?.ToString(fg, "RaceStats");
                }
                if (printMask?.FaceData?.Overall ?? true)
                {
                    fg.AppendLine("FaceData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.FaceData)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.BodyData?.Overall ?? true)
                {
                    item.BodyData?.ToString(fg, "BodyData");
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    fg.AppendLine("Hairs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Hairs)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Eyes)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FaceGenData?.Overall ?? true)
                {
                    item.FaceGenData?.ToString(fg, "FaceGenData");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {item.Unknown}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceGetter item,
            Race_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            if (checkMask.Spells.Overall.HasValue && checkMask.Spells.Overall.Value != item.Spells.HasBeenSet) return false;
            if (checkMask.Relations.Overall.HasValue && checkMask.Relations.Overall.Value != item.Relations.HasBeenSet) return false;
            if (checkMask.SkillBoosts.Overall.HasValue && checkMask.SkillBoosts.Overall.Value != item.SkillBoosts.HasBeenSet) return false;
            if (checkMask.Voices.Overall.HasValue && checkMask.Voices.Overall.Value != item.Voices_IsSet) return false;
            if (checkMask.Voices.Specific != null && (item.Voices == null || !item.Voices.HasBeenSet(checkMask.Voices.Specific))) return false;
            if (checkMask.DefaultHair.Overall.HasValue && checkMask.DefaultHair.Overall.Value != item.DefaultHair_IsSet) return false;
            if (checkMask.DefaultHair.Specific != null && (item.DefaultHair == null || !item.DefaultHair.HasBeenSet(checkMask.DefaultHair.Specific))) return false;
            if (checkMask.DefaultHairColor.HasValue && checkMask.DefaultHairColor.Value != item.DefaultHairColor_IsSet) return false;
            if (checkMask.FaceGenMainClamp.HasValue && checkMask.FaceGenMainClamp.Value != item.FaceGenMainClamp_IsSet) return false;
            if (checkMask.FaceGenFaceClamp.HasValue && checkMask.FaceGenFaceClamp.Value != item.FaceGenFaceClamp_IsSet) return false;
            if (checkMask.RaceStats.Overall.HasValue && checkMask.RaceStats.Overall.Value != item.RaceStats_IsSet) return false;
            if (checkMask.RaceStats.Specific != null && (item.RaceStats == null || !item.RaceStats.HasBeenSet(checkMask.RaceStats.Specific))) return false;
            if (checkMask.FaceData.Overall.HasValue && checkMask.FaceData.Overall.Value != item.FaceData.HasBeenSet) return false;
            if (checkMask.BodyData.Overall.HasValue && checkMask.BodyData.Overall.Value != item.BodyData_IsSet) return false;
            if (checkMask.BodyData.Specific != null && (item.BodyData == null || !item.BodyData.HasBeenSet(checkMask.BodyData.Specific))) return false;
            if (checkMask.Hairs.Overall.HasValue && checkMask.Hairs.Overall.Value != item.Hairs.HasBeenSet) return false;
            if (checkMask.Eyes.Overall.HasValue && checkMask.Eyes.Overall.Value != item.Eyes.HasBeenSet) return false;
            if (checkMask.FaceGenData.Overall.HasValue && checkMask.FaceGenData.Overall.Value != item.FaceGenData_IsSet) return false;
            if (checkMask.FaceGenData.Specific != null && (item.FaceGenData == null || !item.FaceGenData.HasBeenSet(checkMask.FaceGenData.Specific))) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_IsSet) return false;
            return true;
        }

        public static Race_Mask<bool> GetHasBeenSetMask(IRaceGetter item)
        {
            var ret = new Race_Mask<bool>();
            ret.Name = item.Name_IsSet;
            ret.Description = item.Description_IsSet;
            ret.Spells = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Spells.HasBeenSet, null);
            ret.Relations = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RaceRelation_Mask<bool>>>>(item.Relations.HasBeenSet, item.Relations.WithIndex().Select((i) => new MaskItemIndexed<bool, RaceRelation_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            ret.SkillBoosts = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, SkillBoost_Mask<bool>>>>(item.SkillBoosts.HasBeenSet, item.SkillBoosts.WithIndex().Select((i) => new MaskItemIndexed<bool, SkillBoost_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            ret.Fluff = true;
            ret.MaleHeight = true;
            ret.FemaleHeight = true;
            ret.MaleWeight = true;
            ret.FemaleWeight = true;
            ret.Flags = true;
            ret.Voices = new MaskItem<bool, RaceVoices_Mask<bool>>(item.Voices_IsSet, RaceVoicesCommon.GetHasBeenSetMask(item.Voices));
            ret.DefaultHair = new MaskItem<bool, RaceHair_Mask<bool>>(item.DefaultHair_IsSet, RaceHairCommon.GetHasBeenSetMask(item.DefaultHair));
            ret.DefaultHairColor = item.DefaultHairColor_IsSet;
            ret.FaceGenMainClamp = item.FaceGenMainClamp_IsSet;
            ret.FaceGenFaceClamp = item.FaceGenFaceClamp_IsSet;
            ret.RaceStats = new MaskItem<bool, RaceStatsGendered_Mask<bool>>(item.RaceStats_IsSet, RaceStatsGenderedCommon.GetHasBeenSetMask(item.RaceStats));
            ret.FaceData = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, FacePart_Mask<bool>>>>(item.FaceData.HasBeenSet, item.FaceData.WithIndex().Select((i) => new MaskItemIndexed<bool, FacePart_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            ret.BodyData = new MaskItem<bool, GenderedBodyData_Mask<bool>>(item.BodyData_IsSet, GenderedBodyDataCommon.GetHasBeenSetMask(item.BodyData));
            ret.Hairs = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Hairs.HasBeenSet, null);
            ret.Eyes = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Eyes.HasBeenSet, null);
            ret.FaceGenData = new MaskItem<bool, FaceGenData_Mask<bool>>(item.FaceGenData_IsSet, FaceGenDataCommon.GetHasBeenSetMask(item.FaceGenData));
            ret.Unknown = item.Unknown_IsSet;
            return ret;
        }

        public static Race_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Race item,
            bool doMasks,
            out Race_ErrorMask errorMask,
            Race_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Race item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Race");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Race");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this IRaceGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            MajorRecordCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Race_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Race_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.Spells.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Spells) ?? true))
            {
                ListXmlTranslation<FormIDSetLink<Spell>>.Instance.Write(
                    node: node,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)Race_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Spells),
                    transl: (XElement subNode, FormIDSetLink<Spell> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Relations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Relations) ?? true))
            {
                ListXmlTranslation<RaceRelation>.Instance.Write(
                    node: node,
                    name: nameof(item.Relations),
                    item: item.Relations,
                    fieldIndex: (int)Race_FieldIndex.Relations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Relations),
                    transl: (XElement subNode, RaceRelation subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<RaceRelation>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoosts) ?? true))
            {
                ListXmlTranslation<SkillBoost>.Instance.Write(
                    node: node,
                    name: nameof(item.SkillBoosts),
                    item: item.SkillBoosts,
                    fieldIndex: (int)Race_FieldIndex.SkillBoosts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoosts),
                    transl: (XElement subNode, SkillBoost subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<SkillBoost>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.Fluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fluff),
                    item: item.Fluff,
                    fieldIndex: (int)Race_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.MaleHeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaleHeight),
                    item: item.MaleHeight,
                    fieldIndex: (int)Race_FieldIndex.MaleHeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.FemaleHeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FemaleHeight),
                    item: item.FemaleHeight,
                    fieldIndex: (int)Race_FieldIndex.FemaleHeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.MaleWeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaleWeight),
                    item: item.MaleWeight,
                    fieldIndex: (int)Race_FieldIndex.MaleWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.FemaleWeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FemaleWeight),
                    item: item.FemaleWeight,
                    fieldIndex: (int)Race_FieldIndex.FemaleWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Race.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Race_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.Voices_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                LoquiXmlTranslation<RaceVoices>.Instance.Write(
                    node: node,
                    item: item.Voices,
                    name: nameof(item.Voices),
                    fieldIndex: (int)Race_FieldIndex.Voices,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Voices));
            }
            if (item.DefaultHair_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHair) ?? true))
            {
                LoquiXmlTranslation<RaceHair>.Instance.Write(
                    node: node,
                    item: item.DefaultHair,
                    name: nameof(item.DefaultHair),
                    fieldIndex: (int)Race_FieldIndex.DefaultHair,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.DefaultHair));
            }
            if (item.DefaultHairColor_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColor) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DefaultHairColor),
                    item: item.DefaultHairColor,
                    fieldIndex: (int)Race_FieldIndex.DefaultHairColor,
                    errorMask: errorMask);
            }
            if (item.FaceGenMainClamp_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenMainClamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenMainClamp),
                    item: item.FaceGenMainClamp,
                    fieldIndex: (int)Race_FieldIndex.FaceGenMainClamp,
                    errorMask: errorMask);
            }
            if (item.FaceGenFaceClamp_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenFaceClamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenFaceClamp),
                    item: item.FaceGenFaceClamp,
                    fieldIndex: (int)Race_FieldIndex.FaceGenFaceClamp,
                    errorMask: errorMask);
            }
            if (item.RaceStats_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.RaceStats) ?? true))
            {
                LoquiXmlTranslation<RaceStatsGendered>.Instance.Write(
                    node: node,
                    item: item.RaceStats,
                    name: nameof(item.RaceStats),
                    fieldIndex: (int)Race_FieldIndex.RaceStats,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.RaceStats));
            }
            if (item.FaceData.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceData) ?? true))
            {
                ListXmlTranslation<FacePart>.Instance.Write(
                    node: node,
                    name: nameof(item.FaceData),
                    item: item.FaceData,
                    fieldIndex: (int)Race_FieldIndex.FaceData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceData),
                    transl: (XElement subNode, FacePart subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<FacePart>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.BodyData_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                LoquiXmlTranslation<GenderedBodyData>.Instance.Write(
                    node: node,
                    item: item.BodyData,
                    name: nameof(item.BodyData),
                    fieldIndex: (int)Race_FieldIndex.BodyData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.BodyData));
            }
            if (item.Hairs.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                ListXmlTranslation<FormIDLink<Hair>>.Instance.Write(
                    node: node,
                    name: nameof(item.Hairs),
                    item: item.Hairs,
                    fieldIndex: (int)Race_FieldIndex.Hairs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Hairs),
                    transl: (XElement subNode, FormIDLink<Hair> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.Eyes.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                ListXmlTranslation<FormIDLink<Eye>>.Instance.Write(
                    node: node,
                    name: nameof(item.Eyes),
                    item: item.Eyes,
                    fieldIndex: (int)Race_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Eyes),
                    transl: (XElement subNode, FormIDLink<Eye> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    }
                    );
            }
            if (item.FaceGenData_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenData) ?? true))
            {
                LoquiXmlTranslation<FaceGenData>.Instance.Write(
                    node: node,
                    item: item.FaceGenData,
                    name: nameof(item.FaceGenData),
                    fieldIndex: (int)Race_FieldIndex.FaceGenData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceGenData));
            }
            if (item.Unknown_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)Race_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this Race item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Race item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Spells);
                        if (ListXmlTranslation<FormIDSetLink<Spell>>.Instance.Parse(
                            node: node,
                            enumer: out var SpellsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Spells.SetTo(SpellsItem);
                        }
                        else
                        {
                            item.Spells.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Relations":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Relations);
                        if (ListXmlTranslation<RaceRelation>.Instance.Parse(
                            node: node,
                            enumer: out var RelationsItem,
                            transl: LoquiXmlTranslation<RaceRelation>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Relations.SetTo(RelationsItem);
                        }
                        else
                        {
                            item.Relations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoosts":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.SkillBoosts);
                        if (ListXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            enumer: out var SkillBoostsItem,
                            transl: LoquiXmlTranslation<SkillBoost>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SkillBoosts.SetTo(SkillBoostsItem);
                        }
                        else
                        {
                            item.SkillBoosts.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.Fluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleHeight":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.MaleHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MaleHeightParse,
                            errorMask: errorMask))
                        {
                            item.MaleHeight = MaleHeightParse;
                        }
                        else
                        {
                            item.MaleHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleHeight":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FemaleHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FemaleHeightParse,
                            errorMask: errorMask))
                        {
                            item.FemaleHeight = FemaleHeightParse;
                        }
                        else
                        {
                            item.FemaleHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.MaleWeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MaleWeightParse,
                            errorMask: errorMask))
                        {
                            item.MaleWeight = MaleWeightParse;
                        }
                        else
                        {
                            item.MaleWeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FemaleWeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FemaleWeightParse,
                            errorMask: errorMask))
                        {
                            item.FemaleWeight = FemaleWeightParse;
                        }
                        else
                        {
                            item.FemaleWeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Flags);
                        if (EnumXmlTranslation<Race.Flag>.Instance.Parse(
                            node: node,
                            item: out Race.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Race.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Voices":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Voices);
                        if (LoquiXmlTranslation<RaceVoices>.Instance.Parse(
                            node: node,
                            item: out RaceVoices VoicesParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Voices)))
                        {
                            item.Voices = VoicesParse;
                        }
                        else
                        {
                            item.Voices = default(RaceVoices);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultHair":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.DefaultHair);
                        if (LoquiXmlTranslation<RaceHair>.Instance.Parse(
                            node: node,
                            item: out RaceHair DefaultHairParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.DefaultHair)))
                        {
                            item.DefaultHair = DefaultHairParse;
                        }
                        else
                        {
                            item.DefaultHair = default(RaceHair);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultHairColor":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.DefaultHairColor);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte DefaultHairColorParse,
                            errorMask: errorMask))
                        {
                            item.DefaultHairColor = DefaultHairColorParse;
                        }
                        else
                        {
                            item.DefaultHairColor = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenMainClamp":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FaceGenMainClamp);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 FaceGenMainClampParse,
                            errorMask: errorMask))
                        {
                            item.FaceGenMainClamp = FaceGenMainClampParse;
                        }
                        else
                        {
                            item.FaceGenMainClamp = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenFaceClamp":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FaceGenFaceClamp);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 FaceGenFaceClampParse,
                            errorMask: errorMask))
                        {
                            item.FaceGenFaceClamp = FaceGenFaceClampParse;
                        }
                        else
                        {
                            item.FaceGenFaceClamp = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RaceStats":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.RaceStats);
                        if (LoquiXmlTranslation<RaceStatsGendered>.Instance.Parse(
                            node: node,
                            item: out RaceStatsGendered RaceStatsParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.RaceStats)))
                        {
                            item.RaceStats = RaceStatsParse;
                        }
                        else
                        {
                            item.RaceStats = default(RaceStatsGendered);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceData":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FaceData);
                        if (ListXmlTranslation<FacePart>.Instance.Parse(
                            node: node,
                            enumer: out var FaceDataItem,
                            transl: LoquiXmlTranslation<FacePart>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.FaceData.SetTo(FaceDataItem);
                        }
                        else
                        {
                            item.FaceData.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyData":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.BodyData);
                        if (LoquiXmlTranslation<GenderedBodyData>.Instance.Parse(
                            node: node,
                            item: out GenderedBodyData BodyDataParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.BodyData)))
                        {
                            item.BodyData = BodyDataParse;
                        }
                        else
                        {
                            item.BodyData = default(GenderedBodyData);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hairs":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                        if (ListXmlTranslation<FormIDLink<Hair>>.Instance.Parse(
                            node: node,
                            enumer: out var HairsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Hairs.SetTo(HairsItem);
                        }
                        else
                        {
                            item.Hairs.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                        if (ListXmlTranslation<FormIDLink<Eye>>.Instance.Parse(
                            node: node,
                            enumer: out var EyesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Eyes.SetTo(EyesItem);
                        }
                        else
                        {
                            item.Eyes.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenData":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FaceGenData);
                        if (LoquiXmlTranslation<FaceGenData>.Instance.Parse(
                            node: node,
                            item: out FaceGenData FaceGenDataParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceGenData)))
                        {
                            item.FaceGenData = FaceGenDataParse;
                        }
                        else
                        {
                            item.FaceGenData = default(FaceGenData);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Unknown);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] UnknownParse,
                            errorMask: errorMask))
                        {
                            item.Unknown = UnknownParse;
                        }
                        else
                        {
                            item.Unknown = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecordCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Race item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Race_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Race_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Race item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Race_Registration.RACE_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Race item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    fieldIndex: (int)Race_FieldIndex.Name,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Race_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    fieldIndex: (int)Race_FieldIndex.Description,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Race_Registration.DESC_HEADER),
                    nullable: false);
            }
            if (item.Spells.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Spell>>.Instance.Write(
                    writer: writer,
                    items: item.Spells,
                    fieldIndex: (int)Race_FieldIndex.Spells,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, FormIDSetLink<Spell> subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            header: recordTypeConverter.ConvertToCustom(Race_Registration.SPLO_HEADER),
                            nullable: false,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.Relations.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<RaceRelation>.Instance.Write(
                    writer: writer,
                    items: item.Relations,
                    fieldIndex: (int)Race_FieldIndex.Relations,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, RaceRelation subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<RaceRelation>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.DATADataTypeState.HasFlag(Race.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Race_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<SkillBoost>.Instance.Write(
                        writer: writer,
                        items: item.SkillBoosts,
                        fieldIndex: (int)Race_FieldIndex.SkillBoosts,
                        errorMask: errorMask,
                        transl: (MutagenWriter subWriter, SkillBoost subItem, ErrorMaskBuilder listErrorMask) =>
                        {
                            LoquiBinaryTranslation<SkillBoost>.Instance.Write(
                                writer: subWriter,
                                item: subItem,
                                errorMask: listErrorMask,
                                masterReferences: masterReferences);
                        }
                        );
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fluff,
                        fieldIndex: (int)Race_FieldIndex.Fluff,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MaleHeight,
                        fieldIndex: (int)Race_FieldIndex.MaleHeight,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FemaleHeight,
                        fieldIndex: (int)Race_FieldIndex.FemaleHeight,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MaleWeight,
                        fieldIndex: (int)Race_FieldIndex.MaleWeight,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FemaleWeight,
                        fieldIndex: (int)Race_FieldIndex.FemaleWeight,
                        errorMask: errorMask);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Race.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 2,
                        fieldIndex: (int)Race_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if (item.Voices_IsSet)
            {
                LoquiBinaryTranslation<RaceVoices>.Instance.Write(
                    writer: writer,
                    item: item.Voices,
                    fieldIndex: (int)Race_FieldIndex.Voices,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.DefaultHair_IsSet)
            {
                LoquiBinaryTranslation<RaceHair>.Instance.Write(
                    writer: writer,
                    item: item.DefaultHair,
                    fieldIndex: (int)Race_FieldIndex.DefaultHair,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.DefaultHairColor_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DefaultHairColor,
                    fieldIndex: (int)Race_FieldIndex.DefaultHairColor,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Race_Registration.CNAM_HEADER),
                    nullable: false);
            }
            if (item.FaceGenMainClamp_IsSet)
            {
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FaceGenMainClamp,
                    fieldIndex: (int)Race_FieldIndex.FaceGenMainClamp,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Race_Registration.PNAM_HEADER),
                    nullable: false);
            }
            if (item.FaceGenFaceClamp_IsSet)
            {
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FaceGenFaceClamp,
                    fieldIndex: (int)Race_FieldIndex.FaceGenFaceClamp,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Race_Registration.UNAM_HEADER),
                    nullable: false);
            }
            if (item.RaceStats_IsSet)
            {
                LoquiBinaryTranslation<RaceStatsGendered>.Instance.Write(
                    writer: writer,
                    item: item.RaceStats,
                    fieldIndex: (int)Race_FieldIndex.RaceStats,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.FaceData.HasBeenSet)
            {
                using (HeaderExport.ExportHeader(writer, Race_Registration.NAM0_HEADER, ObjectType.Subrecord)) { }
                Mutagen.Bethesda.Binary.ListBinaryTranslation<FacePart>.Instance.Write(
                    writer: writer,
                    items: item.FaceData,
                    fieldIndex: (int)Race_FieldIndex.FaceData,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, FacePart subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<FacePart>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.BodyData_IsSet)
            {
                using (HeaderExport.ExportHeader(writer, Race_Registration.NAM1_HEADER, ObjectType.Subrecord)) { }
                LoquiBinaryTranslation<GenderedBodyData>.Instance.Write(
                    writer: writer,
                    item: item.BodyData,
                    fieldIndex: (int)Race_FieldIndex.BodyData,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.Hairs.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Hair>>.Instance.Write(
                    writer: writer,
                    items: item.Hairs,
                    fieldIndex: (int)Race_FieldIndex.Hairs,
                    recordType: Race_Registration.HNAM_HEADER,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, FormIDLink<Hair> subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.Eyes.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Eye>>.Instance.Write(
                    writer: writer,
                    items: item.Eyes,
                    fieldIndex: (int)Race_FieldIndex.Eyes,
                    recordType: Race_Registration.ENAM_HEADER,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, FormIDLink<Eye> subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
            if (item.FaceGenData_IsSet)
            {
                LoquiBinaryTranslation<FaceGenData>.Instance.Write(
                    writer: writer,
                    item: item.FaceGenData,
                    fieldIndex: (int)Race_FieldIndex.FaceGenData,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
            if (item.Unknown_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown,
                    fieldIndex: (int)Race_FieldIndex.Unknown,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(Race_Registration.SNAM_HEADER),
                    nullable: false);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Race_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Race_Mask<T>>
    {
        #region Ctors
        public Race_Mask()
        {
        }

        public Race_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Description = initialValue;
            this.Spells = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Relations = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RaceRelation_Mask<T>>>>(initialValue, null);
            this.SkillBoosts = new MaskItem<T, IEnumerable<MaskItemIndexed<T, SkillBoost_Mask<T>>>>(initialValue, null);
            this.Fluff = initialValue;
            this.MaleHeight = initialValue;
            this.FemaleHeight = initialValue;
            this.MaleWeight = initialValue;
            this.FemaleWeight = initialValue;
            this.Flags = initialValue;
            this.Voices = new MaskItem<T, RaceVoices_Mask<T>>(initialValue, new RaceVoices_Mask<T>(initialValue));
            this.DefaultHair = new MaskItem<T, RaceHair_Mask<T>>(initialValue, new RaceHair_Mask<T>(initialValue));
            this.DefaultHairColor = initialValue;
            this.FaceGenMainClamp = initialValue;
            this.FaceGenFaceClamp = initialValue;
            this.RaceStats = new MaskItem<T, RaceStatsGendered_Mask<T>>(initialValue, new RaceStatsGendered_Mask<T>(initialValue));
            this.FaceData = new MaskItem<T, IEnumerable<MaskItemIndexed<T, FacePart_Mask<T>>>>(initialValue, null);
            this.BodyData = new MaskItem<T, GenderedBodyData_Mask<T>>(initialValue, new GenderedBodyData_Mask<T>(initialValue));
            this.Hairs = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.Eyes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.FaceGenData = new MaskItem<T, FaceGenData_Mask<T>>(initialValue, new FaceGenData_Mask<T>(initialValue));
            this.Unknown = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public T Description;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Spells;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, RaceRelation_Mask<T>>>> Relations;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, SkillBoost_Mask<T>>>> SkillBoosts;
        public T Fluff;
        public T MaleHeight;
        public T FemaleHeight;
        public T MaleWeight;
        public T FemaleWeight;
        public T Flags;
        public MaskItem<T, RaceVoices_Mask<T>> Voices { get; set; }
        public MaskItem<T, RaceHair_Mask<T>> DefaultHair { get; set; }
        public T DefaultHairColor;
        public T FaceGenMainClamp;
        public T FaceGenFaceClamp;
        public MaskItem<T, RaceStatsGendered_Mask<T>> RaceStats { get; set; }
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, FacePart_Mask<T>>>> FaceData;
        public MaskItem<T, GenderedBodyData_Mask<T>> BodyData { get; set; }
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Hairs;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Eyes;
        public MaskItem<T, FaceGenData_Mask<T>> FaceGenData { get; set; }
        public T Unknown;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Race_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Race_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Relations, rhs.Relations)) return false;
            if (!object.Equals(this.SkillBoosts, rhs.SkillBoosts)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.MaleHeight, rhs.MaleHeight)) return false;
            if (!object.Equals(this.FemaleHeight, rhs.FemaleHeight)) return false;
            if (!object.Equals(this.MaleWeight, rhs.MaleWeight)) return false;
            if (!object.Equals(this.FemaleWeight, rhs.FemaleWeight)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Voices, rhs.Voices)) return false;
            if (!object.Equals(this.DefaultHair, rhs.DefaultHair)) return false;
            if (!object.Equals(this.DefaultHairColor, rhs.DefaultHairColor)) return false;
            if (!object.Equals(this.FaceGenMainClamp, rhs.FaceGenMainClamp)) return false;
            if (!object.Equals(this.FaceGenFaceClamp, rhs.FaceGenFaceClamp)) return false;
            if (!object.Equals(this.RaceStats, rhs.RaceStats)) return false;
            if (!object.Equals(this.FaceData, rhs.FaceData)) return false;
            if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
            if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(this.FaceGenData, rhs.FaceGenData)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Relations?.GetHashCode());
            ret = ret.CombineHashCode(this.SkillBoosts?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleWeight?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleWeight?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Voices?.GetHashCode());
            ret = ret.CombineHashCode(this.DefaultHair?.GetHashCode());
            ret = ret.CombineHashCode(this.DefaultHairColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenMainClamp?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenFaceClamp?.GetHashCode());
            ret = ret.CombineHashCode(this.RaceStats?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceData?.GetHashCode());
            ret = ret.CombineHashCode(this.BodyData?.GetHashCode());
            ret = ret.CombineHashCode(this.Hairs?.GetHashCode());
            ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenData?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Description)) return false;
            if (this.Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (this.Spells.Specific != null)
                {
                    foreach (var item in this.Spells.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (this.Relations != null)
            {
                if (!eval(this.Relations.Overall)) return false;
                if (this.Relations.Specific != null)
                {
                    foreach (var item in this.Relations.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.SkillBoosts != null)
            {
                if (!eval(this.SkillBoosts.Overall)) return false;
                if (this.SkillBoosts.Specific != null)
                {
                    foreach (var item in this.SkillBoosts.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Fluff)) return false;
            if (!eval(this.MaleHeight)) return false;
            if (!eval(this.FemaleHeight)) return false;
            if (!eval(this.MaleWeight)) return false;
            if (!eval(this.FemaleWeight)) return false;
            if (!eval(this.Flags)) return false;
            if (Voices != null)
            {
                if (!eval(this.Voices.Overall)) return false;
                if (this.Voices.Specific != null && !this.Voices.Specific.AllEqual(eval)) return false;
            }
            if (DefaultHair != null)
            {
                if (!eval(this.DefaultHair.Overall)) return false;
                if (this.DefaultHair.Specific != null && !this.DefaultHair.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.DefaultHairColor)) return false;
            if (!eval(this.FaceGenMainClamp)) return false;
            if (!eval(this.FaceGenFaceClamp)) return false;
            if (RaceStats != null)
            {
                if (!eval(this.RaceStats.Overall)) return false;
                if (this.RaceStats.Specific != null && !this.RaceStats.Specific.AllEqual(eval)) return false;
            }
            if (this.FaceData != null)
            {
                if (!eval(this.FaceData.Overall)) return false;
                if (this.FaceData.Specific != null)
                {
                    foreach (var item in this.FaceData.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (BodyData != null)
            {
                if (!eval(this.BodyData.Overall)) return false;
                if (this.BodyData.Specific != null && !this.BodyData.Specific.AllEqual(eval)) return false;
            }
            if (this.Hairs != null)
            {
                if (!eval(this.Hairs.Overall)) return false;
                if (this.Hairs.Specific != null)
                {
                    foreach (var item in this.Hairs.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (this.Eyes != null)
            {
                if (!eval(this.Eyes.Overall)) return false;
                if (this.Eyes.Specific != null)
                {
                    foreach (var item in this.Eyes.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (FaceGenData != null)
            {
                if (!eval(this.FaceGenData.Overall)) return false;
                if (this.FaceGenData.Specific != null && !this.FaceGenData.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Unknown)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Race_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Race_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Race_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Description = eval(this.Description);
            if (Spells != null)
            {
                obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (Spells.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Spells.Specific = l;
                    foreach (var item in Spells.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            if (Relations != null)
            {
                obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RaceRelation_Mask<R>>>>();
                obj.Relations.Overall = eval(this.Relations.Overall);
                if (Relations.Specific != null)
                {
                    List<MaskItemIndexed<R, RaceRelation_Mask<R>>> l = new List<MaskItemIndexed<R, RaceRelation_Mask<R>>>();
                    obj.Relations.Specific = l;
                    foreach (var item in Relations.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, RaceRelation_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, RaceRelation_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (SkillBoosts != null)
            {
                obj.SkillBoosts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SkillBoost_Mask<R>>>>();
                obj.SkillBoosts.Overall = eval(this.SkillBoosts.Overall);
                if (SkillBoosts.Specific != null)
                {
                    List<MaskItemIndexed<R, SkillBoost_Mask<R>>> l = new List<MaskItemIndexed<R, SkillBoost_Mask<R>>>();
                    obj.SkillBoosts.Specific = l;
                    foreach (var item in SkillBoosts.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, SkillBoost_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, SkillBoost_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Fluff = eval(this.Fluff);
            obj.MaleHeight = eval(this.MaleHeight);
            obj.FemaleHeight = eval(this.FemaleHeight);
            obj.MaleWeight = eval(this.MaleWeight);
            obj.FemaleWeight = eval(this.FemaleWeight);
            obj.Flags = eval(this.Flags);
            if (this.Voices != null)
            {
                obj.Voices = new MaskItem<R, RaceVoices_Mask<R>>();
                obj.Voices.Overall = eval(this.Voices.Overall);
                if (this.Voices.Specific != null)
                {
                    obj.Voices.Specific = this.Voices.Specific.Translate(eval);
                }
            }
            if (this.DefaultHair != null)
            {
                obj.DefaultHair = new MaskItem<R, RaceHair_Mask<R>>();
                obj.DefaultHair.Overall = eval(this.DefaultHair.Overall);
                if (this.DefaultHair.Specific != null)
                {
                    obj.DefaultHair.Specific = this.DefaultHair.Specific.Translate(eval);
                }
            }
            obj.DefaultHairColor = eval(this.DefaultHairColor);
            obj.FaceGenMainClamp = eval(this.FaceGenMainClamp);
            obj.FaceGenFaceClamp = eval(this.FaceGenFaceClamp);
            if (this.RaceStats != null)
            {
                obj.RaceStats = new MaskItem<R, RaceStatsGendered_Mask<R>>();
                obj.RaceStats.Overall = eval(this.RaceStats.Overall);
                if (this.RaceStats.Specific != null)
                {
                    obj.RaceStats.Specific = this.RaceStats.Specific.Translate(eval);
                }
            }
            if (FaceData != null)
            {
                obj.FaceData = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FacePart_Mask<R>>>>();
                obj.FaceData.Overall = eval(this.FaceData.Overall);
                if (FaceData.Specific != null)
                {
                    List<MaskItemIndexed<R, FacePart_Mask<R>>> l = new List<MaskItemIndexed<R, FacePart_Mask<R>>>();
                    obj.FaceData.Specific = l;
                    foreach (var item in FaceData.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, FacePart_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, FacePart_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (this.BodyData != null)
            {
                obj.BodyData = new MaskItem<R, GenderedBodyData_Mask<R>>();
                obj.BodyData.Overall = eval(this.BodyData.Overall);
                if (this.BodyData.Specific != null)
                {
                    obj.BodyData.Specific = this.BodyData.Specific.Translate(eval);
                }
            }
            if (Hairs != null)
            {
                obj.Hairs = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Hairs.Overall = eval(this.Hairs.Overall);
                if (Hairs.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Hairs.Specific = l;
                    foreach (var item in Hairs.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            if (Eyes != null)
            {
                obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Eyes.Overall = eval(this.Eyes.Overall);
                if (Eyes.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Eyes.Specific = l;
                    foreach (var item in Eyes.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            if (this.FaceGenData != null)
            {
                obj.FaceGenData = new MaskItem<R, FaceGenData_Mask<R>>();
                obj.FaceGenData.Overall = eval(this.FaceGenData.Overall);
                if (this.FaceGenData.Specific != null)
                {
                    obj.FaceGenData.Specific = this.FaceGenData.Specific.Translate(eval);
                }
            }
            obj.Unknown = eval(this.Unknown);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Spells.Specific = null;
            this.Relations.Specific = null;
            this.SkillBoosts.Specific = null;
            this.FaceData.Specific = null;
            this.Hairs.Specific = null;
            this.Eyes.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Race_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Race_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Race_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Relations.Overall != null)
                        {
                            fg.AppendLine(Relations.Overall.ToString());
                        }
                        if (Relations.Specific != null)
                        {
                            foreach (var subItem in Relations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SkillBoosts?.Overall ?? true)
                {
                    fg.AppendLine("SkillBoosts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SkillBoosts.Overall != null)
                        {
                            fg.AppendLine(SkillBoosts.Overall.ToString());
                        }
                        if (SkillBoosts.Specific != null)
                        {
                            foreach (var subItem in SkillBoosts.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.MaleHeight ?? true)
                {
                    fg.AppendLine($"MaleHeight => {MaleHeight}");
                }
                if (printMask?.FemaleHeight ?? true)
                {
                    fg.AppendLine($"FemaleHeight => {FemaleHeight}");
                }
                if (printMask?.MaleWeight ?? true)
                {
                    fg.AppendLine($"MaleWeight => {MaleWeight}");
                }
                if (printMask?.FemaleWeight ?? true)
                {
                    fg.AppendLine($"FemaleWeight => {FemaleWeight}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Voices?.Overall ?? true)
                {
                    Voices?.ToString(fg);
                }
                if (printMask?.DefaultHair?.Overall ?? true)
                {
                    DefaultHair?.ToString(fg);
                }
                if (printMask?.DefaultHairColor ?? true)
                {
                    fg.AppendLine($"DefaultHairColor => {DefaultHairColor}");
                }
                if (printMask?.FaceGenMainClamp ?? true)
                {
                    fg.AppendLine($"FaceGenMainClamp => {FaceGenMainClamp}");
                }
                if (printMask?.FaceGenFaceClamp ?? true)
                {
                    fg.AppendLine($"FaceGenFaceClamp => {FaceGenFaceClamp}");
                }
                if (printMask?.RaceStats?.Overall ?? true)
                {
                    RaceStats?.ToString(fg);
                }
                if (printMask?.FaceData?.Overall ?? true)
                {
                    fg.AppendLine("FaceData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (FaceData.Overall != null)
                        {
                            fg.AppendLine(FaceData.Overall.ToString());
                        }
                        if (FaceData.Specific != null)
                        {
                            foreach (var subItem in FaceData.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.BodyData?.Overall ?? true)
                {
                    BodyData?.ToString(fg);
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    fg.AppendLine("Hairs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Hairs.Overall != null)
                        {
                            fg.AppendLine(Hairs.Overall.ToString());
                        }
                        if (Hairs.Specific != null)
                        {
                            foreach (var subItem in Hairs.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Eyes.Overall != null)
                        {
                            fg.AppendLine(Eyes.Overall.ToString());
                        }
                        if (Eyes.Specific != null)
                        {
                            foreach (var subItem in Eyes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FaceGenData?.Overall ?? true)
                {
                    FaceGenData?.ToString(fg);
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Race_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Race_ErrorMask>
    {
        #region Members
        public Exception Name;
        public Exception Description;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Spells;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RaceRelation_ErrorMask>>> Relations;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>> SkillBoosts;
        public Exception Fluff;
        public Exception MaleHeight;
        public Exception FemaleHeight;
        public Exception MaleWeight;
        public Exception FemaleWeight;
        public Exception Flags;
        public MaskItem<Exception, RaceVoices_ErrorMask> Voices;
        public MaskItem<Exception, RaceHair_ErrorMask> DefaultHair;
        public Exception DefaultHairColor;
        public Exception FaceGenMainClamp;
        public Exception FaceGenFaceClamp;
        public MaskItem<Exception, RaceStatsGendered_ErrorMask> RaceStats;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>> FaceData;
        public MaskItem<Exception, GenderedBodyData_ErrorMask> BodyData;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Hairs;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Eyes;
        public MaskItem<Exception, FaceGenData_ErrorMask> FaceGenData;
        public Exception Unknown;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return Name;
                case Race_FieldIndex.Description:
                    return Description;
                case Race_FieldIndex.Spells:
                    return Spells;
                case Race_FieldIndex.Relations:
                    return Relations;
                case Race_FieldIndex.SkillBoosts:
                    return SkillBoosts;
                case Race_FieldIndex.Fluff:
                    return Fluff;
                case Race_FieldIndex.MaleHeight:
                    return MaleHeight;
                case Race_FieldIndex.FemaleHeight:
                    return FemaleHeight;
                case Race_FieldIndex.MaleWeight:
                    return MaleWeight;
                case Race_FieldIndex.FemaleWeight:
                    return FemaleWeight;
                case Race_FieldIndex.Flags:
                    return Flags;
                case Race_FieldIndex.Voices:
                    return Voices;
                case Race_FieldIndex.DefaultHair:
                    return DefaultHair;
                case Race_FieldIndex.DefaultHairColor:
                    return DefaultHairColor;
                case Race_FieldIndex.FaceGenMainClamp:
                    return FaceGenMainClamp;
                case Race_FieldIndex.FaceGenFaceClamp:
                    return FaceGenFaceClamp;
                case Race_FieldIndex.RaceStats:
                    return RaceStats;
                case Race_FieldIndex.FaceData:
                    return FaceData;
                case Race_FieldIndex.BodyData:
                    return BodyData;
                case Race_FieldIndex.Hairs:
                    return Hairs;
                case Race_FieldIndex.Eyes:
                    return Eyes;
                case Race_FieldIndex.FaceGenData:
                    return FaceGenData;
                case Race_FieldIndex.Unknown:
                    return Unknown;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Race_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Race_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Race_FieldIndex.Relations:
                    this.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RaceRelation_ErrorMask>>>(ex, null);
                    break;
                case Race_FieldIndex.SkillBoosts:
                    this.SkillBoosts = new MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>>(ex, null);
                    break;
                case Race_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case Race_FieldIndex.MaleHeight:
                    this.MaleHeight = ex;
                    break;
                case Race_FieldIndex.FemaleHeight:
                    this.FemaleHeight = ex;
                    break;
                case Race_FieldIndex.MaleWeight:
                    this.MaleWeight = ex;
                    break;
                case Race_FieldIndex.FemaleWeight:
                    this.FemaleWeight = ex;
                    break;
                case Race_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Race_FieldIndex.Voices:
                    this.Voices = new MaskItem<Exception, RaceVoices_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.DefaultHair:
                    this.DefaultHair = new MaskItem<Exception, RaceHair_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    this.DefaultHairColor = ex;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    this.FaceGenMainClamp = ex;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    this.FaceGenFaceClamp = ex;
                    break;
                case Race_FieldIndex.RaceStats:
                    this.RaceStats = new MaskItem<Exception, RaceStatsGendered_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.FaceData:
                    this.FaceData = new MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>>(ex, null);
                    break;
                case Race_FieldIndex.BodyData:
                    this.BodyData = new MaskItem<Exception, GenderedBodyData_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.Hairs:
                    this.Hairs = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Race_FieldIndex.Eyes:
                    this.Eyes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case Race_FieldIndex.FaceGenData:
                    this.FaceGenData = new MaskItem<Exception, FaceGenData_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Race_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Race_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Race_FieldIndex.Relations:
                    this.Relations = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RaceRelation_ErrorMask>>>)obj;
                    break;
                case Race_FieldIndex.SkillBoosts:
                    this.SkillBoosts = (MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>>)obj;
                    break;
                case Race_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case Race_FieldIndex.MaleHeight:
                    this.MaleHeight = (Exception)obj;
                    break;
                case Race_FieldIndex.FemaleHeight:
                    this.FemaleHeight = (Exception)obj;
                    break;
                case Race_FieldIndex.MaleWeight:
                    this.MaleWeight = (Exception)obj;
                    break;
                case Race_FieldIndex.FemaleWeight:
                    this.FemaleWeight = (Exception)obj;
                    break;
                case Race_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Race_FieldIndex.Voices:
                    this.Voices = (MaskItem<Exception, RaceVoices_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.DefaultHair:
                    this.DefaultHair = (MaskItem<Exception, RaceHair_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    this.DefaultHairColor = (Exception)obj;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    this.FaceGenMainClamp = (Exception)obj;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    this.FaceGenFaceClamp = (Exception)obj;
                    break;
                case Race_FieldIndex.RaceStats:
                    this.RaceStats = (MaskItem<Exception, RaceStatsGendered_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.FaceData:
                    this.FaceData = (MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>>)obj;
                    break;
                case Race_FieldIndex.BodyData:
                    this.BodyData = (MaskItem<Exception, GenderedBodyData_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.Hairs:
                    this.Hairs = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Race_FieldIndex.Eyes:
                    this.Eyes = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case Race_FieldIndex.FaceGenData:
                    this.FaceGenData = (MaskItem<Exception, FaceGenData_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Description != null) return true;
            if (Spells != null) return true;
            if (Relations != null) return true;
            if (SkillBoosts != null) return true;
            if (Fluff != null) return true;
            if (MaleHeight != null) return true;
            if (FemaleHeight != null) return true;
            if (MaleWeight != null) return true;
            if (FemaleWeight != null) return true;
            if (Flags != null) return true;
            if (Voices != null) return true;
            if (DefaultHair != null) return true;
            if (DefaultHairColor != null) return true;
            if (FaceGenMainClamp != null) return true;
            if (FaceGenFaceClamp != null) return true;
            if (RaceStats != null) return true;
            if (FaceData != null) return true;
            if (BodyData != null) return true;
            if (Hairs != null) return true;
            if (Eyes != null) return true;
            if (FaceGenData != null) return true;
            if (Unknown != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Race_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine("Spells =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Spells.Overall != null)
                {
                    fg.AppendLine(Spells.Overall.ToString());
                }
                if (Spells.Specific != null)
                {
                    foreach (var subItem in Spells.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Relations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Relations.Overall != null)
                {
                    fg.AppendLine(Relations.Overall.ToString());
                }
                if (Relations.Specific != null)
                {
                    foreach (var subItem in Relations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("SkillBoosts =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SkillBoosts.Overall != null)
                {
                    fg.AppendLine(SkillBoosts.Overall.ToString());
                }
                if (SkillBoosts.Specific != null)
                {
                    foreach (var subItem in SkillBoosts.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"MaleHeight => {MaleHeight}");
            fg.AppendLine($"FemaleHeight => {FemaleHeight}");
            fg.AppendLine($"MaleWeight => {MaleWeight}");
            fg.AppendLine($"FemaleWeight => {FemaleWeight}");
            fg.AppendLine($"Flags => {Flags}");
            Voices?.ToString(fg);
            DefaultHair?.ToString(fg);
            fg.AppendLine($"DefaultHairColor => {DefaultHairColor}");
            fg.AppendLine($"FaceGenMainClamp => {FaceGenMainClamp}");
            fg.AppendLine($"FaceGenFaceClamp => {FaceGenFaceClamp}");
            RaceStats?.ToString(fg);
            fg.AppendLine("FaceData =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (FaceData.Overall != null)
                {
                    fg.AppendLine(FaceData.Overall.ToString());
                }
                if (FaceData.Specific != null)
                {
                    foreach (var subItem in FaceData.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            BodyData?.ToString(fg);
            fg.AppendLine("Hairs =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Hairs.Overall != null)
                {
                    fg.AppendLine(Hairs.Overall.ToString());
                }
                if (Hairs.Specific != null)
                {
                    foreach (var subItem in Hairs.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Eyes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Eyes.Overall != null)
                {
                    fg.AppendLine(Eyes.Overall.ToString());
                }
                if (Eyes.Specific != null)
                {
                    foreach (var subItem in Eyes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            FaceGenData?.ToString(fg);
            fg.AppendLine($"Unknown => {Unknown}");
        }
        #endregion

        #region Combine
        public Race_ErrorMask Combine(Race_ErrorMask rhs)
        {
            var ret = new Race_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Spells = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Spells.Overall.Combine(rhs.Spells.Overall), new List<(int Index, Exception Value)>(this.Spells.Specific.And(rhs.Spells.Specific)));
            ret.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RaceRelation_ErrorMask>>>(this.Relations.Overall.Combine(rhs.Relations.Overall), new List<MaskItem<Exception, RaceRelation_ErrorMask>>(this.Relations.Specific.And(rhs.Relations.Specific)));
            ret.SkillBoosts = new MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>>(this.SkillBoosts.Overall.Combine(rhs.SkillBoosts.Overall), new List<MaskItem<Exception, SkillBoost_ErrorMask>>(this.SkillBoosts.Specific.And(rhs.SkillBoosts.Specific)));
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.MaleHeight = this.MaleHeight.Combine(rhs.MaleHeight);
            ret.FemaleHeight = this.FemaleHeight.Combine(rhs.FemaleHeight);
            ret.MaleWeight = this.MaleWeight.Combine(rhs.MaleWeight);
            ret.FemaleWeight = this.FemaleWeight.Combine(rhs.FemaleWeight);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Voices = new MaskItem<Exception, RaceVoices_ErrorMask>(this.Voices.Overall.Combine(rhs.Voices.Overall), ((IErrorMask<RaceVoices_ErrorMask>)this.Voices.Specific).Combine(rhs.Voices.Specific));
            ret.DefaultHair = new MaskItem<Exception, RaceHair_ErrorMask>(this.DefaultHair.Overall.Combine(rhs.DefaultHair.Overall), ((IErrorMask<RaceHair_ErrorMask>)this.DefaultHair.Specific).Combine(rhs.DefaultHair.Specific));
            ret.DefaultHairColor = this.DefaultHairColor.Combine(rhs.DefaultHairColor);
            ret.FaceGenMainClamp = this.FaceGenMainClamp.Combine(rhs.FaceGenMainClamp);
            ret.FaceGenFaceClamp = this.FaceGenFaceClamp.Combine(rhs.FaceGenFaceClamp);
            ret.RaceStats = new MaskItem<Exception, RaceStatsGendered_ErrorMask>(this.RaceStats.Overall.Combine(rhs.RaceStats.Overall), ((IErrorMask<RaceStatsGendered_ErrorMask>)this.RaceStats.Specific).Combine(rhs.RaceStats.Specific));
            ret.FaceData = new MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>>(this.FaceData.Overall.Combine(rhs.FaceData.Overall), new List<MaskItem<Exception, FacePart_ErrorMask>>(this.FaceData.Specific.And(rhs.FaceData.Specific)));
            ret.BodyData = new MaskItem<Exception, GenderedBodyData_ErrorMask>(this.BodyData.Overall.Combine(rhs.BodyData.Overall), ((IErrorMask<GenderedBodyData_ErrorMask>)this.BodyData.Specific).Combine(rhs.BodyData.Specific));
            ret.Hairs = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Hairs.Overall.Combine(rhs.Hairs.Overall), new List<(int Index, Exception Value)>(this.Hairs.Specific.And(rhs.Hairs.Specific)));
            ret.Eyes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Eyes.Overall.Combine(rhs.Eyes.Overall), new List<(int Index, Exception Value)>(this.Eyes.Specific.And(rhs.Eyes.Specific)));
            ret.FaceGenData = new MaskItem<Exception, FaceGenData_ErrorMask>(this.FaceGenData.Overall.Combine(rhs.FaceGenData.Overall), ((IErrorMask<FaceGenData_ErrorMask>)this.FaceGenData.Specific).Combine(rhs.FaceGenData.Specific));
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            return ret;
        }
        public static Race_ErrorMask Combine(Race_ErrorMask lhs, Race_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Race_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Race_ErrorMask();
        }
        #endregion

    }
    public class Race_CopyMask : MajorRecord_CopyMask
    {
        public Race_CopyMask()
        {
        }

        public Race_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Name = defaultOn;
            this.Description = defaultOn;
            this.Spells = deepCopyOption;
            this.Relations = new MaskItem<CopyOption, RaceRelation_CopyMask>(deepCopyOption, default);
            this.SkillBoosts = new MaskItem<CopyOption, SkillBoost_CopyMask>(deepCopyOption, default);
            this.Fluff = defaultOn;
            this.MaleHeight = defaultOn;
            this.FemaleHeight = defaultOn;
            this.MaleWeight = defaultOn;
            this.FemaleWeight = defaultOn;
            this.Flags = defaultOn;
            this.Voices = new MaskItem<CopyOption, RaceVoices_CopyMask>(deepCopyOption, default);
            this.DefaultHair = new MaskItem<CopyOption, RaceHair_CopyMask>(deepCopyOption, default);
            this.DefaultHairColor = defaultOn;
            this.FaceGenMainClamp = defaultOn;
            this.FaceGenFaceClamp = defaultOn;
            this.RaceStats = new MaskItem<CopyOption, RaceStatsGendered_CopyMask>(deepCopyOption, default);
            this.FaceData = new MaskItem<CopyOption, FacePart_CopyMask>(deepCopyOption, default);
            this.BodyData = new MaskItem<CopyOption, GenderedBodyData_CopyMask>(deepCopyOption, default);
            this.Hairs = deepCopyOption;
            this.Eyes = deepCopyOption;
            this.FaceGenData = new MaskItem<CopyOption, FaceGenData_CopyMask>(deepCopyOption, default);
            this.Unknown = defaultOn;
        }

        #region Members
        public bool Name;
        public bool Description;
        public CopyOption Spells;
        public MaskItem<CopyOption, RaceRelation_CopyMask> Relations;
        public MaskItem<CopyOption, SkillBoost_CopyMask> SkillBoosts;
        public bool Fluff;
        public bool MaleHeight;
        public bool FemaleHeight;
        public bool MaleWeight;
        public bool FemaleWeight;
        public bool Flags;
        public MaskItem<CopyOption, RaceVoices_CopyMask> Voices;
        public MaskItem<CopyOption, RaceHair_CopyMask> DefaultHair;
        public bool DefaultHairColor;
        public bool FaceGenMainClamp;
        public bool FaceGenFaceClamp;
        public MaskItem<CopyOption, RaceStatsGendered_CopyMask> RaceStats;
        public MaskItem<CopyOption, FacePart_CopyMask> FaceData;
        public MaskItem<CopyOption, GenderedBodyData_CopyMask> BodyData;
        public CopyOption Hairs;
        public CopyOption Eyes;
        public MaskItem<CopyOption, FaceGenData_CopyMask> FaceGenData;
        public bool Unknown;
        #endregion

    }

    public class Race_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        public bool Name;
        public bool Description;
        public bool Spells;
        public MaskItem<bool, RaceRelation_TranslationMask> Relations;
        public MaskItem<bool, SkillBoost_TranslationMask> SkillBoosts;
        public bool Fluff;
        public bool MaleHeight;
        public bool FemaleHeight;
        public bool MaleWeight;
        public bool FemaleWeight;
        public bool Flags;
        public MaskItem<bool, RaceVoices_TranslationMask> Voices;
        public MaskItem<bool, RaceHair_TranslationMask> DefaultHair;
        public bool DefaultHairColor;
        public bool FaceGenMainClamp;
        public bool FaceGenFaceClamp;
        public MaskItem<bool, RaceStatsGendered_TranslationMask> RaceStats;
        public MaskItem<bool, FacePart_TranslationMask> FaceData;
        public MaskItem<bool, GenderedBodyData_TranslationMask> BodyData;
        public bool Hairs;
        public bool Eyes;
        public MaskItem<bool, FaceGenData_TranslationMask> FaceGenData;
        public bool Unknown;
        #endregion

        #region Ctors
        public Race_TranslationMask()
            : base()
        {
        }

        public Race_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Description = defaultOn;
            this.Spells = defaultOn;
            this.Relations = new MaskItem<bool, RaceRelation_TranslationMask>(defaultOn, null);
            this.SkillBoosts = new MaskItem<bool, SkillBoost_TranslationMask>(defaultOn, null);
            this.Fluff = defaultOn;
            this.MaleHeight = defaultOn;
            this.FemaleHeight = defaultOn;
            this.MaleWeight = defaultOn;
            this.FemaleWeight = defaultOn;
            this.Flags = defaultOn;
            this.Voices = new MaskItem<bool, RaceVoices_TranslationMask>(defaultOn, null);
            this.DefaultHair = new MaskItem<bool, RaceHair_TranslationMask>(defaultOn, null);
            this.DefaultHairColor = defaultOn;
            this.FaceGenMainClamp = defaultOn;
            this.FaceGenFaceClamp = defaultOn;
            this.RaceStats = new MaskItem<bool, RaceStatsGendered_TranslationMask>(defaultOn, null);
            this.FaceData = new MaskItem<bool, FacePart_TranslationMask>(defaultOn, null);
            this.BodyData = new MaskItem<bool, GenderedBodyData_TranslationMask>(defaultOn, null);
            this.Hairs = defaultOn;
            this.Eyes = defaultOn;
            this.FaceGenData = new MaskItem<bool, FaceGenData_TranslationMask>(defaultOn, null);
            this.Unknown = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Description, null));
            ret.Add((Spells, null));
            ret.Add((Relations?.Overall ?? true, Relations?.Specific?.GetCrystal()));
            ret.Add((SkillBoosts?.Overall ?? true, SkillBoosts?.Specific?.GetCrystal()));
            ret.Add((Fluff, null));
            ret.Add((MaleHeight, null));
            ret.Add((FemaleHeight, null));
            ret.Add((MaleWeight, null));
            ret.Add((FemaleWeight, null));
            ret.Add((Flags, null));
            ret.Add((Voices?.Overall ?? true, Voices?.Specific?.GetCrystal()));
            ret.Add((DefaultHair?.Overall ?? true, DefaultHair?.Specific?.GetCrystal()));
            ret.Add((DefaultHairColor, null));
            ret.Add((FaceGenMainClamp, null));
            ret.Add((FaceGenFaceClamp, null));
            ret.Add((RaceStats?.Overall ?? true, RaceStats?.Specific?.GetCrystal()));
            ret.Add((FaceData?.Overall ?? true, FaceData?.Specific?.GetCrystal()));
            ret.Add((BodyData?.Overall ?? true, BodyData?.Specific?.GetCrystal()));
            ret.Add((Hairs, null));
            ret.Add((Eyes, null));
            ret.Add((FaceGenData?.Overall ?? true, FaceGenData?.Specific?.GetCrystal()));
            ret.Add((Unknown, null));
        }
    }
    #endregion

    #endregion

}
