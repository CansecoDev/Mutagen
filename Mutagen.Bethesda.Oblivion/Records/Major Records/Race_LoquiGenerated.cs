/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Race : NamedMajorRecord, IRace, ILoquiObjectSetter, IEquatable<Race>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;

        #region Ctor
        public Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<String> _Description = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> Description_Property => _Description;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Description
        {
            get => this._Description.Item;
            set => this._Description.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IRace.Description_Property => this.Description_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IRaceGetter.Description_Property => this.Description_Property;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDSetLink<Spell>> _Spells = new NotifyingList<FormIDSetLink<Spell>>();
        public INotifyingList<FormIDSetLink<Spell>> Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDSetLink<Spell>> SpellsEnumerable
        {
            get => _Spells;
            set => _Spells.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDSetLink<Spell>> IRace.Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDSetLink<Spell>> IRaceGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Relation> _Relations = new NotifyingList<Relation>();
        public INotifyingList<Relation> Relations => _Relations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Relation> RelationsEnumerable
        {
            get => _Relations;
            set => _Relations.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Relation> IRace.Relations => _Relations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Relation> IRaceGetter.Relations => _Relations;
        #endregion

        #endregion
        #region SkillBoosts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<SkillBoost> _SkillBoosts = new NotifyingListBounded<SkillBoost>(max: 7);
        public INotifyingList<SkillBoost> SkillBoosts => _SkillBoosts;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<SkillBoost> SkillBoostsEnumerable
        {
            get => _SkillBoosts;
            set => _SkillBoosts.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<SkillBoost> IRace.SkillBoosts => _SkillBoosts;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<SkillBoost> IRaceGetter.SkillBoosts => _SkillBoosts;
        #endregion

        #endregion
        #region Fluff
        protected INotifyingItem<Byte[]> _Fluff = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[4]);
        public INotifyingItem<Byte[]> Fluff_Property => _Fluff;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Fluff
        {
            get => this._Fluff.Item;
            set => this._Fluff.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> IRace.Fluff_Property => this.Fluff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> IRaceGetter.Fluff_Property => this.Fluff_Property;
        #endregion
        #region MaleHeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _MaleHeight = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> MaleHeight_Property => _MaleHeight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single MaleHeight
        {
            get => this._MaleHeight.Item;
            set => this._MaleHeight.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IRace.MaleHeight_Property => this.MaleHeight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IRaceGetter.MaleHeight_Property => this.MaleHeight_Property;
        #endregion
        #region FemaleHeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _FemaleHeight = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> FemaleHeight_Property => _FemaleHeight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FemaleHeight
        {
            get => this._FemaleHeight.Item;
            set => this._FemaleHeight.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IRace.FemaleHeight_Property => this.FemaleHeight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IRaceGetter.FemaleHeight_Property => this.FemaleHeight_Property;
        #endregion
        #region MaleWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _MaleWeight = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> MaleWeight_Property => _MaleWeight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single MaleWeight
        {
            get => this._MaleWeight.Item;
            set => this._MaleWeight.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IRace.MaleWeight_Property => this.MaleWeight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IRaceGetter.MaleWeight_Property => this.MaleWeight_Property;
        #endregion
        #region FemaleWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Single> _FemaleWeight = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> FemaleWeight_Property => _FemaleWeight;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single FemaleWeight
        {
            get => this._FemaleWeight.Item;
            set => this._FemaleWeight.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IRace.FemaleWeight_Property => this.FemaleWeight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IRaceGetter.FemaleWeight_Property => this.FemaleWeight_Property;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Race.Flag> _Flags = NotifyingItem.Factory<Race.Flag>();
        public INotifyingItem<Race.Flag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Race.Flag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Race.Flag> IRace.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Race.Flag> IRaceGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Voices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<RaceVoices> _Voices = new NotifyingSetItem<RaceVoices>();
        public INotifyingSetItem<RaceVoices> Voices_Property => this._Voices;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RaceVoices IRaceGetter.Voices => this.Voices;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RaceVoices Voices { get => _Voices.Item; set => _Voices.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<RaceVoices> IRace.Voices_Property => this.Voices_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<RaceVoices> IRaceGetter.Voices_Property => this.Voices_Property;
        #endregion
        #region DefaultHair
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<RaceHair> _DefaultHair = new NotifyingSetItem<RaceHair>();
        public INotifyingSetItem<RaceHair> DefaultHair_Property => this._DefaultHair;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RaceHair IRaceGetter.DefaultHair => this.DefaultHair;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RaceHair DefaultHair { get => _DefaultHair.Item; set => _DefaultHair.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<RaceHair> IRace.DefaultHair_Property => this.DefaultHair_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<RaceHair> IRaceGetter.DefaultHair_Property => this.DefaultHair_Property;
        #endregion
        #region DefaultHairColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Byte> _DefaultHairColor = NotifyingSetItem.Factory<Byte>(markAsSet: false);
        public INotifyingSetItem<Byte> DefaultHairColor_Property => _DefaultHairColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte DefaultHairColor
        {
            get => this._DefaultHairColor.Item;
            set => this._DefaultHairColor.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte> IRace.DefaultHairColor_Property => this.DefaultHairColor_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte> IRaceGetter.DefaultHairColor_Property => this.DefaultHairColor_Property;
        #endregion
        #region FaceGenMainClamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Int32> _FaceGenMainClamp = NotifyingSetItem.Factory<Int32>(markAsSet: false);
        public INotifyingSetItem<Int32> FaceGenMainClamp_Property => _FaceGenMainClamp;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FaceGenMainClamp
        {
            get => this._FaceGenMainClamp.Item;
            set => this._FaceGenMainClamp.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> IRace.FaceGenMainClamp_Property => this.FaceGenMainClamp_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> IRaceGetter.FaceGenMainClamp_Property => this.FaceGenMainClamp_Property;
        #endregion
        #region FaceGenFaceClamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Int32> _FaceGenFaceClamp = NotifyingSetItem.Factory<Int32>(markAsSet: false);
        public INotifyingSetItem<Int32> FaceGenFaceClamp_Property => _FaceGenFaceClamp;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 FaceGenFaceClamp
        {
            get => this._FaceGenFaceClamp.Item;
            set => this._FaceGenFaceClamp.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Int32> IRace.FaceGenFaceClamp_Property => this.FaceGenFaceClamp_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Int32> IRaceGetter.FaceGenFaceClamp_Property => this.FaceGenFaceClamp_Property;
        #endregion
        #region RaceStats
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<RaceStatsGendered> _RaceStats = new NotifyingSetItem<RaceStatsGendered>();
        public INotifyingSetItem<RaceStatsGendered> RaceStats_Property => this._RaceStats;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RaceStatsGendered IRaceGetter.RaceStats => this.RaceStats;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RaceStatsGendered RaceStats { get => _RaceStats.Item; set => _RaceStats.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<RaceStatsGendered> IRace.RaceStats_Property => this.RaceStats_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<RaceStatsGendered> IRaceGetter.RaceStats_Property => this.RaceStats_Property;
        #endregion
        #region FaceData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FacePart> _FaceData = new NotifyingList<FacePart>();
        public INotifyingList<FacePart> FaceData => _FaceData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FacePart> FaceDataEnumerable
        {
            get => _FaceData;
            set => _FaceData.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FacePart> IRace.FaceData => _FaceData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FacePart> IRaceGetter.FaceData => _FaceData;
        #endregion

        #endregion
        #region BodyData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<GenderedBodyData> _BodyData = new NotifyingSetItem<GenderedBodyData>();
        public INotifyingSetItem<GenderedBodyData> BodyData_Property => this._BodyData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        GenderedBodyData IRaceGetter.BodyData => this.BodyData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public GenderedBodyData BodyData { get => _BodyData.Item; set => _BodyData.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<GenderedBodyData> IRace.BodyData_Property => this.BodyData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<GenderedBodyData> IRaceGetter.BodyData_Property => this.BodyData_Property;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDLink<Hair>> _Hairs = new NotifyingList<FormIDLink<Hair>>();
        public INotifyingList<FormIDLink<Hair>> Hairs => _Hairs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDLink<Hair>> HairsEnumerable
        {
            get => _Hairs;
            set => _Hairs.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDLink<Hair>> IRace.Hairs => _Hairs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDLink<Hair>> IRaceGetter.Hairs => _Hairs;
        #endregion

        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<FormIDLink<Eye>> _Eyes = new NotifyingList<FormIDLink<Eye>>();
        public INotifyingList<FormIDLink<Eye>> Eyes => _Eyes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<FormIDLink<Eye>> EyesEnumerable
        {
            get => _Eyes;
            set => _Eyes.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<FormIDLink<Eye>> IRace.Eyes => _Eyes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<FormIDLink<Eye>> IRaceGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region FaceGenData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<FaceGenData> _FaceGenData = new NotifyingSetItem<FaceGenData>();
        public INotifyingSetItem<FaceGenData> FaceGenData_Property => this._FaceGenData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FaceGenData IRaceGetter.FaceGenData => this.FaceGenData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FaceGenData FaceGenData { get => _FaceGenData.Item; set => _FaceGenData.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<FaceGenData> IRace.FaceGenData_Property => this.FaceGenData_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<FaceGenData> IRaceGetter.FaceGenData_Property => this.FaceGenData_Property;
        #endregion
        #region Unknown
        protected INotifyingSetItem<Byte[]> _Unknown = NotifyingSetItem.Factory<Byte[]>(
            markAsSet: false,
            noNullFallback: () => new byte[2]);
        public INotifyingSetItem<Byte[]> Unknown_Property => _Unknown;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Unknown
        {
            get => this._Unknown.Item;
            set => this._Unknown.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IRace.Unknown_Property => this.Unknown_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IRaceGetter.Unknown_Property => this.Unknown_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RaceCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RaceCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RaceCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return RaceCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            return RaceCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Race_Mask<bool> GetHasBeenSetMask()
        {
            return RaceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Race rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Race rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Description_Property.HasBeenSet != rhs.Description_Property.HasBeenSet) return false;
            if (Description_Property.HasBeenSet)
            {
                if (!object.Equals(Description, rhs.Description)) return false;
            }
            if (Spells.HasBeenSet != rhs.Spells.HasBeenSet) return false;
            if (Spells.HasBeenSet)
            {
                if (!Spells.SequenceEqual(rhs.Spells)) return false;
            }
            if (Relations.HasBeenSet != rhs.Relations.HasBeenSet) return false;
            if (Relations.HasBeenSet)
            {
                if (!Relations.SequenceEqual(rhs.Relations)) return false;
            }
            if (!SkillBoosts.SequenceEqual(rhs.SkillBoosts)) return false;
            if (!Fluff.EqualsFast(rhs.Fluff)) return false;
            if (MaleHeight != rhs.MaleHeight) return false;
            if (FemaleHeight != rhs.FemaleHeight) return false;
            if (MaleWeight != rhs.MaleWeight) return false;
            if (FemaleWeight != rhs.FemaleWeight) return false;
            if (Flags != rhs.Flags) return false;
            if (Voices_Property.HasBeenSet != rhs.Voices_Property.HasBeenSet) return false;
            if (Voices_Property.HasBeenSet)
            {
                if (!object.Equals(Voices, rhs.Voices)) return false;
            }
            if (DefaultHair_Property.HasBeenSet != rhs.DefaultHair_Property.HasBeenSet) return false;
            if (DefaultHair_Property.HasBeenSet)
            {
                if (!object.Equals(DefaultHair, rhs.DefaultHair)) return false;
            }
            if (DefaultHairColor_Property.HasBeenSet != rhs.DefaultHairColor_Property.HasBeenSet) return false;
            if (DefaultHairColor_Property.HasBeenSet)
            {
                if (DefaultHairColor != rhs.DefaultHairColor) return false;
            }
            if (FaceGenMainClamp_Property.HasBeenSet != rhs.FaceGenMainClamp_Property.HasBeenSet) return false;
            if (FaceGenMainClamp_Property.HasBeenSet)
            {
                if (FaceGenMainClamp != rhs.FaceGenMainClamp) return false;
            }
            if (FaceGenFaceClamp_Property.HasBeenSet != rhs.FaceGenFaceClamp_Property.HasBeenSet) return false;
            if (FaceGenFaceClamp_Property.HasBeenSet)
            {
                if (FaceGenFaceClamp != rhs.FaceGenFaceClamp) return false;
            }
            if (RaceStats_Property.HasBeenSet != rhs.RaceStats_Property.HasBeenSet) return false;
            if (RaceStats_Property.HasBeenSet)
            {
                if (!object.Equals(RaceStats, rhs.RaceStats)) return false;
            }
            if (FaceData.HasBeenSet != rhs.FaceData.HasBeenSet) return false;
            if (FaceData.HasBeenSet)
            {
                if (!FaceData.SequenceEqual(rhs.FaceData)) return false;
            }
            if (BodyData_Property.HasBeenSet != rhs.BodyData_Property.HasBeenSet) return false;
            if (BodyData_Property.HasBeenSet)
            {
                if (!object.Equals(BodyData, rhs.BodyData)) return false;
            }
            if (Hairs.HasBeenSet != rhs.Hairs.HasBeenSet) return false;
            if (Hairs.HasBeenSet)
            {
                if (!Hairs.SequenceEqual(rhs.Hairs)) return false;
            }
            if (Eyes.HasBeenSet != rhs.Eyes.HasBeenSet) return false;
            if (Eyes.HasBeenSet)
            {
                if (!Eyes.SequenceEqual(rhs.Eyes)) return false;
            }
            if (FaceGenData_Property.HasBeenSet != rhs.FaceGenData_Property.HasBeenSet) return false;
            if (FaceGenData_Property.HasBeenSet)
            {
                if (!object.Equals(FaceGenData, rhs.FaceGenData)) return false;
            }
            if (Unknown_Property.HasBeenSet != rhs.Unknown_Property.HasBeenSet) return false;
            if (Unknown_Property.HasBeenSet)
            {
                if (!Unknown.EqualsFast(rhs.Unknown)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Description_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Spells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Spells).CombineHashCode(ret);
            }
            if (Relations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Relations).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(SkillBoosts).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaleHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FemaleHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaleWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FemaleWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            if (Voices_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Voices).CombineHashCode(ret);
            }
            if (DefaultHair_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DefaultHair).CombineHashCode(ret);
            }
            if (DefaultHairColor_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DefaultHairColor).CombineHashCode(ret);
            }
            if (FaceGenMainClamp_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceGenMainClamp).CombineHashCode(ret);
            }
            if (FaceGenFaceClamp_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceGenFaceClamp).CombineHashCode(ret);
            }
            if (RaceStats_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RaceStats).CombineHashCode(ret);
            }
            if (FaceData.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceData).CombineHashCode(ret);
            }
            if (BodyData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BodyData).CombineHashCode(ret);
            }
            if (Hairs.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Hairs).CombineHashCode(ret);
            }
            if (Eyes.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Eyes).CombineHashCode(ret);
            }
            if (FaceGenData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceGenData).CombineHashCode(ret);
            }
            if (Unknown_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Unknown).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Race Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_XML(
            XElement root,
            out Race_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_XML(
            XElement root,
            bool doMasks,
            out Race_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Race Object, Race_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Race_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Race Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Race Create_XML(
            string path,
            out Race_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Race Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Race Create_XML(
            Stream stream,
            out Race_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Race_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RaceCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Race Create_XML_Internal(
            XElement root,
            Func<Race_ErrorMask> errorMask)
        {
            var ret = new Race();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Race item,
            XElement root,
            string name,
            Func<Race_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Description":
                    item._Description.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Race_FieldIndex.Description,
                        errorMask: errorMask));
                    break;
                case "Spells":
                    item._Spells.SetIfSucceeded(ListXmlTranslation<FormIDSetLink<Spell>, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.Spells,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return FormIDXmlTranslation.Instance.Parse(
                                r,
                                nullable: false,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDSetLink<Spell>(o.Value));
                        }
                        ));
                    break;
                case "Relations":
                    item._Relations.SetIfSucceeded(ListXmlTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.Relations,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<Relation, Relation_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "SkillBoosts":
                    item._SkillBoosts.SetIfSucceeded(ListXmlTranslation<SkillBoost, MaskItem<Exception, SkillBoost_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.SkillBoosts,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, SkillBoost_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<SkillBoost, SkillBoost_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "Fluff":
                    item._Fluff.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Race_FieldIndex.Fluff,
                        errorMask: errorMask));
                    break;
                case "MaleHeight":
                    item._MaleHeight.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Race_FieldIndex.MaleHeight,
                        errorMask: errorMask));
                    break;
                case "FemaleHeight":
                    item._FemaleHeight.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Race_FieldIndex.FemaleHeight,
                        errorMask: errorMask));
                    break;
                case "MaleWeight":
                    item._MaleWeight.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Race_FieldIndex.MaleWeight,
                        errorMask: errorMask));
                    break;
                case "FemaleWeight":
                    item._FemaleWeight.SetIfSucceeded(FloatXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Race_FieldIndex.FemaleWeight,
                        errorMask: errorMask));
                    break;
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<Race.Flag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Race_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Voices":
                    item._Voices.SetIfSucceeded(LoquiXmlTranslation<RaceVoices, RaceVoices_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.Voices,
                        errorMask: errorMask));
                    break;
                case "DefaultHair":
                    item._DefaultHair.SetIfSucceeded(LoquiXmlTranslation<RaceHair, RaceHair_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.DefaultHair,
                        errorMask: errorMask));
                    break;
                case "DefaultHairColor":
                    item._DefaultHairColor.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Race_FieldIndex.DefaultHairColor,
                        errorMask: errorMask));
                    break;
                case "FaceGenMainClamp":
                    item._FaceGenMainClamp.SetIfSucceeded(Int32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Race_FieldIndex.FaceGenMainClamp,
                        errorMask: errorMask));
                    break;
                case "FaceGenFaceClamp":
                    item._FaceGenFaceClamp.SetIfSucceeded(Int32XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Race_FieldIndex.FaceGenFaceClamp,
                        errorMask: errorMask));
                    break;
                case "RaceStats":
                    item._RaceStats.SetIfSucceeded(LoquiXmlTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.RaceStats,
                        errorMask: errorMask));
                    break;
                case "FaceData":
                    item._FaceData.SetIfSucceeded(ListXmlTranslation<FacePart, MaskItem<Exception, FacePart_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.FaceData,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, FacePart_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<FacePart, FacePart_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "BodyData":
                    item._BodyData.SetIfSucceeded(LoquiXmlTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.BodyData,
                        errorMask: errorMask));
                    break;
                case "Hairs":
                    item._Hairs.SetIfSucceeded(ListXmlTranslation<FormIDLink<Hair>, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.Hairs,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return FormIDXmlTranslation.Instance.Parse(
                                r,
                                nullable: false,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDLink<Hair>(o.Value));
                        }
                        ));
                    break;
                case "Eyes":
                    item._Eyes.SetIfSucceeded(ListXmlTranslation<FormIDLink<Eye>, Exception>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.Eyes,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return FormIDXmlTranslation.Instance.Parse(
                                r,
                                nullable: false,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDLink<Eye>(o.Value));
                        }
                        ));
                    break;
                case "FaceGenData":
                    item._FaceGenData.SetIfSucceeded(LoquiXmlTranslation<FaceGenData, FaceGenData_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Race_FieldIndex.FaceGenData,
                        errorMask: errorMask));
                    break;
                case "Unknown":
                    item._Unknown.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Race_FieldIndex.Unknown,
                        errorMask: errorMask));
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Race Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_Binary(
            MutagenFrame frame,
            out Race_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Race_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Race Object, Race_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Race_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Race Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Race Create_Binary(
            string path,
            out Race_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Race Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Race Create_Binary(
            Stream stream,
            out Race_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Race_ErrorMask errorMask)
        {
            errorMask = (Race_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Race_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Race_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            RaceCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Race Create_Binary_Internal(
            MutagenFrame frame,
            Func<Race_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Race, Race_ErrorMask, Race_FieldIndex>(
                record: new Race(),
                frame: frame,
                errorMask: errorMask,
                recType: Race_Registration.RACE_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Race item,
            MutagenFrame frame,
            Func<Race_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Race_FieldIndex?> Fill_Binary_RecordTypes(
            Race item,
            MutagenFrame frame,
            Func<Race_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "DESC":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var DescriptiontryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.Description,
                        errorMask: errorMask);
                    item._Description.SetIfSucceeded(DescriptiontryGet);
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.Description);
                case "SPLO":
                    var SpellstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Spell>, Exception>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.SPLO_HEADER,
                        fieldIndex: (int)Race_FieldIndex.Spells,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            r.Position += Constants.SUBRECORD_LENGTH;
                            return Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDSetLink<Spell>(o));
                        }
                        );
                    item._Spells.SetIfSucceeded(SpellstryGet);
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.Spells);
                case "XNAM":
                    var RelationstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.XNAM_HEADER,
                        fieldIndex: (int)Race_FieldIndex.Relations,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<Relation, Relation_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Relations.SetIfSucceeded(RelationstryGet);
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.Relations);
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        var SkillBooststryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<SkillBoost, MaskItem<Exception, SkillBoost_ErrorMask>>.Instance.ParseRepeatedItem(
                            frame: frame,
                            amount: 7,
                            fieldIndex: (int)Race_FieldIndex.SkillBoosts,
                            errorMask: errorMask,
                            transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, SkillBoost_ErrorMask> listSubMask) =>
                            {
                                return LoquiBinaryTranslation<SkillBoost, SkillBoost_ErrorMask>.Instance.Parse(
                                    frame: r.Spawn(snapToFinalPosition: false),
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask);
                            }
                            );
                        item._SkillBoosts.SetIfSucceeded(SkillBooststryGet);
                        var FlufftryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)Race_FieldIndex.Fluff,
                            errorMask: errorMask);
                        item._Fluff.SetIfSucceeded(FlufftryGet);
                        item._MaleHeight.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Race_FieldIndex.MaleHeight,
                            errorMask: errorMask));
                        item._FemaleHeight.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Race_FieldIndex.FemaleHeight,
                            errorMask: errorMask));
                        item._MaleWeight.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Race_FieldIndex.MaleWeight,
                            errorMask: errorMask));
                        item._FemaleWeight.SetIfSucceeded(Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)Race_FieldIndex.FemaleWeight,
                            errorMask: errorMask));
                        item._Flags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<Race.Flag>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(2)),
                            fieldIndex: (int)Race_FieldIndex.Flags,
                            errorMask: errorMask));
                    }
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.Flags);
                case "VNAM":
                    item._Voices.SetIfSucceeded(LoquiBinaryTranslation<RaceVoices, RaceVoices_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)Race_FieldIndex.Voices,
                        errorMask: errorMask));
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.Voices);
                case "DNAM":
                    item._DefaultHair.SetIfSucceeded(LoquiBinaryTranslation<RaceHair, RaceHair_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)Race_FieldIndex.DefaultHair,
                        errorMask: errorMask));
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.DefaultHair);
                case "CNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._DefaultHairColor.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.DefaultHairColor,
                        errorMask: errorMask));
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.DefaultHairColor);
                case "PNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._FaceGenMainClamp.SetIfSucceeded(Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.FaceGenMainClamp,
                        errorMask: errorMask));
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.FaceGenMainClamp);
                case "UNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._FaceGenFaceClamp.SetIfSucceeded(Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.FaceGenFaceClamp,
                        errorMask: errorMask));
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.FaceGenFaceClamp);
                case "ATTR":
                    item._RaceStats.SetIfSucceeded(LoquiBinaryTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.Parse(
                        frame: frame,
                        fieldIndex: (int)Race_FieldIndex.RaceStats,
                        errorMask: errorMask));
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.RaceStats);
                case "NAM0":
                    frame.Position += Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    var FaceDatatryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<FacePart, MaskItem<Exception, FacePart_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: FacePart_Registration.TriggeringRecordTypes,
                        fieldIndex: (int)Race_FieldIndex.FaceData,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, FacePart_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<FacePart, FacePart_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._FaceData.SetIfSucceeded(FaceDatatryGet);
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.FaceData);
                case "NAM1":
                    frame.Position += Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    item._BodyData.SetIfSucceeded(LoquiBinaryTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Race_FieldIndex.BodyData,
                        errorMask: errorMask));
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.BodyData);
                case "HNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var HairstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Hair>, Exception>.Instance.ParseRepeatedItem(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.Hairs,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDLink<Hair>(o));
                        }
                        );
                    item._Hairs.SetIfSucceeded(HairstryGet);
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.Hairs);
                case "ENAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var EyestryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Eye>, Exception>.Instance.ParseRepeatedItem(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.Eyes,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask).Bubble((o) => new FormIDLink<Eye>(o));
                        }
                        );
                    item._Eyes.SetIfSucceeded(EyestryGet);
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.Eyes);
                case "FGGS":
                case "FGGA":
                case "FGTS":
                    item._FaceGenData.SetIfSucceeded(LoquiBinaryTranslation<FaceGenData, FaceGenData_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        fieldIndex: (int)Race_FieldIndex.FaceGenData,
                        errorMask: errorMask));
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.FaceGenData);
                case "SNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var UnknowntryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.Unknown,
                        errorMask: errorMask);
                    item._Unknown.SetIfSucceeded(UnknowntryGet);
                    return TryGet<Race_FieldIndex?>.Succeed(Race_FieldIndex.Unknown);
                default:
                    return NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        errorMask: errorMask).Bubble((i) => RaceCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Race Copy(
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            return Race.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Race Copy(
            IRace item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            Race ret;
            if (item.GetType().Equals(typeof(Race)))
            {
                ret = new Race();
            }
            else
            {
                ret = (Race)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
            where CopyType : class, IRace
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Race)))
            {
                ret = new Race() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Race Copy_ToLoqui(
            IRaceGetter item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            Race ret;
            if (item.GetType().Equals(typeof(Race)))
            {
                ret = new Race() as Race;
            }
            else
            {
                ret = (Race)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    this._Description.Set(
                        (String)obj,
                        cmds);
                    break;
                case Race_FieldIndex.Spells:
                    this._Spells.SetTo((IEnumerable<FormIDSetLink<Spell>>)obj, cmds);
                    break;
                case Race_FieldIndex.Relations:
                    this._Relations.SetTo((IEnumerable<Relation>)obj, cmds);
                    break;
                case Race_FieldIndex.SkillBoosts:
                    this._SkillBoosts.SetTo((IEnumerable<SkillBoost>)obj, cmds);
                    break;
                case Race_FieldIndex.Fluff:
                    this._Fluff.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case Race_FieldIndex.MaleHeight:
                    this._MaleHeight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Race_FieldIndex.FemaleHeight:
                    this._FemaleHeight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Race_FieldIndex.MaleWeight:
                    this._MaleWeight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Race_FieldIndex.FemaleWeight:
                    this._FemaleWeight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Race_FieldIndex.Flags:
                    this._Flags.Set(
                        (Race.Flag)obj,
                        cmds);
                    break;
                case Race_FieldIndex.Voices:
                    this._Voices.Set(
                        (RaceVoices)obj,
                        cmds);
                    break;
                case Race_FieldIndex.DefaultHair:
                    this._DefaultHair.Set(
                        (RaceHair)obj,
                        cmds);
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    this._DefaultHairColor.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    this._FaceGenMainClamp.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    this._FaceGenFaceClamp.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case Race_FieldIndex.RaceStats:
                    this._RaceStats.Set(
                        (RaceStatsGendered)obj,
                        cmds);
                    break;
                case Race_FieldIndex.FaceData:
                    this._FaceData.SetTo((IEnumerable<FacePart>)obj, cmds);
                    break;
                case Race_FieldIndex.BodyData:
                    this._BodyData.Set(
                        (GenderedBodyData)obj,
                        cmds);
                    break;
                case Race_FieldIndex.Hairs:
                    this._Hairs.SetTo((IEnumerable<FormIDLink<Hair>>)obj, cmds);
                    break;
                case Race_FieldIndex.Eyes:
                    this._Eyes.SetTo((IEnumerable<FormIDLink<Eye>>)obj, cmds);
                    break;
                case Race_FieldIndex.FaceGenData:
                    this._FaceGenData.Set(
                        (FaceGenData)obj,
                        cmds);
                    break;
                case Race_FieldIndex.Unknown:
                    this._Unknown.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceCommon.Clear(this, cmds);
        }


        public new static Race Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Race();
            foreach (var pair in fields)
            {
                CopyInInternal_Race(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Race(Race obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Race_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    obj._Description.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.Spells:
                    obj._Spells.SetTo((IEnumerable<FormIDSetLink<Spell>>)pair.Value, null);
                    break;
                case Race_FieldIndex.Relations:
                    obj._Relations.SetTo((IEnumerable<Relation>)pair.Value, null);
                    break;
                case Race_FieldIndex.SkillBoosts:
                    obj._SkillBoosts.SetTo((IEnumerable<SkillBoost>)pair.Value, null);
                    break;
                case Race_FieldIndex.Fluff:
                    obj._Fluff.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case Race_FieldIndex.MaleHeight:
                    obj._MaleHeight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.FemaleHeight:
                    obj._FemaleHeight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.MaleWeight:
                    obj._MaleWeight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.FemaleWeight:
                    obj._FemaleWeight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.Flags:
                    obj._Flags.Set(
                        (Race.Flag)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.Voices:
                    obj._Voices.Set(
                        (RaceVoices)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.DefaultHair:
                    obj._DefaultHair.Set(
                        (RaceHair)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    obj._DefaultHairColor.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    obj._FaceGenMainClamp.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    obj._FaceGenFaceClamp.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.RaceStats:
                    obj._RaceStats.Set(
                        (RaceStatsGendered)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.FaceData:
                    obj._FaceData.SetTo((IEnumerable<FacePart>)pair.Value, null);
                    break;
                case Race_FieldIndex.BodyData:
                    obj._BodyData.Set(
                        (GenderedBodyData)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.Hairs:
                    obj._Hairs.SetTo((IEnumerable<FormIDLink<Hair>>)pair.Value, null);
                    break;
                case Race_FieldIndex.Eyes:
                    obj._Eyes.SetTo((IEnumerable<FormIDLink<Eye>>)pair.Value, null);
                    break;
                case Race_FieldIndex.FaceGenData:
                    obj._FaceGenData.Set(
                        (FaceGenData)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.Unknown:
                    obj._Unknown.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Race obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IRace : IRaceGetter, INamedMajorRecord, ILoquiClass<IRace, IRaceGetter>, ILoquiClass<Race, IRaceGetter>
    {
        new String Description { get; set; }
        new INotifyingSetItem<String> Description_Property { get; }

        new INotifyingList<FormIDSetLink<Spell>> Spells { get; }
        new INotifyingList<Relation> Relations { get; }
        new INotifyingList<SkillBoost> SkillBoosts { get; }
        new Byte[] Fluff { get; set; }
        new INotifyingItem<Byte[]> Fluff_Property { get; }

        new Single MaleHeight { get; set; }
        new INotifyingItem<Single> MaleHeight_Property { get; }

        new Single FemaleHeight { get; set; }
        new INotifyingItem<Single> FemaleHeight_Property { get; }

        new Single MaleWeight { get; set; }
        new INotifyingItem<Single> MaleWeight_Property { get; }

        new Single FemaleWeight { get; set; }
        new INotifyingItem<Single> FemaleWeight_Property { get; }

        new Race.Flag Flags { get; set; }
        new INotifyingItem<Race.Flag> Flags_Property { get; }

        new RaceVoices Voices { get; set; }
        new INotifyingSetItem<RaceVoices> Voices_Property { get; }

        new RaceHair DefaultHair { get; set; }
        new INotifyingSetItem<RaceHair> DefaultHair_Property { get; }

        new Byte DefaultHairColor { get; set; }
        new INotifyingSetItem<Byte> DefaultHairColor_Property { get; }

        new Int32 FaceGenMainClamp { get; set; }
        new INotifyingSetItem<Int32> FaceGenMainClamp_Property { get; }

        new Int32 FaceGenFaceClamp { get; set; }
        new INotifyingSetItem<Int32> FaceGenFaceClamp_Property { get; }

        new RaceStatsGendered RaceStats { get; set; }
        new INotifyingSetItem<RaceStatsGendered> RaceStats_Property { get; }

        new INotifyingList<FacePart> FaceData { get; }
        new GenderedBodyData BodyData { get; set; }
        new INotifyingSetItem<GenderedBodyData> BodyData_Property { get; }

        new INotifyingList<FormIDLink<Hair>> Hairs { get; }
        new INotifyingList<FormIDLink<Eye>> Eyes { get; }
        new FaceGenData FaceGenData { get; set; }
        new INotifyingSetItem<FaceGenData> FaceGenData_Property { get; }

        new Byte[] Unknown { get; set; }
        new INotifyingSetItem<Byte[]> Unknown_Property { get; }

    }

    public interface IRaceGetter : INamedMajorRecordGetter
    {
        #region Description
        String Description { get; }
        INotifyingSetItemGetter<String> Description_Property { get; }

        #endregion
        #region Spells
        INotifyingListGetter<FormIDSetLink<Spell>> Spells { get; }
        #endregion
        #region Relations
        INotifyingListGetter<Relation> Relations { get; }
        #endregion
        #region SkillBoosts
        INotifyingListGetter<SkillBoost> SkillBoosts { get; }
        #endregion
        #region Fluff
        Byte[] Fluff { get; }
        INotifyingItemGetter<Byte[]> Fluff_Property { get; }

        #endregion
        #region MaleHeight
        Single MaleHeight { get; }
        INotifyingItemGetter<Single> MaleHeight_Property { get; }

        #endregion
        #region FemaleHeight
        Single FemaleHeight { get; }
        INotifyingItemGetter<Single> FemaleHeight_Property { get; }

        #endregion
        #region MaleWeight
        Single MaleWeight { get; }
        INotifyingItemGetter<Single> MaleWeight_Property { get; }

        #endregion
        #region FemaleWeight
        Single FemaleWeight { get; }
        INotifyingItemGetter<Single> FemaleWeight_Property { get; }

        #endregion
        #region Flags
        Race.Flag Flags { get; }
        INotifyingItemGetter<Race.Flag> Flags_Property { get; }

        #endregion
        #region Voices
        RaceVoices Voices { get; }
        INotifyingSetItemGetter<RaceVoices> Voices_Property { get; }

        #endregion
        #region DefaultHair
        RaceHair DefaultHair { get; }
        INotifyingSetItemGetter<RaceHair> DefaultHair_Property { get; }

        #endregion
        #region DefaultHairColor
        Byte DefaultHairColor { get; }
        INotifyingSetItemGetter<Byte> DefaultHairColor_Property { get; }

        #endregion
        #region FaceGenMainClamp
        Int32 FaceGenMainClamp { get; }
        INotifyingSetItemGetter<Int32> FaceGenMainClamp_Property { get; }

        #endregion
        #region FaceGenFaceClamp
        Int32 FaceGenFaceClamp { get; }
        INotifyingSetItemGetter<Int32> FaceGenFaceClamp_Property { get; }

        #endregion
        #region RaceStats
        RaceStatsGendered RaceStats { get; }
        INotifyingSetItemGetter<RaceStatsGendered> RaceStats_Property { get; }

        #endregion
        #region FaceData
        INotifyingListGetter<FacePart> FaceData { get; }
        #endregion
        #region BodyData
        GenderedBodyData BodyData { get; }
        INotifyingSetItemGetter<GenderedBodyData> BodyData_Property { get; }

        #endregion
        #region Hairs
        INotifyingListGetter<FormIDLink<Hair>> Hairs { get; }
        #endregion
        #region Eyes
        INotifyingListGetter<FormIDLink<Eye>> Eyes { get; }
        #endregion
        #region FaceGenData
        FaceGenData FaceGenData { get; }
        INotifyingSetItemGetter<FaceGenData> FaceGenData_Property { get; }

        #endregion
        #region Unknown
        Byte[] Unknown { get; }
        INotifyingSetItemGetter<Byte[]> Unknown_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Race_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
        Description = 6,
        Spells = 7,
        Relations = 8,
        SkillBoosts = 9,
        Fluff = 10,
        MaleHeight = 11,
        FemaleHeight = 12,
        MaleWeight = 13,
        FemaleWeight = 14,
        Flags = 15,
        Voices = 16,
        DefaultHair = 17,
        DefaultHairColor = 18,
        FaceGenMainClamp = 19,
        FaceGenFaceClamp = 20,
        RaceStats = 21,
        FaceData = 22,
        BodyData = 23,
        Hairs = 24,
        Eyes = 25,
        FaceGenData = 26,
        Unknown = 27,
    }
    #endregion

    #region Registration
    public class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "265136e6-60a6-4ade-a7c4-b31197fb95e5";

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(Race_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race_ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type CommonType = typeof(RaceCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DESCRIPTION":
                    return (ushort)Race_FieldIndex.Description;
                case "SPELLS":
                    return (ushort)Race_FieldIndex.Spells;
                case "RELATIONS":
                    return (ushort)Race_FieldIndex.Relations;
                case "SKILLBOOSTS":
                    return (ushort)Race_FieldIndex.SkillBoosts;
                case "FLUFF":
                    return (ushort)Race_FieldIndex.Fluff;
                case "MALEHEIGHT":
                    return (ushort)Race_FieldIndex.MaleHeight;
                case "FEMALEHEIGHT":
                    return (ushort)Race_FieldIndex.FemaleHeight;
                case "MALEWEIGHT":
                    return (ushort)Race_FieldIndex.MaleWeight;
                case "FEMALEWEIGHT":
                    return (ushort)Race_FieldIndex.FemaleWeight;
                case "FLAGS":
                    return (ushort)Race_FieldIndex.Flags;
                case "VOICES":
                    return (ushort)Race_FieldIndex.Voices;
                case "DEFAULTHAIR":
                    return (ushort)Race_FieldIndex.DefaultHair;
                case "DEFAULTHAIRCOLOR":
                    return (ushort)Race_FieldIndex.DefaultHairColor;
                case "FACEGENMAINCLAMP":
                    return (ushort)Race_FieldIndex.FaceGenMainClamp;
                case "FACEGENFACECLAMP":
                    return (ushort)Race_FieldIndex.FaceGenFaceClamp;
                case "RACESTATS":
                    return (ushort)Race_FieldIndex.RaceStats;
                case "FACEDATA":
                    return (ushort)Race_FieldIndex.FaceData;
                case "BODYDATA":
                    return (ushort)Race_FieldIndex.BodyData;
                case "HAIRS":
                    return (ushort)Race_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)Race_FieldIndex.Eyes;
                case "FACEGENDATA":
                    return (ushort)Race_FieldIndex.FaceGenData;
                case "UNKNOWN":
                    return (ushort)Race_FieldIndex.Unknown;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                    return true;
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                    return true;
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return "Description";
                case Race_FieldIndex.Spells:
                    return "Spells";
                case Race_FieldIndex.Relations:
                    return "Relations";
                case Race_FieldIndex.SkillBoosts:
                    return "SkillBoosts";
                case Race_FieldIndex.Fluff:
                    return "Fluff";
                case Race_FieldIndex.MaleHeight:
                    return "MaleHeight";
                case Race_FieldIndex.FemaleHeight:
                    return "FemaleHeight";
                case Race_FieldIndex.MaleWeight:
                    return "MaleWeight";
                case Race_FieldIndex.FemaleWeight:
                    return "FemaleWeight";
                case Race_FieldIndex.Flags:
                    return "Flags";
                case Race_FieldIndex.Voices:
                    return "Voices";
                case Race_FieldIndex.DefaultHair:
                    return "DefaultHair";
                case Race_FieldIndex.DefaultHairColor:
                    return "DefaultHairColor";
                case Race_FieldIndex.FaceGenMainClamp:
                    return "FaceGenMainClamp";
                case Race_FieldIndex.FaceGenFaceClamp:
                    return "FaceGenFaceClamp";
                case Race_FieldIndex.RaceStats:
                    return "RaceStats";
                case Race_FieldIndex.FaceData:
                    return "FaceData";
                case Race_FieldIndex.BodyData:
                    return "BodyData";
                case Race_FieldIndex.Hairs:
                    return "Hairs";
                case Race_FieldIndex.Eyes:
                    return "Eyes";
                case Race_FieldIndex.FaceGenData:
                    return "FaceGenData";
                case Race_FieldIndex.Unknown:
                    return "Unknown";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return typeof(String);
                case Race_FieldIndex.Spells:
                    return typeof(NotifyingList<FormIDSetLink<Spell>>);
                case Race_FieldIndex.Relations:
                    return typeof(NotifyingList<Relation>);
                case Race_FieldIndex.SkillBoosts:
                    return typeof(NotifyingList<SkillBoost>);
                case Race_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case Race_FieldIndex.MaleHeight:
                    return typeof(Single);
                case Race_FieldIndex.FemaleHeight:
                    return typeof(Single);
                case Race_FieldIndex.MaleWeight:
                    return typeof(Single);
                case Race_FieldIndex.FemaleWeight:
                    return typeof(Single);
                case Race_FieldIndex.Flags:
                    return typeof(Race.Flag);
                case Race_FieldIndex.Voices:
                    return typeof(RaceVoices);
                case Race_FieldIndex.DefaultHair:
                    return typeof(RaceHair);
                case Race_FieldIndex.DefaultHairColor:
                    return typeof(Byte);
                case Race_FieldIndex.FaceGenMainClamp:
                    return typeof(Int32);
                case Race_FieldIndex.FaceGenFaceClamp:
                    return typeof(Int32);
                case Race_FieldIndex.RaceStats:
                    return typeof(RaceStatsGendered);
                case Race_FieldIndex.FaceData:
                    return typeof(NotifyingList<FacePart>);
                case Race_FieldIndex.BodyData:
                    return typeof(GenderedBodyData);
                case Race_FieldIndex.Hairs:
                    return typeof(NotifyingList<FormIDLink<Hair>>);
                case Race_FieldIndex.Eyes:
                    return typeof(NotifyingList<FormIDLink<Eye>>);
                case Race_FieldIndex.FaceGenData:
                    return typeof(FaceGenData);
                case Race_FieldIndex.Unknown:
                    return typeof(Byte[]);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType VNAM_HEADER = new RecordType("VNAM");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType UNAM_HEADER = new RecordType("UNAM");
        public static readonly RecordType ATTR_HEADER = new RecordType("ATTR");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType FGGS_HEADER = new RecordType("FGGS");
        public static readonly RecordType FGGA_HEADER = new RecordType("FGGA");
        public static readonly RecordType FGTS_HEADER = new RecordType("FGTS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RACE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 15;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RaceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            RaceCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            out Race_ErrorMask errorMask,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            RaceCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            IRaceGetter def,
            bool doMasks,
            out Race_ErrorMask errorMask,
            Race_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            Race_ErrorMask retErrorMask = null;
            Func<Race_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Race_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            IRaceGetter def,
            bool doMasks,
            Func<Race_ErrorMask> errorMask,
            Race_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Description ?? true)
            {
                try
                {
                    item.Description_Property.SetToWithDefault(
                        rhs: rhs.Description_Property,
                        def: def?.Description_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Description, ex);
                }
            }
            if (copyMask?.Spells != CopyOption.Skip)
            {
                try
                {
                    item.Spells.SetToWithDefault(
                        rhs.Spells,
                        def?.Spells,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Spells, ex);
                }
            }
            if (copyMask?.Relations.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Relations.SetToWithDefault(
                        rhs: rhs.Relations,
                        def: def?.Relations,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Relations.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Relation);
                                    return Relation.Copy(
                                        r,
                                        copyMask?.Relations?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Relations.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Relations, ex);
                }
            }
            if (copyMask?.SkillBoosts.Overall != CopyOption.Skip)
            {
                try
                {
                    item.SkillBoosts.SetToWithDefault(
                        rhs: rhs.SkillBoosts,
                        def: def?.SkillBoosts,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.SkillBoosts.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(SkillBoost);
                                    return SkillBoost.Copy(
                                        r,
                                        copyMask?.SkillBoosts?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.SkillBoosts.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.SkillBoosts, ex);
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                try
                {
                    item.Fluff_Property.Set(
                        value: rhs.Fluff,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Fluff, ex);
                }
            }
            if (copyMask?.MaleHeight ?? true)
            {
                try
                {
                    item.MaleHeight_Property.Set(
                        value: rhs.MaleHeight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.MaleHeight, ex);
                }
            }
            if (copyMask?.FemaleHeight ?? true)
            {
                try
                {
                    item.FemaleHeight_Property.Set(
                        value: rhs.FemaleHeight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.FemaleHeight, ex);
                }
            }
            if (copyMask?.MaleWeight ?? true)
            {
                try
                {
                    item.MaleWeight_Property.Set(
                        value: rhs.MaleWeight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.MaleWeight, ex);
                }
            }
            if (copyMask?.FemaleWeight ?? true)
            {
                try
                {
                    item.FemaleWeight_Property.Set(
                        value: rhs.FemaleWeight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.FemaleWeight, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.Voices.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Voices_Property.SetToWithDefault(
                        rhs.Voices_Property,
                        def?.Voices_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Voices.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RaceVoicesCommon.CopyFieldsFrom(
                                        item: item.Voices,
                                        rhs: rhs.Voices,
                                        def: def?.Voices,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RaceVoices_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Voices.Specific == null)
                                            {
                                                baseMask.Voices = new MaskItem<Exception, RaceVoices_ErrorMask>(null, new RaceVoices_ErrorMask());
                                            }
                                            return baseMask.Voices.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Voices.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RaceVoices);
                                    return RaceVoices.Copy(
                                        r,
                                        copyMask?.Voices?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Voices?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Voices, ex);
                }
            }
            if (copyMask?.DefaultHair.Overall != CopyOption.Skip)
            {
                try
                {
                    item.DefaultHair_Property.SetToWithDefault(
                        rhs.DefaultHair_Property,
                        def?.DefaultHair_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.DefaultHair.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RaceHairCommon.CopyFieldsFrom(
                                        item: item.DefaultHair,
                                        rhs: rhs.DefaultHair,
                                        def: def?.DefaultHair,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RaceHair_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.DefaultHair.Specific == null)
                                            {
                                                baseMask.DefaultHair = new MaskItem<Exception, RaceHair_ErrorMask>(null, new RaceHair_ErrorMask());
                                            }
                                            return baseMask.DefaultHair.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.DefaultHair.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RaceHair);
                                    return RaceHair.Copy(
                                        r,
                                        copyMask?.DefaultHair?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.DefaultHair?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.DefaultHair, ex);
                }
            }
            if (copyMask?.DefaultHairColor ?? true)
            {
                try
                {
                    item.DefaultHairColor_Property.SetToWithDefault(
                        rhs: rhs.DefaultHairColor_Property,
                        def: def?.DefaultHairColor_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.DefaultHairColor, ex);
                }
            }
            if (copyMask?.FaceGenMainClamp ?? true)
            {
                try
                {
                    item.FaceGenMainClamp_Property.SetToWithDefault(
                        rhs: rhs.FaceGenMainClamp_Property,
                        def: def?.FaceGenMainClamp_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.FaceGenMainClamp, ex);
                }
            }
            if (copyMask?.FaceGenFaceClamp ?? true)
            {
                try
                {
                    item.FaceGenFaceClamp_Property.SetToWithDefault(
                        rhs: rhs.FaceGenFaceClamp_Property,
                        def: def?.FaceGenFaceClamp_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.FaceGenFaceClamp, ex);
                }
            }
            if (copyMask?.RaceStats.Overall != CopyOption.Skip)
            {
                try
                {
                    item.RaceStats_Property.SetToWithDefault(
                        rhs.RaceStats_Property,
                        def?.RaceStats_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RaceStats.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RaceStatsGenderedCommon.CopyFieldsFrom(
                                        item: item.RaceStats,
                                        rhs: rhs.RaceStats,
                                        def: def?.RaceStats,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RaceStatsGendered_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.RaceStats.Specific == null)
                                            {
                                                baseMask.RaceStats = new MaskItem<Exception, RaceStatsGendered_ErrorMask>(null, new RaceStatsGendered_ErrorMask());
                                            }
                                            return baseMask.RaceStats.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.RaceStats.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RaceStatsGendered);
                                    return RaceStatsGendered.Copy(
                                        r,
                                        copyMask?.RaceStats?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RaceStats?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.RaceStats, ex);
                }
            }
            if (copyMask?.FaceData.Overall != CopyOption.Skip)
            {
                try
                {
                    item.FaceData.SetToWithDefault(
                        rhs: rhs.FaceData,
                        def: def?.FaceData,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.FaceData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(FacePart);
                                    return FacePart.Copy(
                                        r,
                                        copyMask?.FaceData?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.FaceData.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.FaceData, ex);
                }
            }
            if (copyMask?.BodyData.Overall != CopyOption.Skip)
            {
                try
                {
                    item.BodyData_Property.SetToWithDefault(
                        rhs.BodyData_Property,
                        def?.BodyData_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.BodyData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    GenderedBodyDataCommon.CopyFieldsFrom(
                                        item: item.BodyData,
                                        rhs: rhs.BodyData,
                                        def: def?.BodyData,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<GenderedBodyData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.BodyData.Specific == null)
                                            {
                                                baseMask.BodyData = new MaskItem<Exception, GenderedBodyData_ErrorMask>(null, new GenderedBodyData_ErrorMask());
                                            }
                                            return baseMask.BodyData.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.BodyData.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(GenderedBodyData);
                                    return GenderedBodyData.Copy(
                                        r,
                                        copyMask?.BodyData?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.BodyData?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.BodyData, ex);
                }
            }
            if (copyMask?.Hairs != CopyOption.Skip)
            {
                try
                {
                    item.Hairs.SetToWithDefault(
                        rhs.Hairs,
                        def?.Hairs,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Hairs, ex);
                }
            }
            if (copyMask?.Eyes != CopyOption.Skip)
            {
                try
                {
                    item.Eyes.SetToWithDefault(
                        rhs.Eyes,
                        def?.Eyes,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Eyes, ex);
                }
            }
            if (copyMask?.FaceGenData.Overall != CopyOption.Skip)
            {
                try
                {
                    item.FaceGenData_Property.SetToWithDefault(
                        rhs.FaceGenData_Property,
                        def?.FaceGenData_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.FaceGenData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    FaceGenDataCommon.CopyFieldsFrom(
                                        item: item.FaceGenData,
                                        rhs: rhs.FaceGenData,
                                        def: def?.FaceGenData,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<FaceGenData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.FaceGenData.Specific == null)
                                            {
                                                baseMask.FaceGenData = new MaskItem<Exception, FaceGenData_ErrorMask>(null, new FaceGenData_ErrorMask());
                                            }
                                            return baseMask.FaceGenData.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.FaceGenData.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(FaceGenData);
                                    return FaceGenData.Copy(
                                        r,
                                        copyMask?.FaceGenData?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.FaceGenData?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.FaceGenData, ex);
                }
            }
            if (copyMask?.Unknown ?? true)
            {
                try
                {
                    item.Unknown_Property.SetToWithDefault(
                        rhs: rhs.Unknown_Property,
                        def: def?.Unknown_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Unknown, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRace obj,
            NotifyingFireParameters cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Race_FieldIndex.Description:
                    obj.Description_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Spells:
                    obj.Spells.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Relations:
                    obj.Relations.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Voices:
                    obj.Voices_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.DefaultHair:
                    obj.DefaultHair_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    obj.DefaultHairColor_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    obj.FaceGenMainClamp_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    obj.FaceGenFaceClamp_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.RaceStats:
                    obj.RaceStats_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.FaceData:
                    obj.FaceData.HasBeenSet = on;
                    break;
                case Race_FieldIndex.BodyData:
                    obj.BodyData_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Hairs:
                    obj.Hairs.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Eyes:
                    obj.Eyes.HasBeenSet = on;
                    break;
                case Race_FieldIndex.FaceGenData:
                    obj.FaceGenData_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Unknown:
                    obj.Unknown_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRace obj,
            NotifyingUnsetParameters cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    obj.Description_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.Spells:
                    obj.Spells.Unset(cmds);
                    break;
                case Race_FieldIndex.Relations:
                    obj.Relations.Unset(cmds);
                    break;
                case Race_FieldIndex.SkillBoosts:
                    obj.SkillBoosts.Unset(cmds);
                    break;
                case Race_FieldIndex.Fluff:
                    obj.Fluff = default(Byte[]);
                    break;
                case Race_FieldIndex.MaleHeight:
                    obj.MaleHeight = default(Single);
                    break;
                case Race_FieldIndex.FemaleHeight:
                    obj.FemaleHeight = default(Single);
                    break;
                case Race_FieldIndex.MaleWeight:
                    obj.MaleWeight = default(Single);
                    break;
                case Race_FieldIndex.FemaleWeight:
                    obj.FemaleWeight = default(Single);
                    break;
                case Race_FieldIndex.Flags:
                    obj.Flags = default(Race.Flag);
                    break;
                case Race_FieldIndex.Voices:
                    obj.Voices_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.DefaultHair:
                    obj.DefaultHair_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    obj.DefaultHairColor_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    obj.FaceGenMainClamp_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    obj.FaceGenFaceClamp_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.RaceStats:
                    obj.RaceStats_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.FaceData:
                    obj.FaceData.Unset(cmds);
                    break;
                case Race_FieldIndex.BodyData:
                    obj.BodyData_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.Hairs:
                    obj.Hairs.Unset(cmds);
                    break;
                case Race_FieldIndex.Eyes:
                    obj.Eyes.Unset(cmds);
                    break;
                case Race_FieldIndex.FaceGenData:
                    obj.FaceGenData_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.Unknown:
                    obj.Unknown_Property.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRace obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.SkillBoosts:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                    return true;
                case Race_FieldIndex.Description:
                    return obj.Description_Property.HasBeenSet;
                case Race_FieldIndex.Spells:
                    return obj.Spells.HasBeenSet;
                case Race_FieldIndex.Relations:
                    return obj.Relations.HasBeenSet;
                case Race_FieldIndex.Voices:
                    return obj.Voices_Property.HasBeenSet;
                case Race_FieldIndex.DefaultHair:
                    return obj.DefaultHair_Property.HasBeenSet;
                case Race_FieldIndex.DefaultHairColor:
                    return obj.DefaultHairColor_Property.HasBeenSet;
                case Race_FieldIndex.FaceGenMainClamp:
                    return obj.FaceGenMainClamp_Property.HasBeenSet;
                case Race_FieldIndex.FaceGenFaceClamp:
                    return obj.FaceGenFaceClamp_Property.HasBeenSet;
                case Race_FieldIndex.RaceStats:
                    return obj.RaceStats_Property.HasBeenSet;
                case Race_FieldIndex.FaceData:
                    return obj.FaceData.HasBeenSet;
                case Race_FieldIndex.BodyData:
                    return obj.BodyData_Property.HasBeenSet;
                case Race_FieldIndex.Hairs:
                    return obj.Hairs.HasBeenSet;
                case Race_FieldIndex.Eyes:
                    return obj.Eyes.HasBeenSet;
                case Race_FieldIndex.FaceGenData:
                    return obj.FaceGenData_Property.HasBeenSet;
                case Race_FieldIndex.Unknown:
                    return obj.Unknown_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceGetter obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return obj.Description;
                case Race_FieldIndex.Spells:
                    return obj.Spells;
                case Race_FieldIndex.Relations:
                    return obj.Relations;
                case Race_FieldIndex.SkillBoosts:
                    return obj.SkillBoosts;
                case Race_FieldIndex.Fluff:
                    return obj.Fluff;
                case Race_FieldIndex.MaleHeight:
                    return obj.MaleHeight;
                case Race_FieldIndex.FemaleHeight:
                    return obj.FemaleHeight;
                case Race_FieldIndex.MaleWeight:
                    return obj.MaleWeight;
                case Race_FieldIndex.FemaleWeight:
                    return obj.FemaleWeight;
                case Race_FieldIndex.Flags:
                    return obj.Flags;
                case Race_FieldIndex.Voices:
                    return obj.Voices;
                case Race_FieldIndex.DefaultHair:
                    return obj.DefaultHair;
                case Race_FieldIndex.DefaultHairColor:
                    return obj.DefaultHairColor;
                case Race_FieldIndex.FaceGenMainClamp:
                    return obj.FaceGenMainClamp;
                case Race_FieldIndex.FaceGenFaceClamp:
                    return obj.FaceGenFaceClamp;
                case Race_FieldIndex.RaceStats:
                    return obj.RaceStats;
                case Race_FieldIndex.FaceData:
                    return obj.FaceData;
                case Race_FieldIndex.BodyData:
                    return obj.BodyData;
                case Race_FieldIndex.Hairs:
                    return obj.Hairs;
                case Race_FieldIndex.Eyes:
                    return obj.Eyes;
                case Race_FieldIndex.FaceGenData:
                    return obj.FaceGenData;
                case Race_FieldIndex.Unknown:
                    return obj.Unknown;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRace item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Description_Property.Unset(cmds.ToUnsetParams());
            item.Spells.Unset(cmds.ToUnsetParams());
            item.Relations.Unset(cmds.ToUnsetParams());
            item.SkillBoosts.Unset(cmds.ToUnsetParams());
            item.Fluff = default(Byte[]);
            item.MaleHeight = default(Single);
            item.FemaleHeight = default(Single);
            item.MaleWeight = default(Single);
            item.FemaleWeight = default(Single);
            item.Flags = default(Race.Flag);
            item.Voices_Property.Unset(cmds.ToUnsetParams());
            item.DefaultHair_Property.Unset(cmds.ToUnsetParams());
            item.DefaultHairColor_Property.Unset(cmds.ToUnsetParams());
            item.FaceGenMainClamp_Property.Unset(cmds.ToUnsetParams());
            item.FaceGenFaceClamp_Property.Unset(cmds.ToUnsetParams());
            item.RaceStats_Property.Unset(cmds.ToUnsetParams());
            item.FaceData.Unset(cmds.ToUnsetParams());
            item.BodyData_Property.Unset(cmds.ToUnsetParams());
            item.Hairs.Unset(cmds.ToUnsetParams());
            item.Eyes.Unset(cmds.ToUnsetParams());
            item.FaceGenData_Property.Unset(cmds.ToUnsetParams());
            item.Unknown_Property.Unset(cmds.ToUnsetParams());
        }

        public static Race_Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs)
        {
            var ret = new Race_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Description = item.Description_Property.Equals(rhs.Description_Property, (l, r) => object.Equals(l, r));
            if (item.Spells.HasBeenSet == rhs.Spells.HasBeenSet)
            {
                if (item.Spells.HasBeenSet)
                {
                    ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Spells.Specific = item.Spells.SelectAgainst<FormIDSetLink<Spell>, bool>(rhs.Spells, ((l, r) => object.Equals(l, r)), out ret.Spells.Overall);
                    ret.Spells.Overall = ret.Spells.Overall && ret.Spells.Specific.All((b) => b);
                }
                else
                {
                    ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Spells.Overall = true;
                }
            }
            else
            {
                ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                ret.Spells.Overall = false;
            }
            if (item.Relations.HasBeenSet == rhs.Relations.HasBeenSet)
            {
                if (item.Relations.HasBeenSet)
                {
                    ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                    ret.Relations.Specific = item.Relations.SelectAgainst<Relation, MaskItem<bool, Relation_Mask<bool>>>(rhs.Relations, ((l, r) =>
                    {
                        MaskItem<bool, Relation_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => RelationCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.Relations.Overall);
                    ret.Relations.Overall = ret.Relations.Overall && ret.Relations.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                    ret.Relations.Overall = true;
                }
            }
            else
            {
                ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                ret.Relations.Overall = false;
            }
            if (item.SkillBoosts.HasBeenSet == rhs.SkillBoosts.HasBeenSet)
            {
                if (item.SkillBoosts.HasBeenSet)
                {
                    ret.SkillBoosts = new MaskItem<bool, IEnumerable<MaskItem<bool, SkillBoost_Mask<bool>>>>();
                    ret.SkillBoosts.Specific = item.SkillBoosts.SelectAgainst<SkillBoost, MaskItem<bool, SkillBoost_Mask<bool>>>(rhs.SkillBoosts, ((l, r) =>
                    {
                        MaskItem<bool, SkillBoost_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, SkillBoost_Mask<bool>>();
                        itemRet.Specific = SkillBoostCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.SkillBoosts.Overall);
                    ret.SkillBoosts.Overall = ret.SkillBoosts.Overall && ret.SkillBoosts.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.SkillBoosts = new MaskItem<bool, IEnumerable<MaskItem<bool, SkillBoost_Mask<bool>>>>();
                    ret.SkillBoosts.Overall = true;
                }
            }
            else
            {
                ret.SkillBoosts = new MaskItem<bool, IEnumerable<MaskItem<bool, SkillBoost_Mask<bool>>>>();
                ret.SkillBoosts.Overall = false;
            }
            ret.Fluff = item.Fluff.EqualsFast(rhs.Fluff);
            ret.MaleHeight = item.MaleHeight == rhs.MaleHeight;
            ret.FemaleHeight = item.FemaleHeight == rhs.FemaleHeight;
            ret.MaleWeight = item.MaleWeight == rhs.MaleWeight;
            ret.FemaleWeight = item.FemaleWeight == rhs.FemaleWeight;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Voices = item.Voices_Property.LoquiEqualsHelper(rhs.Voices_Property, (loqLhs, loqRhs) => RaceVoicesCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.DefaultHair = item.DefaultHair_Property.LoquiEqualsHelper(rhs.DefaultHair_Property, (loqLhs, loqRhs) => RaceHairCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.DefaultHairColor = item.DefaultHairColor_Property.Equals(rhs.DefaultHairColor_Property, (l, r) => l == r);
            ret.FaceGenMainClamp = item.FaceGenMainClamp_Property.Equals(rhs.FaceGenMainClamp_Property, (l, r) => l == r);
            ret.FaceGenFaceClamp = item.FaceGenFaceClamp_Property.Equals(rhs.FaceGenFaceClamp_Property, (l, r) => l == r);
            ret.RaceStats = item.RaceStats_Property.LoquiEqualsHelper(rhs.RaceStats_Property, (loqLhs, loqRhs) => RaceStatsGenderedCommon.GetEqualsMask(loqLhs, loqRhs));
            if (item.FaceData.HasBeenSet == rhs.FaceData.HasBeenSet)
            {
                if (item.FaceData.HasBeenSet)
                {
                    ret.FaceData = new MaskItem<bool, IEnumerable<MaskItem<bool, FacePart_Mask<bool>>>>();
                    ret.FaceData.Specific = item.FaceData.SelectAgainst<FacePart, MaskItem<bool, FacePart_Mask<bool>>>(rhs.FaceData, ((l, r) =>
                    {
                        MaskItem<bool, FacePart_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => FacePartCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.FaceData.Overall);
                    ret.FaceData.Overall = ret.FaceData.Overall && ret.FaceData.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.FaceData = new MaskItem<bool, IEnumerable<MaskItem<bool, FacePart_Mask<bool>>>>();
                    ret.FaceData.Overall = true;
                }
            }
            else
            {
                ret.FaceData = new MaskItem<bool, IEnumerable<MaskItem<bool, FacePart_Mask<bool>>>>();
                ret.FaceData.Overall = false;
            }
            ret.BodyData = item.BodyData_Property.LoquiEqualsHelper(rhs.BodyData_Property, (loqLhs, loqRhs) => GenderedBodyDataCommon.GetEqualsMask(loqLhs, loqRhs));
            if (item.Hairs.HasBeenSet == rhs.Hairs.HasBeenSet)
            {
                if (item.Hairs.HasBeenSet)
                {
                    ret.Hairs = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Hairs.Specific = item.Hairs.SelectAgainst<FormIDLink<Hair>, bool>(rhs.Hairs, ((l, r) => object.Equals(l, r)), out ret.Hairs.Overall);
                    ret.Hairs.Overall = ret.Hairs.Overall && ret.Hairs.Specific.All((b) => b);
                }
                else
                {
                    ret.Hairs = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Hairs.Overall = true;
                }
            }
            else
            {
                ret.Hairs = new MaskItem<bool, IEnumerable<bool>>();
                ret.Hairs.Overall = false;
            }
            if (item.Eyes.HasBeenSet == rhs.Eyes.HasBeenSet)
            {
                if (item.Eyes.HasBeenSet)
                {
                    ret.Eyes = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Eyes.Specific = item.Eyes.SelectAgainst<FormIDLink<Eye>, bool>(rhs.Eyes, ((l, r) => object.Equals(l, r)), out ret.Eyes.Overall);
                    ret.Eyes.Overall = ret.Eyes.Overall && ret.Eyes.Specific.All((b) => b);
                }
                else
                {
                    ret.Eyes = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Eyes.Overall = true;
                }
            }
            else
            {
                ret.Eyes = new MaskItem<bool, IEnumerable<bool>>();
                ret.Eyes.Overall = false;
            }
            ret.FaceGenData = item.FaceGenData_Property.LoquiEqualsHelper(rhs.FaceGenData_Property, (loqLhs, loqRhs) => FaceGenDataCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Unknown = item.Unknown_Property.Equals(rhs.Unknown_Property, (l, r) => l.EqualsFast(r));
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRaceGetter item,
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceGetter item,
            FileGeneration fg,
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Race)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Race)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Spells)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Relations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SkillBoosts?.Overall ?? true)
                {
                    fg.AppendLine("SkillBoosts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SkillBoosts)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.MaleHeight ?? true)
                {
                    fg.AppendLine($"MaleHeight => {item.MaleHeight}");
                }
                if (printMask?.FemaleHeight ?? true)
                {
                    fg.AppendLine($"FemaleHeight => {item.FemaleHeight}");
                }
                if (printMask?.MaleWeight ?? true)
                {
                    fg.AppendLine($"MaleWeight => {item.MaleWeight}");
                }
                if (printMask?.FemaleWeight ?? true)
                {
                    fg.AppendLine($"FemaleWeight => {item.FemaleWeight}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Voices?.Overall ?? true)
                {
                    item.Voices?.ToString(fg, "Voices");
                }
                if (printMask?.DefaultHair?.Overall ?? true)
                {
                    item.DefaultHair?.ToString(fg, "DefaultHair");
                }
                if (printMask?.DefaultHairColor ?? true)
                {
                    fg.AppendLine($"DefaultHairColor => {item.DefaultHairColor}");
                }
                if (printMask?.FaceGenMainClamp ?? true)
                {
                    fg.AppendLine($"FaceGenMainClamp => {item.FaceGenMainClamp}");
                }
                if (printMask?.FaceGenFaceClamp ?? true)
                {
                    fg.AppendLine($"FaceGenFaceClamp => {item.FaceGenFaceClamp}");
                }
                if (printMask?.RaceStats?.Overall ?? true)
                {
                    item.RaceStats?.ToString(fg, "RaceStats");
                }
                if (printMask?.FaceData?.Overall ?? true)
                {
                    fg.AppendLine("FaceData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.FaceData)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.BodyData?.Overall ?? true)
                {
                    item.BodyData?.ToString(fg, "BodyData");
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    fg.AppendLine("Hairs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Hairs)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Eyes)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FaceGenData?.Overall ?? true)
                {
                    item.FaceGenData?.ToString(fg, "FaceGenData");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {item.Unknown}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceGetter item,
            Race_Mask<bool?> checkMask)
        {
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_Property.HasBeenSet) return false;
            if (checkMask.Spells.Overall.HasValue && checkMask.Spells.Overall.Value != item.Spells.HasBeenSet) return false;
            if (checkMask.Relations.Overall.HasValue && checkMask.Relations.Overall.Value != item.Relations.HasBeenSet) return false;
            if (checkMask.SkillBoosts.Overall.HasValue && checkMask.SkillBoosts.Overall.Value != item.SkillBoosts.HasBeenSet) return false;
            if (checkMask.Voices.Overall.HasValue && checkMask.Voices.Overall.Value != item.Voices_Property.HasBeenSet) return false;
            if (checkMask.Voices.Specific != null && (item.Voices_Property.Item == null || !item.Voices_Property.Item.HasBeenSet(checkMask.Voices.Specific))) return false;
            if (checkMask.DefaultHair.Overall.HasValue && checkMask.DefaultHair.Overall.Value != item.DefaultHair_Property.HasBeenSet) return false;
            if (checkMask.DefaultHair.Specific != null && (item.DefaultHair_Property.Item == null || !item.DefaultHair_Property.Item.HasBeenSet(checkMask.DefaultHair.Specific))) return false;
            if (checkMask.DefaultHairColor.HasValue && checkMask.DefaultHairColor.Value != item.DefaultHairColor_Property.HasBeenSet) return false;
            if (checkMask.FaceGenMainClamp.HasValue && checkMask.FaceGenMainClamp.Value != item.FaceGenMainClamp_Property.HasBeenSet) return false;
            if (checkMask.FaceGenFaceClamp.HasValue && checkMask.FaceGenFaceClamp.Value != item.FaceGenFaceClamp_Property.HasBeenSet) return false;
            if (checkMask.RaceStats.Overall.HasValue && checkMask.RaceStats.Overall.Value != item.RaceStats_Property.HasBeenSet) return false;
            if (checkMask.RaceStats.Specific != null && (item.RaceStats_Property.Item == null || !item.RaceStats_Property.Item.HasBeenSet(checkMask.RaceStats.Specific))) return false;
            if (checkMask.FaceData.Overall.HasValue && checkMask.FaceData.Overall.Value != item.FaceData.HasBeenSet) return false;
            if (checkMask.BodyData.Overall.HasValue && checkMask.BodyData.Overall.Value != item.BodyData_Property.HasBeenSet) return false;
            if (checkMask.BodyData.Specific != null && (item.BodyData_Property.Item == null || !item.BodyData_Property.Item.HasBeenSet(checkMask.BodyData.Specific))) return false;
            if (checkMask.Hairs.Overall.HasValue && checkMask.Hairs.Overall.Value != item.Hairs.HasBeenSet) return false;
            if (checkMask.Eyes.Overall.HasValue && checkMask.Eyes.Overall.Value != item.Eyes.HasBeenSet) return false;
            if (checkMask.FaceGenData.Overall.HasValue && checkMask.FaceGenData.Overall.Value != item.FaceGenData_Property.HasBeenSet) return false;
            if (checkMask.FaceGenData.Specific != null && (item.FaceGenData_Property.Item == null || !item.FaceGenData_Property.Item.HasBeenSet(checkMask.FaceGenData.Specific))) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_Property.HasBeenSet) return false;
            return true;
        }

        public static Race_Mask<bool> GetHasBeenSetMask(IRaceGetter item)
        {
            var ret = new Race_Mask<bool>();
            ret.Description = item.Description_Property.HasBeenSet;
            ret.Spells = new MaskItem<bool, IEnumerable<bool>>(item.Spells.HasBeenSet, null);
            ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>(item.Relations.HasBeenSet, item.Relations.Select((i) => new MaskItem<bool, Relation_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.SkillBoosts = new MaskItem<bool, IEnumerable<MaskItem<bool, SkillBoost_Mask<bool>>>>(item.SkillBoosts.HasBeenSet, item.SkillBoosts.Select((i) => new MaskItem<bool, SkillBoost_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Fluff = true;
            ret.MaleHeight = true;
            ret.FemaleHeight = true;
            ret.MaleWeight = true;
            ret.FemaleWeight = true;
            ret.Flags = true;
            ret.Voices = new MaskItem<bool, RaceVoices_Mask<bool>>(item.Voices_Property.HasBeenSet, RaceVoicesCommon.GetHasBeenSetMask(item.Voices_Property.Item));
            ret.DefaultHair = new MaskItem<bool, RaceHair_Mask<bool>>(item.DefaultHair_Property.HasBeenSet, RaceHairCommon.GetHasBeenSetMask(item.DefaultHair_Property.Item));
            ret.DefaultHairColor = item.DefaultHairColor_Property.HasBeenSet;
            ret.FaceGenMainClamp = item.FaceGenMainClamp_Property.HasBeenSet;
            ret.FaceGenFaceClamp = item.FaceGenFaceClamp_Property.HasBeenSet;
            ret.RaceStats = new MaskItem<bool, RaceStatsGendered_Mask<bool>>(item.RaceStats_Property.HasBeenSet, RaceStatsGenderedCommon.GetHasBeenSetMask(item.RaceStats_Property.Item));
            ret.FaceData = new MaskItem<bool, IEnumerable<MaskItem<bool, FacePart_Mask<bool>>>>(item.FaceData.HasBeenSet, item.FaceData.Select((i) => new MaskItem<bool, FacePart_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.BodyData = new MaskItem<bool, GenderedBodyData_Mask<bool>>(item.BodyData_Property.HasBeenSet, GenderedBodyDataCommon.GetHasBeenSetMask(item.BodyData_Property.Item));
            ret.Hairs = new MaskItem<bool, IEnumerable<bool>>(item.Hairs.HasBeenSet, null);
            ret.Eyes = new MaskItem<bool, IEnumerable<bool>>(item.Eyes.HasBeenSet, null);
            ret.FaceGenData = new MaskItem<bool, FaceGenData_Mask<bool>>(item.FaceGenData_Property.HasBeenSet, FaceGenDataCommon.GetHasBeenSetMask(item.FaceGenData_Property.Item));
            ret.Unknown = item.Unknown_Property.HasBeenSet;
            return ret;
        }

        public static Race_FieldIndex? ConvertFieldIndex(NamedMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Race_FieldIndex ConvertFieldIndex(NamedMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case NamedMajorRecord_FieldIndex.MajorRecordFlags:
                    return (Race_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.FormID:
                    return (Race_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.RecordType:
                    return (Race_FieldIndex)((int)index);
                case NamedMajorRecord_FieldIndex.Name:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Race_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRaceGetter item,
            bool doMasks,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            Race_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRaceGetter item,
            Func<Race_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Race"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Race");
                    }
                    if (item.Description_Property.HasBeenSet)
                    {
                        StringXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Description),
                            item: item.Description_Property,
                            fieldIndex: (int)Race_FieldIndex.Description,
                            errorMask: errorMask);
                    }
                    if (item.Spells.HasBeenSet)
                    {
                        ListXmlTranslation<FormIDSetLink<Spell>, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Spells),
                            item: item.Spells,
                            fieldIndex: (int)Race_FieldIndex.Spells,
                            errorMask: errorMask,
                            transl: (FormIDSetLink<Spell> subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                FormIDXmlTranslation.Instance.Write(
                                    writer: writer,
                                    name: "Item",
                                    item: subItem?.FormID,
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.Relations.HasBeenSet)
                    {
                        ListXmlTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Relations),
                            item: item.Relations,
                            fieldIndex: (int)Race_FieldIndex.Relations,
                            errorMask: errorMask,
                            transl: (Relation subItem, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<Relation, Relation_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    ListXmlTranslation<SkillBoost, MaskItem<Exception, SkillBoost_ErrorMask>>.Instance.Write(
                        writer: writer,
                        name: nameof(item.SkillBoosts),
                        item: item.SkillBoosts,
                        fieldIndex: (int)Race_FieldIndex.SkillBoosts,
                        errorMask: errorMask,
                        transl: (SkillBoost subItem, bool listDoMasks, out MaskItem<Exception, SkillBoost_ErrorMask> listSubMask) =>
                        {
                            LoquiXmlTranslation<SkillBoost, SkillBoost_ErrorMask>.Instance.Write(
                                writer: writer,
                                item: subItem,
                                name: "Item",
                                doMasks: errorMask != null,
                                errorMask: out listSubMask);
                        }
                        );
                    ByteArrayXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Fluff),
                        item: item.Fluff_Property,
                        fieldIndex: (int)Race_FieldIndex.Fluff,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.MaleHeight),
                        item: item.MaleHeight_Property,
                        fieldIndex: (int)Race_FieldIndex.MaleHeight,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.FemaleHeight),
                        item: item.FemaleHeight_Property,
                        fieldIndex: (int)Race_FieldIndex.FemaleHeight,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.MaleWeight),
                        item: item.MaleWeight_Property,
                        fieldIndex: (int)Race_FieldIndex.MaleWeight,
                        errorMask: errorMask);
                    FloatXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.FemaleWeight),
                        item: item.FemaleWeight_Property,
                        fieldIndex: (int)Race_FieldIndex.FemaleWeight,
                        errorMask: errorMask);
                    EnumXmlTranslation<Race.Flag>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Flags),
                        item: item.Flags_Property,
                        fieldIndex: (int)Race_FieldIndex.Flags,
                        errorMask: errorMask);
                    if (item.Voices_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<RaceVoices, RaceVoices_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Voices_Property,
                            name: nameof(item.Voices),
                            fieldIndex: (int)Race_FieldIndex.Voices,
                            errorMask: errorMask);
                    }
                    if (item.DefaultHair_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<RaceHair, RaceHair_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.DefaultHair_Property,
                            name: nameof(item.DefaultHair),
                            fieldIndex: (int)Race_FieldIndex.DefaultHair,
                            errorMask: errorMask);
                    }
                    if (item.DefaultHairColor_Property.HasBeenSet)
                    {
                        ByteXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.DefaultHairColor),
                            item: item.DefaultHairColor_Property,
                            fieldIndex: (int)Race_FieldIndex.DefaultHairColor,
                            errorMask: errorMask);
                    }
                    if (item.FaceGenMainClamp_Property.HasBeenSet)
                    {
                        Int32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.FaceGenMainClamp),
                            item: item.FaceGenMainClamp_Property,
                            fieldIndex: (int)Race_FieldIndex.FaceGenMainClamp,
                            errorMask: errorMask);
                    }
                    if (item.FaceGenFaceClamp_Property.HasBeenSet)
                    {
                        Int32XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.FaceGenFaceClamp),
                            item: item.FaceGenFaceClamp_Property,
                            fieldIndex: (int)Race_FieldIndex.FaceGenFaceClamp,
                            errorMask: errorMask);
                    }
                    if (item.RaceStats_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.RaceStats_Property,
                            name: nameof(item.RaceStats),
                            fieldIndex: (int)Race_FieldIndex.RaceStats,
                            errorMask: errorMask);
                    }
                    if (item.FaceData.HasBeenSet)
                    {
                        ListXmlTranslation<FacePart, MaskItem<Exception, FacePart_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.FaceData),
                            item: item.FaceData,
                            fieldIndex: (int)Race_FieldIndex.FaceData,
                            errorMask: errorMask,
                            transl: (FacePart subItem, bool listDoMasks, out MaskItem<Exception, FacePart_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<FacePart, FacePart_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.BodyData_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.BodyData_Property,
                            name: nameof(item.BodyData),
                            fieldIndex: (int)Race_FieldIndex.BodyData,
                            errorMask: errorMask);
                    }
                    if (item.Hairs.HasBeenSet)
                    {
                        ListXmlTranslation<FormIDLink<Hair>, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Hairs),
                            item: item.Hairs,
                            fieldIndex: (int)Race_FieldIndex.Hairs,
                            errorMask: errorMask,
                            transl: (FormIDLink<Hair> subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                FormIDXmlTranslation.Instance.Write(
                                    writer: writer,
                                    name: "Item",
                                    item: subItem?.FormID,
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.Eyes.HasBeenSet)
                    {
                        ListXmlTranslation<FormIDLink<Eye>, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Eyes),
                            item: item.Eyes,
                            fieldIndex: (int)Race_FieldIndex.Eyes,
                            errorMask: errorMask,
                            transl: (FormIDLink<Eye> subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                FormIDXmlTranslation.Instance.Write(
                                    writer: writer,
                                    name: "Item",
                                    item: subItem?.FormID,
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                    if (item.FaceGenData_Property.HasBeenSet)
                    {
                        LoquiXmlTranslation<FaceGenData, FaceGenData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.FaceGenData_Property,
                            name: nameof(item.FaceGenData),
                            fieldIndex: (int)Race_FieldIndex.FaceGenData,
                            errorMask: errorMask);
                    }
                    if (item.Unknown_Property.HasBeenSet)
                    {
                        ByteArrayXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Unknown),
                            item: item.Unknown_Property,
                            fieldIndex: (int)Race_FieldIndex.Unknown,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Race item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Race_ErrorMask errorMask)
        {
            Race_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Race item,
            RecordTypeConverter recordTypeConverter,
            Func<Race_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Race_Registration.RACE_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Race item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Race_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description_Property,
                fieldIndex: (int)Race_FieldIndex.Description,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.DESC_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDSetLink<Spell>, Exception>.Instance.Write(
                writer: writer,
                item: item.Spells,
                fieldIndex: (int)Race_FieldIndex.Spells,
                errorMask: errorMask,
                transl: (FormIDSetLink<Spell> subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask,
                        header: recordTypeConverter.ConvertToCustom(Race_Registration.SPLO_HEADER),
                        nullable: false);
                }
                );
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Relations,
                fieldIndex: (int)Race_FieldIndex.Relations,
                errorMask: errorMask,
                transl: (Relation subItem, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<Relation, Relation_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            using (HeaderExport.ExportSubRecordHeader(writer, Race_Registration.DATA_HEADER))
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<SkillBoost, MaskItem<Exception, SkillBoost_ErrorMask>>.Instance.Write(
                    writer: writer,
                    item: item.SkillBoosts,
                    fieldIndex: (int)Race_FieldIndex.SkillBoosts,
                    errorMask: errorMask,
                    transl: (SkillBoost subItem, bool listDoMasks, out MaskItem<Exception, SkillBoost_ErrorMask> listSubMask) =>
                    {
                        LoquiBinaryTranslation<SkillBoost, SkillBoost_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: subItem,
                            doMasks: listDoMasks,
                            errorMask: out listSubMask);
                    }
                    );
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Fluff_Property,
                    fieldIndex: (int)Race_FieldIndex.Fluff,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaleHeight_Property,
                    fieldIndex: (int)Race_FieldIndex.MaleHeight,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FemaleHeight_Property,
                    fieldIndex: (int)Race_FieldIndex.FemaleHeight,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaleWeight_Property,
                    fieldIndex: (int)Race_FieldIndex.MaleWeight,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FemaleWeight_Property,
                    fieldIndex: (int)Race_FieldIndex.FemaleWeight,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Race.Flag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: new ContentLength(2),
                    fieldIndex: (int)Race_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            LoquiBinaryTranslation<RaceVoices, RaceVoices_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Voices_Property,
                fieldIndex: (int)Race_FieldIndex.Voices,
                errorMask: errorMask);
            LoquiBinaryTranslation<RaceHair, RaceHair_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.DefaultHair_Property,
                fieldIndex: (int)Race_FieldIndex.DefaultHair,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DefaultHairColor_Property,
                fieldIndex: (int)Race_FieldIndex.DefaultHairColor,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.CNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FaceGenMainClamp_Property,
                fieldIndex: (int)Race_FieldIndex.FaceGenMainClamp,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.PNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FaceGenFaceClamp_Property,
                fieldIndex: (int)Race_FieldIndex.FaceGenFaceClamp,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.UNAM_HEADER),
                nullable: false);
            LoquiBinaryTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.RaceStats_Property,
                fieldIndex: (int)Race_FieldIndex.RaceStats,
                errorMask: errorMask);
            using (HeaderExport.ExportHeader(writer, Race_Registration.NAM0_HEADER, ObjectType.Subrecord)) { }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FacePart, MaskItem<Exception, FacePart_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.FaceData,
                fieldIndex: (int)Race_FieldIndex.FaceData,
                errorMask: errorMask,
                transl: (FacePart subItem, bool listDoMasks, out MaskItem<Exception, FacePart_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<FacePart, FacePart_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            using (HeaderExport.ExportHeader(writer, Race_Registration.NAM1_HEADER, ObjectType.Subrecord)) { }
            LoquiBinaryTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.BodyData_Property,
                fieldIndex: (int)Race_FieldIndex.BodyData,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Hair>, Exception>.Instance.Write(
                writer: writer,
                item: item.Hairs,
                fieldIndex: (int)Race_FieldIndex.Hairs,
                recordType: Race_Registration.HNAM_HEADER,
                errorMask: errorMask,
                transl: (FormIDLink<Hair> subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            Mutagen.Bethesda.Binary.ListBinaryTranslation<FormIDLink<Eye>, Exception>.Instance.Write(
                writer: writer,
                item: item.Eyes,
                fieldIndex: (int)Race_FieldIndex.Eyes,
                recordType: Race_Registration.ENAM_HEADER,
                errorMask: errorMask,
                transl: (FormIDLink<Eye> subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            LoquiBinaryTranslation<FaceGenData, FaceGenData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.FaceGenData_Property,
                fieldIndex: (int)Race_FieldIndex.FaceGenData,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown_Property,
                fieldIndex: (int)Race_FieldIndex.Unknown,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.SNAM_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Race_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Race_Mask<T>>
    {
        #region Ctors
        public Race_Mask()
        {
        }

        public Race_Mask(T initialValue)
        {
            this.Description = initialValue;
            this.Spells = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Relations = new MaskItem<T, IEnumerable<MaskItem<T, Relation_Mask<T>>>>(initialValue, null);
            this.SkillBoosts = new MaskItem<T, IEnumerable<MaskItem<T, SkillBoost_Mask<T>>>>(initialValue, null);
            this.Fluff = initialValue;
            this.MaleHeight = initialValue;
            this.FemaleHeight = initialValue;
            this.MaleWeight = initialValue;
            this.FemaleWeight = initialValue;
            this.Flags = initialValue;
            this.Voices = new MaskItem<T, RaceVoices_Mask<T>>(initialValue, new RaceVoices_Mask<T>(initialValue));
            this.DefaultHair = new MaskItem<T, RaceHair_Mask<T>>(initialValue, new RaceHair_Mask<T>(initialValue));
            this.DefaultHairColor = initialValue;
            this.FaceGenMainClamp = initialValue;
            this.FaceGenFaceClamp = initialValue;
            this.RaceStats = new MaskItem<T, RaceStatsGendered_Mask<T>>(initialValue, new RaceStatsGendered_Mask<T>(initialValue));
            this.FaceData = new MaskItem<T, IEnumerable<MaskItem<T, FacePart_Mask<T>>>>(initialValue, null);
            this.BodyData = new MaskItem<T, GenderedBodyData_Mask<T>>(initialValue, new GenderedBodyData_Mask<T>(initialValue));
            this.Hairs = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Eyes = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.FaceGenData = new MaskItem<T, FaceGenData_Mask<T>>(initialValue, new FaceGenData_Mask<T>(initialValue));
            this.Unknown = initialValue;
        }
        #endregion

        #region Members
        public T Description;
        public MaskItem<T, IEnumerable<T>> Spells;
        public MaskItem<T, IEnumerable<MaskItem<T, Relation_Mask<T>>>> Relations;
        public MaskItem<T, IEnumerable<MaskItem<T, SkillBoost_Mask<T>>>> SkillBoosts;
        public T Fluff;
        public T MaleHeight;
        public T FemaleHeight;
        public T MaleWeight;
        public T FemaleWeight;
        public T Flags;
        public MaskItem<T, RaceVoices_Mask<T>> Voices { get; set; }
        public MaskItem<T, RaceHair_Mask<T>> DefaultHair { get; set; }
        public T DefaultHairColor;
        public T FaceGenMainClamp;
        public T FaceGenFaceClamp;
        public MaskItem<T, RaceStatsGendered_Mask<T>> RaceStats { get; set; }
        public MaskItem<T, IEnumerable<MaskItem<T, FacePart_Mask<T>>>> FaceData;
        public MaskItem<T, GenderedBodyData_Mask<T>> BodyData { get; set; }
        public MaskItem<T, IEnumerable<T>> Hairs;
        public MaskItem<T, IEnumerable<T>> Eyes;
        public MaskItem<T, FaceGenData_Mask<T>> FaceGenData { get; set; }
        public T Unknown;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Race_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Race_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Relations, rhs.Relations)) return false;
            if (!object.Equals(this.SkillBoosts, rhs.SkillBoosts)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.MaleHeight, rhs.MaleHeight)) return false;
            if (!object.Equals(this.FemaleHeight, rhs.FemaleHeight)) return false;
            if (!object.Equals(this.MaleWeight, rhs.MaleWeight)) return false;
            if (!object.Equals(this.FemaleWeight, rhs.FemaleWeight)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Voices, rhs.Voices)) return false;
            if (!object.Equals(this.DefaultHair, rhs.DefaultHair)) return false;
            if (!object.Equals(this.DefaultHairColor, rhs.DefaultHairColor)) return false;
            if (!object.Equals(this.FaceGenMainClamp, rhs.FaceGenMainClamp)) return false;
            if (!object.Equals(this.FaceGenFaceClamp, rhs.FaceGenFaceClamp)) return false;
            if (!object.Equals(this.RaceStats, rhs.RaceStats)) return false;
            if (!object.Equals(this.FaceData, rhs.FaceData)) return false;
            if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
            if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(this.FaceGenData, rhs.FaceGenData)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Relations?.GetHashCode());
            ret = ret.CombineHashCode(this.SkillBoosts?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleWeight?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleWeight?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Voices?.GetHashCode());
            ret = ret.CombineHashCode(this.DefaultHair?.GetHashCode());
            ret = ret.CombineHashCode(this.DefaultHairColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenMainClamp?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenFaceClamp?.GetHashCode());
            ret = ret.CombineHashCode(this.RaceStats?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceData?.GetHashCode());
            ret = ret.CombineHashCode(this.BodyData?.GetHashCode());
            ret = ret.CombineHashCode(this.Hairs?.GetHashCode());
            ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenData?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Description)) return false;
            if (this.Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (this.Spells.Specific != null)
                {
                    foreach (var item in this.Spells.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (this.Relations != null)
            {
                if (!eval(this.Relations.Overall)) return false;
                if (this.Relations.Specific != null)
                {
                    foreach (var item in this.Relations.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.SkillBoosts != null)
            {
                if (!eval(this.SkillBoosts.Overall)) return false;
                if (this.SkillBoosts.Specific != null)
                {
                    foreach (var item in this.SkillBoosts.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.Fluff)) return false;
            if (!eval(this.MaleHeight)) return false;
            if (!eval(this.FemaleHeight)) return false;
            if (!eval(this.MaleWeight)) return false;
            if (!eval(this.FemaleWeight)) return false;
            if (!eval(this.Flags)) return false;
            if (Voices != null)
            {
                if (!eval(this.Voices.Overall)) return false;
                if (this.Voices.Specific != null && !this.Voices.Specific.AllEqual(eval)) return false;
            }
            if (DefaultHair != null)
            {
                if (!eval(this.DefaultHair.Overall)) return false;
                if (this.DefaultHair.Specific != null && !this.DefaultHair.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.DefaultHairColor)) return false;
            if (!eval(this.FaceGenMainClamp)) return false;
            if (!eval(this.FaceGenFaceClamp)) return false;
            if (RaceStats != null)
            {
                if (!eval(this.RaceStats.Overall)) return false;
                if (this.RaceStats.Specific != null && !this.RaceStats.Specific.AllEqual(eval)) return false;
            }
            if (this.FaceData != null)
            {
                if (!eval(this.FaceData.Overall)) return false;
                if (this.FaceData.Specific != null)
                {
                    foreach (var item in this.FaceData.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (BodyData != null)
            {
                if (!eval(this.BodyData.Overall)) return false;
                if (this.BodyData.Specific != null && !this.BodyData.Specific.AllEqual(eval)) return false;
            }
            if (this.Hairs != null)
            {
                if (!eval(this.Hairs.Overall)) return false;
                if (this.Hairs.Specific != null)
                {
                    foreach (var item in this.Hairs.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (this.Eyes != null)
            {
                if (!eval(this.Eyes.Overall)) return false;
                if (this.Eyes.Specific != null)
                {
                    foreach (var item in this.Eyes.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (FaceGenData != null)
            {
                if (!eval(this.FaceGenData.Overall)) return false;
                if (this.FaceGenData.Specific != null && !this.FaceGenData.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Unknown)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Race_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Race_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Race_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Description = eval(this.Description);
            if (Spells != null)
            {
                obj.Spells = new MaskItem<R, IEnumerable<R>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (Spells.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Spells.Specific = l;
                    foreach (var item in Spells.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (Relations != null)
            {
                obj.Relations = new MaskItem<R, IEnumerable<MaskItem<R, Relation_Mask<R>>>>();
                obj.Relations.Overall = eval(this.Relations.Overall);
                if (Relations.Specific != null)
                {
                    List<MaskItem<R, Relation_Mask<R>>> l = new List<MaskItem<R, Relation_Mask<R>>>();
                    obj.Relations.Specific = l;
                    foreach (var item in Relations.Specific)
                    {
                        MaskItem<R, Relation_Mask<R>> mask = default(MaskItem<R, Relation_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Relation_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (SkillBoosts != null)
            {
                obj.SkillBoosts = new MaskItem<R, IEnumerable<MaskItem<R, SkillBoost_Mask<R>>>>();
                obj.SkillBoosts.Overall = eval(this.SkillBoosts.Overall);
                if (SkillBoosts.Specific != null)
                {
                    List<MaskItem<R, SkillBoost_Mask<R>>> l = new List<MaskItem<R, SkillBoost_Mask<R>>>();
                    obj.SkillBoosts.Specific = l;
                    foreach (var item in SkillBoosts.Specific)
                    {
                        MaskItem<R, SkillBoost_Mask<R>> mask = default(MaskItem<R, SkillBoost_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, SkillBoost_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Fluff = eval(this.Fluff);
            obj.MaleHeight = eval(this.MaleHeight);
            obj.FemaleHeight = eval(this.FemaleHeight);
            obj.MaleWeight = eval(this.MaleWeight);
            obj.FemaleWeight = eval(this.FemaleWeight);
            obj.Flags = eval(this.Flags);
            if (this.Voices != null)
            {
                obj.Voices = new MaskItem<R, RaceVoices_Mask<R>>();
                obj.Voices.Overall = eval(this.Voices.Overall);
                if (this.Voices.Specific != null)
                {
                    obj.Voices.Specific = this.Voices.Specific.Translate(eval);
                }
            }
            if (this.DefaultHair != null)
            {
                obj.DefaultHair = new MaskItem<R, RaceHair_Mask<R>>();
                obj.DefaultHair.Overall = eval(this.DefaultHair.Overall);
                if (this.DefaultHair.Specific != null)
                {
                    obj.DefaultHair.Specific = this.DefaultHair.Specific.Translate(eval);
                }
            }
            obj.DefaultHairColor = eval(this.DefaultHairColor);
            obj.FaceGenMainClamp = eval(this.FaceGenMainClamp);
            obj.FaceGenFaceClamp = eval(this.FaceGenFaceClamp);
            if (this.RaceStats != null)
            {
                obj.RaceStats = new MaskItem<R, RaceStatsGendered_Mask<R>>();
                obj.RaceStats.Overall = eval(this.RaceStats.Overall);
                if (this.RaceStats.Specific != null)
                {
                    obj.RaceStats.Specific = this.RaceStats.Specific.Translate(eval);
                }
            }
            if (FaceData != null)
            {
                obj.FaceData = new MaskItem<R, IEnumerable<MaskItem<R, FacePart_Mask<R>>>>();
                obj.FaceData.Overall = eval(this.FaceData.Overall);
                if (FaceData.Specific != null)
                {
                    List<MaskItem<R, FacePart_Mask<R>>> l = new List<MaskItem<R, FacePart_Mask<R>>>();
                    obj.FaceData.Specific = l;
                    foreach (var item in FaceData.Specific)
                    {
                        MaskItem<R, FacePart_Mask<R>> mask = default(MaskItem<R, FacePart_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, FacePart_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (this.BodyData != null)
            {
                obj.BodyData = new MaskItem<R, GenderedBodyData_Mask<R>>();
                obj.BodyData.Overall = eval(this.BodyData.Overall);
                if (this.BodyData.Specific != null)
                {
                    obj.BodyData.Specific = this.BodyData.Specific.Translate(eval);
                }
            }
            if (Hairs != null)
            {
                obj.Hairs = new MaskItem<R, IEnumerable<R>>();
                obj.Hairs.Overall = eval(this.Hairs.Overall);
                if (Hairs.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Hairs.Specific = l;
                    foreach (var item in Hairs.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (Eyes != null)
            {
                obj.Eyes = new MaskItem<R, IEnumerable<R>>();
                obj.Eyes.Overall = eval(this.Eyes.Overall);
                if (Eyes.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Eyes.Specific = l;
                    foreach (var item in Eyes.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (this.FaceGenData != null)
            {
                obj.FaceGenData = new MaskItem<R, FaceGenData_Mask<R>>();
                obj.FaceGenData.Overall = eval(this.FaceGenData.Overall);
                if (this.FaceGenData.Specific != null)
                {
                    obj.FaceGenData.Specific = this.FaceGenData.Specific.Translate(eval);
                }
            }
            obj.Unknown = eval(this.Unknown);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Spells.Specific = null;
            this.Relations.Specific = null;
            this.SkillBoosts.Specific = null;
            this.FaceData.Specific = null;
            this.Hairs.Specific = null;
            this.Eyes.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Race_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Race_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Race_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Relations.Overall != null)
                        {
                            fg.AppendLine(Relations.Overall.ToString());
                        }
                        if (Relations.Specific != null)
                        {
                            foreach (var subItem in Relations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SkillBoosts?.Overall ?? true)
                {
                    fg.AppendLine("SkillBoosts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SkillBoosts.Overall != null)
                        {
                            fg.AppendLine(SkillBoosts.Overall.ToString());
                        }
                        if (SkillBoosts.Specific != null)
                        {
                            foreach (var subItem in SkillBoosts.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.MaleHeight ?? true)
                {
                    fg.AppendLine($"MaleHeight => {MaleHeight}");
                }
                if (printMask?.FemaleHeight ?? true)
                {
                    fg.AppendLine($"FemaleHeight => {FemaleHeight}");
                }
                if (printMask?.MaleWeight ?? true)
                {
                    fg.AppendLine($"MaleWeight => {MaleWeight}");
                }
                if (printMask?.FemaleWeight ?? true)
                {
                    fg.AppendLine($"FemaleWeight => {FemaleWeight}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Voices?.Overall ?? true)
                {
                    Voices?.ToString(fg);
                }
                if (printMask?.DefaultHair?.Overall ?? true)
                {
                    DefaultHair?.ToString(fg);
                }
                if (printMask?.DefaultHairColor ?? true)
                {
                    fg.AppendLine($"DefaultHairColor => {DefaultHairColor}");
                }
                if (printMask?.FaceGenMainClamp ?? true)
                {
                    fg.AppendLine($"FaceGenMainClamp => {FaceGenMainClamp}");
                }
                if (printMask?.FaceGenFaceClamp ?? true)
                {
                    fg.AppendLine($"FaceGenFaceClamp => {FaceGenFaceClamp}");
                }
                if (printMask?.RaceStats?.Overall ?? true)
                {
                    RaceStats?.ToString(fg);
                }
                if (printMask?.FaceData?.Overall ?? true)
                {
                    fg.AppendLine("FaceData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (FaceData.Overall != null)
                        {
                            fg.AppendLine(FaceData.Overall.ToString());
                        }
                        if (FaceData.Specific != null)
                        {
                            foreach (var subItem in FaceData.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.BodyData?.Overall ?? true)
                {
                    BodyData?.ToString(fg);
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    fg.AppendLine("Hairs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Hairs.Overall != null)
                        {
                            fg.AppendLine(Hairs.Overall.ToString());
                        }
                        if (Hairs.Specific != null)
                        {
                            foreach (var subItem in Hairs.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Eyes.Overall != null)
                        {
                            fg.AppendLine(Eyes.Overall.ToString());
                        }
                        if (Eyes.Specific != null)
                        {
                            foreach (var subItem in Eyes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FaceGenData?.Overall ?? true)
                {
                    FaceGenData?.ToString(fg);
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Race_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Race_ErrorMask>
    {
        #region Members
        public Exception Description;
        public MaskItem<Exception, IEnumerable<Exception>> Spells;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> Relations;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>> SkillBoosts;
        public Exception Fluff;
        public Exception MaleHeight;
        public Exception FemaleHeight;
        public Exception MaleWeight;
        public Exception FemaleWeight;
        public Exception Flags;
        public MaskItem<Exception, RaceVoices_ErrorMask> Voices;
        public MaskItem<Exception, RaceHair_ErrorMask> DefaultHair;
        public Exception DefaultHairColor;
        public Exception FaceGenMainClamp;
        public Exception FaceGenFaceClamp;
        public MaskItem<Exception, RaceStatsGendered_ErrorMask> RaceStats;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>> FaceData;
        public MaskItem<Exception, GenderedBodyData_ErrorMask> BodyData;
        public MaskItem<Exception, IEnumerable<Exception>> Hairs;
        public MaskItem<Exception, IEnumerable<Exception>> Eyes;
        public MaskItem<Exception, FaceGenData_ErrorMask> FaceGenData;
        public Exception Unknown;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Race_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Race_FieldIndex.Relations:
                    this.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(ex, null);
                    break;
                case Race_FieldIndex.SkillBoosts:
                    this.SkillBoosts = new MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>>(ex, null);
                    break;
                case Race_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case Race_FieldIndex.MaleHeight:
                    this.MaleHeight = ex;
                    break;
                case Race_FieldIndex.FemaleHeight:
                    this.FemaleHeight = ex;
                    break;
                case Race_FieldIndex.MaleWeight:
                    this.MaleWeight = ex;
                    break;
                case Race_FieldIndex.FemaleWeight:
                    this.FemaleWeight = ex;
                    break;
                case Race_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Race_FieldIndex.Voices:
                    this.Voices = new MaskItem<Exception, RaceVoices_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.DefaultHair:
                    this.DefaultHair = new MaskItem<Exception, RaceHair_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    this.DefaultHairColor = ex;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    this.FaceGenMainClamp = ex;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    this.FaceGenFaceClamp = ex;
                    break;
                case Race_FieldIndex.RaceStats:
                    this.RaceStats = new MaskItem<Exception, RaceStatsGendered_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.FaceData:
                    this.FaceData = new MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>>(ex, null);
                    break;
                case Race_FieldIndex.BodyData:
                    this.BodyData = new MaskItem<Exception, GenderedBodyData_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.Hairs:
                    this.Hairs = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Race_FieldIndex.Eyes:
                    this.Eyes = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Race_FieldIndex.FaceGenData:
                    this.FaceGenData = new MaskItem<Exception, FaceGenData_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Race_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Race_FieldIndex.Relations:
                    this.Relations = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>)obj;
                    break;
                case Race_FieldIndex.SkillBoosts:
                    this.SkillBoosts = (MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>>)obj;
                    break;
                case Race_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case Race_FieldIndex.MaleHeight:
                    this.MaleHeight = (Exception)obj;
                    break;
                case Race_FieldIndex.FemaleHeight:
                    this.FemaleHeight = (Exception)obj;
                    break;
                case Race_FieldIndex.MaleWeight:
                    this.MaleWeight = (Exception)obj;
                    break;
                case Race_FieldIndex.FemaleWeight:
                    this.FemaleWeight = (Exception)obj;
                    break;
                case Race_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Race_FieldIndex.Voices:
                    this.Voices = (MaskItem<Exception, RaceVoices_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.DefaultHair:
                    this.DefaultHair = (MaskItem<Exception, RaceHair_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    this.DefaultHairColor = (Exception)obj;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    this.FaceGenMainClamp = (Exception)obj;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    this.FaceGenFaceClamp = (Exception)obj;
                    break;
                case Race_FieldIndex.RaceStats:
                    this.RaceStats = (MaskItem<Exception, RaceStatsGendered_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.FaceData:
                    this.FaceData = (MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>>)obj;
                    break;
                case Race_FieldIndex.BodyData:
                    this.BodyData = (MaskItem<Exception, GenderedBodyData_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.Hairs:
                    this.Hairs = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Race_FieldIndex.Eyes:
                    this.Eyes = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Race_FieldIndex.FaceGenData:
                    this.FaceGenData = (MaskItem<Exception, FaceGenData_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Description != null) return true;
            if (Spells != null) return true;
            if (Relations != null) return true;
            if (SkillBoosts != null) return true;
            if (Fluff != null) return true;
            if (MaleHeight != null) return true;
            if (FemaleHeight != null) return true;
            if (MaleWeight != null) return true;
            if (FemaleWeight != null) return true;
            if (Flags != null) return true;
            if (Voices != null) return true;
            if (DefaultHair != null) return true;
            if (DefaultHairColor != null) return true;
            if (FaceGenMainClamp != null) return true;
            if (FaceGenFaceClamp != null) return true;
            if (RaceStats != null) return true;
            if (FaceData != null) return true;
            if (BodyData != null) return true;
            if (Hairs != null) return true;
            if (Eyes != null) return true;
            if (FaceGenData != null) return true;
            if (Unknown != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Race_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine("Spells =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Spells.Overall != null)
                {
                    fg.AppendLine(Spells.Overall.ToString());
                }
                if (Spells.Specific != null)
                {
                    foreach (var subItem in Spells.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Relations =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Relations.Overall != null)
                {
                    fg.AppendLine(Relations.Overall.ToString());
                }
                if (Relations.Specific != null)
                {
                    foreach (var subItem in Relations.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("SkillBoosts =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SkillBoosts.Overall != null)
                {
                    fg.AppendLine(SkillBoosts.Overall.ToString());
                }
                if (SkillBoosts.Specific != null)
                {
                    foreach (var subItem in SkillBoosts.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"MaleHeight => {MaleHeight}");
            fg.AppendLine($"FemaleHeight => {FemaleHeight}");
            fg.AppendLine($"MaleWeight => {MaleWeight}");
            fg.AppendLine($"FemaleWeight => {FemaleWeight}");
            fg.AppendLine($"Flags => {Flags}");
            Voices?.ToString(fg);
            DefaultHair?.ToString(fg);
            fg.AppendLine($"DefaultHairColor => {DefaultHairColor}");
            fg.AppendLine($"FaceGenMainClamp => {FaceGenMainClamp}");
            fg.AppendLine($"FaceGenFaceClamp => {FaceGenFaceClamp}");
            RaceStats?.ToString(fg);
            fg.AppendLine("FaceData =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (FaceData.Overall != null)
                {
                    fg.AppendLine(FaceData.Overall.ToString());
                }
                if (FaceData.Specific != null)
                {
                    foreach (var subItem in FaceData.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            BodyData?.ToString(fg);
            fg.AppendLine("Hairs =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Hairs.Overall != null)
                {
                    fg.AppendLine(Hairs.Overall.ToString());
                }
                if (Hairs.Specific != null)
                {
                    foreach (var subItem in Hairs.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Eyes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Eyes.Overall != null)
                {
                    fg.AppendLine(Eyes.Overall.ToString());
                }
                if (Eyes.Specific != null)
                {
                    foreach (var subItem in Eyes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            FaceGenData?.ToString(fg);
            fg.AppendLine($"Unknown => {Unknown}");
        }
        #endregion

        #region Combine
        public Race_ErrorMask Combine(Race_ErrorMask rhs)
        {
            var ret = new Race_ErrorMask();
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Spells = new MaskItem<Exception, IEnumerable<Exception>>(this.Spells.Overall.Combine(rhs.Spells.Overall), new List<Exception>(this.Spells.Specific.And(rhs.Spells.Specific)));
            ret.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(this.Relations.Overall.Combine(rhs.Relations.Overall), new List<MaskItem<Exception, Relation_ErrorMask>>(this.Relations.Specific.And(rhs.Relations.Specific)));
            ret.SkillBoosts = new MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>>(this.SkillBoosts.Overall.Combine(rhs.SkillBoosts.Overall), new List<MaskItem<Exception, SkillBoost_ErrorMask>>(this.SkillBoosts.Specific.And(rhs.SkillBoosts.Specific)));
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.MaleHeight = this.MaleHeight.Combine(rhs.MaleHeight);
            ret.FemaleHeight = this.FemaleHeight.Combine(rhs.FemaleHeight);
            ret.MaleWeight = this.MaleWeight.Combine(rhs.MaleWeight);
            ret.FemaleWeight = this.FemaleWeight.Combine(rhs.FemaleWeight);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Voices = new MaskItem<Exception, RaceVoices_ErrorMask>(this.Voices.Overall.Combine(rhs.Voices.Overall), ((IErrorMask<RaceVoices_ErrorMask>)this.Voices.Specific).Combine(rhs.Voices.Specific));
            ret.DefaultHair = new MaskItem<Exception, RaceHair_ErrorMask>(this.DefaultHair.Overall.Combine(rhs.DefaultHair.Overall), ((IErrorMask<RaceHair_ErrorMask>)this.DefaultHair.Specific).Combine(rhs.DefaultHair.Specific));
            ret.DefaultHairColor = this.DefaultHairColor.Combine(rhs.DefaultHairColor);
            ret.FaceGenMainClamp = this.FaceGenMainClamp.Combine(rhs.FaceGenMainClamp);
            ret.FaceGenFaceClamp = this.FaceGenFaceClamp.Combine(rhs.FaceGenFaceClamp);
            ret.RaceStats = new MaskItem<Exception, RaceStatsGendered_ErrorMask>(this.RaceStats.Overall.Combine(rhs.RaceStats.Overall), ((IErrorMask<RaceStatsGendered_ErrorMask>)this.RaceStats.Specific).Combine(rhs.RaceStats.Specific));
            ret.FaceData = new MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>>(this.FaceData.Overall.Combine(rhs.FaceData.Overall), new List<MaskItem<Exception, FacePart_ErrorMask>>(this.FaceData.Specific.And(rhs.FaceData.Specific)));
            ret.BodyData = new MaskItem<Exception, GenderedBodyData_ErrorMask>(this.BodyData.Overall.Combine(rhs.BodyData.Overall), ((IErrorMask<GenderedBodyData_ErrorMask>)this.BodyData.Specific).Combine(rhs.BodyData.Specific));
            ret.Hairs = new MaskItem<Exception, IEnumerable<Exception>>(this.Hairs.Overall.Combine(rhs.Hairs.Overall), new List<Exception>(this.Hairs.Specific.And(rhs.Hairs.Specific)));
            ret.Eyes = new MaskItem<Exception, IEnumerable<Exception>>(this.Eyes.Overall.Combine(rhs.Eyes.Overall), new List<Exception>(this.Eyes.Specific.And(rhs.Eyes.Specific)));
            ret.FaceGenData = new MaskItem<Exception, FaceGenData_ErrorMask>(this.FaceGenData.Overall.Combine(rhs.FaceGenData.Overall), ((IErrorMask<FaceGenData_ErrorMask>)this.FaceGenData.Specific).Combine(rhs.FaceGenData.Specific));
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            return ret;
        }
        public static Race_ErrorMask Combine(Race_ErrorMask lhs, Race_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Race_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Description;
        public CopyOption Spells;
        public MaskItem<CopyOption, Relation_CopyMask> Relations;
        public MaskItem<CopyOption, SkillBoost_CopyMask> SkillBoosts;
        public bool Fluff;
        public bool MaleHeight;
        public bool FemaleHeight;
        public bool MaleWeight;
        public bool FemaleWeight;
        public bool Flags;
        public MaskItem<CopyOption, RaceVoices_CopyMask> Voices;
        public MaskItem<CopyOption, RaceHair_CopyMask> DefaultHair;
        public bool DefaultHairColor;
        public bool FaceGenMainClamp;
        public bool FaceGenFaceClamp;
        public MaskItem<CopyOption, RaceStatsGendered_CopyMask> RaceStats;
        public MaskItem<CopyOption, FacePart_CopyMask> FaceData;
        public MaskItem<CopyOption, GenderedBodyData_CopyMask> BodyData;
        public CopyOption Hairs;
        public CopyOption Eyes;
        public MaskItem<CopyOption, FaceGenData_CopyMask> FaceGenData;
        public bool Unknown;
        #endregion

    }
    #endregion




    #endregion

}
