/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Race :
        OblivionMajorRecord,
        IRaceInternal,
        ILoquiObjectSetter<Race>,
        IEquatable<Race>,
        IEqualsMask
    {
        #region Ctor
        protected Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.Name => this.Name;
        #endregion
        #region Description
        public String? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.Description => this.Description;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Spell>> _Spells = new ExtendedList<IFormLink<Spell>>();
        public ExtendedList<IFormLink<Spell>> Spells
        {
            get => this._Spells;
            protected set => this._Spells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<ISpellGetter>> IRaceGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RaceRelation> _Relations = new ExtendedList<RaceRelation>();
        public ExtendedList<RaceRelation> Relations
        {
            get => this._Relations;
            protected set => this._Relations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRaceRelationGetter> IRaceGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RaceData? _Data;
        public RaceData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRaceDataGetter? IRaceGetter.Data => this.Data;
        #endregion
        #region Voices
        public GenderedItem<IFormLink<Race>>? Voices { get; set; }
        IGenderedItemGetter<IFormLink<IRaceGetter>>? IRaceGetter.Voices => this.Voices;
        #endregion
        #region DefaultHair
        public GenderedItem<IFormLink<Hair>>? DefaultHair { get; set; }
        IGenderedItemGetter<IFormLink<IHairGetter>>? IRaceGetter.DefaultHair => this.DefaultHair;
        #endregion
        #region DefaultHairColor
        public Byte? DefaultHairColor { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IRaceGetter.DefaultHairColor => this.DefaultHairColor;
        #endregion
        #region FaceGenMainClamp
        public Int32? FaceGenMainClamp { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IRaceGetter.FaceGenMainClamp => this.FaceGenMainClamp;
        #endregion
        #region FaceGenFaceClamp
        public Int32? FaceGenFaceClamp { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IRaceGetter.FaceGenFaceClamp => this.FaceGenFaceClamp;
        #endregion
        #region RaceStats
        public GenderedItem<RaceStats>? RaceStats { get; set; }
        IGenderedItemGetter<IRaceStatsGetter>? IRaceGetter.RaceStats => this.RaceStats;
        #endregion
        #region FaceData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FacePart> _FaceData = new ExtendedList<FacePart>();
        public ExtendedList<FacePart> FaceData
        {
            get => this._FaceData;
            protected set => this._FaceData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFacePartGetter> IRaceGetter.FaceData => _FaceData;
        #endregion

        #endregion
        #region BodyData
        public GenderedItem<BodyData?>? BodyData { get; set; }
        IGenderedItemGetter<IBodyDataGetter?>? IRaceGetter.BodyData => this.BodyData;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Hair>>? _Hairs;
        public ExtendedList<IFormLink<Hair>>? Hairs
        {
            get => this._Hairs;
            set => this._Hairs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IHairGetter>>? IRaceGetter.Hairs => _Hairs;
        #endregion

        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Eye>>? _Eyes;
        public ExtendedList<IFormLink<Eye>>? Eyes
        {
            get => this._Eyes;
            set => this._Eyes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IEyeGetter>>? IRaceGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region FaceGenData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FaceGenData? _FaceGenData;
        public FaceGenData? FaceGenData
        {
            get => _FaceGenData;
            set => _FaceGenData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFaceGenDataGetter? IRaceGetter.FaceGenData => this.FaceGenData;
        #endregion
        #region SNAM
        public Int16? SNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? IRaceGetter.SNAM => this.SNAM;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRaceGetter rhs)) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Race obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RaceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Race CreateFromXml(
            XElement node,
            Race.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Race CreateFromXml(
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Race CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Race CreateFromXml(
            string path,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Race CreateFromXml(
            Stream stream,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceRelation.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RaceRelation.Mask<TItem>?>>());
                this.Data = new MaskItem<TItem, RaceData.Mask<TItem>?>(initialValue, new RaceData.Mask<TItem>(initialValue));
                this.Voices = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.DefaultHair = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.DefaultHairColor = initialValue;
                this.FaceGenMainClamp = initialValue;
                this.FaceGenFaceClamp = initialValue;
                this.RaceStats = new MaskItem<TItem, GenderedItem<RaceStats.Mask<TItem>?>?>(initialValue, default);
                this.FaceData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FacePart.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FacePart.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(initialValue, default);
                this.Hairs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FaceGenData = new MaskItem<TItem, FaceGenData.Mask<TItem>?>(initialValue, new FaceGenData.Mask<TItem>(initialValue));
                this.SNAM = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Description,
                TItem Spells,
                TItem Relations,
                TItem Data,
                TItem Voices,
                TItem DefaultHair,
                TItem DefaultHairColor,
                TItem FaceGenMainClamp,
                TItem FaceGenFaceClamp,
                TItem RaceStats,
                TItem FaceData,
                TItem BodyData,
                TItem Hairs,
                TItem Eyes,
                TItem FaceGenData,
                TItem SNAM)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Description = Description;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Spells, Enumerable.Empty<(int Index, TItem Value)>());
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceRelation.Mask<TItem>?>>?>(Relations, Enumerable.Empty<MaskItemIndexed<TItem, RaceRelation.Mask<TItem>?>>());
                this.Data = new MaskItem<TItem, RaceData.Mask<TItem>?>(Data, new RaceData.Mask<TItem>(Data));
                this.Voices = new MaskItem<TItem, GenderedItem<TItem>?>(Voices, default);
                this.DefaultHair = new MaskItem<TItem, GenderedItem<TItem>?>(DefaultHair, default);
                this.DefaultHairColor = DefaultHairColor;
                this.FaceGenMainClamp = FaceGenMainClamp;
                this.FaceGenFaceClamp = FaceGenFaceClamp;
                this.RaceStats = new MaskItem<TItem, GenderedItem<RaceStats.Mask<TItem>?>?>(RaceStats, default);
                this.FaceData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FacePart.Mask<TItem>?>>?>(FaceData, Enumerable.Empty<MaskItemIndexed<TItem, FacePart.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(BodyData, default);
                this.Hairs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Hairs, Enumerable.Empty<(int Index, TItem Value)>());
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Eyes, Enumerable.Empty<(int Index, TItem Value)>());
                this.FaceGenData = new MaskItem<TItem, FaceGenData.Mask<TItem>?>(FaceGenData, new FaceGenData.Mask<TItem>(FaceGenData));
                this.SNAM = SNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Spells;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceRelation.Mask<TItem>?>>?>? Relations;
            public MaskItem<TItem, RaceData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, GenderedItem<TItem>?>? Voices;
            public MaskItem<TItem, GenderedItem<TItem>?>? DefaultHair;
            public TItem DefaultHairColor;
            public TItem FaceGenMainClamp;
            public TItem FaceGenFaceClamp;
            public MaskItem<TItem, GenderedItem<RaceStats.Mask<TItem>?>?>? RaceStats;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FacePart.Mask<TItem>?>>?>? FaceData;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>? BodyData;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Hairs;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Eyes;
            public MaskItem<TItem, FaceGenData.Mask<TItem>?>? FaceGenData { get; set; }
            public TItem SNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Relations, rhs.Relations)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.Voices, rhs.Voices)) return false;
                if (!object.Equals(this.DefaultHair, rhs.DefaultHair)) return false;
                if (!object.Equals(this.DefaultHairColor, rhs.DefaultHairColor)) return false;
                if (!object.Equals(this.FaceGenMainClamp, rhs.FaceGenMainClamp)) return false;
                if (!object.Equals(this.FaceGenFaceClamp, rhs.FaceGenFaceClamp)) return false;
                if (!object.Equals(this.RaceStats, rhs.RaceStats)) return false;
                if (!object.Equals(this.FaceData, rhs.FaceData)) return false;
                if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.FaceGenData, rhs.FaceGenData)) return false;
                if (!object.Equals(this.SNAM, rhs.SNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.Spells);
                hash.Add(this.Relations);
                hash.Add(this.Data);
                hash.Add(this.Voices);
                hash.Add(this.DefaultHair);
                hash.Add(this.DefaultHairColor);
                hash.Add(this.FaceGenMainClamp);
                hash.Add(this.FaceGenFaceClamp);
                hash.Add(this.RaceStats);
                hash.Add(this.FaceData);
                hash.Add(this.BodyData);
                hash.Add(this.Hairs);
                hash.Add(this.Eyes);
                hash.Add(this.FaceGenData);
                hash.Add(this.SNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Relations != null)
                {
                    if (!eval(this.Relations.Overall)) return false;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!GenderedItem.All(
                    this.Voices,
                    eval: eval)) return false;
                if (!GenderedItem.All(
                    this.DefaultHair,
                    eval: eval)) return false;
                if (!eval(this.DefaultHairColor)) return false;
                if (!eval(this.FaceGenMainClamp)) return false;
                if (!eval(this.FaceGenFaceClamp)) return false;
                if (!GenderedItem.AllMask(
                    this.RaceStats,
                    eval: eval)) return false;
                if (this.FaceData != null)
                {
                    if (!eval(this.FaceData.Overall)) return false;
                    if (this.FaceData.Specific != null)
                    {
                        foreach (var item in this.FaceData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!GenderedItem.AllMask(
                    this.BodyData,
                    eval: eval)) return false;
                if (this.Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null)
                    {
                        foreach (var item in this.Hairs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (FaceGenData != null)
                {
                    if (!eval(this.FaceGenData.Overall)) return false;
                    if (this.FaceGenData.Specific != null && !this.FaceGenData.Specific.All(eval)) return false;
                }
                if (!eval(this.SNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (this.Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Relations != null)
                {
                    if (eval(this.Relations.Overall)) return true;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (GenderedItem.Any(
                    this.Voices,
                    eval: eval)) return true;
                if (GenderedItem.Any(
                    this.DefaultHair,
                    eval: eval)) return true;
                if (eval(this.DefaultHairColor)) return true;
                if (eval(this.FaceGenMainClamp)) return true;
                if (eval(this.FaceGenFaceClamp)) return true;
                if (GenderedItem.AnyMask(
                    this.RaceStats,
                    eval: eval)) return true;
                if (this.FaceData != null)
                {
                    if (eval(this.FaceData.Overall)) return true;
                    if (this.FaceData.Specific != null)
                    {
                        foreach (var item in this.FaceData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (GenderedItem.AnyMask(
                    this.BodyData,
                    eval: eval)) return true;
                if (this.Hairs != null)
                {
                    if (eval(this.Hairs.Overall)) return true;
                    if (this.Hairs.Specific != null)
                    {
                        foreach (var item in this.Hairs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (FaceGenData != null)
                {
                    if (eval(this.FaceGenData.Overall)) return true;
                    if (this.FaceGenData.Specific != null && this.FaceGenData.Specific.Any(eval)) return true;
                }
                if (eval(this.SNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Race.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Relations != null)
                {
                    obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RaceRelation.Mask<R>?>>?>(eval(this.Relations.Overall), Enumerable.Empty<MaskItemIndexed<R, RaceRelation.Mask<R>?>>());
                    if (Relations.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RaceRelation.Mask<R>?>>();
                        obj.Relations.Specific = l;
                        foreach (var item in Relations.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RaceRelation.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RaceRelation.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Data = this.Data == null ? null : new MaskItem<R, RaceData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.Voices = GenderedItem.TranslateHelper(
                    this.Voices,
                    eval);
                obj.DefaultHair = GenderedItem.TranslateHelper(
                    this.DefaultHair,
                    eval);
                obj.DefaultHairColor = eval(this.DefaultHairColor);
                obj.FaceGenMainClamp = eval(this.FaceGenMainClamp);
                obj.FaceGenFaceClamp = eval(this.FaceGenFaceClamp);
                obj.RaceStats = GenderedItem.TranslateHelper(
                    this.RaceStats,
                    eval,
                    (m, e) => m?.Translate(e));
                if (FaceData != null)
                {
                    obj.FaceData = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FacePart.Mask<R>?>>?>(eval(this.FaceData.Overall), Enumerable.Empty<MaskItemIndexed<R, FacePart.Mask<R>?>>());
                    if (FaceData.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FacePart.Mask<R>?>>();
                        obj.FaceData.Specific = l;
                        foreach (var item in FaceData.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, FacePart.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, FacePart.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BodyData = GenderedItem.TranslateHelper(
                    this.BodyData,
                    eval,
                    (m, e) => m?.Translate(e));
                if (Hairs != null)
                {
                    obj.Hairs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Hairs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Hairs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Hairs.Specific = l;
                        foreach (var item in Hairs.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Eyes != null)
                {
                    obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Eyes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Eyes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Eyes.Specific = l;
                        foreach (var item in Eyes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FaceGenData = this.FaceGenData == null ? null : new MaskItem<R, FaceGenData.Mask<R>?>(eval(this.FaceGenData.Overall), this.FaceGenData.Specific?.Translate(eval));
                obj.SNAM = eval(this.SNAM);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Race.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Race.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Race.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Spells?.Overall ?? true)
                        && Spells.TryGet(out var SpellsItem))
                    {
                        fg.AppendLine("Spells =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SpellsItem.Overall);
                            if (SpellsItem.Specific != null)
                            {
                                foreach (var subItem in SpellsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Relations?.Overall ?? true)
                        && Relations.TryGet(out var RelationsItem))
                    {
                        fg.AppendLine("Relations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RelationsItem.Overall);
                            if (RelationsItem.Specific != null)
                            {
                                foreach (var subItem in RelationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (Voices != null
                        && (printMask?.Voices?.Overall ?? true))
                    {
                        fg.AppendLine($"Voices => {Voices}");
                    }
                    if (DefaultHair != null
                        && (printMask?.DefaultHair?.Overall ?? true))
                    {
                        fg.AppendLine($"DefaultHair => {DefaultHair}");
                    }
                    if (printMask?.DefaultHairColor ?? true)
                    {
                        fg.AppendItem(DefaultHairColor, "DefaultHairColor");
                    }
                    if (printMask?.FaceGenMainClamp ?? true)
                    {
                        fg.AppendItem(FaceGenMainClamp, "FaceGenMainClamp");
                    }
                    if (printMask?.FaceGenFaceClamp ?? true)
                    {
                        fg.AppendItem(FaceGenFaceClamp, "FaceGenFaceClamp");
                    }
                    if (RaceStats != null
                        && (printMask?.RaceStats?.Overall ?? true))
                    {
                        fg.AppendLine($"RaceStats => {RaceStats}");
                    }
                    if ((printMask?.FaceData?.Overall ?? true)
                        && FaceData.TryGet(out var FaceDataItem))
                    {
                        fg.AppendLine("FaceData =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FaceDataItem.Overall);
                            if (FaceDataItem.Specific != null)
                            {
                                foreach (var subItem in FaceDataItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (BodyData != null
                        && (printMask?.BodyData?.Overall ?? true))
                    {
                        fg.AppendLine($"BodyData => {BodyData}");
                    }
                    if ((printMask?.Hairs?.Overall ?? true)
                        && Hairs.TryGet(out var HairsItem))
                    {
                        fg.AppendLine("Hairs =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(HairsItem.Overall);
                            if (HairsItem.Specific != null)
                            {
                                foreach (var subItem in HairsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Eyes?.Overall ?? true)
                        && Eyes.TryGet(out var EyesItem))
                    {
                        fg.AppendLine("Eyes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EyesItem.Overall);
                            if (EyesItem.Specific != null)
                            {
                                foreach (var subItem in EyesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.FaceGenData?.Overall ?? true)
                    {
                        FaceGenData?.ToString(fg);
                    }
                    if (printMask?.SNAM ?? true)
                    {
                        fg.AppendItem(SNAM, "SNAM");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>? Relations;
            public MaskItem<Exception?, RaceData.ErrorMask?>? Data;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Voices;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? DefaultHair;
            public Exception? DefaultHairColor;
            public Exception? FaceGenMainClamp;
            public Exception? FaceGenFaceClamp;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? RaceStats;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePart.ErrorMask?>>?>? FaceData;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BodyData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Hairs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Eyes;
            public MaskItem<Exception?, FaceGenData.ErrorMask?>? FaceGenData;
            public Exception? SNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        return Name;
                    case Race_FieldIndex.Description:
                        return Description;
                    case Race_FieldIndex.Spells:
                        return Spells;
                    case Race_FieldIndex.Relations:
                        return Relations;
                    case Race_FieldIndex.Data:
                        return Data;
                    case Race_FieldIndex.Voices:
                        return Voices;
                    case Race_FieldIndex.DefaultHair:
                        return DefaultHair;
                    case Race_FieldIndex.DefaultHairColor:
                        return DefaultHairColor;
                    case Race_FieldIndex.FaceGenMainClamp:
                        return FaceGenMainClamp;
                    case Race_FieldIndex.FaceGenFaceClamp:
                        return FaceGenFaceClamp;
                    case Race_FieldIndex.RaceStats:
                        return RaceStats;
                    case Race_FieldIndex.FaceData:
                        return FaceData;
                    case Race_FieldIndex.BodyData:
                        return BodyData;
                    case Race_FieldIndex.Hairs:
                        return Hairs;
                    case Race_FieldIndex.Eyes:
                        return Eyes;
                    case Race_FieldIndex.FaceGenData:
                        return FaceGenData;
                    case Race_FieldIndex.SNAM:
                        return SNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Race_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Relations:
                        this.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, RaceData.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultHair:
                        this.DefaultHair = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultHairColor:
                        this.DefaultHairColor = ex;
                        break;
                    case Race_FieldIndex.FaceGenMainClamp:
                        this.FaceGenMainClamp = ex;
                        break;
                    case Race_FieldIndex.FaceGenFaceClamp:
                        this.FaceGenFaceClamp = ex;
                        break;
                    case Race_FieldIndex.RaceStats:
                        this.RaceStats = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.FaceData:
                        this.FaceData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePart.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.FaceGenData:
                        this.FaceGenData = new MaskItem<Exception?, FaceGenData.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SNAM:
                        this.SNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Relations:
                        this.Relations = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, RaceData.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultHair:
                        this.DefaultHair = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultHairColor:
                        this.DefaultHairColor = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FaceGenMainClamp:
                        this.FaceGenMainClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FaceGenFaceClamp:
                        this.FaceGenFaceClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.RaceStats:
                        this.RaceStats = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.FaceData:
                        this.FaceData = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePart.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.FaceGenData:
                        this.FaceGenData = (MaskItem<Exception?, FaceGenData.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SNAM:
                        this.SNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Spells != null) return true;
                if (Relations != null) return true;
                if (Data != null) return true;
                if (Voices != null) return true;
                if (DefaultHair != null) return true;
                if (DefaultHairColor != null) return true;
                if (FaceGenMainClamp != null) return true;
                if (FaceGenFaceClamp != null) return true;
                if (RaceStats != null) return true;
                if (FaceData != null) return true;
                if (BodyData != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (FaceGenData != null) return true;
                if (SNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Description, "Description");
                if (Spells.TryGet(out var SpellsItem))
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SpellsItem.Overall);
                        if (SpellsItem.Specific != null)
                        {
                            foreach (var subItem in SpellsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Relations.TryGet(out var RelationsItem))
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RelationsItem.Overall);
                        if (RelationsItem.Specific != null)
                        {
                            foreach (var subItem in RelationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Data?.ToString(fg);
                if (Voices != null)
                {
                    fg.AppendLine($"Voices => {Voices}");
                }
                if (DefaultHair != null)
                {
                    fg.AppendLine($"DefaultHair => {DefaultHair}");
                }
                fg.AppendItem(DefaultHairColor, "DefaultHairColor");
                fg.AppendItem(FaceGenMainClamp, "FaceGenMainClamp");
                fg.AppendItem(FaceGenFaceClamp, "FaceGenFaceClamp");
                if (RaceStats != null)
                {
                    fg.AppendLine($"RaceStats => {RaceStats}");
                }
                if (FaceData.TryGet(out var FaceDataItem))
                {
                    fg.AppendLine("FaceData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FaceDataItem.Overall);
                        if (FaceDataItem.Specific != null)
                        {
                            foreach (var subItem in FaceDataItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (BodyData != null)
                {
                    fg.AppendLine($"BodyData => {BodyData}");
                }
                if (Hairs.TryGet(out var HairsItem))
                {
                    fg.AppendLine("Hairs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(HairsItem.Overall);
                        if (HairsItem.Specific != null)
                        {
                            foreach (var subItem in HairsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Eyes.TryGet(out var EyesItem))
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EyesItem.Overall);
                        if (EyesItem.Specific != null)
                        {
                            foreach (var subItem in EyesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                FaceGenData?.ToString(fg);
                fg.AppendItem(SNAM, "SNAM");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>(ExceptionExt.Combine(this.Relations?.Overall, rhs.Relations?.Overall), ExceptionExt.Combine(this.Relations?.Specific, rhs.Relations?.Specific));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.Voices?.Overall, rhs.Voices?.Overall), GenderedItem.Combine(this.Voices?.Specific, rhs.Voices?.Specific));
                ret.DefaultHair = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.DefaultHair?.Overall, rhs.DefaultHair?.Overall), GenderedItem.Combine(this.DefaultHair?.Specific, rhs.DefaultHair?.Specific));
                ret.DefaultHairColor = this.DefaultHairColor.Combine(rhs.DefaultHairColor);
                ret.FaceGenMainClamp = this.FaceGenMainClamp.Combine(rhs.FaceGenMainClamp);
                ret.FaceGenFaceClamp = this.FaceGenFaceClamp.Combine(rhs.FaceGenFaceClamp);
                ret.RaceStats = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.RaceStats?.Overall, rhs.RaceStats?.Overall), GenderedItem.Combine(this.RaceStats?.Specific, rhs.RaceStats?.Specific));
                ret.FaceData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePart.ErrorMask?>>?>(ExceptionExt.Combine(this.FaceData?.Overall, rhs.FaceData?.Overall), ExceptionExt.Combine(this.FaceData?.Specific, rhs.FaceData?.Specific));
                ret.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.BodyData?.Overall, rhs.BodyData?.Overall), GenderedItem.Combine(this.BodyData?.Specific, rhs.BodyData?.Specific));
                ret.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Hairs?.Overall, rhs.Hairs?.Overall), ExceptionExt.Combine(this.Hairs?.Specific, rhs.Hairs?.Specific));
                ret.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Eyes?.Overall, rhs.Eyes?.Overall), ExceptionExt.Combine(this.Eyes?.Specific, rhs.Eyes?.Specific));
                ret.FaceGenData = this.FaceGenData.Combine(rhs.FaceGenData, (l, r) => l.Combine(r));
                ret.SNAM = this.SNAM.Combine(rhs.SNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool Spells;
            public MaskItem<bool, RaceRelation.TranslationMask?> Relations;
            public MaskItem<bool, RaceData.TranslationMask?> Data;
            public MaskItem<bool, GenderedItem<bool>?> Voices;
            public MaskItem<bool, GenderedItem<bool>?> DefaultHair;
            public bool DefaultHairColor;
            public bool FaceGenMainClamp;
            public bool FaceGenFaceClamp;
            public MaskItem<bool, GenderedItem<RaceStats.TranslationMask?>?> RaceStats;
            public MaskItem<bool, FacePart.TranslationMask?> FaceData;
            public MaskItem<bool, GenderedItem<BodyData.TranslationMask?>?> BodyData;
            public bool Hairs;
            public bool Eyes;
            public MaskItem<bool, FaceGenData.TranslationMask?> FaceGenData;
            public bool SNAM;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Spells = defaultOn;
                this.Relations = new MaskItem<bool, RaceRelation.TranslationMask?>(defaultOn, null);
                this.Data = new MaskItem<bool, RaceData.TranslationMask?>(defaultOn, null);
                this.Voices = new MaskItem<bool, GenderedItem<bool>?>(defaultOn, default);
                this.DefaultHair = new MaskItem<bool, GenderedItem<bool>?>(defaultOn, default);
                this.DefaultHairColor = defaultOn;
                this.FaceGenMainClamp = defaultOn;
                this.FaceGenFaceClamp = defaultOn;
                this.RaceStats = new MaskItem<bool, GenderedItem<RaceStats.TranslationMask?>?>(defaultOn, default);
                this.FaceData = new MaskItem<bool, FacePart.TranslationMask?>(defaultOn, null);
                this.BodyData = new MaskItem<bool, GenderedItem<BodyData.TranslationMask?>?>(defaultOn, default);
                this.Hairs = defaultOn;
                this.Eyes = defaultOn;
                this.FaceGenData = new MaskItem<bool, FaceGenData.TranslationMask?>(defaultOn, null);
                this.SNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Spells, null));
                ret.Add((Relations?.Overall ?? true, Relations?.Specific?.GetCrystal()));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((Voices?.Overall ?? true, null));
                ret.Add((DefaultHair?.Overall ?? true, null));
                ret.Add((DefaultHairColor, null));
                ret.Add((FaceGenMainClamp, null));
                ret.Add((FaceGenFaceClamp, null));
                ret.Add((RaceStats?.Overall ?? true, null));
                ret.Add((FaceData?.Overall ?? true, FaceData?.Specific?.GetCrystal()));
                ret.Add((BodyData?.Overall ?? true, null));
                ret.Add((Hairs, null));
                ret.Add((Eyes, null));
                ret.Add((FaceGenData?.Overall ?? true, FaceGenData?.Specific?.GetCrystal()));
                ret.Add((SNAM, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Race_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => RaceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => RaceCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceCommon.Instance.RemapLinks(this, mapping);
        public Race(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Race(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Race(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Race CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Race CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Race item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RaceSetterCommon)((IRaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Race GetNew()
        {
            return new Race();
        }

    }
    #endregion

    #region Interface
    public partial interface IRace :
        IRaceGetter,
        IOblivionMajorRecord,
        INamed,
        ILoquiObjectSetter<IRaceInternal>
    {
        new String? Name { get; set; }
        new String? Description { get; set; }
        new ExtendedList<IFormLink<Spell>> Spells { get; }
        new ExtendedList<RaceRelation> Relations { get; }
        new RaceData? Data { get; set; }
        new GenderedItem<IFormLink<Race>>? Voices { get; set; }
        new GenderedItem<IFormLink<Hair>>? DefaultHair { get; set; }
        new Byte? DefaultHairColor { get; set; }
        new Int32? FaceGenMainClamp { get; set; }
        new Int32? FaceGenFaceClamp { get; set; }
        new GenderedItem<RaceStats>? RaceStats { get; set; }
        new ExtendedList<FacePart> FaceData { get; }
        new GenderedItem<BodyData?>? BodyData { get; set; }
        new ExtendedList<IFormLink<Hair>>? Hairs { get; set; }
        new ExtendedList<IFormLink<Eye>>? Eyes { get; set; }
        new FaceGenData? FaceGenData { get; set; }
        new Int16? SNAM { get; set; }
    }

    public partial interface IRaceInternal :
        IOblivionMajorRecordInternal,
        IRace,
        IRaceGetter
    {
        new GenderedItem<IFormLink<Race>>? Voices { get; set; }
        new GenderedItem<IFormLink<Hair>>? DefaultHair { get; set; }
        new GenderedItem<RaceStats>? RaceStats { get; set; }
        new GenderedItem<BodyData?>? BodyData { get; set; }
    }

    public partial interface IRaceGetter :
        IOblivionMajorRecordGetter,
        INamedGetter,
        ILoquiObject<IRaceGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Race_Registration.Instance;
        String? Name { get; }
        String? Description { get; }
        IReadOnlyList<IFormLink<ISpellGetter>> Spells { get; }
        IReadOnlyList<IRaceRelationGetter> Relations { get; }
        IRaceDataGetter? Data { get; }
        IGenderedItemGetter<IFormLink<IRaceGetter>>? Voices { get; }
        IGenderedItemGetter<IFormLink<IHairGetter>>? DefaultHair { get; }
        Byte? DefaultHairColor { get; }
        Int32? FaceGenMainClamp { get; }
        Int32? FaceGenFaceClamp { get; }
        IGenderedItemGetter<IRaceStatsGetter>? RaceStats { get; }
        IReadOnlyList<IFacePartGetter> FaceData { get; }
        IGenderedItemGetter<IBodyDataGetter?>? BodyData { get; }
        IReadOnlyList<IFormLink<IHairGetter>>? Hairs { get; }
        IReadOnlyList<IFormLink<IEyeGetter>>? Eyes { get; }
        IFaceGenDataGetter? FaceGenData { get; }
        Int16? SNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RaceMixIn
    {
        public static void Clear(this IRaceInternal item)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Race.Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceGetter item,
            FileGeneration fg,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceGetter item,
            Race.Mask<bool?> checkMask)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Race.Mask<bool> GetHasBeenSetMask(this IRaceGetter item)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRaceGetter item,
            IRaceGetter rhs)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            Race.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Race_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Description = 6,
        Spells = 7,
        Relations = 8,
        Data = 9,
        Voices = 10,
        DefaultHair = 11,
        DefaultHairColor = 12,
        FaceGenMainClamp = 13,
        FaceGenFaceClamp = 14,
        RaceStats = 15,
        FaceData = 16,
        BodyData = 17,
        Hairs = 18,
        Eyes = 19,
        FaceGenData = 20,
        SNAM = 21,
    }
    #endregion

    #region Registration
    public partial class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "265136e6-60a6-4ade-a7c4-b31197fb95e5";

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(Race.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race.ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type? InternalSetterType = typeof(IRaceInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Race_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Race_FieldIndex.Description;
                case "SPELLS":
                    return (ushort)Race_FieldIndex.Spells;
                case "RELATIONS":
                    return (ushort)Race_FieldIndex.Relations;
                case "DATA":
                    return (ushort)Race_FieldIndex.Data;
                case "VOICES":
                    return (ushort)Race_FieldIndex.Voices;
                case "DEFAULTHAIR":
                    return (ushort)Race_FieldIndex.DefaultHair;
                case "DEFAULTHAIRCOLOR":
                    return (ushort)Race_FieldIndex.DefaultHairColor;
                case "FACEGENMAINCLAMP":
                    return (ushort)Race_FieldIndex.FaceGenMainClamp;
                case "FACEGENFACECLAMP":
                    return (ushort)Race_FieldIndex.FaceGenFaceClamp;
                case "RACESTATS":
                    return (ushort)Race_FieldIndex.RaceStats;
                case "FACEDATA":
                    return (ushort)Race_FieldIndex.FaceData;
                case "BODYDATA":
                    return (ushort)Race_FieldIndex.BodyData;
                case "HAIRS":
                    return (ushort)Race_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)Race_FieldIndex.Eyes;
                case "FACEGENDATA":
                    return (ushort)Race_FieldIndex.FaceGenData;
                case "SNAM":
                    return (ushort)Race_FieldIndex.SNAM;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                    return true;
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.SNAM:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                    return true;
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.SNAM:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.SNAM:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return "Name";
                case Race_FieldIndex.Description:
                    return "Description";
                case Race_FieldIndex.Spells:
                    return "Spells";
                case Race_FieldIndex.Relations:
                    return "Relations";
                case Race_FieldIndex.Data:
                    return "Data";
                case Race_FieldIndex.Voices:
                    return "Voices";
                case Race_FieldIndex.DefaultHair:
                    return "DefaultHair";
                case Race_FieldIndex.DefaultHairColor:
                    return "DefaultHairColor";
                case Race_FieldIndex.FaceGenMainClamp:
                    return "FaceGenMainClamp";
                case Race_FieldIndex.FaceGenFaceClamp:
                    return "FaceGenFaceClamp";
                case Race_FieldIndex.RaceStats:
                    return "RaceStats";
                case Race_FieldIndex.FaceData:
                    return "FaceData";
                case Race_FieldIndex.BodyData:
                    return "BodyData";
                case Race_FieldIndex.Hairs:
                    return "Hairs";
                case Race_FieldIndex.Eyes:
                    return "Eyes";
                case Race_FieldIndex.FaceGenData:
                    return "FaceGenData";
                case Race_FieldIndex.SNAM:
                    return "SNAM";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.SNAM:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.SNAM:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return typeof(String);
                case Race_FieldIndex.Description:
                    return typeof(String);
                case Race_FieldIndex.Spells:
                    return typeof(ExtendedList<IFormLink<Spell>>);
                case Race_FieldIndex.Relations:
                    return typeof(ExtendedList<RaceRelation>);
                case Race_FieldIndex.Data:
                    return typeof(RaceData);
                case Race_FieldIndex.Voices:
                    return typeof(GenderedItem<IFormLink<Race>>);
                case Race_FieldIndex.DefaultHair:
                    return typeof(GenderedItem<IFormLink<Hair>>);
                case Race_FieldIndex.DefaultHairColor:
                    return typeof(Byte);
                case Race_FieldIndex.FaceGenMainClamp:
                    return typeof(Int32);
                case Race_FieldIndex.FaceGenFaceClamp:
                    return typeof(Int32);
                case Race_FieldIndex.RaceStats:
                    return typeof(GenderedItem<RaceStats>);
                case Race_FieldIndex.FaceData:
                    return typeof(ExtendedList<FacePart>);
                case Race_FieldIndex.BodyData:
                    return typeof(GenderedItem<BodyData?>);
                case Race_FieldIndex.Hairs:
                    return typeof(ExtendedList<IFormLink<Hair>>);
                case Race_FieldIndex.Eyes:
                    return typeof(ExtendedList<IFormLink<Eye>>);
                case Race_FieldIndex.FaceGenData:
                    return typeof(FaceGenData);
                case Race_FieldIndex.SNAM:
                    return typeof(Int16);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RaceXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.RACE;
        public static readonly Type BinaryWriteTranslation = typeof(RaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly RaceSetterCommon Instance = new RaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = default;
            item.Spells.Clear();
            item.Relations.Clear();
            item.Data = null;
            item.Voices = null;
            item.DefaultHair = null;
            item.DefaultHairColor = default;
            item.FaceGenMainClamp = default;
            item.FaceGenFaceClamp = default;
            item.RaceStats = null;
            item.FaceData.Clear();
            item.BodyData = null;
            item.Hairs = null;
            item.Eyes = null;
            item.FaceGenData = null;
            item.SNAM = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Race)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Race)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IRaceInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: RaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class RaceCommon : OblivionMajorRecordCommon
    {
        public new static readonly RaceCommon Instance = new RaceCommon();

        public Race.Mask<bool> GetEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Voices = GenderedItem.EqualityMaskHelper(
                lhs: item.Voices,
                rhs: rhs.Voices,
                maskGetter: (l, r, i) => EqualityComparer<IFormLink<IRaceGetter>>.Default.Equals(l, r),
                include: include);
            ret.DefaultHair = GenderedItem.EqualityMaskHelper(
                lhs: item.DefaultHair,
                rhs: rhs.DefaultHair,
                maskGetter: (l, r, i) => EqualityComparer<IFormLink<IHairGetter>>.Default.Equals(l, r),
                include: include);
            ret.DefaultHairColor = item.DefaultHairColor == rhs.DefaultHairColor;
            ret.FaceGenMainClamp = item.FaceGenMainClamp == rhs.FaceGenMainClamp;
            ret.FaceGenFaceClamp = item.FaceGenFaceClamp == rhs.FaceGenFaceClamp;
            ret.RaceStats = GenderedItem.EqualityMaskHelper(
                lhs: item.RaceStats,
                rhs: rhs.RaceStats,
                maskGetter: (l, r, i) => l.GetEqualsMask(r, i),
                include: include);
            ret.FaceData = item.FaceData.CollectionEqualsHelper(
                rhs.FaceData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyData = GenderedItem.EqualityMaskHelper(
                lhs: item.BodyData,
                rhs: rhs.BodyData,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.Hairs = item.Hairs.CollectionEqualsHelper(
                rhs.Hairs,
                (l, r) => object.Equals(l, r),
                include);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.FaceGenData = EqualsMaskHelper.EqualsHelper(
                item.FaceGenData,
                rhs.FaceGenData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SNAM = item.SNAM == rhs.SNAM;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRaceGetter item,
            FileGeneration fg,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Race =>");
            }
            else
            {
                fg.AppendLine($"{name} (Race) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRaceGetter item,
            FileGeneration fg,
            Race.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Spells)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Relations?.Overall ?? true)
            {
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Relations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
            if ((printMask?.Voices?.Overall ?? true)
                && item.Voices.TryGet(out var VoicesItem))
            {
                VoicesItem?.ToString(fg, "Voices");
            }
            if ((printMask?.DefaultHair?.Overall ?? true)
                && item.DefaultHair.TryGet(out var DefaultHairItem))
            {
                DefaultHairItem?.ToString(fg, "DefaultHair");
            }
            if ((printMask?.DefaultHairColor ?? true)
                && item.DefaultHairColor.TryGet(out var DefaultHairColorItem))
            {
                fg.AppendItem(DefaultHairColorItem, "DefaultHairColor");
            }
            if ((printMask?.FaceGenMainClamp ?? true)
                && item.FaceGenMainClamp.TryGet(out var FaceGenMainClampItem))
            {
                fg.AppendItem(FaceGenMainClampItem, "FaceGenMainClamp");
            }
            if ((printMask?.FaceGenFaceClamp ?? true)
                && item.FaceGenFaceClamp.TryGet(out var FaceGenFaceClampItem))
            {
                fg.AppendItem(FaceGenFaceClampItem, "FaceGenFaceClamp");
            }
            if ((printMask?.RaceStats?.Overall ?? true)
                && item.RaceStats.TryGet(out var RaceStatsItem))
            {
                RaceStatsItem?.ToString(fg, "RaceStats");
            }
            if (printMask?.FaceData?.Overall ?? true)
            {
                fg.AppendLine("FaceData =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.FaceData)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.BodyData?.Overall ?? true)
                && item.BodyData.TryGet(out var BodyDataItem))
            {
                BodyDataItem?.ToString(fg, "BodyData");
            }
            if ((printMask?.Hairs?.Overall ?? true)
                && item.Hairs.TryGet(out var HairsItem))
            {
                fg.AppendLine("Hairs =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in HairsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Eyes?.Overall ?? true)
                && item.Eyes.TryGet(out var EyesItem))
            {
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in EyesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.FaceGenData?.Overall ?? true)
                && item.FaceGenData.TryGet(out var FaceGenDataItem))
            {
                FaceGenDataItem?.ToString(fg, "FaceGenData");
            }
            if ((printMask?.SNAM ?? true)
                && item.SNAM.TryGet(out var SNAMItem))
            {
                fg.AppendItem(SNAMItem, "SNAM");
            }
        }
        
        public bool HasBeenSet(
            IRaceGetter item,
            Race.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.Data?.Overall.HasValue ?? false && checkMask.Data.Overall.Value != (item.Data != null)) return false;
            if (checkMask.Data?.Specific != null && (item.Data == null || !item.Data.HasBeenSet(checkMask.Data.Specific))) return false;
            if (checkMask.Voices?.Overall ?? false) return false;
            if (checkMask.DefaultHair?.Overall ?? false) return false;
            if (checkMask.DefaultHairColor.HasValue && checkMask.DefaultHairColor.Value != (item.DefaultHairColor != null)) return false;
            if (checkMask.FaceGenMainClamp.HasValue && checkMask.FaceGenMainClamp.Value != (item.FaceGenMainClamp != null)) return false;
            if (checkMask.FaceGenFaceClamp.HasValue && checkMask.FaceGenFaceClamp.Value != (item.FaceGenFaceClamp != null)) return false;
            if (checkMask.RaceStats?.Overall ?? false) return false;
            if (checkMask.BodyData?.Overall ?? false) return false;
            if (checkMask.Hairs?.Overall.HasValue ?? false && checkMask.Hairs!.Overall.Value != (item.Hairs != null)) return false;
            if (checkMask.Eyes?.Overall.HasValue ?? false && checkMask.Eyes!.Overall.Value != (item.Eyes != null)) return false;
            if (checkMask.FaceGenData?.Overall.HasValue ?? false && checkMask.FaceGenData.Overall.Value != (item.FaceGenData != null)) return false;
            if (checkMask.FaceGenData?.Specific != null && (item.FaceGenData == null || !item.FaceGenData.HasBeenSet(checkMask.FaceGenData.Specific))) return false;
            if (checkMask.SNAM.HasValue && checkMask.SNAM.Value != (item.SNAM != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRaceGetter item,
            Race.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Description = (item.Description != null);
            mask.Spells = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            var RelationsItem = item.Relations;
            mask.Relations = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RaceRelation.Mask<bool>?>>?>(true, RelationsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, RaceRelation.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var itemData = item.Data;
            mask.Data = new MaskItem<bool, RaceData.Mask<bool>?>(itemData != null, itemData?.GetHasBeenSetMask());
            mask.Voices = item.Voices == null ? null : new MaskItem<bool, GenderedItem<bool>?>(true, default);
            mask.DefaultHair = item.DefaultHair == null ? null : new MaskItem<bool, GenderedItem<bool>?>(true, default);
            mask.DefaultHairColor = (item.DefaultHairColor != null);
            mask.FaceGenMainClamp = (item.FaceGenMainClamp != null);
            mask.FaceGenFaceClamp = (item.FaceGenFaceClamp != null);
            mask.RaceStats = GenderedItem.HasBeenSetHelper(
                item.RaceStats,
                (i) => i.GetHasBeenSetMask());
            var FaceDataItem = item.FaceData;
            mask.FaceData = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, FacePart.Mask<bool>?>>?>(true, FaceDataItem.WithIndex().Select((i) => new MaskItemIndexed<bool, FacePart.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.BodyData = GenderedItem.HasBeenSetMaskHelper(
                item.BodyData,
                (i) => i?.GetHasBeenSetMask());
            mask.Hairs = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Hairs != null), default);
            mask.Eyes = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Eyes != null), default);
            var itemFaceGenData = item.FaceGenData;
            mask.FaceGenData = new MaskItem<bool, FaceGenData.Mask<bool>?>(itemFaceGenData != null, itemFaceGenData?.GetHasBeenSetMask());
            mask.SNAM = (item.SNAM != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Race_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceGetter? lhs,
            IRaceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!lhs.Spells.SequenceEqual(rhs.Spells)) return false;
            if (!lhs.Relations.SequenceEqual(rhs.Relations)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!Equals(lhs.Voices, rhs.Voices)) return false;
            if (!Equals(lhs.DefaultHair, rhs.DefaultHair)) return false;
            if (lhs.DefaultHairColor != rhs.DefaultHairColor) return false;
            if (lhs.FaceGenMainClamp != rhs.FaceGenMainClamp) return false;
            if (lhs.FaceGenFaceClamp != rhs.FaceGenFaceClamp) return false;
            if (!Equals(lhs.RaceStats, rhs.RaceStats)) return false;
            if (!lhs.FaceData.SequenceEqual(rhs.FaceData)) return false;
            if (!Equals(lhs.BodyData, rhs.BodyData)) return false;
            if (!lhs.Hairs.SequenceEqual(rhs.Hairs)) return false;
            if (!lhs.Eyes.SequenceEqual(rhs.Eyes)) return false;
            if (!object.Equals(lhs.FaceGenData, rhs.FaceGenData)) return false;
            if (lhs.SNAM != rhs.SNAM) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter);
        }
        
        public virtual int GetHashCode(IRaceGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.Spells);
            hash.Add(item.Relations);
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            if (item.Voices.TryGet(out var Voicesitem))
            {
                hash.Add(HashCode.Combine(Voicesitem.Male, Voicesitem.Female));
            }
            if (item.DefaultHair.TryGet(out var DefaultHairitem))
            {
                hash.Add(HashCode.Combine(DefaultHairitem.Male, DefaultHairitem.Female));
            }
            if (item.DefaultHairColor.TryGet(out var DefaultHairColoritem))
            {
                hash.Add(DefaultHairColoritem);
            }
            if (item.FaceGenMainClamp.TryGet(out var FaceGenMainClampitem))
            {
                hash.Add(FaceGenMainClampitem);
            }
            if (item.FaceGenFaceClamp.TryGet(out var FaceGenFaceClampitem))
            {
                hash.Add(FaceGenFaceClampitem);
            }
            if (item.RaceStats.TryGet(out var RaceStatsitem))
            {
                hash.Add(HashCode.Combine(RaceStatsitem.Male, RaceStatsitem.Female));
            }
            hash.Add(item.FaceData);
            if (item.BodyData.TryGet(out var BodyDataitem))
            {
                hash.Add(HashCode.Combine(BodyDataitem.Male, BodyDataitem.Female));
            }
            hash.Add(item.Hairs);
            hash.Add(item.Eyes);
            if (item.FaceGenData.TryGet(out var FaceGenDataitem))
            {
                hash.Add(FaceGenDataitem);
            }
            if (item.SNAM.TryGet(out var SNAMitem))
            {
                hash.Add(SNAMitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Race.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IRaceGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Spells.Select(f => f.FormKey))
            {
                yield return item;
            }
            foreach (var item in obj.Relations.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.Hairs.TryGet(out var HairsItem))
            {
                foreach (var item in HairsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.Eyes.TryGet(out var EyesItem))
            {
                foreach (var item in EyesItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IRaceGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Race obj, Race rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Race(getNextFormKey());
            ret.DeepCopyIn((Race)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Race)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class RaceSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly RaceSetterTranslationCommon Instance = new RaceSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRaceInternal item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Spells);
                try
                {
                    item.Spells.SetTo(
                        rhs.Spells
                        .Select(r => (IFormLink<Spell>)new FormLink<Spell>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Relations) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Relations);
                try
                {
                    item.Relations.SetTo(
                        rhs.Relations
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (!rhs.Voices.TryGet(out var rhsVoicesitem))
            {
                item.Voices = null;
            }
            else
            {
                item.Voices = new GenderedItem<IFormLink<Race>>(
                    male: new FormLink<Race>(rhsVoicesitem.Male.FormKey),
                    female: new FormLink<Race>(rhsVoicesitem.Female.FormKey));
            }
            if (!rhs.DefaultHair.TryGet(out var rhsDefaultHairitem))
            {
                item.DefaultHair = null;
            }
            else
            {
                item.DefaultHair = new GenderedItem<IFormLink<Hair>>(
                    male: new FormLink<Hair>(rhsDefaultHairitem.Male.FormKey),
                    female: new FormLink<Hair>(rhsDefaultHairitem.Female.FormKey));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColor) ?? true))
            {
                item.DefaultHairColor = rhs.DefaultHairColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenMainClamp) ?? true))
            {
                item.FaceGenMainClamp = rhs.FaceGenMainClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenFaceClamp) ?? true))
            {
                item.FaceGenFaceClamp = rhs.FaceGenFaceClamp;
            }
            if (!rhs.RaceStats.TryGet(out var rhsRaceStatsitem))
            {
                item.RaceStats = null;
            }
            else
            {
                item.RaceStats = new GenderedItem<RaceStats>(
                    male: rhsRaceStatsitem.Male.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsRaceStatsitem.Female.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceData) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceData);
                try
                {
                    item.FaceData.SetTo(
                        rhs.FaceData
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (!rhs.BodyData.TryGet(out var rhsBodyDataitem))
            {
                item.BodyData = null;
            }
            else
            {
                item.BodyData = new GenderedItem<BodyData?>(
                    male: rhsBodyDataitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsBodyDataitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                try
                {
                    if ((rhs.Hairs != null))
                    {
                        item.Hairs = 
                            rhs.Hairs
                            .Select(r => (IFormLink<Hair>)new FormLink<Hair>(r.FormKey))
                            .ToExtendedList<IFormLink<Hair>>();
                    }
                    else
                    {
                        item.Hairs = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                try
                {
                    if ((rhs.Eyes != null))
                    {
                        item.Eyes = 
                            rhs.Eyes
                            .Select(r => (IFormLink<Eye>)new FormLink<Eye>(r.FormKey))
                            .ToExtendedList<IFormLink<Eye>>();
                    }
                    else
                    {
                        item.Eyes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenData) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceGenData);
                try
                {
                    if(rhs.FaceGenData.TryGet(out var rhsFaceGenData))
                    {
                        item.FaceGenData = rhsFaceGenData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.FaceGenData));
                    }
                    else
                    {
                        item.FaceGenData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SNAM) ?? true))
            {
                item.SNAM = rhs.SNAM;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Race DeepCopy(
            IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Race
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RaceXmlWriteTranslation Instance = new RaceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRaceGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Race_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Race_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.Spells) ?? true))
            {
                ListXmlTranslation<IFormLink<ISpellGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)Race_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Spells),
                    transl: (XElement subNode, IFormLink<ISpellGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.Relations) ?? true))
            {
                ListXmlTranslation<IRaceRelationGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Relations),
                    item: item.Relations,
                    fieldIndex: (int)Race_FieldIndex.Relations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Relations),
                    transl: (XElement subNode, IRaceRelationGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((RaceRelationXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.Data != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Data) ?? true))
            {
                if (item.Data.TryGet(out var DataItem))
                {
                    ((RaceDataXmlWriteTranslation)((IXmlItem)DataItem).XmlWriteTranslator).Write(
                        item: DataItem,
                        node: node,
                        name: nameof(item.Data),
                        fieldIndex: (int)Race_FieldIndex.Data,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Data));
                }
            }
            if ((item.Voices != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Voices),
                        item: item.Voices.Male.FormKey,
                        errorMask: errorMask);
                }
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Voices),
                        item: item.Voices.Female.FormKey,
                        errorMask: errorMask);
                }
            }
            if ((item.DefaultHair != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHair) ?? true))
            {
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DefaultHair),
                        item: item.DefaultHair.Male.FormKey,
                        errorMask: errorMask);
                }
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DefaultHair),
                        item: item.DefaultHair.Female.FormKey,
                        errorMask: errorMask);
                }
            }
            if ((item.DefaultHairColor != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColor) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DefaultHairColor),
                    item: item.DefaultHairColor.Value,
                    fieldIndex: (int)Race_FieldIndex.DefaultHairColor,
                    errorMask: errorMask);
            }
            if ((item.FaceGenMainClamp != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenMainClamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenMainClamp),
                    item: item.FaceGenMainClamp.Value,
                    fieldIndex: (int)Race_FieldIndex.FaceGenMainClamp,
                    errorMask: errorMask);
            }
            if ((item.FaceGenFaceClamp != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenFaceClamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenFaceClamp),
                    item: item.FaceGenFaceClamp.Value,
                    fieldIndex: (int)Race_FieldIndex.FaceGenFaceClamp,
                    errorMask: errorMask);
            }
            if ((item.RaceStats != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.RaceStats) ?? true))
            {
                {
                    var Item = item.RaceStats.Male;
                    ((RaceStatsXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                        item: Item,
                        node: node,
                        name: nameof(item.RaceStats),
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
                {
                    var Item = item.RaceStats.Female;
                    ((RaceStatsXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                        item: Item,
                        node: node,
                        name: nameof(item.RaceStats),
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceData) ?? true))
            {
                ListXmlTranslation<IFacePartGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.FaceData),
                    item: item.FaceData,
                    fieldIndex: (int)Race_FieldIndex.FaceData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceData),
                    transl: (XElement subNode, IFacePartGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((FacePartXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.BodyData != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                {
                    if (item.BodyData.Male.TryGet(out var Item))
                    {
                        ((BodyDataXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: node,
                            name: nameof(item.BodyData),
                            errorMask: errorMask,
                            translationMask: translationMask);
                    }
                }
                {
                    if (item.BodyData.Female.TryGet(out var Item))
                    {
                        ((BodyDataXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: node,
                            name: nameof(item.BodyData),
                            errorMask: errorMask,
                            translationMask: translationMask);
                    }
                }
            }
            if ((item.Hairs != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                ListXmlTranslation<IFormLink<IHairGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Hairs),
                    item: item.Hairs,
                    fieldIndex: (int)Race_FieldIndex.Hairs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Hairs),
                    transl: (XElement subNode, IFormLink<IHairGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Eyes != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                ListXmlTranslation<IFormLink<IEyeGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Eyes),
                    item: item.Eyes,
                    fieldIndex: (int)Race_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Eyes),
                    transl: (XElement subNode, IFormLink<IEyeGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.FaceGenData != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenData) ?? true))
            {
                if (item.FaceGenData.TryGet(out var FaceGenDataItem))
                {
                    ((FaceGenDataXmlWriteTranslation)((IXmlItem)FaceGenDataItem).XmlWriteTranslator).Write(
                        item: FaceGenDataItem,
                        node: node,
                        name: nameof(item.FaceGenData),
                        fieldIndex: (int)Race_FieldIndex.FaceGenData,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceGenData));
                }
            }
            if ((item.SNAM != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.SNAM) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SNAM),
                    item: item.SNAM.Value,
                    fieldIndex: (int)Race_FieldIndex.SNAM,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Race");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Race");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RaceXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static RaceXmlCreateTranslation Instance = new RaceXmlCreateTranslation();

        public static void FillPublicXml(
            IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Race_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)Race_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    errorMask?.PushIndex((int)Race_FieldIndex.Spells);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Spell>>.Instance.Parse(
                            node: node,
                            enumer: out var SpellsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Spells.SetTo(SpellsItem);
                        }
                        else
                        {
                            item.Spells.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Relations":
                    errorMask?.PushIndex((int)Race_FieldIndex.Relations);
                    try
                    {
                        if (ListXmlTranslation<RaceRelation>.Instance.Parse(
                            node: node,
                            enumer: out var RelationsItem,
                            transl: LoquiXmlTranslation<RaceRelation>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Relations.SetTo(RelationsItem);
                        }
                        else
                        {
                            item.Relations.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    errorMask?.PushIndex((int)Race_FieldIndex.Data);
                    try
                    {
                        item.Data = LoquiXmlTranslation<RaceData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Voices":
                    errorMask?.PushIndex((int)Race_FieldIndex.Voices);
                    try
                    {
                        item.Voices = new GenderedItem<IFormLink<Race>>(
                            male: new FormLink<Race>(FormKeyXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask)),
                            female: new FormLink<Race>(FormKeyXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask)));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultHair":
                    errorMask?.PushIndex((int)Race_FieldIndex.DefaultHair);
                    try
                    {
                        item.DefaultHair = new GenderedItem<IFormLink<Hair>>(
                            male: new FormLink<Hair>(FormKeyXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask)),
                            female: new FormLink<Hair>(FormKeyXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask)));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultHairColor":
                    errorMask?.PushIndex((int)Race_FieldIndex.DefaultHairColor);
                    try
                    {
                        item.DefaultHairColor = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenMainClamp":
                    errorMask?.PushIndex((int)Race_FieldIndex.FaceGenMainClamp);
                    try
                    {
                        item.FaceGenMainClamp = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenFaceClamp":
                    errorMask?.PushIndex((int)Race_FieldIndex.FaceGenFaceClamp);
                    try
                    {
                        item.FaceGenFaceClamp = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RaceStats":
                    errorMask?.PushIndex((int)Race_FieldIndex.RaceStats);
                    try
                    {
                        item.RaceStats = new GenderedItem<RaceStats>(
                            male: LoquiXmlTranslation<RaceStats>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null),
                            female: LoquiXmlTranslation<RaceStats>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceData":
                    errorMask?.PushIndex((int)Race_FieldIndex.FaceData);
                    try
                    {
                        if (ListXmlTranslation<FacePart>.Instance.Parse(
                            node: node,
                            enumer: out var FaceDataItem,
                            transl: LoquiXmlTranslation<FacePart>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.FaceData.SetTo(FaceDataItem);
                        }
                        else
                        {
                            item.FaceData.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyData":
                    errorMask?.PushIndex((int)Race_FieldIndex.BodyData);
                    try
                    {
                        item.BodyData = new GenderedItem<BodyData?>(
                            male: LoquiXmlTranslation<BodyData>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null),
                            female: LoquiXmlTranslation<BodyData>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hairs":
                    errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Hair>>.Instance.Parse(
                            node: node,
                            enumer: out var HairsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Hairs = HairsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Hairs = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Eye>>.Instance.Parse(
                            node: node,
                            enumer: out var EyesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Eyes = EyesItem.ToExtendedList();
                        }
                        else
                        {
                            item.Eyes = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenData":
                    errorMask?.PushIndex((int)Race_FieldIndex.FaceGenData);
                    try
                    {
                        item.FaceGenData = LoquiXmlTranslation<FaceGenData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceGenData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SNAM":
                    errorMask?.PushIndex((int)Race_FieldIndex.SNAM);
                    try
                    {
                        item.SNAM = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RaceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRaceGetter item,
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRaceGetter item,
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceGetter item,
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RaceBinaryWriteTranslation Instance = new RaceBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ISpellGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLink<ISpellGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.SPLO));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRaceRelationGetter>.Instance.Write(
                writer: writer,
                items: item.Relations,
                transl: (MutagenWriter subWriter, IRaceRelationGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((RaceRelationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.Data.TryGet(out var DataItem))
            {
                ((RaceDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Voices,
                recordType: RecordTypes.VNAM,
                transl: (MutagenWriter subWriter, IFormLink<IRaceGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.DefaultHair,
                recordType: RecordTypes.DNAM,
                transl: (MutagenWriter subWriter, IFormLink<IHairGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultHairColor,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FaceGenMainClamp,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FaceGenFaceClamp,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.UNAM));
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.RaceStats,
                recordType: RecordTypes.ATTR,
                transl: (MutagenWriter subWriter, IRaceStatsGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((RaceStatsBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            using (HeaderExport.Subrecord(writer, RecordTypes.NAM0)) { }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFacePartGetter>.Instance.Write(
                writer: writer,
                items: item.FaceData,
                transl: (MutagenWriter subWriter, IFacePartGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((FacePartBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.BodyData,
                markerType: RecordTypes.NAM1,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                transl: (MutagenWriter subWriter, IBodyDataGetter? subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((BodyDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IHairGetter>>.Instance.Write(
                writer: writer,
                items: item.Hairs,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.HNAM),
                transl: (MutagenWriter subWriter, IFormLink<IHairGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IEyeGetter>>.Instance.Write(
                writer: writer,
                items: item.Eyes,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.ENAM),
                transl: (MutagenWriter subWriter, IFormLink<IEyeGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.FaceGenData.TryGet(out var FaceGenDataItem))
            {
                ((FaceGenDataBinaryWriteTranslation)((IBinaryItem)FaceGenDataItem).BinaryWriteTranslator).Write(
                    item: FaceGenDataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
        }

        public void Write(
            MutagenWriter writer,
            IRaceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.RACE),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RaceBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static RaceBinaryCreateTranslation Instance = new RaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.RACE;
        public static void FillBinaryStructs(
            IRaceInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IRaceInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Name);
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Description);
                }
                case RecordTypeInts.SPLO:
                {
                    item.Spells.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Spell>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.SPLO,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Spells);
                }
                case RecordTypeInts.XNAM:
                {
                    item.Relations.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<RaceRelation>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.XNAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out RaceRelation listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<RaceRelation>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Relations);
                }
                case RecordTypeInts.DATA:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.RaceData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Data);
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Voices = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<IFormLink<Race>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Voices);
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultHair = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<IFormLink<Hair>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHair);
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultHairColor = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHairColor);
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceGenMainClamp = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenMainClamp);
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceGenFaceClamp = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenFaceClamp);
                }
                case RecordTypeInts.ATTR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RaceStats = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<RaceStats>(
                        frame: frame,
                        transl: LoquiBinaryTranslation<RaceStats>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.RaceStats);
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.FaceData.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<FacePart>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: FacePart_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out FacePart listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<FacePart>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceData);
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BodyData = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<BodyData>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        transl: LoquiBinaryTranslation<BodyData>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyData);
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Hairs = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Hair>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Hair>>();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Hairs);
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Eyes = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Eye>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Eye>>();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Eyes);
                }
                case RecordTypeInts.FGGS:
                case RecordTypeInts.FGGA:
                case RecordTypeInts.FGTS:
                {
                    item.FaceGenData = Mutagen.Bethesda.Oblivion.FaceGenData.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenData);
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SNAM = frame.ReadInt16();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.SNAM);
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IRaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => RaceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => RaceCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RaceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IReadOnlyList<IFormLink<ISpellGetter>> Spells { get; private set; } = ListExt.Empty<IFormLink<ISpellGetter>>();
        public IReadOnlyList<IRaceRelationGetter> Relations { get; private set; } = ListExt.Empty<RaceRelationBinaryOverlay>();
        #region Data
        private RangeInt32? _DataLocation;
        public IRaceDataGetter? Data => _DataLocation.HasValue ? RaceDataBinaryOverlay.RaceDataFactory(new BinaryMemoryReadStream(_data.Slice(_DataLocation!.Value.Min)), _package) : default;
        public bool Data_IsSet => _DataLocation.HasValue;
        #endregion
        #region Voices
        private int? _VoicesLocation;
        public IGenderedItemGetter<IFormLink<IRaceGetter>>? Voices
        {
            get
            {
                if (!_VoicesLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_data, _VoicesLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IFormLink<IRaceGetter>>(
                    new FormLink<IRaceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(data))),
                    new FormLink<IRaceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(data.Slice(4)))));
            }
        }
        #endregion
        #region DefaultHair
        private int? _DefaultHairLocation;
        public IGenderedItemGetter<IFormLink<IHairGetter>>? DefaultHair
        {
            get
            {
                if (!_DefaultHairLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_data, _DefaultHairLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IFormLink<IHairGetter>>(
                    new FormLink<IHairGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(data))),
                    new FormLink<IHairGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(data.Slice(4)))));
            }
        }
        #endregion
        #region DefaultHairColor
        private int? _DefaultHairColorLocation;
        public Byte? DefaultHairColor => _DefaultHairColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _DefaultHairColorLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region FaceGenMainClamp
        private int? _FaceGenMainClampLocation;
        public Int32? FaceGenMainClamp => _FaceGenMainClampLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FaceGenMainClampLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region FaceGenFaceClamp
        private int? _FaceGenFaceClampLocation;
        public Int32? FaceGenFaceClamp => _FaceGenFaceClampLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FaceGenFaceClampLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region RaceStats
        private int? _RaceStatsLocation;
        public IGenderedItemGetter<IRaceStatsGetter>? RaceStats
        {
            get
            {
                if (!_RaceStatsLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_data, _RaceStatsLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IRaceStatsGetter>(
                    RaceStatsBinaryOverlay.RaceStatsFactory(data, _package),
                    RaceStatsBinaryOverlay.RaceStatsFactory(data.Slice(8), _package));
            }
        }
        #endregion
        public IReadOnlyList<IFacePartGetter> FaceData { get; private set; } = ListExt.Empty<FacePartBinaryOverlay>();
        #region BodyData
        private IGenderedItemGetter<IBodyDataGetter?>? _BodyDataOverlay;
        public IGenderedItemGetter<IBodyDataGetter?>? BodyData => _BodyDataOverlay;
        #endregion
        public IReadOnlyList<IFormLink<IHairGetter>>? Hairs { get; private set; }
        public IReadOnlyList<IFormLink<IEyeGetter>>? Eyes { get; private set; }
        public IFaceGenDataGetter? FaceGenData { get; private set; }
        #region SNAM
        private int? _SNAMLocation;
        public Int16? SNAM => _SNAMLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SNAMLocation.Value, _package.MetaData.Constants)) : default(Int16?);
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RaceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RaceBinaryOverlay RaceFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new RaceBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RaceBinaryOverlay RaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return RaceFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Name);
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Description);
                }
                case RecordTypeInts.SPLO:
                {
                    this.Spells = BinaryOverlayList<IFormLink<ISpellGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<ISpellGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Spells);
                }
                case RecordTypeInts.XNAM:
                {
                    this.Relations = BinaryOverlayList<RaceRelationBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => RaceRelationBinaryOverlay.RaceRelationFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Relations);
                }
                case RecordTypeInts.DATA:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Data);
                }
                case RecordTypeInts.VNAM:
                {
                    _VoicesLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Voices);
                }
                case RecordTypeInts.DNAM:
                {
                    _DefaultHairLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHair);
                }
                case RecordTypeInts.CNAM:
                {
                    _DefaultHairColorLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHairColor);
                }
                case RecordTypeInts.PNAM:
                {
                    _FaceGenMainClampLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenMainClamp);
                }
                case RecordTypeInts.UNAM:
                {
                    _FaceGenFaceClampLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenFaceClamp);
                }
                case RecordTypeInts.ATTR:
                {
                    _RaceStatsLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.RaceStats);
                }
                case RecordTypeInts.NAM0:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.FaceData = this.ParseRepeatedTypelessSubrecord<FacePartBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: FacePart_Registration.TriggeringRecordTypes,
                        factory:  FacePartBinaryOverlay.FacePartFactory);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceData);
                }
                case RecordTypeInts.NAM1:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    _BodyDataOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IBodyDataGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        stream: stream,
                        creator: (s, p, r) => BodyDataBinaryOverlay.BodyDataFactory(s, p, r),
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyData);
                }
                case RecordTypeInts.HNAM:
                {
                    var subMeta = _package.MetaData.Constants.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Hairs = BinaryOverlayList<IFormLink<IHairGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IHairGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Hairs);
                }
                case RecordTypeInts.ENAM:
                {
                    var subMeta = _package.MetaData.Constants.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Eyes = BinaryOverlayList<IFormLink<IEyeGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IEyeGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Eyes);
                }
                case RecordTypeInts.FGGS:
                case RecordTypeInts.FGGA:
                case RecordTypeInts.FGTS:
                {
                    this.FaceGenData = FaceGenDataBinaryOverlay.FaceGenDataFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenData);
                }
                case RecordTypeInts.SNAM:
                {
                    _SNAMLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.SNAM);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

