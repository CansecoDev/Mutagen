/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Rank : 
        LoquiNotifyingObject,
        IRank,
        ILoquiObject<Rank>,
        ILoquiObjectSetter,
        IEquatable<Rank>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Rank_Registration.Instance;
        public static Rank_Registration Registration => Rank_Registration.Instance;

        #region Ctor
        public Rank()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region RankNumber
        public bool RankNumber_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.RankNumber];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Rank_FieldIndex.RankNumber, nameof(RankNumber_IsSet));
        }
        bool IRankGetter.RankNumber_IsSet => RankNumber_IsSet;
        private Int32 _RankNumber;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 RankNumber
        {
            get => this._RankNumber;
            set => RankNumber_Set(value);
        }
        Int32 IRankGetter.RankNumber => this.RankNumber;
        public void RankNumber_Set(
            Int32 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _RankNumber, value, _hasBeenSetTracker, markSet, (int)Rank_FieldIndex.RankNumber, nameof(RankNumber), nameof(RankNumber_IsSet));
        }
        public void RankNumber_Unset()
        {
            this.RankNumber_Set(default(Int32), false);
        }
        #endregion
        #region MaleName
        public bool MaleName_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.MaleName];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Rank_FieldIndex.MaleName, nameof(MaleName_IsSet));
        }
        bool IRankGetter.MaleName_IsSet => MaleName_IsSet;
        private String _MaleName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String MaleName
        {
            get => this._MaleName;
            set => MaleName_Set(value);
        }
        String IRankGetter.MaleName => this.MaleName;
        public void MaleName_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _MaleName, value, _hasBeenSetTracker, markSet, (int)Rank_FieldIndex.MaleName, nameof(MaleName), nameof(MaleName_IsSet));
        }
        public void MaleName_Unset()
        {
            this.MaleName_Set(default(String), false);
        }
        #endregion
        #region FemaleName
        public bool FemaleName_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.FemaleName];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Rank_FieldIndex.FemaleName, nameof(FemaleName_IsSet));
        }
        bool IRankGetter.FemaleName_IsSet => FemaleName_IsSet;
        private String _FemaleName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String FemaleName
        {
            get => this._FemaleName;
            set => FemaleName_Set(value);
        }
        String IRankGetter.FemaleName => this.FemaleName;
        public void FemaleName_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _FemaleName, value, _hasBeenSetTracker, markSet, (int)Rank_FieldIndex.FemaleName, nameof(FemaleName), nameof(FemaleName_IsSet));
        }
        public void FemaleName_Unset()
        {
            this.FemaleName_Set(default(String), false);
        }
        #endregion
        #region Insignia
        public bool Insignia_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.Insignia];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Rank_FieldIndex.Insignia, nameof(Insignia_IsSet));
        }
        bool IRankGetter.Insignia_IsSet => Insignia_IsSet;
        private String _Insignia;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Insignia
        {
            get => this._Insignia;
            set => Insignia_Set(value);
        }
        String IRankGetter.Insignia => this.Insignia;
        public void Insignia_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Insignia, value, _hasBeenSetTracker, markSet, (int)Rank_FieldIndex.Insignia, nameof(Insignia), nameof(Insignia_IsSet));
        }
        public void Insignia_Unset()
        {
            this.Insignia_Set(default(String), false);
        }
        #endregion

        IMask<bool> IEqualsMask<Rank>.GetEqualsMask(Rank rhs, EqualsMaskHelper.Include include) => RankCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IRankGetter>.GetEqualsMask(IRankGetter rhs, EqualsMaskHelper.Include include) => RankCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            return RankCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RankCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Rank_Mask<bool> GetHasBeenSetMask()
        {
            return RankCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Rank rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Rank rhs)
        {
            if (rhs == null) return false;
            if (RankNumber_IsSet != rhs.RankNumber_IsSet) return false;
            if (RankNumber_IsSet)
            {
                if (this.RankNumber != rhs.RankNumber) return false;
            }
            if (MaleName_IsSet != rhs.MaleName_IsSet) return false;
            if (MaleName_IsSet)
            {
                if (!string.Equals(this.MaleName, rhs.MaleName)) return false;
            }
            if (FemaleName_IsSet != rhs.FemaleName_IsSet) return false;
            if (FemaleName_IsSet)
            {
                if (!string.Equals(this.FemaleName, rhs.FemaleName)) return false;
            }
            if (Insignia_IsSet != rhs.Insignia_IsSet) return false;
            if (Insignia_IsSet)
            {
                if (!string.Equals(this.Insignia, rhs.Insignia)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (RankNumber_IsSet)
            {
                ret = HashHelper.GetHashCode(RankNumber).CombineHashCode(ret);
            }
            if (MaleName_IsSet)
            {
                ret = HashHelper.GetHashCode(MaleName).CombineHashCode(ret);
            }
            if (FemaleName_IsSet)
            {
                ret = HashHelper.GetHashCode(FemaleName).CombineHashCode(ret);
            }
            if (Insignia_IsSet)
            {
                ret = HashHelper.GetHashCode(Insignia).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Rank Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Rank Create_Xml(
            XElement node,
            out Rank_ErrorMask errorMask,
            bool doMasks = true,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Rank Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Rank() : null;
                    break;
                default:
                    break;
            }
            var ret = new Rank();
            try
            {
                foreach (var elem in node.Elements())
                {
                    RankCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Rank Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Rank Create_Xml(
            string path,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Rank Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Rank Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Rank Create_Xml(
            Stream stream,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Rank Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Rank_ErrorMask errorMask,
            bool doMasks = true,
            Rank_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            Rank_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            RankCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Rank_FieldIndex)index)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Rank Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Rank Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Rank_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Rank Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Rank();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Rank_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RankCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Rank item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Rank item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E52: // RNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.RankNumber) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Int32 RankNumberParse))
                    {
                        item.RankNumber = RankNumberParse;
                    }
                    else
                    {
                        item.RankNumber = default(Int32);
                    }
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.RankNumber);
                }
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.MaleName) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String MaleNameParse))
                    {
                        item.MaleName = MaleNameParse;
                    }
                    else
                    {
                        item.MaleName = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.MaleName);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.FemaleName) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String FemaleNameParse))
                    {
                        item.FemaleName = FemaleNameParse;
                    }
                    else
                    {
                        item.FemaleName = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.FemaleName);
                }
                case 0x4D414E49: // INAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.Insignia) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String InsigniaParse))
                    {
                        item.Insignia = InsigniaParse;
                    }
                    else
                    {
                        item.Insignia = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.Insignia);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public Rank Copy(
            Rank_CopyMask copyMask = null,
            IRankGetter def = null)
        {
            return Rank.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Rank Copy(
            IRank item,
            Rank_CopyMask copyMask = null,
            IRankGetter def = null)
        {
            Rank ret;
            if (item.GetType().Equals(typeof(Rank)))
            {
                ret = new Rank();
            }
            else
            {
                ret = (Rank)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Rank Copy_ToLoqui(
            IRankGetter item,
            Rank_CopyMask copyMask = null,
            IRankGetter def = null)
        {
            Rank ret;
            if (item.GetType().Equals(typeof(Rank)))
            {
                ret = new Rank() as Rank;
            }
            else
            {
                ret = (Rank)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(IRankGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IRankGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IRankGetter rhs,
            Rank_CopyMask copyMask,
            IRankGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IRankGetter rhs,
            out Rank_ErrorMask errorMask,
            Rank_CopyMask copyMask = null,
            IRankGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RankCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRankGetter rhs,
            ErrorMaskBuilder errorMask,
            Rank_CopyMask copyMask = null,
            IRankGetter def = null,
            bool doMasks = true)
        {
            RankCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    this.RankNumber = (Int32)obj;
                    break;
                case Rank_FieldIndex.MaleName:
                    this.MaleName = (String)obj;
                    break;
                case Rank_FieldIndex.FemaleName:
                    this.FemaleName = (String)obj;
                    break;
                case Rank_FieldIndex.Insignia:
                    this.Insignia = (String)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            RankCommon.Clear(this);
        }


        public static Rank Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Rank();
            foreach (var pair in fields)
            {
                CopyInInternal_Rank(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Rank(Rank obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Rank_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    obj.RankNumber = (Int32)pair.Value;
                    break;
                case Rank_FieldIndex.MaleName:
                    obj.MaleName = (String)pair.Value;
                    break;
                case Rank_FieldIndex.FemaleName:
                    obj.FemaleName = (String)pair.Value;
                    break;
                case Rank_FieldIndex.Insignia:
                    obj.Insignia = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRank : IRankGetter, ILoquiClass<IRank, IRankGetter>, ILoquiClass<Rank, IRankGetter>
    {
        new Int32 RankNumber { get; set; }
        new bool RankNumber_IsSet { get; set; }
        void RankNumber_Set(Int32 item, bool hasBeenSet = true);
        void RankNumber_Unset();

        new String MaleName { get; set; }
        new bool MaleName_IsSet { get; set; }
        void MaleName_Set(String item, bool hasBeenSet = true);
        void MaleName_Unset();

        new String FemaleName { get; set; }
        new bool FemaleName_IsSet { get; set; }
        void FemaleName_Set(String item, bool hasBeenSet = true);
        void FemaleName_Unset();

        new String Insignia { get; set; }
        new bool Insignia_IsSet { get; set; }
        void Insignia_Set(String item, bool hasBeenSet = true);
        void Insignia_Unset();

    }

    public partial interface IRankGetter : ILoquiObject
    {
        #region RankNumber
        Int32 RankNumber { get; }
        bool RankNumber_IsSet { get; }

        #endregion
        #region MaleName
        String MaleName { get; }
        bool MaleName_IsSet { get; }

        #endregion
        #region FemaleName
        String FemaleName { get; }
        bool FemaleName_IsSet { get; }

        #endregion
        #region Insignia
        String Insignia { get; }
        bool Insignia_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Rank_FieldIndex
    {
        RankNumber = 0,
        MaleName = 1,
        FemaleName = 2,
        Insignia = 3,
    }
    #endregion

    #region Registration
    public class Rank_Registration : ILoquiRegistration
    {
        public static readonly Rank_Registration Instance = new Rank_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 24,
            version: 0);

        public const string GUID = "4945b664-16ac-4464-89b0-03534ffd5e18";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Rank_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Rank_ErrorMask);

        public static readonly Type ClassType = typeof(Rank);

        public static readonly Type GetterType = typeof(IRankGetter);

        public static readonly Type SetterType = typeof(IRank);

        public static readonly Type CommonType = typeof(RankCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Rank";

        public const string Name = "Rank";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "RANKNUMBER":
                    return (ushort)Rank_FieldIndex.RankNumber;
                case "MALENAME":
                    return (ushort)Rank_FieldIndex.MaleName;
                case "FEMALENAME":
                    return (ushort)Rank_FieldIndex.FemaleName;
                case "INSIGNIA":
                    return (ushort)Rank_FieldIndex.Insignia;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return "RankNumber";
                case Rank_FieldIndex.MaleName:
                    return "MaleName";
                case Rank_FieldIndex.FemaleName:
                    return "FemaleName";
                case Rank_FieldIndex.Insignia:
                    return "Insignia";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return typeof(Int32);
                case Rank_FieldIndex.MaleName:
                    return typeof(String);
                case Rank_FieldIndex.FemaleName:
                    return typeof(String);
                case Rank_FieldIndex.Insignia:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RNAM_HEADER,
                        MNAM_HEADER,
                        FNAM_HEADER,
                        INAM_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RankCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRank item,
            IRankGetter rhs,
            IRankGetter def,
            ErrorMaskBuilder errorMask,
            Rank_CopyMask copyMask)
        {
            if (copyMask?.RankNumber ?? true)
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.RankNumber);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.RankNumber,
                        rhsHasBeenSet: rhs.RankNumber_IsSet,
                        defItem: def?.RankNumber ?? default(Int32),
                        defHasBeenSet: def?.RankNumber_IsSet ?? false,
                        outRhsItem: out var rhsRankNumberItem,
                        outDefItem: out var defRankNumberItem))
                    {
                        item.RankNumber = rhsRankNumberItem;
                    }
                    else
                    {
                        item.RankNumber_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaleName ?? true)
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.MaleName);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MaleName,
                        rhsHasBeenSet: rhs.MaleName_IsSet,
                        defItem: def?.MaleName ?? default(String),
                        defHasBeenSet: def?.MaleName_IsSet ?? false,
                        outRhsItem: out var rhsMaleNameItem,
                        outDefItem: out var defMaleNameItem))
                    {
                        item.MaleName = rhsMaleNameItem;
                    }
                    else
                    {
                        item.MaleName_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FemaleName ?? true)
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.FemaleName);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FemaleName,
                        rhsHasBeenSet: rhs.FemaleName_IsSet,
                        defItem: def?.FemaleName ?? default(String),
                        defHasBeenSet: def?.FemaleName_IsSet ?? false,
                        outRhsItem: out var rhsFemaleNameItem,
                        outDefItem: out var defFemaleNameItem))
                    {
                        item.FemaleName = rhsFemaleNameItem;
                    }
                    else
                    {
                        item.FemaleName_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Insignia ?? true)
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.Insignia);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Insignia,
                        rhsHasBeenSet: rhs.Insignia_IsSet,
                        defItem: def?.Insignia ?? default(String),
                        defHasBeenSet: def?.Insignia_IsSet ?? false,
                        outRhsItem: out var rhsInsigniaItem,
                        outDefItem: out var defInsigniaItem))
                    {
                        item.Insignia = rhsInsigniaItem;
                    }
                    else
                    {
                        item.Insignia_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IRank item)
        {
            item.RankNumber_Unset();
            item.MaleName_Unset();
            item.FemaleName_Unset();
            item.Insignia_Unset();
        }

        public static Rank_Mask<bool> GetEqualsMask(
            this IRankGetter item,
            IRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Rank_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IRankGetter item,
            IRankGetter rhs,
            Rank_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.RankNumber = item.RankNumber_IsSet == rhs.RankNumber_IsSet && item.RankNumber == rhs.RankNumber;
            ret.MaleName = item.MaleName_IsSet == rhs.MaleName_IsSet && string.Equals(item.MaleName, rhs.MaleName);
            ret.FemaleName = item.FemaleName_IsSet == rhs.FemaleName_IsSet && string.Equals(item.FemaleName, rhs.FemaleName);
            ret.Insignia = item.Insignia_IsSet == rhs.Insignia_IsSet && string.Equals(item.Insignia, rhs.Insignia);
        }

        public static string ToString(
            this IRankGetter item,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRankGetter item,
            FileGeneration fg,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Rank)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Rank)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.RankNumber ?? true)
                {
                    fg.AppendLine($"RankNumber => {item.RankNumber}");
                }
                if (printMask?.MaleName ?? true)
                {
                    fg.AppendLine($"MaleName => {item.MaleName}");
                }
                if (printMask?.FemaleName ?? true)
                {
                    fg.AppendLine($"FemaleName => {item.FemaleName}");
                }
                if (printMask?.Insignia ?? true)
                {
                    fg.AppendLine($"Insignia => {item.Insignia}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRankGetter item,
            Rank_Mask<bool?> checkMask)
        {
            if (checkMask.RankNumber.HasValue && checkMask.RankNumber.Value != item.RankNumber_IsSet) return false;
            if (checkMask.MaleName.HasValue && checkMask.MaleName.Value != item.MaleName_IsSet) return false;
            if (checkMask.FemaleName.HasValue && checkMask.FemaleName.Value != item.FemaleName_IsSet) return false;
            if (checkMask.Insignia.HasValue && checkMask.Insignia.Value != item.Insignia_IsSet) return false;
            return true;
        }

        public static Rank_Mask<bool> GetHasBeenSetMask(IRankGetter item)
        {
            var ret = new Rank_Mask<bool>();
            ret.RankNumber = item.RankNumber_IsSet;
            ret.MaleName = item.MaleName_IsSet;
            ret.FemaleName = item.FemaleName_IsSet;
            ret.Insignia = item.Insignia_IsSet;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Rank item,
            bool doMasks,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Rank item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Rank");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Rank");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this Rank item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.RankNumber_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.RankNumber) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RankNumber),
                    item: item.RankNumber,
                    fieldIndex: (int)Rank_FieldIndex.RankNumber,
                    errorMask: errorMask);
            }
            if (item.MaleName_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.MaleName) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaleName),
                    item: item.MaleName,
                    fieldIndex: (int)Rank_FieldIndex.MaleName,
                    errorMask: errorMask);
            }
            if (item.FemaleName_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.FemaleName) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FemaleName),
                    item: item.FemaleName,
                    fieldIndex: (int)Rank_FieldIndex.FemaleName,
                    errorMask: errorMask);
            }
            if (item.Insignia_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.Insignia) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Insignia),
                    item: item.Insignia,
                    fieldIndex: (int)Rank_FieldIndex.Insignia,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this Rank item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RankCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this Rank item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "RankNumber":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.RankNumber);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 RankNumberParse,
                            errorMask: errorMask))
                        {
                            item.RankNumber = RankNumberParse;
                        }
                        else
                        {
                            item.RankNumber = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleName":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.MaleName);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String MaleNameParse,
                            errorMask: errorMask))
                        {
                            item.MaleName = MaleNameParse;
                        }
                        else
                        {
                            item.MaleName = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleName":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.FemaleName);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String FemaleNameParse,
                            errorMask: errorMask))
                        {
                            item.FemaleName = FemaleNameParse;
                        }
                        else
                        {
                            item.FemaleName = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Insignia":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.Insignia);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String InsigniaParse,
                            errorMask: errorMask))
                        {
                            item.Insignia = InsigniaParse;
                        }
                        else
                        {
                            item.Insignia = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Rank item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Rank_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Rank item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Rank item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.RankNumber_IsSet)
            {
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RankNumber,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.RNAM_HEADER),
                    nullable: false);
            }
            if (item.MaleName_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaleName,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.MNAM_HEADER),
                    nullable: false);
            }
            if (item.FemaleName_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FemaleName,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.FNAM_HEADER),
                    nullable: false);
            }
            if (item.Insignia_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Insignia,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.INAM_HEADER),
                    nullable: false);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Rank_Mask<T> : IMask<T>, IEquatable<Rank_Mask<T>>
    {
        #region Ctors
        public Rank_Mask()
        {
        }

        public Rank_Mask(T initialValue)
        {
            this.RankNumber = initialValue;
            this.MaleName = initialValue;
            this.FemaleName = initialValue;
            this.Insignia = initialValue;
        }
        #endregion

        #region Members
        public T RankNumber;
        public T MaleName;
        public T FemaleName;
        public T Insignia;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Rank_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Rank_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.RankNumber, rhs.RankNumber)) return false;
            if (!object.Equals(this.MaleName, rhs.MaleName)) return false;
            if (!object.Equals(this.FemaleName, rhs.FemaleName)) return false;
            if (!object.Equals(this.Insignia, rhs.Insignia)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.RankNumber?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleName?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleName?.GetHashCode());
            ret = ret.CombineHashCode(this.Insignia?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.RankNumber)) return false;
            if (!eval(this.MaleName)) return false;
            if (!eval(this.FemaleName)) return false;
            if (!eval(this.Insignia)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Rank_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Rank_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Rank_Mask<R> obj, Func<T, R> eval)
        {
            obj.RankNumber = eval(this.RankNumber);
            obj.MaleName = eval(this.MaleName);
            obj.FemaleName = eval(this.FemaleName);
            obj.Insignia = eval(this.Insignia);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Rank_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Rank_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Rank_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.RankNumber ?? true)
                {
                    fg.AppendLine($"RankNumber => {RankNumber}");
                }
                if (printMask?.MaleName ?? true)
                {
                    fg.AppendLine($"MaleName => {MaleName}");
                }
                if (printMask?.FemaleName ?? true)
                {
                    fg.AppendLine($"FemaleName => {FemaleName}");
                }
                if (printMask?.Insignia ?? true)
                {
                    fg.AppendLine($"Insignia => {Insignia}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Rank_ErrorMask : IErrorMask, IErrorMask<Rank_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception RankNumber;
        public Exception MaleName;
        public Exception FemaleName;
        public Exception Insignia;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return RankNumber;
                case Rank_FieldIndex.MaleName:
                    return MaleName;
                case Rank_FieldIndex.FemaleName:
                    return FemaleName;
                case Rank_FieldIndex.Insignia:
                    return Insignia;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    this.RankNumber = ex;
                    break;
                case Rank_FieldIndex.MaleName:
                    this.MaleName = ex;
                    break;
                case Rank_FieldIndex.FemaleName:
                    this.FemaleName = ex;
                    break;
                case Rank_FieldIndex.Insignia:
                    this.Insignia = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    this.RankNumber = (Exception)obj;
                    break;
                case Rank_FieldIndex.MaleName:
                    this.MaleName = (Exception)obj;
                    break;
                case Rank_FieldIndex.FemaleName:
                    this.FemaleName = (Exception)obj;
                    break;
                case Rank_FieldIndex.Insignia:
                    this.Insignia = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (RankNumber != null) return true;
            if (MaleName != null) return true;
            if (FemaleName != null) return true;
            if (Insignia != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Rank_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"RankNumber => {RankNumber}");
            fg.AppendLine($"MaleName => {MaleName}");
            fg.AppendLine($"FemaleName => {FemaleName}");
            fg.AppendLine($"Insignia => {Insignia}");
        }
        #endregion

        #region Combine
        public Rank_ErrorMask Combine(Rank_ErrorMask rhs)
        {
            var ret = new Rank_ErrorMask();
            ret.RankNumber = this.RankNumber.Combine(rhs.RankNumber);
            ret.MaleName = this.MaleName.Combine(rhs.MaleName);
            ret.FemaleName = this.FemaleName.Combine(rhs.FemaleName);
            ret.Insignia = this.Insignia.Combine(rhs.Insignia);
            return ret;
        }
        public static Rank_ErrorMask Combine(Rank_ErrorMask lhs, Rank_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Rank_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Rank_ErrorMask();
        }
        #endregion

    }
    public class Rank_CopyMask
    {
        public Rank_CopyMask()
        {
        }

        public Rank_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.RankNumber = defaultOn;
            this.MaleName = defaultOn;
            this.FemaleName = defaultOn;
            this.Insignia = defaultOn;
        }

        #region Members
        public bool RankNumber;
        public bool MaleName;
        public bool FemaleName;
        public bool Insignia;
        #endregion

    }

    public class Rank_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool RankNumber;
        public bool MaleName;
        public bool FemaleName;
        public bool Insignia;
        #endregion

        #region Ctors
        public Rank_TranslationMask()
        {
        }

        public Rank_TranslationMask(bool defaultOn)
        {
            this.RankNumber = defaultOn;
            this.MaleName = defaultOn;
            this.FemaleName = defaultOn;
            this.Insignia = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((RankNumber, null));
            ret.Add((MaleName, null));
            ret.Add((FemaleName, null));
            ret.Add((Insignia, null));
        }
    }
    #endregion

    #endregion

}
