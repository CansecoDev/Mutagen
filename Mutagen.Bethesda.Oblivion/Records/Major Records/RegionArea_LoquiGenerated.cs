/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionArea : 
        IRegionArea,
        ILoquiObject<RegionArea>,
        ILoquiObjectSetter,
        IPropertySupporter<UInt32>,
        IEquatable<RegionArea>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionArea_Registration.Instance;
        public static RegionArea_Registration Registration => RegionArea_Registration.Instance;

        #region Ctor
        public RegionArea()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EdgeFallOff
        protected UInt32 _EdgeFallOff;
        protected PropertyForwarder<RegionArea, UInt32> _EdgeFallOffForwarder;
        public INotifyingSetItem<UInt32> EdgeFallOff_Property => _EdgeFallOffForwarder ?? (_EdgeFallOffForwarder = new PropertyForwarder<RegionArea, UInt32>(this, (int)RegionArea_FieldIndex.EdgeFallOff));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 EdgeFallOff
        {
            get => this._EdgeFallOff;
            set => this.SetEdgeFallOff(value);
        }
        protected void SetEdgeFallOff(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionArea_FieldIndex.EdgeFallOff];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && EdgeFallOff == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionArea_FieldIndex.EdgeFallOff] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = EdgeFallOff;
                _EdgeFallOff = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)RegionArea_FieldIndex.EdgeFallOff,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _EdgeFallOff = item;
            }
        }
        protected void UnsetEdgeFallOff()
        {
            _hasBeenSetTracker[(int)RegionArea_FieldIndex.EdgeFallOff] = false;
            EdgeFallOff = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<UInt32> IRegionArea.EdgeFallOff_Property => this.EdgeFallOff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<UInt32> IRegionAreaGetter.EdgeFallOff_Property => this.EdgeFallOff_Property;
        #endregion
        #region RegionPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<P2Float> _RegionPoints = new NotifyingList<P2Float>();
        public INotifyingList<P2Float> RegionPoints => _RegionPoints;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<P2Float> RegionPointsEnumerable
        {
            get => _RegionPoints;
            set => _RegionPoints.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<P2Float> IRegionArea.RegionPoints => _RegionPoints;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<P2Float> IRegionAreaGetter.RegionPoints => _RegionPoints;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RegionAreaCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RegionAreaCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RegionAreaCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RegionAreaCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<RegionArea>.GetEqualsMask(RegionArea rhs) => RegionAreaCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRegionAreaGetter>.GetEqualsMask(IRegionAreaGetter rhs) => RegionAreaCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RegionAreaCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RegionArea_Mask<bool> printMask = null)
        {
            return RegionAreaCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionAreaCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public RegionArea_Mask<bool> GetHasBeenSetMask()
        {
            return RegionAreaCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionArea rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionArea rhs)
        {
            if (rhs == null) return false;
            if (EdgeFallOff_Property.HasBeenSet != rhs.EdgeFallOff_Property.HasBeenSet) return false;
            if (EdgeFallOff_Property.HasBeenSet)
            {
                if (this.EdgeFallOff != rhs.EdgeFallOff) return false;
            }
            if (RegionPoints.HasBeenSet != rhs.RegionPoints.HasBeenSet) return false;
            if (RegionPoints.HasBeenSet)
            {
                if (!this.RegionPoints.SequenceEqual(rhs.RegionPoints)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (EdgeFallOff_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EdgeFallOff).CombineHashCode(ret);
            }
            if (RegionPoints.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RegionPoints).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static RegionArea Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionArea Create_XML(
            XElement root,
            out RegionArea_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = RegionArea_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionArea Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionArea();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionArea Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RegionArea Create_XML(
            string path,
            out RegionArea_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RegionArea Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RegionArea Create_XML(
            Stream stream,
            out RegionArea_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RegionArea>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RegionArea_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<RegionArea>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = RegionArea_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RegionArea_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RegionArea_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out RegionArea_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = RegionArea_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out RegionArea_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out RegionArea_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            RegionAreaCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            RegionArea item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "EdgeFallOff":
                    try
                    {
                        errorMask?.PushIndex((int)RegionArea_FieldIndex.EdgeFallOff);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 EdgeFallOffParse,
                            errorMask: errorMask))
                        {
                            item.EdgeFallOff = EdgeFallOffParse;
                        }
                        else
                        {
                            item.UnsetEdgeFallOff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RegionPoints":
                    ListXmlTranslation<P2Float>.Instance.ParseInto(
                        root: root,
                        item: item.RegionPoints,
                        fieldIndex: (int)RegionArea_FieldIndex.RegionPoints,
                        errorMask: errorMask,
                        transl: P2FloatXmlTranslation.Instance.Parse);
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        #region IPropertySupporter UInt32
        protected ObjectCentralizationSubscriptions<UInt32> _UInt32_subscriptions;
        UInt32 IPropertySupporter<UInt32>.Get(int index)
        {
            return GetUInt32(index: index);
        }

        protected UInt32 GetUInt32(int index)
        {
            switch ((RegionArea_FieldIndex)index)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    return EdgeFallOff;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        void IPropertySupporter<UInt32>.Set(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt32(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((RegionArea_FieldIndex)index)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    SetEdgeFallOff(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        bool IPropertySupporter<UInt32>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<UInt32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((RegionArea_FieldIndex)index)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    _hasBeenSetTracker[index] = false;
                    EdgeFallOff = default(UInt32);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt32_subscriptions == null)
            {
                _UInt32_subscriptions = new ObjectCentralizationSubscriptions<UInt32>();
            }
            _UInt32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt32 IPropertySupporter<UInt32>.DefaultValue(int index)
        {
            return DefaultValueUInt32(index: index);
        }

        protected UInt32 DefaultValueUInt32(int index)
        {
            switch ((RegionArea_FieldIndex)index)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    return default(UInt32);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionArea Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionArea Create_Binary(
            MutagenFrame frame,
            out RegionArea_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionArea_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionArea Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionArea();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionArea Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionArea Create_Binary(
            string path,
            out RegionArea_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RegionArea Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionArea Create_Binary(
            Stream stream,
            out RegionArea_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RegionArea_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionArea_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out RegionArea_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RegionArea_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionAreaCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionArea item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            RegionArea item,
            MutagenFrame frame,
            int? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "RPLI":
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RegionArea_FieldIndex.EdgeFallOff) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)RegionArea_FieldIndex.EdgeFallOff);
                        if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out UInt32 EdgeFallOffParse,
                            errorMask: errorMask))
                        {
                            item.EdgeFallOff = EdgeFallOffParse;
                        }
                        else
                        {
                            item.UnsetEdgeFallOff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)RegionArea_FieldIndex.EdgeFallOff);
                case "RPLD":
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RegionArea_FieldIndex.RegionPoints) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<P2Float>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.RegionPoints,
                        fieldIndex: (int)RegionArea_FieldIndex.RegionPoints,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: P2FloatBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)RegionArea_FieldIndex.RegionPoints);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public RegionArea Copy(
            RegionArea_CopyMask copyMask = null,
            IRegionAreaGetter def = null)
        {
            return RegionArea.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionArea Copy(
            IRegionArea item,
            RegionArea_CopyMask copyMask = null,
            IRegionAreaGetter def = null)
        {
            RegionArea ret;
            if (item.GetType().Equals(typeof(RegionArea)))
            {
                ret = new RegionArea();
            }
            else
            {
                ret = (RegionArea)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionArea Copy_ToLoqui(
            IRegionAreaGetter item,
            RegionArea_CopyMask copyMask = null,
            IRegionAreaGetter def = null)
        {
            RegionArea ret;
            if (item.GetType().Equals(typeof(RegionArea)))
            {
                ret = new RegionArea() as RegionArea;
            }
            else
            {
                ret = (RegionArea)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRegionAreaGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionAreaGetter rhs,
            RegionArea_CopyMask copyMask,
            IRegionAreaGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionAreaGetter rhs,
            out RegionArea_ErrorMask errorMask,
            RegionArea_CopyMask copyMask = null,
            IRegionAreaGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionAreaCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RegionArea_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionAreaGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionArea_CopyMask copyMask = null,
            IRegionAreaGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RegionAreaCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    this.SetEdgeFallOff(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case RegionArea_FieldIndex.RegionPoints:
                    this._RegionPoints.SetTo((IEnumerable<P2Float>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionAreaCommon.Clear(this, cmds);
        }


        public static RegionArea Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionArea();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionArea(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RegionArea(RegionArea obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionArea_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    obj.SetEdgeFallOff(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case RegionArea_FieldIndex.RegionPoints:
                    obj._RegionPoints.SetTo((IEnumerable<P2Float>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RegionArea obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionArea : IRegionAreaGetter, ILoquiClass<IRegionArea, IRegionAreaGetter>, ILoquiClass<RegionArea, IRegionAreaGetter>
    {
        new UInt32 EdgeFallOff { get; set; }
        new INotifyingSetItem<UInt32> EdgeFallOff_Property { get; }

        new INotifyingList<P2Float> RegionPoints { get; }
    }

    public partial interface IRegionAreaGetter : ILoquiObject
    {
        #region EdgeFallOff
        UInt32 EdgeFallOff { get; }
        INotifyingSetItemGetter<UInt32> EdgeFallOff_Property { get; }

        #endregion
        #region RegionPoints
        INotifyingListGetter<P2Float> RegionPoints { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionArea_FieldIndex
    {
        EdgeFallOff = 0,
        RegionPoints = 1,
    }
    #endregion

    #region Registration
    public class RegionArea_Registration : ILoquiRegistration
    {
        public static readonly RegionArea_Registration Instance = new RegionArea_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 108,
            version: 0);

        public const string GUID = "9cbce207-fe81-4953-a29f-9010447d54ff";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RegionArea_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionArea_ErrorMask);

        public static readonly Type ClassType = typeof(RegionArea);

        public static readonly Type GetterType = typeof(IRegionAreaGetter);

        public static readonly Type SetterType = typeof(IRegionArea);

        public static readonly Type CommonType = typeof(RegionAreaCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionArea";

        public const string Name = "RegionArea";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "EDGEFALLOFF":
                    return (ushort)RegionArea_FieldIndex.EdgeFallOff;
                case "REGIONPOINTS":
                    return (ushort)RegionArea_FieldIndex.RegionPoints;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.RegionPoints:
                    return true;
                case RegionArea_FieldIndex.EdgeFallOff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                case RegionArea_FieldIndex.RegionPoints:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                case RegionArea_FieldIndex.RegionPoints:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    return "EdgeFallOff";
                case RegionArea_FieldIndex.RegionPoints:
                    return "RegionPoints";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                case RegionArea_FieldIndex.RegionPoints:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                case RegionArea_FieldIndex.RegionPoints:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    return typeof(UInt32);
                case RegionArea_FieldIndex.RegionPoints:
                    return typeof(NotifyingList<P2Float>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType RPLI_HEADER = new RecordType("RPLI");
        public static readonly RecordType RPLD_HEADER = new RecordType("RPLD");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RPLI_HEADER,
                        RPLD_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionAreaCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionArea item,
            IRegionAreaGetter rhs,
            IRegionAreaGetter def,
            ErrorMaskBuilder errorMask,
            RegionArea_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.EdgeFallOff ?? true)
            {
                errorMask.PushIndex((int)RegionArea_FieldIndex.EdgeFallOff);
                try
                {
                    item.EdgeFallOff_Property.SetToWithDefault(
                        rhs: rhs.EdgeFallOff_Property,
                        def: def?.EdgeFallOff_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.RegionPoints != CopyOption.Skip)
            {
                errorMask.PushIndex((int)RegionArea_FieldIndex.RegionPoints);
                try
                {
                    item.RegionPoints.SetToWithDefault(
                        rhs.RegionPoints,
                        def?.RegionPoints,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRegionArea obj,
            NotifyingFireParameters cmds = null)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    obj.EdgeFallOff_Property.HasBeenSet = on;
                    break;
                case RegionArea_FieldIndex.RegionPoints:
                    obj.RegionPoints.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRegionArea obj,
            NotifyingUnsetParameters cmds = null)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    obj.EdgeFallOff_Property.Unset(cmds);
                    break;
                case RegionArea_FieldIndex.RegionPoints:
                    obj.RegionPoints.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRegionArea obj)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    return obj.EdgeFallOff_Property.HasBeenSet;
                case RegionArea_FieldIndex.RegionPoints:
                    return obj.RegionPoints.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRegionAreaGetter obj)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    return obj.EdgeFallOff;
                case RegionArea_FieldIndex.RegionPoints:
                    return obj.RegionPoints;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRegionArea item,
            NotifyingUnsetParameters cmds = null)
        {
            item.EdgeFallOff_Property.Unset(cmds.ToUnsetParams());
            item.RegionPoints.Unset(cmds.ToUnsetParams());
        }

        public static RegionArea_Mask<bool> GetEqualsMask(
            this IRegionAreaGetter item,
            IRegionAreaGetter rhs)
        {
            var ret = new RegionArea_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionAreaGetter item,
            IRegionAreaGetter rhs,
            RegionArea_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.EdgeFallOff = item.EdgeFallOff_Property.Equals(rhs.EdgeFallOff_Property, (l, r) => l == r);
            if (item.RegionPoints.HasBeenSet == rhs.RegionPoints.HasBeenSet)
            {
                if (item.RegionPoints.HasBeenSet)
                {
                    ret.RegionPoints = new MaskItem<bool, IEnumerable<bool>>();
                    ret.RegionPoints.Specific = item.RegionPoints.SelectAgainst<P2Float, bool>(rhs.RegionPoints, ((l, r) => object.Equals(l, r)), out ret.RegionPoints.Overall);
                    ret.RegionPoints.Overall = ret.RegionPoints.Overall && ret.RegionPoints.Specific.All((b) => b);
                }
                else
                {
                    ret.RegionPoints = new MaskItem<bool, IEnumerable<bool>>();
                    ret.RegionPoints.Overall = true;
                }
            }
            else
            {
                ret.RegionPoints = new MaskItem<bool, IEnumerable<bool>>();
                ret.RegionPoints.Overall = false;
            }
        }

        public static string ToString(
            this IRegionAreaGetter item,
            string name = null,
            RegionArea_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionAreaGetter item,
            FileGeneration fg,
            string name = null,
            RegionArea_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionArea)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionArea)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.EdgeFallOff ?? true)
                {
                    fg.AppendLine($"EdgeFallOff => {item.EdgeFallOff}");
                }
                if (printMask?.RegionPoints?.Overall ?? true)
                {
                    fg.AppendLine("RegionPoints =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.RegionPoints)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionAreaGetter item,
            RegionArea_Mask<bool?> checkMask)
        {
            if (checkMask.EdgeFallOff.HasValue && checkMask.EdgeFallOff.Value != item.EdgeFallOff_Property.HasBeenSet) return false;
            if (checkMask.RegionPoints.Overall.HasValue && checkMask.RegionPoints.Overall.Value != item.RegionPoints.HasBeenSet) return false;
            return true;
        }

        public static RegionArea_Mask<bool> GetHasBeenSetMask(IRegionAreaGetter item)
        {
            var ret = new RegionArea_Mask<bool>();
            ret.EdgeFallOff = item.EdgeFallOff_Property.HasBeenSet;
            ret.RegionPoints = new MaskItem<bool, IEnumerable<bool>>(item.RegionPoints.HasBeenSet, null);
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IRegionAreaGetter item,
            bool doMasks,
            out RegionArea_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = RegionArea_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IRegionAreaGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionArea");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionArea");
            }
            if (item.EdgeFallOff_Property.HasBeenSet)
            {
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.EdgeFallOff),
                    item: item.EdgeFallOff_Property,
                    fieldIndex: (int)RegionArea_FieldIndex.EdgeFallOff,
                    errorMask: errorMask);
            }
            if (item.RegionPoints.HasBeenSet)
            {
                ListXmlTranslation<P2Float>.Instance.Write(
                    node: elem,
                    name: nameof(item.RegionPoints),
                    item: item.RegionPoints,
                    fieldIndex: (int)RegionArea_FieldIndex.RegionPoints,
                    errorMask: errorMask,
                    transl: (XElement subNode, P2Float subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        P2FloatXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Item",
                            item: subItem,
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionArea item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionArea_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionArea_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RegionArea item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            RegionArea item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EdgeFallOff_Property,
                fieldIndex: (int)RegionArea_FieldIndex.EdgeFallOff,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(RegionArea_Registration.RPLI_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<P2Float>.Instance.Write(
                writer: writer,
                items: item.RegionPoints,
                fieldIndex: (int)RegionArea_FieldIndex.RegionPoints,
                recordType: RegionArea_Registration.RPLD_HEADER,
                errorMask: errorMask,
                transl: P2FloatBinaryTranslation.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RegionArea_Mask<T> : IMask<T>, IEquatable<RegionArea_Mask<T>>
    {
        #region Ctors
        public RegionArea_Mask()
        {
        }

        public RegionArea_Mask(T initialValue)
        {
            this.EdgeFallOff = initialValue;
            this.RegionPoints = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public T EdgeFallOff;
        public MaskItem<T, IEnumerable<T>> RegionPoints;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionArea_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionArea_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.EdgeFallOff, rhs.EdgeFallOff)) return false;
            if (!object.Equals(this.RegionPoints, rhs.RegionPoints)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.EdgeFallOff?.GetHashCode());
            ret = ret.CombineHashCode(this.RegionPoints?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.EdgeFallOff)) return false;
            if (this.RegionPoints != null)
            {
                if (!eval(this.RegionPoints.Overall)) return false;
                if (this.RegionPoints.Specific != null)
                {
                    foreach (var item in this.RegionPoints.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public RegionArea_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionArea_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionArea_Mask<R> obj, Func<T, R> eval)
        {
            obj.EdgeFallOff = eval(this.EdgeFallOff);
            if (RegionPoints != null)
            {
                obj.RegionPoints = new MaskItem<R, IEnumerable<R>>();
                obj.RegionPoints.Overall = eval(this.RegionPoints.Overall);
                if (RegionPoints.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.RegionPoints.Specific = l;
                    foreach (var item in RegionPoints.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.RegionPoints.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionArea_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionArea_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionArea_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.EdgeFallOff ?? true)
                {
                    fg.AppendLine($"EdgeFallOff => {EdgeFallOff}");
                }
                if (printMask?.RegionPoints?.Overall ?? true)
                {
                    fg.AppendLine("RegionPoints =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RegionPoints.Overall != null)
                        {
                            fg.AppendLine(RegionPoints.Overall.ToString());
                        }
                        if (RegionPoints.Specific != null)
                        {
                            foreach (var subItem in RegionPoints.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionArea_ErrorMask : IErrorMask, IErrorMask<RegionArea_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception EdgeFallOff;
        public MaskItem<Exception, IEnumerable<Exception>> RegionPoints;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    return EdgeFallOff;
                case RegionArea_FieldIndex.RegionPoints:
                    return RegionPoints;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    this.EdgeFallOff = ex;
                    break;
                case RegionArea_FieldIndex.RegionPoints:
                    this.RegionPoints = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
            switch (enu)
            {
                case RegionArea_FieldIndex.EdgeFallOff:
                    this.EdgeFallOff = (Exception)obj;
                    break;
                case RegionArea_FieldIndex.RegionPoints:
                    this.RegionPoints = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (EdgeFallOff != null) return true;
            if (RegionPoints != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionArea_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"EdgeFallOff => {EdgeFallOff}");
            fg.AppendLine("RegionPoints =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (RegionPoints.Overall != null)
                {
                    fg.AppendLine(RegionPoints.Overall.ToString());
                }
                if (RegionPoints.Specific != null)
                {
                    foreach (var subItem in RegionPoints.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RegionArea_ErrorMask Combine(RegionArea_ErrorMask rhs)
        {
            var ret = new RegionArea_ErrorMask();
            ret.EdgeFallOff = this.EdgeFallOff.Combine(rhs.EdgeFallOff);
            ret.RegionPoints = new MaskItem<Exception, IEnumerable<Exception>>(this.RegionPoints.Overall.Combine(rhs.RegionPoints.Overall), new List<Exception>(this.RegionPoints.Specific.And(rhs.RegionPoints.Specific)));
            return ret;
        }
        public static RegionArea_ErrorMask Combine(RegionArea_ErrorMask lhs, RegionArea_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionArea_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionArea_ErrorMask();
        }
        #endregion

    }
    public class RegionArea_CopyMask
    {
        #region Members
        public bool EdgeFallOff;
        public CopyOption RegionPoints;
        #endregion

    }
    #endregion





    #endregion

}
