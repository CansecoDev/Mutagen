/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataGrasses :
        RegionData,
        IRegionDataGrassesInternal,
        ILoquiObjectSetter<RegionDataGrasses>,
        ILinkSubContainer,
        IEquatable<RegionDataGrasses>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataGrasses_Registration.Instance;
        public new static RegionDataGrasses_Registration Registration => RegionDataGrasses_Registration.Instance;
        protected override object CommonInstance => RegionDataGrassesCommon.Instance;

        #region Ctor
        public RegionDataGrasses()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<IFormIDLink<Grass>> _Grasses = new SourceSetList<IFormIDLink<Grass>>();
        public ISourceSetList<IFormIDLink<Grass>> Grasses => _Grasses;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormIDLink<Grass>> IRegionDataGrasses.Grasses => _Grasses;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormIDLinkGetter<IGrassInternalGetter>> IRegionDataGrassesGetter.Grasses => _Grasses;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataGrassesInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataGrassesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRegionDataGrassesInternalGetter rhs)) return false;
            return ((RegionDataGrassesCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(RegionDataGrasses obj)
        {
            return ((RegionDataGrassesCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionDataGrassesCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => RegionDataGrassesXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionDataGrasses CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionDataGrasses_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionDataGrasses CreateFromXml(
            XElement node,
            out RegionDataGrasses_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataGrasses_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataGrasses_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataGrasses CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RegionDataGrasses() : null;
                    break;
                default:
                    break;
            }
            var ret = new RegionDataGrasses();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionDataGrassesXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataGrasses CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionDataGrasses_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataGrasses CreateFromXml(
            string path,
            out RegionDataGrasses_ErrorMask errorMask,
            RegionDataGrasses_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataGrasses CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataGrasses_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionDataGrasses CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionDataGrasses_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataGrasses CreateFromXml(
            Stream stream,
            out RegionDataGrasses_ErrorMask errorMask,
            RegionDataGrasses_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataGrasses CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataGrasses_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            RegionDataGrasses item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    RegionData.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataGrasses_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Grasses)
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Grasses)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => RegionDataGrassesBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionDataGrasses CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataGrasses CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataGrasses_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataGrasses_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataGrasses CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataGrasses();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            RegionDataGrasses item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            RegionData.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            RegionDataGrasses item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x53474452: // RDGS
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLink<Grass>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Grasses,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)RegionDataGrasses_FieldIndex.Grasses);
                }
                default:
                    return RegionData.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public RegionDataGrasses Copy(
            RegionDataGrasses_CopyMask copyMask = null,
            RegionDataGrasses def = null)
        {
            return RegionDataGrasses.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionDataGrasses Copy(
            RegionDataGrasses item,
            RegionDataGrasses_CopyMask copyMask = null,
            RegionDataGrasses def = null)
        {
            RegionDataGrasses ret;
            if (item.GetType().Equals(typeof(RegionDataGrasses)))
            {
                ret = new RegionDataGrasses();
            }
            else
            {
                ret = (RegionDataGrasses)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionDataGrasses Copy_ToLoqui(
            RegionDataGrasses item,
            RegionDataGrasses_CopyMask copyMask = null,
            RegionDataGrasses def = null)
        {
            RegionDataGrasses ret;
            if (item.GetType().Equals(typeof(RegionDataGrasses)))
            {
                ret = new RegionDataGrasses() as RegionDataGrasses;
            }
            else
            {
                ret = (RegionDataGrasses)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(RegionData rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            RegionDataGrasses rhs,
            RegionDataGrasses_CopyMask copyMask,
            RegionDataGrasses def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            RegionDataGrasses rhs,
            out RegionDataGrasses_ErrorMask errorMask,
            RegionDataGrasses_CopyMask copyMask = null,
            RegionDataGrasses def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataGrassesCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RegionDataGrasses_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            RegionDataGrasses rhs,
            ErrorMaskBuilder errorMask,
            RegionDataGrasses_CopyMask copyMask = null,
            RegionDataGrasses def = null)
        {
            RegionDataGrassesCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    this._Grasses.SetTo((ISetList<IFormIDLink<Grass>>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            RegionDataGrassesCommon.Instance.Clear(this);
        }

        public new static RegionDataGrasses Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionDataGrasses();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionDataGrasses(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_RegionDataGrasses(RegionDataGrasses obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionDataGrasses_FieldIndex enu))
            {
                CopyInInternal_RegionData(obj, pair);
            }
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    obj._Grasses.SetTo((ISetList<IFormIDLink<Grass>>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRegionDataGrasses :
        IRegionDataGrassesInternalGetter,
        IRegionData,
        ILoquiObjectSetter<IRegionDataGrassesInternal>
    {
        new ISetList<IFormIDLink<Grass>> Grasses { get; }
        void CopyFieldsFrom(
            RegionDataGrasses rhs,
            ErrorMaskBuilder errorMask = null,
            RegionDataGrasses_CopyMask copyMask = null,
            RegionDataGrasses def = null);
    }

    public partial interface IRegionDataGrassesInternal :
        IRegionDataInternal,
        IRegionDataGrasses,
        IRegionDataGrassesInternalGetter
    {
    }

    public partial interface IRegionDataGrassesGetter :
        IRegionDataGetter,
        ILoquiObject<IRegionDataGrassesInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Grasses
        IReadOnlySetList<IFormIDLinkGetter<IGrassInternalGetter>> Grasses { get; }
        #endregion

    }

    public partial interface IRegionDataGrassesInternalGetter :
        IRegionDataInternalGetter,
        IRegionDataGrassesGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class RegionDataGrassesMixIn
    {
        public static void Clear(this IRegionDataGrassesInternal item)
        {
            ((RegionDataGrassesCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static RegionDataGrasses_Mask<bool> GetEqualsMask(
            this IRegionDataGrassesInternalGetter item,
            IRegionDataGrassesInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionDataGrassesCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionDataGrassesInternalGetter item,
            string name = null,
            RegionDataGrasses_Mask<bool> printMask = null)
        {
            return ((RegionDataGrassesCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionDataGrassesInternalGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataGrasses_Mask<bool> printMask = null)
        {
            ((RegionDataGrassesCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRegionDataGrassesInternalGetter item,
            RegionDataGrasses_Mask<bool?> checkMask)
        {
            return ((RegionDataGrassesCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RegionDataGrasses_Mask<bool> GetHasBeenSetMask(this IRegionDataGrassesInternalGetter item)
        {
            var ret = new RegionDataGrasses_Mask<bool>();
            ((RegionDataGrassesCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRegionDataGrassesInternalGetter item,
            IRegionDataGrassesInternalGetter rhs)
        {
            return ((RegionDataGrassesCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataGrasses_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        RDATDataTypeState = 3,
        Grasses = 4,
    }
    #endregion

    #region Registration
    public class RegionDataGrasses_Registration : ILoquiRegistration
    {
        public static readonly RegionDataGrasses_Registration Instance = new RegionDataGrasses_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 112,
            version: 0);

        public const string GUID = "1c951313-4152-4555-922e-549f944794e8";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(RegionDataGrasses_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataGrasses_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataGrasses);

        public static readonly Type GetterType = typeof(IRegionDataGrassesGetter);

        public static readonly Type InternalGetterType = typeof(IRegionDataGrassesInternalGetter);

        public static readonly Type SetterType = typeof(IRegionDataGrasses);

        public static readonly Type InternalSetterType = typeof(IRegionDataGrassesInternal);

        public static readonly Type CommonType = typeof(RegionDataGrassesCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataGrasses";

        public const string Name = "RegionDataGrasses";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "GRASSES":
                    return (ushort)RegionDataGrasses_FieldIndex.Grasses;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    return true;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    return "Grasses";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    return typeof(ISetList<IFormIDLink<Grass>>);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RegionDataGrassesXmlWriteTranslation);
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDGS_HEADER = new RecordType("RDGS");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(RegionDataGrassesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionDataGrassesCommon : RegionDataCommon
    {
        public static readonly RegionDataGrassesCommon Instance = new RegionDataGrassesCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            RegionDataGrasses item,
            RegionDataGrasses rhs,
            RegionDataGrasses def,
            ErrorMaskBuilder errorMask,
            RegionDataGrasses_CopyMask copyMask)
        {
            RegionDataCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Grasses != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)RegionDataGrasses_FieldIndex.Grasses);
                try
                {
                    item.Grasses.SetToWithDefault(
                        rhs.Grasses,
                        def?.Grasses);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IRegionDataGrassesInternal item)
        {
            ClearPartial();
            item.Grasses.Unset();
            base.Clear(item);
        }

        public override void Clear(IRegionDataInternal item)
        {
            Clear(item: (IRegionDataGrassesInternal)item);
        }

        public RegionDataGrasses_Mask<bool> GetEqualsMask(
            IRegionDataGrassesInternalGetter item,
            IRegionDataGrassesInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionDataGrasses_Mask<bool>();
            ((RegionDataGrassesCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IRegionDataGrassesInternalGetter item,
            IRegionDataGrassesInternalGetter rhs,
            RegionDataGrasses_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Grasses = item.Grasses.CollectionEqualsHelper(
                rhs.Grasses,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IRegionDataGrassesInternalGetter item,
            string name = null,
            RegionDataGrasses_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IRegionDataGrassesInternalGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataGrasses_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RegionDataGrasses =>");
            }
            else
            {
                fg.AppendLine($"{name} (RegionDataGrasses) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IRegionDataGrassesInternalGetter item,
            FileGeneration fg,
            RegionDataGrasses_Mask<bool> printMask = null)
        {
            RegionDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Grasses?.Overall ?? true)
            {
                fg.AppendLine("Grasses =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Grasses)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }

        public bool HasBeenSet(
            IRegionDataGrassesInternalGetter item,
            RegionDataGrasses_Mask<bool?> checkMask)
        {
            if (checkMask.Grasses.Overall.HasValue && checkMask.Grasses.Overall.Value != item.Grasses.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IRegionDataGrassesInternalGetter item,
            RegionDataGrasses_Mask<bool> mask)
        {
            mask.Grasses = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Grasses.HasBeenSet, null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static RegionDataGrasses_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataGrasses_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataGrasses_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataGrasses_FieldIndex)((int)index);
                case RegionData_FieldIndex.RDATDataTypeState:
                    return (RegionDataGrasses_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IRegionDataGrassesInternalGetter lhs,
            IRegionDataGrassesInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Grasses.HasBeenSet != rhs.Grasses.HasBeenSet) return false;
            if (lhs.Grasses.HasBeenSet)
            {
                if (!lhs.Grasses.SequenceEqual(rhs.Grasses)) return false;
            }
            return true;
        }

        public override bool Equals(
            IRegionDataInternalGetter lhs,
            IRegionDataInternalGetter rhs)
        {
            return Equals(
                lhs: (IRegionDataGrassesInternalGetter)lhs,
                rhs: rhs as IRegionDataGrassesInternalGetter);
        }

        public virtual int GetHashCode(IRegionDataGrassesInternalGetter item)
        {
            int ret = 0;
            if (item.Grasses.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Grasses).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IRegionDataInternalGetter item)
        {
            return GetHashCode(item: (IRegionDataGrassesInternalGetter)item);
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RegionDataGrassesXmlWriteTranslation :
        RegionDataXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RegionDataGrassesXmlWriteTranslation Instance = new RegionDataGrassesXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRegionDataGrassesInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            RegionDataXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Grasses.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)RegionDataGrasses_FieldIndex.Grasses) ?? true))
            {
                ListXmlTranslation<IFormIDLinkGetter<IGrassInternalGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Grasses),
                    item: item.Grasses,
                    fieldIndex: (int)RegionDataGrasses_FieldIndex.Grasses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RegionDataGrasses_FieldIndex.Grasses),
                    transl: (XElement subNode, IFormIDLinkGetter<IGrassInternalGetter> subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem?.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IRegionDataGrassesInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataGrasses");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataGrasses");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionDataGrassesInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IRegionDataInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionDataGrassesInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RegionDataGrassesXmlCreateTranslation : RegionDataXmlCreateTranslation
    {
        public new readonly static RegionDataGrassesXmlCreateTranslation Instance = new RegionDataGrassesXmlCreateTranslation();

        public static void FillPublicXml(
            IRegionDataGrassesInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataGrassesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRegionDataGrassesInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Grasses":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataGrasses_FieldIndex.Grasses);
                        if (ListXmlTranslation<IFormIDLink<Grass>>.Instance.Parse(
                            node: node,
                            enumer: out var GrassesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Grasses.SetTo(GrassesItem);
                        }
                        else
                        {
                            item.Grasses.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    RegionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class RegionDataGrassesXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRegionDataGrassesInternalGetter item,
            XElement node,
            out RegionDataGrasses_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataGrasses_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataGrassesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataGrasses_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRegionDataGrassesInternalGetter item,
            string path,
            out RegionDataGrasses_ErrorMask errorMask,
            RegionDataGrasses_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionDataGrassesInternalGetter item,
            Stream stream,
            out RegionDataGrasses_ErrorMask errorMask,
            RegionDataGrasses_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class RegionDataGrasses_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataGrasses_Mask<T>>
    {
        #region Ctors
        public RegionDataGrasses_Mask()
        {
        }

        public RegionDataGrasses_Mask(T initialValue)
        {
            this.Grasses = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Grasses;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataGrasses_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataGrasses_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Grasses?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Grasses != null)
            {
                if (!eval(this.Grasses.Overall)) return false;
                if (this.Grasses.Specific != null)
                {
                    foreach (var item in this.Grasses.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataGrasses_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataGrasses_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataGrasses_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Grasses != null)
            {
                obj.Grasses = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Grasses.Overall = eval(this.Grasses.Overall);
                if (Grasses.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Grasses.Specific = l;
                    foreach (var item in Grasses.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Grasses.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataGrasses_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataGrasses_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataGrasses_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Grasses?.Overall ?? true)
                {
                    fg.AppendLine("Grasses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Grasses.Overall != null)
                        {
                            fg.AppendLine(Grasses.Overall.ToString());
                        }
                        if (Grasses.Specific != null)
                        {
                            foreach (var subItem in Grasses.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataGrasses_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataGrasses_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Grasses;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    return Grasses;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    this.Grasses = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataGrasses_FieldIndex enu = (RegionDataGrasses_FieldIndex)index;
            switch (enu)
            {
                case RegionDataGrasses_FieldIndex.Grasses:
                    this.Grasses = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Grasses != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataGrasses_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Grasses =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Grasses.Overall != null)
                {
                    fg.AppendLine(Grasses.Overall.ToString());
                }
                if (Grasses.Specific != null)
                {
                    foreach (var subItem in Grasses.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RegionDataGrasses_ErrorMask Combine(RegionDataGrasses_ErrorMask rhs)
        {
            var ret = new RegionDataGrasses_ErrorMask();
            ret.Grasses = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Grasses.Overall.Combine(rhs.Grasses.Overall), new List<(int Index, Exception Value)>(this.Grasses.Specific.And(rhs.Grasses.Specific)));
            return ret;
        }
        public static RegionDataGrasses_ErrorMask Combine(RegionDataGrasses_ErrorMask lhs, RegionDataGrasses_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataGrasses_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataGrasses_ErrorMask();
        }
        #endregion

    }
    public class RegionDataGrasses_CopyMask : RegionData_CopyMask
    {
        public RegionDataGrasses_CopyMask()
        {
        }

        public RegionDataGrasses_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Grasses = deepCopyOption;
        }

        #region Members
        public CopyOption Grasses;
        #endregion

    }

    public class RegionDataGrasses_TranslationMask : RegionData_TranslationMask
    {
        #region Members
        public bool Grasses;
        #endregion

        #region Ctors
        public RegionDataGrasses_TranslationMask()
            : base()
        {
        }

        public RegionDataGrasses_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Grasses = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Grasses, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RegionDataGrassesBinaryWriteTranslation :
        RegionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RegionDataGrassesBinaryWriteTranslation Instance = new RegionDataGrassesBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IRegionDataGrassesInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            RegionDataBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Grasses.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormIDLinkGetter<IGrassInternalGetter>>.Instance.Write(
                    writer: writer,
                    items: item.Grasses,
                    recordType: RegionDataGrasses_Registration.RDGS_HEADER,
                    transl: (MutagenWriter subWriter, IFormIDLinkGetter<IGrassInternalGetter> subItem) =>
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            masterReferences: masterReferences);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IRegionDataGrassesInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionDataGrassesInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IRegionDataInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionDataGrassesInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RegionDataGrassesBinaryCreateTranslation : RegionDataBinaryCreateTranslation
    {
        public new readonly static RegionDataGrassesBinaryCreateTranslation Instance = new RegionDataGrassesBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class RegionDataGrassesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRegionDataGrassesInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionDataGrasses_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataGrassesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataGrasses_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    public partial class RegionDataGrassesBinaryWrapper :
        RegionDataBinaryWrapper,
        IRegionDataGrassesInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataGrasses_Registration.Instance;
        public new static RegionDataGrasses_Registration Registration => RegionDataGrasses_Registration.Instance;
        protected override object CommonInstance => RegionDataGrassesCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataGrassesInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => RegionDataGrassesXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => RegionDataGrassesBinaryWriteTranslation.Instance;

        public IReadOnlySetList<IFormIDLinkGetter<IGrassInternalGetter>> Grasses { get; private set; } = EmptySetList<IFormIDLinkGetter<IGrassInternalGetter>>.Instance;
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected RegionDataGrassesBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RegionDataGrassesBinaryWrapper RegionDataGrassesFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new RegionDataGrassesBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x53474452: // RDGS
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Grasses = BinaryWrapperSetList<IFormIDLinkGetter<IGrassInternalGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormIDLink<IGrassInternalGetter>(FormKey.Factory(p.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)RegionDataGrasses_FieldIndex.Grasses);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

    #endregion

    #endregion

}
