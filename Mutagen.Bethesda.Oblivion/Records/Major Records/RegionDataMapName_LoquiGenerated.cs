/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataMapName : 
        RegionData,
        IRegionDataMapName,
        ILoquiObject<RegionDataMapName>,
        ILoquiObjectSetter,
        IEquatable<RegionDataMapName>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataMapName_Registration.Instance;
        public new static RegionDataMapName_Registration Registration => RegionDataMapName_Registration.Instance;

        #region Ctor
        public RegionDataMapName()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MapName
        public bool MapName_IsSet
        {
            get => _hasBeenSetTracker[(int)RegionDataMapName_FieldIndex.MapName];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)RegionDataMapName_FieldIndex.MapName, nameof(MapName_IsSet));
        }
        bool IRegionDataMapNameGetter.MapName_IsSet => MapName_IsSet;
        private String _MapName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String MapName
        {
            get => this._MapName;
            set => MapName_Set(value);
        }
        String IRegionDataMapNameGetter.MapName => this.MapName;
        public void MapName_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _MapName, value, _hasBeenSetTracker, markSet, (int)RegionDataMapName_FieldIndex.MapName, nameof(MapName), nameof(MapName_IsSet));
        }
        public void MapName_Unset()
        {
            this.MapName_Set(default(String), false);
        }
        #endregion

        IMask<bool> IEqualsMask<RegionDataMapName>.GetEqualsMask(RegionDataMapName rhs, EqualsMaskHelper.Include include) => RegionDataMapNameCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IRegionDataMapNameGetter>.GetEqualsMask(IRegionDataMapNameGetter rhs, EqualsMaskHelper.Include include) => RegionDataMapNameCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            return RegionDataMapNameCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataMapNameCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new RegionDataMapName_Mask<bool> GetHasBeenSetMask()
        {
            return RegionDataMapNameCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataMapName rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataMapName rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (MapName_IsSet != rhs.MapName_IsSet) return false;
            if (MapName_IsSet)
            {
                if (!string.Equals(this.MapName, rhs.MapName)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (MapName_IsSet)
            {
                ret = HashHelper.GetHashCode(MapName).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionDataMapName Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionDataMapName_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionDataMapName Create_Xml(
            XElement node,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataMapName Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RegionDataMapName() : null;
                    break;
                default:
                    break;
            }
            var ret = new RegionDataMapName();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionDataMapNameCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataMapName Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionDataMapName_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataMapName Create_Xml(
            string path,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataMapName Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionDataMapName Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionDataMapName_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataMapName Create_Xml(
            Stream stream,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataMapName Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataMapName_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out RegionData_ErrorMask errorMask,
            bool doMasks = true,
            RegionData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            RegionDataMapNameCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            RegionDataMapName item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    RegionData.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((RegionDataMapName_FieldIndex)index)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return _hasBeenSetTracker[index];
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataMapName_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionDataMapName Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataMapName Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataMapName Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataMapName();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataMapNameCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionDataMapName item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            RegionDataMapName item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x504D4452: // RDMP
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String MapNameParse))
                    {
                        item.MapName = MapNameParse;
                    }
                    else
                    {
                        item.MapName = default(String);
                    }
                    return TryGet<int?>.Succeed((int)RegionDataMapName_FieldIndex.MapName);
                }
                default:
                    return RegionData.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public RegionDataMapName Copy(
            RegionDataMapName_CopyMask copyMask = null,
            IRegionDataMapNameGetter def = null)
        {
            return RegionDataMapName.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionDataMapName Copy(
            IRegionDataMapName item,
            RegionDataMapName_CopyMask copyMask = null,
            IRegionDataMapNameGetter def = null)
        {
            RegionDataMapName ret;
            if (item.GetType().Equals(typeof(RegionDataMapName)))
            {
                ret = new RegionDataMapName();
            }
            else
            {
                ret = (RegionDataMapName)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionDataMapName Copy_ToLoqui(
            IRegionDataMapNameGetter item,
            RegionDataMapName_CopyMask copyMask = null,
            IRegionDataMapNameGetter def = null)
        {
            RegionDataMapName ret;
            if (item.GetType().Equals(typeof(RegionDataMapName)))
            {
                ret = new RegionDataMapName() as RegionDataMapName;
            }
            else
            {
                ret = (RegionDataMapName)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IRegionDataGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IRegionDataMapNameGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IRegionDataMapNameGetter rhs,
            RegionDataMapName_CopyMask copyMask,
            IRegionDataMapNameGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IRegionDataMapNameGetter rhs,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_CopyMask copyMask = null,
            IRegionDataMapNameGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataMapNameCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionDataMapNameGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataMapName_CopyMask copyMask = null,
            IRegionDataMapNameGetter def = null,
            bool doMasks = true)
        {
            RegionDataMapNameCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    this.MapName = (String)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            RegionDataMapNameCommon.Clear(this);
        }


        public new static RegionDataMapName Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionDataMapName();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionDataMapName(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_RegionDataMapName(RegionDataMapName obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionDataMapName_FieldIndex enu))
            {
                CopyInInternal_RegionData(obj, pair);
            }
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    obj.MapName = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRegionDataMapName : IRegionDataMapNameGetter, IRegionData, ILoquiClass<IRegionDataMapName, IRegionDataMapNameGetter>, ILoquiClass<RegionDataMapName, IRegionDataMapNameGetter>
    {
        new String MapName { get; set; }
        new bool MapName_IsSet { get; set; }
        void MapName_Set(String item, bool hasBeenSet = true);
        void MapName_Unset();

    }

    public partial interface IRegionDataMapNameGetter : IRegionDataGetter
    {
        #region MapName
        String MapName { get; }
        bool MapName_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataMapName_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        MapName = 3,
    }
    #endregion

    #region Registration
    public class RegionDataMapName_Registration : ILoquiRegistration
    {
        public static readonly RegionDataMapName_Registration Instance = new RegionDataMapName_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 111,
            version: 0);

        public const string GUID = "acca1023-9d99-47c2-82a4-d46ed90b087b";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(RegionDataMapName_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataMapName_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataMapName);

        public static readonly Type GetterType = typeof(IRegionDataMapNameGetter);

        public static readonly Type SetterType = typeof(IRegionDataMapName);

        public static readonly Type CommonType = typeof(RegionDataMapNameCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataMapName";

        public const string Name = "RegionDataMapName";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAPNAME":
                    return (ushort)RegionDataMapName_FieldIndex.MapName;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return "MapName";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return typeof(String);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDMP_HEADER = new RecordType("RDMP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionDataMapNameCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionDataMapName item,
            IRegionDataMapNameGetter rhs,
            IRegionDataMapNameGetter def,
            ErrorMaskBuilder errorMask,
            RegionDataMapName_CopyMask copyMask)
        {
            RegionDataCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.MapName ?? true)
            {
                errorMask?.PushIndex((int)RegionDataMapName_FieldIndex.MapName);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MapName,
                        rhsHasBeenSet: rhs.MapName_IsSet,
                        defItem: def?.MapName ?? default(String),
                        defHasBeenSet: def?.MapName_IsSet ?? false,
                        outRhsItem: out var rhsMapNameItem,
                        outDefItem: out var defMapNameItem))
                    {
                        item.MapName = rhsMapNameItem;
                    }
                    else
                    {
                        item.MapName_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IRegionDataMapName item)
        {
            item.MapName_Unset();
        }

        public static RegionDataMapName_Mask<bool> GetEqualsMask(
            this IRegionDataMapNameGetter item,
            IRegionDataMapNameGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionDataMapName_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionDataMapNameGetter item,
            IRegionDataMapNameGetter rhs,
            RegionDataMapName_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MapName = item.MapName_IsSet == rhs.MapName_IsSet && string.Equals(item.MapName, rhs.MapName);
            RegionDataCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRegionDataMapNameGetter item,
            string name = null,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionDataMapNameGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionDataMapName)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionDataMapName)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MapName ?? true)
                {
                    fg.AppendLine($"MapName => {item.MapName}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionDataMapNameGetter item,
            RegionDataMapName_Mask<bool?> checkMask)
        {
            if (checkMask.MapName.HasValue && checkMask.MapName.Value != item.MapName_IsSet) return false;
            return true;
        }

        public static RegionDataMapName_Mask<bool> GetHasBeenSetMask(IRegionDataMapNameGetter item)
        {
            var ret = new RegionDataMapName_Mask<bool>();
            ret.MapName = item.MapName_IsSet;
            return ret;
        }

        public static RegionDataMapName_FieldIndex? ConvertFieldIndex(RegionData_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static RegionDataMapName_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataMapName_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataMapName_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataMapName_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            RegionDataMapName item,
            bool doMasks,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            RegionDataMapName item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataMapName");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataMapName");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this RegionDataMapName item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            RegionDataCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.MapName_IsSet
                && (translationMask?.GetShouldTranslate((int)RegionDataMapName_FieldIndex.MapName) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MapName),
                    item: item.MapName,
                    fieldIndex: (int)RegionDataMapName_FieldIndex.MapName,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this RegionDataMapName item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataMapNameCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this RegionDataMapName item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MapName":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataMapName_FieldIndex.MapName);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String MapNameParse,
                            errorMask: errorMask))
                        {
                            item.MapName = MapNameParse;
                        }
                        else
                        {
                            item.MapName = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    RegionDataCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataMapName item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionDataMapName_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataMapName item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            RegionDataMapName item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            RegionDataCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.MapName_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MapName,
                    header: recordTypeConverter.ConvertToCustom(RegionDataMapName_Registration.RDMP_HEADER),
                    nullable: false);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class RegionDataMapName_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataMapName_Mask<T>>
    {
        #region Ctors
        public RegionDataMapName_Mask()
        {
        }

        public RegionDataMapName_Mask(T initialValue)
        {
            this.MapName = initialValue;
        }
        #endregion

        #region Members
        public T MapName;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataMapName_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataMapName_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.MapName, rhs.MapName)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MapName?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.MapName)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataMapName_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataMapName_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataMapName_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.MapName = eval(this.MapName);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataMapName_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataMapName_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataMapName_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MapName ?? true)
                {
                    fg.AppendLine($"MapName => {MapName}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataMapName_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataMapName_ErrorMask>
    {
        #region Members
        public Exception MapName;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return MapName;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    this.MapName = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    this.MapName = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (MapName != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataMapName_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"MapName => {MapName}");
        }
        #endregion

        #region Combine
        public RegionDataMapName_ErrorMask Combine(RegionDataMapName_ErrorMask rhs)
        {
            var ret = new RegionDataMapName_ErrorMask();
            ret.MapName = this.MapName.Combine(rhs.MapName);
            return ret;
        }
        public static RegionDataMapName_ErrorMask Combine(RegionDataMapName_ErrorMask lhs, RegionDataMapName_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataMapName_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataMapName_ErrorMask();
        }
        #endregion

    }
    public class RegionDataMapName_CopyMask : RegionData_CopyMask
    {
        public RegionDataMapName_CopyMask()
        {
        }

        public RegionDataMapName_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.MapName = defaultOn;
        }

        #region Members
        public bool MapName;
        #endregion

    }

    public class RegionDataMapName_TranslationMask : RegionData_TranslationMask
    {
        #region Members
        public bool MapName;
        #endregion

        #region Ctors
        public RegionDataMapName_TranslationMask()
            : base()
        {
        }

        public RegionDataMapName_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.MapName = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((MapName, null));
        }
    }
    #endregion

    #endregion

}
