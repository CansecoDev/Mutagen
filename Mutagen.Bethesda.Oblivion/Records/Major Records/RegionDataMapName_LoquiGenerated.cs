/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataMapName : RegionData, IRegionDataMapName, ILoquiObject<RegionDataMapName>, ILoquiObjectSetter, IEquatable<RegionDataMapName>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataMapName_Registration.Instance;
        public new static RegionDataMapName_Registration Registration => RegionDataMapName_Registration.Instance;

        #region Ctor
        public RegionDataMapName()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MapName
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<String> _MapName = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> MapName_Property => _MapName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String MapName
        {
            get => this._MapName.Item;
            set => this._MapName.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IRegionDataMapName.MapName_Property => this.MapName_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IRegionDataMapNameGetter.MapName_Property => this.MapName_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RegionDataMapNameCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RegionDataMapNameCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RegionDataMapNameCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RegionDataMapNameCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<RegionDataMapName>.GetEqualsMask(RegionDataMapName rhs) => RegionDataMapNameCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRegionDataMapNameGetter>.GetEqualsMask(IRegionDataMapNameGetter rhs) => RegionDataMapNameCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RegionDataMapNameCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            return RegionDataMapNameCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataMapNameCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new RegionDataMapName_Mask<bool> GetHasBeenSetMask()
        {
            return RegionDataMapNameCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataMapName rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataMapName rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (MapName_Property.HasBeenSet != rhs.MapName_Property.HasBeenSet) return false;
            if (MapName_Property.HasBeenSet)
            {
                if (!object.Equals(this.MapName, rhs.MapName)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (MapName_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MapName).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static RegionDataMapName Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataMapName Create_XML(
            XElement root,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionDataMapName Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataMapName();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataMapName Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RegionDataMapName Create_XML(
            string path,
            out RegionDataMapName_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RegionDataMapName Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RegionDataMapName Create_XML(
            Stream stream,
            out RegionDataMapName_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RegionDataMapName>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RegionDataMapName_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<RegionDataMapName>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RegionDataMapName_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RegionDataMapName_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out RegionData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out RegionDataMapName_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as RegionDataMapName_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            RegionDataMapNameCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_XML_Internal(
            RegionDataMapName item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "MapName":
                    StringXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)RegionDataMapName_FieldIndex.MapName,
                        item: item._MapName,
                        errorMask: errorMask);
                    break;
                default:
                    RegionData.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataMapName_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static RegionDataMapName Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataMapName Create_Binary(
            MutagenFrame frame,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionDataMapName Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataMapName();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    RegionDataMapName_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataMapName Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionDataMapName Create_Binary(
            string path,
            out RegionDataMapName_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RegionDataMapName Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionDataMapName Create_Binary(
            Stream stream,
            out RegionDataMapName_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as RegionDataMapName_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            RegionDataMapNameCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionDataMapName item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<RegionDataMapName_FieldIndex?> Fill_Binary_RecordTypes(
            RegionDataMapName item,
            MutagenFrame frame,
            RegionDataMapName_FieldIndex? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "RDMP":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._MapName,
                        fieldIndex: (int)RegionDataMapName_FieldIndex.MapName,
                        parseWhole: true,
                        errorMask: errorMask);
                    return TryGet<RegionDataMapName_FieldIndex?>.Succeed(RegionDataMapName_FieldIndex.MapName);
                default:
                    return RegionData.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => RegionDataMapNameCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public RegionDataMapName Copy(
            RegionDataMapName_CopyMask copyMask = null,
            IRegionDataMapNameGetter def = null)
        {
            return RegionDataMapName.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionDataMapName Copy(
            IRegionDataMapName item,
            RegionDataMapName_CopyMask copyMask = null,
            IRegionDataMapNameGetter def = null)
        {
            RegionDataMapName ret;
            if (item.GetType().Equals(typeof(RegionDataMapName)))
            {
                ret = new RegionDataMapName();
            }
            else
            {
                ret = (RegionDataMapName)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionDataMapName Copy_ToLoqui(
            IRegionDataMapNameGetter item,
            RegionDataMapName_CopyMask copyMask = null,
            IRegionDataMapNameGetter def = null)
        {
            RegionDataMapName ret;
            if (item.GetType().Equals(typeof(RegionDataMapName)))
            {
                ret = new RegionDataMapName() as RegionDataMapName;
            }
            else
            {
                ret = (RegionDataMapName)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRegionDataMapNameGetter rhs,
            RegionDataMapName_CopyMask copyMask,
            IRegionDataMapNameGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataMapNameGetter rhs,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_CopyMask copyMask = null,
            IRegionDataMapNameGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataMapNameCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionDataMapNameGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataMapName_CopyMask copyMask = null,
            IRegionDataMapNameGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RegionDataMapNameCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    this._MapName.Set(
                        (String)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionDataMapNameCommon.Clear(this, cmds);
        }


        public new static RegionDataMapName Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionDataMapName();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionDataMapName(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_RegionDataMapName(RegionDataMapName obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionDataMapName_FieldIndex enu))
            {
                CopyInInternal_RegionData(obj, pair);
            }
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    obj._MapName.Set(
                        (String)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RegionDataMapName obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionDataMapName : IRegionDataMapNameGetter, IRegionData, ILoquiClass<IRegionDataMapName, IRegionDataMapNameGetter>, ILoquiClass<RegionDataMapName, IRegionDataMapNameGetter>
    {
        new String MapName { get; set; }
        new INotifyingSetItem<String> MapName_Property { get; }

    }

    public partial interface IRegionDataMapNameGetter : IRegionDataGetter
    {
        #region MapName
        String MapName { get; }
        INotifyingSetItemGetter<String> MapName_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataMapName_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        MapName = 3,
    }
    #endregion

    #region Registration
    public class RegionDataMapName_Registration : ILoquiRegistration
    {
        public static readonly RegionDataMapName_Registration Instance = new RegionDataMapName_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 111,
            version: 0);

        public const string GUID = "acca1023-9d99-47c2-82a4-d46ed90b087b";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(RegionDataMapName_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataMapName_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataMapName);

        public static readonly Type GetterType = typeof(IRegionDataMapNameGetter);

        public static readonly Type SetterType = typeof(IRegionDataMapName);

        public static readonly Type CommonType = typeof(RegionDataMapNameCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataMapName";

        public const string Name = "RegionDataMapName";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAPNAME":
                    return (ushort)RegionDataMapName_FieldIndex.MapName;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return "MapName";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return typeof(String);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDMP_HEADER = new RecordType("RDMP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionDataMapNameCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionDataMapName item,
            IRegionDataMapNameGetter rhs,
            IRegionDataMapNameGetter def,
            ErrorMaskBuilder errorMask,
            RegionDataMapName_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            RegionDataCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.MapName ?? true)
            {
                errorMask.PushIndex((int)RegionDataMapName_FieldIndex.MapName);
                try
                {
                    item.MapName_Property.SetToWithDefault(
                        rhs: rhs.MapName_Property,
                        def: def?.MapName_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRegionDataMapName obj,
            NotifyingFireParameters cmds = null)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    obj.MapName_Property.HasBeenSet = on;
                    break;
                default:
                    RegionDataCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRegionDataMapName obj,
            NotifyingUnsetParameters cmds = null)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    obj.MapName_Property.Unset(cmds);
                    break;
                default:
                    RegionDataCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRegionDataMapName obj)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return obj.MapName_Property.HasBeenSet;
                default:
                    return RegionDataCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRegionDataMapNameGetter obj)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return obj.MapName;
                default:
                    return RegionDataCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRegionDataMapName item,
            NotifyingUnsetParameters cmds = null)
        {
            item.MapName_Property.Unset(cmds.ToUnsetParams());
        }

        public static RegionDataMapName_Mask<bool> GetEqualsMask(
            this IRegionDataMapNameGetter item,
            IRegionDataMapNameGetter rhs)
        {
            var ret = new RegionDataMapName_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionDataMapNameGetter item,
            IRegionDataMapNameGetter rhs,
            RegionDataMapName_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.MapName = item.MapName_Property.Equals(rhs.MapName_Property, (l, r) => object.Equals(l, r));
            RegionDataCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRegionDataMapNameGetter item,
            string name = null,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionDataMapNameGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionDataMapName)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionDataMapName)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MapName ?? true)
                {
                    fg.AppendLine($"MapName => {item.MapName}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionDataMapNameGetter item,
            RegionDataMapName_Mask<bool?> checkMask)
        {
            if (checkMask.MapName.HasValue && checkMask.MapName.Value != item.MapName_Property.HasBeenSet) return false;
            return true;
        }

        public static RegionDataMapName_Mask<bool> GetHasBeenSetMask(IRegionDataMapNameGetter item)
        {
            var ret = new RegionDataMapName_Mask<bool>();
            ret.MapName = item.MapName_Property.HasBeenSet;
            return ret;
        }

        public static RegionDataMapName_FieldIndex? ConvertFieldIndex(RegionData_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static RegionDataMapName_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataMapName_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataMapName_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataMapName_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IRegionDataMapNameGetter item,
            bool doMasks,
            out RegionDataMapName_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_XML_Internal(
            XElement node,
            IRegionDataMapNameGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataMapName");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataMapName");
            }
            if (item.MapName_Property.HasBeenSet)
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.MapName),
                    item: item.MapName_Property,
                    fieldIndex: (int)RegionDataMapName_FieldIndex.MapName,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataMapName item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionDataMapName_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            RegionDataMapName item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            RegionDataMapName item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MapName_Property,
                fieldIndex: (int)RegionDataMapName_FieldIndex.MapName,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(RegionDataMapName_Registration.RDMP_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RegionDataMapName_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataMapName_Mask<T>>
    {
        #region Ctors
        public RegionDataMapName_Mask()
        {
        }

        public RegionDataMapName_Mask(T initialValue)
        {
            this.MapName = initialValue;
        }
        #endregion

        #region Members
        public T MapName;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataMapName_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataMapName_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.MapName, rhs.MapName)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MapName?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.MapName)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataMapName_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataMapName_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataMapName_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.MapName = eval(this.MapName);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataMapName_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataMapName_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataMapName_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MapName ?? true)
                {
                    fg.AppendLine($"MapName => {MapName}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataMapName_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataMapName_ErrorMask>
    {
        #region Members
        public Exception MapName;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return MapName;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    this.MapName = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    this.MapName = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (MapName != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataMapName_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"MapName => {MapName}");
        }
        #endregion

        #region Combine
        public RegionDataMapName_ErrorMask Combine(RegionDataMapName_ErrorMask rhs)
        {
            var ret = new RegionDataMapName_ErrorMask();
            ret.MapName = this.MapName.Combine(rhs.MapName);
            return ret;
        }
        public static RegionDataMapName_ErrorMask Combine(RegionDataMapName_ErrorMask lhs, RegionDataMapName_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataMapName_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            throw new NotImplementedException();
        }
        #endregion

    }
    public class RegionDataMapName_CopyMask : RegionData_CopyMask
    {
        #region Members
        public bool MapName;
        #endregion

    }
    #endregion




    #endregion

}
