/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataObject : 
        LoquiNotifyingObject,
        IRegionDataObject,
        ILoquiObject<RegionDataObject>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<RegionDataObject>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataObject_Registration.Instance;
        public static RegionDataObject_Registration Registration => RegionDataObject_Registration.Instance;

        #region Ctor
        public RegionDataObject()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Object
        public FormIDLink<MajorRecord> Object_Property { get; } = new FormIDLink<MajorRecord>();
        public MajorRecord Object { get => Object_Property.Item; set => Object_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<MajorRecord> IRegionDataObjectGetter.Object_Property => this.Object_Property;
        #endregion
        #region ParentIndex
        private UInt16 _ParentIndex;
        public UInt16 ParentIndex
        {
            get => this._ParentIndex;
            set => this.RaiseAndSetIfChanged(ref this._ParentIndex, value, nameof(ParentIndex));
        }
        #endregion
        #region Unknown1
        private Byte[] _Unknown1 = new byte[2];
        public Byte[] Unknown1
        {
            get => _Unknown1;
            set
            {
                this._Unknown1 = value;
                if (value == null)
                {
                    this._Unknown1 = new byte[2];
                }
            }
        }
        #endregion
        #region Density
        private Single _Density;
        public Single Density
        {
            get => this._Density;
            set => this.RaiseAndSetIfChanged(ref this._Density, value, nameof(Density));
        }
        #endregion
        #region Clustering
        private Byte _Clustering;
        public Byte Clustering
        {
            get => this._Clustering;
            set => this.RaiseAndSetIfChanged(ref this._Clustering, value, nameof(Clustering));
        }
        #endregion
        #region MinSlope
        private Byte _MinSlope;
        public Byte MinSlope
        {
            get => this._MinSlope;
            set => this.RaiseAndSetIfChanged(ref this._MinSlope, value, nameof(MinSlope));
        }
        #endregion
        #region MaxSlope
        private Byte _MaxSlope;
        public Byte MaxSlope
        {
            get => this._MaxSlope;
            set => this.RaiseAndSetIfChanged(ref this._MaxSlope, value, nameof(MaxSlope));
        }
        #endregion
        #region Flags
        private RegionDataObject.Flag _Flags;
        public RegionDataObject.Flag Flags
        {
            get => this._Flags;
            set => this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
        }
        #endregion
        #region RadiusWrtPercent
        private UInt16 _RadiusWrtPercent;
        public UInt16 RadiusWrtPercent
        {
            get => this._RadiusWrtPercent;
            set => this.RaiseAndSetIfChanged(ref this._RadiusWrtPercent, value, nameof(RadiusWrtPercent));
        }
        #endregion
        #region Radius
        private UInt16 _Radius;
        public UInt16 Radius
        {
            get => this._Radius;
            set => this.RaiseAndSetIfChanged(ref this._Radius, value, nameof(Radius));
        }
        #endregion
        #region MinHeight
        private Single _MinHeight;
        public Single MinHeight
        {
            get => this._MinHeight;
            set => this.RaiseAndSetIfChanged(ref this._MinHeight, value, nameof(MinHeight));
        }
        #endregion
        #region MaxHeight
        private Single _MaxHeight;
        public Single MaxHeight
        {
            get => this._MaxHeight;
            set => this.RaiseAndSetIfChanged(ref this._MaxHeight, value, nameof(MaxHeight));
        }
        #endregion
        #region Sink
        private Single _Sink;
        public Single Sink
        {
            get => this._Sink;
            set => this.RaiseAndSetIfChanged(ref this._Sink, value, nameof(Sink));
        }
        #endregion
        #region SinkVariance
        private Single _SinkVariance;
        public Single SinkVariance
        {
            get => this._SinkVariance;
            set => this.RaiseAndSetIfChanged(ref this._SinkVariance, value, nameof(SinkVariance));
        }
        #endregion
        #region SizeVariance
        private Single _SizeVariance;
        public Single SizeVariance
        {
            get => this._SizeVariance;
            set => this.RaiseAndSetIfChanged(ref this._SizeVariance, value, nameof(SizeVariance));
        }
        #endregion
        #region AngleVariance
        private P3UInt16 _AngleVariance;
        public P3UInt16 AngleVariance
        {
            get => this._AngleVariance;
            set => this.RaiseAndSetIfChanged(ref this._AngleVariance, value, nameof(AngleVariance));
        }
        #endregion
        #region Unknow2n
        private Byte[] _Unknow2n = new byte[6];
        public Byte[] Unknow2n
        {
            get => _Unknow2n;
            set
            {
                this._Unknow2n = value;
                if (value == null)
                {
                    this._Unknow2n = new byte[6];
                }
            }
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RegionDataObjectCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RegionDataObjectCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RegionDataObjectCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RegionDataObjectCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<RegionDataObject>.GetEqualsMask(RegionDataObject rhs, EqualsMaskHelper.Include include) => RegionDataObjectCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IRegionDataObjectGetter>.GetEqualsMask(IRegionDataObjectGetter rhs, EqualsMaskHelper.Include include) => RegionDataObjectCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            RegionDataObject_Mask<bool> printMask = null)
        {
            return RegionDataObjectCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataObjectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public RegionDataObject_Mask<bool> GetHasBeenSetMask()
        {
            return RegionDataObjectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataObject rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataObject rhs)
        {
            if (rhs == null) return false;
            if (!this.Object_Property.Equals(rhs.Object_Property)) return false;
            if (this.ParentIndex != rhs.ParentIndex) return false;
            if (!this.Unknown1.EqualsFast(rhs.Unknown1)) return false;
            if (!this.Density.EqualsWithin(rhs.Density)) return false;
            if (this.Clustering != rhs.Clustering) return false;
            if (this.MinSlope != rhs.MinSlope) return false;
            if (this.MaxSlope != rhs.MaxSlope) return false;
            if (this.Flags != rhs.Flags) return false;
            if (this.RadiusWrtPercent != rhs.RadiusWrtPercent) return false;
            if (this.Radius != rhs.Radius) return false;
            if (!this.MinHeight.EqualsWithin(rhs.MinHeight)) return false;
            if (!this.MaxHeight.EqualsWithin(rhs.MaxHeight)) return false;
            if (!this.Sink.EqualsWithin(rhs.Sink)) return false;
            if (!this.SinkVariance.EqualsWithin(rhs.SinkVariance)) return false;
            if (!this.SizeVariance.EqualsWithin(rhs.SizeVariance)) return false;
            if (!this.AngleVariance.Equals(rhs.AngleVariance)) return false;
            if (!this.Unknow2n.EqualsFast(rhs.Unknow2n)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Object).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParentIndex).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Unknown1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Density).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Clustering).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MinSlope).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaxSlope).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RadiusWrtPercent).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Radius).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MinHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaxHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Sink).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SinkVariance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SizeVariance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AngleVariance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Unknow2n).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionDataObject Create_Xml(
            XElement node,
            RegionDataObject_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionDataObject Create_Xml(
            XElement node,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataObject_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RegionDataObject Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new RegionDataObject();
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataObjectCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataObject Create_Xml(
            string path,
            RegionDataObject_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataObject Create_Xml(
            string path,
            out RegionDataObject_ErrorMask errorMask,
            RegionDataObject_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataObject Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataObject_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionDataObject Create_Xml(
            Stream stream,
            RegionDataObject_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataObject Create_Xml(
            Stream stream,
            out RegionDataObject_ErrorMask errorMask,
            RegionDataObject_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataObject Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataObject_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out RegionDataObject_ErrorMask errorMask,
            RegionDataObject_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RegionDataObject>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out RegionDataObject_ErrorMask errorMask,
            RegionDataObject_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out RegionDataObject_ErrorMask errorMask,
            RegionDataObject_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataObject_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out RegionDataObject_ErrorMask errorMask,
            RegionDataObject_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out RegionDataObject_ErrorMask errorMask,
            RegionDataObject_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            RegionDataObject_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            RegionDataObjectCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Object_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod,
            NotifyingFireParameters cmds = null)
            where M : IMod<M>
        {
            Object_Property.Link(
                modList,
                sourceMod,
                cmds);
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionDataObject Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataObject Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RegionDataObject Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataObject();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataObject Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static RegionDataObject Create_Binary(
            string path,
            MasterReferences masterReferences,
            out RegionDataObject_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RegionDataObject Create_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static RegionDataObject Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static RegionDataObject Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out RegionDataObject_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RegionDataObject Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataObjectCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionDataObject item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                masterReferences: masterReferences,
                item: item.Object_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Object,
                errorMask: errorMask);
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.ParentIndex);
                if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out UInt16 ParentIndexParse,
                    errorMask: errorMask))
                {
                    item.ParentIndex = ParentIndexParse;
                }
                else
                {
                    item.ParentIndex = default(UInt16);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Unknown1);
                if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                    frame: frame.SpawnWithLength(2),
                    item: out Byte[] Unknown1Parse,
                    errorMask: errorMask))
                {
                    item.Unknown1 = Unknown1Parse;
                }
                else
                {
                    item.Unknown1 = default(Byte[]);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Density);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single DensityParse,
                    errorMask: errorMask))
                {
                    item.Density = DensityParse;
                }
                else
                {
                    item.Density = default(Single);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Clustering);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte ClusteringParse,
                    errorMask: errorMask))
                {
                    item.Clustering = ClusteringParse;
                }
                else
                {
                    item.Clustering = default(Byte);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MinSlope);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte MinSlopeParse,
                    errorMask: errorMask))
                {
                    item.MinSlope = MinSlopeParse;
                }
                else
                {
                    item.MinSlope = default(Byte);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MaxSlope);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte MaxSlopeParse,
                    errorMask: errorMask))
                {
                    item.MaxSlope = MaxSlopeParse;
                }
                else
                {
                    item.MaxSlope = default(Byte);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Flags);
                if (EnumBinaryTranslation<RegionDataObject.Flag>.Instance.Parse(
                    frame: frame.SpawnWithLength(1),
                    item: out RegionDataObject.Flag FlagsParse,
                    errorMask: errorMask))
                {
                    item.Flags = FlagsParse;
                }
                else
                {
                    item.Flags = default(RegionDataObject.Flag);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.RadiusWrtPercent);
                if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out UInt16 RadiusWrtPercentParse,
                    errorMask: errorMask))
                {
                    item.RadiusWrtPercent = RadiusWrtPercentParse;
                }
                else
                {
                    item.RadiusWrtPercent = default(UInt16);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Radius);
                if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out UInt16 RadiusParse,
                    errorMask: errorMask))
                {
                    item.Radius = RadiusParse;
                }
                else
                {
                    item.Radius = default(UInt16);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MinHeight);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single MinHeightParse,
                    errorMask: errorMask))
                {
                    item.MinHeight = MinHeightParse;
                }
                else
                {
                    item.MinHeight = default(Single);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MaxHeight);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single MaxHeightParse,
                    errorMask: errorMask))
                {
                    item.MaxHeight = MaxHeightParse;
                }
                else
                {
                    item.MaxHeight = default(Single);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Sink);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single SinkParse,
                    errorMask: errorMask))
                {
                    item.Sink = SinkParse;
                }
                else
                {
                    item.Sink = default(Single);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.SinkVariance);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single SinkVarianceParse,
                    errorMask: errorMask))
                {
                    item.SinkVariance = SinkVarianceParse;
                }
                else
                {
                    item.SinkVariance = default(Single);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.SizeVariance);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single SizeVarianceParse,
                    errorMask: errorMask))
                {
                    item.SizeVariance = SizeVarianceParse;
                }
                else
                {
                    item.SizeVariance = default(Single);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.AngleVariance);
                if (Mutagen.Bethesda.Binary.P3UInt16BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out P3UInt16 AngleVarianceParse,
                    errorMask: errorMask))
                {
                    item.AngleVariance = AngleVarianceParse;
                }
                else
                {
                    item.AngleVariance = default(P3UInt16);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Unknow2n);
                if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                    frame: frame.SpawnWithLength(6),
                    item: out Byte[] Unknow2nParse,
                    errorMask: errorMask))
                {
                    item.Unknow2n = Unknow2nParse;
                }
                else
                {
                    item.Unknow2n = default(Byte[]);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public RegionDataObject Copy(
            RegionDataObject_CopyMask copyMask = null,
            IRegionDataObjectGetter def = null)
        {
            return RegionDataObject.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionDataObject Copy(
            IRegionDataObject item,
            RegionDataObject_CopyMask copyMask = null,
            IRegionDataObjectGetter def = null)
        {
            RegionDataObject ret;
            if (item.GetType().Equals(typeof(RegionDataObject)))
            {
                ret = new RegionDataObject();
            }
            else
            {
                ret = (RegionDataObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionDataObject Copy_ToLoqui(
            IRegionDataObjectGetter item,
            RegionDataObject_CopyMask copyMask = null,
            IRegionDataObjectGetter def = null)
        {
            RegionDataObject ret;
            if (item.GetType().Equals(typeof(RegionDataObject)))
            {
                ret = new RegionDataObject() as RegionDataObject;
            }
            else
            {
                ret = (RegionDataObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRegionDataObjectGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IRegionDataObjectGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataObjectGetter rhs,
            RegionDataObject_CopyMask copyMask,
            IRegionDataObjectGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataObjectGetter rhs,
            out RegionDataObject_ErrorMask errorMask,
            RegionDataObject_CopyMask copyMask = null,
            IRegionDataObjectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionDataObjectGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataObject_CopyMask copyMask = null,
            IRegionDataObjectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RegionDataObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    this.Object_Property.Set(
                        (FormIDLink<MajorRecord>)obj,
                        cmds);
                    break;
                case RegionDataObject_FieldIndex.ParentIndex:
                    this.ParentIndex = (UInt16)obj;
                    break;
                case RegionDataObject_FieldIndex.Unknown1:
                    this.Unknown1 = (Byte[])obj;
                    break;
                case RegionDataObject_FieldIndex.Density:
                    this.Density = (Single)obj;
                    break;
                case RegionDataObject_FieldIndex.Clustering:
                    this.Clustering = (Byte)obj;
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    this.MinSlope = (Byte)obj;
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    this.MaxSlope = (Byte)obj;
                    break;
                case RegionDataObject_FieldIndex.Flags:
                    this.Flags = (RegionDataObject.Flag)obj;
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    this.RadiusWrtPercent = (UInt16)obj;
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    this.Radius = (UInt16)obj;
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    this.MinHeight = (Single)obj;
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    this.MaxHeight = (Single)obj;
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    this.Sink = (Single)obj;
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    this.SinkVariance = (Single)obj;
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    this.SizeVariance = (Single)obj;
                    break;
                case RegionDataObject_FieldIndex.AngleVariance:
                    this.AngleVariance = (P3UInt16)obj;
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    this.Unknow2n = (Byte[])obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionDataObjectCommon.Clear(this, cmds);
        }


        public static RegionDataObject Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionDataObject();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionDataObject(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RegionDataObject(RegionDataObject obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionDataObject_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    obj.Object_Property.Set(
                        (FormIDLink<MajorRecord>)pair.Value,
                        null);
                    break;
                case RegionDataObject_FieldIndex.ParentIndex:
                    obj.ParentIndex = (UInt16)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.Unknown1:
                    obj.Unknown1 = (Byte[])pair.Value;
                    break;
                case RegionDataObject_FieldIndex.Density:
                    obj.Density = (Single)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.Clustering:
                    obj.Clustering = (Byte)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    obj.MinSlope = (Byte)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    obj.MaxSlope = (Byte)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.Flags:
                    obj.Flags = (RegionDataObject.Flag)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    obj.RadiusWrtPercent = (UInt16)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    obj.Radius = (UInt16)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    obj.MinHeight = (Single)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    obj.MaxHeight = (Single)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    obj.Sink = (Single)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    obj.SinkVariance = (Single)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    obj.SizeVariance = (Single)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.AngleVariance:
                    obj.AngleVariance = (P3UInt16)pair.Value;
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    obj.Unknow2n = (Byte[])pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RegionDataObject obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionDataObject : IRegionDataObjectGetter, ILoquiClass<IRegionDataObject, IRegionDataObjectGetter>, ILoquiClass<RegionDataObject, IRegionDataObjectGetter>
    {
        new MajorRecord Object { get; set; }
        new UInt16 ParentIndex { get; set; }

        new Byte[] Unknown1 { get; set; }

        new Single Density { get; set; }

        new Byte Clustering { get; set; }

        new Byte MinSlope { get; set; }

        new Byte MaxSlope { get; set; }

        new RegionDataObject.Flag Flags { get; set; }

        new UInt16 RadiusWrtPercent { get; set; }

        new UInt16 Radius { get; set; }

        new Single MinHeight { get; set; }

        new Single MaxHeight { get; set; }

        new Single Sink { get; set; }

        new Single SinkVariance { get; set; }

        new Single SizeVariance { get; set; }

        new P3UInt16 AngleVariance { get; set; }

        new Byte[] Unknow2n { get; set; }

    }

    public partial interface IRegionDataObjectGetter : ILoquiObject
    {
        #region Object
        MajorRecord Object { get; }
        FormIDLink<MajorRecord> Object_Property { get; }

        #endregion
        #region ParentIndex
        UInt16 ParentIndex { get; }

        #endregion
        #region Unknown1
        Byte[] Unknown1 { get; }

        #endregion
        #region Density
        Single Density { get; }

        #endregion
        #region Clustering
        Byte Clustering { get; }

        #endregion
        #region MinSlope
        Byte MinSlope { get; }

        #endregion
        #region MaxSlope
        Byte MaxSlope { get; }

        #endregion
        #region Flags
        RegionDataObject.Flag Flags { get; }

        #endregion
        #region RadiusWrtPercent
        UInt16 RadiusWrtPercent { get; }

        #endregion
        #region Radius
        UInt16 Radius { get; }

        #endregion
        #region MinHeight
        Single MinHeight { get; }

        #endregion
        #region MaxHeight
        Single MaxHeight { get; }

        #endregion
        #region Sink
        Single Sink { get; }

        #endregion
        #region SinkVariance
        Single SinkVariance { get; }

        #endregion
        #region SizeVariance
        Single SizeVariance { get; }

        #endregion
        #region AngleVariance
        P3UInt16 AngleVariance { get; }

        #endregion
        #region Unknow2n
        Byte[] Unknow2n { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataObject_FieldIndex
    {
        Object = 0,
        ParentIndex = 1,
        Unknown1 = 2,
        Density = 3,
        Clustering = 4,
        MinSlope = 5,
        MaxSlope = 6,
        Flags = 7,
        RadiusWrtPercent = 8,
        Radius = 9,
        MinHeight = 10,
        MaxHeight = 11,
        Sink = 12,
        SinkVariance = 13,
        SizeVariance = 14,
        AngleVariance = 15,
        Unknow2n = 16,
    }
    #endregion

    #region Registration
    public class RegionDataObject_Registration : ILoquiRegistration
    {
        public static readonly RegionDataObject_Registration Instance = new RegionDataObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 117,
            version: 0);

        public const string GUID = "e814f192-a945-4518-bfd0-00e67eae8105";

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(RegionDataObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataObject_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataObject);

        public static readonly Type GetterType = typeof(IRegionDataObjectGetter);

        public static readonly Type SetterType = typeof(IRegionDataObject);

        public static readonly Type CommonType = typeof(RegionDataObjectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataObject";

        public const string Name = "RegionDataObject";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECT":
                    return (ushort)RegionDataObject_FieldIndex.Object;
                case "PARENTINDEX":
                    return (ushort)RegionDataObject_FieldIndex.ParentIndex;
                case "UNKNOWN1":
                    return (ushort)RegionDataObject_FieldIndex.Unknown1;
                case "DENSITY":
                    return (ushort)RegionDataObject_FieldIndex.Density;
                case "CLUSTERING":
                    return (ushort)RegionDataObject_FieldIndex.Clustering;
                case "MINSLOPE":
                    return (ushort)RegionDataObject_FieldIndex.MinSlope;
                case "MAXSLOPE":
                    return (ushort)RegionDataObject_FieldIndex.MaxSlope;
                case "FLAGS":
                    return (ushort)RegionDataObject_FieldIndex.Flags;
                case "RADIUSWRTPERCENT":
                    return (ushort)RegionDataObject_FieldIndex.RadiusWrtPercent;
                case "RADIUS":
                    return (ushort)RegionDataObject_FieldIndex.Radius;
                case "MINHEIGHT":
                    return (ushort)RegionDataObject_FieldIndex.MinHeight;
                case "MAXHEIGHT":
                    return (ushort)RegionDataObject_FieldIndex.MaxHeight;
                case "SINK":
                    return (ushort)RegionDataObject_FieldIndex.Sink;
                case "SINKVARIANCE":
                    return (ushort)RegionDataObject_FieldIndex.SinkVariance;
                case "SIZEVARIANCE":
                    return (ushort)RegionDataObject_FieldIndex.SizeVariance;
                case "ANGLEVARIANCE":
                    return (ushort)RegionDataObject_FieldIndex.AngleVariance;
                case "UNKNOW2N":
                    return (ushort)RegionDataObject_FieldIndex.Unknow2n;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    return "Object";
                case RegionDataObject_FieldIndex.ParentIndex:
                    return "ParentIndex";
                case RegionDataObject_FieldIndex.Unknown1:
                    return "Unknown1";
                case RegionDataObject_FieldIndex.Density:
                    return "Density";
                case RegionDataObject_FieldIndex.Clustering:
                    return "Clustering";
                case RegionDataObject_FieldIndex.MinSlope:
                    return "MinSlope";
                case RegionDataObject_FieldIndex.MaxSlope:
                    return "MaxSlope";
                case RegionDataObject_FieldIndex.Flags:
                    return "Flags";
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    return "RadiusWrtPercent";
                case RegionDataObject_FieldIndex.Radius:
                    return "Radius";
                case RegionDataObject_FieldIndex.MinHeight:
                    return "MinHeight";
                case RegionDataObject_FieldIndex.MaxHeight:
                    return "MaxHeight";
                case RegionDataObject_FieldIndex.Sink:
                    return "Sink";
                case RegionDataObject_FieldIndex.SinkVariance:
                    return "SinkVariance";
                case RegionDataObject_FieldIndex.SizeVariance:
                    return "SizeVariance";
                case RegionDataObject_FieldIndex.AngleVariance:
                    return "AngleVariance";
                case RegionDataObject_FieldIndex.Unknow2n:
                    return "Unknow2n";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    return typeof(FormIDLink<MajorRecord>);
                case RegionDataObject_FieldIndex.ParentIndex:
                    return typeof(UInt16);
                case RegionDataObject_FieldIndex.Unknown1:
                    return typeof(Byte[]);
                case RegionDataObject_FieldIndex.Density:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.Clustering:
                    return typeof(Byte);
                case RegionDataObject_FieldIndex.MinSlope:
                    return typeof(Byte);
                case RegionDataObject_FieldIndex.MaxSlope:
                    return typeof(Byte);
                case RegionDataObject_FieldIndex.Flags:
                    return typeof(RegionDataObject.Flag);
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    return typeof(UInt16);
                case RegionDataObject_FieldIndex.Radius:
                    return typeof(UInt16);
                case RegionDataObject_FieldIndex.MinHeight:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.MaxHeight:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.Sink:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.SinkVariance:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.SizeVariance:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.AngleVariance:
                    return typeof(P3UInt16);
                case RegionDataObject_FieldIndex.Unknow2n:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 17;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionDataObjectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionDataObject item,
            IRegionDataObjectGetter rhs,
            IRegionDataObjectGetter def,
            ErrorMaskBuilder errorMask,
            RegionDataObject_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Object ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Object);
                try
                {
                    item.Object_Property.SetLink(
                        value: rhs.Object_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ParentIndex ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.ParentIndex);
                try
                {
                    item.ParentIndex = rhs.ParentIndex;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Unknown1 ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Unknown1);
                try
                {
                    item.Unknown1 = rhs.Unknown1;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Density ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Density);
                try
                {
                    item.Density = rhs.Density;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Clustering ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Clustering);
                try
                {
                    item.Clustering = rhs.Clustering;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MinSlope ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MinSlope);
                try
                {
                    item.MinSlope = rhs.MinSlope;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaxSlope ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MaxSlope);
                try
                {
                    item.MaxSlope = rhs.MaxSlope;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RadiusWrtPercent ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.RadiusWrtPercent);
                try
                {
                    item.RadiusWrtPercent = rhs.RadiusWrtPercent;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Radius ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Radius);
                try
                {
                    item.Radius = rhs.Radius;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MinHeight ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MinHeight);
                try
                {
                    item.MinHeight = rhs.MinHeight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaxHeight ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MaxHeight);
                try
                {
                    item.MaxHeight = rhs.MaxHeight;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sink ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Sink);
                try
                {
                    item.Sink = rhs.Sink;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SinkVariance ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.SinkVariance);
                try
                {
                    item.SinkVariance = rhs.SinkVariance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SizeVariance ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.SizeVariance);
                try
                {
                    item.SizeVariance = rhs.SizeVariance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AngleVariance ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.AngleVariance);
                try
                {
                    item.AngleVariance = rhs.AngleVariance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Unknow2n ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Unknow2n);
                try
                {
                    item.Unknow2n = rhs.Unknow2n;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRegionDataObject obj,
            NotifyingFireParameters cmds = null)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRegionDataObject obj,
            NotifyingUnsetParameters cmds = null)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    obj.Object = default(MajorRecord);
                    break;
                case RegionDataObject_FieldIndex.ParentIndex:
                    obj.ParentIndex = default(UInt16);
                    break;
                case RegionDataObject_FieldIndex.Unknown1:
                    obj.Unknown1 = default(Byte[]);
                    break;
                case RegionDataObject_FieldIndex.Density:
                    obj.Density = default(Single);
                    break;
                case RegionDataObject_FieldIndex.Clustering:
                    obj.Clustering = default(Byte);
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    obj.MinSlope = default(Byte);
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    obj.MaxSlope = default(Byte);
                    break;
                case RegionDataObject_FieldIndex.Flags:
                    obj.Flags = default(RegionDataObject.Flag);
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    obj.RadiusWrtPercent = default(UInt16);
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    obj.Radius = default(UInt16);
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    obj.MinHeight = default(Single);
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    obj.MaxHeight = default(Single);
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    obj.Sink = default(Single);
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    obj.SinkVariance = default(Single);
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    obj.SizeVariance = default(Single);
                    break;
                case RegionDataObject_FieldIndex.AngleVariance:
                    obj.AngleVariance = default(P3UInt16);
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    obj.Unknow2n = default(Byte[]);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRegionDataObject obj)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRegionDataObjectGetter obj)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    return obj.Object;
                case RegionDataObject_FieldIndex.ParentIndex:
                    return obj.ParentIndex;
                case RegionDataObject_FieldIndex.Unknown1:
                    return obj.Unknown1;
                case RegionDataObject_FieldIndex.Density:
                    return obj.Density;
                case RegionDataObject_FieldIndex.Clustering:
                    return obj.Clustering;
                case RegionDataObject_FieldIndex.MinSlope:
                    return obj.MinSlope;
                case RegionDataObject_FieldIndex.MaxSlope:
                    return obj.MaxSlope;
                case RegionDataObject_FieldIndex.Flags:
                    return obj.Flags;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    return obj.RadiusWrtPercent;
                case RegionDataObject_FieldIndex.Radius:
                    return obj.Radius;
                case RegionDataObject_FieldIndex.MinHeight:
                    return obj.MinHeight;
                case RegionDataObject_FieldIndex.MaxHeight:
                    return obj.MaxHeight;
                case RegionDataObject_FieldIndex.Sink:
                    return obj.Sink;
                case RegionDataObject_FieldIndex.SinkVariance:
                    return obj.SinkVariance;
                case RegionDataObject_FieldIndex.SizeVariance:
                    return obj.SizeVariance;
                case RegionDataObject_FieldIndex.AngleVariance:
                    return obj.AngleVariance;
                case RegionDataObject_FieldIndex.Unknow2n:
                    return obj.Unknow2n;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRegionDataObject item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Object = default(MajorRecord);
            item.ParentIndex = default(UInt16);
            item.Unknown1 = default(Byte[]);
            item.Density = default(Single);
            item.Clustering = default(Byte);
            item.MinSlope = default(Byte);
            item.MaxSlope = default(Byte);
            item.Flags = default(RegionDataObject.Flag);
            item.RadiusWrtPercent = default(UInt16);
            item.Radius = default(UInt16);
            item.MinHeight = default(Single);
            item.MaxHeight = default(Single);
            item.Sink = default(Single);
            item.SinkVariance = default(Single);
            item.SizeVariance = default(Single);
            item.AngleVariance = default(P3UInt16);
            item.Unknow2n = default(Byte[]);
        }

        public static RegionDataObject_Mask<bool> GetEqualsMask(
            this IRegionDataObjectGetter item,
            IRegionDataObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionDataObject_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionDataObjectGetter item,
            IRegionDataObjectGetter rhs,
            RegionDataObject_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Object = item.Object_Property.FormKey == rhs.Object_Property.FormKey;
            ret.ParentIndex = item.ParentIndex == rhs.ParentIndex;
            ret.Unknown1 = item.Unknown1.EqualsFast(rhs.Unknown1);
            ret.Density = item.Density.EqualsWithin(rhs.Density);
            ret.Clustering = item.Clustering == rhs.Clustering;
            ret.MinSlope = item.MinSlope == rhs.MinSlope;
            ret.MaxSlope = item.MaxSlope == rhs.MaxSlope;
            ret.Flags = item.Flags == rhs.Flags;
            ret.RadiusWrtPercent = item.RadiusWrtPercent == rhs.RadiusWrtPercent;
            ret.Radius = item.Radius == rhs.Radius;
            ret.MinHeight = item.MinHeight.EqualsWithin(rhs.MinHeight);
            ret.MaxHeight = item.MaxHeight.EqualsWithin(rhs.MaxHeight);
            ret.Sink = item.Sink.EqualsWithin(rhs.Sink);
            ret.SinkVariance = item.SinkVariance.EqualsWithin(rhs.SinkVariance);
            ret.SizeVariance = item.SizeVariance.EqualsWithin(rhs.SizeVariance);
            ret.AngleVariance = item.AngleVariance == rhs.AngleVariance;
            ret.Unknow2n = item.Unknow2n.EqualsFast(rhs.Unknow2n);
        }

        public static string ToString(
            this IRegionDataObjectGetter item,
            string name = null,
            RegionDataObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionDataObjectGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataObject_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionDataObject)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionDataObject)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Object ?? true)
                {
                    fg.AppendLine($"Object => {item.Object_Property}");
                }
                if (printMask?.ParentIndex ?? true)
                {
                    fg.AppendLine($"ParentIndex => {item.ParentIndex}");
                }
                if (printMask?.Unknown1 ?? true)
                {
                    fg.AppendLine($"Unknown1 => {item.Unknown1}");
                }
                if (printMask?.Density ?? true)
                {
                    fg.AppendLine($"Density => {item.Density}");
                }
                if (printMask?.Clustering ?? true)
                {
                    fg.AppendLine($"Clustering => {item.Clustering}");
                }
                if (printMask?.MinSlope ?? true)
                {
                    fg.AppendLine($"MinSlope => {item.MinSlope}");
                }
                if (printMask?.MaxSlope ?? true)
                {
                    fg.AppendLine($"MaxSlope => {item.MaxSlope}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.RadiusWrtPercent ?? true)
                {
                    fg.AppendLine($"RadiusWrtPercent => {item.RadiusWrtPercent}");
                }
                if (printMask?.Radius ?? true)
                {
                    fg.AppendLine($"Radius => {item.Radius}");
                }
                if (printMask?.MinHeight ?? true)
                {
                    fg.AppendLine($"MinHeight => {item.MinHeight}");
                }
                if (printMask?.MaxHeight ?? true)
                {
                    fg.AppendLine($"MaxHeight => {item.MaxHeight}");
                }
                if (printMask?.Sink ?? true)
                {
                    fg.AppendLine($"Sink => {item.Sink}");
                }
                if (printMask?.SinkVariance ?? true)
                {
                    fg.AppendLine($"SinkVariance => {item.SinkVariance}");
                }
                if (printMask?.SizeVariance ?? true)
                {
                    fg.AppendLine($"SizeVariance => {item.SizeVariance}");
                }
                if (printMask?.AngleVariance ?? true)
                {
                    fg.AppendLine($"AngleVariance => {item.AngleVariance}");
                }
                if (printMask?.Unknow2n ?? true)
                {
                    fg.AppendLine($"Unknow2n => {item.Unknow2n}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionDataObjectGetter item,
            RegionDataObject_Mask<bool?> checkMask)
        {
            return true;
        }

        public static RegionDataObject_Mask<bool> GetHasBeenSetMask(IRegionDataObjectGetter item)
        {
            var ret = new RegionDataObject_Mask<bool>();
            ret.Object = true;
            ret.ParentIndex = true;
            ret.Unknown1 = true;
            ret.Density = true;
            ret.Clustering = true;
            ret.MinSlope = true;
            ret.MaxSlope = true;
            ret.Flags = true;
            ret.RadiusWrtPercent = true;
            ret.Radius = true;
            ret.MinHeight = true;
            ret.MaxHeight = true;
            ret.Sink = true;
            ret.SinkVariance = true;
            ret.SizeVariance = true;
            ret.AngleVariance = true;
            ret.Unknow2n = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            RegionDataObject item,
            bool doMasks,
            out RegionDataObject_ErrorMask errorMask,
            RegionDataObject_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            RegionDataObject item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataObject");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataObject");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this RegionDataObject item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.Object) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Object),
                    item: item.Object_Property?.FormKey,
                    fieldIndex: (int)RegionDataObject_FieldIndex.Object,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.ParentIndex) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParentIndex),
                    item: item.ParentIndex,
                    fieldIndex: (int)RegionDataObject_FieldIndex.ParentIndex,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.Unknown1) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown1),
                    item: item.Unknown1,
                    fieldIndex: (int)RegionDataObject_FieldIndex.Unknown1,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.Density) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Density),
                    item: item.Density,
                    fieldIndex: (int)RegionDataObject_FieldIndex.Density,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.Clustering) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Clustering),
                    item: item.Clustering,
                    fieldIndex: (int)RegionDataObject_FieldIndex.Clustering,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.MinSlope) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MinSlope),
                    item: item.MinSlope,
                    fieldIndex: (int)RegionDataObject_FieldIndex.MinSlope,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.MaxSlope) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaxSlope),
                    item: item.MaxSlope,
                    fieldIndex: (int)RegionDataObject_FieldIndex.MaxSlope,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<RegionDataObject.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)RegionDataObject_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.RadiusWrtPercent) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RadiusWrtPercent),
                    item: item.RadiusWrtPercent,
                    fieldIndex: (int)RegionDataObject_FieldIndex.RadiusWrtPercent,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.Radius) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Radius),
                    item: item.Radius,
                    fieldIndex: (int)RegionDataObject_FieldIndex.Radius,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.MinHeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MinHeight),
                    item: item.MinHeight,
                    fieldIndex: (int)RegionDataObject_FieldIndex.MinHeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.MaxHeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaxHeight),
                    item: item.MaxHeight,
                    fieldIndex: (int)RegionDataObject_FieldIndex.MaxHeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.Sink) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sink),
                    item: item.Sink,
                    fieldIndex: (int)RegionDataObject_FieldIndex.Sink,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.SinkVariance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SinkVariance),
                    item: item.SinkVariance,
                    fieldIndex: (int)RegionDataObject_FieldIndex.SinkVariance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.SizeVariance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SizeVariance),
                    item: item.SizeVariance,
                    fieldIndex: (int)RegionDataObject_FieldIndex.SizeVariance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.AngleVariance) ?? true))
            {
                P3UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AngleVariance),
                    item: item.AngleVariance,
                    fieldIndex: (int)RegionDataObject_FieldIndex.AngleVariance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionDataObject_FieldIndex.Unknow2n) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknow2n),
                    item: item.Unknow2n,
                    fieldIndex: (int)RegionDataObject_FieldIndex.Unknow2n,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this RegionDataObject item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataObjectCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this RegionDataObject item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Object":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Object_Property,
                        fieldIndex: (int)RegionDataObject_FieldIndex.Object,
                        errorMask: errorMask);
                    break;
                case "ParentIndex":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.ParentIndex);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 ParentIndexParse,
                            errorMask: errorMask))
                        {
                            item.ParentIndex = ParentIndexParse;
                        }
                        else
                        {
                            item.ParentIndex = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown1":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Unknown1);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] Unknown1Parse,
                            errorMask: errorMask))
                        {
                            item.Unknown1 = Unknown1Parse;
                        }
                        else
                        {
                            item.Unknown1 = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Density":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Density);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DensityParse,
                            errorMask: errorMask))
                        {
                            item.Density = DensityParse;
                        }
                        else
                        {
                            item.Density = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Clustering":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Clustering);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ClusteringParse,
                            errorMask: errorMask))
                        {
                            item.Clustering = ClusteringParse;
                        }
                        else
                        {
                            item.Clustering = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MinSlope":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MinSlope);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MinSlopeParse,
                            errorMask: errorMask))
                        {
                            item.MinSlope = MinSlopeParse;
                        }
                        else
                        {
                            item.MinSlope = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxSlope":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MaxSlope);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte MaxSlopeParse,
                            errorMask: errorMask))
                        {
                            item.MaxSlope = MaxSlopeParse;
                        }
                        else
                        {
                            item.MaxSlope = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Flags);
                        if (EnumXmlTranslation<RegionDataObject.Flag>.Instance.Parse(
                            node: node,
                            item: out RegionDataObject.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(RegionDataObject.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RadiusWrtPercent":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.RadiusWrtPercent);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 RadiusWrtPercentParse,
                            errorMask: errorMask))
                        {
                            item.RadiusWrtPercent = RadiusWrtPercentParse;
                        }
                        else
                        {
                            item.RadiusWrtPercent = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Radius":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Radius);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 RadiusParse,
                            errorMask: errorMask))
                        {
                            item.Radius = RadiusParse;
                        }
                        else
                        {
                            item.Radius = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MinHeight":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MinHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MinHeightParse,
                            errorMask: errorMask))
                        {
                            item.MinHeight = MinHeightParse;
                        }
                        else
                        {
                            item.MinHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxHeight":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MaxHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MaxHeightParse,
                            errorMask: errorMask))
                        {
                            item.MaxHeight = MaxHeightParse;
                        }
                        else
                        {
                            item.MaxHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sink":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Sink);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single SinkParse,
                            errorMask: errorMask))
                        {
                            item.Sink = SinkParse;
                        }
                        else
                        {
                            item.Sink = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SinkVariance":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.SinkVariance);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single SinkVarianceParse,
                            errorMask: errorMask))
                        {
                            item.SinkVariance = SinkVarianceParse;
                        }
                        else
                        {
                            item.SinkVariance = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SizeVariance":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.SizeVariance);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single SizeVarianceParse,
                            errorMask: errorMask))
                        {
                            item.SizeVariance = SizeVarianceParse;
                        }
                        else
                        {
                            item.SizeVariance = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AngleVariance":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.AngleVariance);
                        if (P3UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out P3UInt16 AngleVarianceParse,
                            errorMask: errorMask))
                        {
                            item.AngleVariance = AngleVarianceParse;
                        }
                        else
                        {
                            item.AngleVariance = default(P3UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknow2n":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Unknow2n);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] Unknow2nParse,
                            errorMask: errorMask))
                        {
                            item.Unknow2n = Unknow2nParse;
                        }
                        else
                        {
                            item.Unknow2n = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataObject item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionDataObject_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataObject item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_Embedded(
            RegionDataObject item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Object_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Object,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ParentIndex,
                fieldIndex: (int)RegionDataObject_FieldIndex.ParentIndex,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown1,
                fieldIndex: (int)RegionDataObject_FieldIndex.Unknown1,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Density,
                fieldIndex: (int)RegionDataObject_FieldIndex.Density,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Clustering,
                fieldIndex: (int)RegionDataObject_FieldIndex.Clustering,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MinSlope,
                fieldIndex: (int)RegionDataObject_FieldIndex.MinSlope,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaxSlope,
                fieldIndex: (int)RegionDataObject_FieldIndex.MaxSlope,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionDataObject.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 1,
                fieldIndex: (int)RegionDataObject_FieldIndex.Flags,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RadiusWrtPercent,
                fieldIndex: (int)RegionDataObject_FieldIndex.RadiusWrtPercent,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Radius,
                fieldIndex: (int)RegionDataObject_FieldIndex.Radius,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MinHeight,
                fieldIndex: (int)RegionDataObject_FieldIndex.MinHeight,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaxHeight,
                fieldIndex: (int)RegionDataObject_FieldIndex.MaxHeight,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Sink,
                fieldIndex: (int)RegionDataObject_FieldIndex.Sink,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SinkVariance,
                fieldIndex: (int)RegionDataObject_FieldIndex.SinkVariance,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SizeVariance,
                fieldIndex: (int)RegionDataObject_FieldIndex.SizeVariance,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.P3UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AngleVariance,
                fieldIndex: (int)RegionDataObject_FieldIndex.AngleVariance,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknow2n,
                fieldIndex: (int)RegionDataObject_FieldIndex.Unknow2n,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class RegionDataObject_Mask<T> : IMask<T>, IEquatable<RegionDataObject_Mask<T>>
    {
        #region Ctors
        public RegionDataObject_Mask()
        {
        }

        public RegionDataObject_Mask(T initialValue)
        {
            this.Object = initialValue;
            this.ParentIndex = initialValue;
            this.Unknown1 = initialValue;
            this.Density = initialValue;
            this.Clustering = initialValue;
            this.MinSlope = initialValue;
            this.MaxSlope = initialValue;
            this.Flags = initialValue;
            this.RadiusWrtPercent = initialValue;
            this.Radius = initialValue;
            this.MinHeight = initialValue;
            this.MaxHeight = initialValue;
            this.Sink = initialValue;
            this.SinkVariance = initialValue;
            this.SizeVariance = initialValue;
            this.AngleVariance = initialValue;
            this.Unknow2n = initialValue;
        }
        #endregion

        #region Members
        public T Object;
        public T ParentIndex;
        public T Unknown1;
        public T Density;
        public T Clustering;
        public T MinSlope;
        public T MaxSlope;
        public T Flags;
        public T RadiusWrtPercent;
        public T Radius;
        public T MinHeight;
        public T MaxHeight;
        public T Sink;
        public T SinkVariance;
        public T SizeVariance;
        public T AngleVariance;
        public T Unknow2n;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataObject_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataObject_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Object, rhs.Object)) return false;
            if (!object.Equals(this.ParentIndex, rhs.ParentIndex)) return false;
            if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
            if (!object.Equals(this.Density, rhs.Density)) return false;
            if (!object.Equals(this.Clustering, rhs.Clustering)) return false;
            if (!object.Equals(this.MinSlope, rhs.MinSlope)) return false;
            if (!object.Equals(this.MaxSlope, rhs.MaxSlope)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.RadiusWrtPercent, rhs.RadiusWrtPercent)) return false;
            if (!object.Equals(this.Radius, rhs.Radius)) return false;
            if (!object.Equals(this.MinHeight, rhs.MinHeight)) return false;
            if (!object.Equals(this.MaxHeight, rhs.MaxHeight)) return false;
            if (!object.Equals(this.Sink, rhs.Sink)) return false;
            if (!object.Equals(this.SinkVariance, rhs.SinkVariance)) return false;
            if (!object.Equals(this.SizeVariance, rhs.SizeVariance)) return false;
            if (!object.Equals(this.AngleVariance, rhs.AngleVariance)) return false;
            if (!object.Equals(this.Unknow2n, rhs.Unknow2n)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Object?.GetHashCode());
            ret = ret.CombineHashCode(this.ParentIndex?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown1?.GetHashCode());
            ret = ret.CombineHashCode(this.Density?.GetHashCode());
            ret = ret.CombineHashCode(this.Clustering?.GetHashCode());
            ret = ret.CombineHashCode(this.MinSlope?.GetHashCode());
            ret = ret.CombineHashCode(this.MaxSlope?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.RadiusWrtPercent?.GetHashCode());
            ret = ret.CombineHashCode(this.Radius?.GetHashCode());
            ret = ret.CombineHashCode(this.MinHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.MaxHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.Sink?.GetHashCode());
            ret = ret.CombineHashCode(this.SinkVariance?.GetHashCode());
            ret = ret.CombineHashCode(this.SizeVariance?.GetHashCode());
            ret = ret.CombineHashCode(this.AngleVariance?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknow2n?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Object)) return false;
            if (!eval(this.ParentIndex)) return false;
            if (!eval(this.Unknown1)) return false;
            if (!eval(this.Density)) return false;
            if (!eval(this.Clustering)) return false;
            if (!eval(this.MinSlope)) return false;
            if (!eval(this.MaxSlope)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.RadiusWrtPercent)) return false;
            if (!eval(this.Radius)) return false;
            if (!eval(this.MinHeight)) return false;
            if (!eval(this.MaxHeight)) return false;
            if (!eval(this.Sink)) return false;
            if (!eval(this.SinkVariance)) return false;
            if (!eval(this.SizeVariance)) return false;
            if (!eval(this.AngleVariance)) return false;
            if (!eval(this.Unknow2n)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RegionDataObject_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataObject_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataObject_Mask<R> obj, Func<T, R> eval)
        {
            obj.Object = eval(this.Object);
            obj.ParentIndex = eval(this.ParentIndex);
            obj.Unknown1 = eval(this.Unknown1);
            obj.Density = eval(this.Density);
            obj.Clustering = eval(this.Clustering);
            obj.MinSlope = eval(this.MinSlope);
            obj.MaxSlope = eval(this.MaxSlope);
            obj.Flags = eval(this.Flags);
            obj.RadiusWrtPercent = eval(this.RadiusWrtPercent);
            obj.Radius = eval(this.Radius);
            obj.MinHeight = eval(this.MinHeight);
            obj.MaxHeight = eval(this.MaxHeight);
            obj.Sink = eval(this.Sink);
            obj.SinkVariance = eval(this.SinkVariance);
            obj.SizeVariance = eval(this.SizeVariance);
            obj.AngleVariance = eval(this.AngleVariance);
            obj.Unknow2n = eval(this.Unknow2n);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataObject_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataObject_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Object ?? true)
                {
                    fg.AppendLine($"Object => {Object}");
                }
                if (printMask?.ParentIndex ?? true)
                {
                    fg.AppendLine($"ParentIndex => {ParentIndex}");
                }
                if (printMask?.Unknown1 ?? true)
                {
                    fg.AppendLine($"Unknown1 => {Unknown1}");
                }
                if (printMask?.Density ?? true)
                {
                    fg.AppendLine($"Density => {Density}");
                }
                if (printMask?.Clustering ?? true)
                {
                    fg.AppendLine($"Clustering => {Clustering}");
                }
                if (printMask?.MinSlope ?? true)
                {
                    fg.AppendLine($"MinSlope => {MinSlope}");
                }
                if (printMask?.MaxSlope ?? true)
                {
                    fg.AppendLine($"MaxSlope => {MaxSlope}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.RadiusWrtPercent ?? true)
                {
                    fg.AppendLine($"RadiusWrtPercent => {RadiusWrtPercent}");
                }
                if (printMask?.Radius ?? true)
                {
                    fg.AppendLine($"Radius => {Radius}");
                }
                if (printMask?.MinHeight ?? true)
                {
                    fg.AppendLine($"MinHeight => {MinHeight}");
                }
                if (printMask?.MaxHeight ?? true)
                {
                    fg.AppendLine($"MaxHeight => {MaxHeight}");
                }
                if (printMask?.Sink ?? true)
                {
                    fg.AppendLine($"Sink => {Sink}");
                }
                if (printMask?.SinkVariance ?? true)
                {
                    fg.AppendLine($"SinkVariance => {SinkVariance}");
                }
                if (printMask?.SizeVariance ?? true)
                {
                    fg.AppendLine($"SizeVariance => {SizeVariance}");
                }
                if (printMask?.AngleVariance ?? true)
                {
                    fg.AppendLine($"AngleVariance => {AngleVariance}");
                }
                if (printMask?.Unknow2n ?? true)
                {
                    fg.AppendLine($"Unknow2n => {Unknow2n}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataObject_ErrorMask : IErrorMask, IErrorMask<RegionDataObject_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Object;
        public Exception ParentIndex;
        public Exception Unknown1;
        public Exception Density;
        public Exception Clustering;
        public Exception MinSlope;
        public Exception MaxSlope;
        public Exception Flags;
        public Exception RadiusWrtPercent;
        public Exception Radius;
        public Exception MinHeight;
        public Exception MaxHeight;
        public Exception Sink;
        public Exception SinkVariance;
        public Exception SizeVariance;
        public Exception AngleVariance;
        public Exception Unknow2n;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    return Object;
                case RegionDataObject_FieldIndex.ParentIndex:
                    return ParentIndex;
                case RegionDataObject_FieldIndex.Unknown1:
                    return Unknown1;
                case RegionDataObject_FieldIndex.Density:
                    return Density;
                case RegionDataObject_FieldIndex.Clustering:
                    return Clustering;
                case RegionDataObject_FieldIndex.MinSlope:
                    return MinSlope;
                case RegionDataObject_FieldIndex.MaxSlope:
                    return MaxSlope;
                case RegionDataObject_FieldIndex.Flags:
                    return Flags;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    return RadiusWrtPercent;
                case RegionDataObject_FieldIndex.Radius:
                    return Radius;
                case RegionDataObject_FieldIndex.MinHeight:
                    return MinHeight;
                case RegionDataObject_FieldIndex.MaxHeight:
                    return MaxHeight;
                case RegionDataObject_FieldIndex.Sink:
                    return Sink;
                case RegionDataObject_FieldIndex.SinkVariance:
                    return SinkVariance;
                case RegionDataObject_FieldIndex.SizeVariance:
                    return SizeVariance;
                case RegionDataObject_FieldIndex.AngleVariance:
                    return AngleVariance;
                case RegionDataObject_FieldIndex.Unknow2n:
                    return Unknow2n;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    this.Object = ex;
                    break;
                case RegionDataObject_FieldIndex.ParentIndex:
                    this.ParentIndex = ex;
                    break;
                case RegionDataObject_FieldIndex.Unknown1:
                    this.Unknown1 = ex;
                    break;
                case RegionDataObject_FieldIndex.Density:
                    this.Density = ex;
                    break;
                case RegionDataObject_FieldIndex.Clustering:
                    this.Clustering = ex;
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    this.MinSlope = ex;
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    this.MaxSlope = ex;
                    break;
                case RegionDataObject_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    this.RadiusWrtPercent = ex;
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    this.Radius = ex;
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    this.MinHeight = ex;
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    this.MaxHeight = ex;
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    this.Sink = ex;
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    this.SinkVariance = ex;
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    this.SizeVariance = ex;
                    break;
                case RegionDataObject_FieldIndex.AngleVariance:
                    this.AngleVariance = ex;
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    this.Unknow2n = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    this.Object = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.ParentIndex:
                    this.ParentIndex = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Unknown1:
                    this.Unknown1 = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Density:
                    this.Density = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Clustering:
                    this.Clustering = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    this.MinSlope = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    this.MaxSlope = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    this.RadiusWrtPercent = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    this.Radius = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    this.MinHeight = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    this.MaxHeight = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    this.Sink = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    this.SinkVariance = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    this.SizeVariance = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.AngleVariance:
                    this.AngleVariance = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    this.Unknow2n = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Object != null) return true;
            if (ParentIndex != null) return true;
            if (Unknown1 != null) return true;
            if (Density != null) return true;
            if (Clustering != null) return true;
            if (MinSlope != null) return true;
            if (MaxSlope != null) return true;
            if (Flags != null) return true;
            if (RadiusWrtPercent != null) return true;
            if (Radius != null) return true;
            if (MinHeight != null) return true;
            if (MaxHeight != null) return true;
            if (Sink != null) return true;
            if (SinkVariance != null) return true;
            if (SizeVariance != null) return true;
            if (AngleVariance != null) return true;
            if (Unknow2n != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataObject_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Object => {Object}");
            fg.AppendLine($"ParentIndex => {ParentIndex}");
            fg.AppendLine($"Unknown1 => {Unknown1}");
            fg.AppendLine($"Density => {Density}");
            fg.AppendLine($"Clustering => {Clustering}");
            fg.AppendLine($"MinSlope => {MinSlope}");
            fg.AppendLine($"MaxSlope => {MaxSlope}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"RadiusWrtPercent => {RadiusWrtPercent}");
            fg.AppendLine($"Radius => {Radius}");
            fg.AppendLine($"MinHeight => {MinHeight}");
            fg.AppendLine($"MaxHeight => {MaxHeight}");
            fg.AppendLine($"Sink => {Sink}");
            fg.AppendLine($"SinkVariance => {SinkVariance}");
            fg.AppendLine($"SizeVariance => {SizeVariance}");
            fg.AppendLine($"AngleVariance => {AngleVariance}");
            fg.AppendLine($"Unknow2n => {Unknow2n}");
        }
        #endregion

        #region Combine
        public RegionDataObject_ErrorMask Combine(RegionDataObject_ErrorMask rhs)
        {
            var ret = new RegionDataObject_ErrorMask();
            ret.Object = this.Object.Combine(rhs.Object);
            ret.ParentIndex = this.ParentIndex.Combine(rhs.ParentIndex);
            ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
            ret.Density = this.Density.Combine(rhs.Density);
            ret.Clustering = this.Clustering.Combine(rhs.Clustering);
            ret.MinSlope = this.MinSlope.Combine(rhs.MinSlope);
            ret.MaxSlope = this.MaxSlope.Combine(rhs.MaxSlope);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.RadiusWrtPercent = this.RadiusWrtPercent.Combine(rhs.RadiusWrtPercent);
            ret.Radius = this.Radius.Combine(rhs.Radius);
            ret.MinHeight = this.MinHeight.Combine(rhs.MinHeight);
            ret.MaxHeight = this.MaxHeight.Combine(rhs.MaxHeight);
            ret.Sink = this.Sink.Combine(rhs.Sink);
            ret.SinkVariance = this.SinkVariance.Combine(rhs.SinkVariance);
            ret.SizeVariance = this.SizeVariance.Combine(rhs.SizeVariance);
            ret.AngleVariance = this.AngleVariance.Combine(rhs.AngleVariance);
            ret.Unknow2n = this.Unknow2n.Combine(rhs.Unknow2n);
            return ret;
        }
        public static RegionDataObject_ErrorMask Combine(RegionDataObject_ErrorMask lhs, RegionDataObject_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataObject_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataObject_ErrorMask();
        }
        #endregion

    }
    public class RegionDataObject_CopyMask
    {
        public RegionDataObject_CopyMask()
        {
        }

        public RegionDataObject_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Object = defaultOn;
            this.ParentIndex = defaultOn;
            this.Unknown1 = defaultOn;
            this.Density = defaultOn;
            this.Clustering = defaultOn;
            this.MinSlope = defaultOn;
            this.MaxSlope = defaultOn;
            this.Flags = defaultOn;
            this.RadiusWrtPercent = defaultOn;
            this.Radius = defaultOn;
            this.MinHeight = defaultOn;
            this.MaxHeight = defaultOn;
            this.Sink = defaultOn;
            this.SinkVariance = defaultOn;
            this.SizeVariance = defaultOn;
            this.AngleVariance = defaultOn;
            this.Unknow2n = defaultOn;
        }

        #region Members
        public bool Object;
        public bool ParentIndex;
        public bool Unknown1;
        public bool Density;
        public bool Clustering;
        public bool MinSlope;
        public bool MaxSlope;
        public bool Flags;
        public bool RadiusWrtPercent;
        public bool Radius;
        public bool MinHeight;
        public bool MaxHeight;
        public bool Sink;
        public bool SinkVariance;
        public bool SizeVariance;
        public bool AngleVariance;
        public bool Unknow2n;
        #endregion

    }

    public class RegionDataObject_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Object;
        public bool ParentIndex;
        public bool Unknown1;
        public bool Density;
        public bool Clustering;
        public bool MinSlope;
        public bool MaxSlope;
        public bool Flags;
        public bool RadiusWrtPercent;
        public bool Radius;
        public bool MinHeight;
        public bool MaxHeight;
        public bool Sink;
        public bool SinkVariance;
        public bool SizeVariance;
        public bool AngleVariance;
        public bool Unknow2n;
        #endregion

        #region Ctors
        public RegionDataObject_TranslationMask()
        {
        }

        public RegionDataObject_TranslationMask(bool defaultOn)
        {
            this.Object = defaultOn;
            this.ParentIndex = defaultOn;
            this.Unknown1 = defaultOn;
            this.Density = defaultOn;
            this.Clustering = defaultOn;
            this.MinSlope = defaultOn;
            this.MaxSlope = defaultOn;
            this.Flags = defaultOn;
            this.RadiusWrtPercent = defaultOn;
            this.Radius = defaultOn;
            this.MinHeight = defaultOn;
            this.MaxHeight = defaultOn;
            this.Sink = defaultOn;
            this.SinkVariance = defaultOn;
            this.SizeVariance = defaultOn;
            this.AngleVariance = defaultOn;
            this.Unknow2n = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Object, null));
            ret.Add((ParentIndex, null));
            ret.Add((Unknown1, null));
            ret.Add((Density, null));
            ret.Add((Clustering, null));
            ret.Add((MinSlope, null));
            ret.Add((MaxSlope, null));
            ret.Add((Flags, null));
            ret.Add((RadiusWrtPercent, null));
            ret.Add((Radius, null));
            ret.Add((MinHeight, null));
            ret.Add((MaxHeight, null));
            ret.Add((Sink, null));
            ret.Add((SinkVariance, null));
            ret.Add((SizeVariance, null));
            ret.Add((AngleVariance, null));
            ret.Add((Unknow2n, null));
        }
    }
    #endregion

    #endregion

}
