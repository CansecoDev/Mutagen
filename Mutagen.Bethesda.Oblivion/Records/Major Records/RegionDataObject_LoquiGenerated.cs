/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataObject : 
        IRegionDataObject,
        ILoquiObject<RegionDataObject>,
        ILoquiObjectSetter,
        IPropertySupporter<UInt16>,
        IPropertySupporter<Byte[]>,
        IPropertySupporter<Single>,
        IPropertySupporter<Byte>,
        IPropertySupporter<RegionDataObject.Flag>,
        IPropertySupporter<P3UInt16>,
        IEquatable<RegionDataObject>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataObject_Registration.Instance;
        public static RegionDataObject_Registration Registration => RegionDataObject_Registration.Instance;

        #region Ctor
        public RegionDataObject()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Object
        public FormIDLink<MajorRecord> Object_Property { get; } = new FormIDLink<MajorRecord>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MajorRecord Object { get => Object_Property.Item; set => Object_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<MajorRecord> IRegionDataObjectGetter.Object_Property => this.Object_Property;
        #endregion
        #region ParentIndex
        protected UInt16 _ParentIndex;
        protected PropertyForwarder<RegionDataObject, UInt16> _ParentIndexForwarder;
        public INotifyingSetItem<UInt16> ParentIndex_Property => _ParentIndexForwarder ?? (_ParentIndexForwarder = new PropertyForwarder<RegionDataObject, UInt16>(this, (int)RegionDataObject_FieldIndex.ParentIndex));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 ParentIndex
        {
            get => this._ParentIndex;
            set => this.SetParentIndex(value);
        }
        protected void SetParentIndex(
            UInt16 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.ParentIndex];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && ParentIndex == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.ParentIndex] = hasBeenSet;
            }
            if (_UInt16_subscriptions != null)
            {
                var tmp = ParentIndex;
                _ParentIndex = item;
                _UInt16_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.ParentIndex,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _ParentIndex = item;
            }
        }
        protected void UnsetParentIndex()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.ParentIndex] = false;
            ParentIndex = default(UInt16);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> IRegionDataObject.ParentIndex_Property => this.ParentIndex_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> IRegionDataObjectGetter.ParentIndex_Property => this.ParentIndex_Property;
        #endregion
        #region Unknown1
        protected Byte[] _Unknown1 = new byte[2];
        protected PropertyForwarder<RegionDataObject, Byte[]> _Unknown1Forwarder;
        public INotifyingSetItem<Byte[]> Unknown1_Property => _Unknown1Forwarder ?? (_Unknown1Forwarder = new PropertyForwarder<RegionDataObject, Byte[]>(this, (int)RegionDataObject_FieldIndex.Unknown1));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Unknown1
        {
            get => this._Unknown1;
            set => this.SetUnknown1(value);
        }
        protected void SetUnknown1(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            if (item == null)
            {
                item = new byte[2];
            }
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Unknown1];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Unknown1, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Unknown1] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = Unknown1;
                _Unknown1 = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.Unknown1,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Unknown1 = item;
            }
        }
        protected void UnsetUnknown1()
        {
            SetUnknown1(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> IRegionDataObject.Unknown1_Property => this.Unknown1_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> IRegionDataObjectGetter.Unknown1_Property => this.Unknown1_Property;
        #endregion
        #region Density
        protected Single _Density;
        protected PropertyForwarder<RegionDataObject, Single> _DensityForwarder;
        public INotifyingSetItem<Single> Density_Property => _DensityForwarder ?? (_DensityForwarder = new PropertyForwarder<RegionDataObject, Single>(this, (int)RegionDataObject_FieldIndex.Density));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Density
        {
            get => this._Density;
            set => this.SetDensity(value);
        }
        protected void SetDensity(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Density];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Density == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Density] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Density;
                _Density = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.Density,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Density = item;
            }
        }
        protected void UnsetDensity()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Density] = false;
            Density = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IRegionDataObject.Density_Property => this.Density_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IRegionDataObjectGetter.Density_Property => this.Density_Property;
        #endregion
        #region Clustering
        protected Byte _Clustering;
        protected PropertyForwarder<RegionDataObject, Byte> _ClusteringForwarder;
        public INotifyingSetItem<Byte> Clustering_Property => _ClusteringForwarder ?? (_ClusteringForwarder = new PropertyForwarder<RegionDataObject, Byte>(this, (int)RegionDataObject_FieldIndex.Clustering));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Clustering
        {
            get => this._Clustering;
            set => this.SetClustering(value);
        }
        protected void SetClustering(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Clustering];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Clustering == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Clustering] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = Clustering;
                _Clustering = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.Clustering,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Clustering = item;
            }
        }
        protected void UnsetClustering()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Clustering] = false;
            Clustering = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRegionDataObject.Clustering_Property => this.Clustering_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRegionDataObjectGetter.Clustering_Property => this.Clustering_Property;
        #endregion
        #region MinSlope
        protected Byte _MinSlope;
        protected PropertyForwarder<RegionDataObject, Byte> _MinSlopeForwarder;
        public INotifyingSetItem<Byte> MinSlope_Property => _MinSlopeForwarder ?? (_MinSlopeForwarder = new PropertyForwarder<RegionDataObject, Byte>(this, (int)RegionDataObject_FieldIndex.MinSlope));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte MinSlope
        {
            get => this._MinSlope;
            set => this.SetMinSlope(value);
        }
        protected void SetMinSlope(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MinSlope];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MinSlope == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MinSlope] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = MinSlope;
                _MinSlope = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.MinSlope,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MinSlope = item;
            }
        }
        protected void UnsetMinSlope()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MinSlope] = false;
            MinSlope = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRegionDataObject.MinSlope_Property => this.MinSlope_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRegionDataObjectGetter.MinSlope_Property => this.MinSlope_Property;
        #endregion
        #region MaxSlope
        protected Byte _MaxSlope;
        protected PropertyForwarder<RegionDataObject, Byte> _MaxSlopeForwarder;
        public INotifyingSetItem<Byte> MaxSlope_Property => _MaxSlopeForwarder ?? (_MaxSlopeForwarder = new PropertyForwarder<RegionDataObject, Byte>(this, (int)RegionDataObject_FieldIndex.MaxSlope));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte MaxSlope
        {
            get => this._MaxSlope;
            set => this.SetMaxSlope(value);
        }
        protected void SetMaxSlope(
            Byte item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MaxSlope];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MaxSlope == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MaxSlope] = hasBeenSet;
            }
            if (_Byte_subscriptions != null)
            {
                var tmp = MaxSlope;
                _MaxSlope = item;
                _Byte_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.MaxSlope,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MaxSlope = item;
            }
        }
        protected void UnsetMaxSlope()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MaxSlope] = false;
            MaxSlope = default(Byte);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRegionDataObject.MaxSlope_Property => this.MaxSlope_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRegionDataObjectGetter.MaxSlope_Property => this.MaxSlope_Property;
        #endregion
        #region Flags
        protected RegionDataObject.Flag _Flags;
        protected PropertyForwarder<RegionDataObject, RegionDataObject.Flag> _FlagsForwarder;
        public INotifyingSetItem<RegionDataObject.Flag> Flags_Property => _FlagsForwarder ?? (_FlagsForwarder = new PropertyForwarder<RegionDataObject, RegionDataObject.Flag>(this, (int)RegionDataObject_FieldIndex.Flags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataObject.Flag Flags
        {
            get => this._Flags;
            set => this.SetFlags(value);
        }
        protected void SetFlags(
            RegionDataObject.Flag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Flags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Flags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Flags] = hasBeenSet;
            }
            if (_RegionDataObjectFlag_subscriptions != null)
            {
                var tmp = Flags;
                _Flags = item;
                _RegionDataObjectFlag_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.Flags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Flags = item;
            }
        }
        protected void UnsetFlags()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Flags] = false;
            Flags = default(RegionDataObject.Flag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<RegionDataObject.Flag> IRegionDataObject.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<RegionDataObject.Flag> IRegionDataObjectGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region RadiusWrtPercent
        protected UInt16 _RadiusWrtPercent;
        protected PropertyForwarder<RegionDataObject, UInt16> _RadiusWrtPercentForwarder;
        public INotifyingSetItem<UInt16> RadiusWrtPercent_Property => _RadiusWrtPercentForwarder ?? (_RadiusWrtPercentForwarder = new PropertyForwarder<RegionDataObject, UInt16>(this, (int)RegionDataObject_FieldIndex.RadiusWrtPercent));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 RadiusWrtPercent
        {
            get => this._RadiusWrtPercent;
            set => this.SetRadiusWrtPercent(value);
        }
        protected void SetRadiusWrtPercent(
            UInt16 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.RadiusWrtPercent];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && RadiusWrtPercent == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.RadiusWrtPercent] = hasBeenSet;
            }
            if (_UInt16_subscriptions != null)
            {
                var tmp = RadiusWrtPercent;
                _RadiusWrtPercent = item;
                _UInt16_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.RadiusWrtPercent,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _RadiusWrtPercent = item;
            }
        }
        protected void UnsetRadiusWrtPercent()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.RadiusWrtPercent] = false;
            RadiusWrtPercent = default(UInt16);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> IRegionDataObject.RadiusWrtPercent_Property => this.RadiusWrtPercent_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> IRegionDataObjectGetter.RadiusWrtPercent_Property => this.RadiusWrtPercent_Property;
        #endregion
        #region Radius
        protected UInt16 _Radius;
        protected PropertyForwarder<RegionDataObject, UInt16> _RadiusForwarder;
        public INotifyingSetItem<UInt16> Radius_Property => _RadiusForwarder ?? (_RadiusForwarder = new PropertyForwarder<RegionDataObject, UInt16>(this, (int)RegionDataObject_FieldIndex.Radius));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt16 Radius
        {
            get => this._Radius;
            set => this.SetRadius(value);
        }
        protected void SetRadius(
            UInt16 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Radius];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Radius == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Radius] = hasBeenSet;
            }
            if (_UInt16_subscriptions != null)
            {
                var tmp = Radius;
                _Radius = item;
                _UInt16_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.Radius,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Radius = item;
            }
        }
        protected void UnsetRadius()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Radius] = false;
            Radius = default(UInt16);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt16> IRegionDataObject.Radius_Property => this.Radius_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt16> IRegionDataObjectGetter.Radius_Property => this.Radius_Property;
        #endregion
        #region MinHeight
        protected Single _MinHeight;
        protected PropertyForwarder<RegionDataObject, Single> _MinHeightForwarder;
        public INotifyingSetItem<Single> MinHeight_Property => _MinHeightForwarder ?? (_MinHeightForwarder = new PropertyForwarder<RegionDataObject, Single>(this, (int)RegionDataObject_FieldIndex.MinHeight));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single MinHeight
        {
            get => this._MinHeight;
            set => this.SetMinHeight(value);
        }
        protected void SetMinHeight(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MinHeight];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MinHeight == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MinHeight] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = MinHeight;
                _MinHeight = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.MinHeight,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MinHeight = item;
            }
        }
        protected void UnsetMinHeight()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MinHeight] = false;
            MinHeight = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IRegionDataObject.MinHeight_Property => this.MinHeight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IRegionDataObjectGetter.MinHeight_Property => this.MinHeight_Property;
        #endregion
        #region MaxHeight
        protected Single _MaxHeight;
        protected PropertyForwarder<RegionDataObject, Single> _MaxHeightForwarder;
        public INotifyingSetItem<Single> MaxHeight_Property => _MaxHeightForwarder ?? (_MaxHeightForwarder = new PropertyForwarder<RegionDataObject, Single>(this, (int)RegionDataObject_FieldIndex.MaxHeight));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single MaxHeight
        {
            get => this._MaxHeight;
            set => this.SetMaxHeight(value);
        }
        protected void SetMaxHeight(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MaxHeight];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MaxHeight == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MaxHeight] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = MaxHeight;
                _MaxHeight = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.MaxHeight,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MaxHeight = item;
            }
        }
        protected void UnsetMaxHeight()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.MaxHeight] = false;
            MaxHeight = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IRegionDataObject.MaxHeight_Property => this.MaxHeight_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IRegionDataObjectGetter.MaxHeight_Property => this.MaxHeight_Property;
        #endregion
        #region Sink
        protected Single _Sink;
        protected PropertyForwarder<RegionDataObject, Single> _SinkForwarder;
        public INotifyingSetItem<Single> Sink_Property => _SinkForwarder ?? (_SinkForwarder = new PropertyForwarder<RegionDataObject, Single>(this, (int)RegionDataObject_FieldIndex.Sink));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single Sink
        {
            get => this._Sink;
            set => this.SetSink(value);
        }
        protected void SetSink(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Sink];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Sink == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Sink] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = Sink;
                _Sink = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.Sink,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Sink = item;
            }
        }
        protected void UnsetSink()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Sink] = false;
            Sink = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IRegionDataObject.Sink_Property => this.Sink_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IRegionDataObjectGetter.Sink_Property => this.Sink_Property;
        #endregion
        #region SinkVariance
        protected Single _SinkVariance;
        protected PropertyForwarder<RegionDataObject, Single> _SinkVarianceForwarder;
        public INotifyingSetItem<Single> SinkVariance_Property => _SinkVarianceForwarder ?? (_SinkVarianceForwarder = new PropertyForwarder<RegionDataObject, Single>(this, (int)RegionDataObject_FieldIndex.SinkVariance));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single SinkVariance
        {
            get => this._SinkVariance;
            set => this.SetSinkVariance(value);
        }
        protected void SetSinkVariance(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.SinkVariance];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && SinkVariance == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.SinkVariance] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = SinkVariance;
                _SinkVariance = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.SinkVariance,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _SinkVariance = item;
            }
        }
        protected void UnsetSinkVariance()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.SinkVariance] = false;
            SinkVariance = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IRegionDataObject.SinkVariance_Property => this.SinkVariance_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IRegionDataObjectGetter.SinkVariance_Property => this.SinkVariance_Property;
        #endregion
        #region SizeVariance
        protected Single _SizeVariance;
        protected PropertyForwarder<RegionDataObject, Single> _SizeVarianceForwarder;
        public INotifyingSetItem<Single> SizeVariance_Property => _SizeVarianceForwarder ?? (_SizeVarianceForwarder = new PropertyForwarder<RegionDataObject, Single>(this, (int)RegionDataObject_FieldIndex.SizeVariance));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Single SizeVariance
        {
            get => this._SizeVariance;
            set => this.SetSizeVariance(value);
        }
        protected void SetSizeVariance(
            Single item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.SizeVariance];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && SizeVariance == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.SizeVariance] = hasBeenSet;
            }
            if (_Single_subscriptions != null)
            {
                var tmp = SizeVariance;
                _SizeVariance = item;
                _Single_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.SizeVariance,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _SizeVariance = item;
            }
        }
        protected void UnsetSizeVariance()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.SizeVariance] = false;
            SizeVariance = default(Single);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Single> IRegionDataObject.SizeVariance_Property => this.SizeVariance_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Single> IRegionDataObjectGetter.SizeVariance_Property => this.SizeVariance_Property;
        #endregion
        #region AngleVariance
        protected P3UInt16 _AngleVariance;
        protected PropertyForwarder<RegionDataObject, P3UInt16> _AngleVarianceForwarder;
        public INotifyingSetItem<P3UInt16> AngleVariance_Property => _AngleVarianceForwarder ?? (_AngleVarianceForwarder = new PropertyForwarder<RegionDataObject, P3UInt16>(this, (int)RegionDataObject_FieldIndex.AngleVariance));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public P3UInt16 AngleVariance
        {
            get => this._AngleVariance;
            set => this.SetAngleVariance(value);
        }
        protected void SetAngleVariance(
            P3UInt16 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.AngleVariance];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && AngleVariance == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.AngleVariance] = hasBeenSet;
            }
            if (_P3UInt16_subscriptions != null)
            {
                var tmp = AngleVariance;
                _AngleVariance = item;
                _P3UInt16_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.AngleVariance,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _AngleVariance = item;
            }
        }
        protected void UnsetAngleVariance()
        {
            _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.AngleVariance] = false;
            AngleVariance = default(P3UInt16);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<P3UInt16> IRegionDataObject.AngleVariance_Property => this.AngleVariance_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<P3UInt16> IRegionDataObjectGetter.AngleVariance_Property => this.AngleVariance_Property;
        #endregion
        #region Unknow2n
        protected Byte[] _Unknow2n = new byte[6];
        protected PropertyForwarder<RegionDataObject, Byte[]> _Unknow2nForwarder;
        public INotifyingSetItem<Byte[]> Unknow2n_Property => _Unknow2nForwarder ?? (_Unknow2nForwarder = new PropertyForwarder<RegionDataObject, Byte[]>(this, (int)RegionDataObject_FieldIndex.Unknow2n));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Unknow2n
        {
            get => this._Unknow2n;
            set => this.SetUnknow2n(value);
        }
        protected void SetUnknow2n(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            if (item == null)
            {
                item = new byte[6];
            }
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Unknow2n];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Unknow2n, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataObject_FieldIndex.Unknow2n] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = Unknow2n;
                _Unknow2n = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)RegionDataObject_FieldIndex.Unknow2n,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Unknow2n = item;
            }
        }
        protected void UnsetUnknow2n()
        {
            SetUnknow2n(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> IRegionDataObject.Unknow2n_Property => this.Unknow2n_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> IRegionDataObjectGetter.Unknow2n_Property => this.Unknow2n_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RegionDataObjectCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RegionDataObjectCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RegionDataObjectCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RegionDataObjectCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<RegionDataObject>.GetEqualsMask(RegionDataObject rhs) => RegionDataObjectCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRegionDataObjectGetter>.GetEqualsMask(IRegionDataObjectGetter rhs) => RegionDataObjectCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RegionDataObjectCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RegionDataObject_Mask<bool> printMask = null)
        {
            return RegionDataObjectCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataObjectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public RegionDataObject_Mask<bool> GetHasBeenSetMask()
        {
            return RegionDataObjectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataObject rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataObject rhs)
        {
            if (rhs == null) return false;
            if (!this.Object_Property.Equals(rhs.Object_Property)) return false;
            if (this.ParentIndex != rhs.ParentIndex) return false;
            if (!this.Unknown1.EqualsFast(rhs.Unknown1)) return false;
            if (!this.Density.EqualsWithin(rhs.Density)) return false;
            if (this.Clustering != rhs.Clustering) return false;
            if (this.MinSlope != rhs.MinSlope) return false;
            if (this.MaxSlope != rhs.MaxSlope) return false;
            if (this.Flags != rhs.Flags) return false;
            if (this.RadiusWrtPercent != rhs.RadiusWrtPercent) return false;
            if (this.Radius != rhs.Radius) return false;
            if (!this.MinHeight.EqualsWithin(rhs.MinHeight)) return false;
            if (!this.MaxHeight.EqualsWithin(rhs.MaxHeight)) return false;
            if (!this.Sink.EqualsWithin(rhs.Sink)) return false;
            if (!this.SinkVariance.EqualsWithin(rhs.SinkVariance)) return false;
            if (!this.SizeVariance.EqualsWithin(rhs.SizeVariance)) return false;
            if (this.AngleVariance != rhs.AngleVariance) return false;
            if (!this.Unknow2n.EqualsFast(rhs.Unknow2n)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Object).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ParentIndex).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Unknown1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Density).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Clustering).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MinSlope).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaxSlope).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RadiusWrtPercent).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Radius).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MinHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaxHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Sink).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SinkVariance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SizeVariance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(AngleVariance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Unknow2n).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static RegionDataObject Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataObject Create_XML(
            XElement root,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RegionDataObject Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataObject();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataObject Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RegionDataObject Create_XML(
            string path,
            out RegionDataObject_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RegionDataObject Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RegionDataObject Create_XML(
            Stream stream,
            out RegionDataObject_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RegionDataObject>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RegionDataObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<RegionDataObject>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RegionDataObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RegionDataObject_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            RegionDataObjectCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            RegionDataObject item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Object":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)RegionDataObject_FieldIndex.Object,
                        item: item.Object_Property,
                        errorMask: errorMask);
                    break;
                case "ParentIndex":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.ParentIndex);
                        if (UInt16XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt16 ParentIndexParse,
                            errorMask: errorMask))
                        {
                            item.ParentIndex = ParentIndexParse;
                        }
                        else
                        {
                            item.UnsetParentIndex();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown1":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Unknown1);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] Unknown1Parse,
                            errorMask: errorMask))
                        {
                            item.Unknown1 = Unknown1Parse;
                        }
                        else
                        {
                            item.UnsetUnknown1();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Density":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Density);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single DensityParse,
                            errorMask: errorMask))
                        {
                            item.Density = DensityParse;
                        }
                        else
                        {
                            item.UnsetDensity();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Clustering":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Clustering);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte ClusteringParse,
                            errorMask: errorMask))
                        {
                            item.Clustering = ClusteringParse;
                        }
                        else
                        {
                            item.UnsetClustering();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MinSlope":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MinSlope);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte MinSlopeParse,
                            errorMask: errorMask))
                        {
                            item.MinSlope = MinSlopeParse;
                        }
                        else
                        {
                            item.UnsetMinSlope();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxSlope":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MaxSlope);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte MaxSlopeParse,
                            errorMask: errorMask))
                        {
                            item.MaxSlope = MaxSlopeParse;
                        }
                        else
                        {
                            item.UnsetMaxSlope();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Flags);
                        if (EnumXmlTranslation<RegionDataObject.Flag>.Instance.Parse(
                            root: root,
                            item: out RegionDataObject.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.UnsetFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RadiusWrtPercent":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.RadiusWrtPercent);
                        if (UInt16XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt16 RadiusWrtPercentParse,
                            errorMask: errorMask))
                        {
                            item.RadiusWrtPercent = RadiusWrtPercentParse;
                        }
                        else
                        {
                            item.UnsetRadiusWrtPercent();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Radius":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Radius);
                        if (UInt16XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt16 RadiusParse,
                            errorMask: errorMask))
                        {
                            item.Radius = RadiusParse;
                        }
                        else
                        {
                            item.UnsetRadius();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MinHeight":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MinHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single MinHeightParse,
                            errorMask: errorMask))
                        {
                            item.MinHeight = MinHeightParse;
                        }
                        else
                        {
                            item.UnsetMinHeight();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxHeight":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MaxHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single MaxHeightParse,
                            errorMask: errorMask))
                        {
                            item.MaxHeight = MaxHeightParse;
                        }
                        else
                        {
                            item.UnsetMaxHeight();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sink":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Sink);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single SinkParse,
                            errorMask: errorMask))
                        {
                            item.Sink = SinkParse;
                        }
                        else
                        {
                            item.UnsetSink();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SinkVariance":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.SinkVariance);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single SinkVarianceParse,
                            errorMask: errorMask))
                        {
                            item.SinkVariance = SinkVarianceParse;
                        }
                        else
                        {
                            item.UnsetSinkVariance();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SizeVariance":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.SizeVariance);
                        if (FloatXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Single SizeVarianceParse,
                            errorMask: errorMask))
                        {
                            item.SizeVariance = SizeVarianceParse;
                        }
                        else
                        {
                            item.UnsetSizeVariance();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AngleVariance":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.AngleVariance);
                        if (P3UInt16XmlTranslation.Instance.Parse(
                            root: root,
                            item: out P3UInt16 AngleVarianceParse,
                            errorMask: errorMask))
                        {
                            item.AngleVariance = AngleVarianceParse;
                        }
                        else
                        {
                            item.UnsetAngleVariance();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknow2n":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Unknow2n);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] Unknow2nParse,
                            errorMask: errorMask))
                        {
                            item.Unknow2n = Unknow2nParse;
                        }
                        else
                        {
                            item.UnsetUnknow2n();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region IPropertySupporter UInt16
        protected ObjectCentralizationSubscriptions<UInt16> _UInt16_subscriptions;
        UInt16 IPropertySupporter<UInt16>.Get(int index)
        {
            return GetUInt16(index: index);
        }

        protected UInt16 GetUInt16(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.ParentIndex:
                    return ParentIndex;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    return RadiusWrtPercent;
                case RegionDataObject_FieldIndex.Radius:
                    return Radius;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        void IPropertySupporter<UInt16>.Set(
            int index,
            UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt16(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt16(
            int index,
            UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.ParentIndex:
                    SetParentIndex(item, hasBeenSet, cmds);
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    SetRadiusWrtPercent(item, hasBeenSet, cmds);
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    SetRadius(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        bool IPropertySupporter<UInt16>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<UInt16>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt16>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt16(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt16(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.ParentIndex:
                    SetParentIndex(
                        item: default(UInt16),
                        hasBeenSet: false);
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    SetRadiusWrtPercent(
                        item: default(UInt16),
                        hasBeenSet: false);
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    SetRadius(
                        item: default(UInt16),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt16>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt16> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt16_subscriptions == null)
            {
                _UInt16_subscriptions = new ObjectCentralizationSubscriptions<UInt16>();
            }
            _UInt16_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt16>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt16_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt16>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt16 IPropertySupporter<UInt16>.DefaultValue(int index)
        {
            return DefaultValueUInt16(index: index);
        }

        protected UInt16 DefaultValueUInt16(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                    return default(UInt16);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt16: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte[]
        protected ObjectCentralizationSubscriptions<Byte[]> _ByteArr_subscriptions;
        Byte[] IPropertySupporter<Byte[]>.Get(int index)
        {
            return GetByteArr(index: index);
        }

        protected Byte[] GetByteArr(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Unknown1:
                    return Unknown1;
                case RegionDataObject_FieldIndex.Unknow2n:
                    return Unknow2n;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        void IPropertySupporter<Byte[]>.Set(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByteArr(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByteArr(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Unknown1:
                    SetUnknown1(item, hasBeenSet, cmds);
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    SetUnknow2n(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        bool IPropertySupporter<Byte[]>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte[]>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte[]>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByteArr(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByteArr(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Unknown1:
                    SetUnknown1(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    SetUnknow2n(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte[]> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ByteArr_subscriptions == null)
            {
                _ByteArr_subscriptions = new ObjectCentralizationSubscriptions<Byte[]>();
            }
            _ByteArr_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Unsubscribe(
            int index,
            object owner)
        {
            _ByteArr_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte[]>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte[] IPropertySupporter<Byte[]>.DefaultValue(int index)
        {
            return DefaultValueByteArr(index: index);
        }

        protected Byte[] DefaultValueByteArr(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return default(Byte[]);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Single
        protected ObjectCentralizationSubscriptions<Single> _Single_subscriptions;
        Single IPropertySupporter<Single>.Get(int index)
        {
            return GetSingle(index: index);
        }

        protected Single GetSingle(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Density:
                    return Density;
                case RegionDataObject_FieldIndex.MinHeight:
                    return MinHeight;
                case RegionDataObject_FieldIndex.MaxHeight:
                    return MaxHeight;
                case RegionDataObject_FieldIndex.Sink:
                    return Sink;
                case RegionDataObject_FieldIndex.SinkVariance:
                    return SinkVariance;
                case RegionDataObject_FieldIndex.SizeVariance:
                    return SizeVariance;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        void IPropertySupporter<Single>.Set(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetSingle(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetSingle(
            int index,
            Single item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Density:
                    SetDensity(item, hasBeenSet, cmds);
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    SetMinHeight(item, hasBeenSet, cmds);
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    SetMaxHeight(item, hasBeenSet, cmds);
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    SetSink(item, hasBeenSet, cmds);
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    SetSinkVariance(item, hasBeenSet, cmds);
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    SetSizeVariance(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        bool IPropertySupporter<Single>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Single>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Single>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetSingle(
                index: index,
                cmds: cmds);
        }

        protected void UnsetSingle(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Density:
                    SetDensity(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    SetMinHeight(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    SetMaxHeight(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    SetSink(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    SetSinkVariance(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    SetSizeVariance(
                        item: default(Single),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Single> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Single_subscriptions == null)
            {
                _Single_subscriptions = new ObjectCentralizationSubscriptions<Single>();
            }
            _Single_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Single>.Unsubscribe(
            int index,
            object owner)
        {
            _Single_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Single>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Single IPropertySupporter<Single>.DefaultValue(int index)
        {
            return DefaultValueSingle(index: index);
        }

        protected Single DefaultValueSingle(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                    return default(Single);
                default:
                    throw new ArgumentException($"Unknown index for field type Single: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte
        protected ObjectCentralizationSubscriptions<Byte> _Byte_subscriptions;
        Byte IPropertySupporter<Byte>.Get(int index)
        {
            return GetByte(index: index);
        }

        protected Byte GetByte(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Clustering:
                    return Clustering;
                case RegionDataObject_FieldIndex.MinSlope:
                    return MinSlope;
                case RegionDataObject_FieldIndex.MaxSlope:
                    return MaxSlope;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        void IPropertySupporter<Byte>.Set(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByte(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByte(
            int index,
            Byte item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Clustering:
                    SetClustering(item, hasBeenSet, cmds);
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    SetMinSlope(item, hasBeenSet, cmds);
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    SetMaxSlope(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        bool IPropertySupporter<Byte>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByte(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByte(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Clustering:
                    SetClustering(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    SetMinSlope(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    SetMaxSlope(
                        item: default(Byte),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Byte_subscriptions == null)
            {
                _Byte_subscriptions = new ObjectCentralizationSubscriptions<Byte>();
            }
            _Byte_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte>.Unsubscribe(
            int index,
            object owner)
        {
            _Byte_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte IPropertySupporter<Byte>.DefaultValue(int index)
        {
            return DefaultValueByte(index: index);
        }

        protected Byte DefaultValueByte(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                    return default(Byte);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte: {index}");
            }
        }

        #endregion

        #region IPropertySupporter RegionDataObject.Flag
        protected ObjectCentralizationSubscriptions<RegionDataObject.Flag> _RegionDataObjectFlag_subscriptions;
        RegionDataObject.Flag IPropertySupporter<RegionDataObject.Flag>.Get(int index)
        {
            return GetRegionDataObjectFlag(index: index);
        }

        protected RegionDataObject.Flag GetRegionDataObjectFlag(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Unknown index for field type RegionDataObject.Flag: {index}");
            }
        }

        void IPropertySupporter<RegionDataObject.Flag>.Set(
            int index,
            RegionDataObject.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetRegionDataObjectFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetRegionDataObjectFlag(
            int index,
            RegionDataObject.Flag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Flags:
                    SetFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type RegionDataObject.Flag: {index}");
            }
        }

        bool IPropertySupporter<RegionDataObject.Flag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<RegionDataObject.Flag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<RegionDataObject.Flag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetRegionDataObjectFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetRegionDataObjectFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Flags:
                    SetFlags(
                        item: default(RegionDataObject.Flag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type RegionDataObject.Flag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<RegionDataObject.Flag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<RegionDataObject.Flag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_RegionDataObjectFlag_subscriptions == null)
            {
                _RegionDataObjectFlag_subscriptions = new ObjectCentralizationSubscriptions<RegionDataObject.Flag>();
            }
            _RegionDataObjectFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<RegionDataObject.Flag>.Unsubscribe(
            int index,
            object owner)
        {
            _RegionDataObjectFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<RegionDataObject.Flag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        RegionDataObject.Flag IPropertySupporter<RegionDataObject.Flag>.DefaultValue(int index)
        {
            return DefaultValueRegionDataObjectFlag(index: index);
        }

        protected RegionDataObject.Flag DefaultValueRegionDataObjectFlag(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.Flags:
                    return default(RegionDataObject.Flag);
                default:
                    throw new ArgumentException($"Unknown index for field type RegionDataObject.Flag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter P3UInt16
        protected ObjectCentralizationSubscriptions<P3UInt16> _P3UInt16_subscriptions;
        P3UInt16 IPropertySupporter<P3UInt16>.Get(int index)
        {
            return GetP3UInt16(index: index);
        }

        protected P3UInt16 GetP3UInt16(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.AngleVariance:
                    return AngleVariance;
                default:
                    throw new ArgumentException($"Unknown index for field type P3UInt16: {index}");
            }
        }

        void IPropertySupporter<P3UInt16>.Set(
            int index,
            P3UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetP3UInt16(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetP3UInt16(
            int index,
            P3UInt16 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.AngleVariance:
                    SetAngleVariance(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type P3UInt16: {index}");
            }
        }

        bool IPropertySupporter<P3UInt16>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<P3UInt16>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<P3UInt16>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetP3UInt16(
                index: index,
                cmds: cmds);
        }

        protected void UnsetP3UInt16(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.AngleVariance:
                    SetAngleVariance(
                        item: default(P3UInt16),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type P3UInt16: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<P3UInt16>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<P3UInt16> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_P3UInt16_subscriptions == null)
            {
                _P3UInt16_subscriptions = new ObjectCentralizationSubscriptions<P3UInt16>();
            }
            _P3UInt16_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<P3UInt16>.Unsubscribe(
            int index,
            object owner)
        {
            _P3UInt16_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<P3UInt16>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        P3UInt16 IPropertySupporter<P3UInt16>.DefaultValue(int index)
        {
            return DefaultValueP3UInt16(index: index);
        }

        protected P3UInt16 DefaultValueP3UInt16(int index)
        {
            switch ((RegionDataObject_FieldIndex)index)
            {
                case RegionDataObject_FieldIndex.AngleVariance:
                    return default(P3UInt16);
                default:
                    throw new ArgumentException($"Unknown index for field type P3UInt16: {index}");
            }
        }

        #endregion

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Object_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionDataObject Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataObject Create_Binary(
            MutagenFrame frame,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RegionDataObject Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataObject();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataObject Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionDataObject Create_Binary(
            string path,
            out RegionDataObject_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RegionDataObject Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionDataObject Create_Binary(
            Stream stream,
            out RegionDataObject_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RegionDataObject_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataObjectCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionDataObject item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                frame: frame.Spawn(snapToFinalPosition: false),
                fieldIndex: (int)RegionDataObject_FieldIndex.Object,
                item: item.Object_Property,
                errorMask: errorMask);
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.ParentIndex);
                if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out UInt16 ParentIndexParse,
                    errorMask: errorMask))
                {
                    item.ParentIndex = ParentIndexParse;
                }
                else
                {
                    item.UnsetParentIndex();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Unknown1);
                if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                    frame: frame.SpawnWithLength(2),
                    item: out Byte[] Unknown1Parse,
                    errorMask: errorMask))
                {
                    item.Unknown1 = Unknown1Parse;
                }
                else
                {
                    item.UnsetUnknown1();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Density);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single DensityParse,
                    errorMask: errorMask))
                {
                    item.Density = DensityParse;
                }
                else
                {
                    item.UnsetDensity();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Clustering);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte ClusteringParse,
                    errorMask: errorMask))
                {
                    item.Clustering = ClusteringParse;
                }
                else
                {
                    item.UnsetClustering();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MinSlope);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte MinSlopeParse,
                    errorMask: errorMask))
                {
                    item.MinSlope = MinSlopeParse;
                }
                else
                {
                    item.UnsetMinSlope();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MaxSlope);
                if (Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Byte MaxSlopeParse,
                    errorMask: errorMask))
                {
                    item.MaxSlope = MaxSlopeParse;
                }
                else
                {
                    item.UnsetMaxSlope();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Flags);
                if (EnumBinaryTranslation<RegionDataObject.Flag>.Instance.Parse(
                    frame: frame.SpawnWithLength(1),
                    item: out RegionDataObject.Flag FlagsParse,
                    errorMask: errorMask))
                {
                    item.Flags = FlagsParse;
                }
                else
                {
                    item.UnsetFlags();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.RadiusWrtPercent);
                if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out UInt16 RadiusWrtPercentParse,
                    errorMask: errorMask))
                {
                    item.RadiusWrtPercent = RadiusWrtPercentParse;
                }
                else
                {
                    item.UnsetRadiusWrtPercent();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Radius);
                if (Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out UInt16 RadiusParse,
                    errorMask: errorMask))
                {
                    item.Radius = RadiusParse;
                }
                else
                {
                    item.UnsetRadius();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MinHeight);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single MinHeightParse,
                    errorMask: errorMask))
                {
                    item.MinHeight = MinHeightParse;
                }
                else
                {
                    item.UnsetMinHeight();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.MaxHeight);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single MaxHeightParse,
                    errorMask: errorMask))
                {
                    item.MaxHeight = MaxHeightParse;
                }
                else
                {
                    item.UnsetMaxHeight();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Sink);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single SinkParse,
                    errorMask: errorMask))
                {
                    item.Sink = SinkParse;
                }
                else
                {
                    item.UnsetSink();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.SinkVariance);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single SinkVarianceParse,
                    errorMask: errorMask))
                {
                    item.SinkVariance = SinkVarianceParse;
                }
                else
                {
                    item.UnsetSinkVariance();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.SizeVariance);
                if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out Single SizeVarianceParse,
                    errorMask: errorMask))
                {
                    item.SizeVariance = SizeVarianceParse;
                }
                else
                {
                    item.UnsetSizeVariance();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.AngleVariance);
                if (Mutagen.Bethesda.Binary.P3UInt16BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out P3UInt16 AngleVarianceParse,
                    errorMask: errorMask))
                {
                    item.AngleVariance = AngleVarianceParse;
                }
                else
                {
                    item.UnsetAngleVariance();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)RegionDataObject_FieldIndex.Unknow2n);
                if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                    frame: frame.SpawnWithLength(6),
                    item: out Byte[] Unknow2nParse,
                    errorMask: errorMask))
                {
                    item.Unknow2n = Unknow2nParse;
                }
                else
                {
                    item.UnsetUnknow2n();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public RegionDataObject Copy(
            RegionDataObject_CopyMask copyMask = null,
            IRegionDataObjectGetter def = null)
        {
            return RegionDataObject.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionDataObject Copy(
            IRegionDataObject item,
            RegionDataObject_CopyMask copyMask = null,
            IRegionDataObjectGetter def = null)
        {
            RegionDataObject ret;
            if (item.GetType().Equals(typeof(RegionDataObject)))
            {
                ret = new RegionDataObject();
            }
            else
            {
                ret = (RegionDataObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionDataObject Copy_ToLoqui(
            IRegionDataObjectGetter item,
            RegionDataObject_CopyMask copyMask = null,
            IRegionDataObjectGetter def = null)
        {
            RegionDataObject ret;
            if (item.GetType().Equals(typeof(RegionDataObject)))
            {
                ret = new RegionDataObject() as RegionDataObject;
            }
            else
            {
                ret = (RegionDataObject)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRegionDataObjectGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataObjectGetter rhs,
            RegionDataObject_CopyMask copyMask,
            IRegionDataObjectGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataObjectGetter rhs,
            out RegionDataObject_ErrorMask errorMask,
            RegionDataObject_CopyMask copyMask = null,
            IRegionDataObjectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionDataObjectGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataObject_CopyMask copyMask = null,
            IRegionDataObjectGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RegionDataObjectCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    this.Object_Property.Set(
                        (FormIDLink<MajorRecord>)obj,
                        cmds);
                    break;
                case RegionDataObject_FieldIndex.ParentIndex:
                    this.SetParentIndex(
                        (UInt16)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.Unknown1:
                    this.SetUnknown1(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.Density:
                    this.SetDensity(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.Clustering:
                    this.SetClustering(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    this.SetMinSlope(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    this.SetMaxSlope(
                        (Byte)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.Flags:
                    this.SetFlags(
                        (RegionDataObject.Flag)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    this.SetRadiusWrtPercent(
                        (UInt16)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    this.SetRadius(
                        (UInt16)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    this.SetMinHeight(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    this.SetMaxHeight(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    this.SetSink(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    this.SetSinkVariance(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    this.SetSizeVariance(
                        (Single)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.AngleVariance:
                    this.SetAngleVariance(
                        (P3UInt16)obj,
                        cmds: cmds);
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    this.SetUnknow2n(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionDataObjectCommon.Clear(this, cmds);
        }


        public static RegionDataObject Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionDataObject();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionDataObject(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RegionDataObject(RegionDataObject obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionDataObject_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    obj.Object_Property.Set(
                        (FormIDLink<MajorRecord>)pair.Value,
                        null);
                    break;
                case RegionDataObject_FieldIndex.ParentIndex:
                    obj.SetParentIndex(
                        (UInt16)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.Unknown1:
                    obj.SetUnknown1(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.Density:
                    obj.SetDensity(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.Clustering:
                    obj.SetClustering(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    obj.SetMinSlope(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    obj.SetMaxSlope(
                        (Byte)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.Flags:
                    obj.SetFlags(
                        (RegionDataObject.Flag)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    obj.SetRadiusWrtPercent(
                        (UInt16)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    obj.SetRadius(
                        (UInt16)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    obj.SetMinHeight(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    obj.SetMaxHeight(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    obj.SetSink(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    obj.SetSinkVariance(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    obj.SetSizeVariance(
                        (Single)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.AngleVariance:
                    obj.SetAngleVariance(
                        (P3UInt16)pair.Value,
                        cmds: null);
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    obj.SetUnknow2n(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RegionDataObject obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionDataObject : IRegionDataObjectGetter, ILoquiClass<IRegionDataObject, IRegionDataObjectGetter>, ILoquiClass<RegionDataObject, IRegionDataObjectGetter>
    {
        new MajorRecord Object { get; set; }
        new UInt16 ParentIndex { get; set; }
        new INotifyingItem<UInt16> ParentIndex_Property { get; }

        new Byte[] Unknown1 { get; set; }
        new INotifyingItem<Byte[]> Unknown1_Property { get; }

        new Single Density { get; set; }
        new INotifyingItem<Single> Density_Property { get; }

        new Byte Clustering { get; set; }
        new INotifyingItem<Byte> Clustering_Property { get; }

        new Byte MinSlope { get; set; }
        new INotifyingItem<Byte> MinSlope_Property { get; }

        new Byte MaxSlope { get; set; }
        new INotifyingItem<Byte> MaxSlope_Property { get; }

        new RegionDataObject.Flag Flags { get; set; }
        new INotifyingItem<RegionDataObject.Flag> Flags_Property { get; }

        new UInt16 RadiusWrtPercent { get; set; }
        new INotifyingItem<UInt16> RadiusWrtPercent_Property { get; }

        new UInt16 Radius { get; set; }
        new INotifyingItem<UInt16> Radius_Property { get; }

        new Single MinHeight { get; set; }
        new INotifyingItem<Single> MinHeight_Property { get; }

        new Single MaxHeight { get; set; }
        new INotifyingItem<Single> MaxHeight_Property { get; }

        new Single Sink { get; set; }
        new INotifyingItem<Single> Sink_Property { get; }

        new Single SinkVariance { get; set; }
        new INotifyingItem<Single> SinkVariance_Property { get; }

        new Single SizeVariance { get; set; }
        new INotifyingItem<Single> SizeVariance_Property { get; }

        new P3UInt16 AngleVariance { get; set; }
        new INotifyingItem<P3UInt16> AngleVariance_Property { get; }

        new Byte[] Unknow2n { get; set; }
        new INotifyingItem<Byte[]> Unknow2n_Property { get; }

    }

    public partial interface IRegionDataObjectGetter : ILoquiObject
    {
        #region Object
        MajorRecord Object { get; }
        FormIDLink<MajorRecord> Object_Property { get; }

        #endregion
        #region ParentIndex
        UInt16 ParentIndex { get; }
        INotifyingItemGetter<UInt16> ParentIndex_Property { get; }

        #endregion
        #region Unknown1
        Byte[] Unknown1 { get; }
        INotifyingItemGetter<Byte[]> Unknown1_Property { get; }

        #endregion
        #region Density
        Single Density { get; }
        INotifyingItemGetter<Single> Density_Property { get; }

        #endregion
        #region Clustering
        Byte Clustering { get; }
        INotifyingItemGetter<Byte> Clustering_Property { get; }

        #endregion
        #region MinSlope
        Byte MinSlope { get; }
        INotifyingItemGetter<Byte> MinSlope_Property { get; }

        #endregion
        #region MaxSlope
        Byte MaxSlope { get; }
        INotifyingItemGetter<Byte> MaxSlope_Property { get; }

        #endregion
        #region Flags
        RegionDataObject.Flag Flags { get; }
        INotifyingItemGetter<RegionDataObject.Flag> Flags_Property { get; }

        #endregion
        #region RadiusWrtPercent
        UInt16 RadiusWrtPercent { get; }
        INotifyingItemGetter<UInt16> RadiusWrtPercent_Property { get; }

        #endregion
        #region Radius
        UInt16 Radius { get; }
        INotifyingItemGetter<UInt16> Radius_Property { get; }

        #endregion
        #region MinHeight
        Single MinHeight { get; }
        INotifyingItemGetter<Single> MinHeight_Property { get; }

        #endregion
        #region MaxHeight
        Single MaxHeight { get; }
        INotifyingItemGetter<Single> MaxHeight_Property { get; }

        #endregion
        #region Sink
        Single Sink { get; }
        INotifyingItemGetter<Single> Sink_Property { get; }

        #endregion
        #region SinkVariance
        Single SinkVariance { get; }
        INotifyingItemGetter<Single> SinkVariance_Property { get; }

        #endregion
        #region SizeVariance
        Single SizeVariance { get; }
        INotifyingItemGetter<Single> SizeVariance_Property { get; }

        #endregion
        #region AngleVariance
        P3UInt16 AngleVariance { get; }
        INotifyingItemGetter<P3UInt16> AngleVariance_Property { get; }

        #endregion
        #region Unknow2n
        Byte[] Unknow2n { get; }
        INotifyingItemGetter<Byte[]> Unknow2n_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataObject_FieldIndex
    {
        Object = 0,
        ParentIndex = 1,
        Unknown1 = 2,
        Density = 3,
        Clustering = 4,
        MinSlope = 5,
        MaxSlope = 6,
        Flags = 7,
        RadiusWrtPercent = 8,
        Radius = 9,
        MinHeight = 10,
        MaxHeight = 11,
        Sink = 12,
        SinkVariance = 13,
        SizeVariance = 14,
        AngleVariance = 15,
        Unknow2n = 16,
    }
    #endregion

    #region Registration
    public class RegionDataObject_Registration : ILoquiRegistration
    {
        public static readonly RegionDataObject_Registration Instance = new RegionDataObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 117,
            version: 0);

        public const string GUID = "e814f192-a945-4518-bfd0-00e67eae8105";

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(RegionDataObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataObject_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataObject);

        public static readonly Type GetterType = typeof(IRegionDataObjectGetter);

        public static readonly Type SetterType = typeof(IRegionDataObject);

        public static readonly Type CommonType = typeof(RegionDataObjectCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataObject";

        public const string Name = "RegionDataObject";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECT":
                    return (ushort)RegionDataObject_FieldIndex.Object;
                case "PARENTINDEX":
                    return (ushort)RegionDataObject_FieldIndex.ParentIndex;
                case "UNKNOWN1":
                    return (ushort)RegionDataObject_FieldIndex.Unknown1;
                case "DENSITY":
                    return (ushort)RegionDataObject_FieldIndex.Density;
                case "CLUSTERING":
                    return (ushort)RegionDataObject_FieldIndex.Clustering;
                case "MINSLOPE":
                    return (ushort)RegionDataObject_FieldIndex.MinSlope;
                case "MAXSLOPE":
                    return (ushort)RegionDataObject_FieldIndex.MaxSlope;
                case "FLAGS":
                    return (ushort)RegionDataObject_FieldIndex.Flags;
                case "RADIUSWRTPERCENT":
                    return (ushort)RegionDataObject_FieldIndex.RadiusWrtPercent;
                case "RADIUS":
                    return (ushort)RegionDataObject_FieldIndex.Radius;
                case "MINHEIGHT":
                    return (ushort)RegionDataObject_FieldIndex.MinHeight;
                case "MAXHEIGHT":
                    return (ushort)RegionDataObject_FieldIndex.MaxHeight;
                case "SINK":
                    return (ushort)RegionDataObject_FieldIndex.Sink;
                case "SINKVARIANCE":
                    return (ushort)RegionDataObject_FieldIndex.SinkVariance;
                case "SIZEVARIANCE":
                    return (ushort)RegionDataObject_FieldIndex.SizeVariance;
                case "ANGLEVARIANCE":
                    return (ushort)RegionDataObject_FieldIndex.AngleVariance;
                case "UNKNOW2N":
                    return (ushort)RegionDataObject_FieldIndex.Unknow2n;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    return "Object";
                case RegionDataObject_FieldIndex.ParentIndex:
                    return "ParentIndex";
                case RegionDataObject_FieldIndex.Unknown1:
                    return "Unknown1";
                case RegionDataObject_FieldIndex.Density:
                    return "Density";
                case RegionDataObject_FieldIndex.Clustering:
                    return "Clustering";
                case RegionDataObject_FieldIndex.MinSlope:
                    return "MinSlope";
                case RegionDataObject_FieldIndex.MaxSlope:
                    return "MaxSlope";
                case RegionDataObject_FieldIndex.Flags:
                    return "Flags";
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    return "RadiusWrtPercent";
                case RegionDataObject_FieldIndex.Radius:
                    return "Radius";
                case RegionDataObject_FieldIndex.MinHeight:
                    return "MinHeight";
                case RegionDataObject_FieldIndex.MaxHeight:
                    return "MaxHeight";
                case RegionDataObject_FieldIndex.Sink:
                    return "Sink";
                case RegionDataObject_FieldIndex.SinkVariance:
                    return "SinkVariance";
                case RegionDataObject_FieldIndex.SizeVariance:
                    return "SizeVariance";
                case RegionDataObject_FieldIndex.AngleVariance:
                    return "AngleVariance";
                case RegionDataObject_FieldIndex.Unknow2n:
                    return "Unknow2n";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    return typeof(FormIDLink<MajorRecord>);
                case RegionDataObject_FieldIndex.ParentIndex:
                    return typeof(UInt16);
                case RegionDataObject_FieldIndex.Unknown1:
                    return typeof(Byte[]);
                case RegionDataObject_FieldIndex.Density:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.Clustering:
                    return typeof(Byte);
                case RegionDataObject_FieldIndex.MinSlope:
                    return typeof(Byte);
                case RegionDataObject_FieldIndex.MaxSlope:
                    return typeof(Byte);
                case RegionDataObject_FieldIndex.Flags:
                    return typeof(RegionDataObject.Flag);
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    return typeof(UInt16);
                case RegionDataObject_FieldIndex.Radius:
                    return typeof(UInt16);
                case RegionDataObject_FieldIndex.MinHeight:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.MaxHeight:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.Sink:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.SinkVariance:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.SizeVariance:
                    return typeof(Single);
                case RegionDataObject_FieldIndex.AngleVariance:
                    return typeof(P3UInt16);
                case RegionDataObject_FieldIndex.Unknow2n:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 17;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionDataObjectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionDataObject item,
            IRegionDataObjectGetter rhs,
            IRegionDataObjectGetter def,
            ErrorMaskBuilder errorMask,
            RegionDataObject_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Object ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.Object);
                try
                {
                    item.Object_Property.Set(
                        value: rhs.Object,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.ParentIndex ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.ParentIndex);
                try
                {
                    item.ParentIndex_Property.Set(
                        value: rhs.ParentIndex,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Unknown1 ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.Unknown1);
                try
                {
                    item.Unknown1_Property.Set(
                        value: rhs.Unknown1,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Density ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.Density);
                try
                {
                    item.Density_Property.Set(
                        value: rhs.Density,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Clustering ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.Clustering);
                try
                {
                    item.Clustering_Property.Set(
                        value: rhs.Clustering,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MinSlope ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.MinSlope);
                try
                {
                    item.MinSlope_Property.Set(
                        value: rhs.MinSlope,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MaxSlope ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.MaxSlope);
                try
                {
                    item.MaxSlope_Property.Set(
                        value: rhs.MaxSlope,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.RadiusWrtPercent ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.RadiusWrtPercent);
                try
                {
                    item.RadiusWrtPercent_Property.Set(
                        value: rhs.RadiusWrtPercent,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Radius ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.Radius);
                try
                {
                    item.Radius_Property.Set(
                        value: rhs.Radius,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MinHeight ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.MinHeight);
                try
                {
                    item.MinHeight_Property.Set(
                        value: rhs.MinHeight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.MaxHeight ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.MaxHeight);
                try
                {
                    item.MaxHeight_Property.Set(
                        value: rhs.MaxHeight,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Sink ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.Sink);
                try
                {
                    item.Sink_Property.Set(
                        value: rhs.Sink,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.SinkVariance ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.SinkVariance);
                try
                {
                    item.SinkVariance_Property.Set(
                        value: rhs.SinkVariance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.SizeVariance ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.SizeVariance);
                try
                {
                    item.SizeVariance_Property.Set(
                        value: rhs.SizeVariance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.AngleVariance ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.AngleVariance);
                try
                {
                    item.AngleVariance_Property.Set(
                        value: rhs.AngleVariance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Unknow2n ?? true)
            {
                errorMask.PushIndex((int)RegionDataObject_FieldIndex.Unknow2n);
                try
                {
                    item.Unknow2n_Property.Set(
                        value: rhs.Unknow2n,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRegionDataObject obj,
            NotifyingFireParameters cmds = null)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRegionDataObject obj,
            NotifyingUnsetParameters cmds = null)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    obj.Object = default(FormIDLink<MajorRecord>);
                    break;
                case RegionDataObject_FieldIndex.ParentIndex:
                    obj.ParentIndex = default(UInt16);
                    break;
                case RegionDataObject_FieldIndex.Unknown1:
                    obj.Unknown1 = default(Byte[]);
                    break;
                case RegionDataObject_FieldIndex.Density:
                    obj.Density = default(Single);
                    break;
                case RegionDataObject_FieldIndex.Clustering:
                    obj.Clustering = default(Byte);
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    obj.MinSlope = default(Byte);
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    obj.MaxSlope = default(Byte);
                    break;
                case RegionDataObject_FieldIndex.Flags:
                    obj.Flags = default(RegionDataObject.Flag);
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    obj.RadiusWrtPercent = default(UInt16);
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    obj.Radius = default(UInt16);
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    obj.MinHeight = default(Single);
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    obj.MaxHeight = default(Single);
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    obj.Sink = default(Single);
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    obj.SinkVariance = default(Single);
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    obj.SizeVariance = default(Single);
                    break;
                case RegionDataObject_FieldIndex.AngleVariance:
                    obj.AngleVariance = default(P3UInt16);
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    obj.Unknow2n = default(Byte[]);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRegionDataObject obj)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                case RegionDataObject_FieldIndex.ParentIndex:
                case RegionDataObject_FieldIndex.Unknown1:
                case RegionDataObject_FieldIndex.Density:
                case RegionDataObject_FieldIndex.Clustering:
                case RegionDataObject_FieldIndex.MinSlope:
                case RegionDataObject_FieldIndex.MaxSlope:
                case RegionDataObject_FieldIndex.Flags:
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                case RegionDataObject_FieldIndex.Radius:
                case RegionDataObject_FieldIndex.MinHeight:
                case RegionDataObject_FieldIndex.MaxHeight:
                case RegionDataObject_FieldIndex.Sink:
                case RegionDataObject_FieldIndex.SinkVariance:
                case RegionDataObject_FieldIndex.SizeVariance:
                case RegionDataObject_FieldIndex.AngleVariance:
                case RegionDataObject_FieldIndex.Unknow2n:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRegionDataObjectGetter obj)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    return obj.Object;
                case RegionDataObject_FieldIndex.ParentIndex:
                    return obj.ParentIndex;
                case RegionDataObject_FieldIndex.Unknown1:
                    return obj.Unknown1;
                case RegionDataObject_FieldIndex.Density:
                    return obj.Density;
                case RegionDataObject_FieldIndex.Clustering:
                    return obj.Clustering;
                case RegionDataObject_FieldIndex.MinSlope:
                    return obj.MinSlope;
                case RegionDataObject_FieldIndex.MaxSlope:
                    return obj.MaxSlope;
                case RegionDataObject_FieldIndex.Flags:
                    return obj.Flags;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    return obj.RadiusWrtPercent;
                case RegionDataObject_FieldIndex.Radius:
                    return obj.Radius;
                case RegionDataObject_FieldIndex.MinHeight:
                    return obj.MinHeight;
                case RegionDataObject_FieldIndex.MaxHeight:
                    return obj.MaxHeight;
                case RegionDataObject_FieldIndex.Sink:
                    return obj.Sink;
                case RegionDataObject_FieldIndex.SinkVariance:
                    return obj.SinkVariance;
                case RegionDataObject_FieldIndex.SizeVariance:
                    return obj.SizeVariance;
                case RegionDataObject_FieldIndex.AngleVariance:
                    return obj.AngleVariance;
                case RegionDataObject_FieldIndex.Unknow2n:
                    return obj.Unknow2n;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRegionDataObject item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Object = default(FormIDLink<MajorRecord>);
            item.ParentIndex = default(UInt16);
            item.Unknown1 = default(Byte[]);
            item.Density = default(Single);
            item.Clustering = default(Byte);
            item.MinSlope = default(Byte);
            item.MaxSlope = default(Byte);
            item.Flags = default(RegionDataObject.Flag);
            item.RadiusWrtPercent = default(UInt16);
            item.Radius = default(UInt16);
            item.MinHeight = default(Single);
            item.MaxHeight = default(Single);
            item.Sink = default(Single);
            item.SinkVariance = default(Single);
            item.SizeVariance = default(Single);
            item.AngleVariance = default(P3UInt16);
            item.Unknow2n = default(Byte[]);
        }

        public static RegionDataObject_Mask<bool> GetEqualsMask(
            this IRegionDataObjectGetter item,
            IRegionDataObjectGetter rhs)
        {
            var ret = new RegionDataObject_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionDataObjectGetter item,
            IRegionDataObjectGetter rhs,
            RegionDataObject_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Object = item.Object == rhs.Object;
            ret.ParentIndex = item.ParentIndex == rhs.ParentIndex;
            ret.Unknown1 = item.Unknown1.EqualsFast(rhs.Unknown1);
            ret.Density = item.Density == rhs.Density;
            ret.Clustering = item.Clustering == rhs.Clustering;
            ret.MinSlope = item.MinSlope == rhs.MinSlope;
            ret.MaxSlope = item.MaxSlope == rhs.MaxSlope;
            ret.Flags = item.Flags == rhs.Flags;
            ret.RadiusWrtPercent = item.RadiusWrtPercent == rhs.RadiusWrtPercent;
            ret.Radius = item.Radius == rhs.Radius;
            ret.MinHeight = item.MinHeight == rhs.MinHeight;
            ret.MaxHeight = item.MaxHeight == rhs.MaxHeight;
            ret.Sink = item.Sink == rhs.Sink;
            ret.SinkVariance = item.SinkVariance == rhs.SinkVariance;
            ret.SizeVariance = item.SizeVariance == rhs.SizeVariance;
            ret.AngleVariance = item.AngleVariance == rhs.AngleVariance;
            ret.Unknow2n = item.Unknow2n.EqualsFast(rhs.Unknow2n);
        }

        public static string ToString(
            this IRegionDataObjectGetter item,
            string name = null,
            RegionDataObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionDataObjectGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataObject_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionDataObject)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionDataObject)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Object ?? true)
                {
                    fg.AppendLine($"Object => {item.Object_Property}");
                }
                if (printMask?.ParentIndex ?? true)
                {
                    fg.AppendLine($"ParentIndex => {item.ParentIndex}");
                }
                if (printMask?.Unknown1 ?? true)
                {
                    fg.AppendLine($"Unknown1 => {item.Unknown1}");
                }
                if (printMask?.Density ?? true)
                {
                    fg.AppendLine($"Density => {item.Density}");
                }
                if (printMask?.Clustering ?? true)
                {
                    fg.AppendLine($"Clustering => {item.Clustering}");
                }
                if (printMask?.MinSlope ?? true)
                {
                    fg.AppendLine($"MinSlope => {item.MinSlope}");
                }
                if (printMask?.MaxSlope ?? true)
                {
                    fg.AppendLine($"MaxSlope => {item.MaxSlope}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.RadiusWrtPercent ?? true)
                {
                    fg.AppendLine($"RadiusWrtPercent => {item.RadiusWrtPercent}");
                }
                if (printMask?.Radius ?? true)
                {
                    fg.AppendLine($"Radius => {item.Radius}");
                }
                if (printMask?.MinHeight ?? true)
                {
                    fg.AppendLine($"MinHeight => {item.MinHeight}");
                }
                if (printMask?.MaxHeight ?? true)
                {
                    fg.AppendLine($"MaxHeight => {item.MaxHeight}");
                }
                if (printMask?.Sink ?? true)
                {
                    fg.AppendLine($"Sink => {item.Sink}");
                }
                if (printMask?.SinkVariance ?? true)
                {
                    fg.AppendLine($"SinkVariance => {item.SinkVariance}");
                }
                if (printMask?.SizeVariance ?? true)
                {
                    fg.AppendLine($"SizeVariance => {item.SizeVariance}");
                }
                if (printMask?.AngleVariance ?? true)
                {
                    fg.AppendLine($"AngleVariance => {item.AngleVariance}");
                }
                if (printMask?.Unknow2n ?? true)
                {
                    fg.AppendLine($"Unknow2n => {item.Unknow2n}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionDataObjectGetter item,
            RegionDataObject_Mask<bool?> checkMask)
        {
            return true;
        }

        public static RegionDataObject_Mask<bool> GetHasBeenSetMask(IRegionDataObjectGetter item)
        {
            var ret = new RegionDataObject_Mask<bool>();
            ret.Object = true;
            ret.ParentIndex = true;
            ret.Unknown1 = true;
            ret.Density = true;
            ret.Clustering = true;
            ret.MinSlope = true;
            ret.MaxSlope = true;
            ret.Flags = true;
            ret.RadiusWrtPercent = true;
            ret.Radius = true;
            ret.MinHeight = true;
            ret.MaxHeight = true;
            ret.Sink = true;
            ret.SinkVariance = true;
            ret.SizeVariance = true;
            ret.AngleVariance = true;
            ret.Unknow2n = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IRegionDataObjectGetter item,
            bool doMasks,
            out RegionDataObject_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IRegionDataObjectGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataObject");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataObject");
            }
            FormIDXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Object),
                item: item.Object?.FormID,
                fieldIndex: (int)RegionDataObject_FieldIndex.Object,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.ParentIndex),
                item: item.ParentIndex_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.ParentIndex,
                errorMask: errorMask);
            ByteArrayXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Unknown1),
                item: item.Unknown1_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Unknown1,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Density),
                item: item.Density_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Density,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Clustering),
                item: item.Clustering_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Clustering,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.MinSlope),
                item: item.MinSlope_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.MinSlope,
                errorMask: errorMask);
            ByteXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.MaxSlope),
                item: item.MaxSlope_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.MaxSlope,
                errorMask: errorMask);
            EnumXmlTranslation<RegionDataObject.Flag>.Instance.Write(
                node: elem,
                name: nameof(item.Flags),
                item: item.Flags_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Flags,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.RadiusWrtPercent),
                item: item.RadiusWrtPercent_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.RadiusWrtPercent,
                errorMask: errorMask);
            UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Radius),
                item: item.Radius_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Radius,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.MinHeight),
                item: item.MinHeight_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.MinHeight,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.MaxHeight),
                item: item.MaxHeight_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.MaxHeight,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Sink),
                item: item.Sink_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Sink,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.SinkVariance),
                item: item.SinkVariance_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.SinkVariance,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.SizeVariance),
                item: item.SizeVariance_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.SizeVariance,
                errorMask: errorMask);
            P3UInt16XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.AngleVariance),
                item: item.AngleVariance_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.AngleVariance,
                errorMask: errorMask);
            ByteArrayXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Unknow2n),
                item: item.Unknow2n_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Unknow2n,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataObject item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionDataObject_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObject_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataObject item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_Embedded(
            RegionDataObject item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Object_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Object,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ParentIndex_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.ParentIndex,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown1_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Unknown1,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Density_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Density,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Clustering_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Clustering,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MinSlope_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.MinSlope,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaxSlope_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.MaxSlope,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionDataObject.Flag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: 1,
                fieldIndex: (int)RegionDataObject_FieldIndex.Flags,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RadiusWrtPercent_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.RadiusWrtPercent,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Radius_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Radius,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MinHeight_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.MinHeight,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaxHeight_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.MaxHeight,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Sink_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Sink,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SinkVariance_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.SinkVariance,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SizeVariance_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.SizeVariance,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.P3UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AngleVariance_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.AngleVariance,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknow2n_Property,
                fieldIndex: (int)RegionDataObject_FieldIndex.Unknow2n,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RegionDataObject_Mask<T> : IMask<T>, IEquatable<RegionDataObject_Mask<T>>
    {
        #region Ctors
        public RegionDataObject_Mask()
        {
        }

        public RegionDataObject_Mask(T initialValue)
        {
            this.Object = initialValue;
            this.ParentIndex = initialValue;
            this.Unknown1 = initialValue;
            this.Density = initialValue;
            this.Clustering = initialValue;
            this.MinSlope = initialValue;
            this.MaxSlope = initialValue;
            this.Flags = initialValue;
            this.RadiusWrtPercent = initialValue;
            this.Radius = initialValue;
            this.MinHeight = initialValue;
            this.MaxHeight = initialValue;
            this.Sink = initialValue;
            this.SinkVariance = initialValue;
            this.SizeVariance = initialValue;
            this.AngleVariance = initialValue;
            this.Unknow2n = initialValue;
        }
        #endregion

        #region Members
        public T Object;
        public T ParentIndex;
        public T Unknown1;
        public T Density;
        public T Clustering;
        public T MinSlope;
        public T MaxSlope;
        public T Flags;
        public T RadiusWrtPercent;
        public T Radius;
        public T MinHeight;
        public T MaxHeight;
        public T Sink;
        public T SinkVariance;
        public T SizeVariance;
        public T AngleVariance;
        public T Unknow2n;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataObject_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataObject_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Object, rhs.Object)) return false;
            if (!object.Equals(this.ParentIndex, rhs.ParentIndex)) return false;
            if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
            if (!object.Equals(this.Density, rhs.Density)) return false;
            if (!object.Equals(this.Clustering, rhs.Clustering)) return false;
            if (!object.Equals(this.MinSlope, rhs.MinSlope)) return false;
            if (!object.Equals(this.MaxSlope, rhs.MaxSlope)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.RadiusWrtPercent, rhs.RadiusWrtPercent)) return false;
            if (!object.Equals(this.Radius, rhs.Radius)) return false;
            if (!object.Equals(this.MinHeight, rhs.MinHeight)) return false;
            if (!object.Equals(this.MaxHeight, rhs.MaxHeight)) return false;
            if (!object.Equals(this.Sink, rhs.Sink)) return false;
            if (!object.Equals(this.SinkVariance, rhs.SinkVariance)) return false;
            if (!object.Equals(this.SizeVariance, rhs.SizeVariance)) return false;
            if (!object.Equals(this.AngleVariance, rhs.AngleVariance)) return false;
            if (!object.Equals(this.Unknow2n, rhs.Unknow2n)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Object?.GetHashCode());
            ret = ret.CombineHashCode(this.ParentIndex?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown1?.GetHashCode());
            ret = ret.CombineHashCode(this.Density?.GetHashCode());
            ret = ret.CombineHashCode(this.Clustering?.GetHashCode());
            ret = ret.CombineHashCode(this.MinSlope?.GetHashCode());
            ret = ret.CombineHashCode(this.MaxSlope?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.RadiusWrtPercent?.GetHashCode());
            ret = ret.CombineHashCode(this.Radius?.GetHashCode());
            ret = ret.CombineHashCode(this.MinHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.MaxHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.Sink?.GetHashCode());
            ret = ret.CombineHashCode(this.SinkVariance?.GetHashCode());
            ret = ret.CombineHashCode(this.SizeVariance?.GetHashCode());
            ret = ret.CombineHashCode(this.AngleVariance?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknow2n?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Object)) return false;
            if (!eval(this.ParentIndex)) return false;
            if (!eval(this.Unknown1)) return false;
            if (!eval(this.Density)) return false;
            if (!eval(this.Clustering)) return false;
            if (!eval(this.MinSlope)) return false;
            if (!eval(this.MaxSlope)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.RadiusWrtPercent)) return false;
            if (!eval(this.Radius)) return false;
            if (!eval(this.MinHeight)) return false;
            if (!eval(this.MaxHeight)) return false;
            if (!eval(this.Sink)) return false;
            if (!eval(this.SinkVariance)) return false;
            if (!eval(this.SizeVariance)) return false;
            if (!eval(this.AngleVariance)) return false;
            if (!eval(this.Unknow2n)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RegionDataObject_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataObject_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataObject_Mask<R> obj, Func<T, R> eval)
        {
            obj.Object = eval(this.Object);
            obj.ParentIndex = eval(this.ParentIndex);
            obj.Unknown1 = eval(this.Unknown1);
            obj.Density = eval(this.Density);
            obj.Clustering = eval(this.Clustering);
            obj.MinSlope = eval(this.MinSlope);
            obj.MaxSlope = eval(this.MaxSlope);
            obj.Flags = eval(this.Flags);
            obj.RadiusWrtPercent = eval(this.RadiusWrtPercent);
            obj.Radius = eval(this.Radius);
            obj.MinHeight = eval(this.MinHeight);
            obj.MaxHeight = eval(this.MaxHeight);
            obj.Sink = eval(this.Sink);
            obj.SinkVariance = eval(this.SinkVariance);
            obj.SizeVariance = eval(this.SizeVariance);
            obj.AngleVariance = eval(this.AngleVariance);
            obj.Unknow2n = eval(this.Unknow2n);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataObject_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataObject_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Object ?? true)
                {
                    fg.AppendLine($"Object => {Object}");
                }
                if (printMask?.ParentIndex ?? true)
                {
                    fg.AppendLine($"ParentIndex => {ParentIndex}");
                }
                if (printMask?.Unknown1 ?? true)
                {
                    fg.AppendLine($"Unknown1 => {Unknown1}");
                }
                if (printMask?.Density ?? true)
                {
                    fg.AppendLine($"Density => {Density}");
                }
                if (printMask?.Clustering ?? true)
                {
                    fg.AppendLine($"Clustering => {Clustering}");
                }
                if (printMask?.MinSlope ?? true)
                {
                    fg.AppendLine($"MinSlope => {MinSlope}");
                }
                if (printMask?.MaxSlope ?? true)
                {
                    fg.AppendLine($"MaxSlope => {MaxSlope}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.RadiusWrtPercent ?? true)
                {
                    fg.AppendLine($"RadiusWrtPercent => {RadiusWrtPercent}");
                }
                if (printMask?.Radius ?? true)
                {
                    fg.AppendLine($"Radius => {Radius}");
                }
                if (printMask?.MinHeight ?? true)
                {
                    fg.AppendLine($"MinHeight => {MinHeight}");
                }
                if (printMask?.MaxHeight ?? true)
                {
                    fg.AppendLine($"MaxHeight => {MaxHeight}");
                }
                if (printMask?.Sink ?? true)
                {
                    fg.AppendLine($"Sink => {Sink}");
                }
                if (printMask?.SinkVariance ?? true)
                {
                    fg.AppendLine($"SinkVariance => {SinkVariance}");
                }
                if (printMask?.SizeVariance ?? true)
                {
                    fg.AppendLine($"SizeVariance => {SizeVariance}");
                }
                if (printMask?.AngleVariance ?? true)
                {
                    fg.AppendLine($"AngleVariance => {AngleVariance}");
                }
                if (printMask?.Unknow2n ?? true)
                {
                    fg.AppendLine($"Unknow2n => {Unknow2n}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataObject_ErrorMask : IErrorMask, IErrorMask<RegionDataObject_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Object;
        public Exception ParentIndex;
        public Exception Unknown1;
        public Exception Density;
        public Exception Clustering;
        public Exception MinSlope;
        public Exception MaxSlope;
        public Exception Flags;
        public Exception RadiusWrtPercent;
        public Exception Radius;
        public Exception MinHeight;
        public Exception MaxHeight;
        public Exception Sink;
        public Exception SinkVariance;
        public Exception SizeVariance;
        public Exception AngleVariance;
        public Exception Unknow2n;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    return Object;
                case RegionDataObject_FieldIndex.ParentIndex:
                    return ParentIndex;
                case RegionDataObject_FieldIndex.Unknown1:
                    return Unknown1;
                case RegionDataObject_FieldIndex.Density:
                    return Density;
                case RegionDataObject_FieldIndex.Clustering:
                    return Clustering;
                case RegionDataObject_FieldIndex.MinSlope:
                    return MinSlope;
                case RegionDataObject_FieldIndex.MaxSlope:
                    return MaxSlope;
                case RegionDataObject_FieldIndex.Flags:
                    return Flags;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    return RadiusWrtPercent;
                case RegionDataObject_FieldIndex.Radius:
                    return Radius;
                case RegionDataObject_FieldIndex.MinHeight:
                    return MinHeight;
                case RegionDataObject_FieldIndex.MaxHeight:
                    return MaxHeight;
                case RegionDataObject_FieldIndex.Sink:
                    return Sink;
                case RegionDataObject_FieldIndex.SinkVariance:
                    return SinkVariance;
                case RegionDataObject_FieldIndex.SizeVariance:
                    return SizeVariance;
                case RegionDataObject_FieldIndex.AngleVariance:
                    return AngleVariance;
                case RegionDataObject_FieldIndex.Unknow2n:
                    return Unknow2n;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    this.Object = ex;
                    break;
                case RegionDataObject_FieldIndex.ParentIndex:
                    this.ParentIndex = ex;
                    break;
                case RegionDataObject_FieldIndex.Unknown1:
                    this.Unknown1 = ex;
                    break;
                case RegionDataObject_FieldIndex.Density:
                    this.Density = ex;
                    break;
                case RegionDataObject_FieldIndex.Clustering:
                    this.Clustering = ex;
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    this.MinSlope = ex;
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    this.MaxSlope = ex;
                    break;
                case RegionDataObject_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    this.RadiusWrtPercent = ex;
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    this.Radius = ex;
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    this.MinHeight = ex;
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    this.MaxHeight = ex;
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    this.Sink = ex;
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    this.SinkVariance = ex;
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    this.SizeVariance = ex;
                    break;
                case RegionDataObject_FieldIndex.AngleVariance:
                    this.AngleVariance = ex;
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    this.Unknow2n = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RegionDataObject_FieldIndex enu = (RegionDataObject_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObject_FieldIndex.Object:
                    this.Object = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.ParentIndex:
                    this.ParentIndex = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Unknown1:
                    this.Unknown1 = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Density:
                    this.Density = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Clustering:
                    this.Clustering = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.MinSlope:
                    this.MinSlope = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.MaxSlope:
                    this.MaxSlope = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.RadiusWrtPercent:
                    this.RadiusWrtPercent = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Radius:
                    this.Radius = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.MinHeight:
                    this.MinHeight = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.MaxHeight:
                    this.MaxHeight = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Sink:
                    this.Sink = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.SinkVariance:
                    this.SinkVariance = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.SizeVariance:
                    this.SizeVariance = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.AngleVariance:
                    this.AngleVariance = (Exception)obj;
                    break;
                case RegionDataObject_FieldIndex.Unknow2n:
                    this.Unknow2n = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Object != null) return true;
            if (ParentIndex != null) return true;
            if (Unknown1 != null) return true;
            if (Density != null) return true;
            if (Clustering != null) return true;
            if (MinSlope != null) return true;
            if (MaxSlope != null) return true;
            if (Flags != null) return true;
            if (RadiusWrtPercent != null) return true;
            if (Radius != null) return true;
            if (MinHeight != null) return true;
            if (MaxHeight != null) return true;
            if (Sink != null) return true;
            if (SinkVariance != null) return true;
            if (SizeVariance != null) return true;
            if (AngleVariance != null) return true;
            if (Unknow2n != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataObject_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Object => {Object}");
            fg.AppendLine($"ParentIndex => {ParentIndex}");
            fg.AppendLine($"Unknown1 => {Unknown1}");
            fg.AppendLine($"Density => {Density}");
            fg.AppendLine($"Clustering => {Clustering}");
            fg.AppendLine($"MinSlope => {MinSlope}");
            fg.AppendLine($"MaxSlope => {MaxSlope}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"RadiusWrtPercent => {RadiusWrtPercent}");
            fg.AppendLine($"Radius => {Radius}");
            fg.AppendLine($"MinHeight => {MinHeight}");
            fg.AppendLine($"MaxHeight => {MaxHeight}");
            fg.AppendLine($"Sink => {Sink}");
            fg.AppendLine($"SinkVariance => {SinkVariance}");
            fg.AppendLine($"SizeVariance => {SizeVariance}");
            fg.AppendLine($"AngleVariance => {AngleVariance}");
            fg.AppendLine($"Unknow2n => {Unknow2n}");
        }
        #endregion

        #region Combine
        public RegionDataObject_ErrorMask Combine(RegionDataObject_ErrorMask rhs)
        {
            var ret = new RegionDataObject_ErrorMask();
            ret.Object = this.Object.Combine(rhs.Object);
            ret.ParentIndex = this.ParentIndex.Combine(rhs.ParentIndex);
            ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
            ret.Density = this.Density.Combine(rhs.Density);
            ret.Clustering = this.Clustering.Combine(rhs.Clustering);
            ret.MinSlope = this.MinSlope.Combine(rhs.MinSlope);
            ret.MaxSlope = this.MaxSlope.Combine(rhs.MaxSlope);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.RadiusWrtPercent = this.RadiusWrtPercent.Combine(rhs.RadiusWrtPercent);
            ret.Radius = this.Radius.Combine(rhs.Radius);
            ret.MinHeight = this.MinHeight.Combine(rhs.MinHeight);
            ret.MaxHeight = this.MaxHeight.Combine(rhs.MaxHeight);
            ret.Sink = this.Sink.Combine(rhs.Sink);
            ret.SinkVariance = this.SinkVariance.Combine(rhs.SinkVariance);
            ret.SizeVariance = this.SizeVariance.Combine(rhs.SizeVariance);
            ret.AngleVariance = this.AngleVariance.Combine(rhs.AngleVariance);
            ret.Unknow2n = this.Unknow2n.Combine(rhs.Unknow2n);
            return ret;
        }
        public static RegionDataObject_ErrorMask Combine(RegionDataObject_ErrorMask lhs, RegionDataObject_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataObject_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataObject_ErrorMask();
        }
        #endregion

    }
    public class RegionDataObject_CopyMask
    {
        #region Members
        public bool Object;
        public bool ParentIndex;
        public bool Unknown1;
        public bool Density;
        public bool Clustering;
        public bool MinSlope;
        public bool MaxSlope;
        public bool Flags;
        public bool RadiusWrtPercent;
        public bool Radius;
        public bool MinHeight;
        public bool MaxHeight;
        public bool Sink;
        public bool SinkVariance;
        public bool SizeVariance;
        public bool AngleVariance;
        public bool Unknow2n;
        #endregion

    }
    #endregion





    #endregion

}
