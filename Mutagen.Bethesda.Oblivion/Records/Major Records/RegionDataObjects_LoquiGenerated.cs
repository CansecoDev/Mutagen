/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataObjects : RegionData, IRegionDataObjects, ILoquiObject<RegionDataObjects>, ILoquiObjectSetter, IEquatable<RegionDataObjects>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataObjects_Registration.Instance;
        public new static RegionDataObjects_Registration Registration => RegionDataObjects_Registration.Instance;

        #region Ctor
        public RegionDataObjects()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Objects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<RegionDataObject> _Objects = new NotifyingList<RegionDataObject>();
        public INotifyingList<RegionDataObject> Objects => _Objects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RegionDataObject> ObjectsEnumerable
        {
            get => _Objects;
            set => _Objects.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<RegionDataObject> IRegionDataObjects.Objects => _Objects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<RegionDataObject> IRegionDataObjectsGetter.Objects => _Objects;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RegionDataObjectsCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RegionDataObjectsCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RegionDataObjectsCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RegionDataObjectsCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<RegionDataObjects>.GetEqualsMask(RegionDataObjects rhs) => RegionDataObjectsCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRegionDataObjectsGetter>.GetEqualsMask(IRegionDataObjectsGetter rhs) => RegionDataObjectsCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RegionDataObjectsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RegionDataObjects_Mask<bool> printMask = null)
        {
            return RegionDataObjectsCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataObjectsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new RegionDataObjects_Mask<bool> GetHasBeenSetMask()
        {
            return RegionDataObjectsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataObjects rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataObjects rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Objects.HasBeenSet != rhs.Objects.HasBeenSet) return false;
            if (Objects.HasBeenSet)
            {
                if (!this.Objects.SequenceEqual(rhs.Objects)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Objects.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Objects).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static RegionDataObjects Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataObjects Create_XML(
            XElement root,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionDataObjects Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataObjects();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataObjects Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RegionDataObjects Create_XML(
            string path,
            out RegionDataObjects_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RegionDataObjects Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RegionDataObjects Create_XML(
            Stream stream,
            out RegionDataObjects_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RegionDataObjects>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RegionDataObjects_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<RegionDataObjects>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RegionDataObjects_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RegionDataObjects_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out RegionData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out RegionDataObjects_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as RegionDataObjects_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            RegionDataObjectsCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_XML_Internal(
            RegionDataObjects item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Objects":
                    ListXmlTranslation<RegionDataObject>.Instance.ParseInto(
                        root: root,
                        item: item._Objects,
                        fieldIndex: (int)RegionDataObjects_FieldIndex.Objects,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<RegionDataObject>.Instance.Parse);
                    break;
                default:
                    RegionData.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataObjects_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in Objects.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static RegionDataObjects Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataObjects Create_Binary(
            MutagenFrame frame,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionDataObjects Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataObjects();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    RegionDataObjects_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataObjects Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionDataObjects Create_Binary(
            string path,
            out RegionDataObjects_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RegionDataObjects Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionDataObjects Create_Binary(
            Stream stream,
            out RegionDataObjects_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as RegionDataObjects_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            RegionDataObjectsCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionDataObjects item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<RegionDataObjects_FieldIndex?> Fill_Binary_RecordTypes(
            RegionDataObjects item,
            MutagenFrame frame,
            RegionDataObjects_FieldIndex? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "RDOT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionDataObject>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._Objects,
                        fieldIndex: (int)RegionDataObjects_FieldIndex.Objects,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<RegionDataObject>.Instance.Parse);
                    return TryGet<RegionDataObjects_FieldIndex?>.Succeed(RegionDataObjects_FieldIndex.Objects);
                default:
                    return RegionData.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => RegionDataObjectsCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public RegionDataObjects Copy(
            RegionDataObjects_CopyMask copyMask = null,
            IRegionDataObjectsGetter def = null)
        {
            return RegionDataObjects.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionDataObjects Copy(
            IRegionDataObjects item,
            RegionDataObjects_CopyMask copyMask = null,
            IRegionDataObjectsGetter def = null)
        {
            RegionDataObjects ret;
            if (item.GetType().Equals(typeof(RegionDataObjects)))
            {
                ret = new RegionDataObjects();
            }
            else
            {
                ret = (RegionDataObjects)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionDataObjects Copy_ToLoqui(
            IRegionDataObjectsGetter item,
            RegionDataObjects_CopyMask copyMask = null,
            IRegionDataObjectsGetter def = null)
        {
            RegionDataObjects ret;
            if (item.GetType().Equals(typeof(RegionDataObjects)))
            {
                ret = new RegionDataObjects() as RegionDataObjects;
            }
            else
            {
                ret = (RegionDataObjects)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRegionDataObjectsGetter rhs,
            RegionDataObjects_CopyMask copyMask,
            IRegionDataObjectsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataObjectsGetter rhs,
            out RegionDataObjects_ErrorMask errorMask,
            RegionDataObjects_CopyMask copyMask = null,
            IRegionDataObjectsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataObjectsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionDataObjectsGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataObjects_CopyMask copyMask = null,
            IRegionDataObjectsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RegionDataObjectsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    this._Objects.SetTo((IEnumerable<RegionDataObject>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionDataObjectsCommon.Clear(this, cmds);
        }


        public new static RegionDataObjects Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionDataObjects();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionDataObjects(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_RegionDataObjects(RegionDataObjects obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionDataObjects_FieldIndex enu))
            {
                CopyInInternal_RegionData(obj, pair);
            }
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    obj._Objects.SetTo((IEnumerable<RegionDataObject>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RegionDataObjects obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionDataObjects : IRegionDataObjectsGetter, IRegionData, ILoquiClass<IRegionDataObjects, IRegionDataObjectsGetter>, ILoquiClass<RegionDataObjects, IRegionDataObjectsGetter>
    {
        new INotifyingList<RegionDataObject> Objects { get; }
    }

    public partial interface IRegionDataObjectsGetter : IRegionDataGetter
    {
        #region Objects
        INotifyingListGetter<RegionDataObject> Objects { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataObjects_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        Objects = 3,
    }
    #endregion

    #region Registration
    public class RegionDataObjects_Registration : ILoquiRegistration
    {
        public static readonly RegionDataObjects_Registration Instance = new RegionDataObjects_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 110,
            version: 0);

        public const string GUID = "6c1a729e-5137-4710-b72d-2f6a5a9f0b7e";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(RegionDataObjects_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataObjects_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataObjects);

        public static readonly Type GetterType = typeof(IRegionDataObjectsGetter);

        public static readonly Type SetterType = typeof(IRegionDataObjects);

        public static readonly Type CommonType = typeof(RegionDataObjectsCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataObjects";

        public const string Name = "RegionDataObjects";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTS":
                    return (ushort)RegionDataObjects_FieldIndex.Objects;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return true;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return true;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return "Objects";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return typeof(NotifyingList<RegionDataObject>);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDOT_HEADER = new RecordType("RDOT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionDataObjectsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionDataObjects item,
            IRegionDataObjectsGetter rhs,
            IRegionDataObjectsGetter def,
            ErrorMaskBuilder errorMask,
            RegionDataObjects_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            RegionDataCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Objects.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)RegionDataObjects_FieldIndex.Objects);
                try
                {
                    item.Objects.SetToWithDefault(
                        rhs: rhs.Objects,
                        def: def?.Objects,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Objects.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RegionDataObject);
                                    return RegionDataObject.Copy(
                                        r,
                                        copyMask?.Objects?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Objects.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRegionDataObjects obj,
            NotifyingFireParameters cmds = null)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    obj.Objects.HasBeenSet = on;
                    break;
                default:
                    RegionDataCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRegionDataObjects obj,
            NotifyingUnsetParameters cmds = null)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    obj.Objects.Unset(cmds);
                    break;
                default:
                    RegionDataCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRegionDataObjects obj)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return obj.Objects.HasBeenSet;
                default:
                    return RegionDataCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRegionDataObjectsGetter obj)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return obj.Objects;
                default:
                    return RegionDataCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRegionDataObjects item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Objects.Unset(cmds.ToUnsetParams());
        }

        public static RegionDataObjects_Mask<bool> GetEqualsMask(
            this IRegionDataObjectsGetter item,
            IRegionDataObjectsGetter rhs)
        {
            var ret = new RegionDataObjects_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionDataObjectsGetter item,
            IRegionDataObjectsGetter rhs,
            RegionDataObjects_Mask<bool> ret)
        {
            if (rhs == null) return;
            if (item.Objects.HasBeenSet == rhs.Objects.HasBeenSet)
            {
                if (item.Objects.HasBeenSet)
                {
                    ret.Objects = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionDataObject_Mask<bool>>>>();
                    ret.Objects.Specific = item.Objects.SelectAgainst<RegionDataObject, MaskItem<bool, RegionDataObject_Mask<bool>>>(rhs.Objects, ((l, r) =>
                    {
                        MaskItem<bool, RegionDataObject_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, RegionDataObject_Mask<bool>>();
                        itemRet.Specific = RegionDataObjectCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.Objects.Overall);
                    ret.Objects.Overall = ret.Objects.Overall && ret.Objects.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Objects = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionDataObject_Mask<bool>>>>();
                    ret.Objects.Overall = true;
                }
            }
            else
            {
                ret.Objects = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionDataObject_Mask<bool>>>>();
                ret.Objects.Overall = false;
            }
            RegionDataCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRegionDataObjectsGetter item,
            string name = null,
            RegionDataObjects_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionDataObjectsGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataObjects_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionDataObjects)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionDataObjects)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Objects?.Overall ?? true)
                {
                    fg.AppendLine("Objects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Objects)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionDataObjectsGetter item,
            RegionDataObjects_Mask<bool?> checkMask)
        {
            if (checkMask.Objects.Overall.HasValue && checkMask.Objects.Overall.Value != item.Objects.HasBeenSet) return false;
            return true;
        }

        public static RegionDataObjects_Mask<bool> GetHasBeenSetMask(IRegionDataObjectsGetter item)
        {
            var ret = new RegionDataObjects_Mask<bool>();
            ret.Objects = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionDataObject_Mask<bool>>>>(item.Objects.HasBeenSet, item.Objects.Select((i) => new MaskItem<bool, RegionDataObject_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static RegionDataObjects_FieldIndex? ConvertFieldIndex(RegionData_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static RegionDataObjects_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataObjects_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataObjects_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataObjects_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IRegionDataObjectsGetter item,
            bool doMasks,
            out RegionDataObjects_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_XML_Internal(
            XElement node,
            IRegionDataObjectsGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataObjects");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataObjects");
            }
            if (item.Objects.HasBeenSet)
            {
                ListXmlTranslation<RegionDataObject>.Instance.Write(
                    node: elem,
                    name: nameof(item.Objects),
                    item: item.Objects,
                    fieldIndex: (int)RegionDataObjects_FieldIndex.Objects,
                    errorMask: errorMask,
                    transl: (XElement subNode, RegionDataObject subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<RegionDataObject>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataObjects item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionDataObjects_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            RegionDataObjects item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            RegionDataObjects item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionDataObject>.Instance.Write(
                writer: writer,
                items: item.Objects,
                fieldIndex: (int)RegionDataObjects_FieldIndex.Objects,
                recordType: RegionDataObjects_Registration.RDOT_HEADER,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<RegionDataObject>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RegionDataObjects_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataObjects_Mask<T>>
    {
        #region Ctors
        public RegionDataObjects_Mask()
        {
        }

        public RegionDataObjects_Mask(T initialValue)
        {
            this.Objects = new MaskItem<T, IEnumerable<MaskItem<T, RegionDataObject_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, RegionDataObject_Mask<T>>>> Objects;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataObjects_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataObjects_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Objects, rhs.Objects)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Objects?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Objects != null)
            {
                if (!eval(this.Objects.Overall)) return false;
                if (this.Objects.Specific != null)
                {
                    foreach (var item in this.Objects.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataObjects_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataObjects_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataObjects_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Objects != null)
            {
                obj.Objects = new MaskItem<R, IEnumerable<MaskItem<R, RegionDataObject_Mask<R>>>>();
                obj.Objects.Overall = eval(this.Objects.Overall);
                if (Objects.Specific != null)
                {
                    List<MaskItem<R, RegionDataObject_Mask<R>>> l = new List<MaskItem<R, RegionDataObject_Mask<R>>>();
                    obj.Objects.Specific = l;
                    foreach (var item in Objects.Specific)
                    {
                        MaskItem<R, RegionDataObject_Mask<R>> mask = default(MaskItem<R, RegionDataObject_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, RegionDataObject_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Objects.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataObjects_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataObjects_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataObjects_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Objects?.Overall ?? true)
                {
                    fg.AppendLine("Objects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Objects.Overall != null)
                        {
                            fg.AppendLine(Objects.Overall.ToString());
                        }
                        if (Objects.Specific != null)
                        {
                            foreach (var subItem in Objects.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataObjects_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataObjects_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionDataObject_ErrorMask>>> Objects;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return Objects;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    this.Objects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionDataObject_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    this.Objects = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionDataObject_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Objects != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataObjects_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Objects =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Objects.Overall != null)
                {
                    fg.AppendLine(Objects.Overall.ToString());
                }
                if (Objects.Specific != null)
                {
                    foreach (var subItem in Objects.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RegionDataObjects_ErrorMask Combine(RegionDataObjects_ErrorMask rhs)
        {
            var ret = new RegionDataObjects_ErrorMask();
            ret.Objects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionDataObject_ErrorMask>>>(this.Objects.Overall.Combine(rhs.Objects.Overall), new List<MaskItem<Exception, RegionDataObject_ErrorMask>>(this.Objects.Specific.And(rhs.Objects.Specific)));
            return ret;
        }
        public static RegionDataObjects_ErrorMask Combine(RegionDataObjects_ErrorMask lhs, RegionDataObjects_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataObjects_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataObjects_ErrorMask();
        }
        #endregion

    }
    public class RegionDataObjects_CopyMask : RegionData_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, RegionDataObject_CopyMask> Objects;
        #endregion

    }
    #endregion




    #endregion

}
