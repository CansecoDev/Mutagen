/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataSounds : 
        RegionData,
        IRegionDataSounds,
        ILoquiObject<RegionDataSounds>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<RegionDataSounds>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataSounds_Registration.Instance;
        public new static RegionDataSounds_Registration Registration => RegionDataSounds_Registration.Instance;

        #region Ctor
        public RegionDataSounds()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MusicType
        public bool MusicType_IsSet
        {
            get => _hasBeenSetTracker[(int)RegionDataSounds_FieldIndex.MusicType];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)RegionDataSounds_FieldIndex.MusicType, nameof(MusicType_IsSet));
        }
        bool IRegionDataSoundsGetter.MusicType_IsSet => MusicType_IsSet;
        private MusicType _MusicType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MusicType MusicType
        {
            get => this._MusicType;
            set => MusicType_Set(value);
        }
        MusicType IRegionDataSoundsGetter.MusicType => this.MusicType;
        public void MusicType_Set(
            MusicType value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _MusicType, value, _hasBeenSetTracker, markSet, (int)RegionDataSounds_FieldIndex.MusicType, nameof(MusicType), nameof(MusicType_IsSet));
        }
        public void MusicType_Unset()
        {
            this.MusicType_Set(default(MusicType), false);
        }
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<RegionSound> _Sounds = new SourceSetList<RegionSound>();
        public ISourceSetList<RegionSound> Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RegionSound> SoundsEnumerable
        {
            get => _Sounds.Items;
            set => _Sounds.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<RegionSound> IRegionDataSounds.Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<RegionSound> IRegionDataSoundsGetter.Sounds => _Sounds;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<RegionDataSounds>.GetEqualsMask(RegionDataSounds rhs, EqualsMaskHelper.Include include) => RegionDataSoundsCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IRegionDataSoundsGetter>.GetEqualsMask(IRegionDataSoundsGetter rhs, EqualsMaskHelper.Include include) => RegionDataSoundsCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            return RegionDataSoundsCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataSoundsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new RegionDataSounds_Mask<bool> GetHasBeenSetMask()
        {
            return RegionDataSoundsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataSounds rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataSounds rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (MusicType_IsSet != rhs.MusicType_IsSet) return false;
            if (MusicType_IsSet)
            {
                if (this.MusicType != rhs.MusicType) return false;
            }
            if (Sounds.HasBeenSet != rhs.Sounds.HasBeenSet) return false;
            if (Sounds.HasBeenSet)
            {
                if (!this.Sounds.SequenceEqual(rhs.Sounds)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (MusicType_IsSet)
            {
                ret = HashHelper.GetHashCode(MusicType).CombineHashCode(ret);
            }
            if (Sounds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionDataSounds Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionDataSounds_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionDataSounds Create_Xml(
            XElement node,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataSounds Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RegionDataSounds() : null;
                    break;
                default:
                    break;
            }
            var ret = new RegionDataSounds();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionDataSoundsCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataSounds Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionDataSounds_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataSounds Create_Xml(
            string path,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataSounds Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionDataSounds Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionDataSounds_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataSounds Create_Xml(
            Stream stream,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataSounds Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataSounds_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out RegionData_ErrorMask errorMask,
            bool doMasks = true,
            RegionData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            RegionDataSoundsCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            RegionDataSounds item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    RegionData.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((RegionDataSounds_FieldIndex)index)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return _hasBeenSetTracker[index];
                case RegionDataSounds_FieldIndex.Sounds:
                    return Sounds.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataSounds_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Sounds.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Sounds.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionDataSounds Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataSounds Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataSounds Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataSounds();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataSoundsCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionDataSounds item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            RegionDataSounds item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444D4452: // RDMD
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (EnumBinaryTranslation<MusicType>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out MusicType MusicTypeParse))
                    {
                        item.MusicType = MusicTypeParse;
                    }
                    else
                    {
                        item.MusicType = default(MusicType);
                    }
                    return TryGet<int?>.Succeed((int)RegionDataSounds_FieldIndex.MusicType);
                }
                case 0x44534452: // RDSD
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionSound>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Sounds,
                        fieldIndex: (int)RegionDataSounds_FieldIndex.Sounds,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out RegionSound listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<RegionSound>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)RegionDataSounds_FieldIndex.Sounds);
                }
                default:
                    return RegionData.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public RegionDataSounds Copy(
            RegionDataSounds_CopyMask copyMask = null,
            IRegionDataSoundsGetter def = null)
        {
            return RegionDataSounds.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionDataSounds Copy(
            IRegionDataSounds item,
            RegionDataSounds_CopyMask copyMask = null,
            IRegionDataSoundsGetter def = null)
        {
            RegionDataSounds ret;
            if (item.GetType().Equals(typeof(RegionDataSounds)))
            {
                ret = new RegionDataSounds();
            }
            else
            {
                ret = (RegionDataSounds)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionDataSounds Copy_ToLoqui(
            IRegionDataSoundsGetter item,
            RegionDataSounds_CopyMask copyMask = null,
            IRegionDataSoundsGetter def = null)
        {
            RegionDataSounds ret;
            if (item.GetType().Equals(typeof(RegionDataSounds)))
            {
                ret = new RegionDataSounds() as RegionDataSounds;
            }
            else
            {
                ret = (RegionDataSounds)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IRegionDataGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IRegionDataSoundsGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IRegionDataSoundsGetter rhs,
            RegionDataSounds_CopyMask copyMask,
            IRegionDataSoundsGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IRegionDataSoundsGetter rhs,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_CopyMask copyMask = null,
            IRegionDataSoundsGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataSoundsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionDataSoundsGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataSounds_CopyMask copyMask = null,
            IRegionDataSoundsGetter def = null,
            bool doMasks = true)
        {
            RegionDataSoundsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    this.MusicType = (MusicType)obj;
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    this._Sounds.SetTo((IEnumerable<RegionSound>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            RegionDataSoundsCommon.Clear(this);
        }


        public new static RegionDataSounds Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionDataSounds();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionDataSounds(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_RegionDataSounds(RegionDataSounds obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionDataSounds_FieldIndex enu))
            {
                CopyInInternal_RegionData(obj, pair);
            }
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    obj.MusicType = (MusicType)pair.Value;
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    obj._Sounds.SetTo((IEnumerable<RegionSound>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRegionDataSounds : IRegionDataSoundsGetter, IRegionData, ILoquiClass<IRegionDataSounds, IRegionDataSoundsGetter>, ILoquiClass<RegionDataSounds, IRegionDataSoundsGetter>
    {
        new MusicType MusicType { get; set; }
        new bool MusicType_IsSet { get; set; }
        void MusicType_Set(MusicType item, bool hasBeenSet = true);
        void MusicType_Unset();

        new ISourceSetList<RegionSound> Sounds { get; }
    }

    public partial interface IRegionDataSoundsGetter : IRegionDataGetter
    {
        #region MusicType
        MusicType MusicType { get; }
        bool MusicType_IsSet { get; }

        #endregion
        #region Sounds
        IObservableSetList<RegionSound> Sounds { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataSounds_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        MusicType = 3,
        Sounds = 4,
    }
    #endregion

    #region Registration
    public class RegionDataSounds_Registration : ILoquiRegistration
    {
        public static readonly RegionDataSounds_Registration Instance = new RegionDataSounds_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 114,
            version: 0);

        public const string GUID = "45ee0280-5f00-4126-9120-50ed00cc27c3";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(RegionDataSounds_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataSounds_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataSounds);

        public static readonly Type GetterType = typeof(IRegionDataSoundsGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegionDataSounds);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(RegionDataSoundsCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataSounds";

        public const string Name = "RegionDataSounds";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MUSICTYPE":
                    return (ushort)RegionDataSounds_FieldIndex.MusicType;
                case "SOUNDS":
                    return (ushort)RegionDataSounds_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.Sounds:
                    return true;
                case RegionDataSounds_FieldIndex.MusicType:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.Sounds:
                    return true;
                case RegionDataSounds_FieldIndex.MusicType:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                case RegionDataSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return "MusicType";
                case RegionDataSounds_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                case RegionDataSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                case RegionDataSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return typeof(MusicType);
                case RegionDataSounds_FieldIndex.Sounds:
                    return typeof(SourceSetList<RegionSound>);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDMD_HEADER = new RecordType("RDMD");
        public static readonly RecordType RDSD_HEADER = new RecordType("RDSD");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionDataSoundsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionDataSounds item,
            IRegionDataSoundsGetter rhs,
            IRegionDataSoundsGetter def,
            ErrorMaskBuilder errorMask,
            RegionDataSounds_CopyMask copyMask)
        {
            RegionDataCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.MusicType ?? true)
            {
                errorMask?.PushIndex((int)RegionDataSounds_FieldIndex.MusicType);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MusicType,
                        rhsHasBeenSet: rhs.MusicType_IsSet,
                        defItem: def?.MusicType ?? default(MusicType),
                        defHasBeenSet: def?.MusicType_IsSet ?? false,
                        outRhsItem: out var rhsMusicTypeItem,
                        outDefItem: out var defMusicTypeItem))
                    {
                        item.MusicType = rhsMusicTypeItem;
                    }
                    else
                    {
                        item.MusicType_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sounds.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)RegionDataSounds_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetToWithDefault(
                        rhs: rhs.Sounds,
                        def: def?.Sounds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Sounds.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return RegionSound.Copy(
                                        r,
                                        copyMask?.Sounds?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Sounds.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IRegionDataSounds item)
        {
            item.MusicType_Unset();
            item.Sounds.Unset();
        }

        public static RegionDataSounds_Mask<bool> GetEqualsMask(
            this IRegionDataSoundsGetter item,
            IRegionDataSoundsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionDataSounds_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionDataSoundsGetter item,
            IRegionDataSoundsGetter rhs,
            RegionDataSounds_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MusicType = item.MusicType_IsSet == rhs.MusicType_IsSet && item.MusicType == rhs.MusicType;
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            RegionDataCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRegionDataSoundsGetter item,
            string name = null,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionDataSoundsGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionDataSounds)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionDataSounds)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {item.MusicType}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Sounds)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionDataSoundsGetter item,
            RegionDataSounds_Mask<bool?> checkMask)
        {
            if (checkMask.MusicType.HasValue && checkMask.MusicType.Value != item.MusicType_IsSet) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds.HasBeenSet) return false;
            return true;
        }

        public static RegionDataSounds_Mask<bool> GetHasBeenSetMask(IRegionDataSoundsGetter item)
        {
            var ret = new RegionDataSounds_Mask<bool>();
            ret.MusicType = item.MusicType_IsSet;
            ret.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RegionSound_Mask<bool>>>>(item.Sounds.HasBeenSet, item.Sounds.WithIndex().Select((i) => new MaskItemIndexed<bool, RegionSound_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        public static RegionDataSounds_FieldIndex? ConvertFieldIndex(RegionData_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static RegionDataSounds_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataSounds_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataSounds_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataSounds_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            RegionDataSounds item,
            bool doMasks,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            RegionDataSounds item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataSounds");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataSounds");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this RegionDataSounds item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            RegionDataCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.MusicType_IsSet
                && (translationMask?.GetShouldTranslate((int)RegionDataSounds_FieldIndex.MusicType) ?? true))
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: node,
                    name: nameof(item.MusicType),
                    item: item.MusicType,
                    fieldIndex: (int)RegionDataSounds_FieldIndex.MusicType,
                    errorMask: errorMask);
            }
            if (item.Sounds.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)RegionDataSounds_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<RegionSound>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)RegionDataSounds_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RegionDataSounds_FieldIndex.Sounds),
                    transl: (XElement subNode, RegionSound subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<RegionSound>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml(
            this RegionDataSounds item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataSoundsCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this RegionDataSounds item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MusicType":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataSounds_FieldIndex.MusicType);
                        if (EnumXmlTranslation<MusicType>.Instance.Parse(
                            node: node,
                            item: out MusicType MusicTypeParse,
                            errorMask: errorMask))
                        {
                            item.MusicType = MusicTypeParse;
                        }
                        else
                        {
                            item.MusicType = default(MusicType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataSounds_FieldIndex.Sounds);
                        if (ListXmlTranslation<RegionSound>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<RegionSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds.SetTo(SoundsItem);
                        }
                        else
                        {
                            item.Sounds.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    RegionDataCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataSounds item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionDataSounds_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataSounds item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            RegionDataSounds item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            RegionDataCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.MusicType_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Write(
                    writer,
                    item.MusicType,
                    length: 4,
                    header: recordTypeConverter.ConvertToCustom(RegionDataSounds_Registration.RDMD_HEADER),
                    nullable: false);
            }
            if (item.Sounds.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionSound>.Instance.Write(
                    writer: writer,
                    items: item.Sounds,
                    fieldIndex: (int)RegionDataSounds_FieldIndex.Sounds,
                    recordType: RegionDataSounds_Registration.RDSD_HEADER,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, RegionSound subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<RegionSound>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class RegionDataSounds_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataSounds_Mask<T>>
    {
        #region Ctors
        public RegionDataSounds_Mask()
        {
        }

        public RegionDataSounds_Mask(T initialValue)
        {
            this.MusicType = initialValue;
            this.Sounds = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionSound_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T MusicType;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionSound_Mask<T>>>> Sounds;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataSounds_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataSounds_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MusicType?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.MusicType)) return false;
            if (this.Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null)
                {
                    foreach (var item in this.Sounds.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataSounds_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataSounds_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataSounds_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.MusicType = eval(this.MusicType);
            if (Sounds != null)
            {
                obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RegionSound_Mask<R>>>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (Sounds.Specific != null)
                {
                    List<MaskItemIndexed<R, RegionSound_Mask<R>>> l = new List<MaskItemIndexed<R, RegionSound_Mask<R>>>();
                    obj.Sounds.Specific = l;
                    foreach (var item in Sounds.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, RegionSound_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, RegionSound_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Sounds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataSounds_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataSounds_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataSounds_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {MusicType}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Sounds.Overall != null)
                        {
                            fg.AppendLine(Sounds.Overall.ToString());
                        }
                        if (Sounds.Specific != null)
                        {
                            foreach (var subItem in Sounds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataSounds_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataSounds_ErrorMask>
    {
        #region Members
        public Exception MusicType;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>> Sounds;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return MusicType;
                case RegionDataSounds_FieldIndex.Sounds:
                    return Sounds;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    this.MusicType = ex;
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    this.MusicType = (Exception)obj;
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (MusicType != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataSounds_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"MusicType => {MusicType}");
            fg.AppendLine("Sounds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Sounds.Overall != null)
                {
                    fg.AppendLine(Sounds.Overall.ToString());
                }
                if (Sounds.Specific != null)
                {
                    foreach (var subItem in Sounds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RegionDataSounds_ErrorMask Combine(RegionDataSounds_ErrorMask rhs)
        {
            var ret = new RegionDataSounds_ErrorMask();
            ret.MusicType = this.MusicType.Combine(rhs.MusicType);
            ret.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), new List<MaskItem<Exception, RegionSound_ErrorMask>>(this.Sounds.Specific.And(rhs.Sounds.Specific)));
            return ret;
        }
        public static RegionDataSounds_ErrorMask Combine(RegionDataSounds_ErrorMask lhs, RegionDataSounds_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataSounds_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataSounds_ErrorMask();
        }
        #endregion

    }
    public class RegionDataSounds_CopyMask : RegionData_CopyMask
    {
        public RegionDataSounds_CopyMask()
        {
        }

        public RegionDataSounds_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.MusicType = defaultOn;
            this.Sounds = new MaskItem<CopyOption, RegionSound_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool MusicType;
        public MaskItem<CopyOption, RegionSound_CopyMask> Sounds;
        #endregion

    }

    public class RegionDataSounds_TranslationMask : RegionData_TranslationMask
    {
        #region Members
        public bool MusicType;
        public MaskItem<bool, RegionSound_TranslationMask> Sounds;
        #endregion

        #region Ctors
        public RegionDataSounds_TranslationMask()
            : base()
        {
        }

        public RegionDataSounds_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.MusicType = defaultOn;
            this.Sounds = new MaskItem<bool, RegionSound_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((MusicType, null));
            ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
