/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataSounds : 
        RegionData,
        IRegionDataSounds,
        ILoquiObject<RegionDataSounds>,
        ILoquiObjectSetter,
        IPropertySupporter<MusicType>,
        IEquatable<RegionDataSounds>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataSounds_Registration.Instance;
        public new static RegionDataSounds_Registration Registration => RegionDataSounds_Registration.Instance;

        #region Ctor
        public RegionDataSounds()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MusicType
        protected MusicType _MusicType;
        protected PropertyForwarder<RegionDataSounds, MusicType> _MusicTypeForwarder;
        public INotifyingSetItem<MusicType> MusicType_Property => _MusicTypeForwarder ?? (_MusicTypeForwarder = new PropertyForwarder<RegionDataSounds, MusicType>(this, (int)RegionDataSounds_FieldIndex.MusicType));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MusicType MusicType
        {
            get => this._MusicType;
            set => this.SetMusicType(value);
        }
        protected void SetMusicType(
            MusicType item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)RegionDataSounds_FieldIndex.MusicType];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MusicType == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)RegionDataSounds_FieldIndex.MusicType] = hasBeenSet;
            }
            if (_MusicType_subscriptions != null)
            {
                var tmp = MusicType;
                _MusicType = item;
                _MusicType_subscriptions.FireSubscriptions(
                    index: (int)RegionDataSounds_FieldIndex.MusicType,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MusicType = item;
            }
        }
        protected void UnsetMusicType()
        {
            _hasBeenSetTracker[(int)RegionDataSounds_FieldIndex.MusicType] = false;
            MusicType = default(MusicType);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<MusicType> IRegionDataSounds.MusicType_Property => this.MusicType_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<MusicType> IRegionDataSoundsGetter.MusicType_Property => this.MusicType_Property;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<RegionSound> _Sounds = new NotifyingList<RegionSound>();
        public INotifyingList<RegionSound> Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RegionSound> SoundsEnumerable
        {
            get => _Sounds;
            set => _Sounds.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<RegionSound> IRegionDataSounds.Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<RegionSound> IRegionDataSoundsGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RegionDataSoundsCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RegionDataSoundsCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RegionDataSoundsCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RegionDataSoundsCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<RegionDataSounds>.GetEqualsMask(RegionDataSounds rhs) => RegionDataSoundsCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRegionDataSoundsGetter>.GetEqualsMask(IRegionDataSoundsGetter rhs) => RegionDataSoundsCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RegionDataSoundsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            return RegionDataSoundsCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataSoundsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new RegionDataSounds_Mask<bool> GetHasBeenSetMask()
        {
            return RegionDataSoundsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataSounds rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataSounds rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (MusicType_Property.HasBeenSet != rhs.MusicType_Property.HasBeenSet) return false;
            if (MusicType_Property.HasBeenSet)
            {
                if (this.MusicType != rhs.MusicType) return false;
            }
            if (Sounds.HasBeenSet != rhs.Sounds.HasBeenSet) return false;
            if (Sounds.HasBeenSet)
            {
                if (!this.Sounds.SequenceEqual(rhs.Sounds)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (MusicType_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MusicType).CombineHashCode(ret);
            }
            if (Sounds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static RegionDataSounds Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataSounds Create_XML(
            XElement root,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionDataSounds Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataSounds();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataSounds Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RegionDataSounds Create_XML(
            string path,
            out RegionDataSounds_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RegionDataSounds Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RegionDataSounds Create_XML(
            Stream stream,
            out RegionDataSounds_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RegionDataSounds>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RegionDataSounds_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<RegionDataSounds>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RegionDataSounds_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RegionDataSounds_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out RegionData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out RegionDataSounds_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            RegionDataSoundsCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            RegionDataSounds item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "MusicType":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataSounds_FieldIndex.MusicType);
                        if (EnumXmlTranslation<MusicType>.Instance.Parse(
                            root: root,
                            item: out MusicType MusicTypeParse,
                            errorMask: errorMask))
                        {
                            item.MusicType = MusicTypeParse;
                        }
                        else
                        {
                            item.UnsetMusicType();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    ListXmlTranslation<RegionSound>.Instance.ParseInto(
                        root: root,
                        item: item.Sounds,
                        fieldIndex: (int)RegionDataSounds_FieldIndex.Sounds,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<RegionSound>.Instance.Parse);
                    break;
                default:
                    RegionData.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter MusicType
        protected ObjectCentralizationSubscriptions<MusicType> _MusicType_subscriptions;
        MusicType IPropertySupporter<MusicType>.Get(int index)
        {
            return GetMusicType(index: index);
        }

        protected MusicType GetMusicType(int index)
        {
            switch ((RegionDataSounds_FieldIndex)index)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return MusicType;
                default:
                    throw new ArgumentException($"Unknown index for field type MusicType: {index}");
            }
        }

        void IPropertySupporter<MusicType>.Set(
            int index,
            MusicType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetMusicType(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetMusicType(
            int index,
            MusicType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((RegionDataSounds_FieldIndex)index)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    SetMusicType(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type MusicType: {index}");
            }
        }

        bool IPropertySupporter<MusicType>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<MusicType>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<MusicType>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetMusicType(
                index: index,
                cmds: cmds);
        }

        protected void UnsetMusicType(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((RegionDataSounds_FieldIndex)index)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    _hasBeenSetTracker[index] = false;
                    MusicType = default(MusicType);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type MusicType: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<MusicType>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<MusicType> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_MusicType_subscriptions == null)
            {
                _MusicType_subscriptions = new ObjectCentralizationSubscriptions<MusicType>();
            }
            _MusicType_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<MusicType>.Unsubscribe(
            int index,
            object owner)
        {
            _MusicType_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<MusicType>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        MusicType IPropertySupporter<MusicType>.DefaultValue(int index)
        {
            return DefaultValueMusicType(index: index);
        }

        protected MusicType DefaultValueMusicType(int index)
        {
            switch ((RegionDataSounds_FieldIndex)index)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return default(MusicType);
                default:
                    throw new ArgumentException($"Unknown index for field type MusicType: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataSounds_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in Sounds.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static RegionDataSounds Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataSounds Create_Binary(
            MutagenFrame frame,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionDataSounds Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataSounds();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataSounds Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionDataSounds Create_Binary(
            string path,
            out RegionDataSounds_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RegionDataSounds Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionDataSounds Create_Binary(
            Stream stream,
            out RegionDataSounds_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataSoundsCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionDataSounds item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            RegionDataSounds item,
            MutagenFrame frame,
            int? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x444D4452: // RDMD
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataSounds_FieldIndex.MusicType);
                        if (EnumBinaryTranslation<MusicType>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out MusicType MusicTypeParse,
                            errorMask: errorMask))
                        {
                            item.MusicType = MusicTypeParse;
                        }
                        else
                        {
                            item.UnsetMusicType();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)RegionDataSounds_FieldIndex.MusicType);
                case 0x44534452: // RDSD
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionSound>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Sounds,
                        fieldIndex: (int)RegionDataSounds_FieldIndex.Sounds,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<RegionSound>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)RegionDataSounds_FieldIndex.Sounds);
                default:
                    return RegionData.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public RegionDataSounds Copy(
            RegionDataSounds_CopyMask copyMask = null,
            IRegionDataSoundsGetter def = null)
        {
            return RegionDataSounds.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionDataSounds Copy(
            IRegionDataSounds item,
            RegionDataSounds_CopyMask copyMask = null,
            IRegionDataSoundsGetter def = null)
        {
            RegionDataSounds ret;
            if (item.GetType().Equals(typeof(RegionDataSounds)))
            {
                ret = new RegionDataSounds();
            }
            else
            {
                ret = (RegionDataSounds)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionDataSounds Copy_ToLoqui(
            IRegionDataSoundsGetter item,
            RegionDataSounds_CopyMask copyMask = null,
            IRegionDataSoundsGetter def = null)
        {
            RegionDataSounds ret;
            if (item.GetType().Equals(typeof(RegionDataSounds)))
            {
                ret = new RegionDataSounds() as RegionDataSounds;
            }
            else
            {
                ret = (RegionDataSounds)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRegionDataSoundsGetter rhs,
            RegionDataSounds_CopyMask copyMask,
            IRegionDataSoundsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataSoundsGetter rhs,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_CopyMask copyMask = null,
            IRegionDataSoundsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataSoundsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionDataSoundsGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataSounds_CopyMask copyMask = null,
            IRegionDataSoundsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RegionDataSoundsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    this.SetMusicType(
                        (MusicType)obj,
                        cmds: cmds);
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    this._Sounds.SetTo((IEnumerable<RegionSound>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionDataSoundsCommon.Clear(this, cmds);
        }


        public new static RegionDataSounds Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionDataSounds();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionDataSounds(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_RegionDataSounds(RegionDataSounds obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionDataSounds_FieldIndex enu))
            {
                CopyInInternal_RegionData(obj, pair);
            }
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    obj.SetMusicType(
                        (MusicType)pair.Value,
                        cmds: null);
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    obj._Sounds.SetTo((IEnumerable<RegionSound>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RegionDataSounds obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionDataSounds : IRegionDataSoundsGetter, IRegionData, ILoquiClass<IRegionDataSounds, IRegionDataSoundsGetter>, ILoquiClass<RegionDataSounds, IRegionDataSoundsGetter>
    {
        new MusicType MusicType { get; set; }
        new INotifyingSetItem<MusicType> MusicType_Property { get; }

        new INotifyingList<RegionSound> Sounds { get; }
    }

    public partial interface IRegionDataSoundsGetter : IRegionDataGetter
    {
        #region MusicType
        MusicType MusicType { get; }
        INotifyingSetItemGetter<MusicType> MusicType_Property { get; }

        #endregion
        #region Sounds
        INotifyingListGetter<RegionSound> Sounds { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataSounds_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        MusicType = 3,
        Sounds = 4,
    }
    #endregion

    #region Registration
    public class RegionDataSounds_Registration : ILoquiRegistration
    {
        public static readonly RegionDataSounds_Registration Instance = new RegionDataSounds_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 114,
            version: 0);

        public const string GUID = "45ee0280-5f00-4126-9120-50ed00cc27c3";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(RegionDataSounds_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataSounds_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataSounds);

        public static readonly Type GetterType = typeof(IRegionDataSoundsGetter);

        public static readonly Type SetterType = typeof(IRegionDataSounds);

        public static readonly Type CommonType = typeof(RegionDataSoundsCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataSounds";

        public const string Name = "RegionDataSounds";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MUSICTYPE":
                    return (ushort)RegionDataSounds_FieldIndex.MusicType;
                case "SOUNDS":
                    return (ushort)RegionDataSounds_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.Sounds:
                    return true;
                case RegionDataSounds_FieldIndex.MusicType:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.Sounds:
                    return true;
                case RegionDataSounds_FieldIndex.MusicType:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                case RegionDataSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return "MusicType";
                case RegionDataSounds_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                case RegionDataSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                case RegionDataSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return typeof(MusicType);
                case RegionDataSounds_FieldIndex.Sounds:
                    return typeof(NotifyingList<RegionSound>);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDMD_HEADER = new RecordType("RDMD");
        public static readonly RecordType RDSD_HEADER = new RecordType("RDSD");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionDataSoundsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionDataSounds item,
            IRegionDataSoundsGetter rhs,
            IRegionDataSoundsGetter def,
            ErrorMaskBuilder errorMask,
            RegionDataSounds_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            RegionDataCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.MusicType ?? true)
            {
                errorMask.PushIndex((int)RegionDataSounds_FieldIndex.MusicType);
                try
                {
                    item.MusicType_Property.SetToWithDefault(
                        rhs: rhs.MusicType_Property,
                        def: def?.MusicType_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Sounds.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)RegionDataSounds_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetToWithDefault(
                        rhs: rhs.Sounds,
                        def: def?.Sounds,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Sounds.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RegionSound);
                                    return RegionSound.Copy(
                                        r,
                                        copyMask?.Sounds?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Sounds.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRegionDataSounds obj,
            NotifyingFireParameters cmds = null)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    obj.MusicType_Property.HasBeenSet = on;
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    obj.Sounds.HasBeenSet = on;
                    break;
                default:
                    RegionDataCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRegionDataSounds obj,
            NotifyingUnsetParameters cmds = null)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    obj.MusicType_Property.Unset(cmds);
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    obj.Sounds.Unset(cmds);
                    break;
                default:
                    RegionDataCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRegionDataSounds obj)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return obj.MusicType_Property.HasBeenSet;
                case RegionDataSounds_FieldIndex.Sounds:
                    return obj.Sounds.HasBeenSet;
                default:
                    return RegionDataCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRegionDataSoundsGetter obj)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return obj.MusicType;
                case RegionDataSounds_FieldIndex.Sounds:
                    return obj.Sounds;
                default:
                    return RegionDataCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRegionDataSounds item,
            NotifyingUnsetParameters cmds = null)
        {
            item.MusicType_Property.Unset(cmds.ToUnsetParams());
            item.Sounds.Unset(cmds.ToUnsetParams());
        }

        public static RegionDataSounds_Mask<bool> GetEqualsMask(
            this IRegionDataSoundsGetter item,
            IRegionDataSoundsGetter rhs)
        {
            var ret = new RegionDataSounds_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionDataSoundsGetter item,
            IRegionDataSoundsGetter rhs,
            RegionDataSounds_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.MusicType = item.MusicType_Property.Equals(rhs.MusicType_Property, (l, r) => l == r);
            if (item.Sounds.HasBeenSet == rhs.Sounds.HasBeenSet)
            {
                if (item.Sounds.HasBeenSet)
                {
                    ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionSound_Mask<bool>>>>();
                    ret.Sounds.Specific = item.Sounds.SelectAgainst<RegionSound, MaskItem<bool, RegionSound_Mask<bool>>>(rhs.Sounds, ((l, r) =>
                    {
                        MaskItem<bool, RegionSound_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, RegionSound_Mask<bool>>();
                        itemRet.Specific = RegionSoundCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.Sounds.Overall);
                    ret.Sounds.Overall = ret.Sounds.Overall && ret.Sounds.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionSound_Mask<bool>>>>();
                    ret.Sounds.Overall = true;
                }
            }
            else
            {
                ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionSound_Mask<bool>>>>();
                ret.Sounds.Overall = false;
            }
            RegionDataCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRegionDataSoundsGetter item,
            string name = null,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionDataSoundsGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionDataSounds)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionDataSounds)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {item.MusicType}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Sounds)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionDataSoundsGetter item,
            RegionDataSounds_Mask<bool?> checkMask)
        {
            if (checkMask.MusicType.HasValue && checkMask.MusicType.Value != item.MusicType_Property.HasBeenSet) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds.HasBeenSet) return false;
            return true;
        }

        public static RegionDataSounds_Mask<bool> GetHasBeenSetMask(IRegionDataSoundsGetter item)
        {
            var ret = new RegionDataSounds_Mask<bool>();
            ret.MusicType = item.MusicType_Property.HasBeenSet;
            ret.Sounds = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionSound_Mask<bool>>>>(item.Sounds.HasBeenSet, item.Sounds.Select((i) => new MaskItem<bool, RegionSound_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static RegionDataSounds_FieldIndex? ConvertFieldIndex(RegionData_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static RegionDataSounds_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataSounds_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataSounds_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataSounds_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IRegionDataSoundsGetter item,
            bool doMasks,
            out RegionDataSounds_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IRegionDataSoundsGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataSounds");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataSounds");
            }
            if (item.MusicType_Property.HasBeenSet)
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: elem,
                    name: nameof(item.MusicType),
                    item: item.MusicType_Property,
                    fieldIndex: (int)RegionDataSounds_FieldIndex.MusicType,
                    errorMask: errorMask);
            }
            if (item.Sounds.HasBeenSet)
            {
                ListXmlTranslation<RegionSound>.Instance.Write(
                    node: elem,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)RegionDataSounds_FieldIndex.Sounds,
                    errorMask: errorMask,
                    transl: (XElement subNode, RegionSound subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<RegionSound>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataSounds item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionDataSounds_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataSounds item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            RegionDataSounds item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Write(
                writer,
                item.MusicType_Property,
                length: 4,
                fieldIndex: (int)RegionDataSounds_FieldIndex.MusicType,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(RegionDataSounds_Registration.RDMD_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionSound>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                fieldIndex: (int)RegionDataSounds_FieldIndex.Sounds,
                recordType: RegionDataSounds_Registration.RDSD_HEADER,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<RegionSound>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RegionDataSounds_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataSounds_Mask<T>>
    {
        #region Ctors
        public RegionDataSounds_Mask()
        {
        }

        public RegionDataSounds_Mask(T initialValue)
        {
            this.MusicType = initialValue;
            this.Sounds = new MaskItem<T, IEnumerable<MaskItem<T, RegionSound_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T MusicType;
        public MaskItem<T, IEnumerable<MaskItem<T, RegionSound_Mask<T>>>> Sounds;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataSounds_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataSounds_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MusicType?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.MusicType)) return false;
            if (this.Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null)
                {
                    foreach (var item in this.Sounds.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataSounds_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataSounds_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataSounds_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.MusicType = eval(this.MusicType);
            if (Sounds != null)
            {
                obj.Sounds = new MaskItem<R, IEnumerable<MaskItem<R, RegionSound_Mask<R>>>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (Sounds.Specific != null)
                {
                    List<MaskItem<R, RegionSound_Mask<R>>> l = new List<MaskItem<R, RegionSound_Mask<R>>>();
                    obj.Sounds.Specific = l;
                    foreach (var item in Sounds.Specific)
                    {
                        MaskItem<R, RegionSound_Mask<R>> mask = default(MaskItem<R, RegionSound_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, RegionSound_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Sounds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataSounds_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataSounds_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataSounds_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {MusicType}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Sounds.Overall != null)
                        {
                            fg.AppendLine(Sounds.Overall.ToString());
                        }
                        if (Sounds.Specific != null)
                        {
                            foreach (var subItem in Sounds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataSounds_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataSounds_ErrorMask>
    {
        #region Members
        public Exception MusicType;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>> Sounds;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return MusicType;
                case RegionDataSounds_FieldIndex.Sounds:
                    return Sounds;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    this.MusicType = ex;
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    this.MusicType = (Exception)obj;
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (MusicType != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataSounds_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"MusicType => {MusicType}");
            fg.AppendLine("Sounds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Sounds.Overall != null)
                {
                    fg.AppendLine(Sounds.Overall.ToString());
                }
                if (Sounds.Specific != null)
                {
                    foreach (var subItem in Sounds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RegionDataSounds_ErrorMask Combine(RegionDataSounds_ErrorMask rhs)
        {
            var ret = new RegionDataSounds_ErrorMask();
            ret.MusicType = this.MusicType.Combine(rhs.MusicType);
            ret.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), new List<MaskItem<Exception, RegionSound_ErrorMask>>(this.Sounds.Specific.And(rhs.Sounds.Specific)));
            return ret;
        }
        public static RegionDataSounds_ErrorMask Combine(RegionDataSounds_ErrorMask lhs, RegionDataSounds_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataSounds_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataSounds_ErrorMask();
        }
        #endregion

    }
    public class RegionDataSounds_CopyMask : RegionData_CopyMask
    {
        #region Members
        public bool MusicType;
        public MaskItem<CopyOption, RegionSound_CopyMask> Sounds;
        #endregion

    }
    #endregion





    #endregion

}
