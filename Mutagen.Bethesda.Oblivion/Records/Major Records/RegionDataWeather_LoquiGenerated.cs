/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataWeather : RegionData, IRegionDataWeather, ILoquiObject<RegionDataWeather>, ILoquiObjectSetter, IEquatable<RegionDataWeather>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataWeather_Registration.Instance;
        public new static RegionDataWeather_Registration Registration => RegionDataWeather_Registration.Instance;

        #region Ctor
        public RegionDataWeather()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<WeatherChance> _Weathers = new NotifyingList<WeatherChance>();
        public INotifyingList<WeatherChance> Weathers => _Weathers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<WeatherChance> WeathersEnumerable
        {
            get => _Weathers;
            set => _Weathers.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<WeatherChance> IRegionDataWeather.Weathers => _Weathers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<WeatherChance> IRegionDataWeatherGetter.Weathers => _Weathers;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RegionDataWeatherCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RegionDataWeatherCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RegionDataWeatherCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RegionDataWeatherCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<RegionDataWeather>.GetEqualsMask(RegionDataWeather rhs) => RegionDataWeatherCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRegionDataWeatherGetter>.GetEqualsMask(IRegionDataWeatherGetter rhs) => RegionDataWeatherCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RegionDataWeatherCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RegionDataWeather_Mask<bool> printMask = null)
        {
            return RegionDataWeatherCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataWeatherCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new RegionDataWeather_Mask<bool> GetHasBeenSetMask()
        {
            return RegionDataWeatherCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataWeather rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataWeather rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Weathers.HasBeenSet != rhs.Weathers.HasBeenSet) return false;
            if (Weathers.HasBeenSet)
            {
                if (!this.Weathers.SequenceEqual(rhs.Weathers)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Weathers.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Weathers).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static RegionDataWeather Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataWeather Create_XML(
            XElement root,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionDataWeather Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataWeather();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataWeather Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RegionDataWeather Create_XML(
            string path,
            out RegionDataWeather_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RegionDataWeather Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RegionDataWeather Create_XML(
            Stream stream,
            out RegionDataWeather_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RegionDataWeather>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RegionDataWeather_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<RegionDataWeather>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RegionDataWeather_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RegionDataWeather_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out RegionData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out RegionDataWeather_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as RegionDataWeather_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            RegionDataWeatherCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_XML_Internal(
            RegionDataWeather item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Weathers":
                    ListXmlTranslation<WeatherChance>.Instance.ParseInto(
                        root: root,
                        item: item._Weathers,
                        fieldIndex: (int)RegionDataWeather_FieldIndex.Weathers,
                        errorMask: errorMask,
                        transl: LoquiXmlTranslation<WeatherChance>.Instance.Parse);
                    break;
                default:
                    RegionData.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataWeather_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in Weathers.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static RegionDataWeather Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataWeather Create_Binary(
            MutagenFrame frame,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionDataWeather Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataWeather();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    RegionDataWeather_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataWeather Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionDataWeather Create_Binary(
            string path,
            out RegionDataWeather_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RegionDataWeather Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionDataWeather Create_Binary(
            Stream stream,
            out RegionDataWeather_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as RegionDataWeather_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            RegionDataWeatherCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionDataWeather item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<RegionDataWeather_FieldIndex?> Fill_Binary_RecordTypes(
            RegionDataWeather item,
            MutagenFrame frame,
            RegionDataWeather_FieldIndex? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "RDWT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherChance>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item._Weathers,
                        fieldIndex: (int)RegionDataWeather_FieldIndex.Weathers,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<WeatherChance>.Instance.Parse);
                    return TryGet<RegionDataWeather_FieldIndex?>.Succeed(RegionDataWeather_FieldIndex.Weathers);
                default:
                    return RegionData.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => RegionDataWeatherCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public RegionDataWeather Copy(
            RegionDataWeather_CopyMask copyMask = null,
            IRegionDataWeatherGetter def = null)
        {
            return RegionDataWeather.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionDataWeather Copy(
            IRegionDataWeather item,
            RegionDataWeather_CopyMask copyMask = null,
            IRegionDataWeatherGetter def = null)
        {
            RegionDataWeather ret;
            if (item.GetType().Equals(typeof(RegionDataWeather)))
            {
                ret = new RegionDataWeather();
            }
            else
            {
                ret = (RegionDataWeather)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionDataWeather Copy_ToLoqui(
            IRegionDataWeatherGetter item,
            RegionDataWeather_CopyMask copyMask = null,
            IRegionDataWeatherGetter def = null)
        {
            RegionDataWeather ret;
            if (item.GetType().Equals(typeof(RegionDataWeather)))
            {
                ret = new RegionDataWeather() as RegionDataWeather;
            }
            else
            {
                ret = (RegionDataWeather)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRegionDataWeatherGetter rhs,
            RegionDataWeather_CopyMask copyMask,
            IRegionDataWeatherGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataWeatherGetter rhs,
            out RegionDataWeather_ErrorMask errorMask,
            RegionDataWeather_CopyMask copyMask = null,
            IRegionDataWeatherGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataWeatherCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionDataWeatherGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataWeather_CopyMask copyMask = null,
            IRegionDataWeatherGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RegionDataWeatherCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    this._Weathers.SetTo((IEnumerable<WeatherChance>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionDataWeatherCommon.Clear(this, cmds);
        }


        public new static RegionDataWeather Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionDataWeather();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionDataWeather(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_RegionDataWeather(RegionDataWeather obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionDataWeather_FieldIndex enu))
            {
                CopyInInternal_RegionData(obj, pair);
            }
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    obj._Weathers.SetTo((IEnumerable<WeatherChance>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RegionDataWeather obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionDataWeather : IRegionDataWeatherGetter, IRegionData, ILoquiClass<IRegionDataWeather, IRegionDataWeatherGetter>, ILoquiClass<RegionDataWeather, IRegionDataWeatherGetter>
    {
        new INotifyingList<WeatherChance> Weathers { get; }
    }

    public partial interface IRegionDataWeatherGetter : IRegionDataGetter
    {
        #region Weathers
        INotifyingListGetter<WeatherChance> Weathers { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataWeather_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        Weathers = 3,
    }
    #endregion

    #region Registration
    public class RegionDataWeather_Registration : ILoquiRegistration
    {
        public static readonly RegionDataWeather_Registration Instance = new RegionDataWeather_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 115,
            version: 0);

        public const string GUID = "920ad66e-13de-42ac-a509-355019f9519a";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(RegionDataWeather_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataWeather_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataWeather);

        public static readonly Type GetterType = typeof(IRegionDataWeatherGetter);

        public static readonly Type SetterType = typeof(IRegionDataWeather);

        public static readonly Type CommonType = typeof(RegionDataWeatherCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataWeather";

        public const string Name = "RegionDataWeather";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "WEATHERS":
                    return (ushort)RegionDataWeather_FieldIndex.Weathers;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return true;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return true;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return "Weathers";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return typeof(NotifyingList<WeatherChance>);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDWT_HEADER = new RecordType("RDWT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionDataWeatherCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionDataWeather item,
            IRegionDataWeatherGetter rhs,
            IRegionDataWeatherGetter def,
            ErrorMaskBuilder errorMask,
            RegionDataWeather_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            RegionDataCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Weathers.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)RegionDataWeather_FieldIndex.Weathers);
                try
                {
                    item.Weathers.SetToWithDefault(
                        rhs: rhs.Weathers,
                        def: def?.Weathers,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Weathers.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(WeatherChance);
                                    return WeatherChance.Copy(
                                        r,
                                        copyMask?.Weathers?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Weathers.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRegionDataWeather obj,
            NotifyingFireParameters cmds = null)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    obj.Weathers.HasBeenSet = on;
                    break;
                default:
                    RegionDataCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRegionDataWeather obj,
            NotifyingUnsetParameters cmds = null)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    obj.Weathers.Unset(cmds);
                    break;
                default:
                    RegionDataCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRegionDataWeather obj)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return obj.Weathers.HasBeenSet;
                default:
                    return RegionDataCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRegionDataWeatherGetter obj)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return obj.Weathers;
                default:
                    return RegionDataCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRegionDataWeather item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Weathers.Unset(cmds.ToUnsetParams());
        }

        public static RegionDataWeather_Mask<bool> GetEqualsMask(
            this IRegionDataWeatherGetter item,
            IRegionDataWeatherGetter rhs)
        {
            var ret = new RegionDataWeather_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionDataWeatherGetter item,
            IRegionDataWeatherGetter rhs,
            RegionDataWeather_Mask<bool> ret)
        {
            if (rhs == null) return;
            if (item.Weathers.HasBeenSet == rhs.Weathers.HasBeenSet)
            {
                if (item.Weathers.HasBeenSet)
                {
                    ret.Weathers = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherChance_Mask<bool>>>>();
                    ret.Weathers.Specific = item.Weathers.SelectAgainst<WeatherChance, MaskItem<bool, WeatherChance_Mask<bool>>>(rhs.Weathers, ((l, r) =>
                    {
                        MaskItem<bool, WeatherChance_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, WeatherChance_Mask<bool>>();
                        itemRet.Specific = WeatherChanceCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.Weathers.Overall);
                    ret.Weathers.Overall = ret.Weathers.Overall && ret.Weathers.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Weathers = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherChance_Mask<bool>>>>();
                    ret.Weathers.Overall = true;
                }
            }
            else
            {
                ret.Weathers = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherChance_Mask<bool>>>>();
                ret.Weathers.Overall = false;
            }
            RegionDataCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRegionDataWeatherGetter item,
            string name = null,
            RegionDataWeather_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionDataWeatherGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataWeather_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionDataWeather)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionDataWeather)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Weathers?.Overall ?? true)
                {
                    fg.AppendLine("Weathers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Weathers)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionDataWeatherGetter item,
            RegionDataWeather_Mask<bool?> checkMask)
        {
            if (checkMask.Weathers.Overall.HasValue && checkMask.Weathers.Overall.Value != item.Weathers.HasBeenSet) return false;
            return true;
        }

        public static RegionDataWeather_Mask<bool> GetHasBeenSetMask(IRegionDataWeatherGetter item)
        {
            var ret = new RegionDataWeather_Mask<bool>();
            ret.Weathers = new MaskItem<bool, IEnumerable<MaskItem<bool, WeatherChance_Mask<bool>>>>(item.Weathers.HasBeenSet, item.Weathers.Select((i) => new MaskItem<bool, WeatherChance_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static RegionDataWeather_FieldIndex? ConvertFieldIndex(RegionData_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static RegionDataWeather_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataWeather_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataWeather_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataWeather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IRegionDataWeatherGetter item,
            bool doMasks,
            out RegionDataWeather_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_XML_Internal(
            XElement node,
            IRegionDataWeatherGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataWeather");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataWeather");
            }
            if (item.Weathers.HasBeenSet)
            {
                ListXmlTranslation<WeatherChance>.Instance.Write(
                    node: elem,
                    name: nameof(item.Weathers),
                    item: item.Weathers,
                    fieldIndex: (int)RegionDataWeather_FieldIndex.Weathers,
                    errorMask: errorMask,
                    transl: (XElement subNode, WeatherChance subItem, ErrorMaskBuilder listSubMask) =>
                    {
                        LoquiXmlTranslation<WeatherChance>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataWeather item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionDataWeather_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            RegionDataWeather item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            RegionDataWeather item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherChance>.Instance.Write(
                writer: writer,
                items: item.Weathers,
                fieldIndex: (int)RegionDataWeather_FieldIndex.Weathers,
                recordType: RegionDataWeather_Registration.RDWT_HEADER,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<WeatherChance>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RegionDataWeather_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataWeather_Mask<T>>
    {
        #region Ctors
        public RegionDataWeather_Mask()
        {
        }

        public RegionDataWeather_Mask(T initialValue)
        {
            this.Weathers = new MaskItem<T, IEnumerable<MaskItem<T, WeatherChance_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, WeatherChance_Mask<T>>>> Weathers;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataWeather_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataWeather_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Weathers?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Weathers != null)
            {
                if (!eval(this.Weathers.Overall)) return false;
                if (this.Weathers.Specific != null)
                {
                    foreach (var item in this.Weathers.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataWeather_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataWeather_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataWeather_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Weathers != null)
            {
                obj.Weathers = new MaskItem<R, IEnumerable<MaskItem<R, WeatherChance_Mask<R>>>>();
                obj.Weathers.Overall = eval(this.Weathers.Overall);
                if (Weathers.Specific != null)
                {
                    List<MaskItem<R, WeatherChance_Mask<R>>> l = new List<MaskItem<R, WeatherChance_Mask<R>>>();
                    obj.Weathers.Specific = l;
                    foreach (var item in Weathers.Specific)
                    {
                        MaskItem<R, WeatherChance_Mask<R>> mask = default(MaskItem<R, WeatherChance_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, WeatherChance_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Weathers.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataWeather_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataWeather_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataWeather_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Weathers?.Overall ?? true)
                {
                    fg.AppendLine("Weathers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Weathers.Overall != null)
                        {
                            fg.AppendLine(Weathers.Overall.ToString());
                        }
                        if (Weathers.Specific != null)
                        {
                            foreach (var subItem in Weathers.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataWeather_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataWeather_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>> Weathers;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return Weathers;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    this.Weathers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    this.Weathers = (MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Weathers != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataWeather_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Weathers =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Weathers.Overall != null)
                {
                    fg.AppendLine(Weathers.Overall.ToString());
                }
                if (Weathers.Specific != null)
                {
                    foreach (var subItem in Weathers.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RegionDataWeather_ErrorMask Combine(RegionDataWeather_ErrorMask rhs)
        {
            var ret = new RegionDataWeather_ErrorMask();
            ret.Weathers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>(this.Weathers.Overall.Combine(rhs.Weathers.Overall), new List<MaskItem<Exception, WeatherChance_ErrorMask>>(this.Weathers.Specific.And(rhs.Weathers.Specific)));
            return ret;
        }
        public static RegionDataWeather_ErrorMask Combine(RegionDataWeather_ErrorMask lhs, RegionDataWeather_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataWeather_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataWeather_ErrorMask();
        }
        #endregion

    }
    public class RegionDataWeather_CopyMask : RegionData_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, WeatherChance_CopyMask> Weathers;
        #endregion

    }
    #endregion




    #endregion

}
