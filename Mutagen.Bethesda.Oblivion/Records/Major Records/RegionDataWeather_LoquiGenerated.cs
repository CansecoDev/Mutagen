/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataWeather : 
        RegionData,
        IRegionDataWeather,
        ILoquiObject<RegionDataWeather>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<RegionDataWeather>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataWeather_Registration.Instance;
        public new static RegionDataWeather_Registration Registration => RegionDataWeather_Registration.Instance;

        #region Ctor
        public RegionDataWeather()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<WeatherChance> _Weathers = new SourceSetList<WeatherChance>();
        public ISourceSetList<WeatherChance> Weathers => _Weathers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<WeatherChance> WeathersEnumerable
        {
            get => _Weathers.Items;
            set => _Weathers.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<WeatherChance> IRegionDataWeather.Weathers => _Weathers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<WeatherChance> IRegionDataWeatherGetter.Weathers => _Weathers;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<RegionDataWeather>.GetEqualsMask(RegionDataWeather rhs, EqualsMaskHelper.Include include) => RegionDataWeatherCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IRegionDataWeatherGetter>.GetEqualsMask(IRegionDataWeatherGetter rhs, EqualsMaskHelper.Include include) => RegionDataWeatherCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            RegionDataWeather_Mask<bool> printMask = null)
        {
            return RegionDataWeatherCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataWeatherCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new RegionDataWeather_Mask<bool> GetHasBeenSetMask()
        {
            return RegionDataWeatherCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataWeather rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataWeather rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Weathers.HasBeenSet != rhs.Weathers.HasBeenSet) return false;
            if (Weathers.HasBeenSet)
            {
                if (!this.Weathers.SequenceEqual(rhs.Weathers)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Weathers.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Weathers).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionDataWeather Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionDataWeather_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionDataWeather Create_Xml(
            XElement node,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataWeather_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataWeather Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RegionDataWeather() : null;
                    break;
                default:
                    break;
            }
            var ret = new RegionDataWeather();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionDataWeatherCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionDataWeather Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionDataWeather_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataWeather Create_Xml(
            string path,
            out RegionDataWeather_ErrorMask errorMask,
            RegionDataWeather_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataWeather Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataWeather_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionDataWeather Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionDataWeather_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataWeather Create_Xml(
            Stream stream,
            out RegionDataWeather_ErrorMask errorMask,
            RegionDataWeather_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataWeather Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataWeather_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataWeather_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out RegionDataWeather_ErrorMask errorMask,
            RegionDataWeather_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out RegionDataWeather_ErrorMask errorMask,
            RegionDataWeather_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out RegionData_ErrorMask errorMask,
            bool doMasks = true,
            RegionData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            RegionDataWeatherCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            RegionDataWeather item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    RegionData.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataWeather_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Weathers.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            foreach (var item in Weathers.Items)
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionDataWeather Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataWeather Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataWeather Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataWeather();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionDataWeather_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                errorMask: errorMaskBuilder,
                recordTypeConverter: null);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataWeatherCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionDataWeather item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            RegionDataWeather item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54574452: // RDWT
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherChance>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Weathers,
                        fieldIndex: (int)RegionDataWeather_FieldIndex.Weathers,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out WeatherChance listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<WeatherChance>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)RegionDataWeather_FieldIndex.Weathers);
                }
                default:
                    return RegionData.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public RegionDataWeather Copy(
            RegionDataWeather_CopyMask copyMask = null,
            IRegionDataWeatherGetter def = null)
        {
            return RegionDataWeather.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionDataWeather Copy(
            IRegionDataWeather item,
            RegionDataWeather_CopyMask copyMask = null,
            IRegionDataWeatherGetter def = null)
        {
            RegionDataWeather ret;
            if (item.GetType().Equals(typeof(RegionDataWeather)))
            {
                ret = new RegionDataWeather();
            }
            else
            {
                ret = (RegionDataWeather)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionDataWeather Copy_ToLoqui(
            IRegionDataWeatherGetter item,
            RegionDataWeather_CopyMask copyMask = null,
            IRegionDataWeatherGetter def = null)
        {
            RegionDataWeather ret;
            if (item.GetType().Equals(typeof(RegionDataWeather)))
            {
                ret = new RegionDataWeather() as RegionDataWeather;
            }
            else
            {
                ret = (RegionDataWeather)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            IRegionDataGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IRegionDataWeatherGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataWeatherGetter rhs,
            RegionDataWeather_CopyMask copyMask,
            IRegionDataWeatherGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataWeatherGetter rhs,
            out RegionDataWeather_ErrorMask errorMask,
            RegionDataWeather_CopyMask copyMask = null,
            IRegionDataWeatherGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataWeatherCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionDataWeatherGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataWeather_CopyMask copyMask = null,
            IRegionDataWeatherGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RegionDataWeatherCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    this._Weathers.SetTo((IEnumerable<WeatherChance>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionDataWeatherCommon.Clear(this, cmds);
        }


        public new static RegionDataWeather Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionDataWeather();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionDataWeather(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_RegionDataWeather(RegionDataWeather obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionDataWeather_FieldIndex enu))
            {
                CopyInInternal_RegionData(obj, pair);
            }
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    obj._Weathers.SetTo((IEnumerable<WeatherChance>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRegionDataWeather : IRegionDataWeatherGetter, IRegionData, ILoquiClass<IRegionDataWeather, IRegionDataWeatherGetter>, ILoquiClass<RegionDataWeather, IRegionDataWeatherGetter>
    {
        new ISourceSetList<WeatherChance> Weathers { get; }
    }

    public partial interface IRegionDataWeatherGetter : IRegionDataGetter
    {
        #region Weathers
        IObservableSetList<WeatherChance> Weathers { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataWeather_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        Weathers = 3,
    }
    #endregion

    #region Registration
    public class RegionDataWeather_Registration : ILoquiRegistration
    {
        public static readonly RegionDataWeather_Registration Instance = new RegionDataWeather_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 115,
            version: 0);

        public const string GUID = "920ad66e-13de-42ac-a509-355019f9519a";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(RegionDataWeather_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataWeather_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataWeather);

        public static readonly Type GetterType = typeof(IRegionDataWeatherGetter);

        public static readonly Type SetterType = typeof(IRegionDataWeather);

        public static readonly Type CommonType = typeof(RegionDataWeatherCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataWeather";

        public const string Name = "RegionDataWeather";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "WEATHERS":
                    return (ushort)RegionDataWeather_FieldIndex.Weathers;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return true;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return true;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return "Weathers";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return typeof(SourceSetList<WeatherChance>);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDWT_HEADER = new RecordType("RDWT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionDataWeatherCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionDataWeather item,
            IRegionDataWeatherGetter rhs,
            IRegionDataWeatherGetter def,
            ErrorMaskBuilder errorMask,
            RegionDataWeather_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            RegionDataCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Weathers.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)RegionDataWeather_FieldIndex.Weathers);
                try
                {
                    item.Weathers.SetToWithDefault(
                        rhs: rhs.Weathers,
                        def: def?.Weathers,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Weathers.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return WeatherChance.Copy(
                                        r,
                                        copyMask?.Weathers?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Weathers.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(
            IRegionDataWeather item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Weathers.Unset();
        }

        public static RegionDataWeather_Mask<bool> GetEqualsMask(
            this IRegionDataWeatherGetter item,
            IRegionDataWeatherGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionDataWeather_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionDataWeatherGetter item,
            IRegionDataWeatherGetter rhs,
            RegionDataWeather_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Weathers = item.Weathers.CollectionEqualsHelper(
                rhs.Weathers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            RegionDataCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRegionDataWeatherGetter item,
            string name = null,
            RegionDataWeather_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionDataWeatherGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataWeather_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionDataWeather)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionDataWeather)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Weathers?.Overall ?? true)
                {
                    fg.AppendLine("Weathers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Weathers)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionDataWeatherGetter item,
            RegionDataWeather_Mask<bool?> checkMask)
        {
            if (checkMask.Weathers.Overall.HasValue && checkMask.Weathers.Overall.Value != item.Weathers.HasBeenSet) return false;
            return true;
        }

        public static RegionDataWeather_Mask<bool> GetHasBeenSetMask(IRegionDataWeatherGetter item)
        {
            var ret = new RegionDataWeather_Mask<bool>();
            ret.Weathers = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WeatherChance_Mask<bool>>>>(item.Weathers.HasBeenSet, item.Weathers.WithIndex().Select((i) => new MaskItemIndexed<bool, WeatherChance_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        public static RegionDataWeather_FieldIndex? ConvertFieldIndex(RegionData_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static RegionDataWeather_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataWeather_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataWeather_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataWeather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            RegionDataWeather item,
            bool doMasks,
            out RegionDataWeather_ErrorMask errorMask,
            RegionDataWeather_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            RegionDataWeather item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataWeather");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataWeather");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this RegionDataWeather item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            RegionDataCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Weathers.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)RegionDataWeather_FieldIndex.Weathers) ?? true))
            {
                ListXmlTranslation<WeatherChance>.Instance.Write(
                    node: node,
                    name: nameof(item.Weathers),
                    item: item.Weathers,
                    fieldIndex: (int)RegionDataWeather_FieldIndex.Weathers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RegionDataWeather_FieldIndex.Weathers),
                    transl: (XElement subNode, WeatherChance subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<WeatherChance>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml(
            this RegionDataWeather item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataWeatherCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this RegionDataWeather item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Weathers":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataWeather_FieldIndex.Weathers);
                        if (ListXmlTranslation<WeatherChance>.Instance.Parse(
                            node: node,
                            enumer: out var WeathersItem,
                            transl: LoquiXmlTranslation<WeatherChance>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Weathers.SetTo(WeathersItem);
                        }
                        else
                        {
                            item.Weathers.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    RegionDataCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataWeather item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionDataWeather_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataWeather_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RegionDataWeather item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            RegionDataWeather item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            RegionDataCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Weathers.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherChance>.Instance.Write(
                    writer: writer,
                    items: item.Weathers,
                    fieldIndex: (int)RegionDataWeather_FieldIndex.Weathers,
                    recordType: RegionDataWeather_Registration.RDWT_HEADER,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, WeatherChance subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        LoquiBinaryTranslation<WeatherChance>.Instance.Write(
                            writer: subWriter,
                            item: subItem,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class RegionDataWeather_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataWeather_Mask<T>>
    {
        #region Ctors
        public RegionDataWeather_Mask()
        {
        }

        public RegionDataWeather_Mask(T initialValue)
        {
            this.Weathers = new MaskItem<T, IEnumerable<MaskItemIndexed<T, WeatherChance_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, WeatherChance_Mask<T>>>> Weathers;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataWeather_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataWeather_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Weathers?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Weathers != null)
            {
                if (!eval(this.Weathers.Overall)) return false;
                if (this.Weathers.Specific != null)
                {
                    foreach (var item in this.Weathers.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataWeather_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataWeather_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataWeather_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Weathers != null)
            {
                obj.Weathers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherChance_Mask<R>>>>();
                obj.Weathers.Overall = eval(this.Weathers.Overall);
                if (Weathers.Specific != null)
                {
                    List<MaskItemIndexed<R, WeatherChance_Mask<R>>> l = new List<MaskItemIndexed<R, WeatherChance_Mask<R>>>();
                    obj.Weathers.Specific = l;
                    foreach (var item in Weathers.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, WeatherChance_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, WeatherChance_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Weathers.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataWeather_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataWeather_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataWeather_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Weathers?.Overall ?? true)
                {
                    fg.AppendLine("Weathers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Weathers.Overall != null)
                        {
                            fg.AppendLine(Weathers.Overall.ToString());
                        }
                        if (Weathers.Specific != null)
                        {
                            foreach (var subItem in Weathers.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataWeather_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataWeather_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>> Weathers;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    return Weathers;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    this.Weathers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataWeather_FieldIndex enu = (RegionDataWeather_FieldIndex)index;
            switch (enu)
            {
                case RegionDataWeather_FieldIndex.Weathers:
                    this.Weathers = (MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Weathers != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataWeather_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Weathers =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Weathers.Overall != null)
                {
                    fg.AppendLine(Weathers.Overall.ToString());
                }
                if (Weathers.Specific != null)
                {
                    foreach (var subItem in Weathers.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RegionDataWeather_ErrorMask Combine(RegionDataWeather_ErrorMask rhs)
        {
            var ret = new RegionDataWeather_ErrorMask();
            ret.Weathers = new MaskItem<Exception, IEnumerable<MaskItem<Exception, WeatherChance_ErrorMask>>>(this.Weathers.Overall.Combine(rhs.Weathers.Overall), new List<MaskItem<Exception, WeatherChance_ErrorMask>>(this.Weathers.Specific.And(rhs.Weathers.Specific)));
            return ret;
        }
        public static RegionDataWeather_ErrorMask Combine(RegionDataWeather_ErrorMask lhs, RegionDataWeather_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataWeather_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataWeather_ErrorMask();
        }
        #endregion

    }
    public class RegionDataWeather_CopyMask : RegionData_CopyMask
    {
        public RegionDataWeather_CopyMask()
        {
        }

        public RegionDataWeather_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Weathers = new MaskItem<CopyOption, WeatherChance_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public MaskItem<CopyOption, WeatherChance_CopyMask> Weathers;
        #endregion

    }

    public class RegionDataWeather_TranslationMask : RegionData_TranslationMask
    {
        #region Members
        public MaskItem<bool, WeatherChance_TranslationMask> Weathers;
        #endregion

        #region Ctors
        public RegionDataWeather_TranslationMask()
            : base()
        {
        }

        public RegionDataWeather_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Weathers = new MaskItem<bool, WeatherChance_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Weathers?.Overall ?? true, Weathers?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
