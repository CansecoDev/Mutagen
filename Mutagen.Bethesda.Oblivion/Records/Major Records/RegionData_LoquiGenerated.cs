/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class RegionData : IRegionData, ILoquiObject<RegionData>, ILoquiObjectSetter, IEquatable<RegionData>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionData_Registration.Instance;
        public static RegionData_Registration Registration => RegionData_Registration.Instance;

        #region Ctor
        public RegionData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DataType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<RegionData.RegionDataType> _DataType = NotifyingItem.Factory<RegionData.RegionDataType>();
        public INotifyingItemGetter<RegionData.RegionDataType> DataType_Property => _DataType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionData.RegionDataType DataType
        {
            get => this._DataType.Item;
            protected set => this._DataType.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<RegionData.RegionDataType> IRegionDataGetter.DataType_Property => this.DataType_Property;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<RegionData.RegionDataFlag> _Flags = NotifyingItem.Factory<RegionData.RegionDataFlag>();
        public INotifyingItem<RegionData.RegionDataFlag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionData.RegionDataFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<RegionData.RegionDataFlag> IRegionData.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<RegionData.RegionDataFlag> IRegionDataGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Priority
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<Byte> _Priority = NotifyingItem.Factory<Byte>();
        public INotifyingItem<Byte> Priority_Property => _Priority;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Priority
        {
            get => this._Priority.Item;
            set => this._Priority.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte> IRegionData.Priority_Property => this.Priority_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte> IRegionDataGetter.Priority_Property => this.Priority_Property;
        #endregion

        #region Loqui Getter Interface

        protected virtual object GetNthObject(ushort index) => RegionDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected virtual bool GetNthObjectHasBeenSet(ushort index) => RegionDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected virtual void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RegionDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected virtual void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RegionDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<RegionData>.GetEqualsMask(RegionData rhs) => RegionDataCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRegionDataGetter>.GetEqualsMask(IRegionDataGetter rhs) => RegionDataCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RegionDataCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RegionData_Mask<bool> printMask = null)
        {
            return RegionDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public RegionData_Mask<bool> GetHasBeenSetMask()
        {
            return RegionDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionData rhs)
        {
            if (rhs == null) return false;
            if (DataType != rhs.DataType) return false;
            if (Flags != rhs.Flags) return false;
            if (Priority != rhs.Priority) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(DataType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Priority).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Copy In
        public virtual void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RegionData, RegionData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RegionData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RegionData, RegionData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RegionData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RegionData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out RegionData_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (RegionData_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out RegionData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out RegionData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public abstract void Write_XML(
            XmlWriter writer,
            string name = null);
        public abstract void Write_XML(
            string path,
            string name = null);
        public abstract void Write_XML(
            Stream stream,
            string name = null);

        protected virtual object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RegionDataCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_XML_Internal(
            RegionData item,
            XElement root,
            string name,
            Func<RegionData_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "DataType":
                    item._DataType.SetIfSucceeded(EnumXmlTranslation<RegionData.RegionDataType>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)RegionData_FieldIndex.DataType,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Flags":
                    item._Flags.SetIfSucceeded(EnumXmlTranslation<RegionData.RegionDataFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)RegionData_FieldIndex.Flags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "Priority":
                    item._Priority.SetIfSucceeded(ByteXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)RegionData_FieldIndex.Priority,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionData_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Copy In
        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<RegionData, RegionData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out RegionData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<RegionData, RegionData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out RegionData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out RegionData_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RegionData_ErrorMask errorMask)
        {
            errorMask = (RegionData_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out RegionData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RegionData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public abstract void Write_Binary(MutagenWriter writer);
        public abstract void Write_Binary(string path);
        public abstract void Write_Binary(Stream stream);

        protected virtual object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            RegionDataCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static TryGet<RegionData_FieldIndex?> Fill_Binary_RecordTypes(
            RegionData item,
            MutagenFrame frame,
            Func<RegionData_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "RDAT":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    using (var dataFrame = frame.Spawn(contentLength))
                    {
                        item._DataType.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionData.RegionDataType>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(4)),
                            fieldIndex: (int)RegionData_FieldIndex.DataType,
                            errorMask: errorMask));
                        item._Flags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionData.RegionDataFlag>.Instance.Parse(
                            frame: dataFrame.Spawn(new ContentLength(1)),
                            fieldIndex: (int)RegionData_FieldIndex.Flags,
                            errorMask: errorMask));
                        item._Priority.SetIfSucceeded(Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Parse(
                            frame: dataFrame,
                            fieldIndex: (int)RegionData_FieldIndex.Priority,
                            errorMask: errorMask));
                        dataFrame.SetPosition(dataFrame.Position + 2);
                    }
                    return TryGet<RegionData_FieldIndex?>.Succeed(RegionData_FieldIndex.Priority);
                default:
                    return TryGet<RegionData_FieldIndex?>.Failure;
            }
        }

        #endregion

        public RegionData Copy(
            RegionData_CopyMask copyMask = null,
            IRegionDataGetter def = null)
        {
            return RegionData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionData Copy(
            IRegionData item,
            RegionData_CopyMask copyMask = null,
            IRegionDataGetter def = null)
        {
            RegionData ret = (RegionData)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionData Copy_ToLoqui(
            IRegionDataGetter item,
            RegionData_CopyMask copyMask = null,
            IRegionDataGetter def = null)
        {
            RegionData ret = (RegionData)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRegionDataGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataGetter rhs,
            RegionData_CopyMask copyMask,
            IRegionDataGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionDataGetter rhs,
            out RegionData_ErrorMask errorMask,
            RegionData_CopyMask copyMask = null,
            IRegionDataGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RegionData_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new RegionData_ErrorMask();
                }
                return retErrorMask;
            };
            RegionDataCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected virtual void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    this._DataType.Set(
                        (RegionData.RegionDataType)obj,
                        cmds);
                    break;
                case RegionData_FieldIndex.Flags:
                    this._Flags.Set(
                        (RegionData.RegionDataFlag)obj,
                        cmds);
                    break;
                case RegionData_FieldIndex.Priority:
                    this._Priority.Set(
                        (Byte)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public virtual void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionDataCommon.Clear(this, cmds);
        }


        protected static void CopyInInternal_RegionData(RegionData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    obj._DataType.Set(
                        (RegionData.RegionDataType)pair.Value,
                        null);
                    break;
                case RegionData_FieldIndex.Flags:
                    obj._Flags.Set(
                        (RegionData.RegionDataFlag)pair.Value,
                        null);
                    break;
                case RegionData_FieldIndex.Priority:
                    obj._Priority.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RegionData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionData : IRegionDataGetter, ILoquiClass<IRegionData, IRegionDataGetter>, ILoquiClass<RegionData, IRegionDataGetter>
    {
        new RegionData.RegionDataFlag Flags { get; set; }
        new INotifyingItem<RegionData.RegionDataFlag> Flags_Property { get; }

        new Byte Priority { get; set; }
        new INotifyingItem<Byte> Priority_Property { get; }

    }

    public partial interface IRegionDataGetter : ILoquiObject
    {
        #region DataType
        RegionData.RegionDataType DataType { get; }
        INotifyingItemGetter<RegionData.RegionDataType> DataType_Property { get; }

        #endregion
        #region Flags
        RegionData.RegionDataFlag Flags { get; }
        INotifyingItemGetter<RegionData.RegionDataFlag> Flags_Property { get; }

        #endregion
        #region Priority
        Byte Priority { get; }
        INotifyingItemGetter<Byte> Priority_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionData_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
    }
    #endregion

    #region Registration
    public class RegionData_Registration : ILoquiRegistration
    {
        public static readonly RegionData_Registration Instance = new RegionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 109,
            version: 0);

        public const string GUID = "46664e25-f4ef-428c-b13f-c81ff3127714";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(RegionData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionData_ErrorMask);

        public static readonly Type ClassType = typeof(RegionData);

        public static readonly Type GetterType = typeof(IRegionDataGetter);

        public static readonly Type SetterType = typeof(IRegionData);

        public static readonly Type CommonType = typeof(RegionDataCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionData";

        public const string Name = "RegionData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DATATYPE":
                    return (ushort)RegionData_FieldIndex.DataType;
                case "FLAGS":
                    return (ushort)RegionData_FieldIndex.Flags;
                case "PRIORITY":
                    return (ushort)RegionData_FieldIndex.Priority;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return "DataType";
                case RegionData_FieldIndex.Flags:
                    return "Flags";
                case RegionData_FieldIndex.Priority:
                    return "Priority";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return true;
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return typeof(RegionData.RegionDataType);
                case RegionData_FieldIndex.Flags:
                    return typeof(RegionData.RegionDataFlag);
                case RegionData_FieldIndex.Priority:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionData item,
            IRegionDataGetter rhs,
            IRegionDataGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            RegionData_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RegionData_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.Priority ?? true)
            {
                try
                {
                    item.Priority_Property.Set(
                        value: rhs.Priority,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RegionData_FieldIndex.Priority, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRegionData obj,
            NotifyingFireParameters cmds = null)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRegionData obj,
            NotifyingUnsetParameters cmds = null)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case RegionData_FieldIndex.Flags:
                    obj.Flags = default(RegionData.RegionDataFlag);
                    break;
                case RegionData_FieldIndex.Priority:
                    obj.Priority = default(Byte);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRegionData obj)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRegionDataGetter obj)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return obj.DataType;
                case RegionData_FieldIndex.Flags:
                    return obj.Flags;
                case RegionData_FieldIndex.Priority:
                    return obj.Priority;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRegionData item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Flags = default(RegionData.RegionDataFlag);
            item.Priority = default(Byte);
        }

        public static RegionData_Mask<bool> GetEqualsMask(
            this IRegionDataGetter item,
            IRegionDataGetter rhs)
        {
            var ret = new RegionData_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionDataGetter item,
            IRegionDataGetter rhs,
            RegionData_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.DataType = item.DataType == rhs.DataType;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Priority = item.Priority == rhs.Priority;
        }

        public static string ToString(
            this IRegionDataGetter item,
            string name = null,
            RegionData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionDataGetter item,
            FileGeneration fg,
            string name = null,
            RegionData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DataType ?? true)
                {
                    fg.AppendLine($"DataType => {item.DataType}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Priority ?? true)
                {
                    fg.AppendLine($"Priority => {item.Priority}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionDataGetter item,
            RegionData_Mask<bool?> checkMask)
        {
            return true;
        }

        public static RegionData_Mask<bool> GetHasBeenSetMask(IRegionDataGetter item)
        {
            var ret = new RegionData_Mask<bool>();
            ret.DataType = true;
            ret.Flags = true;
            ret.Priority = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRegionDataGetter item,
            bool doMasks,
            out RegionData_ErrorMask errorMask,
            string name = null)
        {
            RegionData_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RegionData_ErrorMask()) : default(Func<RegionData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRegionDataGetter item,
            Func<RegionData_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.RegionData"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.RegionData");
                    }
                    EnumXmlTranslation<RegionData.RegionDataType>.Instance.Write(
                        writer: writer,
                        name: nameof(item.DataType),
                        item: item.DataType_Property,
                        fieldIndex: (int)RegionData_FieldIndex.DataType,
                        errorMask: errorMask);
                    EnumXmlTranslation<RegionData.RegionDataFlag>.Instance.Write(
                        writer: writer,
                        name: nameof(item.Flags),
                        item: item.Flags_Property,
                        fieldIndex: (int)RegionData_FieldIndex.Flags,
                        errorMask: errorMask);
                    ByteXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Priority),
                        item: item.Priority_Property,
                        fieldIndex: (int)RegionData_FieldIndex.Priority,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionData item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionData_ErrorMask errorMask)
        {
            RegionData_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RegionData_ErrorMask()) : default(Func<RegionData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            RegionData item,
            RecordTypeConverter recordTypeConverter,
            Func<RegionData_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: RegionData_Registration.RDAT_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            RegionData item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<RegionData_ErrorMask> errorMask)
        {
            using (HeaderExport.ExportSubRecordHeader(writer, RegionData_Registration.RDAT_HEADER))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionData.RegionDataType>.Instance.Write(
                    writer,
                    item.DataType_Property,
                    length: new ContentLength(4),
                    fieldIndex: (int)RegionData_FieldIndex.DataType,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionData.RegionDataFlag>.Instance.Write(
                    writer,
                    item.Flags_Property,
                    length: new ContentLength(1),
                    fieldIndex: (int)RegionData_FieldIndex.Flags,
                    errorMask: errorMask);
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Priority_Property,
                    fieldIndex: (int)RegionData_FieldIndex.Priority,
                    errorMask: errorMask);
                writer.WriteZeros(2);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RegionData_Mask<T> : IMask<T>, IEquatable<RegionData_Mask<T>>
    {
        #region Ctors
        public RegionData_Mask()
        {
        }

        public RegionData_Mask(T initialValue)
        {
            this.DataType = initialValue;
            this.Flags = initialValue;
            this.Priority = initialValue;
        }
        #endregion

        #region Members
        public T DataType;
        public T Flags;
        public T Priority;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.DataType, rhs.DataType)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Priority, rhs.Priority)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.DataType?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Priority?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.DataType)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Priority)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RegionData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionData_Mask<R> obj, Func<T, R> eval)
        {
            obj.DataType = eval(this.DataType);
            obj.Flags = eval(this.Flags);
            obj.Priority = eval(this.Priority);
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DataType ?? true)
                {
                    fg.AppendLine($"DataType => {DataType}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Priority ?? true)
                {
                    fg.AppendLine($"Priority => {Priority}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionData_ErrorMask : IErrorMask, IErrorMask<RegionData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception DataType;
        public Exception Flags;
        public Exception Priority;
        #endregion

        #region IErrorMask
        public virtual void SetNthException(int index, Exception ex)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    this.DataType = ex;
                    break;
                case RegionData_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case RegionData_FieldIndex.Priority:
                    this.Priority = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    this.DataType = (Exception)obj;
                    break;
                case RegionData_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case RegionData_FieldIndex.Priority:
                    this.Priority = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (DataType != null) return true;
            if (Flags != null) return true;
            if (Priority != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"DataType => {DataType}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Priority => {Priority}");
        }
        #endregion

        #region Combine
        public RegionData_ErrorMask Combine(RegionData_ErrorMask rhs)
        {
            var ret = new RegionData_ErrorMask();
            ret.DataType = this.DataType.Combine(rhs.DataType);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Priority = this.Priority.Combine(rhs.Priority);
            return ret;
        }
        public static RegionData_ErrorMask Combine(RegionData_ErrorMask lhs, RegionData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class RegionData_CopyMask
    {
        #region Members
        public bool DataType;
        public bool Flags;
        public bool Priority;
        #endregion

    }
    #endregion




    #endregion

}
