/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class RegionData :
        LoquiNotifyingObject,
        IRegionDataInternal,
        ILoquiObjectSetter<RegionData>,
        ILinkSubContainer,
        IEquatable<RegionData>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionData_Registration.Instance;
        public static RegionData_Registration Registration => RegionData_Registration.Instance;
        protected virtual object CommonInstance => RegionDataCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public RegionData()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DataType
        private RegionData.RegionDataType _DataType;
        public RegionData.RegionDataType DataType
        {
            get => this._DataType;
            protected set
            {
                this.RDATDataTypeState |= RDATDataType.Has;
                this.RaiseAndSetIfChanged(ref this._DataType, value, nameof(DataType));
            }
        }
        #endregion
        #region Flags
        private RegionData.RegionDataFlag _Flags;
        public RegionData.RegionDataFlag Flags
        {
            get => this._Flags;
            set
            {
                this.RDATDataTypeState |= RDATDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
            }
        }
        #endregion
        #region Priority
        private Byte _Priority;
        public Byte Priority
        {
            get => this._Priority;
            set
            {
                this.RDATDataTypeState |= RDATDataType.Has;
                this.RaiseAndSetIfChanged(ref this._Priority, value, nameof(Priority));
            }
        }
        #endregion
        #region RDATDataTypeState
        private RegionData.RDATDataType _RDATDataTypeState;
        public RegionData.RDATDataType RDATDataTypeState
        {
            get => this._RDATDataTypeState;
            set => this.RaiseAndSetIfChanged(ref this._RDATDataTypeState, value, nameof(RDATDataTypeState));
        }
        RegionData.RDATDataType IRegionDataInternal.RDATDataTypeState
        {
            get => this.RDATDataTypeState;
            set => this.RDATDataTypeState = value;
        }
        RegionData.RDATDataType IRegionDataInternalGetter.RDATDataTypeState
        {
            get => this.RDATDataTypeState;
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataInternalGetter)rhs, include);
        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionData rhs)
        {
            if (rhs == null) return false;
            if (this.DataType != rhs.DataType) return false;
            if (this.Flags != rhs.Flags) return false;
            if (this.Priority != rhs.Priority) return false;
            if (this.RDATDataTypeState != rhs.RDATDataTypeState) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(DataType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Priority).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RDATDataTypeState).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected virtual object XmlWriteTranslator => RegionDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionData CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionData_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionData CreateFromXml(
            XElement node,
            out RegionData_ErrorMask errorMask,
            bool doMasks = true,
            RegionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RegionData CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return null;
                    break;
                default:
                    break;
            }
            RegionData ret;
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown RegionData subclass: {node.Name.LocalName}");
            }
            return ret;
        }

        public static RegionData CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionData CreateFromXml(
            string path,
            out RegionData_ErrorMask errorMask,
            RegionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionData CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RegionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionData CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionData CreateFromXml(
            Stream stream,
            out RegionData_ErrorMask errorMask,
            RegionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            RegionData item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasRDATDataType":
                    item.RDATDataTypeState |= RegionData.RDATDataType.Has;
                    break;
                case "DataType":
                    try
                    {
                        errorMask?.PushIndex((int)RegionData_FieldIndex.DataType);
                        if (EnumXmlTranslation<RegionData.RegionDataType>.Instance.Parse(
                            node: node,
                            item: out RegionData.RegionDataType DataTypeParse,
                            errorMask: errorMask))
                        {
                            item.DataType = DataTypeParse;
                        }
                        else
                        {
                            item.DataType = default(RegionData.RegionDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.RDATDataTypeState |= RegionData.RDATDataType.Has;
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected virtual bool GetHasBeenSet(int index)
        {
            switch ((RegionData_FieldIndex)index)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionData_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum RDATDataType
        {
            Has = 1
        }
        public virtual IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield break;
        }

        public virtual void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
        }

        #endregion

        #region Binary Translation
        protected virtual object BinaryWriteTranslator => RegionDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        protected static void FillBinaryStructs(
            RegionData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            RegionData item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54414452: // RDAT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.RDATDataTypeState = RDATDataType.Has;
                    }
                    if (EnumBinaryTranslation<RegionData.RegionDataType>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(4),
                        item: out RegionData.RegionDataType DataTypeParse))
                    {
                        item.DataType = DataTypeParse;
                    }
                    else
                    {
                        item.DataType = default(RegionData.RegionDataType);
                    }
                    if (EnumBinaryTranslation<RegionData.RegionDataFlag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(1),
                        item: out RegionData.RegionDataFlag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(RegionData.RegionDataFlag);
                    }
                    item.Priority = dataFrame.ReadUInt8();
                    dataFrame.SetPosition(dataFrame.Position + 2);
                    return TryGet<int?>.Succeed((int)RegionData_FieldIndex.Priority);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public RegionData Copy(
            RegionData_CopyMask copyMask = null,
            RegionData def = null)
        {
            return RegionData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionData Copy(
            RegionData item,
            RegionData_CopyMask copyMask = null,
            RegionData def = null)
        {
            RegionData ret = (RegionData)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionData Copy_ToLoqui(
            RegionData item,
            RegionData_CopyMask copyMask = null,
            RegionData def = null)
        {
            RegionData ret = (RegionData)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public virtual void CopyFieldsFrom(RegionData rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            RegionData rhs,
            RegionData_CopyMask copyMask,
            RegionData def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            RegionData rhs,
            out RegionData_ErrorMask errorMask,
            RegionData_CopyMask copyMask = null,
            RegionData def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionDataCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RegionData_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            RegionData rhs,
            ErrorMaskBuilder errorMask,
            RegionData_CopyMask copyMask = null,
            RegionData def = null)
        {
            RegionDataCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected virtual void SetNthObject(ushort index, object obj)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    this.DataType = (RegionData.RegionDataType)obj;
                    break;
                case RegionData_FieldIndex.Flags:
                    this.Flags = (RegionData.RegionDataFlag)obj;
                    break;
                case RegionData_FieldIndex.Priority:
                    this.Priority = (Byte)obj;
                    break;
                case RegionData_FieldIndex.RDATDataTypeState:
                    this.RDATDataTypeState = (RegionData.RDATDataType)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void Clear()
        {
            RegionDataCommon.Instance.Clear(this);
        }

        protected static void CopyInInternal_RegionData(RegionData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    obj.DataType = (RegionData.RegionDataType)pair.Value;
                    break;
                case RegionData_FieldIndex.Flags:
                    obj.Flags = (RegionData.RegionDataFlag)pair.Value;
                    break;
                case RegionData_FieldIndex.Priority:
                    obj.Priority = (Byte)pair.Value;
                    break;
                case RegionData_FieldIndex.RDATDataTypeState:
                    obj.RDATDataTypeState = (RegionData.RDATDataType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRegionData :
        IRegionDataInternalGetter,
        ILoquiObjectSetter<IRegionDataInternal>
    {
        new RegionData.RegionDataFlag Flags { get; set; }

        new Byte Priority { get; set; }

        void CopyFieldsFrom(
            RegionData rhs,
            ErrorMaskBuilder errorMask = null,
            RegionData_CopyMask copyMask = null,
            RegionData def = null);
    }

    public partial interface IRegionDataInternal :
        IRegionData,
        IRegionDataInternalGetter
    {
        new RegionData.RDATDataType RDATDataTypeState { get; set; }

    }

    public partial interface IRegionDataGetter :
        ILoquiObject,
        ILoquiObject<IRegionDataInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region DataType
        RegionData.RegionDataType DataType { get; }

        #endregion
        #region Flags
        RegionData.RegionDataFlag Flags { get; }

        #endregion
        #region Priority
        Byte Priority { get; }

        #endregion

    }

    public partial interface IRegionDataInternalGetter : IRegionDataGetter
    {
        #region RDATDataTypeState
        RegionData.RDATDataType RDATDataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RegionDataMixIn
    {
        public static void Clear(this IRegionDataInternal item)
        {
            ((RegionDataCommon)item.CommonInstance).Clear(item: item);
        }

        public static RegionData_Mask<bool> GetEqualsMask(
            this IRegionDataInternalGetter item,
            IRegionDataInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionDataCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionDataInternalGetter item,
            string name = null,
            RegionData_Mask<bool> printMask = null)
        {
            return ((RegionDataCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionDataInternalGetter item,
            FileGeneration fg,
            string name = null,
            RegionData_Mask<bool> printMask = null)
        {
            ((RegionDataCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRegionDataInternalGetter item,
            RegionData_Mask<bool?> checkMask)
        {
            return ((RegionDataCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RegionData_Mask<bool> GetHasBeenSetMask(this IRegionDataInternalGetter item)
        {
            var ret = new RegionData_Mask<bool>();
            ((RegionDataCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionData_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        RDATDataTypeState = 3,
    }
    #endregion

    #region Registration
    public class RegionData_Registration : ILoquiRegistration
    {
        public static readonly RegionData_Registration Instance = new RegionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 109,
            version: 0);

        public const string GUID = "46664e25-f4ef-428c-b13f-c81ff3127714";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(RegionData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionData_ErrorMask);

        public static readonly Type ClassType = typeof(RegionData);

        public static readonly Type GetterType = typeof(IRegionDataGetter);

        public static readonly Type InternalGetterType = typeof(IRegionDataInternalGetter);

        public static readonly Type SetterType = typeof(IRegionData);

        public static readonly Type InternalSetterType = typeof(IRegionDataInternal);

        public static readonly Type CommonType = typeof(RegionDataCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionData";

        public const string Name = "RegionData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DATATYPE":
                    return (ushort)RegionData_FieldIndex.DataType;
                case "FLAGS":
                    return (ushort)RegionData_FieldIndex.Flags;
                case "PRIORITY":
                    return (ushort)RegionData_FieldIndex.Priority;
                case "RDATDATATYPESTATE":
                    return (ushort)RegionData_FieldIndex.RDATDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return "DataType";
                case RegionData_FieldIndex.Flags:
                    return "Flags";
                case RegionData_FieldIndex.Priority:
                    return "Priority";
                case RegionData_FieldIndex.RDATDataTypeState:
                    return "RDATDataTypeState";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return true;
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return typeof(RegionData.RegionDataType);
                case RegionData_FieldIndex.Flags:
                    return typeof(RegionData.RegionDataFlag);
                case RegionData_FieldIndex.Priority:
                    return typeof(Byte);
                case RegionData_FieldIndex.RDATDataTypeState:
                    return typeof(RegionData.RDATDataType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RegionDataXmlWriteTranslation);
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RegionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionDataCommon
    {
        public static readonly RegionDataCommon Instance = new RegionDataCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            RegionData item,
            RegionData rhs,
            RegionData def,
            ErrorMaskBuilder errorMask,
            RegionData_CopyMask copyMask)
        {
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)RegionData_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Priority ?? true)
            {
                errorMask?.PushIndex((int)RegionData_FieldIndex.Priority);
                try
                {
                    item.Priority = rhs.Priority;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IRegionDataInternal item)
        {
            ClearPartial();
            item.Flags = default(RegionData.RegionDataFlag);
            item.Priority = default(Byte);
        }

        public RegionData_Mask<bool> GetEqualsMask(
            IRegionDataInternalGetter item,
            IRegionDataInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionData_Mask<bool>();
            ((RegionDataCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IRegionDataInternalGetter item,
            IRegionDataInternalGetter rhs,
            RegionData_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.DataType = item.DataType == rhs.DataType;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Priority = item.Priority == rhs.Priority;
        }

        public string ToString(
            IRegionDataInternalGetter item,
            string name = null,
            RegionData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IRegionDataInternalGetter item,
            FileGeneration fg,
            string name = null,
            RegionData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RegionData =>");
            }
            else
            {
                fg.AppendLine($"{name} (RegionData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IRegionDataInternalGetter item,
            FileGeneration fg,
            RegionData_Mask<bool> printMask = null)
        {
            if (printMask?.DataType ?? true)
            {
                fg.AppendLine($"DataType => {item.DataType}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Priority ?? true)
            {
                fg.AppendLine($"Priority => {item.Priority}");
            }
            if (printMask?.RDATDataTypeState ?? true)
            {
            }
        }

        public bool HasBeenSet(
            IRegionDataInternalGetter item,
            RegionData_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IRegionDataInternalGetter item,
            RegionData_Mask<bool> mask)
        {
            mask.DataType = true;
            mask.Flags = true;
            mask.Priority = true;
            mask.RDATDataTypeState = true;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RegionDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RegionDataXmlWriteTranslation Instance = new RegionDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRegionDataInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.RDATDataTypeState.HasFlag(RegionData.RDATDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)RegionData_FieldIndex.DataType) ?? true))
                {
                    EnumXmlTranslation<RegionData.RegionDataType>.Instance.Write(
                        node: node,
                        name: nameof(item.DataType),
                        item: item.DataType,
                        fieldIndex: (int)RegionData_FieldIndex.DataType,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)RegionData_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<RegionData.RegionDataFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)RegionData_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)RegionData_FieldIndex.Priority) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Priority),
                        item: item.Priority,
                        fieldIndex: (int)RegionData_FieldIndex.Priority,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)RegionData_FieldIndex.RDATDataTypeState) ?? true))
            {
                EnumXmlTranslation<RegionData.RDATDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.RDATDataTypeState),
                    item: item.RDATDataTypeState,
                    fieldIndex: (int)RegionData_FieldIndex.RDATDataTypeState,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IRegionDataInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionDataInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRegionDataInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRegionDataInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RegionDataXmlCreateTranslation
    {
        public readonly static RegionDataXmlCreateTranslation Instance = new RegionDataXmlCreateTranslation();

        public static void FillPublicXml(
            IRegionDataInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRegionDataInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)RegionData_FieldIndex.Flags);
                        if (EnumXmlTranslation<RegionData.RegionDataFlag>.Instance.Parse(
                            node: node,
                            item: out RegionData.RegionDataFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(RegionData.RegionDataFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Priority":
                    try
                    {
                        errorMask?.PushIndex((int)RegionData_FieldIndex.Priority);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte PriorityParse,
                            errorMask: errorMask))
                        {
                            item.Priority = PriorityParse;
                        }
                        else
                        {
                            item.Priority = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RDATDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)RegionData_FieldIndex.RDATDataTypeState);
                        if (EnumXmlTranslation<RegionData.RDATDataType>.Instance.Parse(
                            node: node,
                            item: out RegionData.RDATDataType RDATDataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.RDATDataTypeState = RDATDataTypeStateParse;
                        }
                        else
                        {
                            item.RDATDataTypeState = default(RegionData.RDATDataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class RegionDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRegionDataInternalGetter item,
            XElement node,
            out RegionData_ErrorMask errorMask,
            bool doMasks = true,
            RegionData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRegionDataInternalGetter item,
            string path,
            out RegionData_ErrorMask errorMask,
            RegionData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionDataInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionDataInternalGetter item,
            Stream stream,
            out RegionData_ErrorMask errorMask,
            RegionData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRegionDataInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRegionDataInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RegionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRegionDataInternalGetter item,
            XElement node,
            string name = null,
            RegionData_TranslationMask translationMask = null)
        {
            ((RegionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IRegionDataInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RegionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionDataInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RegionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class RegionData_Mask<T> : IMask<T>, IEquatable<RegionData_Mask<T>>
    {
        #region Ctors
        public RegionData_Mask()
        {
        }

        public RegionData_Mask(T initialValue)
        {
            this.DataType = initialValue;
            this.Flags = initialValue;
            this.Priority = initialValue;
            this.RDATDataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T DataType;
        public T Flags;
        public T Priority;
        public T RDATDataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.DataType, rhs.DataType)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Priority, rhs.Priority)) return false;
            if (!object.Equals(this.RDATDataTypeState, rhs.RDATDataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.DataType?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Priority?.GetHashCode());
            ret = ret.CombineHashCode(this.RDATDataTypeState?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.DataType)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Priority)) return false;
            if (!eval(this.RDATDataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RegionData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionData_Mask<R> obj, Func<T, R> eval)
        {
            obj.DataType = eval(this.DataType);
            obj.Flags = eval(this.Flags);
            obj.Priority = eval(this.Priority);
            obj.RDATDataTypeState = eval(this.RDATDataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.DataType ?? true)
                {
                    fg.AppendLine($"DataType => {DataType}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Priority ?? true)
                {
                    fg.AppendLine($"Priority => {Priority}");
                }
                if (printMask?.RDATDataTypeState ?? true)
                {
                    fg.AppendLine($"RDATDataTypeState => {RDATDataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionData_ErrorMask : IErrorMask, IErrorMask<RegionData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception DataType;
        public Exception Flags;
        public Exception Priority;
        public Exception RDATDataTypeState;
        #endregion

        #region IErrorMask
        public virtual object GetNthMask(int index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return DataType;
                case RegionData_FieldIndex.Flags:
                    return Flags;
                case RegionData_FieldIndex.Priority:
                    return Priority;
                case RegionData_FieldIndex.RDATDataTypeState:
                    return RDATDataTypeState;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthException(int index, Exception ex)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    this.DataType = ex;
                    break;
                case RegionData_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case RegionData_FieldIndex.Priority:
                    this.Priority = ex;
                    break;
                case RegionData_FieldIndex.RDATDataTypeState:
                    this.RDATDataTypeState = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    this.DataType = (Exception)obj;
                    break;
                case RegionData_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case RegionData_FieldIndex.Priority:
                    this.Priority = (Exception)obj;
                    break;
                case RegionData_FieldIndex.RDATDataTypeState:
                    this.RDATDataTypeState = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (DataType != null) return true;
            if (Flags != null) return true;
            if (Priority != null) return true;
            if (RDATDataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"DataType => {DataType}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Priority => {Priority}");
            fg.AppendLine($"RDATDataTypeState => {RDATDataTypeState}");
        }
        #endregion

        #region Combine
        public RegionData_ErrorMask Combine(RegionData_ErrorMask rhs)
        {
            var ret = new RegionData_ErrorMask();
            ret.DataType = this.DataType.Combine(rhs.DataType);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Priority = this.Priority.Combine(rhs.Priority);
            ret.RDATDataTypeState = this.RDATDataTypeState.Combine(rhs.RDATDataTypeState);
            return ret;
        }
        public static RegionData_ErrorMask Combine(RegionData_ErrorMask lhs, RegionData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionData_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionData_ErrorMask();
        }
        #endregion

    }
    public class RegionData_CopyMask
    {
        public RegionData_CopyMask()
        {
        }

        public RegionData_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.DataType = defaultOn;
            this.Flags = defaultOn;
            this.Priority = defaultOn;
            this.RDATDataTypeState = defaultOn;
        }

        #region Members
        public bool DataType;
        public bool Flags;
        public bool Priority;
        public bool RDATDataTypeState;
        #endregion

    }

    public class RegionData_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool DataType;
        public bool Flags;
        public bool Priority;
        public bool RDATDataTypeState;
        #endregion

        #region Ctors
        public RegionData_TranslationMask()
        {
        }

        public RegionData_TranslationMask(bool defaultOn)
        {
            this.DataType = defaultOn;
            this.Flags = defaultOn;
            this.Priority = defaultOn;
            this.RDATDataTypeState = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected virtual void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((DataType, null));
            ret.Add((Flags, null));
            ret.Add((Priority, null));
            ret.Add((RDATDataTypeState, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RegionDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RegionDataBinaryWriteTranslation Instance = new RegionDataBinaryWriteTranslation();

        public static void Write_Embedded(
            IRegionDataInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
        }

        public static void Write_RecordTypes(
            IRegionDataInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.RDATDataTypeState.HasFlag(RegionData.RDATDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(RegionData_Registration.RDAT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionData.RegionDataType>.Instance.Write(
                        writer,
                        item.DataType,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionData.RegionDataFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 1);
                    writer.Write(item.Priority);
                    writer.WriteZeros(2);
                }
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            IRegionDataInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: RegionData_Registration.RDAT_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionDataInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RegionDataBinaryCreateTranslation
    {
        public readonly static RegionDataBinaryCreateTranslation Instance = new RegionDataBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class RegionDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRegionDataInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IRegionDataInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((RegionDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IRegionDataInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RegionDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
