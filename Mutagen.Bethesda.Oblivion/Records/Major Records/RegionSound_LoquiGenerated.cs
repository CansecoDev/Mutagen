/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionSound : IRegionSound, ILoquiObject<RegionSound>, ILoquiObjectSetter, IEquatable<RegionSound>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionSound_Registration.Instance;
        public static RegionSound_Registration Registration => RegionSound_Registration.Instance;

        #region Ctor
        public RegionSound()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Sound
        public FormIDLink<Sound> Sound_Property { get; } = new FormIDLink<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Sound Sound { get => Sound_Property.Item; set => Sound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Sound> IRegionSoundGetter.Sound_Property => this.Sound_Property;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<RegionSound.Flag> _Flags = NotifyingItem.Factory<RegionSound.Flag>();
        public INotifyingItem<RegionSound.Flag> Flags_Property => _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionSound.Flag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<RegionSound.Flag> IRegionSound.Flags_Property => this.Flags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<RegionSound.Flag> IRegionSoundGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region Chance
        protected INotifyingItem<Single> _Chance = NotifyingItem.Factory<Single>();
        public INotifyingItem<Single> Chance_Property => _Chance;
        public Single Chance
        {
            get => this._Chance.Item;
            set => this._Chance.Set(value.PutInRange(Chance_Range.Min, Chance_Range.Max));
        }
        INotifyingItem<Single> IRegionSound.Chance_Property => this.Chance_Property;
        INotifyingItemGetter<Single> IRegionSoundGetter.Chance_Property => this.Chance_Property;
        public static RangeFloat Chance_Range = new RangeFloat(0f, 100f);
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RegionSoundCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RegionSoundCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RegionSoundCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RegionSoundCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<RegionSound>.GetEqualsMask(RegionSound rhs) => RegionSoundCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRegionSoundGetter>.GetEqualsMask(IRegionSoundGetter rhs) => RegionSoundCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RegionSoundCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RegionSound_Mask<bool> printMask = null)
        {
            return RegionSoundCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionSoundCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public RegionSound_Mask<bool> GetHasBeenSetMask()
        {
            return RegionSoundCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionSound rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionSound rhs)
        {
            if (rhs == null) return false;
            if (!this.Sound_Property.Equals(rhs.Sound_Property)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (!this.Chance.EqualsWithin(rhs.Chance)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Sound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Chance).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static RegionSound Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionSound Create_XML(
            XElement root,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionSound Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionSound();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionSound Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RegionSound Create_XML(
            string path,
            out RegionSound_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RegionSound Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RegionSound Create_XML(
            Stream stream,
            out RegionSound_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RegionSound>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RegionSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<RegionSound>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RegionSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RegionSound_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            RegionSoundCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            RegionSound item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Sound":
                    FormIDXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)RegionSound_FieldIndex.Sound,
                        item: item.Sound_Property,
                        errorMask: errorMask);
                    break;
                case "Flags":
                    EnumXmlTranslation<RegionSound.Flag>.Instance.ParseInto(
                        root,
                        fieldIndex: (int)RegionSound_FieldIndex.Flags,
                        item: item._Flags,
                        errorMask: errorMask);
                    break;
                case "Chance":
                    FloatXmlTranslation.Instance.ParseInto(
                        root,
                        fieldIndex: (int)RegionSound_FieldIndex.Chance,
                        item: item._Chance,
                        errorMask: errorMask);
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Sound_Property;
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionSound Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionSound Create_Binary(
            MutagenFrame frame,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static RegionSound Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionSound();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionSound Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionSound Create_Binary(
            string path,
            out RegionSound_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RegionSound Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RegionSound Create_Binary(
            Stream stream,
            out RegionSound_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionSoundCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            RegionSound item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.ParseInto(
                frame: frame,
                item: item.Sound_Property,
                fieldIndex: (int)RegionSound_FieldIndex.Sound,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionSound.Flag>.Instance.ParseInto(
                frame: frame.SpawnWithLength(4),
                item: item._Flags,
                fieldIndex: (int)RegionSound_FieldIndex.Flags,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.ParseInto(
                frame: frame,
                item: item._Chance,
                fieldIndex: (int)RegionSound_FieldIndex.Chance,
                errorMask: errorMask);
        }

        #endregion

        public RegionSound Copy(
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null)
        {
            return RegionSound.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionSound Copy(
            IRegionSound item,
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null)
        {
            RegionSound ret;
            if (item.GetType().Equals(typeof(RegionSound)))
            {
                ret = new RegionSound();
            }
            else
            {
                ret = (RegionSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionSound Copy_ToLoqui(
            IRegionSoundGetter item,
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null)
        {
            RegionSound ret;
            if (item.GetType().Equals(typeof(RegionSound)))
            {
                ret = new RegionSound() as RegionSound;
            }
            else
            {
                ret = (RegionSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRegionSoundGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionSoundGetter rhs,
            RegionSound_CopyMask copyMask,
            IRegionSoundGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionSoundGetter rhs,
            out RegionSound_ErrorMask errorMask,
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionSoundCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionSoundGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            RegionSoundCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    this.Sound_Property.Set(
                        (FormIDLink<Sound>)obj,
                        cmds);
                    break;
                case RegionSound_FieldIndex.Flags:
                    this._Flags.Set(
                        (RegionSound.Flag)obj,
                        cmds);
                    break;
                case RegionSound_FieldIndex.Chance:
                    this._Chance.Set(
                        (Single)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionSoundCommon.Clear(this, cmds);
        }


        public static RegionSound Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionSound();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionSound(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RegionSound(RegionSound obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionSound_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    obj.Sound_Property.Set(
                        (FormIDLink<Sound>)pair.Value,
                        null);
                    break;
                case RegionSound_FieldIndex.Flags:
                    obj._Flags.Set(
                        (RegionSound.Flag)pair.Value,
                        null);
                    break;
                case RegionSound_FieldIndex.Chance:
                    obj._Chance.Set(
                        (Single)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RegionSound obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionSound : IRegionSoundGetter, ILoquiClass<IRegionSound, IRegionSoundGetter>, ILoquiClass<RegionSound, IRegionSoundGetter>
    {
        new Sound Sound { get; set; }
        new RegionSound.Flag Flags { get; set; }
        new INotifyingItem<RegionSound.Flag> Flags_Property { get; }

        new Single Chance { get; set; }
        new INotifyingItem<Single> Chance_Property { get; }

    }

    public partial interface IRegionSoundGetter : ILoquiObject
    {
        #region Sound
        Sound Sound { get; }
        FormIDLink<Sound> Sound_Property { get; }

        #endregion
        #region Flags
        RegionSound.Flag Flags { get; }
        INotifyingItemGetter<RegionSound.Flag> Flags_Property { get; }

        #endregion
        #region Chance
        Single Chance { get; }
        INotifyingItemGetter<Single> Chance_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionSound_FieldIndex
    {
        Sound = 0,
        Flags = 1,
        Chance = 2,
    }
    #endregion

    #region Registration
    public class RegionSound_Registration : ILoquiRegistration
    {
        public static readonly RegionSound_Registration Instance = new RegionSound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 118,
            version: 0);

        public const string GUID = "faf7a6a8-9444-4e36-98e6-5a7af8122e29";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(RegionSound_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionSound_ErrorMask);

        public static readonly Type ClassType = typeof(RegionSound);

        public static readonly Type GetterType = typeof(IRegionSoundGetter);

        public static readonly Type SetterType = typeof(IRegionSound);

        public static readonly Type CommonType = typeof(RegionSoundCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionSound";

        public const string Name = "RegionSound";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SOUND":
                    return (ushort)RegionSound_FieldIndex.Sound;
                case "FLAGS":
                    return (ushort)RegionSound_FieldIndex.Flags;
                case "CHANCE":
                    return (ushort)RegionSound_FieldIndex.Chance;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    return "Sound";
                case RegionSound_FieldIndex.Flags:
                    return "Flags";
                case RegionSound_FieldIndex.Chance:
                    return "Chance";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    return typeof(FormIDLink<Sound>);
                case RegionSound_FieldIndex.Flags:
                    return typeof(RegionSound.Flag);
                case RegionSound_FieldIndex.Chance:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionSoundCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionSound item,
            IRegionSoundGetter rhs,
            IRegionSoundGetter def,
            ErrorMaskBuilder errorMask,
            RegionSound_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Sound ?? true)
            {
                errorMask.PushIndex((int)RegionSound_FieldIndex.Sound);
                try
                {
                    item.Sound_Property.Set(
                        value: rhs.Sound,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask.PushIndex((int)RegionSound_FieldIndex.Flags);
                try
                {
                    item.Flags_Property.Set(
                        value: rhs.Flags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Chance ?? true)
            {
                errorMask.PushIndex((int)RegionSound_FieldIndex.Chance);
                try
                {
                    item.Chance_Property.Set(
                        value: rhs.Chance,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRegionSound obj,
            NotifyingFireParameters cmds = null)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRegionSound obj,
            NotifyingUnsetParameters cmds = null)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    obj.Sound = default(FormIDLink<Sound>);
                    break;
                case RegionSound_FieldIndex.Flags:
                    obj.Flags = default(RegionSound.Flag);
                    break;
                case RegionSound_FieldIndex.Chance:
                    obj.Chance = default(Single);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRegionSound obj)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRegionSoundGetter obj)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    return obj.Sound;
                case RegionSound_FieldIndex.Flags:
                    return obj.Flags;
                case RegionSound_FieldIndex.Chance:
                    return obj.Chance;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRegionSound item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Sound = default(FormIDLink<Sound>);
            item.Flags = default(RegionSound.Flag);
            item.Chance = default(Single);
        }

        public static RegionSound_Mask<bool> GetEqualsMask(
            this IRegionSoundGetter item,
            IRegionSoundGetter rhs)
        {
            var ret = new RegionSound_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionSoundGetter item,
            IRegionSoundGetter rhs,
            RegionSound_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Sound = item.Sound == rhs.Sound;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Chance = item.Chance == rhs.Chance;
        }

        public static string ToString(
            this IRegionSoundGetter item,
            string name = null,
            RegionSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionSoundGetter item,
            FileGeneration fg,
            string name = null,
            RegionSound_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionSound)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionSound)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {item.Sound_Property}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.Chance ?? true)
                {
                    fg.AppendLine($"Chance => {item.Chance}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionSoundGetter item,
            RegionSound_Mask<bool?> checkMask)
        {
            return true;
        }

        public static RegionSound_Mask<bool> GetHasBeenSetMask(IRegionSoundGetter item)
        {
            var ret = new RegionSound_Mask<bool>();
            ret.Sound = true;
            ret.Flags = true;
            ret.Chance = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IRegionSoundGetter item,
            bool doMasks,
            out RegionSound_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IRegionSoundGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionSound");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionSound");
            }
            FormIDXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Sound),
                item: item.Sound?.FormID,
                fieldIndex: (int)RegionSound_FieldIndex.Sound,
                errorMask: errorMask);
            EnumXmlTranslation<RegionSound.Flag>.Instance.Write(
                node: elem,
                name: nameof(item.Flags),
                item: item.Flags_Property,
                fieldIndex: (int)RegionSound_FieldIndex.Flags,
                errorMask: errorMask);
            FloatXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Chance),
                item: item.Chance_Property,
                fieldIndex: (int)RegionSound_FieldIndex.Chance,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            RegionSound item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out RegionSound_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            RegionSound item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_Embedded(
            RegionSound item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Sound_Property,
                fieldIndex: (int)RegionSound_FieldIndex.Sound,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionSound.Flag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: 4,
                fieldIndex: (int)RegionSound_FieldIndex.Flags,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Chance_Property,
                fieldIndex: (int)RegionSound_FieldIndex.Chance,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RegionSound_Mask<T> : IMask<T>, IEquatable<RegionSound_Mask<T>>
    {
        #region Ctors
        public RegionSound_Mask()
        {
        }

        public RegionSound_Mask(T initialValue)
        {
            this.Sound = initialValue;
            this.Flags = initialValue;
            this.Chance = initialValue;
        }
        #endregion

        #region Members
        public T Sound;
        public T Flags;
        public T Chance;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionSound_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionSound_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Sound, rhs.Sound)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Chance, rhs.Chance)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Sound?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Chance?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Sound)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Chance)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RegionSound_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionSound_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionSound_Mask<R> obj, Func<T, R> eval)
        {
            obj.Sound = eval(this.Sound);
            obj.Flags = eval(this.Flags);
            obj.Chance = eval(this.Chance);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionSound_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionSound_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {Sound}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Chance ?? true)
                {
                    fg.AppendLine($"Chance => {Chance}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionSound_ErrorMask : IErrorMask, IErrorMask<RegionSound_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Sound;
        public Exception Flags;
        public Exception Chance;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    return Sound;
                case RegionSound_FieldIndex.Flags:
                    return Flags;
                case RegionSound_FieldIndex.Chance:
                    return Chance;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    this.Sound = ex;
                    break;
                case RegionSound_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case RegionSound_FieldIndex.Chance:
                    this.Chance = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    this.Sound = (Exception)obj;
                    break;
                case RegionSound_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case RegionSound_FieldIndex.Chance:
                    this.Chance = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Sound != null) return true;
            if (Flags != null) return true;
            if (Chance != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionSound_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Sound => {Sound}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Chance => {Chance}");
        }
        #endregion

        #region Combine
        public RegionSound_ErrorMask Combine(RegionSound_ErrorMask rhs)
        {
            var ret = new RegionSound_ErrorMask();
            ret.Sound = this.Sound.Combine(rhs.Sound);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Chance = this.Chance.Combine(rhs.Chance);
            return ret;
        }
        public static RegionSound_ErrorMask Combine(RegionSound_ErrorMask lhs, RegionSound_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionSound_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionSound_ErrorMask();
        }
        #endregion

    }
    public class RegionSound_CopyMask
    {
        #region Members
        public bool Sound;
        public bool Flags;
        public bool Chance;
        #endregion

    }
    #endregion




    #endregion

}
