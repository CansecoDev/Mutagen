/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionSound :
        LoquiNotifyingObject,
        IRegionSound,
        ILoquiObject<RegionSound>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<RegionSound>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionSound_Registration.Instance;
        public static RegionSound_Registration Registration => RegionSound_Registration.Instance;
        protected object CommonInstance => RegionSoundCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public RegionSound()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Sound
        public FormIDLink<Sound> Sound_Property { get; } = new FormIDLink<Sound>();
        public Sound Sound { get => Sound_Property.Item; set => Sound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDLink<Sound> IRegionSoundGetter.Sound_Property => this.Sound_Property;
        #endregion
        #region Flags
        private RegionSound.Flag _Flags;
        public RegionSound.Flag Flags
        {
            get => this._Flags;
            set => this.RaiseAndSetIfChanged(ref this._Flags, value, nameof(Flags));
        }
        #endregion
        #region Chance
        private Single _Chance;
        public Single Chance
        {
            get => _Chance;
            set
            {
                this._Chance = value.PutInRange(Chance_Range.Min, Chance_Range.Max);
            }
        }
        public static RangeFloat Chance_Range = new RangeFloat(0f, 100f);
        #endregion

        IMask<bool> IEqualsMask<RegionSound>.GetEqualsMask(RegionSound rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask(rhs, include);
        IMask<bool> IEqualsMask<IRegionSoundGetter>.GetEqualsMask(IRegionSoundGetter rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask(rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionSoundMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RegionSound rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionSound rhs)
        {
            if (rhs == null) return false;
            if (!this.Sound_Property.Equals(rhs.Sound_Property)) return false;
            if (this.Flags != rhs.Flags) return false;
            if (!this.Chance.EqualsWithin(rhs.Chance)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Sound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Chance).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected IXmlTranslator XmlTranslator => RegionSoundXmlTranslation.Instance;
        IXmlTranslator IXmlItem.XmlTranslator => this.XmlTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionSound Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionSound_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionSound Create_Xml(
            XElement node,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true,
            RegionSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RegionSound Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RegionSound() : null;
                    break;
                default:
                    break;
            }
            var ret = new RegionSound();
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionSoundXmlTranslation.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RegionSound Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionSound_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionSound Create_Xml(
            string path,
            out RegionSound_ErrorMask errorMask,
            RegionSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionSound Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            RegionSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionSound Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionSound_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionSound Create_Xml(
            Stream stream,
            out RegionSound_ErrorMask errorMask,
            RegionSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionSound Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionSound_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((RegionSound_FieldIndex)index)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Sound_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
            Sound_Property.Link(
                modList,
                sourceMod);
        }

        #endregion

        #region Binary Translation
        protected IBinaryTranslator BinaryTranslator => RegionSoundBinaryTranslation.Instance;
        IBinaryTranslator IBinaryItem.BinaryTranslator => this.BinaryTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionSound Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionSound Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RegionSound Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionSound();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs);
            return ret;
        }

        #endregion

        protected static void Fill_Binary_Structs(
            RegionSound item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.Sound_Property);
            if (EnumBinaryTranslation<RegionSound.Flag>.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out RegionSound.Flag FlagsParse))
            {
                item.Flags = FlagsParse;
            }
            else
            {
                item.Flags = default(RegionSound.Flag);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single ChanceParse))
            {
                item.Chance = ChanceParse;
            }
            else
            {
                item.Chance = default(Single);
            }
        }

        #endregion

        public RegionSound Copy(
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null)
        {
            return RegionSound.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RegionSound Copy(
            IRegionSoundGetter item,
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null)
        {
            RegionSound ret;
            if (item.GetType().Equals(typeof(RegionSound)))
            {
                ret = new RegionSound();
            }
            else
            {
                ret = (RegionSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RegionSound Copy_ToLoqui(
            IRegionSoundGetter item,
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null)
        {
            RegionSound ret;
            if (item.GetType().Equals(typeof(RegionSound)))
            {
                ret = new RegionSound() as RegionSound;
            }
            else
            {
                ret = (RegionSound)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(IRegionSoundGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IRegionSoundGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IRegionSoundGetter rhs,
            RegionSound_CopyMask copyMask,
            IRegionSoundGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IRegionSoundGetter rhs,
            out RegionSound_ErrorMask errorMask,
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionSoundCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionSoundGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null)
        {
            RegionSoundCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    this.Sound_Property.Set((FormIDLink<Sound>)obj);
                    break;
                case RegionSound_FieldIndex.Flags:
                    this.Flags = (RegionSound.Flag)obj;
                    break;
                case RegionSound_FieldIndex.Chance:
                    this.Chance = (Single)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            RegionSoundCommon.Instance.Clear(this);
        }

        public static RegionSound Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RegionSound();
            foreach (var pair in fields)
            {
                CopyInInternal_RegionSound(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RegionSound(RegionSound obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RegionSound_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    obj.Sound_Property.Set((FormIDLink<Sound>)pair.Value);
                    break;
                case RegionSound_FieldIndex.Flags:
                    obj.Flags = (RegionSound.Flag)pair.Value;
                    break;
                case RegionSound_FieldIndex.Chance:
                    obj.Chance = (Single)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRegionSound :
        IRegionSoundGetter,
        ILoquiClass<IRegionSound, IRegionSoundGetter>,
        ILoquiClass<RegionSound, IRegionSoundGetter>
    {
        new Sound Sound { get; set; }
        new RegionSound.Flag Flags { get; set; }

        new Single Chance { get; set; }

        void CopyFieldsFrom(
            IRegionSoundGetter rhs,
            ErrorMaskBuilder errorMask = null,
            RegionSound_CopyMask copyMask = null,
            IRegionSoundGetter def = null);
    }

    public partial interface IRegionSoundGetter :
        ILoquiObject,
        IXmlItem,
        IBinaryItem
    {
        #region Sound
        Sound Sound { get; }
        FormIDLink<Sound> Sound_Property { get; }

        #endregion
        #region Flags
        RegionSound.Flag Flags { get; }

        #endregion
        #region Chance
        Single Chance { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RegionSoundMixIn
    {
        public static void Clear(this IRegionSound item)
        {
            ((RegionSoundCommon)item.CommonInstance).Clear(item: item);
        }

        public static RegionSound_Mask<bool> GetEqualsMask(
            this IRegionSoundGetter item,
            IRegionSoundGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionSound_Mask<bool>();
            ((RegionSoundCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static string ToString(
            this IRegionSoundGetter item,
            string name = null,
            RegionSound_Mask<bool> printMask = null)
        {
            return ((RegionSoundCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionSoundGetter item,
            FileGeneration fg,
            string name = null,
            RegionSound_Mask<bool> printMask = null)
        {
            ((RegionSoundCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRegionSoundGetter item,
            RegionSound_Mask<bool?> checkMask)
        {
            return ((RegionSoundCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RegionSound_Mask<bool> GetHasBeenSetMask(this IRegionSoundGetter item)
        {
            var ret = new RegionSound_Mask<bool>();
            ((RegionSoundCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionSound_FieldIndex
    {
        Sound = 0,
        Flags = 1,
        Chance = 2,
    }
    #endregion

    #region Registration
    public class RegionSound_Registration : ILoquiRegistration
    {
        public static readonly RegionSound_Registration Instance = new RegionSound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 118,
            version: 0);

        public const string GUID = "faf7a6a8-9444-4e36-98e6-5a7af8122e29";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(RegionSound_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionSound_ErrorMask);

        public static readonly Type ClassType = typeof(RegionSound);

        public static readonly Type GetterType = typeof(IRegionSoundGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegionSound);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(RegionSoundCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionSound";

        public const string Name = "RegionSound";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SOUND":
                    return (ushort)RegionSound_FieldIndex.Sound;
                case "FLAGS":
                    return (ushort)RegionSound_FieldIndex.Flags;
                case "CHANCE":
                    return (ushort)RegionSound_FieldIndex.Chance;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    return "Sound";
                case RegionSound_FieldIndex.Flags:
                    return "Flags";
                case RegionSound_FieldIndex.Chance:
                    return "Chance";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                case RegionSound_FieldIndex.Flags:
                case RegionSound_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    return typeof(FormIDLink<Sound>);
                case RegionSound_FieldIndex.Flags:
                    return typeof(RegionSound.Flag);
                case RegionSound_FieldIndex.Chance:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlTranslation = typeof(RegionSoundXmlTranslation);
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryTranslation = typeof(RegionSoundBinaryTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionSoundCommon
    {
        public static readonly RegionSoundCommon Instance = new RegionSoundCommon();
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegionSound item,
            IRegionSoundGetter rhs,
            IRegionSoundGetter def,
            ErrorMaskBuilder errorMask,
            RegionSound_CopyMask copyMask)
        {
            if (copyMask?.Sound ?? true)
            {
                errorMask?.PushIndex((int)RegionSound_FieldIndex.Sound);
                try
                {
                    item.Sound_Property.SetLink(value: rhs.Sound_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)RegionSound_FieldIndex.Flags);
                try
                {
                    item.Flags = rhs.Flags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Chance ?? true)
            {
                errorMask?.PushIndex((int)RegionSound_FieldIndex.Chance);
                try
                {
                    item.Chance = rhs.Chance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IRegionSound item)
        {
            ClearPartial();
            item.Sound = default(Sound);
            item.Flags = default(RegionSound.Flag);
            item.Chance = default(Single);
        }

        public void FillEqualsMask(
            IRegionSoundGetter item,
            IRegionSoundGetter rhs,
            RegionSound_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Sound = item.Sound_Property.FormKey == rhs.Sound_Property.FormKey;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Chance = item.Chance.EqualsWithin(rhs.Chance);
        }

        public string ToString(
            IRegionSoundGetter item,
            string name = null,
            RegionSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IRegionSoundGetter item,
            FileGeneration fg,
            string name = null,
            RegionSound_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RegionSound)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RegionSound)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IRegionSoundGetter item,
            FileGeneration fg,
            RegionSound_Mask<bool> printMask = null)
        {
            if (printMask?.Sound ?? true)
            {
                fg.AppendLine($"Sound => {item.Sound_Property}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Chance ?? true)
            {
                fg.AppendLine($"Chance => {item.Chance}");
            }
        }

        public bool HasBeenSet(
            IRegionSoundGetter item,
            RegionSound_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IRegionSoundGetter item,
            RegionSound_Mask<bool> mask)
        {
            mask.Sound = true;
            mask.Flags = true;
            mask.Chance = true;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RegionSoundXmlTranslation : IXmlTranslator
    {
        public readonly static RegionSoundXmlTranslation Instance = new RegionSoundXmlTranslation();

        public static void WriteToNode_Xml(
            IRegionSoundGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RegionSound_FieldIndex.Sound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound),
                    item: item.Sound_Property?.FormKey,
                    fieldIndex: (int)RegionSound_FieldIndex.Sound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionSound_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<RegionSound.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)RegionSound_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RegionSound_FieldIndex.Chance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Chance),
                    item: item.Chance,
                    fieldIndex: (int)RegionSound_FieldIndex.Chance,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            IRegionSound item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionSoundXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            IRegionSound item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Sound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Sound_Property,
                        fieldIndex: (int)RegionSound_FieldIndex.Sound,
                        errorMask: errorMask);
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)RegionSound_FieldIndex.Flags);
                        if (EnumXmlTranslation<RegionSound.Flag>.Instance.Parse(
                            node: node,
                            item: out RegionSound.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(RegionSound.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Chance":
                    try
                    {
                        errorMask?.PushIndex((int)RegionSound_FieldIndex.Chance);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ChanceParse,
                            errorMask: errorMask))
                        {
                            item.Chance = ChanceParse;
                        }
                        else
                        {
                            item.Chance = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        public void Write(
            XElement node,
            IRegionSoundGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionSound");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionSound");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionSoundGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRegionSoundGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRegionSoundGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    #region Xml Write Mixins
    public static class RegionSoundXmlTranslationMixIn
    {
        public static void Write_Xml(
            this IRegionSoundGetter item,
            XElement node,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true,
            RegionSound_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionSoundXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this IRegionSoundGetter item,
            string path,
            out RegionSound_ErrorMask errorMask,
            RegionSound_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this IRegionSoundGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this IRegionSoundGetter item,
            Stream stream,
            out RegionSound_ErrorMask errorMask,
            RegionSound_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void Write_Xml(
            this IRegionSoundGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void Write_Xml(
            this IRegionSoundGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RegionSoundXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void Write_Xml(
            this IRegionSoundGetter item,
            XElement node,
            string name = null,
            RegionSound_TranslationMask translationMask = null)
        {
            ((RegionSoundXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void Write_Xml(
            this IRegionSoundGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RegionSoundXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this IRegionSoundGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RegionSoundXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class RegionSound_Mask<T> : IMask<T>, IEquatable<RegionSound_Mask<T>>
    {
        #region Ctors
        public RegionSound_Mask()
        {
        }

        public RegionSound_Mask(T initialValue)
        {
            this.Sound = initialValue;
            this.Flags = initialValue;
            this.Chance = initialValue;
        }
        #endregion

        #region Members
        public T Sound;
        public T Flags;
        public T Chance;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionSound_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionSound_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Sound, rhs.Sound)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Chance, rhs.Chance)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Sound?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Chance?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Sound)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Chance)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RegionSound_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionSound_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionSound_Mask<R> obj, Func<T, R> eval)
        {
            obj.Sound = eval(this.Sound);
            obj.Flags = eval(this.Flags);
            obj.Chance = eval(this.Chance);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionSound_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionSound_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionSound_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {Sound}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Chance ?? true)
                {
                    fg.AppendLine($"Chance => {Chance}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionSound_ErrorMask : IErrorMask, IErrorMask<RegionSound_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Sound;
        public Exception Flags;
        public Exception Chance;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    return Sound;
                case RegionSound_FieldIndex.Flags:
                    return Flags;
                case RegionSound_FieldIndex.Chance:
                    return Chance;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    this.Sound = ex;
                    break;
                case RegionSound_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case RegionSound_FieldIndex.Chance:
                    this.Chance = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RegionSound_FieldIndex enu = (RegionSound_FieldIndex)index;
            switch (enu)
            {
                case RegionSound_FieldIndex.Sound:
                    this.Sound = (Exception)obj;
                    break;
                case RegionSound_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case RegionSound_FieldIndex.Chance:
                    this.Chance = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Sound != null) return true;
            if (Flags != null) return true;
            if (Chance != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionSound_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Sound => {Sound}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Chance => {Chance}");
        }
        #endregion

        #region Combine
        public RegionSound_ErrorMask Combine(RegionSound_ErrorMask rhs)
        {
            var ret = new RegionSound_ErrorMask();
            ret.Sound = this.Sound.Combine(rhs.Sound);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Chance = this.Chance.Combine(rhs.Chance);
            return ret;
        }
        public static RegionSound_ErrorMask Combine(RegionSound_ErrorMask lhs, RegionSound_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionSound_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionSound_ErrorMask();
        }
        #endregion

    }
    public class RegionSound_CopyMask
    {
        public RegionSound_CopyMask()
        {
        }

        public RegionSound_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Sound = defaultOn;
            this.Flags = defaultOn;
            this.Chance = defaultOn;
        }

        #region Members
        public bool Sound;
        public bool Flags;
        public bool Chance;
        #endregion

    }

    public class RegionSound_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Sound;
        public bool Flags;
        public bool Chance;
        #endregion

        #region Ctors
        public RegionSound_TranslationMask()
        {
        }

        public RegionSound_TranslationMask(bool defaultOn)
        {
            this.Sound = defaultOn;
            this.Flags = defaultOn;
            this.Chance = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Sound, null));
            ret.Add((Flags, null));
            ret.Add((Chance, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RegionSoundBinaryTranslation : IBinaryTranslator
    {
        public readonly static RegionSoundBinaryTranslation Instance = new RegionSoundBinaryTranslation();

        public static void Write_Embedded(
            IRegionSoundGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Sound_Property,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionSound.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Chance);
        }

        public void Write(
            MutagenWriter writer,
            IRegionSoundGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionSoundGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class RegionSoundBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this IRegionSoundGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionSound_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionSoundBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionSound_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            this IRegionSoundGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((RegionSoundBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void Write_Binary(
            this IRegionSoundGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RegionSoundBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
