/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Loqui.Presentation;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Region :
        OblivionMajorRecord,
        IRegion,
        IRegionInternal,
        ILoquiObject<Region>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<Region>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Region_Registration.Instance;
        public new static Region_Registration Registration => Region_Registration.Instance;

        #region Ctor
        protected Region()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.Icon];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Region_FieldIndex.Icon, nameof(Icon_IsSet));
        }
        bool IRegionGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String IRegionGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Icon, value, _hasBeenSetTracker, markSet, (int)Region_FieldIndex.Icon, nameof(Icon), nameof(Icon_IsSet));
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region MapColor
        public bool MapColor_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.MapColor];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Region_FieldIndex.MapColor, nameof(MapColor_IsSet));
        }
        bool IRegionGetter.MapColor_IsSet => MapColor_IsSet;
        private Color _MapColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color MapColor
        {
            get => this._MapColor;
            set => MapColor_Set(value);
        }
        Color IRegionGetter.MapColor => this.MapColor;
        public void MapColor_Set(
            Color value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _MapColor, value, _hasBeenSetTracker, markSet, (int)Region_FieldIndex.MapColor, nameof(MapColor), nameof(MapColor_IsSet));
        }
        public void MapColor_Unset()
        {
            this.MapColor_Set(default(Color), false);
        }
        #endregion
        #region Worldspace
        public FormIDSetLink<Worldspace> Worldspace_Property { get; } = new FormIDSetLink<Worldspace>();
        public Worldspace Worldspace { get => Worldspace_Property.Item; set => Worldspace_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Worldspace> IRegionGetter.Worldspace_Property => this.Worldspace_Property;
        #endregion
        #region Areas
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<RegionArea> _Areas = new SourceSetList<RegionArea>();
        public ISourceSetList<RegionArea> Areas => _Areas;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RegionArea> AreasEnumerable
        {
            get => _Areas.Items;
            set => _Areas.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<RegionArea> IRegion.Areas => _Areas;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<RegionArea> IRegionGetter.Areas => _Areas;
        #endregion

        #endregion
        #region Objects
        public bool Objects_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.Objects];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Region_FieldIndex.Objects, nameof(Objects_IsSet));
        }
        bool IRegionGetter.Objects_IsSet => Objects_IsSet;
        private RegionDataObjects _Objects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataObjects Objects
        {
            get => _Objects;
            set => Objects_Set(value);
        }
        public void Objects_Set(
            RegionDataObjects value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Objects, value, _hasBeenSetTracker, markSet, (int)Region_FieldIndex.Objects, nameof(Objects), nameof(Objects_IsSet));
        }
        public void Objects_Unset()
        {
            this.Objects_Set(default(RegionDataObjects), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataObjectsInternalGetter IRegionGetter.Objects => this.Objects;
        #endregion
        #region Weather
        public bool Weather_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.Weather];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Region_FieldIndex.Weather, nameof(Weather_IsSet));
        }
        bool IRegionGetter.Weather_IsSet => Weather_IsSet;
        private RegionDataWeather _Weather;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataWeather Weather
        {
            get => _Weather;
            set => Weather_Set(value);
        }
        public void Weather_Set(
            RegionDataWeather value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Weather, value, _hasBeenSetTracker, markSet, (int)Region_FieldIndex.Weather, nameof(Weather), nameof(Weather_IsSet));
        }
        public void Weather_Unset()
        {
            this.Weather_Set(default(RegionDataWeather), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataWeatherInternalGetter IRegionGetter.Weather => this.Weather;
        #endregion
        #region MapName
        public bool MapName_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.MapName];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Region_FieldIndex.MapName, nameof(MapName_IsSet));
        }
        bool IRegionGetter.MapName_IsSet => MapName_IsSet;
        private RegionDataMapName _MapName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataMapName MapName
        {
            get => _MapName;
            set => MapName_Set(value);
        }
        public void MapName_Set(
            RegionDataMapName value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _MapName, value, _hasBeenSetTracker, markSet, (int)Region_FieldIndex.MapName, nameof(MapName), nameof(MapName_IsSet));
        }
        public void MapName_Unset()
        {
            this.MapName_Set(default(RegionDataMapName), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataMapNameInternalGetter IRegionGetter.MapName => this.MapName;
        #endregion
        #region Grasses
        public bool Grasses_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.Grasses];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Region_FieldIndex.Grasses, nameof(Grasses_IsSet));
        }
        bool IRegionGetter.Grasses_IsSet => Grasses_IsSet;
        private RegionDataGrasses _Grasses;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataGrasses Grasses
        {
            get => _Grasses;
            set => Grasses_Set(value);
        }
        public void Grasses_Set(
            RegionDataGrasses value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Grasses, value, _hasBeenSetTracker, markSet, (int)Region_FieldIndex.Grasses, nameof(Grasses), nameof(Grasses_IsSet));
        }
        public void Grasses_Unset()
        {
            this.Grasses_Set(default(RegionDataGrasses), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataGrassesInternalGetter IRegionGetter.Grasses => this.Grasses;
        #endregion
        #region Sounds
        public bool Sounds_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.Sounds];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Region_FieldIndex.Sounds, nameof(Sounds_IsSet));
        }
        bool IRegionGetter.Sounds_IsSet => Sounds_IsSet;
        private RegionDataSounds _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataSounds Sounds
        {
            get => _Sounds;
            set => Sounds_Set(value);
        }
        public void Sounds_Set(
            RegionDataSounds value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _Sounds, value, _hasBeenSetTracker, markSet, (int)Region_FieldIndex.Sounds, nameof(Sounds), nameof(Sounds_IsSet));
        }
        public void Sounds_Unset()
        {
            this.Sounds_Set(default(RegionDataSounds), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataSoundsInternalGetter IRegionGetter.Sounds => this.Sounds;
        #endregion

        IMask<bool> IEqualsMask<Region>.GetEqualsMask(Region rhs, EqualsMaskHelper.Include include) => RegionCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IRegionGetter>.GetEqualsMask(IRegionGetter rhs, EqualsMaskHelper.Include include) => RegionCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Region_Mask<bool> printMask = null)
        {
            return RegionCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Region_Mask<bool> GetHasBeenSetMask()
        {
            return RegionCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Region rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Region rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Icon_IsSet != rhs.Icon_IsSet) return false;
            if (Icon_IsSet)
            {
                if (!string.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (MapColor_IsSet != rhs.MapColor_IsSet) return false;
            if (MapColor_IsSet)
            {
                if (!this.MapColor.ColorOnlyEquals(rhs.MapColor)) return false;
            }
            if (Worldspace_Property.HasBeenSet != rhs.Worldspace_Property.HasBeenSet) return false;
            if (Worldspace_Property.HasBeenSet)
            {
                if (!this.Worldspace_Property.Equals(rhs.Worldspace_Property)) return false;
            }
            if (Areas.HasBeenSet != rhs.Areas.HasBeenSet) return false;
            if (Areas.HasBeenSet)
            {
                if (!this.Areas.SequenceEqual(rhs.Areas)) return false;
            }
            if (Objects_IsSet != rhs.Objects_IsSet) return false;
            if (Objects_IsSet)
            {
                if (!object.Equals(this.Objects, rhs.Objects)) return false;
            }
            if (Weather_IsSet != rhs.Weather_IsSet) return false;
            if (Weather_IsSet)
            {
                if (!object.Equals(this.Weather, rhs.Weather)) return false;
            }
            if (MapName_IsSet != rhs.MapName_IsSet) return false;
            if (MapName_IsSet)
            {
                if (!object.Equals(this.MapName, rhs.MapName)) return false;
            }
            if (Grasses_IsSet != rhs.Grasses_IsSet) return false;
            if (Grasses_IsSet)
            {
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
            }
            if (Sounds_IsSet != rhs.Sounds_IsSet) return false;
            if (Sounds_IsSet)
            {
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (MapColor_IsSet)
            {
                ret = HashHelper.GetHashCode(MapColor).CombineHashCode(ret);
            }
            if (Worldspace_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Worldspace).CombineHashCode(ret);
            }
            if (Areas.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Areas).CombineHashCode(ret);
            }
            if (Objects_IsSet)
            {
                ret = HashHelper.GetHashCode(Objects).CombineHashCode(ret);
            }
            if (Weather_IsSet)
            {
                ret = HashHelper.GetHashCode(Weather).CombineHashCode(ret);
            }
            if (MapName_IsSet)
            {
                ret = HashHelper.GetHashCode(MapName).CombineHashCode(ret);
            }
            if (Grasses_IsSet)
            {
                ret = HashHelper.GetHashCode(Grasses).CombineHashCode(ret);
            }
            if (Sounds_IsSet)
            {
                ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override IXmlTranslator XmlTranslator => RegionXmlTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Region Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Region_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Region Create_Xml(
            XElement node,
            out Region_ErrorMask errorMask,
            bool doMasks = true,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Region Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Region() : null;
                    break;
                default:
                    break;
            }
            var ret = new Region();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionXmlTranslation.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Region Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Region_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Region Create_Xml(
            string path,
            out Region_ErrorMask errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Region Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Region Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Region_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Region Create_Xml(
            Stream stream,
            out Region_ErrorMask errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Region Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElement_Xml(
            Region item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Region_FieldIndex)index)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return _hasBeenSetTracker[index];
                case Region_FieldIndex.Worldspace:
                    return Worldspace_Property.HasBeenSet;
                case Region_FieldIndex.Areas:
                    return Areas.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Region_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Worldspace_Property;
            if (Objects != null)
            {
                foreach (var item in Objects.Links)
                {
                    yield return item;
                }
            }
            if (Weather != null)
            {
                foreach (var item in Weather.Links)
                {
                    yield return item;
                }
            }
            if (Grasses != null)
            {
                foreach (var item in Grasses.Links)
                {
                    yield return item;
                }
            }
            if (Sounds != null)
            {
                foreach (var item in Sounds.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }

        public override void Link<M>(
            ModList<M> modList,
            M sourceMod)
            
        {
            base.Link(
                modList,
                sourceMod);
            Worldspace_Property.Link(
                modList,
                sourceMod);
            if (Objects != null)
            {
                Objects?.Link(
                    modList,
                    sourceMod);
            }
            if (Weather != null)
            {
                Weather?.Link(
                    modList,
                    sourceMod);
            }
            if (Grasses != null)
            {
                Grasses?.Link(
                    modList,
                    sourceMod);
            }
            if (Sounds != null)
            {
                Sounds?.Link(
                    modList,
                    sourceMod);
            }
        }

        public Region(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        partial void PostDuplicate(Region obj, Region rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Region(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override IBinaryTranslator BinaryTranslator => RegionBinaryTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Region Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Region Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Region_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Region Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Region>(
                record: new Region(),
                frame: frame,
                errorMask: errorMask,
                recType: Region_Registration.REGN_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        #endregion

        protected static void Fill_Binary_Structs(
            Region item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Region item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Icon);
                }
                case 0x524C4352: // RCLR
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        extraByte: true,
                        item: out Color MapColorParse))
                    {
                        item.MapColor = MapColorParse;
                    }
                    else
                    {
                        item.MapColor = default(Color);
                    }
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.MapColor);
                }
                case 0x4D414E57: // WNAM
                {
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Worldspace_Property);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Worldspace);
                }
                case 0x494C5052: // RPLI
                case 0x444C5052: // RPLD
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionArea>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: RegionArea_Registration.TriggeringRecordTypes,
                        item: item.Areas,
                        fieldIndex: (int)Region_FieldIndex.Areas,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out RegionArea listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<RegionArea>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        }
                        );
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Areas);
                }
                case 0x54414452: // RDAT
                {
                    RegionBinaryTranslation.FillBinary_RegionAreaLogic_Custom_Public(
                        frame: frame.SpawnWithLength(Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength),
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed(null);
                }
                default:
                    return OblivionMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Region Copy(
            Region_CopyMask copyMask = null,
            IRegionGetter def = null)
        {
            return Region.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Region Copy(
            IRegionGetter item,
            Region_CopyMask copyMask = null,
            IRegionGetter def = null)
        {
            Region ret;
            if (item.GetType().Equals(typeof(Region)))
            {
                ret = new Region();
            }
            else
            {
                ret = (Region)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Region Copy_ToLoqui(
            IRegionGetter item,
            Region_CopyMask copyMask = null,
            IRegionGetter def = null)
        {
            Region ret;
            if (item.GetType().Equals(typeof(Region)))
            {
                ret = new Region() as Region;
            }
            else
            {
                ret = (Region)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IMajorRecordGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IRegionGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IRegionGetter rhs,
            Region_CopyMask copyMask,
            IRegionGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IRegionGetter rhs,
            out Region_ErrorMask errorMask,
            Region_CopyMask copyMask = null,
            IRegionGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IRegionGetter rhs,
            ErrorMaskBuilder errorMask,
            Region_CopyMask copyMask = null,
            IRegionGetter def = null)
        {
            RegionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    this.Icon = (String)obj;
                    break;
                case Region_FieldIndex.MapColor:
                    this.MapColor = (Color)obj;
                    break;
                case Region_FieldIndex.Worldspace:
                    this.Worldspace_Property.Set((FormIDSetLink<Worldspace>)obj);
                    break;
                case Region_FieldIndex.Areas:
                    this._Areas.SetTo((IEnumerable<RegionArea>)obj);
                    break;
                case Region_FieldIndex.Objects:
                    this.Objects = (RegionDataObjects)obj;
                    break;
                case Region_FieldIndex.Weather:
                    this.Weather = (RegionDataWeather)obj;
                    break;
                case Region_FieldIndex.MapName:
                    this.MapName = (RegionDataMapName)obj;
                    break;
                case Region_FieldIndex.Grasses:
                    this.Grasses = (RegionDataGrasses)obj;
                    break;
                case Region_FieldIndex.Sounds:
                    this.Sounds = (RegionDataSounds)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            RegionCommon.Clear(this);
        }


        public new static Region Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Region();
            foreach (var pair in fields)
            {
                CopyInInternal_Region(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Region(Region obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Region_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    obj.Icon = (String)pair.Value;
                    break;
                case Region_FieldIndex.MapColor:
                    obj.MapColor = (Color)pair.Value;
                    break;
                case Region_FieldIndex.Worldspace:
                    obj.Worldspace_Property.Set((FormIDSetLink<Worldspace>)pair.Value);
                    break;
                case Region_FieldIndex.Areas:
                    obj._Areas.SetTo((IEnumerable<RegionArea>)pair.Value);
                    break;
                case Region_FieldIndex.Objects:
                    obj.Objects = (RegionDataObjects)pair.Value;
                    break;
                case Region_FieldIndex.Weather:
                    obj.Weather = (RegionDataWeather)pair.Value;
                    break;
                case Region_FieldIndex.MapName:
                    obj.MapName = (RegionDataMapName)pair.Value;
                    break;
                case Region_FieldIndex.Grasses:
                    obj.Grasses = (RegionDataGrasses)pair.Value;
                    break;
                case Region_FieldIndex.Sounds:
                    obj.Sounds = (RegionDataSounds)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRegion :
        IRegionGetter,
        IOblivionMajorRecord,
        ILoquiClass<IRegion, IRegionGetter>,
        ILoquiClass<Region, IRegionGetter>
    {
        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String item, bool hasBeenSet = true);
        void Icon_Unset();

        new Color MapColor { get; set; }
        new bool MapColor_IsSet { get; set; }
        void MapColor_Set(Color item, bool hasBeenSet = true);
        void MapColor_Unset();

        new Worldspace Worldspace { get; set; }
        new ISetList<RegionArea> Areas { get; }
        new RegionDataObjects Objects { get; set; }
        new bool Objects_IsSet { get; set; }
        void Objects_Set(RegionDataObjects item, bool hasBeenSet = true);
        void Objects_Unset();

        new RegionDataWeather Weather { get; set; }
        new bool Weather_IsSet { get; set; }
        void Weather_Set(RegionDataWeather item, bool hasBeenSet = true);
        void Weather_Unset();

        new RegionDataMapName MapName { get; set; }
        new bool MapName_IsSet { get; set; }
        void MapName_Set(RegionDataMapName item, bool hasBeenSet = true);
        void MapName_Unset();

        new RegionDataGrasses Grasses { get; set; }
        new bool Grasses_IsSet { get; set; }
        void Grasses_Set(RegionDataGrasses item, bool hasBeenSet = true);
        void Grasses_Unset();

        new RegionDataSounds Sounds { get; set; }
        new bool Sounds_IsSet { get; set; }
        void Sounds_Set(RegionDataSounds item, bool hasBeenSet = true);
        void Sounds_Unset();

        void CopyFieldsFrom(
            IRegionGetter rhs,
            ErrorMaskBuilder errorMask = null,
            Region_CopyMask copyMask = null,
            IRegionGetter def = null);
    }

    public partial interface IRegionInternal :
        IOblivionMajorRecordInternal,
        IRegion,
        IRegionInternalGetter
    {
        new Worldspace Worldspace { get; set; }
    }

    public partial interface IRegionGetter :
        IOblivionMajorRecordGetter,
        IXmlItem,
        IBinaryItem
    {
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region MapColor
        Color MapColor { get; }
        bool MapColor_IsSet { get; }

        #endregion
        #region Worldspace
        Worldspace Worldspace { get; }
        FormIDSetLink<Worldspace> Worldspace_Property { get; }

        #endregion
        #region Areas
        IReadOnlySetList<RegionArea> Areas { get; }
        #endregion
        #region Objects
        IRegionDataObjectsInternalGetter Objects { get; }
        bool Objects_IsSet { get; }

        #endregion
        #region Weather
        IRegionDataWeatherInternalGetter Weather { get; }
        bool Weather_IsSet { get; }

        #endregion
        #region MapName
        IRegionDataMapNameInternalGetter MapName { get; }
        bool MapName_IsSet { get; }

        #endregion
        #region Grasses
        IRegionDataGrassesInternalGetter Grasses { get; }
        bool Grasses_IsSet { get; }

        #endregion
        #region Sounds
        IRegionDataSoundsInternalGetter Sounds { get; }
        bool Sounds_IsSet { get; }

        #endregion

    }

    public partial interface IRegionInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IRegionGetter
    {

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Region_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Icon = 5,
        MapColor = 6,
        Worldspace = 7,
        Areas = 8,
        Objects = 9,
        Weather = 10,
        MapName = 11,
        Grasses = 12,
        Sounds = 13,
    }
    #endregion

    #region Registration
    public class Region_Registration : ILoquiRegistration
    {
        public static readonly Region_Registration Instance = new Region_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 107,
            version: 0);

        public const string GUID = "638d02e0-687a-49ad-a934-6f2ed1e05c3a";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Region_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Region_ErrorMask);

        public static readonly Type ClassType = typeof(Region);

        public static readonly Type GetterType = typeof(IRegionGetter);

        public static readonly Type InternalGetterType = typeof(IRegionInternalGetter);

        public static readonly Type SetterType = typeof(IRegion);

        public static readonly Type InternalSetterType = typeof(IRegionInternal);

        public static readonly Type CommonType = typeof(RegionCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Region";

        public const string Name = "Region";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ICON":
                    return (ushort)Region_FieldIndex.Icon;
                case "MAPCOLOR":
                    return (ushort)Region_FieldIndex.MapColor;
                case "WORLDSPACE":
                    return (ushort)Region_FieldIndex.Worldspace;
                case "AREAS":
                    return (ushort)Region_FieldIndex.Areas;
                case "OBJECTS":
                    return (ushort)Region_FieldIndex.Objects;
                case "WEATHER":
                    return (ushort)Region_FieldIndex.Weather;
                case "MAPNAME":
                    return (ushort)Region_FieldIndex.MapName;
                case "GRASSES":
                    return (ushort)Region_FieldIndex.Grasses;
                case "SOUNDS":
                    return (ushort)Region_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Areas:
                    return true;
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return true;
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return "Icon";
                case Region_FieldIndex.MapColor:
                    return "MapColor";
                case Region_FieldIndex.Worldspace:
                    return "Worldspace";
                case Region_FieldIndex.Areas:
                    return "Areas";
                case Region_FieldIndex.Objects:
                    return "Objects";
                case Region_FieldIndex.Weather:
                    return "Weather";
                case Region_FieldIndex.MapName:
                    return "MapName";
                case Region_FieldIndex.Grasses:
                    return "Grasses";
                case Region_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return typeof(String);
                case Region_FieldIndex.MapColor:
                    return typeof(Color);
                case Region_FieldIndex.Worldspace:
                    return typeof(FormIDSetLink<Worldspace>);
                case Region_FieldIndex.Areas:
                    return typeof(SourceSetList<RegionArea>);
                case Region_FieldIndex.Objects:
                    return typeof(RegionDataObjects);
                case Region_FieldIndex.Weather:
                    return typeof(RegionDataWeather);
                case Region_FieldIndex.MapName:
                    return typeof(RegionDataMapName);
                case Region_FieldIndex.Grasses:
                    return typeof(RegionDataGrasses);
                case Region_FieldIndex.Sounds:
                    return typeof(RegionDataSounds);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlTranslation = typeof(RegionXmlTranslation);
        public static readonly RecordType REGN_HEADER = new RecordType("REGN");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType RCLR_HEADER = new RecordType("RCLR");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType RPLI_HEADER = new RecordType("RPLI");
        public static readonly RecordType RPLD_HEADER = new RecordType("RPLD");
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = REGN_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        public static readonly Type BinaryTranslation = typeof(RegionBinaryTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegion item,
            IRegionGetter rhs,
            IRegionGetter def,
            ErrorMaskBuilder errorMask,
            Region_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Icon);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Icon,
                        rhsHasBeenSet: rhs.Icon_IsSet,
                        defItem: def?.Icon ?? default(String),
                        defHasBeenSet: def?.Icon_IsSet ?? false,
                        outRhsItem: out var rhsIconItem,
                        outDefItem: out var defIconItem))
                    {
                        item.Icon = rhsIconItem;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MapColor ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.MapColor);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MapColor,
                        rhsHasBeenSet: rhs.MapColor_IsSet,
                        defItem: def?.MapColor ?? default(Color),
                        defHasBeenSet: def?.MapColor_IsSet ?? false,
                        outRhsItem: out var rhsMapColorItem,
                        outDefItem: out var defMapColorItem))
                    {
                        item.MapColor = rhsMapColorItem;
                    }
                    else
                    {
                        item.MapColor_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Worldspace ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Worldspace);
                try
                {
                    item.Worldspace_Property.SetLink(
                        rhs: rhs.Worldspace_Property,
                        def: def?.Worldspace_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Areas.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Areas);
                try
                {
                    item.Areas.SetToWithDefault(
                        rhs: rhs.Areas,
                        def: def?.Areas,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Areas.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return RegionArea.Copy(
                                        r,
                                        copyMask?.Areas?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Areas.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Objects.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Objects);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Objects,
                        rhsHasBeenSet: rhs.Objects_IsSet,
                        defItem: def?.Objects,
                        defHasBeenSet: def?.Objects_IsSet ?? false,
                        outRhsItem: out var rhsObjectsItem,
                        outDefItem: out var defObjectsItem))
                    {
                        switch (copyMask?.Objects.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                RegionDataObjectsCommon.CopyFieldsFrom(
                                    item: item.Objects,
                                    rhs: rhs.Objects,
                                    def: def?.Objects,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Objects.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Objects = RegionDataObjects.Copy(
                                    rhsObjectsItem,
                                    copyMask?.Objects?.Specific,
                                    def: defObjectsItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Objects?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Objects_Set(
                            item: default(RegionDataObjects),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Weather.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Weather);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Weather,
                        rhsHasBeenSet: rhs.Weather_IsSet,
                        defItem: def?.Weather,
                        defHasBeenSet: def?.Weather_IsSet ?? false,
                        outRhsItem: out var rhsWeatherItem,
                        outDefItem: out var defWeatherItem))
                    {
                        switch (copyMask?.Weather.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                RegionDataWeatherCommon.CopyFieldsFrom(
                                    item: item.Weather,
                                    rhs: rhs.Weather,
                                    def: def?.Weather,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Weather.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Weather = RegionDataWeather.Copy(
                                    rhsWeatherItem,
                                    copyMask?.Weather?.Specific,
                                    def: defWeatherItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Weather?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Weather_Set(
                            item: default(RegionDataWeather),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MapName.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.MapName);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MapName,
                        rhsHasBeenSet: rhs.MapName_IsSet,
                        defItem: def?.MapName,
                        defHasBeenSet: def?.MapName_IsSet ?? false,
                        outRhsItem: out var rhsMapNameItem,
                        outDefItem: out var defMapNameItem))
                    {
                        switch (copyMask?.MapName.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                RegionDataMapNameCommon.CopyFieldsFrom(
                                    item: item.MapName,
                                    rhs: rhs.MapName,
                                    def: def?.MapName,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.MapName.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.MapName = RegionDataMapName.Copy(
                                    rhsMapNameItem,
                                    copyMask?.MapName?.Specific,
                                    def: defMapNameItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.MapName?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.MapName_Set(
                            item: default(RegionDataMapName),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Grasses.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Grasses);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Grasses,
                        rhsHasBeenSet: rhs.Grasses_IsSet,
                        defItem: def?.Grasses,
                        defHasBeenSet: def?.Grasses_IsSet ?? false,
                        outRhsItem: out var rhsGrassesItem,
                        outDefItem: out var defGrassesItem))
                    {
                        switch (copyMask?.Grasses.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                RegionDataGrassesCommon.CopyFieldsFrom(
                                    item: item.Grasses,
                                    rhs: rhs.Grasses,
                                    def: def?.Grasses,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Grasses.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Grasses = RegionDataGrasses.Copy(
                                    rhsGrassesItem,
                                    copyMask?.Grasses?.Specific,
                                    def: defGrassesItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Grasses?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Grasses_Set(
                            item: default(RegionDataGrasses),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sounds.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Sounds);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Sounds,
                        rhsHasBeenSet: rhs.Sounds_IsSet,
                        defItem: def?.Sounds,
                        defHasBeenSet: def?.Sounds_IsSet ?? false,
                        outRhsItem: out var rhsSoundsItem,
                        outDefItem: out var defSoundsItem))
                    {
                        switch (copyMask?.Sounds.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                RegionDataSoundsCommon.CopyFieldsFrom(
                                    item: item.Sounds,
                                    rhs: rhs.Sounds,
                                    def: def?.Sounds,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Sounds.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Sounds = RegionDataSounds.Copy(
                                    rhsSoundsItem,
                                    copyMask?.Sounds?.Specific,
                                    def: defSoundsItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Sounds?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Sounds_Set(
                            item: default(RegionDataSounds),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IRegion item)
        {
            item.Icon_Unset();
            item.MapColor_Unset();
            item.Worldspace_Property.Unset();
            item.Areas.Unset();
            item.Objects_Unset();
            item.Weather_Unset();
            item.MapName_Unset();
            item.Grasses_Unset();
            item.Sounds_Unset();
        }

        public static Region_Mask<bool> GetEqualsMask(
            this IRegionGetter item,
            IRegionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Region_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionGetter item,
            IRegionGetter rhs,
            Region_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.MapColor = item.MapColor_IsSet == rhs.MapColor_IsSet && item.MapColor.ColorOnlyEquals(rhs.MapColor);
            ret.Worldspace = item.Worldspace_Property.FormKey == rhs.Worldspace_Property.FormKey;
            ret.Areas = item.Areas.CollectionEqualsHelper(
                rhs.Areas,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Objects = EqualsMaskHelper.EqualsHelper(
                item.Objects_IsSet,
                rhs.Objects_IsSet,
                item.Objects,
                rhs.Objects,
                (loqLhs, loqRhs) => RegionDataObjectsCommon.GetEqualsMask(loqLhs, loqRhs),
                include);
            ret.Weather = EqualsMaskHelper.EqualsHelper(
                item.Weather_IsSet,
                rhs.Weather_IsSet,
                item.Weather,
                rhs.Weather,
                (loqLhs, loqRhs) => RegionDataWeatherCommon.GetEqualsMask(loqLhs, loqRhs),
                include);
            ret.MapName = EqualsMaskHelper.EqualsHelper(
                item.MapName_IsSet,
                rhs.MapName_IsSet,
                item.MapName,
                rhs.MapName,
                (loqLhs, loqRhs) => RegionDataMapNameCommon.GetEqualsMask(loqLhs, loqRhs),
                include);
            ret.Grasses = EqualsMaskHelper.EqualsHelper(
                item.Grasses_IsSet,
                rhs.Grasses_IsSet,
                item.Grasses,
                rhs.Grasses,
                (loqLhs, loqRhs) => RegionDataGrassesCommon.GetEqualsMask(loqLhs, loqRhs),
                include);
            ret.Sounds = EqualsMaskHelper.EqualsHelper(
                item.Sounds_IsSet,
                rhs.Sounds_IsSet,
                item.Sounds,
                rhs.Sounds,
                (loqLhs, loqRhs) => RegionDataSoundsCommon.GetEqualsMask(loqLhs, loqRhs),
                include);
            OblivionMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRegionGetter item,
            string name = null,
            Region_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionGetter item,
            FileGeneration fg,
            string name = null,
            Region_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Region)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Region)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.MapColor ?? true)
                {
                    fg.AppendLine($"MapColor => {item.MapColor}");
                }
                if (printMask?.Worldspace ?? true)
                {
                    fg.AppendLine($"Worldspace => {item.Worldspace_Property}");
                }
                if (printMask?.Areas?.Overall ?? true)
                {
                    fg.AppendLine("Areas =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Areas)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Objects?.Overall ?? true)
                {
                    item.Objects?.ToString(fg, "Objects");
                }
                if (printMask?.Weather?.Overall ?? true)
                {
                    item.Weather?.ToString(fg, "Weather");
                }
                if (printMask?.MapName?.Overall ?? true)
                {
                    item.MapName?.ToString(fg, "MapName");
                }
                if (printMask?.Grasses?.Overall ?? true)
                {
                    item.Grasses?.ToString(fg, "Grasses");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    item.Sounds?.ToString(fg, "Sounds");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionGetter item,
            Region_Mask<bool?> checkMask)
        {
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.MapColor.HasValue && checkMask.MapColor.Value != item.MapColor_IsSet) return false;
            if (checkMask.Worldspace.HasValue && checkMask.Worldspace.Value != item.Worldspace_Property.HasBeenSet) return false;
            if (checkMask.Areas.Overall.HasValue && checkMask.Areas.Overall.Value != item.Areas.HasBeenSet) return false;
            if (checkMask.Objects.Overall.HasValue && checkMask.Objects.Overall.Value != item.Objects_IsSet) return false;
            if (checkMask.Objects.Specific != null && (item.Objects == null || !item.Objects.HasBeenSet(checkMask.Objects.Specific))) return false;
            if (checkMask.Weather.Overall.HasValue && checkMask.Weather.Overall.Value != item.Weather_IsSet) return false;
            if (checkMask.Weather.Specific != null && (item.Weather == null || !item.Weather.HasBeenSet(checkMask.Weather.Specific))) return false;
            if (checkMask.MapName.Overall.HasValue && checkMask.MapName.Overall.Value != item.MapName_IsSet) return false;
            if (checkMask.MapName.Specific != null && (item.MapName == null || !item.MapName.HasBeenSet(checkMask.MapName.Specific))) return false;
            if (checkMask.Grasses.Overall.HasValue && checkMask.Grasses.Overall.Value != item.Grasses_IsSet) return false;
            if (checkMask.Grasses.Specific != null && (item.Grasses == null || !item.Grasses.HasBeenSet(checkMask.Grasses.Specific))) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds_IsSet) return false;
            if (checkMask.Sounds.Specific != null && (item.Sounds == null || !item.Sounds.HasBeenSet(checkMask.Sounds.Specific))) return false;
            return true;
        }

        public static Region_Mask<bool> GetHasBeenSetMask(IRegionGetter item)
        {
            var ret = new Region_Mask<bool>();
            ret.Icon = item.Icon_IsSet;
            ret.MapColor = item.MapColor_IsSet;
            ret.Worldspace = item.Worldspace_Property.HasBeenSet;
            ret.Areas = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RegionArea_Mask<bool>>>>(item.Areas.HasBeenSet, item.Areas.WithIndex().Select((i) => new MaskItemIndexed<bool, RegionArea_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            ret.Objects = new MaskItem<bool, RegionDataObjects_Mask<bool>>(item.Objects_IsSet, RegionDataObjectsCommon.GetHasBeenSetMask(item.Objects));
            ret.Weather = new MaskItem<bool, RegionDataWeather_Mask<bool>>(item.Weather_IsSet, RegionDataWeatherCommon.GetHasBeenSetMask(item.Weather));
            ret.MapName = new MaskItem<bool, RegionDataMapName_Mask<bool>>(item.MapName_IsSet, RegionDataMapNameCommon.GetHasBeenSetMask(item.MapName));
            ret.Grasses = new MaskItem<bool, RegionDataGrasses_Mask<bool>>(item.Grasses_IsSet, RegionDataGrassesCommon.GetHasBeenSetMask(item.Grasses));
            ret.Sounds = new MaskItem<bool, RegionDataSounds_Mask<bool>>(item.Sounds_IsSet, RegionDataSoundsCommon.GetHasBeenSetMask(item.Sounds));
            return ret;
        }

        public static Region_FieldIndex? ConvertFieldIndex(OblivionMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Region_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Region_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Region_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Region_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Region_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RegionXmlTranslation :
        OblivionMajorRecordXmlTranslation,
        IXmlTranslator
    {
        public new readonly static RegionXmlTranslation Instance = new RegionXmlTranslation();

        public static void WriteToNode_Xml(
            IRegionInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlTranslation.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Region_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.MapColor_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.MapColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MapColor),
                    item: item.MapColor,
                    fieldIndex: (int)Region_FieldIndex.MapColor,
                    errorMask: errorMask);
            }
            if (item.Worldspace_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Worldspace) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Worldspace),
                    item: item.Worldspace_Property?.FormKey,
                    fieldIndex: (int)Region_FieldIndex.Worldspace,
                    errorMask: errorMask);
            }
            if (item.Areas.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Areas) ?? true))
            {
                ListXmlTranslation<RegionArea>.Instance.Write(
                    node: node,
                    name: nameof(item.Areas),
                    item: item.Areas,
                    fieldIndex: (int)Region_FieldIndex.Areas,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Areas),
                    transl: (XElement subNode, RegionArea subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        ((RegionAreaXmlTranslation)((IXmlItem)subItem).XmlTranslator).Write(
                            item: subItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.Objects_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Objects) ?? true))
            {
                ((RegionDataObjectsXmlTranslation)((IXmlItem)item.Objects).XmlTranslator).Write(
                    item: item.Objects,
                    node: node,
                    name: nameof(item.Objects),
                    fieldIndex: (int)Region_FieldIndex.Objects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Objects));
            }
            if (item.Weather_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Weather) ?? true))
            {
                ((RegionDataWeatherXmlTranslation)((IXmlItem)item.Weather).XmlTranslator).Write(
                    item: item.Weather,
                    node: node,
                    name: nameof(item.Weather),
                    fieldIndex: (int)Region_FieldIndex.Weather,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Weather));
            }
            if (item.MapName_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.MapName) ?? true))
            {
                ((RegionDataMapNameXmlTranslation)((IXmlItem)item.MapName).XmlTranslator).Write(
                    item: item.MapName,
                    node: node,
                    name: nameof(item.MapName),
                    fieldIndex: (int)Region_FieldIndex.MapName,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.MapName));
            }
            if (item.Grasses_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Grasses) ?? true))
            {
                ((RegionDataGrassesXmlTranslation)((IXmlItem)item.Grasses).XmlTranslator).Write(
                    item: item.Grasses,
                    node: node,
                    name: nameof(item.Grasses),
                    fieldIndex: (int)Region_FieldIndex.Grasses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Grasses));
            }
            if (item.Sounds_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Sounds) ?? true))
            {
                ((RegionDataSoundsXmlTranslation)((IXmlItem)item.Sounds).XmlTranslator).Write(
                    item: item.Sounds,
                    node: node,
                    name: nameof(item.Sounds),
                    fieldIndex: (int)Region_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Sounds));
            }
        }

        public static void FillPublic_Xml(
            IRegionInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            IRegionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapColor":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.MapColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color MapColorParse,
                            errorMask: errorMask))
                        {
                            item.MapColor = MapColorParse;
                        }
                        else
                        {
                            item.MapColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Worldspace":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Worldspace_Property,
                        fieldIndex: (int)Region_FieldIndex.Worldspace,
                        errorMask: errorMask);
                    break;
                case "Areas":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Areas);
                        if (ListXmlTranslation<RegionArea>.Instance.Parse(
                            node: node,
                            enumer: out var AreasItem,
                            transl: LoquiXmlTranslation<RegionArea>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Areas.SetTo(AreasItem);
                        }
                        else
                        {
                            item.Areas.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Objects":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Objects);
                        if (LoquiXmlTranslation<RegionDataObjects>.Instance.Parse(
                            node: node,
                            item: out RegionDataObjects ObjectsParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Objects)))
                        {
                            item.Objects = ObjectsParse;
                        }
                        else
                        {
                            item.Objects = default(RegionDataObjects);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weather":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Weather);
                        if (LoquiXmlTranslation<RegionDataWeather>.Instance.Parse(
                            node: node,
                            item: out RegionDataWeather WeatherParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Weather)))
                        {
                            item.Weather = WeatherParse;
                        }
                        else
                        {
                            item.Weather = default(RegionDataWeather);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapName":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.MapName);
                        if (LoquiXmlTranslation<RegionDataMapName>.Instance.Parse(
                            node: node,
                            item: out RegionDataMapName MapNameParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.MapName)))
                        {
                            item.MapName = MapNameParse;
                        }
                        else
                        {
                            item.MapName = default(RegionDataMapName);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grasses":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Grasses);
                        if (LoquiXmlTranslation<RegionDataGrasses>.Instance.Parse(
                            node: node,
                            item: out RegionDataGrasses GrassesParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Grasses)))
                        {
                            item.Grasses = GrassesParse;
                        }
                        else
                        {
                            item.Grasses = default(RegionDataGrasses);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Sounds);
                        if (LoquiXmlTranslation<RegionDataSounds>.Instance.Parse(
                            node: node,
                            item: out RegionDataSounds SoundsParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Sounds)))
                        {
                            item.Sounds = SoundsParse;
                        }
                        else
                        {
                            item.Sounds = default(RegionDataSounds);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        public void Write(
            XElement node,
            IRegionInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Region");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Region");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    #region Xml Write Mixins
    public static class RegionXmlTranslationMixIn
    {
        public static void Write_Xml(
            this IRegionInternalGetter item,
            XElement node,
            out Region_ErrorMask errorMask,
            bool doMasks = true,
            Region_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this IRegionInternalGetter item,
            string path,
            out Region_ErrorMask errorMask,
            Region_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this IRegionInternalGetter item,
            Stream stream,
            out Region_ErrorMask errorMask,
            Region_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Region_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Region_Mask<T>>
    {
        #region Ctors
        public Region_Mask()
        {
        }

        public Region_Mask(T initialValue)
        {
            this.Icon = initialValue;
            this.MapColor = initialValue;
            this.Worldspace = initialValue;
            this.Areas = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionArea_Mask<T>>>>(initialValue, null);
            this.Objects = new MaskItem<T, RegionDataObjects_Mask<T>>(initialValue, new RegionDataObjects_Mask<T>(initialValue));
            this.Weather = new MaskItem<T, RegionDataWeather_Mask<T>>(initialValue, new RegionDataWeather_Mask<T>(initialValue));
            this.MapName = new MaskItem<T, RegionDataMapName_Mask<T>>(initialValue, new RegionDataMapName_Mask<T>(initialValue));
            this.Grasses = new MaskItem<T, RegionDataGrasses_Mask<T>>(initialValue, new RegionDataGrasses_Mask<T>(initialValue));
            this.Sounds = new MaskItem<T, RegionDataSounds_Mask<T>>(initialValue, new RegionDataSounds_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Icon;
        public T MapColor;
        public T Worldspace;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionArea_Mask<T>>>> Areas;
        public MaskItem<T, RegionDataObjects_Mask<T>> Objects { get; set; }
        public MaskItem<T, RegionDataWeather_Mask<T>> Weather { get; set; }
        public MaskItem<T, RegionDataMapName_Mask<T>> MapName { get; set; }
        public MaskItem<T, RegionDataGrasses_Mask<T>> Grasses { get; set; }
        public MaskItem<T, RegionDataSounds_Mask<T>> Sounds { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Region_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Region_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.MapColor, rhs.MapColor)) return false;
            if (!object.Equals(this.Worldspace, rhs.Worldspace)) return false;
            if (!object.Equals(this.Areas, rhs.Areas)) return false;
            if (!object.Equals(this.Objects, rhs.Objects)) return false;
            if (!object.Equals(this.Weather, rhs.Weather)) return false;
            if (!object.Equals(this.MapName, rhs.MapName)) return false;
            if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.MapColor?.GetHashCode());
            ret = ret.CombineHashCode(this.Worldspace?.GetHashCode());
            ret = ret.CombineHashCode(this.Areas?.GetHashCode());
            ret = ret.CombineHashCode(this.Objects?.GetHashCode());
            ret = ret.CombineHashCode(this.Weather?.GetHashCode());
            ret = ret.CombineHashCode(this.MapName?.GetHashCode());
            ret = ret.CombineHashCode(this.Grasses?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.MapColor)) return false;
            if (!eval(this.Worldspace)) return false;
            if (this.Areas != null)
            {
                if (!eval(this.Areas.Overall)) return false;
                if (this.Areas.Specific != null)
                {
                    foreach (var item in this.Areas.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (Objects != null)
            {
                if (!eval(this.Objects.Overall)) return false;
                if (this.Objects.Specific != null && !this.Objects.Specific.AllEqual(eval)) return false;
            }
            if (Weather != null)
            {
                if (!eval(this.Weather.Overall)) return false;
                if (this.Weather.Specific != null && !this.Weather.Specific.AllEqual(eval)) return false;
            }
            if (MapName != null)
            {
                if (!eval(this.MapName.Overall)) return false;
                if (this.MapName.Specific != null && !this.MapName.Specific.AllEqual(eval)) return false;
            }
            if (Grasses != null)
            {
                if (!eval(this.Grasses.Overall)) return false;
                if (this.Grasses.Specific != null && !this.Grasses.Specific.AllEqual(eval)) return false;
            }
            if (Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null && !this.Sounds.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Region_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Region_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Region_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Icon = eval(this.Icon);
            obj.MapColor = eval(this.MapColor);
            obj.Worldspace = eval(this.Worldspace);
            if (Areas != null)
            {
                obj.Areas = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RegionArea_Mask<R>>>>();
                obj.Areas.Overall = eval(this.Areas.Overall);
                if (Areas.Specific != null)
                {
                    List<MaskItemIndexed<R, RegionArea_Mask<R>>> l = new List<MaskItemIndexed<R, RegionArea_Mask<R>>>();
                    obj.Areas.Specific = l;
                    foreach (var item in Areas.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, RegionArea_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, RegionArea_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (this.Objects != null)
            {
                obj.Objects = new MaskItem<R, RegionDataObjects_Mask<R>>();
                obj.Objects.Overall = eval(this.Objects.Overall);
                if (this.Objects.Specific != null)
                {
                    obj.Objects.Specific = this.Objects.Specific.Translate(eval);
                }
            }
            if (this.Weather != null)
            {
                obj.Weather = new MaskItem<R, RegionDataWeather_Mask<R>>();
                obj.Weather.Overall = eval(this.Weather.Overall);
                if (this.Weather.Specific != null)
                {
                    obj.Weather.Specific = this.Weather.Specific.Translate(eval);
                }
            }
            if (this.MapName != null)
            {
                obj.MapName = new MaskItem<R, RegionDataMapName_Mask<R>>();
                obj.MapName.Overall = eval(this.MapName.Overall);
                if (this.MapName.Specific != null)
                {
                    obj.MapName.Specific = this.MapName.Specific.Translate(eval);
                }
            }
            if (this.Grasses != null)
            {
                obj.Grasses = new MaskItem<R, RegionDataGrasses_Mask<R>>();
                obj.Grasses.Overall = eval(this.Grasses.Overall);
                if (this.Grasses.Specific != null)
                {
                    obj.Grasses.Specific = this.Grasses.Specific.Translate(eval);
                }
            }
            if (this.Sounds != null)
            {
                obj.Sounds = new MaskItem<R, RegionDataSounds_Mask<R>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (this.Sounds.Specific != null)
                {
                    obj.Sounds.Specific = this.Sounds.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Areas.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Region_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Region_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Region_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.MapColor ?? true)
                {
                    fg.AppendLine($"MapColor => {MapColor}");
                }
                if (printMask?.Worldspace ?? true)
                {
                    fg.AppendLine($"Worldspace => {Worldspace}");
                }
                if (printMask?.Areas?.Overall ?? true)
                {
                    fg.AppendLine("Areas =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Areas.Overall != null)
                        {
                            fg.AppendLine(Areas.Overall.ToString());
                        }
                        if (Areas.Specific != null)
                        {
                            foreach (var subItem in Areas.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Objects?.Overall ?? true)
                {
                    Objects?.ToString(fg);
                }
                if (printMask?.Weather?.Overall ?? true)
                {
                    Weather?.ToString(fg);
                }
                if (printMask?.MapName?.Overall ?? true)
                {
                    MapName?.ToString(fg);
                }
                if (printMask?.Grasses?.Overall ?? true)
                {
                    Grasses?.ToString(fg);
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    Sounds?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Region_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Region_ErrorMask>
    {
        #region Members
        public Exception Icon;
        public Exception MapColor;
        public Exception Worldspace;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>> Areas;
        public MaskItem<Exception, RegionDataObjects_ErrorMask> Objects;
        public MaskItem<Exception, RegionDataWeather_ErrorMask> Weather;
        public MaskItem<Exception, RegionDataMapName_ErrorMask> MapName;
        public MaskItem<Exception, RegionDataGrasses_ErrorMask> Grasses;
        public MaskItem<Exception, RegionDataSounds_ErrorMask> Sounds;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return Icon;
                case Region_FieldIndex.MapColor:
                    return MapColor;
                case Region_FieldIndex.Worldspace:
                    return Worldspace;
                case Region_FieldIndex.Areas:
                    return Areas;
                case Region_FieldIndex.Objects:
                    return Objects;
                case Region_FieldIndex.Weather:
                    return Weather;
                case Region_FieldIndex.MapName:
                    return MapName;
                case Region_FieldIndex.Grasses:
                    return Grasses;
                case Region_FieldIndex.Sounds:
                    return Sounds;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Region_FieldIndex.MapColor:
                    this.MapColor = ex;
                    break;
                case Region_FieldIndex.Worldspace:
                    this.Worldspace = ex;
                    break;
                case Region_FieldIndex.Areas:
                    this.Areas = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>>(ex, null);
                    break;
                case Region_FieldIndex.Objects:
                    this.Objects = new MaskItem<Exception, RegionDataObjects_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.Weather:
                    this.Weather = new MaskItem<Exception, RegionDataWeather_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.MapName:
                    this.MapName = new MaskItem<Exception, RegionDataMapName_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.Grasses:
                    this.Grasses = new MaskItem<Exception, RegionDataGrasses_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, RegionDataSounds_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Region_FieldIndex.MapColor:
                    this.MapColor = (Exception)obj;
                    break;
                case Region_FieldIndex.Worldspace:
                    this.Worldspace = (Exception)obj;
                    break;
                case Region_FieldIndex.Areas:
                    this.Areas = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>>)obj;
                    break;
                case Region_FieldIndex.Objects:
                    this.Objects = (MaskItem<Exception, RegionDataObjects_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.Weather:
                    this.Weather = (MaskItem<Exception, RegionDataWeather_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.MapName:
                    this.MapName = (MaskItem<Exception, RegionDataMapName_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.Grasses:
                    this.Grasses = (MaskItem<Exception, RegionDataGrasses_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, RegionDataSounds_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Icon != null) return true;
            if (MapColor != null) return true;
            if (Worldspace != null) return true;
            if (Areas != null) return true;
            if (Objects != null) return true;
            if (Weather != null) return true;
            if (MapName != null) return true;
            if (Grasses != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Region_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"MapColor => {MapColor}");
            fg.AppendLine($"Worldspace => {Worldspace}");
            fg.AppendLine("Areas =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Areas.Overall != null)
                {
                    fg.AppendLine(Areas.Overall.ToString());
                }
                if (Areas.Specific != null)
                {
                    foreach (var subItem in Areas.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            Objects?.ToString(fg);
            Weather?.ToString(fg);
            MapName?.ToString(fg);
            Grasses?.ToString(fg);
            Sounds?.ToString(fg);
        }
        #endregion

        #region Combine
        public Region_ErrorMask Combine(Region_ErrorMask rhs)
        {
            var ret = new Region_ErrorMask();
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.MapColor = this.MapColor.Combine(rhs.MapColor);
            ret.Worldspace = this.Worldspace.Combine(rhs.Worldspace);
            ret.Areas = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>>(this.Areas.Overall.Combine(rhs.Areas.Overall), new List<MaskItem<Exception, RegionArea_ErrorMask>>(this.Areas.Specific.And(rhs.Areas.Specific)));
            ret.Objects = new MaskItem<Exception, RegionDataObjects_ErrorMask>(this.Objects.Overall.Combine(rhs.Objects.Overall), ((IErrorMask<RegionDataObjects_ErrorMask>)this.Objects.Specific).Combine(rhs.Objects.Specific));
            ret.Weather = new MaskItem<Exception, RegionDataWeather_ErrorMask>(this.Weather.Overall.Combine(rhs.Weather.Overall), ((IErrorMask<RegionDataWeather_ErrorMask>)this.Weather.Specific).Combine(rhs.Weather.Specific));
            ret.MapName = new MaskItem<Exception, RegionDataMapName_ErrorMask>(this.MapName.Overall.Combine(rhs.MapName.Overall), ((IErrorMask<RegionDataMapName_ErrorMask>)this.MapName.Specific).Combine(rhs.MapName.Specific));
            ret.Grasses = new MaskItem<Exception, RegionDataGrasses_ErrorMask>(this.Grasses.Overall.Combine(rhs.Grasses.Overall), ((IErrorMask<RegionDataGrasses_ErrorMask>)this.Grasses.Specific).Combine(rhs.Grasses.Specific));
            ret.Sounds = new MaskItem<Exception, RegionDataSounds_ErrorMask>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), ((IErrorMask<RegionDataSounds_ErrorMask>)this.Sounds.Specific).Combine(rhs.Sounds.Specific));
            return ret;
        }
        public static Region_ErrorMask Combine(Region_ErrorMask lhs, Region_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Region_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Region_ErrorMask();
        }
        #endregion

    }
    public class Region_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Region_CopyMask()
        {
        }

        public Region_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Icon = defaultOn;
            this.MapColor = defaultOn;
            this.Worldspace = defaultOn;
            this.Areas = new MaskItem<CopyOption, RegionArea_CopyMask>(deepCopyOption, default);
            this.Objects = new MaskItem<CopyOption, RegionDataObjects_CopyMask>(deepCopyOption, default);
            this.Weather = new MaskItem<CopyOption, RegionDataWeather_CopyMask>(deepCopyOption, default);
            this.MapName = new MaskItem<CopyOption, RegionDataMapName_CopyMask>(deepCopyOption, default);
            this.Grasses = new MaskItem<CopyOption, RegionDataGrasses_CopyMask>(deepCopyOption, default);
            this.Sounds = new MaskItem<CopyOption, RegionDataSounds_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool Icon;
        public bool MapColor;
        public bool Worldspace;
        public MaskItem<CopyOption, RegionArea_CopyMask> Areas;
        public MaskItem<CopyOption, RegionDataObjects_CopyMask> Objects;
        public MaskItem<CopyOption, RegionDataWeather_CopyMask> Weather;
        public MaskItem<CopyOption, RegionDataMapName_CopyMask> MapName;
        public MaskItem<CopyOption, RegionDataGrasses_CopyMask> Grasses;
        public MaskItem<CopyOption, RegionDataSounds_CopyMask> Sounds;
        #endregion

    }

    public class Region_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Icon;
        public bool MapColor;
        public bool Worldspace;
        public MaskItem<bool, RegionArea_TranslationMask> Areas;
        public MaskItem<bool, RegionDataObjects_TranslationMask> Objects;
        public MaskItem<bool, RegionDataWeather_TranslationMask> Weather;
        public MaskItem<bool, RegionDataMapName_TranslationMask> MapName;
        public MaskItem<bool, RegionDataGrasses_TranslationMask> Grasses;
        public MaskItem<bool, RegionDataSounds_TranslationMask> Sounds;
        #endregion

        #region Ctors
        public Region_TranslationMask()
            : base()
        {
        }

        public Region_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Icon = defaultOn;
            this.MapColor = defaultOn;
            this.Worldspace = defaultOn;
            this.Areas = new MaskItem<bool, RegionArea_TranslationMask>(defaultOn, null);
            this.Objects = new MaskItem<bool, RegionDataObjects_TranslationMask>(defaultOn, null);
            this.Weather = new MaskItem<bool, RegionDataWeather_TranslationMask>(defaultOn, null);
            this.MapName = new MaskItem<bool, RegionDataMapName_TranslationMask>(defaultOn, null);
            this.Grasses = new MaskItem<bool, RegionDataGrasses_TranslationMask>(defaultOn, null);
            this.Sounds = new MaskItem<bool, RegionDataSounds_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Icon, null));
            ret.Add((MapColor, null));
            ret.Add((Worldspace, null));
            ret.Add((Areas?.Overall ?? true, Areas?.Specific?.GetCrystal()));
            ret.Add((Objects?.Overall ?? true, Objects?.Specific?.GetCrystal()));
            ret.Add((Weather?.Overall ?? true, Weather?.Specific?.GetCrystal()));
            ret.Add((MapName?.Overall ?? true, MapName?.Specific?.GetCrystal()));
            ret.Add((Grasses?.Overall ?? true, Grasses?.Specific?.GetCrystal()));
            ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RegionBinaryTranslation :
        OblivionMajorRecordBinaryTranslation,
        IBinaryTranslator
    {
        public new readonly static RegionBinaryTranslation Instance = new RegionBinaryTranslation();

        static partial void FillBinary_RegionAreaLogic_Custom(
            MutagenFrame frame,
            Region item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_RegionAreaLogic_Custom_Public(
            MutagenFrame frame,
            Region item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_RegionAreaLogic_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_RegionAreaLogic_Custom(
            MutagenWriter writer,
            IRegionInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_RegionAreaLogic(
            MutagenWriter writer,
            IRegionInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_RegionAreaLogic_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_RecordTypes(
            IRegionInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(Region_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.MapColor_IsSet)
            {
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MapColor,
                    header: recordTypeConverter.ConvertToCustom(Region_Registration.RCLR_HEADER),
                    nullable: false,
                    extraByte: true);
            }
            if (item.Worldspace_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Worldspace_Property,
                    header: recordTypeConverter.ConvertToCustom(Region_Registration.WNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Areas.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionArea>.Instance.Write(
                    writer: writer,
                    items: item.Areas,
                    fieldIndex: (int)Region_FieldIndex.Areas,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, RegionArea subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        ((RegionAreaBinaryTranslation)((IBinaryItem)subItem).BinaryTranslator).Write(
                            item: subItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                    );
            }
            RegionBinaryTranslation.WriteBinary_RegionAreaLogic(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public void Write(
            MutagenWriter writer,
            IRegionInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Region_Registration.REGN_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class RegionBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this IRegionInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Region_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
