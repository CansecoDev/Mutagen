/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Windows.Media;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Loqui.Internal;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Region : 
        MajorRecord,
        IRegion,
        ILoquiObject<Region>,
        ILoquiObjectSetter,
        IEquatable<Region>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Region_Registration.Instance;
        public new static Region_Registration Registration => Region_Registration.Instance;

        #region Ctor
        public Region()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<String> _Icon = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> Icon_Property => _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon.Item;
            set => this._Icon.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IRegion.Icon_Property => this.Icon_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IRegionGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region MapColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<Color> _MapColor = NotifyingSetItem.Factory<Color>(markAsSet: false);
        public INotifyingSetItem<Color> MapColor_Property => _MapColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color MapColor
        {
            get => this._MapColor.Item;
            set => this._MapColor.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Color> IRegion.MapColor_Property => this.MapColor_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Color> IRegionGetter.MapColor_Property => this.MapColor_Property;
        #endregion
        #region Worldspace
        public FormIDSetLink<Worldspace> Worldspace_Property { get; } = new FormIDSetLink<Worldspace>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Worldspace Worldspace { get => Worldspace_Property.Item; set => Worldspace_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormIDSetLink<Worldspace> IRegionGetter.Worldspace_Property => this.Worldspace_Property;
        #endregion
        #region Areas
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<RegionArea> _Areas = new NotifyingList<RegionArea>();
        public INotifyingList<RegionArea> Areas => _Areas;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RegionArea> AreasEnumerable
        {
            get => _Areas;
            set => _Areas.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<RegionArea> IRegion.Areas => _Areas;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<RegionArea> IRegionGetter.Areas => _Areas;
        #endregion

        #endregion
        #region Objects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<RegionDataObjects> _Objects = new NotifyingSetItem<RegionDataObjects>();
        public INotifyingSetItem<RegionDataObjects> Objects_Property => this._Objects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RegionDataObjects IRegionGetter.Objects => this.Objects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataObjects Objects { get => _Objects.Item; set => _Objects.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<RegionDataObjects> IRegion.Objects_Property => this.Objects_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<RegionDataObjects> IRegionGetter.Objects_Property => this.Objects_Property;
        #endregion
        #region Weather
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<RegionDataWeather> _Weather = new NotifyingSetItem<RegionDataWeather>();
        public INotifyingSetItem<RegionDataWeather> Weather_Property => this._Weather;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RegionDataWeather IRegionGetter.Weather => this.Weather;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataWeather Weather { get => _Weather.Item; set => _Weather.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<RegionDataWeather> IRegion.Weather_Property => this.Weather_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<RegionDataWeather> IRegionGetter.Weather_Property => this.Weather_Property;
        #endregion
        #region MapName
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<RegionDataMapName> _MapName = new NotifyingSetItem<RegionDataMapName>();
        public INotifyingSetItem<RegionDataMapName> MapName_Property => this._MapName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RegionDataMapName IRegionGetter.MapName => this.MapName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataMapName MapName { get => _MapName.Item; set => _MapName.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<RegionDataMapName> IRegion.MapName_Property => this.MapName_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<RegionDataMapName> IRegionGetter.MapName_Property => this.MapName_Property;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<RegionDataGrasses> _Grasses = new NotifyingSetItem<RegionDataGrasses>();
        public INotifyingSetItem<RegionDataGrasses> Grasses_Property => this._Grasses;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RegionDataGrasses IRegionGetter.Grasses => this.Grasses;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataGrasses Grasses { get => _Grasses.Item; set => _Grasses.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<RegionDataGrasses> IRegion.Grasses_Property => this.Grasses_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<RegionDataGrasses> IRegionGetter.Grasses_Property => this.Grasses_Property;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingSetItem<RegionDataSounds> _Sounds = new NotifyingSetItem<RegionDataSounds>();
        public INotifyingSetItem<RegionDataSounds> Sounds_Property => this._Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RegionDataSounds IRegionGetter.Sounds => this.Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataSounds Sounds { get => _Sounds.Item; set => _Sounds.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<RegionDataSounds> IRegion.Sounds_Property => this.Sounds_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<RegionDataSounds> IRegionGetter.Sounds_Property => this.Sounds_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RegionCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RegionCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RegionCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RegionCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Region>.GetEqualsMask(Region rhs) => RegionCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRegionGetter>.GetEqualsMask(IRegionGetter rhs) => RegionCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RegionCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Region_Mask<bool> printMask = null)
        {
            return RegionCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Region_Mask<bool> GetHasBeenSetMask()
        {
            return RegionCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Region rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Region rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
            }
            if (MapColor_Property.HasBeenSet != rhs.MapColor_Property.HasBeenSet) return false;
            if (MapColor_Property.HasBeenSet)
            {
                if (this.MapColor != rhs.MapColor) return false;
            }
            if (Worldspace_Property.HasBeenSet != rhs.Worldspace_Property.HasBeenSet) return false;
            if (Worldspace_Property.HasBeenSet)
            {
                if (!this.Worldspace_Property.Equals(rhs.Worldspace_Property)) return false;
            }
            if (Areas.HasBeenSet != rhs.Areas.HasBeenSet) return false;
            if (Areas.HasBeenSet)
            {
                if (!this.Areas.SequenceEqual(rhs.Areas)) return false;
            }
            if (Objects_Property.HasBeenSet != rhs.Objects_Property.HasBeenSet) return false;
            if (Objects_Property.HasBeenSet)
            {
                if (!object.Equals(this.Objects, rhs.Objects)) return false;
            }
            if (Weather_Property.HasBeenSet != rhs.Weather_Property.HasBeenSet) return false;
            if (Weather_Property.HasBeenSet)
            {
                if (!object.Equals(this.Weather, rhs.Weather)) return false;
            }
            if (MapName_Property.HasBeenSet != rhs.MapName_Property.HasBeenSet) return false;
            if (MapName_Property.HasBeenSet)
            {
                if (!object.Equals(this.MapName, rhs.MapName)) return false;
            }
            if (Grasses_Property.HasBeenSet != rhs.Grasses_Property.HasBeenSet) return false;
            if (Grasses_Property.HasBeenSet)
            {
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
            }
            if (Sounds_Property.HasBeenSet != rhs.Sounds_Property.HasBeenSet) return false;
            if (Sounds_Property.HasBeenSet)
            {
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (MapColor_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MapColor).CombineHashCode(ret);
            }
            if (Worldspace_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Worldspace).CombineHashCode(ret);
            }
            if (Areas.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Areas).CombineHashCode(ret);
            }
            if (Objects_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Objects).CombineHashCode(ret);
            }
            if (Weather_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Weather).CombineHashCode(ret);
            }
            if (MapName_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MapName).CombineHashCode(ret);
            }
            if (Grasses_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Grasses).CombineHashCode(ret);
            }
            if (Sounds_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Region Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Region Create_XML(
            XElement root,
            out Region_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Region Object, Region_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Region_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Region_ErrorMask()) : default(Func<Region_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Region Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Region Create_XML(
            string path,
            out Region_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Region Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Region Create_XML(
            Stream stream,
            out Region_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Region, Region_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Region_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Region, Region_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Region_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Region_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Region_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Region_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as Region_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out Region_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Region_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            RegionCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Region Create_XML_Internal(
            XElement root,
            Func<Region_ErrorMask> errorMask)
        {
            var ret = new Region();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Region item,
            XElement root,
            string name,
            Func<Region_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Icon":
                    item._Icon.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Region_FieldIndex.Icon,
                        errorMask: errorMask));
                    break;
                case "MapColor":
                    item._MapColor.SetIfSucceeded(ColorXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Region_FieldIndex.MapColor,
                        errorMask: errorMask));
                    break;
                case "Worldspace":
                    item.Worldspace_Property.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)Region_FieldIndex.Worldspace,
                        errorMask: errorMask));
                    break;
                case "Areas":
                    item._Areas.SetIfSucceeded(ListXmlTranslation<RegionArea, MaskItem<Exception, RegionArea_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Region_FieldIndex.Areas,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, RegionArea_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<RegionArea, RegionArea_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                case "Objects":
                    item._Objects.SetIfSucceeded(LoquiXmlTranslation<RegionDataObjects, RegionDataObjects_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Region_FieldIndex.Objects,
                        errorMask: errorMask));
                    break;
                case "Weather":
                    item._Weather.SetIfSucceeded(LoquiXmlTranslation<RegionDataWeather, RegionDataWeather_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Region_FieldIndex.Weather,
                        errorMask: errorMask));
                    break;
                case "MapName":
                    item._MapName.SetIfSucceeded(LoquiXmlTranslation<RegionDataMapName, RegionDataMapName_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Region_FieldIndex.MapName,
                        errorMask: errorMask));
                    break;
                case "Grasses":
                    item._Grasses.SetIfSucceeded(LoquiXmlTranslation<RegionDataGrasses, RegionDataGrasses_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Region_FieldIndex.Grasses,
                        errorMask: errorMask));
                    break;
                case "Sounds":
                    item._Sounds.SetIfSucceeded(LoquiXmlTranslation<RegionDataSounds, RegionDataSounds_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Region_FieldIndex.Sounds,
                        errorMask: errorMask));
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Region_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Worldspace_Property;
            if (Objects != null)
            {
                foreach (var item in Objects.Links)
                {
                    yield return item;
                }
            }
            if (Weather != null)
            {
                foreach (var item in Weather.Links)
                {
                    yield return item;
                }
            }
            if (Sounds != null)
            {
                foreach (var item in Sounds.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Region Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Region Create_Binary(
            MutagenFrame frame,
            out Region_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Region Object, Region_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Region_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Region_ErrorMask()) : default(Func<Region_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Region Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Region Create_Binary(
            string path,
            out Region_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Region Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Region Create_Binary(
            Stream stream,
            out Region_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Region_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as Region_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out Region_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Region_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            RegionCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        static partial void FillBinary_RegionAreaLogic_Custom(
            MutagenFrame frame,
            Region item,
            Func<Region_ErrorMask> errorMask);

        static partial void WriteBinary_RegionAreaLogic_Custom(
            MutagenWriter writer,
            Region item,
            Func<Region_ErrorMask> errorMask);

        public static void WriteBinary_RegionAreaLogic(
            MutagenWriter writer,
            Region item,
            Func<Region_ErrorMask> errorMask)
        {
            try
            {
                WriteBinary_RegionAreaLogic_Custom(
                    writer: writer,
                    item: item,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }

        private static Region Create_Binary_Internal(
            MutagenFrame frame,
            Func<Region_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Region, Region_ErrorMask, Region_FieldIndex>(
                record: new Region(),
                frame: frame,
                errorMask: errorMask,
                recType: Region_Registration.REGN_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Region item,
            MutagenFrame frame,
            Func<Region_ErrorMask> errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Region_FieldIndex?> Fill_Binary_RecordTypes(
            Region item,
            MutagenFrame frame,
            Func<Region_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var IcontryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Region_FieldIndex.Icon,
                        parseWhole: true,
                        errorMask: errorMask);
                    item._Icon.SetIfSucceeded(IcontryGet);
                    return TryGet<Region_FieldIndex?>.Succeed(Region_FieldIndex.Icon);
                case "RCLR":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._MapColor.SetIfSucceeded(Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Region_FieldIndex.MapColor,
                        errorMask: errorMask,
                        extraByte: true));
                    return TryGet<Region_FieldIndex?>.Succeed(Region_FieldIndex.MapColor);
                case "WNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item.Worldspace_Property.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)Region_FieldIndex.Worldspace,
                        errorMask: errorMask));
                    return TryGet<Region_FieldIndex?>.Succeed(Region_FieldIndex.Worldspace);
                case "RPLI":
                case "RPLD":
                    var AreastryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionArea, MaskItem<Exception, RegionArea_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: RegionArea_Registration.TriggeringRecordTypes,
                        fieldIndex: (int)Region_FieldIndex.Areas,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, RegionArea_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<RegionArea, RegionArea_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Areas.SetIfSucceeded(AreastryGet);
                    return TryGet<Region_FieldIndex?>.Succeed(Region_FieldIndex.Areas);
                case "RDAT":
                    try
                    {
                        using (var subFrame = frame.SpawnWithLength(Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                        {
                            FillBinary_RegionAreaLogic_Custom(
                                frame: subFrame,
                                item: item,
                                errorMask: errorMask);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask().Overall = ex;
                    }
                    return TryGet<Region_FieldIndex?>.Succeed(null);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => RegionCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Region Copy(
            Region_CopyMask copyMask = null,
            IRegionGetter def = null)
        {
            return Region.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Region Copy(
            IRegion item,
            Region_CopyMask copyMask = null,
            IRegionGetter def = null)
        {
            Region ret;
            if (item.GetType().Equals(typeof(Region)))
            {
                ret = new Region();
            }
            else
            {
                ret = (Region)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Region Copy_ToLoqui(
            IRegionGetter item,
            Region_CopyMask copyMask = null,
            IRegionGetter def = null)
        {
            Region ret;
            if (item.GetType().Equals(typeof(Region)))
            {
                ret = new Region() as Region;
            }
            else
            {
                ret = (Region)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRegionGetter rhs,
            Region_CopyMask copyMask,
            IRegionGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRegionGetter rhs,
            out Region_ErrorMask errorMask,
            Region_CopyMask copyMask = null,
            IRegionGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            Region_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Region_ErrorMask();
                }
                return retErrorMask;
            };
            RegionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    this._Icon.Set(
                        (String)obj,
                        cmds);
                    break;
                case Region_FieldIndex.MapColor:
                    this._MapColor.Set(
                        (Color)obj,
                        cmds);
                    break;
                case Region_FieldIndex.Worldspace:
                    this.Worldspace_Property.Set(
                        (FormIDSetLink<Worldspace>)obj,
                        cmds);
                    break;
                case Region_FieldIndex.Areas:
                    this._Areas.SetTo((IEnumerable<RegionArea>)obj, cmds);
                    break;
                case Region_FieldIndex.Objects:
                    this._Objects.Set(
                        (RegionDataObjects)obj,
                        cmds);
                    break;
                case Region_FieldIndex.Weather:
                    this._Weather.Set(
                        (RegionDataWeather)obj,
                        cmds);
                    break;
                case Region_FieldIndex.MapName:
                    this._MapName.Set(
                        (RegionDataMapName)obj,
                        cmds);
                    break;
                case Region_FieldIndex.Grasses:
                    this._Grasses.Set(
                        (RegionDataGrasses)obj,
                        cmds);
                    break;
                case Region_FieldIndex.Sounds:
                    this._Sounds.Set(
                        (RegionDataSounds)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RegionCommon.Clear(this, cmds);
        }


        public new static Region Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Region();
            foreach (var pair in fields)
            {
                CopyInInternal_Region(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Region(Region obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Region_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    obj._Icon.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Region_FieldIndex.MapColor:
                    obj._MapColor.Set(
                        (Color)pair.Value,
                        null);
                    break;
                case Region_FieldIndex.Worldspace:
                    obj.Worldspace_Property.Set(
                        (FormIDSetLink<Worldspace>)pair.Value,
                        null);
                    break;
                case Region_FieldIndex.Areas:
                    obj._Areas.SetTo((IEnumerable<RegionArea>)pair.Value, null);
                    break;
                case Region_FieldIndex.Objects:
                    obj._Objects.Set(
                        (RegionDataObjects)pair.Value,
                        null);
                    break;
                case Region_FieldIndex.Weather:
                    obj._Weather.Set(
                        (RegionDataWeather)pair.Value,
                        null);
                    break;
                case Region_FieldIndex.MapName:
                    obj._MapName.Set(
                        (RegionDataMapName)pair.Value,
                        null);
                    break;
                case Region_FieldIndex.Grasses:
                    obj._Grasses.Set(
                        (RegionDataGrasses)pair.Value,
                        null);
                    break;
                case Region_FieldIndex.Sounds:
                    obj._Sounds.Set(
                        (RegionDataSounds)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Region obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRegion : IRegionGetter, IMajorRecord, ILoquiClass<IRegion, IRegionGetter>, ILoquiClass<Region, IRegionGetter>
    {
        new String Icon { get; set; }
        new INotifyingSetItem<String> Icon_Property { get; }

        new Color MapColor { get; set; }
        new INotifyingSetItem<Color> MapColor_Property { get; }

        new Worldspace Worldspace { get; set; }
        new INotifyingList<RegionArea> Areas { get; }
        new RegionDataObjects Objects { get; set; }
        new INotifyingSetItem<RegionDataObjects> Objects_Property { get; }

        new RegionDataWeather Weather { get; set; }
        new INotifyingSetItem<RegionDataWeather> Weather_Property { get; }

        new RegionDataMapName MapName { get; set; }
        new INotifyingSetItem<RegionDataMapName> MapName_Property { get; }

        new RegionDataGrasses Grasses { get; set; }
        new INotifyingSetItem<RegionDataGrasses> Grasses_Property { get; }

        new RegionDataSounds Sounds { get; set; }
        new INotifyingSetItem<RegionDataSounds> Sounds_Property { get; }

    }

    public partial interface IRegionGetter : IMajorRecordGetter
    {
        #region Icon
        String Icon { get; }
        INotifyingSetItemGetter<String> Icon_Property { get; }

        #endregion
        #region MapColor
        Color MapColor { get; }
        INotifyingSetItemGetter<Color> MapColor_Property { get; }

        #endregion
        #region Worldspace
        Worldspace Worldspace { get; }
        FormIDSetLink<Worldspace> Worldspace_Property { get; }

        #endregion
        #region Areas
        INotifyingListGetter<RegionArea> Areas { get; }
        #endregion
        #region Objects
        RegionDataObjects Objects { get; }
        INotifyingSetItemGetter<RegionDataObjects> Objects_Property { get; }

        #endregion
        #region Weather
        RegionDataWeather Weather { get; }
        INotifyingSetItemGetter<RegionDataWeather> Weather_Property { get; }

        #endregion
        #region MapName
        RegionDataMapName MapName { get; }
        INotifyingSetItemGetter<RegionDataMapName> MapName_Property { get; }

        #endregion
        #region Grasses
        RegionDataGrasses Grasses { get; }
        INotifyingSetItemGetter<RegionDataGrasses> Grasses_Property { get; }

        #endregion
        #region Sounds
        RegionDataSounds Sounds { get; }
        INotifyingSetItemGetter<RegionDataSounds> Sounds_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Region_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Icon = 5,
        MapColor = 6,
        Worldspace = 7,
        Areas = 8,
        Objects = 9,
        Weather = 10,
        MapName = 11,
        Grasses = 12,
        Sounds = 13,
    }
    #endregion

    #region Registration
    public class Region_Registration : ILoquiRegistration
    {
        public static readonly Region_Registration Instance = new Region_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 107,
            version: 0);

        public const string GUID = "638d02e0-687a-49ad-a934-6f2ed1e05c3a";

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(Region_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Region_ErrorMask);

        public static readonly Type ClassType = typeof(Region);

        public static readonly Type GetterType = typeof(IRegionGetter);

        public static readonly Type SetterType = typeof(IRegion);

        public static readonly Type CommonType = typeof(RegionCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Region";

        public const string Name = "Region";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ICON":
                    return (ushort)Region_FieldIndex.Icon;
                case "MAPCOLOR":
                    return (ushort)Region_FieldIndex.MapColor;
                case "WORLDSPACE":
                    return (ushort)Region_FieldIndex.Worldspace;
                case "AREAS":
                    return (ushort)Region_FieldIndex.Areas;
                case "OBJECTS":
                    return (ushort)Region_FieldIndex.Objects;
                case "WEATHER":
                    return (ushort)Region_FieldIndex.Weather;
                case "MAPNAME":
                    return (ushort)Region_FieldIndex.MapName;
                case "GRASSES":
                    return (ushort)Region_FieldIndex.Grasses;
                case "SOUNDS":
                    return (ushort)Region_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Areas:
                    return true;
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return true;
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return "Icon";
                case Region_FieldIndex.MapColor:
                    return "MapColor";
                case Region_FieldIndex.Worldspace:
                    return "Worldspace";
                case Region_FieldIndex.Areas:
                    return "Areas";
                case Region_FieldIndex.Objects:
                    return "Objects";
                case Region_FieldIndex.Weather:
                    return "Weather";
                case Region_FieldIndex.MapName:
                    return "MapName";
                case Region_FieldIndex.Grasses:
                    return "Grasses";
                case Region_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return typeof(String);
                case Region_FieldIndex.MapColor:
                    return typeof(Color);
                case Region_FieldIndex.Worldspace:
                    return typeof(FormIDSetLink<Worldspace>);
                case Region_FieldIndex.Areas:
                    return typeof(NotifyingList<RegionArea>);
                case Region_FieldIndex.Objects:
                    return typeof(RegionDataObjects);
                case Region_FieldIndex.Weather:
                    return typeof(RegionDataWeather);
                case Region_FieldIndex.MapName:
                    return typeof(RegionDataMapName);
                case Region_FieldIndex.Grasses:
                    return typeof(RegionDataGrasses);
                case Region_FieldIndex.Sounds:
                    return typeof(RegionDataSounds);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType REGN_HEADER = new RecordType("REGN");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType RCLR_HEADER = new RecordType("RCLR");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType RPLI_HEADER = new RecordType("RPLI");
        public static readonly RecordType RPLD_HEADER = new RecordType("RPLD");
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = REGN_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RegionCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRegion item,
            IRegionGetter rhs,
            IRegionGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            Region_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Icon ?? true)
            {
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs: rhs.Icon_Property,
                        def: def?.Icon_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Region_FieldIndex.Icon, ex);
                }
            }
            if (copyMask?.MapColor ?? true)
            {
                try
                {
                    item.MapColor_Property.SetToWithDefault(
                        rhs: rhs.MapColor_Property,
                        def: def?.MapColor_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Region_FieldIndex.MapColor, ex);
                }
            }
            if (copyMask?.Worldspace ?? true)
            {
                try
                {
                    item.Worldspace_Property.SetToWithDefault(
                        rhs: rhs.Worldspace_Property,
                        def: def?.Worldspace_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Region_FieldIndex.Worldspace, ex);
                }
            }
            if (copyMask?.Areas.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Areas.SetToWithDefault(
                        rhs: rhs.Areas,
                        def: def?.Areas,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Areas.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RegionArea);
                                    return RegionArea.Copy(
                                        r,
                                        copyMask?.Areas?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Areas.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Region_FieldIndex.Areas, ex);
                }
            }
            if (copyMask?.Objects.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Objects_Property.SetToWithDefault(
                        rhs.Objects_Property,
                        def?.Objects_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Objects.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RegionDataObjectsCommon.CopyFieldsFrom(
                                        item: item.Objects,
                                        rhs: rhs.Objects,
                                        def: def?.Objects,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RegionDataObjects_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new RegionDataObjects_ErrorMask();
                                            baseMask.SetNthMask((int)Region_FieldIndex.Objects, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Objects.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RegionDataObjects);
                                    return RegionDataObjects.Copy(
                                        r,
                                        copyMask?.Objects?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Objects?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Region_FieldIndex.Objects, ex);
                }
            }
            if (copyMask?.Weather.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Weather_Property.SetToWithDefault(
                        rhs.Weather_Property,
                        def?.Weather_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Weather.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RegionDataWeatherCommon.CopyFieldsFrom(
                                        item: item.Weather,
                                        rhs: rhs.Weather,
                                        def: def?.Weather,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RegionDataWeather_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new RegionDataWeather_ErrorMask();
                                            baseMask.SetNthMask((int)Region_FieldIndex.Weather, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Weather.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RegionDataWeather);
                                    return RegionDataWeather.Copy(
                                        r,
                                        copyMask?.Weather?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Weather?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Region_FieldIndex.Weather, ex);
                }
            }
            if (copyMask?.MapName.Overall != CopyOption.Skip)
            {
                try
                {
                    item.MapName_Property.SetToWithDefault(
                        rhs.MapName_Property,
                        def?.MapName_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.MapName.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RegionDataMapNameCommon.CopyFieldsFrom(
                                        item: item.MapName,
                                        rhs: rhs.MapName,
                                        def: def?.MapName,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RegionDataMapName_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new RegionDataMapName_ErrorMask();
                                            baseMask.SetNthMask((int)Region_FieldIndex.MapName, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.MapName.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RegionDataMapName);
                                    return RegionDataMapName.Copy(
                                        r,
                                        copyMask?.MapName?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.MapName?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Region_FieldIndex.MapName, ex);
                }
            }
            if (copyMask?.Grasses.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Grasses_Property.SetToWithDefault(
                        rhs.Grasses_Property,
                        def?.Grasses_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Grasses.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RegionDataGrassesCommon.CopyFieldsFrom(
                                        item: item.Grasses,
                                        rhs: rhs.Grasses,
                                        def: def?.Grasses,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RegionDataGrasses_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new RegionDataGrasses_ErrorMask();
                                            baseMask.SetNthMask((int)Region_FieldIndex.Grasses, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Grasses.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RegionDataGrasses);
                                    return RegionDataGrasses.Copy(
                                        r,
                                        copyMask?.Grasses?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Grasses?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Region_FieldIndex.Grasses, ex);
                }
            }
            if (copyMask?.Sounds.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Sounds_Property.SetToWithDefault(
                        rhs.Sounds_Property,
                        def?.Sounds_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Sounds.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RegionDataSoundsCommon.CopyFieldsFrom(
                                        item: item.Sounds,
                                        rhs: rhs.Sounds,
                                        def: def?.Sounds,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RegionDataSounds_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            var mask = new RegionDataSounds_ErrorMask();
                                            baseMask.SetNthMask((int)Region_FieldIndex.Sounds, mask);
                                            return mask;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Sounds.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RegionDataSounds);
                                    return RegionDataSounds.Copy(
                                        r,
                                        copyMask?.Sounds?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Sounds?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Region_FieldIndex.Sounds, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRegion obj,
            NotifyingFireParameters cmds = null)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case Region_FieldIndex.MapColor:
                    obj.MapColor_Property.HasBeenSet = on;
                    break;
                case Region_FieldIndex.Worldspace:
                    obj.Worldspace_Property.HasBeenSet = on;
                    break;
                case Region_FieldIndex.Areas:
                    obj.Areas.HasBeenSet = on;
                    break;
                case Region_FieldIndex.Objects:
                    obj.Objects_Property.HasBeenSet = on;
                    break;
                case Region_FieldIndex.Weather:
                    obj.Weather_Property.HasBeenSet = on;
                    break;
                case Region_FieldIndex.MapName:
                    obj.MapName_Property.HasBeenSet = on;
                    break;
                case Region_FieldIndex.Grasses:
                    obj.Grasses_Property.HasBeenSet = on;
                    break;
                case Region_FieldIndex.Sounds:
                    obj.Sounds_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRegion obj,
            NotifyingUnsetParameters cmds = null)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Region_FieldIndex.MapColor:
                    obj.MapColor_Property.Unset(cmds);
                    break;
                case Region_FieldIndex.Worldspace:
                    obj.Worldspace_Property.Unset(cmds);
                    break;
                case Region_FieldIndex.Areas:
                    obj.Areas.Unset(cmds);
                    break;
                case Region_FieldIndex.Objects:
                    obj.Objects_Property.Unset(cmds);
                    break;
                case Region_FieldIndex.Weather:
                    obj.Weather_Property.Unset(cmds);
                    break;
                case Region_FieldIndex.MapName:
                    obj.MapName_Property.Unset(cmds);
                    break;
                case Region_FieldIndex.Grasses:
                    obj.Grasses_Property.Unset(cmds);
                    break;
                case Region_FieldIndex.Sounds:
                    obj.Sounds_Property.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRegion obj)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case Region_FieldIndex.MapColor:
                    return obj.MapColor_Property.HasBeenSet;
                case Region_FieldIndex.Worldspace:
                    return obj.Worldspace_Property.HasBeenSet;
                case Region_FieldIndex.Areas:
                    return obj.Areas.HasBeenSet;
                case Region_FieldIndex.Objects:
                    return obj.Objects_Property.HasBeenSet;
                case Region_FieldIndex.Weather:
                    return obj.Weather_Property.HasBeenSet;
                case Region_FieldIndex.MapName:
                    return obj.MapName_Property.HasBeenSet;
                case Region_FieldIndex.Grasses:
                    return obj.Grasses_Property.HasBeenSet;
                case Region_FieldIndex.Sounds:
                    return obj.Sounds_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRegionGetter obj)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return obj.Icon;
                case Region_FieldIndex.MapColor:
                    return obj.MapColor;
                case Region_FieldIndex.Worldspace:
                    return obj.Worldspace;
                case Region_FieldIndex.Areas:
                    return obj.Areas;
                case Region_FieldIndex.Objects:
                    return obj.Objects;
                case Region_FieldIndex.Weather:
                    return obj.Weather;
                case Region_FieldIndex.MapName:
                    return obj.MapName;
                case Region_FieldIndex.Grasses:
                    return obj.Grasses;
                case Region_FieldIndex.Sounds:
                    return obj.Sounds;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRegion item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.MapColor_Property.Unset(cmds.ToUnsetParams());
            item.Worldspace_Property.Unset(cmds.ToUnsetParams());
            item.Areas.Unset(cmds.ToUnsetParams());
            item.Objects_Property.Unset(cmds.ToUnsetParams());
            item.Weather_Property.Unset(cmds.ToUnsetParams());
            item.MapName_Property.Unset(cmds.ToUnsetParams());
            item.Grasses_Property.Unset(cmds.ToUnsetParams());
            item.Sounds_Property.Unset(cmds.ToUnsetParams());
        }

        public static Region_Mask<bool> GetEqualsMask(
            this IRegionGetter item,
            IRegionGetter rhs)
        {
            var ret = new Region_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRegionGetter item,
            IRegionGetter rhs,
            Region_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.MapColor = item.MapColor_Property.Equals(rhs.MapColor_Property, (l, r) => l == r);
            ret.Worldspace = item.Worldspace_Property.Equals(rhs.Worldspace_Property, (l, r) => l == r);
            if (item.Areas.HasBeenSet == rhs.Areas.HasBeenSet)
            {
                if (item.Areas.HasBeenSet)
                {
                    ret.Areas = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionArea_Mask<bool>>>>();
                    ret.Areas.Specific = item.Areas.SelectAgainst<RegionArea, MaskItem<bool, RegionArea_Mask<bool>>>(rhs.Areas, ((l, r) =>
                    {
                        MaskItem<bool, RegionArea_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.Areas.Overall);
                    ret.Areas.Overall = ret.Areas.Overall && ret.Areas.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Areas = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionArea_Mask<bool>>>>();
                    ret.Areas.Overall = true;
                }
            }
            else
            {
                ret.Areas = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionArea_Mask<bool>>>>();
                ret.Areas.Overall = false;
            }
            ret.Objects = item.Objects_Property.LoquiEqualsHelper(rhs.Objects_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Weather = item.Weather_Property.LoquiEqualsHelper(rhs.Weather_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.MapName = item.MapName_Property.LoquiEqualsHelper(rhs.MapName_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Grasses = item.Grasses_Property.LoquiEqualsHelper(rhs.Grasses_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.Sounds = item.Sounds_Property.LoquiEqualsHelper(rhs.Sounds_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRegionGetter item,
            string name = null,
            Region_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRegionGetter item,
            FileGeneration fg,
            string name = null,
            Region_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Region)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Region)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.MapColor ?? true)
                {
                    fg.AppendLine($"MapColor => {item.MapColor}");
                }
                if (printMask?.Worldspace ?? true)
                {
                    fg.AppendLine($"Worldspace => {item.Worldspace_Property}");
                }
                if (printMask?.Areas?.Overall ?? true)
                {
                    fg.AppendLine("Areas =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Areas)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Objects?.Overall ?? true)
                {
                    item.Objects?.ToString(fg, "Objects");
                }
                if (printMask?.Weather?.Overall ?? true)
                {
                    item.Weather?.ToString(fg, "Weather");
                }
                if (printMask?.MapName?.Overall ?? true)
                {
                    item.MapName?.ToString(fg, "MapName");
                }
                if (printMask?.Grasses?.Overall ?? true)
                {
                    item.Grasses?.ToString(fg, "Grasses");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    item.Sounds?.ToString(fg, "Sounds");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRegionGetter item,
            Region_Mask<bool?> checkMask)
        {
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.MapColor.HasValue && checkMask.MapColor.Value != item.MapColor_Property.HasBeenSet) return false;
            if (checkMask.Worldspace.HasValue && checkMask.Worldspace.Value != item.Worldspace_Property.HasBeenSet) return false;
            if (checkMask.Areas.Overall.HasValue && checkMask.Areas.Overall.Value != item.Areas.HasBeenSet) return false;
            if (checkMask.Objects.Overall.HasValue && checkMask.Objects.Overall.Value != item.Objects_Property.HasBeenSet) return false;
            if (checkMask.Objects.Specific != null && (item.Objects == null || !item.Objects.HasBeenSet(checkMask.Objects.Specific))) return false;
            if (checkMask.Weather.Overall.HasValue && checkMask.Weather.Overall.Value != item.Weather_Property.HasBeenSet) return false;
            if (checkMask.Weather.Specific != null && (item.Weather == null || !item.Weather.HasBeenSet(checkMask.Weather.Specific))) return false;
            if (checkMask.MapName.Overall.HasValue && checkMask.MapName.Overall.Value != item.MapName_Property.HasBeenSet) return false;
            if (checkMask.MapName.Specific != null && (item.MapName == null || !item.MapName.HasBeenSet(checkMask.MapName.Specific))) return false;
            if (checkMask.Grasses.Overall.HasValue && checkMask.Grasses.Overall.Value != item.Grasses_Property.HasBeenSet) return false;
            if (checkMask.Grasses.Specific != null && (item.Grasses == null || !item.Grasses.HasBeenSet(checkMask.Grasses.Specific))) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds_Property.HasBeenSet) return false;
            if (checkMask.Sounds.Specific != null && (item.Sounds == null || !item.Sounds.HasBeenSet(checkMask.Sounds.Specific))) return false;
            return true;
        }

        public static Region_Mask<bool> GetHasBeenSetMask(IRegionGetter item)
        {
            var ret = new Region_Mask<bool>();
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.MapColor = item.MapColor_Property.HasBeenSet;
            ret.Worldspace = item.Worldspace_Property.HasBeenSet;
            ret.Areas = new MaskItem<bool, IEnumerable<MaskItem<bool, RegionArea_Mask<bool>>>>(item.Areas.HasBeenSet, item.Areas.Select((i) => new MaskItem<bool, RegionArea_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Objects = new MaskItem<bool, RegionDataObjects_Mask<bool>>(item.Objects_Property.HasBeenSet, RegionDataObjectsCommon.GetHasBeenSetMask(item.Objects));
            ret.Weather = new MaskItem<bool, RegionDataWeather_Mask<bool>>(item.Weather_Property.HasBeenSet, RegionDataWeatherCommon.GetHasBeenSetMask(item.Weather));
            ret.MapName = new MaskItem<bool, RegionDataMapName_Mask<bool>>(item.MapName_Property.HasBeenSet, RegionDataMapNameCommon.GetHasBeenSetMask(item.MapName));
            ret.Grasses = new MaskItem<bool, RegionDataGrasses_Mask<bool>>(item.Grasses_Property.HasBeenSet, RegionDataGrassesCommon.GetHasBeenSetMask(item.Grasses));
            ret.Sounds = new MaskItem<bool, RegionDataSounds_Mask<bool>>(item.Sounds_Property.HasBeenSet, RegionDataSoundsCommon.GetHasBeenSetMask(item.Sounds));
            return ret;
        }

        public static Region_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Region_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Region_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IRegionGetter item,
            bool doMasks,
            out Region_ErrorMask errorMask,
            string name = null)
        {
            Region_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Region_ErrorMask()) : default(Func<Region_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            IRegionGetter item,
            Func<Region_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Region");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Region");
                }
                if (item.Icon_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Icon),
                        item: item.Icon_Property,
                        fieldIndex: (int)Region_FieldIndex.Icon,
                        errorMask: errorMask);
                }
                if (item.MapColor_Property.HasBeenSet)
                {
                    ColorXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.MapColor),
                        item: item.MapColor_Property,
                        fieldIndex: (int)Region_FieldIndex.MapColor,
                        errorMask: errorMask);
                }
                if (item.Worldspace_Property.HasBeenSet)
                {
                    FormIDXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Worldspace),
                        item: item.Worldspace?.FormID,
                        fieldIndex: (int)Region_FieldIndex.Worldspace,
                        errorMask: errorMask);
                }
                if (item.Areas.HasBeenSet)
                {
                    ListXmlTranslation<RegionArea, MaskItem<Exception, RegionArea_ErrorMask>>.Instance.Write(
                        node: elem,
                        name: nameof(item.Areas),
                        item: item.Areas,
                        fieldIndex: (int)Region_FieldIndex.Areas,
                        errorMask: errorMask,
                        transl: (XElement subNode, RegionArea subItem, bool listDoMasks, out MaskItem<Exception, RegionArea_ErrorMask> listSubMask) =>
                        {
                            LoquiXmlTranslation<RegionArea, RegionArea_ErrorMask>.Instance.Write(
                                node: subNode,
                                item: subItem,
                                name: "Item",
                                doMasks: errorMask != null,
                                errorMask: out listSubMask);
                        }
                        );
                }
                if (item.Objects_Property.HasBeenSet)
                {
                    LoquiXmlTranslation<RegionDataObjects, RegionDataObjects_ErrorMask>.Instance.Write(
                        node: elem,
                        item: item.Objects_Property,
                        name: nameof(item.Objects),
                        fieldIndex: (int)Region_FieldIndex.Objects,
                        errorMask: errorMask);
                }
                if (item.Weather_Property.HasBeenSet)
                {
                    LoquiXmlTranslation<RegionDataWeather, RegionDataWeather_ErrorMask>.Instance.Write(
                        node: elem,
                        item: item.Weather_Property,
                        name: nameof(item.Weather),
                        fieldIndex: (int)Region_FieldIndex.Weather,
                        errorMask: errorMask);
                }
                if (item.MapName_Property.HasBeenSet)
                {
                    LoquiXmlTranslation<RegionDataMapName, RegionDataMapName_ErrorMask>.Instance.Write(
                        node: elem,
                        item: item.MapName_Property,
                        name: nameof(item.MapName),
                        fieldIndex: (int)Region_FieldIndex.MapName,
                        errorMask: errorMask);
                }
                if (item.Grasses_Property.HasBeenSet)
                {
                    LoquiXmlTranslation<RegionDataGrasses, RegionDataGrasses_ErrorMask>.Instance.Write(
                        node: elem,
                        item: item.Grasses_Property,
                        name: nameof(item.Grasses),
                        fieldIndex: (int)Region_FieldIndex.Grasses,
                        errorMask: errorMask);
                }
                if (item.Sounds_Property.HasBeenSet)
                {
                    LoquiXmlTranslation<RegionDataSounds, RegionDataSounds_ErrorMask>.Instance.Write(
                        node: elem,
                        item: item.Sounds_Property,
                        name: nameof(item.Sounds),
                        fieldIndex: (int)Region_FieldIndex.Sounds,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Region item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Region_ErrorMask errorMask)
        {
            Region_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Region_ErrorMask()) : default(Func<Region_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Region item,
            RecordTypeConverter recordTypeConverter,
            Func<Region_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Region_Registration.REGN_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Region item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Region_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)Region_FieldIndex.Icon,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Region_Registration.ICON_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MapColor_Property,
                fieldIndex: (int)Region_FieldIndex.MapColor,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Region_Registration.RCLR_HEADER),
                nullable: false,
                extraByte: true);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Worldspace_Property,
                fieldIndex: (int)Region_FieldIndex.Worldspace,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(Region_Registration.WNAM_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionArea, MaskItem<Exception, RegionArea_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Areas,
                fieldIndex: (int)Region_FieldIndex.Areas,
                errorMask: errorMask,
                transl: (MutagenWriter subWriter, RegionArea subItem, bool listDoMasks, out MaskItem<Exception, RegionArea_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<RegionArea, RegionArea_ErrorMask>.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            Region.WriteBinary_RegionAreaLogic(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Region_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Region_Mask<T>>
    {
        #region Ctors
        public Region_Mask()
        {
        }

        public Region_Mask(T initialValue)
        {
            this.Icon = initialValue;
            this.MapColor = initialValue;
            this.Worldspace = initialValue;
            this.Areas = new MaskItem<T, IEnumerable<MaskItem<T, RegionArea_Mask<T>>>>(initialValue, null);
            this.Objects = new MaskItem<T, RegionDataObjects_Mask<T>>(initialValue, new RegionDataObjects_Mask<T>(initialValue));
            this.Weather = new MaskItem<T, RegionDataWeather_Mask<T>>(initialValue, new RegionDataWeather_Mask<T>(initialValue));
            this.MapName = new MaskItem<T, RegionDataMapName_Mask<T>>(initialValue, new RegionDataMapName_Mask<T>(initialValue));
            this.Grasses = new MaskItem<T, RegionDataGrasses_Mask<T>>(initialValue, new RegionDataGrasses_Mask<T>(initialValue));
            this.Sounds = new MaskItem<T, RegionDataSounds_Mask<T>>(initialValue, new RegionDataSounds_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Icon;
        public T MapColor;
        public T Worldspace;
        public MaskItem<T, IEnumerable<MaskItem<T, RegionArea_Mask<T>>>> Areas;
        public MaskItem<T, RegionDataObjects_Mask<T>> Objects { get; set; }
        public MaskItem<T, RegionDataWeather_Mask<T>> Weather { get; set; }
        public MaskItem<T, RegionDataMapName_Mask<T>> MapName { get; set; }
        public MaskItem<T, RegionDataGrasses_Mask<T>> Grasses { get; set; }
        public MaskItem<T, RegionDataSounds_Mask<T>> Sounds { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Region_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Region_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.MapColor, rhs.MapColor)) return false;
            if (!object.Equals(this.Worldspace, rhs.Worldspace)) return false;
            if (!object.Equals(this.Areas, rhs.Areas)) return false;
            if (!object.Equals(this.Objects, rhs.Objects)) return false;
            if (!object.Equals(this.Weather, rhs.Weather)) return false;
            if (!object.Equals(this.MapName, rhs.MapName)) return false;
            if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.MapColor?.GetHashCode());
            ret = ret.CombineHashCode(this.Worldspace?.GetHashCode());
            ret = ret.CombineHashCode(this.Areas?.GetHashCode());
            ret = ret.CombineHashCode(this.Objects?.GetHashCode());
            ret = ret.CombineHashCode(this.Weather?.GetHashCode());
            ret = ret.CombineHashCode(this.MapName?.GetHashCode());
            ret = ret.CombineHashCode(this.Grasses?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.MapColor)) return false;
            if (!eval(this.Worldspace)) return false;
            if (this.Areas != null)
            {
                if (!eval(this.Areas.Overall)) return false;
                if (this.Areas.Specific != null)
                {
                    foreach (var item in this.Areas.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (Objects != null)
            {
                if (!eval(this.Objects.Overall)) return false;
                if (this.Objects.Specific != null && !this.Objects.Specific.AllEqual(eval)) return false;
            }
            if (Weather != null)
            {
                if (!eval(this.Weather.Overall)) return false;
                if (this.Weather.Specific != null && !this.Weather.Specific.AllEqual(eval)) return false;
            }
            if (MapName != null)
            {
                if (!eval(this.MapName.Overall)) return false;
                if (this.MapName.Specific != null && !this.MapName.Specific.AllEqual(eval)) return false;
            }
            if (Grasses != null)
            {
                if (!eval(this.Grasses.Overall)) return false;
                if (this.Grasses.Specific != null && !this.Grasses.Specific.AllEqual(eval)) return false;
            }
            if (Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null && !this.Sounds.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Region_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Region_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Region_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Icon = eval(this.Icon);
            obj.MapColor = eval(this.MapColor);
            obj.Worldspace = eval(this.Worldspace);
            if (Areas != null)
            {
                obj.Areas = new MaskItem<R, IEnumerable<MaskItem<R, RegionArea_Mask<R>>>>();
                obj.Areas.Overall = eval(this.Areas.Overall);
                if (Areas.Specific != null)
                {
                    List<MaskItem<R, RegionArea_Mask<R>>> l = new List<MaskItem<R, RegionArea_Mask<R>>>();
                    obj.Areas.Specific = l;
                    foreach (var item in Areas.Specific)
                    {
                        MaskItem<R, RegionArea_Mask<R>> mask = default(MaskItem<R, RegionArea_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, RegionArea_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (this.Objects != null)
            {
                obj.Objects = new MaskItem<R, RegionDataObjects_Mask<R>>();
                obj.Objects.Overall = eval(this.Objects.Overall);
                if (this.Objects.Specific != null)
                {
                    obj.Objects.Specific = this.Objects.Specific.Translate(eval);
                }
            }
            if (this.Weather != null)
            {
                obj.Weather = new MaskItem<R, RegionDataWeather_Mask<R>>();
                obj.Weather.Overall = eval(this.Weather.Overall);
                if (this.Weather.Specific != null)
                {
                    obj.Weather.Specific = this.Weather.Specific.Translate(eval);
                }
            }
            if (this.MapName != null)
            {
                obj.MapName = new MaskItem<R, RegionDataMapName_Mask<R>>();
                obj.MapName.Overall = eval(this.MapName.Overall);
                if (this.MapName.Specific != null)
                {
                    obj.MapName.Specific = this.MapName.Specific.Translate(eval);
                }
            }
            if (this.Grasses != null)
            {
                obj.Grasses = new MaskItem<R, RegionDataGrasses_Mask<R>>();
                obj.Grasses.Overall = eval(this.Grasses.Overall);
                if (this.Grasses.Specific != null)
                {
                    obj.Grasses.Specific = this.Grasses.Specific.Translate(eval);
                }
            }
            if (this.Sounds != null)
            {
                obj.Sounds = new MaskItem<R, RegionDataSounds_Mask<R>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (this.Sounds.Specific != null)
                {
                    obj.Sounds.Specific = this.Sounds.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Areas.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Region_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Region_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Region_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.MapColor ?? true)
                {
                    fg.AppendLine($"MapColor => {MapColor}");
                }
                if (printMask?.Worldspace ?? true)
                {
                    fg.AppendLine($"Worldspace => {Worldspace}");
                }
                if (printMask?.Areas?.Overall ?? true)
                {
                    fg.AppendLine("Areas =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Areas.Overall != null)
                        {
                            fg.AppendLine(Areas.Overall.ToString());
                        }
                        if (Areas.Specific != null)
                        {
                            foreach (var subItem in Areas.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Objects?.Overall ?? true)
                {
                    Objects?.ToString(fg);
                }
                if (printMask?.Weather?.Overall ?? true)
                {
                    Weather?.ToString(fg);
                }
                if (printMask?.MapName?.Overall ?? true)
                {
                    MapName?.ToString(fg);
                }
                if (printMask?.Grasses?.Overall ?? true)
                {
                    Grasses?.ToString(fg);
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    Sounds?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Region_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Region_ErrorMask>
    {
        #region Members
        public Exception Icon;
        public Exception MapColor;
        public Exception Worldspace;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>> Areas;
        public MaskItem<Exception, RegionDataObjects_ErrorMask> Objects;
        public MaskItem<Exception, RegionDataWeather_ErrorMask> Weather;
        public MaskItem<Exception, RegionDataMapName_ErrorMask> MapName;
        public MaskItem<Exception, RegionDataGrasses_ErrorMask> Grasses;
        public MaskItem<Exception, RegionDataSounds_ErrorMask> Sounds;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return Icon;
                case Region_FieldIndex.MapColor:
                    return MapColor;
                case Region_FieldIndex.Worldspace:
                    return Worldspace;
                case Region_FieldIndex.Areas:
                    return Areas;
                case Region_FieldIndex.Objects:
                    return Objects;
                case Region_FieldIndex.Weather:
                    return Weather;
                case Region_FieldIndex.MapName:
                    return MapName;
                case Region_FieldIndex.Grasses:
                    return Grasses;
                case Region_FieldIndex.Sounds:
                    return Sounds;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Region_FieldIndex.MapColor:
                    this.MapColor = ex;
                    break;
                case Region_FieldIndex.Worldspace:
                    this.Worldspace = ex;
                    break;
                case Region_FieldIndex.Areas:
                    this.Areas = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>>(ex, null);
                    break;
                case Region_FieldIndex.Objects:
                    this.Objects = new MaskItem<Exception, RegionDataObjects_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.Weather:
                    this.Weather = new MaskItem<Exception, RegionDataWeather_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.MapName:
                    this.MapName = new MaskItem<Exception, RegionDataMapName_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.Grasses:
                    this.Grasses = new MaskItem<Exception, RegionDataGrasses_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, RegionDataSounds_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Region_FieldIndex.MapColor:
                    this.MapColor = (Exception)obj;
                    break;
                case Region_FieldIndex.Worldspace:
                    this.Worldspace = (Exception)obj;
                    break;
                case Region_FieldIndex.Areas:
                    this.Areas = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>>)obj;
                    break;
                case Region_FieldIndex.Objects:
                    this.Objects = (MaskItem<Exception, RegionDataObjects_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.Weather:
                    this.Weather = (MaskItem<Exception, RegionDataWeather_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.MapName:
                    this.MapName = (MaskItem<Exception, RegionDataMapName_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.Grasses:
                    this.Grasses = (MaskItem<Exception, RegionDataGrasses_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, RegionDataSounds_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Icon != null) return true;
            if (MapColor != null) return true;
            if (Worldspace != null) return true;
            if (Areas != null) return true;
            if (Objects != null) return true;
            if (Weather != null) return true;
            if (MapName != null) return true;
            if (Grasses != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Region_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"MapColor => {MapColor}");
            fg.AppendLine($"Worldspace => {Worldspace}");
            fg.AppendLine("Areas =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Areas.Overall != null)
                {
                    fg.AppendLine(Areas.Overall.ToString());
                }
                if (Areas.Specific != null)
                {
                    foreach (var subItem in Areas.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            Objects?.ToString(fg);
            Weather?.ToString(fg);
            MapName?.ToString(fg);
            Grasses?.ToString(fg);
            Sounds?.ToString(fg);
        }
        #endregion

        #region Combine
        public Region_ErrorMask Combine(Region_ErrorMask rhs)
        {
            var ret = new Region_ErrorMask();
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.MapColor = this.MapColor.Combine(rhs.MapColor);
            ret.Worldspace = this.Worldspace.Combine(rhs.Worldspace);
            ret.Areas = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>>(this.Areas.Overall.Combine(rhs.Areas.Overall), new List<MaskItem<Exception, RegionArea_ErrorMask>>(this.Areas.Specific.And(rhs.Areas.Specific)));
            ret.Objects = new MaskItem<Exception, RegionDataObjects_ErrorMask>(this.Objects.Overall.Combine(rhs.Objects.Overall), ((IErrorMask<RegionDataObjects_ErrorMask>)this.Objects.Specific).Combine(rhs.Objects.Specific));
            ret.Weather = new MaskItem<Exception, RegionDataWeather_ErrorMask>(this.Weather.Overall.Combine(rhs.Weather.Overall), ((IErrorMask<RegionDataWeather_ErrorMask>)this.Weather.Specific).Combine(rhs.Weather.Specific));
            ret.MapName = new MaskItem<Exception, RegionDataMapName_ErrorMask>(this.MapName.Overall.Combine(rhs.MapName.Overall), ((IErrorMask<RegionDataMapName_ErrorMask>)this.MapName.Specific).Combine(rhs.MapName.Specific));
            ret.Grasses = new MaskItem<Exception, RegionDataGrasses_ErrorMask>(this.Grasses.Overall.Combine(rhs.Grasses.Overall), ((IErrorMask<RegionDataGrasses_ErrorMask>)this.Grasses.Specific).Combine(rhs.Grasses.Specific));
            ret.Sounds = new MaskItem<Exception, RegionDataSounds_ErrorMask>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), ((IErrorMask<RegionDataSounds_ErrorMask>)this.Sounds.Specific).Combine(rhs.Sounds.Specific));
            return ret;
        }
        public static Region_ErrorMask Combine(Region_ErrorMask lhs, Region_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Region_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Icon;
        public bool MapColor;
        public bool Worldspace;
        public MaskItem<CopyOption, RegionArea_CopyMask> Areas;
        public MaskItem<CopyOption, RegionDataObjects_CopyMask> Objects;
        public MaskItem<CopyOption, RegionDataWeather_CopyMask> Weather;
        public MaskItem<CopyOption, RegionDataMapName_CopyMask> MapName;
        public MaskItem<CopyOption, RegionDataGrasses_CopyMask> Grasses;
        public MaskItem<CopyOption, RegionDataSounds_CopyMask> Sounds;
        #endregion

    }
    #endregion





    #endregion

}
