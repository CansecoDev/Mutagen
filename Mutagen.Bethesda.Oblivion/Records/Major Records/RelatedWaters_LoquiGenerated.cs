/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RelatedWaters :
        LoquiNotifyingObject,
        IRelatedWaters,
        ILoquiObjectSetter<RelatedWaters>,
        ILinkSubContainer,
        IEquatable<RelatedWaters>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RelatedWaters_Registration.Instance;
        public static RelatedWaters_Registration Registration => RelatedWaters_Registration.Instance;
        protected object CommonInstance => RelatedWatersCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public RelatedWaters()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region RelatedWaterDaytime
        public IFormIDLink<Water> RelatedWaterDaytime_Property { get; } = new FormIDLink<Water>();
        public Water RelatedWaterDaytime { get => RelatedWaterDaytime_Property.Item; set => RelatedWaterDaytime_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLink<Water> IRelatedWaters.RelatedWaterDaytime_Property => this.RelatedWaterDaytime_Property;
        IWaterInternalGetter IRelatedWatersGetter.RelatedWaterDaytime => this.RelatedWaterDaytime_Property.Item;
        IFormIDLinkGetter<IWaterInternalGetter> IRelatedWatersGetter.RelatedWaterDaytime_Property => this.RelatedWaterDaytime_Property;
        #endregion
        #region RelatedWaterNighttime
        public IFormIDLink<Water> RelatedWaterNighttime_Property { get; } = new FormIDLink<Water>();
        public Water RelatedWaterNighttime { get => RelatedWaterNighttime_Property.Item; set => RelatedWaterNighttime_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLink<Water> IRelatedWaters.RelatedWaterNighttime_Property => this.RelatedWaterNighttime_Property;
        IWaterInternalGetter IRelatedWatersGetter.RelatedWaterNighttime => this.RelatedWaterNighttime_Property.Item;
        IFormIDLinkGetter<IWaterInternalGetter> IRelatedWatersGetter.RelatedWaterNighttime_Property => this.RelatedWaterNighttime_Property;
        #endregion
        #region RelatedWaterUnderwater
        public IFormIDLink<Water> RelatedWaterUnderwater_Property { get; } = new FormIDLink<Water>();
        public Water RelatedWaterUnderwater { get => RelatedWaterUnderwater_Property.Item; set => RelatedWaterUnderwater_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLink<Water> IRelatedWaters.RelatedWaterUnderwater_Property => this.RelatedWaterUnderwater_Property;
        IWaterInternalGetter IRelatedWatersGetter.RelatedWaterUnderwater => this.RelatedWaterUnderwater_Property.Item;
        IFormIDLinkGetter<IWaterInternalGetter> IRelatedWatersGetter.RelatedWaterUnderwater_Property => this.RelatedWaterUnderwater_Property;
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRelatedWatersGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RelatedWatersMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRelatedWatersGetter rhs)) return false;
            return ((RelatedWatersCommon)this.CommonInstance).Equals(this, rhs);
        }

        public bool Equals(RelatedWaters obj)
        {
            return ((RelatedWatersCommon)this.CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((RelatedWatersCommon)this.CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => RelatedWatersXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static RelatedWaters CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RelatedWaters_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RelatedWaters CreateFromXml(
            XElement node,
            out RelatedWaters_ErrorMask errorMask,
            bool doMasks = true,
            RelatedWaters_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RelatedWaters_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RelatedWaters CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RelatedWaters() : null;
                    break;
                default:
                    break;
            }
            var ret = new RelatedWaters();
            try
            {
                foreach (var elem in node.Elements())
                {
                    RelatedWatersXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RelatedWaters CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RelatedWaters_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RelatedWaters CreateFromXml(
            string path,
            out RelatedWaters_ErrorMask errorMask,
            RelatedWaters_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RelatedWaters CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RelatedWaters_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RelatedWaters CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RelatedWaters_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RelatedWaters CreateFromXml(
            Stream stream,
            out RelatedWaters_ErrorMask errorMask,
            RelatedWaters_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RelatedWaters CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RelatedWaters_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RelatedWaters_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return RelatedWaterDaytime_Property;
            yield return RelatedWaterNighttime_Property;
            yield return RelatedWaterUnderwater_Property;
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
            RelatedWaterDaytime_Property.Link(
                modList,
                sourceMod);
            RelatedWaterNighttime_Property.Link(
                modList,
                sourceMod);
            RelatedWaterUnderwater_Property.Link(
                modList,
                sourceMod);
        }

        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => RelatedWatersBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static RelatedWaters CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RelatedWaters CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RelatedWaters_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RelatedWaters_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RelatedWaters CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RelatedWaters();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RelatedWaters_Registration.GNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            RelatedWaters item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.RelatedWaterDaytime_Property);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.RelatedWaterNighttime_Property);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.RelatedWaterUnderwater_Property);
        }

        #endregion

        public RelatedWaters Copy(
            RelatedWaters_CopyMask copyMask = null,
            RelatedWaters def = null)
        {
            return RelatedWaters.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RelatedWaters Copy(
            RelatedWaters item,
            RelatedWaters_CopyMask copyMask = null,
            RelatedWaters def = null)
        {
            RelatedWaters ret;
            if (item.GetType().Equals(typeof(RelatedWaters)))
            {
                ret = new RelatedWaters();
            }
            else
            {
                ret = (RelatedWaters)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RelatedWaters Copy_ToLoqui(
            RelatedWaters item,
            RelatedWaters_CopyMask copyMask = null,
            RelatedWaters def = null)
        {
            RelatedWaters ret;
            if (item.GetType().Equals(typeof(RelatedWaters)))
            {
                ret = new RelatedWaters() as RelatedWaters;
            }
            else
            {
                ret = (RelatedWaters)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(RelatedWaters rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            RelatedWaters rhs,
            RelatedWaters_CopyMask copyMask,
            RelatedWaters def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            RelatedWaters rhs,
            out RelatedWaters_ErrorMask errorMask,
            RelatedWaters_CopyMask copyMask = null,
            RelatedWaters def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RelatedWatersCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RelatedWaters_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            RelatedWaters rhs,
            ErrorMaskBuilder errorMask,
            RelatedWaters_CopyMask copyMask = null,
            RelatedWaters def = null)
        {
            RelatedWatersCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                    this.RelatedWaterDaytime_Property.Set((IFormIDLink<Water>)obj);
                    break;
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                    this.RelatedWaterNighttime_Property.Set((IFormIDLink<Water>)obj);
                    break;
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    this.RelatedWaterUnderwater_Property.Set((IFormIDLink<Water>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            RelatedWatersCommon.Instance.Clear(this);
        }

        public static RelatedWaters Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RelatedWaters();
            foreach (var pair in fields)
            {
                CopyInInternal_RelatedWaters(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RelatedWaters(RelatedWaters obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RelatedWaters_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                    obj.RelatedWaterDaytime_Property.Set((IFormIDLink<Water>)pair.Value);
                    break;
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                    obj.RelatedWaterNighttime_Property.Set((IFormIDLink<Water>)pair.Value);
                    break;
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    obj.RelatedWaterUnderwater_Property.Set((IFormIDLink<Water>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRelatedWaters :
        IRelatedWatersGetter,
        ILoquiObjectSetter<IRelatedWaters>
    {
        new Water RelatedWaterDaytime { get; set; }
        new IFormIDLink<Water> RelatedWaterDaytime_Property { get; }
        new Water RelatedWaterNighttime { get; set; }
        new IFormIDLink<Water> RelatedWaterNighttime_Property { get; }
        new Water RelatedWaterUnderwater { get; set; }
        new IFormIDLink<Water> RelatedWaterUnderwater_Property { get; }
        void CopyFieldsFrom(
            RelatedWaters rhs,
            ErrorMaskBuilder errorMask = null,
            RelatedWaters_CopyMask copyMask = null,
            RelatedWaters def = null);
    }

    public partial interface IRelatedWatersGetter :
        ILoquiObject,
        ILoquiObject<IRelatedWatersGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region RelatedWaterDaytime
        IWaterInternalGetter RelatedWaterDaytime { get; }
        IFormIDLinkGetter<IWaterInternalGetter> RelatedWaterDaytime_Property { get; }

        #endregion
        #region RelatedWaterNighttime
        IWaterInternalGetter RelatedWaterNighttime { get; }
        IFormIDLinkGetter<IWaterInternalGetter> RelatedWaterNighttime_Property { get; }

        #endregion
        #region RelatedWaterUnderwater
        IWaterInternalGetter RelatedWaterUnderwater { get; }
        IFormIDLinkGetter<IWaterInternalGetter> RelatedWaterUnderwater_Property { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RelatedWatersMixIn
    {
        public static void Clear(this IRelatedWaters item)
        {
            ((RelatedWatersCommon)item.CommonInstance).Clear(item: item);
        }

        public static RelatedWaters_Mask<bool> GetEqualsMask(
            this IRelatedWatersGetter item,
            IRelatedWatersGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RelatedWatersCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRelatedWatersGetter item,
            string name = null,
            RelatedWaters_Mask<bool> printMask = null)
        {
            return ((RelatedWatersCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRelatedWatersGetter item,
            FileGeneration fg,
            string name = null,
            RelatedWaters_Mask<bool> printMask = null)
        {
            ((RelatedWatersCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRelatedWatersGetter item,
            RelatedWaters_Mask<bool?> checkMask)
        {
            return ((RelatedWatersCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RelatedWaters_Mask<bool> GetHasBeenSetMask(this IRelatedWatersGetter item)
        {
            var ret = new RelatedWaters_Mask<bool>();
            ((RelatedWatersCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRelatedWatersGetter item,
            IRelatedWatersGetter rhs)
        {
            return ((RelatedWatersCommon)item.CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RelatedWaters_FieldIndex
    {
        RelatedWaterDaytime = 0,
        RelatedWaterNighttime = 1,
        RelatedWaterUnderwater = 2,
    }
    #endregion

    #region Registration
    public class RelatedWaters_Registration : ILoquiRegistration
    {
        public static readonly RelatedWaters_Registration Instance = new RelatedWaters_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 166,
            version: 0);

        public const string GUID = "3ec1f551-bac0-408e-a3ee-2efd4c2f159a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(RelatedWaters_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RelatedWaters_ErrorMask);

        public static readonly Type ClassType = typeof(RelatedWaters);

        public static readonly Type GetterType = typeof(IRelatedWatersGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRelatedWaters);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(RelatedWatersCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RelatedWaters";

        public const string Name = "RelatedWaters";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "RELATEDWATERDAYTIME":
                    return (ushort)RelatedWaters_FieldIndex.RelatedWaterDaytime;
                case "RELATEDWATERNIGHTTIME":
                    return (ushort)RelatedWaters_FieldIndex.RelatedWaterNighttime;
                case "RELATEDWATERUNDERWATER":
                    return (ushort)RelatedWaters_FieldIndex.RelatedWaterUnderwater;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                    return "RelatedWaterDaytime";
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                    return "RelatedWaterNighttime";
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return "RelatedWaterUnderwater";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                    return typeof(IFormIDLink<Water>);
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                    return typeof(IFormIDLink<Water>);
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return typeof(IFormIDLink<Water>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RelatedWatersXmlWriteTranslation);
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GNAM_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RelatedWatersBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RelatedWatersCommon
    {
        public static readonly RelatedWatersCommon Instance = new RelatedWatersCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            RelatedWaters item,
            RelatedWaters rhs,
            RelatedWaters def,
            ErrorMaskBuilder errorMask,
            RelatedWaters_CopyMask copyMask)
        {
            if (copyMask?.RelatedWaterDaytime ?? true)
            {
                errorMask?.PushIndex((int)RelatedWaters_FieldIndex.RelatedWaterDaytime);
                try
                {
                    item.RelatedWaterDaytime_Property.SetLink(value: rhs.RelatedWaterDaytime_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RelatedWaterNighttime ?? true)
            {
                errorMask?.PushIndex((int)RelatedWaters_FieldIndex.RelatedWaterNighttime);
                try
                {
                    item.RelatedWaterNighttime_Property.SetLink(value: rhs.RelatedWaterNighttime_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RelatedWaterUnderwater ?? true)
            {
                errorMask?.PushIndex((int)RelatedWaters_FieldIndex.RelatedWaterUnderwater);
                try
                {
                    item.RelatedWaterUnderwater_Property.SetLink(value: rhs.RelatedWaterUnderwater_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IRelatedWaters item)
        {
            ClearPartial();
            item.RelatedWaterDaytime = default(Water);
            item.RelatedWaterNighttime = default(Water);
            item.RelatedWaterUnderwater = default(Water);
        }

        public RelatedWaters_Mask<bool> GetEqualsMask(
            IRelatedWatersGetter item,
            IRelatedWatersGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RelatedWaters_Mask<bool>();
            ((RelatedWatersCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IRelatedWatersGetter item,
            IRelatedWatersGetter rhs,
            RelatedWaters_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.RelatedWaterDaytime = item.RelatedWaterDaytime_Property.FormKey == rhs.RelatedWaterDaytime_Property.FormKey;
            ret.RelatedWaterNighttime = item.RelatedWaterNighttime_Property.FormKey == rhs.RelatedWaterNighttime_Property.FormKey;
            ret.RelatedWaterUnderwater = item.RelatedWaterUnderwater_Property.FormKey == rhs.RelatedWaterUnderwater_Property.FormKey;
        }

        public string ToString(
            IRelatedWatersGetter item,
            string name = null,
            RelatedWaters_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IRelatedWatersGetter item,
            FileGeneration fg,
            string name = null,
            RelatedWaters_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RelatedWaters =>");
            }
            else
            {
                fg.AppendLine($"{name} (RelatedWaters) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IRelatedWatersGetter item,
            FileGeneration fg,
            RelatedWaters_Mask<bool> printMask = null)
        {
            if (printMask?.RelatedWaterDaytime ?? true)
            {
                fg.AppendLine($"RelatedWaterDaytime => {item.RelatedWaterDaytime_Property}");
            }
            if (printMask?.RelatedWaterNighttime ?? true)
            {
                fg.AppendLine($"RelatedWaterNighttime => {item.RelatedWaterNighttime_Property}");
            }
            if (printMask?.RelatedWaterUnderwater ?? true)
            {
                fg.AppendLine($"RelatedWaterUnderwater => {item.RelatedWaterUnderwater_Property}");
            }
        }

        public bool HasBeenSet(
            IRelatedWatersGetter item,
            RelatedWaters_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IRelatedWatersGetter item,
            RelatedWaters_Mask<bool> mask)
        {
            mask.RelatedWaterDaytime = true;
            mask.RelatedWaterNighttime = true;
            mask.RelatedWaterUnderwater = true;
        }

        #region Equals and Hash
        public virtual bool Equals(
            IRelatedWatersGetter lhs,
            IRelatedWatersGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.RelatedWaterDaytime_Property.Equals(rhs.RelatedWaterDaytime_Property)) return false;
            if (!lhs.RelatedWaterNighttime_Property.Equals(rhs.RelatedWaterNighttime_Property)) return false;
            if (!lhs.RelatedWaterUnderwater_Property.Equals(rhs.RelatedWaterUnderwater_Property)) return false;
            return true;
        }

        public virtual int GetHashCode(IRelatedWatersGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.RelatedWaterDaytime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RelatedWaterNighttime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RelatedWaterUnderwater).CombineHashCode(ret);
            return ret;
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RelatedWatersXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RelatedWatersXmlWriteTranslation Instance = new RelatedWatersXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRelatedWatersGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RelatedWaters_FieldIndex.RelatedWaterDaytime) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RelatedWaterDaytime),
                    item: item.RelatedWaterDaytime_Property?.FormKey,
                    fieldIndex: (int)RelatedWaters_FieldIndex.RelatedWaterDaytime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RelatedWaters_FieldIndex.RelatedWaterNighttime) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RelatedWaterNighttime),
                    item: item.RelatedWaterNighttime_Property?.FormKey,
                    fieldIndex: (int)RelatedWaters_FieldIndex.RelatedWaterNighttime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RelatedWaters_FieldIndex.RelatedWaterUnderwater) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RelatedWaterUnderwater),
                    item: item.RelatedWaterUnderwater_Property?.FormKey,
                    fieldIndex: (int)RelatedWaters_FieldIndex.RelatedWaterUnderwater,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRelatedWatersGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RelatedWaters");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RelatedWaters");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRelatedWatersGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRelatedWatersGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRelatedWatersGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RelatedWatersXmlCreateTranslation
    {
        public readonly static RelatedWatersXmlCreateTranslation Instance = new RelatedWatersXmlCreateTranslation();

        public static void FillPublicXml(
            IRelatedWaters item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RelatedWatersXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRelatedWaters item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "RelatedWaterDaytime":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.RelatedWaterDaytime_Property,
                        fieldIndex: (int)RelatedWaters_FieldIndex.RelatedWaterDaytime,
                        errorMask: errorMask);
                    break;
                case "RelatedWaterNighttime":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.RelatedWaterNighttime_Property,
                        fieldIndex: (int)RelatedWaters_FieldIndex.RelatedWaterNighttime,
                        errorMask: errorMask);
                    break;
                case "RelatedWaterUnderwater":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.RelatedWaterUnderwater_Property,
                        fieldIndex: (int)RelatedWaters_FieldIndex.RelatedWaterUnderwater,
                        errorMask: errorMask);
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class RelatedWatersXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRelatedWatersGetter item,
            XElement node,
            out RelatedWaters_ErrorMask errorMask,
            bool doMasks = true,
            RelatedWaters_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RelatedWatersXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RelatedWaters_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            string path,
            out RelatedWaters_ErrorMask errorMask,
            RelatedWaters_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            Stream stream,
            out RelatedWaters_ErrorMask errorMask,
            RelatedWaters_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RelatedWatersXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            XElement node,
            string name = null,
            RelatedWaters_TranslationMask translationMask = null)
        {
            ((RelatedWatersXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RelatedWatersXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RelatedWatersXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class RelatedWaters_Mask<T> : IMask<T>, IEquatable<RelatedWaters_Mask<T>>
    {
        #region Ctors
        public RelatedWaters_Mask()
        {
        }

        public RelatedWaters_Mask(T initialValue)
        {
            this.RelatedWaterDaytime = initialValue;
            this.RelatedWaterNighttime = initialValue;
            this.RelatedWaterUnderwater = initialValue;
        }
        #endregion

        #region Members
        public T RelatedWaterDaytime;
        public T RelatedWaterNighttime;
        public T RelatedWaterUnderwater;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RelatedWaters_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RelatedWaters_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.RelatedWaterDaytime, rhs.RelatedWaterDaytime)) return false;
            if (!object.Equals(this.RelatedWaterNighttime, rhs.RelatedWaterNighttime)) return false;
            if (!object.Equals(this.RelatedWaterUnderwater, rhs.RelatedWaterUnderwater)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.RelatedWaterDaytime?.GetHashCode());
            ret = ret.CombineHashCode(this.RelatedWaterNighttime?.GetHashCode());
            ret = ret.CombineHashCode(this.RelatedWaterUnderwater?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.RelatedWaterDaytime)) return false;
            if (!eval(this.RelatedWaterNighttime)) return false;
            if (!eval(this.RelatedWaterUnderwater)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RelatedWaters_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RelatedWaters_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RelatedWaters_Mask<R> obj, Func<T, R> eval)
        {
            obj.RelatedWaterDaytime = eval(this.RelatedWaterDaytime);
            obj.RelatedWaterNighttime = eval(this.RelatedWaterNighttime);
            obj.RelatedWaterUnderwater = eval(this.RelatedWaterUnderwater);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RelatedWaters_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RelatedWaters_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RelatedWaters_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.RelatedWaterDaytime ?? true)
                {
                    fg.AppendLine($"RelatedWaterDaytime => {RelatedWaterDaytime}");
                }
                if (printMask?.RelatedWaterNighttime ?? true)
                {
                    fg.AppendLine($"RelatedWaterNighttime => {RelatedWaterNighttime}");
                }
                if (printMask?.RelatedWaterUnderwater ?? true)
                {
                    fg.AppendLine($"RelatedWaterUnderwater => {RelatedWaterUnderwater}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RelatedWaters_ErrorMask : IErrorMask, IErrorMask<RelatedWaters_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception RelatedWaterDaytime;
        public Exception RelatedWaterNighttime;
        public Exception RelatedWaterUnderwater;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                    return RelatedWaterDaytime;
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                    return RelatedWaterNighttime;
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return RelatedWaterUnderwater;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                    this.RelatedWaterDaytime = ex;
                    break;
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                    this.RelatedWaterNighttime = ex;
                    break;
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    this.RelatedWaterUnderwater = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                    this.RelatedWaterDaytime = (Exception)obj;
                    break;
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                    this.RelatedWaterNighttime = (Exception)obj;
                    break;
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    this.RelatedWaterUnderwater = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (RelatedWaterDaytime != null) return true;
            if (RelatedWaterNighttime != null) return true;
            if (RelatedWaterUnderwater != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RelatedWaters_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"RelatedWaterDaytime => {RelatedWaterDaytime}");
            fg.AppendLine($"RelatedWaterNighttime => {RelatedWaterNighttime}");
            fg.AppendLine($"RelatedWaterUnderwater => {RelatedWaterUnderwater}");
        }
        #endregion

        #region Combine
        public RelatedWaters_ErrorMask Combine(RelatedWaters_ErrorMask rhs)
        {
            var ret = new RelatedWaters_ErrorMask();
            ret.RelatedWaterDaytime = this.RelatedWaterDaytime.Combine(rhs.RelatedWaterDaytime);
            ret.RelatedWaterNighttime = this.RelatedWaterNighttime.Combine(rhs.RelatedWaterNighttime);
            ret.RelatedWaterUnderwater = this.RelatedWaterUnderwater.Combine(rhs.RelatedWaterUnderwater);
            return ret;
        }
        public static RelatedWaters_ErrorMask Combine(RelatedWaters_ErrorMask lhs, RelatedWaters_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RelatedWaters_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RelatedWaters_ErrorMask();
        }
        #endregion

    }
    public class RelatedWaters_CopyMask
    {
        public RelatedWaters_CopyMask()
        {
        }

        public RelatedWaters_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.RelatedWaterDaytime = defaultOn;
            this.RelatedWaterNighttime = defaultOn;
            this.RelatedWaterUnderwater = defaultOn;
        }

        #region Members
        public bool RelatedWaterDaytime;
        public bool RelatedWaterNighttime;
        public bool RelatedWaterUnderwater;
        #endregion

    }

    public class RelatedWaters_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool RelatedWaterDaytime;
        public bool RelatedWaterNighttime;
        public bool RelatedWaterUnderwater;
        #endregion

        #region Ctors
        public RelatedWaters_TranslationMask()
        {
        }

        public RelatedWaters_TranslationMask(bool defaultOn)
        {
            this.RelatedWaterDaytime = defaultOn;
            this.RelatedWaterNighttime = defaultOn;
            this.RelatedWaterUnderwater = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((RelatedWaterDaytime, null));
            ret.Add((RelatedWaterNighttime, null));
            ret.Add((RelatedWaterUnderwater, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RelatedWatersBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RelatedWatersBinaryWriteTranslation Instance = new RelatedWatersBinaryWriteTranslation();

        public static void Write_Embedded(
            IRelatedWatersGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RelatedWaterDaytime_Property,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RelatedWaterNighttime_Property,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RelatedWaterUnderwater_Property,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            IRelatedWatersGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: RelatedWaters_Registration.GNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRelatedWatersGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RelatedWatersBinaryCreateTranslation
    {
        public readonly static RelatedWatersBinaryCreateTranslation Instance = new RelatedWatersBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class RelatedWatersBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRelatedWatersGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RelatedWaters_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RelatedWatersBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RelatedWaters_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IRelatedWatersGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((RelatedWatersBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IRelatedWatersGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RelatedWatersBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
