/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RoadPoint :
        LoquiNotifyingObject,
        IRoadPoint,
        ILoquiObjectSetter<RoadPoint>,
        IEquatable<RoadPoint>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RoadPoint_Registration.Instance;
        public static RoadPoint_Registration Registration => RoadPoint_Registration.Instance;
        protected object CommonInstance => RoadPointCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public RoadPoint()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Point
        private P3Float _Point;
        public P3Float Point
        {
            get => this._Point;
            set => this.RaiseAndSetIfChanged(ref this._Point, value, nameof(Point));
        }
        #endregion
        #region NumConnectionsFluffBytes
        private Byte[] _NumConnectionsFluffBytes = new byte[3];
        public Byte[] NumConnectionsFluffBytes
        {
            get => _NumConnectionsFluffBytes;
            set
            {
                this._NumConnectionsFluffBytes = value;
                if (value == null)
                {
                    this._NumConnectionsFluffBytes = new byte[3];
                }
            }
        }
        #endregion
        #region Connections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceList<P3Float> _Connections = new SourceList<P3Float>();
        public ISourceList<P3Float> Connections => _Connections;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<P3Float> IRoadPoint.Connections => _Connections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<P3Float> IRoadPointGetter.Connections => _Connections;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRoadPointGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RoadPointMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RoadPoint rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RoadPoint rhs)
        {
            if (rhs == null) return false;
            if (!this.Point.Equals(rhs.Point)) return false;
            if (!ByteExt.EqualsFast(this.NumConnectionsFluffBytes, rhs.NumConnectionsFluffBytes)) return false;
            if (!this.Connections.SequenceEqual(rhs.Connections)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Point).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(NumConnectionsFluffBytes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Connections).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected IXmlWriteTranslator XmlWriteTranslator => RoadPointXmlWriteTranslation.Instance;
        IXmlWriteTranslator IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static RoadPoint Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RoadPoint_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RoadPoint Create_Xml(
            XElement node,
            out RoadPoint_ErrorMask errorMask,
            bool doMasks = true,
            RoadPoint_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RoadPoint_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RoadPoint Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RoadPoint() : null;
                    break;
                default:
                    break;
            }
            var ret = new RoadPoint();
            try
            {
                foreach (var elem in node.Elements())
                {
                    RoadPointXmlCreateTranslation.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RoadPoint Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RoadPoint_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RoadPoint Create_Xml(
            string path,
            out RoadPoint_ErrorMask errorMask,
            RoadPoint_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RoadPoint Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            RoadPoint_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RoadPoint Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RoadPoint_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RoadPoint Create_Xml(
            Stream stream,
            out RoadPoint_ErrorMask errorMask,
            RoadPoint_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RoadPoint Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RoadPoint_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((RoadPoint_FieldIndex)index)
            {
                case RoadPoint_FieldIndex.Point:
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                case RoadPoint_FieldIndex.Connections:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected IBinaryWriteTranslator BinaryWriteTranslator => RoadPointBinaryWriteTranslation.Instance;
        IBinaryWriteTranslator IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static RoadPoint Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RoadPoint Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RoadPoint_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RoadPoint_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RoadPoint Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RoadPoint();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs);
            return ret;
        }

        #endregion

        protected static void Fill_Binary_Structs(
            RoadPoint item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out P3Float PointParse))
            {
                item.Point = PointParse;
            }
            else
            {
                item.Point = default(P3Float);
            }
            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.SpawnWithLength(3),
                item: out Byte[] NumConnectionsFluffBytesParse))
            {
                item.NumConnectionsFluffBytes = NumConnectionsFluffBytesParse;
            }
            else
            {
                item.NumConnectionsFluffBytes = default(Byte[]);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<P3Float>.Instance.ParseRepeatedItem(
                frame: frame,
                item: item.Connections,
                lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                transl: P3FloatBinaryTranslation.Instance.Parse);
        }

        #endregion

        public RoadPoint Copy(
            RoadPoint_CopyMask copyMask = null,
            RoadPoint def = null)
        {
            return RoadPoint.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RoadPoint Copy(
            RoadPoint item,
            RoadPoint_CopyMask copyMask = null,
            RoadPoint def = null)
        {
            RoadPoint ret;
            if (item.GetType().Equals(typeof(RoadPoint)))
            {
                ret = new RoadPoint();
            }
            else
            {
                ret = (RoadPoint)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RoadPoint Copy_ToLoqui(
            RoadPoint item,
            RoadPoint_CopyMask copyMask = null,
            RoadPoint def = null)
        {
            RoadPoint ret;
            if (item.GetType().Equals(typeof(RoadPoint)))
            {
                ret = new RoadPoint() as RoadPoint;
            }
            else
            {
                ret = (RoadPoint)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(RoadPoint rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            RoadPoint rhs,
            RoadPoint_CopyMask copyMask,
            RoadPoint def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            RoadPoint rhs,
            out RoadPoint_ErrorMask errorMask,
            RoadPoint_CopyMask copyMask = null,
            RoadPoint def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RoadPointCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RoadPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            RoadPoint rhs,
            ErrorMaskBuilder errorMask,
            RoadPoint_CopyMask copyMask = null,
            RoadPoint def = null)
        {
            RoadPointCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                    this.Point = (P3Float)obj;
                    break;
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                    this.NumConnectionsFluffBytes = (Byte[])obj;
                    break;
                case RoadPoint_FieldIndex.Connections:
                    this._Connections.SetTo((IEnumerable<P3Float>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            RoadPointCommon.Instance.Clear(this);
        }

        public static RoadPoint Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RoadPoint();
            foreach (var pair in fields)
            {
                CopyInInternal_RoadPoint(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RoadPoint(RoadPoint obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RoadPoint_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                    obj.Point = (P3Float)pair.Value;
                    break;
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                    obj.NumConnectionsFluffBytes = (Byte[])pair.Value;
                    break;
                case RoadPoint_FieldIndex.Connections:
                    obj._Connections.SetTo((IEnumerable<P3Float>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRoadPoint :
        IRoadPointGetter,
        ILoquiObjectSetter<IRoadPoint>
    {
        new P3Float Point { get; set; }

        new Byte[] NumConnectionsFluffBytes { get; set; }

        new IList<P3Float> Connections { get; }
        void CopyFieldsFrom(
            RoadPoint rhs,
            ErrorMaskBuilder errorMask = null,
            RoadPoint_CopyMask copyMask = null,
            RoadPoint def = null);
    }

    public partial interface IRoadPointGetter :
        ILoquiObject,
        ILoquiObject<IRoadPointGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Point
        P3Float Point { get; }

        #endregion
        #region NumConnectionsFluffBytes
        Byte[] NumConnectionsFluffBytes { get; }

        #endregion
        #region Connections
        IReadOnlyList<P3Float> Connections { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RoadPointMixIn
    {
        public static void Clear(this IRoadPoint item)
        {
            ((RoadPointCommon)item.CommonInstance).Clear(item: item);
        }

        public static RoadPoint_Mask<bool> GetEqualsMask(
            this IRoadPointGetter item,
            IRoadPointGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RoadPointCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRoadPointGetter item,
            string name = null,
            RoadPoint_Mask<bool> printMask = null)
        {
            return ((RoadPointCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRoadPointGetter item,
            FileGeneration fg,
            string name = null,
            RoadPoint_Mask<bool> printMask = null)
        {
            ((RoadPointCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRoadPointGetter item,
            RoadPoint_Mask<bool?> checkMask)
        {
            return ((RoadPointCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RoadPoint_Mask<bool> GetHasBeenSetMask(this IRoadPointGetter item)
        {
            var ret = new RoadPoint_Mask<bool>();
            ((RoadPointCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RoadPoint_FieldIndex
    {
        Point = 0,
        NumConnectionsFluffBytes = 1,
        Connections = 2,
    }
    #endregion

    #region Registration
    public class RoadPoint_Registration : ILoquiRegistration
    {
        public static readonly RoadPoint_Registration Instance = new RoadPoint_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 142,
            version: 0);

        public const string GUID = "40edd2d1-a707-454b-93c4-d833df08a2dd";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(RoadPoint_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RoadPoint_ErrorMask);

        public static readonly Type ClassType = typeof(RoadPoint);

        public static readonly Type GetterType = typeof(IRoadPointGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRoadPoint);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(RoadPointCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RoadPoint";

        public const string Name = "RoadPoint";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "POINT":
                    return (ushort)RoadPoint_FieldIndex.Point;
                case "NUMCONNECTIONSFLUFFBYTES":
                    return (ushort)RoadPoint_FieldIndex.NumConnectionsFluffBytes;
                case "CONNECTIONS":
                    return (ushort)RoadPoint_FieldIndex.Connections;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Connections:
                    return true;
                case RoadPoint_FieldIndex.Point:
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                case RoadPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                case RoadPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                    return "Point";
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                    return "NumConnectionsFluffBytes";
                case RoadPoint_FieldIndex.Connections:
                    return "Connections";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                case RoadPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                case RoadPoint_FieldIndex.Connections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                    return typeof(P3Float);
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                    return typeof(Byte[]);
                case RoadPoint_FieldIndex.Connections:
                    return typeof(SourceSetList<P3Float>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlTranslation = typeof(RoadPointXmlWriteTranslation);
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryTranslation = typeof(RoadPointBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RoadPointCommon
    {
        public static readonly RoadPointCommon Instance = new RoadPointCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            RoadPoint item,
            RoadPoint rhs,
            RoadPoint def,
            ErrorMaskBuilder errorMask,
            RoadPoint_CopyMask copyMask)
        {
            if (copyMask?.Point ?? true)
            {
                errorMask?.PushIndex((int)RoadPoint_FieldIndex.Point);
                try
                {
                    item.Point = rhs.Point;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.NumConnectionsFluffBytes ?? true)
            {
                errorMask?.PushIndex((int)RoadPoint_FieldIndex.NumConnectionsFluffBytes);
                try
                {
                    item.NumConnectionsFluffBytes = rhs.NumConnectionsFluffBytes;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Connections != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)RoadPoint_FieldIndex.Connections);
                try
                {
                    item.Connections.SetToWithDefault(
                        rhs.Connections,
                        def?.Connections);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IRoadPoint item)
        {
            ClearPartial();
            item.Point = default(P3Float);
            item.NumConnectionsFluffBytes = default(Byte[]);
            item.Connections.Clear();
        }

        public RoadPoint_Mask<bool> GetEqualsMask(
            IRoadPointGetter item,
            IRoadPointGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RoadPoint_Mask<bool>();
            ((RoadPointCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IRoadPointGetter item,
            IRoadPointGetter rhs,
            RoadPoint_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Point = item.Point.Equals(rhs.Point);
            ret.NumConnectionsFluffBytes = ByteExt.EqualsFast(item.NumConnectionsFluffBytes, rhs.NumConnectionsFluffBytes);
            ret.Connections = item.Connections.CollectionEqualsHelper(
                rhs.Connections,
                (l, r) => l.Equals(r),
                include);
        }

        public string ToString(
            IRoadPointGetter item,
            string name = null,
            RoadPoint_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IRoadPointGetter item,
            FileGeneration fg,
            string name = null,
            RoadPoint_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RoadPoint =>");
            }
            else
            {
                fg.AppendLine($"{name} (RoadPoint) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IRoadPointGetter item,
            FileGeneration fg,
            RoadPoint_Mask<bool> printMask = null)
        {
            if (printMask?.Point ?? true)
            {
                fg.AppendLine($"Point => {item.Point}");
            }
            if (printMask?.NumConnectionsFluffBytes ?? true)
            {
                fg.AppendLine($"NumConnectionsFluffBytes => {item.NumConnectionsFluffBytes}");
            }
            if (printMask?.Connections?.Overall ?? true)
            {
                fg.AppendLine("Connections =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Connections)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }

        public bool HasBeenSet(
            IRoadPointGetter item,
            RoadPoint_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IRoadPointGetter item,
            RoadPoint_Mask<bool> mask)
        {
            mask.Point = true;
            mask.NumConnectionsFluffBytes = true;
            mask.Connections = new MaskItem<bool, IEnumerable<(int, bool)>>(true, null);
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RoadPointXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RoadPointXmlWriteTranslation Instance = new RoadPointXmlWriteTranslation();

        public static void WriteToNode_Xml(
            IRoadPointGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RoadPoint_FieldIndex.Point) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Point),
                    item: item.Point,
                    fieldIndex: (int)RoadPoint_FieldIndex.Point,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RoadPoint_FieldIndex.NumConnectionsFluffBytes) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NumConnectionsFluffBytes),
                    item: item.NumConnectionsFluffBytes,
                    fieldIndex: (int)RoadPoint_FieldIndex.NumConnectionsFluffBytes,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RoadPoint_FieldIndex.Connections) ?? true))
            {
                ListXmlTranslation<P3Float>.Instance.Write(
                    node: node,
                    name: nameof(item.Connections),
                    item: item.Connections,
                    fieldIndex: (int)RoadPoint_FieldIndex.Connections,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RoadPoint_FieldIndex.Connections),
                    transl: (XElement subNode, P3Float subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        P3FloatXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IRoadPointGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RoadPoint");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RoadPoint");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRoadPointGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRoadPointGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRoadPointGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RoadPointXmlCreateTranslation
    {
        public readonly static RoadPointXmlCreateTranslation Instance = new RoadPointXmlCreateTranslation();

        public static void FillPublic_Xml(
            IRoadPoint item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RoadPointXmlCreateTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            IRoadPoint item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Point":
                    try
                    {
                        errorMask?.PushIndex((int)RoadPoint_FieldIndex.Point);
                        if (P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out P3Float PointParse,
                            errorMask: errorMask))
                        {
                            item.Point = PointParse;
                        }
                        else
                        {
                            item.Point = default(P3Float);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NumConnectionsFluffBytes":
                    try
                    {
                        errorMask?.PushIndex((int)RoadPoint_FieldIndex.NumConnectionsFluffBytes);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] NumConnectionsFluffBytesParse,
                            errorMask: errorMask))
                        {
                            item.NumConnectionsFluffBytes = NumConnectionsFluffBytesParse;
                        }
                        else
                        {
                            item.NumConnectionsFluffBytes = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Connections":
                    try
                    {
                        errorMask?.PushIndex((int)RoadPoint_FieldIndex.Connections);
                        if (ListXmlTranslation<P3Float>.Instance.Parse(
                            node: node,
                            enumer: out var ConnectionsItem,
                            transl: P3FloatXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Connections.SetTo(ConnectionsItem);
                        }
                        else
                        {
                            item.Connections.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class RoadPointXmlTranslationMixIn
    {
        public static void Write_Xml(
            this IRoadPointGetter item,
            XElement node,
            out RoadPoint_ErrorMask errorMask,
            bool doMasks = true,
            RoadPoint_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RoadPointXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RoadPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this IRoadPointGetter item,
            string path,
            out RoadPoint_ErrorMask errorMask,
            RoadPoint_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this IRoadPointGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this IRoadPointGetter item,
            Stream stream,
            out RoadPoint_ErrorMask errorMask,
            RoadPoint_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void Write_Xml(
            this IRoadPointGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void Write_Xml(
            this IRoadPointGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RoadPointXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void Write_Xml(
            this IRoadPointGetter item,
            XElement node,
            string name = null,
            RoadPoint_TranslationMask translationMask = null)
        {
            ((RoadPointXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void Write_Xml(
            this IRoadPointGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RoadPointXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this IRoadPointGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RoadPointXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class RoadPoint_Mask<T> : IMask<T>, IEquatable<RoadPoint_Mask<T>>
    {
        #region Ctors
        public RoadPoint_Mask()
        {
        }

        public RoadPoint_Mask(T initialValue)
        {
            this.Point = initialValue;
            this.NumConnectionsFluffBytes = initialValue;
            this.Connections = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Point;
        public T NumConnectionsFluffBytes;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> Connections;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RoadPoint_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RoadPoint_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Point, rhs.Point)) return false;
            if (!object.Equals(this.NumConnectionsFluffBytes, rhs.NumConnectionsFluffBytes)) return false;
            if (!object.Equals(this.Connections, rhs.Connections)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Point?.GetHashCode());
            ret = ret.CombineHashCode(this.NumConnectionsFluffBytes?.GetHashCode());
            ret = ret.CombineHashCode(this.Connections?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Point)) return false;
            if (!eval(this.NumConnectionsFluffBytes)) return false;
            if (this.Connections != null)
            {
                if (!eval(this.Connections.Overall)) return false;
                if (this.Connections.Specific != null)
                {
                    foreach (var item in this.Connections.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public RoadPoint_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RoadPoint_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RoadPoint_Mask<R> obj, Func<T, R> eval)
        {
            obj.Point = eval(this.Point);
            obj.NumConnectionsFluffBytes = eval(this.NumConnectionsFluffBytes);
            if (Connections != null)
            {
                obj.Connections = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.Connections.Overall = eval(this.Connections.Overall);
                if (Connections.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.Connections.Specific = l;
                    foreach (var item in Connections.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Connections.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RoadPoint_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RoadPoint_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RoadPoint_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Point ?? true)
                {
                    fg.AppendLine($"Point => {Point}");
                }
                if (printMask?.NumConnectionsFluffBytes ?? true)
                {
                    fg.AppendLine($"NumConnectionsFluffBytes => {NumConnectionsFluffBytes}");
                }
                if (printMask?.Connections?.Overall ?? true)
                {
                    fg.AppendLine("Connections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Connections.Overall != null)
                        {
                            fg.AppendLine(Connections.Overall.ToString());
                        }
                        if (Connections.Specific != null)
                        {
                            foreach (var subItem in Connections.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RoadPoint_ErrorMask : IErrorMask, IErrorMask<RoadPoint_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Point;
        public Exception NumConnectionsFluffBytes;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> Connections;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                    return Point;
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                    return NumConnectionsFluffBytes;
                case RoadPoint_FieldIndex.Connections:
                    return Connections;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                    this.Point = ex;
                    break;
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                    this.NumConnectionsFluffBytes = ex;
                    break;
                case RoadPoint_FieldIndex.Connections:
                    this.Connections = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RoadPoint_FieldIndex enu = (RoadPoint_FieldIndex)index;
            switch (enu)
            {
                case RoadPoint_FieldIndex.Point:
                    this.Point = (Exception)obj;
                    break;
                case RoadPoint_FieldIndex.NumConnectionsFluffBytes:
                    this.NumConnectionsFluffBytes = (Exception)obj;
                    break;
                case RoadPoint_FieldIndex.Connections:
                    this.Connections = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Point != null) return true;
            if (NumConnectionsFluffBytes != null) return true;
            if (Connections != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RoadPoint_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Point => {Point}");
            fg.AppendLine($"NumConnectionsFluffBytes => {NumConnectionsFluffBytes}");
            fg.AppendLine("Connections =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Connections.Overall != null)
                {
                    fg.AppendLine(Connections.Overall.ToString());
                }
                if (Connections.Specific != null)
                {
                    foreach (var subItem in Connections.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RoadPoint_ErrorMask Combine(RoadPoint_ErrorMask rhs)
        {
            var ret = new RoadPoint_ErrorMask();
            ret.Point = this.Point.Combine(rhs.Point);
            ret.NumConnectionsFluffBytes = this.NumConnectionsFluffBytes.Combine(rhs.NumConnectionsFluffBytes);
            ret.Connections = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.Connections.Overall.Combine(rhs.Connections.Overall), new List<(int Index, Exception Value)>(this.Connections.Specific.And(rhs.Connections.Specific)));
            return ret;
        }
        public static RoadPoint_ErrorMask Combine(RoadPoint_ErrorMask lhs, RoadPoint_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RoadPoint_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RoadPoint_ErrorMask();
        }
        #endregion

    }
    public class RoadPoint_CopyMask
    {
        public RoadPoint_CopyMask()
        {
        }

        public RoadPoint_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Point = defaultOn;
            this.NumConnectionsFluffBytes = defaultOn;
            this.Connections = deepCopyOption;
        }

        #region Members
        public bool Point;
        public bool NumConnectionsFluffBytes;
        public CopyOption Connections;
        #endregion

    }

    public class RoadPoint_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Point;
        public bool NumConnectionsFluffBytes;
        public bool Connections;
        #endregion

        #region Ctors
        public RoadPoint_TranslationMask()
        {
        }

        public RoadPoint_TranslationMask(bool defaultOn)
        {
            this.Point = defaultOn;
            this.NumConnectionsFluffBytes = defaultOn;
            this.Connections = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Point, null));
            ret.Add((NumConnectionsFluffBytes, null));
            ret.Add((Connections, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RoadPointBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RoadPointBinaryWriteTranslation Instance = new RoadPointBinaryWriteTranslation();

        public static void Write_Embedded(
            IRoadPointGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Point);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NumConnectionsFluffBytes);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<P3Float>.Instance.Write(
                writer: writer,
                items: item.Connections,
                transl: P3FloatBinaryTranslation.Instance.Write);
        }

        public void Write(
            MutagenWriter writer,
            IRoadPointGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRoadPointGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RoadPointBinaryCreateTranslation
    {
        public readonly static RoadPointBinaryCreateTranslation Instance = new RoadPointBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class RoadPointBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this IRoadPointGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RoadPoint_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RoadPointBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RoadPoint_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            this IRoadPointGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((RoadPointBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void Write_Binary(
            this IRoadPointGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RoadPointBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
