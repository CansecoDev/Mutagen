/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Road : MajorRecord, IRoad, ILoquiObject<Road>, ILoquiObjectSetter, IEquatable<Road>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Road_Registration.Instance;
        public new static Road_Registration Registration => Road_Registration.Instance;

        #region Ctor
        public Road()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Points
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<RoadPoint> _Points = new NotifyingList<RoadPoint>();
        public INotifyingList<RoadPoint> Points => _Points;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RoadPoint> PointsEnumerable
        {
            get => _Points;
            set => _Points.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<RoadPoint> IRoad.Points => _Points;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<RoadPoint> IRoadGetter.Points => _Points;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RoadCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RoadCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RoadCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RoadCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Road>.GetEqualsMask(Road rhs) => RoadCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IRoadGetter>.GetEqualsMask(IRoadGetter rhs) => RoadCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return RoadCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Road_Mask<bool> printMask = null)
        {
            return RoadCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RoadCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Road_Mask<bool> GetHasBeenSetMask()
        {
            return RoadCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Road rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Road rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Points.HasBeenSet != rhs.Points.HasBeenSet) return false;
            if (Points.HasBeenSet)
            {
                if (!Points.SequenceEqual(rhs.Points)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Points.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Points).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Road Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Road Create_XML(
            XElement root,
            out Road_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Road Create_XML(
            XElement root,
            bool doMasks,
            out Road_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Road Object, Road_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Road_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Road_ErrorMask()) : default(Func<Road_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Road Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Road Create_XML(
            string path,
            out Road_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Road Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Road Create_XML(
            Stream stream,
            out Road_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Road_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Road_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Road_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Road_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RoadCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                writer: writer,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Road Create_XML_Internal(
            XElement root,
            Func<Road_ErrorMask> errorMask)
        {
            var ret = new Road();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Road item,
            XElement root,
            string name,
            Func<Road_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Points":
                    item._Points.SetIfSucceeded(ListXmlTranslation<RoadPoint, MaskItem<Exception, RoadPoint_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Road_FieldIndex.Points,
                        errorMask: errorMask,
                        transl: (XElement r, bool listDoMasks, out MaskItem<Exception, RoadPoint_ErrorMask> listSubMask) =>
                        {
                            return LoquiXmlTranslation<RoadPoint, RoadPoint_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        ));
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Road_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Road Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Road Create_Binary(
            MutagenFrame frame,
            out Road_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Road Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Road_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Road Object, Road_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            Road_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Road_ErrorMask()) : default(Func<Road_ErrorMask>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Road Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Road Create_Binary(
            string path,
            out Road_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Road Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Road Create_Binary(
            Stream stream,
            out Road_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Road_ErrorMask errorMask)
        {
            errorMask = (Road_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Road_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Road_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            RoadCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        static partial void FillBinary_Points_Custom(
            MutagenFrame frame,
            Road item,
            int fieldIndex,
            Func<Road_ErrorMask> errorMask);

        static partial void WriteBinary_Points_Custom(
            MutagenWriter writer,
            Road item,
            int fieldIndex,
            Func<Road_ErrorMask> errorMask);

        public static void WriteBinary_Points(
            MutagenWriter writer,
            Road item,
            int fieldIndex,
            Func<Road_ErrorMask> errorMask)
        {
            try
            {
                WriteBinary_Points_Custom(
                    writer: writer,
                    item: item,
                    fieldIndex: fieldIndex,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }

        private static Road Create_Binary_Internal(
            MutagenFrame frame,
            Func<Road_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter)
        {
            return UtilityTranslation.MajorRecordParse<Road, Road_ErrorMask, Road_FieldIndex>(
                record: new Road(),
                frame: frame,
                errorMask: errorMask,
                recType: Road_Registration.ROAD_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        protected static void Fill_Binary_Structs(
            Road item,
            MutagenFrame frame,
            Func<Road_ErrorMask> errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<Road_FieldIndex?> Fill_Binary_RecordTypes(
            Road item,
            MutagenFrame frame,
            Func<Road_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "PGRP":
                    try
                    {
                        using (var subFrame = frame.SpawnWithLength(Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                        {
                            FillBinary_Points_Custom(
                                frame: subFrame,
                                item: item,
                                fieldIndex: (int)Road_FieldIndex.Points,
                                errorMask: errorMask);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask().Overall = ex;
                    }
                    return TryGet<Road_FieldIndex?>.Succeed(Road_FieldIndex.Points);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => RoadCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public Road Copy(
            Road_CopyMask copyMask = null,
            IRoadGetter def = null)
        {
            return Road.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Road Copy(
            IRoad item,
            Road_CopyMask copyMask = null,
            IRoadGetter def = null)
        {
            Road ret;
            if (item.GetType().Equals(typeof(Road)))
            {
                ret = new Road();
            }
            else
            {
                ret = (Road)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Road Copy_ToLoqui(
            IRoadGetter item,
            Road_CopyMask copyMask = null,
            IRoadGetter def = null)
        {
            Road ret;
            if (item.GetType().Equals(typeof(Road)))
            {
                ret = new Road() as Road;
            }
            else
            {
                ret = (Road)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IRoadGetter rhs,
            Road_CopyMask copyMask,
            IRoadGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IRoadGetter rhs,
            out Road_ErrorMask errorMask,
            Road_CopyMask copyMask = null,
            IRoadGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            Road_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Road_ErrorMask();
                }
                return retErrorMask;
            };
            RoadCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    this._Points.SetTo((IEnumerable<RoadPoint>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RoadCommon.Clear(this, cmds);
        }


        public new static Road Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Road();
            foreach (var pair in fields)
            {
                CopyInInternal_Road(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Road(Road obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Road_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    obj._Points.SetTo((IEnumerable<RoadPoint>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Road obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IRoad : IRoadGetter, IMajorRecord, ILoquiClass<IRoad, IRoadGetter>, ILoquiClass<Road, IRoadGetter>
    {
        new INotifyingList<RoadPoint> Points { get; }
    }

    public partial interface IRoadGetter : IMajorRecordGetter
    {
        #region Points
        INotifyingListGetter<RoadPoint> Points { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Road_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Points = 5,
    }
    #endregion

    #region Registration
    public class Road_Registration : ILoquiRegistration
    {
        public static readonly Road_Registration Instance = new Road_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 139,
            version: 0);

        public const string GUID = "ef98a18a-0da0-4e1e-a4ef-f09c465848a9";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(Road_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Road_ErrorMask);

        public static readonly Type ClassType = typeof(Road);

        public static readonly Type GetterType = typeof(IRoadGetter);

        public static readonly Type SetterType = typeof(IRoad);

        public static readonly Type CommonType = typeof(RoadCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Road";

        public const string Name = "Road";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "POINTS":
                    return (ushort)Road_FieldIndex.Points;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return true;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return true;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return "Points";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return typeof(NotifyingList<RoadPoint>);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType ROAD_HEADER = new RecordType("ROAD");
        public static readonly RecordType PGRP_HEADER = new RecordType("PGRP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ROAD_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RoadCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IRoad item,
            IRoadGetter rhs,
            IRoadGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            Road_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Points.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Points.SetToWithDefault(
                        rhs: rhs.Points,
                        def: def?.Points,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Points.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RoadPoint);
                                    return RoadPoint.Copy(
                                        r,
                                        copyMask?.Points?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Points.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Road_FieldIndex.Points, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRoad obj,
            NotifyingFireParameters cmds = null)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    obj.Points.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRoad obj,
            NotifyingUnsetParameters cmds = null)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    obj.Points.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRoad obj)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return obj.Points.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRoadGetter obj)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return obj.Points;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRoad item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Points.Unset(cmds.ToUnsetParams());
        }

        public static Road_Mask<bool> GetEqualsMask(
            this IRoadGetter item,
            IRoadGetter rhs)
        {
            var ret = new Road_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRoadGetter item,
            IRoadGetter rhs,
            Road_Mask<bool> ret)
        {
            if (rhs == null) return;
            if (item.Points.HasBeenSet == rhs.Points.HasBeenSet)
            {
                if (item.Points.HasBeenSet)
                {
                    ret.Points = new MaskItem<bool, IEnumerable<MaskItem<bool, RoadPoint_Mask<bool>>>>();
                    ret.Points.Specific = item.Points.SelectAgainst<RoadPoint, MaskItem<bool, RoadPoint_Mask<bool>>>(rhs.Points, ((l, r) =>
                    {
                        MaskItem<bool, RoadPoint_Mask<bool>> itemRet;
                        itemRet = new MaskItem<bool, RoadPoint_Mask<bool>>();
                        itemRet.Specific = RoadPointCommon.GetEqualsMask(l, r);
                        itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                        return itemRet;
                    }
                    ), out ret.Points.Overall);
                    ret.Points.Overall = ret.Points.Overall && ret.Points.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Points = new MaskItem<bool, IEnumerable<MaskItem<bool, RoadPoint_Mask<bool>>>>();
                    ret.Points.Overall = true;
                }
            }
            else
            {
                ret.Points = new MaskItem<bool, IEnumerable<MaskItem<bool, RoadPoint_Mask<bool>>>>();
                ret.Points.Overall = false;
            }
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRoadGetter item,
            string name = null,
            Road_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRoadGetter item,
            FileGeneration fg,
            string name = null,
            Road_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Road)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Road)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Points?.Overall ?? true)
                {
                    fg.AppendLine("Points =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Points)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRoadGetter item,
            Road_Mask<bool?> checkMask)
        {
            if (checkMask.Points.Overall.HasValue && checkMask.Points.Overall.Value != item.Points.HasBeenSet) return false;
            return true;
        }

        public static Road_Mask<bool> GetHasBeenSetMask(IRoadGetter item)
        {
            var ret = new Road_Mask<bool>();
            ret.Points = new MaskItem<bool, IEnumerable<MaskItem<bool, RoadPoint_Mask<bool>>>>(item.Points.HasBeenSet, item.Points.Select((i) => new MaskItem<bool, RoadPoint_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        public static Road_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Road_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Road_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Road_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Road_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Road_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Road_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRoadGetter item,
            bool doMasks,
            out Road_ErrorMask errorMask,
            string name = null)
        {
            Road_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Road_ErrorMask()) : default(Func<Road_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRoadGetter item,
            Func<Road_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.Road"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.Road");
                    }
                    if (item.Points.HasBeenSet)
                    {
                        ListXmlTranslation<RoadPoint, MaskItem<Exception, RoadPoint_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Points),
                            item: item.Points,
                            fieldIndex: (int)Road_FieldIndex.Points,
                            errorMask: errorMask,
                            transl: (RoadPoint subItem, bool listDoMasks, out MaskItem<Exception, RoadPoint_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<RoadPoint, RoadPoint_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Road item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Road_ErrorMask errorMask)
        {
            Road_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Road_ErrorMask()) : default(Func<Road_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            Road item,
            RecordTypeConverter recordTypeConverter,
            Func<Road_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Road_Registration.ROAD_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Road item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Road_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Road.WriteBinary_Points(
                writer: writer,
                item: item,
                fieldIndex: (int)Road_FieldIndex.Points,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Road_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Road_Mask<T>>
    {
        #region Ctors
        public Road_Mask()
        {
        }

        public Road_Mask(T initialValue)
        {
            this.Points = new MaskItem<T, IEnumerable<MaskItem<T, RoadPoint_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, RoadPoint_Mask<T>>>> Points;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Road_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Road_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Points, rhs.Points)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Points?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Points != null)
            {
                if (!eval(this.Points.Overall)) return false;
                if (this.Points.Specific != null)
                {
                    foreach (var item in this.Points.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Road_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Road_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Road_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Points != null)
            {
                obj.Points = new MaskItem<R, IEnumerable<MaskItem<R, RoadPoint_Mask<R>>>>();
                obj.Points.Overall = eval(this.Points.Overall);
                if (Points.Specific != null)
                {
                    List<MaskItem<R, RoadPoint_Mask<R>>> l = new List<MaskItem<R, RoadPoint_Mask<R>>>();
                    obj.Points.Specific = l;
                    foreach (var item in Points.Specific)
                    {
                        MaskItem<R, RoadPoint_Mask<R>> mask = default(MaskItem<R, RoadPoint_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, RoadPoint_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Points.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Road_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Road_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Road_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Points?.Overall ?? true)
                {
                    fg.AppendLine("Points =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Points.Overall != null)
                        {
                            fg.AppendLine(Points.Overall.ToString());
                        }
                        if (Points.Specific != null)
                        {
                            foreach (var subItem in Points.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Road_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Road_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RoadPoint_ErrorMask>>> Points;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    this.Points = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RoadPoint_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    this.Points = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RoadPoint_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Points != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Road_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Points =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Points.Overall != null)
                {
                    fg.AppendLine(Points.Overall.ToString());
                }
                if (Points.Specific != null)
                {
                    foreach (var subItem in Points.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Road_ErrorMask Combine(Road_ErrorMask rhs)
        {
            var ret = new Road_ErrorMask();
            ret.Points = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RoadPoint_ErrorMask>>>(this.Points.Overall.Combine(rhs.Points.Overall), new List<MaskItem<Exception, RoadPoint_ErrorMask>>(this.Points.Specific.And(rhs.Points.Specific)));
            return ret;
        }
        public static Road_ErrorMask Combine(Road_ErrorMask lhs, Road_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Road_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, RoadPoint_CopyMask> Points;
        #endregion

    }
    #endregion




    #endregion

}
