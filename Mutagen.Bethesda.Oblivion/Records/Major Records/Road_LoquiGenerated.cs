/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Road :
        OblivionMajorRecord,
        IRoadInternal,
        ILoquiObjectSetter<Road>,
        IEquatable<Road>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Road_Registration.Instance;
        public new static Road_Registration Registration => Road_Registration.Instance;
        protected override object CommonInstance => RoadCommon.Instance;

        #region Ctor
        protected Road()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Points
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<RoadPoint> _Points = new SourceSetList<RoadPoint>();
        public ISourceSetList<RoadPoint> Points => _Points;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<RoadPoint> IRoad.Points => _Points;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRoadPointGetter> IRoadGetter.Points => _Points;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRoadInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RoadMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Road rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Road rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Points.HasBeenSet != rhs.Points.HasBeenSet) return false;
            if (Points.HasBeenSet)
            {
                if (!this.Points.SequenceEqual(rhs.Points)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Points.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Points).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override object XmlWriteTranslator => RoadXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static Road CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Road_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Road CreateFromXml(
            XElement node,
            out Road_ErrorMask errorMask,
            bool doMasks = true,
            Road_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Road_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Road CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Road() : null;
                    break;
                default:
                    break;
            }
            var ret = new Road();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RoadXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Road CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Road_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Road CreateFromXml(
            string path,
            out Road_ErrorMask errorMask,
            Road_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Road CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Road_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Road CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Road_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Road CreateFromXml(
            Stream stream,
            out Road_ErrorMask errorMask,
            Road_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Road CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Road_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Road item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Road_Registration.TRIGGERING_RECORD_TYPE;
        public Road(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Road(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(Road obj, Road rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Road(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => RoadBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static Road CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Road CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Road_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Road_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Road CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Road>(
                record: new Road(),
                frame: frame,
                errorMask: errorMask,
                recType: Road_Registration.ROAD_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Road item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Road item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x50524750: // PGRP
                {
                    RoadBinaryCreateTranslation.FillBinaryPointsCustomPublic(
                        frame: frame.SpawnWithLength(Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength),
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)Road_FieldIndex.Points);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Road Copy(
            Road_CopyMask copyMask = null,
            Road def = null)
        {
            return Road.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Road Copy(
            Road item,
            Road_CopyMask copyMask = null,
            Road def = null)
        {
            Road ret;
            if (item.GetType().Equals(typeof(Road)))
            {
                ret = new Road();
            }
            else
            {
                ret = (Road)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Road Copy_ToLoqui(
            Road item,
            Road_CopyMask copyMask = null,
            Road def = null)
        {
            Road ret;
            if (item.GetType().Equals(typeof(Road)))
            {
                ret = new Road() as Road;
            }
            else
            {
                ret = (Road)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Road rhs,
            Road_CopyMask copyMask,
            Road def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Road rhs,
            out Road_ErrorMask errorMask,
            Road_CopyMask copyMask = null,
            Road def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RoadCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Road_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Road rhs,
            ErrorMaskBuilder errorMask,
            Road_CopyMask copyMask = null,
            Road def = null)
        {
            RoadCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    this._Points.SetTo((IEnumerable<RoadPoint>)obj);
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            RoadCommon.Instance.Clear(this);
        }

        public new static Road Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Road();
            foreach (var pair in fields)
            {
                CopyInInternal_Road(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Road(Road obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Road_FieldIndex enu))
            {
                CopyInInternal_OblivionMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    obj._Points.SetTo((IEnumerable<RoadPoint>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRoad :
        IRoadInternalGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IRoadInternal>
    {
        new ISetList<RoadPoint> Points { get; }
        void CopyFieldsFrom(
            Road rhs,
            ErrorMaskBuilder errorMask = null,
            Road_CopyMask copyMask = null,
            Road def = null);
    }

    public partial interface IRoadInternal :
        IOblivionMajorRecordInternal,
        IRoad,
        IRoadInternalGetter
    {
    }

    public partial interface IRoadGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IRoadInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Points
        IReadOnlySetList<IRoadPointGetter> Points { get; }
        #endregion

    }

    public partial interface IRoadInternalGetter :
        IOblivionMajorRecordInternalGetter,
        IRoadGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class RoadMixIn
    {
        public static void Clear(this IRoadInternal item)
        {
            ((RoadCommon)item.CommonInstance).Clear(item: item);
        }

        public static Road_Mask<bool> GetEqualsMask(
            this IRoadInternalGetter item,
            IRoadInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RoadCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRoadInternalGetter item,
            string name = null,
            Road_Mask<bool> printMask = null)
        {
            return ((RoadCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRoadInternalGetter item,
            FileGeneration fg,
            string name = null,
            Road_Mask<bool> printMask = null)
        {
            ((RoadCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRoadInternalGetter item,
            Road_Mask<bool?> checkMask)
        {
            return ((RoadCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Road_Mask<bool> GetHasBeenSetMask(this IRoadInternalGetter item)
        {
            var ret = new Road_Mask<bool>();
            ((RoadCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Road_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Points = 5,
    }
    #endregion

    #region Registration
    public class Road_Registration : ILoquiRegistration
    {
        public static readonly Road_Registration Instance = new Road_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 139,
            version: 0);

        public const string GUID = "ef98a18a-0da0-4e1e-a4ef-f09c465848a9";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(Road_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Road_ErrorMask);

        public static readonly Type ClassType = typeof(Road);

        public static readonly Type GetterType = typeof(IRoadGetter);

        public static readonly Type InternalGetterType = typeof(IRoadInternalGetter);

        public static readonly Type SetterType = typeof(IRoad);

        public static readonly Type InternalSetterType = typeof(IRoadInternal);

        public static readonly Type CommonType = typeof(RoadCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Road";

        public const string Name = "Road";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "POINTS":
                    return (ushort)Road_FieldIndex.Points;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return true;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return true;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return "Points";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return typeof(SourceSetList<RoadPoint>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RoadXmlWriteTranslation);
        public static readonly RecordType ROAD_HEADER = new RecordType("ROAD");
        public static readonly RecordType PGRP_HEADER = new RecordType("PGRP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ROAD_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(RoadBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RoadCommon : OblivionMajorRecordCommon
    {
        public static readonly RoadCommon Instance = new RoadCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Road item,
            Road rhs,
            Road def,
            ErrorMaskBuilder errorMask,
            Road_CopyMask copyMask)
        {
            OblivionMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Points.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Road_FieldIndex.Points);
                try
                {
                    item.Points.SetToWithDefault<RoadPoint, RoadPoint>(
                        rhs: rhs.Points,
                        def: def?.Points,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Points.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (RoadPoint)r;
                                case CopyOption.MakeCopy:
                                    return RoadPoint.Copy(
                                        r,
                                        copyMask?.Points?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Points.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IRoadInternal item)
        {
            ClearPartial();
            item.Points.Unset();
            base.Clear(item);
        }

        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IRoadInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRoadInternal)item);
        }

        public Road_Mask<bool> GetEqualsMask(
            IRoadInternalGetter item,
            IRoadInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Road_Mask<bool>();
            ((RoadCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IRoadInternalGetter item,
            IRoadInternalGetter rhs,
            Road_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Points = item.Points.CollectionEqualsHelper(
                rhs.Points,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IRoadInternalGetter item,
            string name = null,
            Road_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IRoadInternalGetter item,
            FileGeneration fg,
            string name = null,
            Road_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Road =>");
            }
            else
            {
                fg.AppendLine($"{name} (Road) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IRoadInternalGetter item,
            FileGeneration fg,
            Road_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Points?.Overall ?? true)
            {
                fg.AppendLine("Points =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Points)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }

        public bool HasBeenSet(
            IRoadInternalGetter item,
            Road_Mask<bool?> checkMask)
        {
            if (checkMask.Points.Overall.HasValue && checkMask.Points.Overall.Value != item.Points.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IRoadInternalGetter item,
            Road_Mask<bool> mask)
        {
            mask.Points = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RoadPoint_Mask<bool>>>>(item.Points.HasBeenSet, item.Points.WithIndex().Select((i) => new MaskItemIndexed<bool, RoadPoint_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static Road_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Road_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Road_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Road_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Road_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Road_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static Road_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Road_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Road_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Road_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Road_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RoadXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RoadXmlWriteTranslation Instance = new RoadXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRoadInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Points.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Road_FieldIndex.Points) ?? true))
            {
                ListXmlTranslation<IRoadPointGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Points),
                    item: item.Points,
                    fieldIndex: (int)Road_FieldIndex.Points,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Road_FieldIndex.Points),
                    transl: (XElement subNode, IRoadPointGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        ((RoadPointXmlWriteTranslation)((IXmlItem)subItem).XmlWriteTranslator).Write(
                            item: subItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IRoadInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Road");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Road");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRoadInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRoadInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRoadInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RoadXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static RoadXmlCreateTranslation Instance = new RoadXmlCreateTranslation();

        public static void FillPublicXml(
            IRoadInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RoadXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRoadInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Points":
                    try
                    {
                        errorMask?.PushIndex((int)Road_FieldIndex.Points);
                        if (ListXmlTranslation<RoadPoint>.Instance.Parse(
                            node: node,
                            enumer: out var PointsItem,
                            transl: LoquiXmlTranslation<RoadPoint>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Points.SetTo(PointsItem);
                        }
                        else
                        {
                            item.Points.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class RoadXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRoadInternalGetter item,
            XElement node,
            out Road_ErrorMask errorMask,
            bool doMasks = true,
            Road_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RoadXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Road_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRoadInternalGetter item,
            string path,
            out Road_ErrorMask errorMask,
            Road_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRoadInternalGetter item,
            Stream stream,
            out Road_ErrorMask errorMask,
            Road_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Road_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Road_Mask<T>>
    {
        #region Ctors
        public Road_Mask()
        {
        }

        public Road_Mask(T initialValue)
        {
            this.Points = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RoadPoint_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, RoadPoint_Mask<T>>>> Points;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Road_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Road_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Points, rhs.Points)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Points?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Points != null)
            {
                if (!eval(this.Points.Overall)) return false;
                if (this.Points.Specific != null)
                {
                    foreach (var item in this.Points.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Road_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Road_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Road_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Points != null)
            {
                obj.Points = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RoadPoint_Mask<R>>>>();
                obj.Points.Overall = eval(this.Points.Overall);
                if (Points.Specific != null)
                {
                    List<MaskItemIndexed<R, RoadPoint_Mask<R>>> l = new List<MaskItemIndexed<R, RoadPoint_Mask<R>>>();
                    obj.Points.Specific = l;
                    foreach (var item in Points.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, RoadPoint_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, RoadPoint_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Points.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Road_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Road_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Road_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Points?.Overall ?? true)
                {
                    fg.AppendLine("Points =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Points.Overall != null)
                        {
                            fg.AppendLine(Points.Overall.ToString());
                        }
                        if (Points.Specific != null)
                        {
                            foreach (var subItem in Points.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Road_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Road_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RoadPoint_ErrorMask>>> Points;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    return Points;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    this.Points = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RoadPoint_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Road_FieldIndex enu = (Road_FieldIndex)index;
            switch (enu)
            {
                case Road_FieldIndex.Points:
                    this.Points = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RoadPoint_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Points != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Road_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Points =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Points.Overall != null)
                {
                    fg.AppendLine(Points.Overall.ToString());
                }
                if (Points.Specific != null)
                {
                    foreach (var subItem in Points.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Road_ErrorMask Combine(Road_ErrorMask rhs)
        {
            var ret = new Road_ErrorMask();
            ret.Points = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RoadPoint_ErrorMask>>>(this.Points.Overall.Combine(rhs.Points.Overall), new List<MaskItem<Exception, RoadPoint_ErrorMask>>(this.Points.Specific.And(rhs.Points.Specific)));
            return ret;
        }
        public static Road_ErrorMask Combine(Road_ErrorMask lhs, Road_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Road_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Road_ErrorMask();
        }
        #endregion

    }
    public class Road_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Road_CopyMask()
        {
        }

        public Road_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Points = new MaskItem<CopyOption, RoadPoint_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public MaskItem<CopyOption, RoadPoint_CopyMask> Points;
        #endregion

    }

    public class Road_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public MaskItem<bool, RoadPoint_TranslationMask> Points;
        #endregion

        #region Ctors
        public Road_TranslationMask()
            : base()
        {
        }

        public Road_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Points = new MaskItem<bool, RoadPoint_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Points?.Overall ?? true, Points?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #region Binary Translation
    public partial class RoadBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RoadBinaryWriteTranslation Instance = new RoadBinaryWriteTranslation();

        static partial void WriteBinaryPointsCustom(
            MutagenWriter writer,
            IRoadInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryPoints(
            MutagenWriter writer,
            IRoadInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryPointsCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_RecordTypes(
            IRoadInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            RoadBinaryWriteTranslation.WriteBinaryPoints(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public void Write(
            MutagenWriter writer,
            IRoadInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Road_Registration.ROAD_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRoadInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRoadInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRoadInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RoadBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static RoadBinaryCreateTranslation Instance = new RoadBinaryCreateTranslation();

        static partial void FillBinaryPointsCustom(
            MutagenFrame frame,
            Road item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryPointsCustomPublic(
            MutagenFrame frame,
            Road item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryPointsCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class RoadBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRoadInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Road_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RoadBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Road_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
