/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptFields : 
        IScriptFields,
        ILoquiObject<ScriptFields>,
        ILoquiObjectSetter,
        IPropertySupporter<ScriptMetaSummary>,
        IPropertySupporter<Byte[]>,
        IPropertySupporter<String>,
        IEquatable<ScriptFields>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptFields_Registration.Instance;
        public static ScriptFields_Registration Registration => ScriptFields_Registration.Instance;

        #region Ctor
        public ScriptFields()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            _hasBeenSetTracker[(int)ScriptFields_FieldIndex.MetadataSummary] = true;
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MetadataSummary
        protected readonly ScriptMetaSummary _MetadataSummary = new ScriptMetaSummary();
        protected PropertyForwarder<ScriptFields, ScriptMetaSummary> _MetadataSummaryForwarder;
        public INotifyingSetItemGetter<ScriptMetaSummary> MetadataSummary_Property => _MetadataSummaryForwarder ?? (_MetadataSummaryForwarder = new PropertyForwarder<ScriptFields, ScriptMetaSummary>(this, (int)ScriptFields_FieldIndex.MetadataSummary));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ScriptMetaSummary MetadataSummary
        {
            get => this._MetadataSummary;
            protected set => this.SetMetadataSummary(value);
        }
        protected void SetMetadataSummary(
            ScriptMetaSummary item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            this._MetadataSummary.CopyFieldsFrom(
                rhs: item,
                def: null,
                cmds: null,
                copyMask: null,
                doMasks: false,
                errorMask: out var errMask);
        }
        protected void UnsetMetadataSummary()
        {
            _hasBeenSetTracker[(int)ScriptFields_FieldIndex.MetadataSummary] = false;
            MetadataSummary = default(ScriptMetaSummary);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<ScriptMetaSummary> IScriptFieldsGetter.MetadataSummary_Property => this.MetadataSummary_Property;
        #endregion
        #region CompiledScript
        protected Byte[] _CompiledScript;
        protected PropertyForwarder<ScriptFields, Byte[]> _CompiledScriptForwarder;
        public INotifyingSetItem<Byte[]> CompiledScript_Property => _CompiledScriptForwarder ?? (_CompiledScriptForwarder = new PropertyForwarder<ScriptFields, Byte[]>(this, (int)ScriptFields_FieldIndex.CompiledScript));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] CompiledScript
        {
            get => this._CompiledScript;
            set => this.SetCompiledScript(value);
        }
        protected void SetCompiledScript(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptFields_FieldIndex.CompiledScript];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(CompiledScript, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptFields_FieldIndex.CompiledScript] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = CompiledScript;
                _CompiledScript = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)ScriptFields_FieldIndex.CompiledScript,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _CompiledScript = item;
            }
        }
        protected void UnsetCompiledScript()
        {
            SetCompiledScript(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<Byte[]> IScriptFields.CompiledScript_Property => this.CompiledScript_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<Byte[]> IScriptFieldsGetter.CompiledScript_Property => this.CompiledScript_Property;
        #endregion
        #region SourceCode
        protected String _SourceCode;
        protected PropertyForwarder<ScriptFields, String> _SourceCodeForwarder;
        public INotifyingSetItem<String> SourceCode_Property => _SourceCodeForwarder ?? (_SourceCodeForwarder = new PropertyForwarder<ScriptFields, String>(this, (int)ScriptFields_FieldIndex.SourceCode));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String SourceCode
        {
            get => this._SourceCode;
            set => this.SetSourceCode(value);
        }
        protected void SetSourceCode(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptFields_FieldIndex.SourceCode];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && SourceCode == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptFields_FieldIndex.SourceCode] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = SourceCode;
                _SourceCode = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)ScriptFields_FieldIndex.SourceCode,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _SourceCode = item;
            }
        }
        protected void UnsetSourceCode()
        {
            _hasBeenSetTracker[(int)ScriptFields_FieldIndex.SourceCode] = false;
            SourceCode = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IScriptFields.SourceCode_Property => this.SourceCode_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IScriptFieldsGetter.SourceCode_Property => this.SourceCode_Property;
        #endregion
        #region LocalVariables
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<LocalVariable> _LocalVariables = new NotifyingList<LocalVariable>();
        public INotifyingList<LocalVariable> LocalVariables => _LocalVariables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<LocalVariable> LocalVariablesEnumerable
        {
            get => _LocalVariables;
            set => _LocalVariables.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<LocalVariable> IScriptFields.LocalVariables => _LocalVariables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<LocalVariable> IScriptFieldsGetter.LocalVariables => _LocalVariables;
        #endregion

        #endregion
        #region References
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<ScriptReference> _References = new NotifyingList<ScriptReference>();
        public INotifyingList<ScriptReference> References => _References;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ScriptReference> ReferencesEnumerable
        {
            get => _References;
            set => _References.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<ScriptReference> IScriptFields.References => _References;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<ScriptReference> IScriptFieldsGetter.References => _References;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => ScriptFieldsCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => ScriptFieldsCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ScriptFieldsCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ScriptFieldsCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<ScriptFields>.GetEqualsMask(ScriptFields rhs) => ScriptFieldsCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IScriptFieldsGetter>.GetEqualsMask(IScriptFieldsGetter rhs) => ScriptFieldsCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return ScriptFieldsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            ScriptFields_Mask<bool> printMask = null)
        {
            return ScriptFieldsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptFieldsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public ScriptFields_Mask<bool> GetHasBeenSetMask()
        {
            return ScriptFieldsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptFields rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptFields rhs)
        {
            if (rhs == null) return false;
            if (MetadataSummary_Property.HasBeenSet != rhs.MetadataSummary_Property.HasBeenSet) return false;
            if (MetadataSummary_Property.HasBeenSet)
            {
                if (!object.Equals(this.MetadataSummary, rhs.MetadataSummary)) return false;
            }
            if (CompiledScript_Property.HasBeenSet != rhs.CompiledScript_Property.HasBeenSet) return false;
            if (CompiledScript_Property.HasBeenSet)
            {
                if (!this.CompiledScript.EqualsFast(rhs.CompiledScript)) return false;
            }
            if (SourceCode_Property.HasBeenSet != rhs.SourceCode_Property.HasBeenSet) return false;
            if (SourceCode_Property.HasBeenSet)
            {
                if (!object.Equals(this.SourceCode, rhs.SourceCode)) return false;
            }
            if (LocalVariables.HasBeenSet != rhs.LocalVariables.HasBeenSet) return false;
            if (LocalVariables.HasBeenSet)
            {
                if (!this.LocalVariables.SequenceEqual(rhs.LocalVariables)) return false;
            }
            if (References.HasBeenSet != rhs.References.HasBeenSet) return false;
            if (References.HasBeenSet)
            {
                if (!this.References.SequenceEqual(rhs.References)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (MetadataSummary_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MetadataSummary).CombineHashCode(ret);
            }
            if (CompiledScript_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CompiledScript).CombineHashCode(ret);
            }
            if (SourceCode_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SourceCode).CombineHashCode(ret);
            }
            if (LocalVariables.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(LocalVariables).CombineHashCode(ret);
            }
            if (References.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(References).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static ScriptFields Create_Xml(
            XElement root,
            ScriptFields_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptFields Create_Xml(
            XElement root,
            out ScriptFields_ErrorMask errorMask,
            bool doMasks = true,
            ScriptFields_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptFields Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new ScriptFields();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptFields Create_Xml(
            string path,
            ScriptFields_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static ScriptFields Create_Xml(
            string path,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptFields Create_Xml(
            Stream stream,
            ScriptFields_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static ScriptFields Create_Xml(
            Stream stream,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<ScriptFields>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out ScriptFields_ErrorMask errorMask,
            bool doMasks = true,
            ScriptFields_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            ScriptFields_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ScriptFieldsCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            ScriptFields item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MetadataSummary":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.MetadataSummary);
                        item.MetadataSummary.CopyFieldsFrom(
                            rhs: ScriptMetaSummary.Create_Xml(
                                root: root,
                                errorMask: errorMask,
                                translationMask: translationMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CompiledScript":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.CompiledScript);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] CompiledScriptParse,
                            errorMask: errorMask))
                        {
                            item.CompiledScript = CompiledScriptParse;
                        }
                        else
                        {
                            item.UnsetCompiledScript();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SourceCode":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.SourceCode);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String SourceCodeParse,
                            errorMask: errorMask))
                        {
                            item.SourceCode = SourceCodeParse;
                        }
                        else
                        {
                            item.UnsetSourceCode();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LocalVariables":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.LocalVariables);
                        if (ListXmlTranslation<LocalVariable>.Instance.Parse(
                            root: root,
                            enumer: out var LocalVariablesItem,
                            transl: LoquiXmlTranslation<LocalVariable>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.LocalVariables.SetTo(LocalVariablesItem);
                        }
                        else
                        {
                            item.LocalVariables.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "References":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.References);
                        if (ListXmlTranslation<ScriptReference>.Instance.Parse(
                            root: root,
                            enumer: out var ReferencesItem,
                            transl: LoquiXmlTranslation<ScriptReference>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.References.SetTo(ReferencesItem);
                        }
                        else
                        {
                            item.References.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region IPropertySupporter ScriptMetaSummary
        protected ObjectCentralizationSubscriptions<ScriptMetaSummary> _ScriptMetaSummary_subscriptions;
        ScriptMetaSummary IPropertySupporter<ScriptMetaSummary>.Get(int index)
        {
            return GetScriptMetaSummary(index: index);
        }

        protected ScriptMetaSummary GetScriptMetaSummary(int index)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return MetadataSummary;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptMetaSummary: {index}");
            }
        }

        void IPropertySupporter<ScriptMetaSummary>.Set(
            int index,
            ScriptMetaSummary item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetScriptMetaSummary(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetScriptMetaSummary(
            int index,
            ScriptMetaSummary item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    SetMetadataSummary(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptMetaSummary: {index}");
            }
        }

        bool IPropertySupporter<ScriptMetaSummary>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<ScriptMetaSummary>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<ScriptMetaSummary>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetScriptMetaSummary(
                index: index,
                cmds: cmds);
        }

        protected void UnsetScriptMetaSummary(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    SetMetadataSummary(
                        item: default(ScriptMetaSummary),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptMetaSummary: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ScriptMetaSummary>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<ScriptMetaSummary> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ScriptMetaSummary_subscriptions == null)
            {
                _ScriptMetaSummary_subscriptions = new ObjectCentralizationSubscriptions<ScriptMetaSummary>();
            }
            _ScriptMetaSummary_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ScriptMetaSummary>.Unsubscribe(
            int index,
            object owner)
        {
            _ScriptMetaSummary_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<ScriptMetaSummary>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        ScriptMetaSummary IPropertySupporter<ScriptMetaSummary>.DefaultValue(int index)
        {
            return DefaultValueScriptMetaSummary(index: index);
        }

        protected ScriptMetaSummary DefaultValueScriptMetaSummary(int index)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return default(ScriptMetaSummary);
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptMetaSummary: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Byte[]
        protected ObjectCentralizationSubscriptions<Byte[]> _ByteArr_subscriptions;
        Byte[] IPropertySupporter<Byte[]>.Get(int index)
        {
            return GetByteArr(index: index);
        }

        protected Byte[] GetByteArr(int index)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.CompiledScript:
                    return CompiledScript;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        void IPropertySupporter<Byte[]>.Set(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByteArr(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByteArr(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.CompiledScript:
                    SetCompiledScript(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        bool IPropertySupporter<Byte[]>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte[]>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte[]>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByteArr(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByteArr(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.CompiledScript:
                    SetCompiledScript(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte[]> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ByteArr_subscriptions == null)
            {
                _ByteArr_subscriptions = new ObjectCentralizationSubscriptions<Byte[]>();
            }
            _ByteArr_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Unsubscribe(
            int index,
            object owner)
        {
            _ByteArr_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte[]>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte[] IPropertySupporter<Byte[]>.DefaultValue(int index)
        {
            return DefaultValueByteArr(index: index);
        }

        protected Byte[] DefaultValueByteArr(int index)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.CompiledScript:
                    return default(Byte[]);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        #endregion

        #region IPropertySupporter String
        protected ObjectCentralizationSubscriptions<String> _String_subscriptions;
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected String GetString(int index)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.SourceCode:
                    return SourceCode;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.SourceCode:
                    SetSourceCode(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.SourceCode:
                    SetSourceCode(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected String DefaultValueString(int index)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.SourceCode:
                    return default(String);
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static ScriptFields Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptFields Create_Binary(
            MutagenFrame frame,
            out ScriptFields_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptFields Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptFields();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptFields Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ScriptFields Create_Binary(
            string path,
            out ScriptFields_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static ScriptFields Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ScriptFields Create_Binary(
            Stream stream,
            out ScriptFields_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out ScriptFields_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out ScriptFields_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out ScriptFields_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ScriptFieldsCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_MetadataSummaryOld_Custom(
            MutagenFrame frame,
            ScriptFields item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_MetadataSummaryOld_Custom(
            MutagenWriter writer,
            ScriptFields item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_MetadataSummaryOld(
            MutagenWriter writer,
            ScriptFields item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_MetadataSummaryOld_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            ScriptFields item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            ScriptFields item,
            MutagenFrame frame,
            int? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x52484353: // SCHR
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptFields_FieldIndex.MetadataSummary) return TryGet<int?>.Failure;
                    using (errorMask.PushIndex((int)ScriptFields_FieldIndex.MetadataSummary))
                    {
                        var tmpMetadataSummary = ScriptMetaSummary.Create_Binary(
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: null);
                        item.MetadataSummary.CopyFieldsFrom(
                            rhs: tmpMetadataSummary,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.MetadataSummary);
                case 0x44484353: // SCHD
                    using (var subFrame = frame.SpawnWithLength(Constants.SUBRECORD_LENGTH + contentLength, snapToFinalPosition: false))
                    {
                        FillBinary_MetadataSummaryOld_Custom(
                            frame: subFrame,
                            item: item,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed(lastParsed);
                case 0x41444353: // SCDA
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptFields_FieldIndex.CompiledScript) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.CompiledScript);
                        if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Byte[] CompiledScriptParse,
                            errorMask: errorMask))
                        {
                            item.CompiledScript = CompiledScriptParse;
                        }
                        else
                        {
                            item.UnsetCompiledScript();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.CompiledScript);
                case 0x58544353: // SCTX
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptFields_FieldIndex.SourceCode) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.SourceCode);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String SourceCodeParse,
                            errorMask: errorMask))
                        {
                            item.SourceCode = SourceCodeParse;
                        }
                        else
                        {
                            item.UnsetSourceCode();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.SourceCode);
                case 0x44534C53: // SLSD
                case 0x52564353: // SCVR
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptFields_FieldIndex.LocalVariables) return TryGet<int?>.Failure;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<LocalVariable>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: LocalVariable_Registration.TriggeringRecordTypes,
                        item: item.LocalVariables,
                        fieldIndex: (int)ScriptFields_FieldIndex.LocalVariables,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: LoquiBinaryTranslation<LocalVariable>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.LocalVariables);
                case 0x56524353: // SCRV
                case 0x4F524353: // SCRO
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptFields_FieldIndex.References) return TryGet<int?>.Failure;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ScriptReference>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: ScriptReference_Registration.TriggeringRecordTypes,
                        item: item.References,
                        fieldIndex: (int)ScriptFields_FieldIndex.References,
                        lengthLength: Mutagen.Bethesda.Constants.SUBRECORD_LENGTHLENGTH,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, RecordType header, out ScriptReference listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            switch (header.TypeInt)
                            {
                                case 0x56524353: // SCRV
                                    return LoquiBinaryTranslation<ScriptVariableReference>.Instance.Parse(
                                        frame: r.Spawn(snapToFinalPosition: false),
                                        item: out listSubItem,
                                        errorMask: listErrMask);
                                case 0x4F524353: // SCRO
                                    return LoquiBinaryTranslation<ScriptObjectReference>.Instance.Parse(
                                        frame: r.Spawn(snapToFinalPosition: false),
                                        item: out listSubItem,
                                        errorMask: listErrMask);
                                default:
                                    throw new NotImplementedException();
                            }
                        }
                        );
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.References);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public ScriptFields Copy(
            ScriptFields_CopyMask copyMask = null,
            IScriptFieldsGetter def = null)
        {
            return ScriptFields.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ScriptFields Copy(
            IScriptFields item,
            ScriptFields_CopyMask copyMask = null,
            IScriptFieldsGetter def = null)
        {
            ScriptFields ret;
            if (item.GetType().Equals(typeof(ScriptFields)))
            {
                ret = new ScriptFields();
            }
            else
            {
                ret = (ScriptFields)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ScriptFields Copy_ToLoqui(
            IScriptFieldsGetter item,
            ScriptFields_CopyMask copyMask = null,
            IScriptFieldsGetter def = null)
        {
            ScriptFields ret;
            if (item.GetType().Equals(typeof(ScriptFields)))
            {
                ret = new ScriptFields() as ScriptFields;
            }
            else
            {
                ret = (ScriptFields)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IScriptFieldsGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IScriptFieldsGetter rhs,
            ScriptFields_CopyMask copyMask,
            IScriptFieldsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IScriptFieldsGetter rhs,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_CopyMask copyMask = null,
            IScriptFieldsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptFieldsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IScriptFieldsGetter rhs,
            ErrorMaskBuilder errorMask,
            ScriptFields_CopyMask copyMask = null,
            IScriptFieldsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ScriptFieldsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    this.MetadataSummary.CopyFieldsFrom(rhs: (ScriptMetaSummary)obj);
                    break;
                case ScriptFields_FieldIndex.CompiledScript:
                    this.SetCompiledScript(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case ScriptFields_FieldIndex.SourceCode:
                    this.SetSourceCode(
                        (String)obj,
                        cmds: cmds);
                    break;
                case ScriptFields_FieldIndex.LocalVariables:
                    this._LocalVariables.SetTo((IEnumerable<LocalVariable>)obj, cmds);
                    break;
                case ScriptFields_FieldIndex.References:
                    this._References.SetTo((IEnumerable<ScriptReference>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ScriptFieldsCommon.Clear(this, cmds);
        }


        public static ScriptFields Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ScriptFields();
            foreach (var pair in fields)
            {
                CopyInInternal_ScriptFields(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ScriptFields(ScriptFields obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ScriptFields_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    obj.MetadataSummary.CopyFieldsFrom(rhs: (ScriptMetaSummary)pair.Value);
                    break;
                case ScriptFields_FieldIndex.CompiledScript:
                    obj.SetCompiledScript(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case ScriptFields_FieldIndex.SourceCode:
                    obj.SetSourceCode(
                        (String)pair.Value,
                        cmds: null);
                    break;
                case ScriptFields_FieldIndex.LocalVariables:
                    obj._LocalVariables.SetTo((IEnumerable<LocalVariable>)pair.Value, null);
                    break;
                case ScriptFields_FieldIndex.References:
                    obj._References.SetTo((IEnumerable<ScriptReference>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, ScriptFields obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptFields : IScriptFieldsGetter, ILoquiClass<IScriptFields, IScriptFieldsGetter>, ILoquiClass<ScriptFields, IScriptFieldsGetter>
    {
        new Byte[] CompiledScript { get; set; }
        new INotifyingSetItem<Byte[]> CompiledScript_Property { get; }

        new String SourceCode { get; set; }
        new INotifyingSetItem<String> SourceCode_Property { get; }

        new INotifyingList<LocalVariable> LocalVariables { get; }
        new INotifyingList<ScriptReference> References { get; }
    }

    public partial interface IScriptFieldsGetter : ILoquiObject
    {
        #region MetadataSummary
        ScriptMetaSummary MetadataSummary { get; }
        INotifyingSetItemGetter<ScriptMetaSummary> MetadataSummary_Property { get; }

        #endregion
        #region CompiledScript
        Byte[] CompiledScript { get; }
        INotifyingSetItemGetter<Byte[]> CompiledScript_Property { get; }

        #endregion
        #region SourceCode
        String SourceCode { get; }
        INotifyingSetItemGetter<String> SourceCode_Property { get; }

        #endregion
        #region LocalVariables
        INotifyingListGetter<LocalVariable> LocalVariables { get; }
        #endregion
        #region References
        INotifyingListGetter<ScriptReference> References { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptFields_FieldIndex
    {
        MetadataSummary = 0,
        CompiledScript = 1,
        SourceCode = 2,
        LocalVariables = 3,
        References = 4,
    }
    #endregion

    #region Registration
    public class ScriptFields_Registration : ILoquiRegistration
    {
        public static readonly ScriptFields_Registration Instance = new ScriptFields_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 152,
            version: 0);

        public const string GUID = "9b6e1edf-a601-4625-be5c-90b106975b45";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScriptFields_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptFields_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptFields);

        public static readonly Type GetterType = typeof(IScriptFieldsGetter);

        public static readonly Type SetterType = typeof(IScriptFields);

        public static readonly Type CommonType = typeof(ScriptFieldsCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptFields";

        public const string Name = "ScriptFields";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "METADATASUMMARY":
                    return (ushort)ScriptFields_FieldIndex.MetadataSummary;
                case "COMPILEDSCRIPT":
                    return (ushort)ScriptFields_FieldIndex.CompiledScript;
                case "SOURCECODE":
                    return (ushort)ScriptFields_FieldIndex.SourceCode;
                case "LOCALVARIABLES":
                    return (ushort)ScriptFields_FieldIndex.LocalVariables;
                case "REFERENCES":
                    return (ushort)ScriptFields_FieldIndex.References;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return true;
                case ScriptFields_FieldIndex.MetadataSummary:
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return true;
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return true;
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return "MetadataSummary";
                case ScriptFields_FieldIndex.CompiledScript:
                    return "CompiledScript";
                case ScriptFields_FieldIndex.SourceCode:
                    return "SourceCode";
                case ScriptFields_FieldIndex.LocalVariables:
                    return "LocalVariables";
                case ScriptFields_FieldIndex.References:
                    return "References";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return true;
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return typeof(ScriptMetaSummary);
                case ScriptFields_FieldIndex.CompiledScript:
                    return typeof(Byte[]);
                case ScriptFields_FieldIndex.SourceCode:
                    return typeof(String);
                case ScriptFields_FieldIndex.LocalVariables:
                    return typeof(NotifyingList<LocalVariable>);
                case ScriptFields_FieldIndex.References:
                    return typeof(NotifyingList<ScriptReference>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCDA_HEADER = new RecordType("SCDA");
        public static readonly RecordType SCTX_HEADER = new RecordType("SCTX");
        public static readonly RecordType SLSD_HEADER = new RecordType("SLSD");
        public static readonly RecordType SCVR_HEADER = new RecordType("SCVR");
        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType SCRO_HEADER = new RecordType("SCRO");
        public static readonly RecordType SCHD_HEADER = new RecordType("SCHD");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        SCHR_HEADER,
                        SCDA_HEADER,
                        SCTX_HEADER,
                        SLSD_HEADER,
                        SCVR_HEADER,
                        SCRV_HEADER,
                        SCRO_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ScriptFieldsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IScriptFields item,
            IScriptFieldsGetter rhs,
            IScriptFieldsGetter def,
            ErrorMaskBuilder errorMask,
            ScriptFields_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.MetadataSummary.Overall ?? true)
            {
                errorMask.PushIndex((int)ScriptFields_FieldIndex.MetadataSummary);
                try
                {
                    ScriptMetaSummaryCommon.CopyFieldsFrom(
                        item: item.MetadataSummary,
                        rhs: rhs.MetadataSummary,
                        def: def?.MetadataSummary,
                        errorMask: errorMask,
                        copyMask: copyMask?.MetadataSummary.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.CompiledScript ?? true)
            {
                errorMask.PushIndex((int)ScriptFields_FieldIndex.CompiledScript);
                try
                {
                    item.CompiledScript_Property.SetToWithDefault(
                        rhs: rhs.CompiledScript_Property,
                        def: def?.CompiledScript_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.SourceCode ?? true)
            {
                errorMask.PushIndex((int)ScriptFields_FieldIndex.SourceCode);
                try
                {
                    item.SourceCode_Property.SetToWithDefault(
                        rhs: rhs.SourceCode_Property,
                        def: def?.SourceCode_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.LocalVariables.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)ScriptFields_FieldIndex.LocalVariables);
                try
                {
                    item.LocalVariables.SetToWithDefault(
                        rhs: rhs.LocalVariables,
                        def: def?.LocalVariables,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.LocalVariables.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(LocalVariable);
                                    return LocalVariable.Copy(
                                        r,
                                        copyMask?.LocalVariables?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.LocalVariables.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.References.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)ScriptFields_FieldIndex.References);
                try
                {
                    item.References.SetToWithDefault(
                        rhs: rhs.References,
                        def: def?.References,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.References.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(ScriptReference);
                                    return ScriptReference.Copy(
                                        r,
                                        copyMask?.References?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.References.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IScriptFields obj,
            NotifyingFireParameters cmds = null)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case ScriptFields_FieldIndex.CompiledScript:
                    obj.CompiledScript_Property.HasBeenSet = on;
                    break;
                case ScriptFields_FieldIndex.SourceCode:
                    obj.SourceCode_Property.HasBeenSet = on;
                    break;
                case ScriptFields_FieldIndex.LocalVariables:
                    obj.LocalVariables.HasBeenSet = on;
                    break;
                case ScriptFields_FieldIndex.References:
                    obj.References.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IScriptFields obj,
            NotifyingUnsetParameters cmds = null)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case ScriptFields_FieldIndex.CompiledScript:
                    obj.CompiledScript_Property.Unset(cmds);
                    break;
                case ScriptFields_FieldIndex.SourceCode:
                    obj.SourceCode_Property.Unset(cmds);
                    break;
                case ScriptFields_FieldIndex.LocalVariables:
                    obj.LocalVariables.Unset(cmds);
                    break;
                case ScriptFields_FieldIndex.References:
                    obj.References.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IScriptFields obj)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return obj.MetadataSummary_Property.HasBeenSet;
                case ScriptFields_FieldIndex.CompiledScript:
                    return obj.CompiledScript_Property.HasBeenSet;
                case ScriptFields_FieldIndex.SourceCode:
                    return obj.SourceCode_Property.HasBeenSet;
                case ScriptFields_FieldIndex.LocalVariables:
                    return obj.LocalVariables.HasBeenSet;
                case ScriptFields_FieldIndex.References:
                    return obj.References.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IScriptFieldsGetter obj)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return obj.MetadataSummary;
                case ScriptFields_FieldIndex.CompiledScript:
                    return obj.CompiledScript;
                case ScriptFields_FieldIndex.SourceCode:
                    return obj.SourceCode;
                case ScriptFields_FieldIndex.LocalVariables:
                    return obj.LocalVariables;
                case ScriptFields_FieldIndex.References:
                    return obj.References;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IScriptFields item,
            NotifyingUnsetParameters cmds = null)
        {
            item.CompiledScript_Property.Unset(cmds.ToUnsetParams());
            item.SourceCode_Property.Unset(cmds.ToUnsetParams());
            item.LocalVariables.Unset(cmds.ToUnsetParams());
            item.References.Unset(cmds.ToUnsetParams());
        }

        public static ScriptFields_Mask<bool> GetEqualsMask(
            this IScriptFieldsGetter item,
            IScriptFieldsGetter rhs)
        {
            var ret = new ScriptFields_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IScriptFieldsGetter item,
            IScriptFieldsGetter rhs,
            ScriptFields_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.MetadataSummary = item.MetadataSummary_Property.LoquiEqualsHelper(rhs.MetadataSummary_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            ret.CompiledScript = item.CompiledScript_Property.Equals(rhs.CompiledScript_Property, (l, r) => l.EqualsFast(r));
            ret.SourceCode = item.SourceCode_Property.Equals(rhs.SourceCode_Property, (l, r) => object.Equals(l, r));
            if (item.LocalVariables.HasBeenSet == rhs.LocalVariables.HasBeenSet)
            {
                if (item.LocalVariables.HasBeenSet)
                {
                    ret.LocalVariables = new MaskItem<bool, IEnumerable<MaskItem<bool, LocalVariable_Mask<bool>>>>();
                    ret.LocalVariables.Specific = item.LocalVariables.SelectAgainst<LocalVariable, MaskItem<bool, LocalVariable_Mask<bool>>>(rhs.LocalVariables, ((l, r) =>
                    {
                        MaskItem<bool, LocalVariable_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.LocalVariables.Overall);
                    ret.LocalVariables.Overall = ret.LocalVariables.Overall && ret.LocalVariables.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.LocalVariables = new MaskItem<bool, IEnumerable<MaskItem<bool, LocalVariable_Mask<bool>>>>();
                    ret.LocalVariables.Overall = true;
                }
            }
            else
            {
                ret.LocalVariables = new MaskItem<bool, IEnumerable<MaskItem<bool, LocalVariable_Mask<bool>>>>();
                ret.LocalVariables.Overall = false;
            }
            if (item.References.HasBeenSet == rhs.References.HasBeenSet)
            {
                if (item.References.HasBeenSet)
                {
                    ret.References = new MaskItem<bool, IEnumerable<MaskItem<bool, ScriptReference_Mask<bool>>>>();
                    ret.References.Specific = item.References.SelectAgainst<ScriptReference, MaskItem<bool, ScriptReference_Mask<bool>>>(rhs.References, ((l, r) =>
                    {
                        MaskItem<bool, ScriptReference_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
                        return itemRet;
                    }
                    ), out ret.References.Overall);
                    ret.References.Overall = ret.References.Overall && ret.References.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.References = new MaskItem<bool, IEnumerable<MaskItem<bool, ScriptReference_Mask<bool>>>>();
                    ret.References.Overall = true;
                }
            }
            else
            {
                ret.References = new MaskItem<bool, IEnumerable<MaskItem<bool, ScriptReference_Mask<bool>>>>();
                ret.References.Overall = false;
            }
        }

        public static string ToString(
            this IScriptFieldsGetter item,
            string name = null,
            ScriptFields_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IScriptFieldsGetter item,
            FileGeneration fg,
            string name = null,
            ScriptFields_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ScriptFields)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ScriptFields)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MetadataSummary?.Overall ?? true)
                {
                    item.MetadataSummary?.ToString(fg, "MetadataSummary");
                }
                if (printMask?.CompiledScript ?? true)
                {
                    fg.AppendLine($"CompiledScript => {item.CompiledScript}");
                }
                if (printMask?.SourceCode ?? true)
                {
                    fg.AppendLine($"SourceCode => {item.SourceCode}");
                }
                if (printMask?.LocalVariables?.Overall ?? true)
                {
                    fg.AppendLine("LocalVariables =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.LocalVariables)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.References?.Overall ?? true)
                {
                    fg.AppendLine("References =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.References)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IScriptFieldsGetter item,
            ScriptFields_Mask<bool?> checkMask)
        {
            if (checkMask.MetadataSummary.Overall.HasValue && checkMask.MetadataSummary.Overall.Value != item.MetadataSummary_Property.HasBeenSet) return false;
            if (checkMask.MetadataSummary.Specific != null && (item.MetadataSummary == null || !item.MetadataSummary.HasBeenSet(checkMask.MetadataSummary.Specific))) return false;
            if (checkMask.CompiledScript.HasValue && checkMask.CompiledScript.Value != item.CompiledScript_Property.HasBeenSet) return false;
            if (checkMask.SourceCode.HasValue && checkMask.SourceCode.Value != item.SourceCode_Property.HasBeenSet) return false;
            if (checkMask.LocalVariables.Overall.HasValue && checkMask.LocalVariables.Overall.Value != item.LocalVariables.HasBeenSet) return false;
            if (checkMask.References.Overall.HasValue && checkMask.References.Overall.Value != item.References.HasBeenSet) return false;
            return true;
        }

        public static ScriptFields_Mask<bool> GetHasBeenSetMask(IScriptFieldsGetter item)
        {
            var ret = new ScriptFields_Mask<bool>();
            ret.MetadataSummary = new MaskItem<bool, ScriptMetaSummary_Mask<bool>>(item.MetadataSummary_Property.HasBeenSet, ScriptMetaSummaryCommon.GetHasBeenSetMask(item.MetadataSummary));
            ret.CompiledScript = item.CompiledScript_Property.HasBeenSet;
            ret.SourceCode = item.SourceCode_Property.HasBeenSet;
            ret.LocalVariables = new MaskItem<bool, IEnumerable<MaskItem<bool, LocalVariable_Mask<bool>>>>(item.LocalVariables.HasBeenSet, item.LocalVariables.Select((i) => new MaskItem<bool, LocalVariable_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.References = new MaskItem<bool, IEnumerable<MaskItem<bool, ScriptReference_Mask<bool>>>>(item.References.HasBeenSet, item.References.Select((i) => new MaskItem<bool, ScriptReference_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            ScriptFields item,
            bool doMasks,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            ScriptFields item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptFields");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptFields");
            }
            if (item.MetadataSummary_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.MetadataSummary) ?? true))
            {
                LoquiXmlTranslation<ScriptMetaSummary>.Instance.Write(
                    node: elem,
                    item: item.MetadataSummary_Property,
                    name: nameof(item.MetadataSummary),
                    fieldIndex: (int)ScriptFields_FieldIndex.MetadataSummary,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            if (item.CompiledScript_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.CompiledScript) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.CompiledScript),
                    item: item.CompiledScript_Property,
                    fieldIndex: (int)ScriptFields_FieldIndex.CompiledScript,
                    errorMask: errorMask);
            }
            if (item.SourceCode_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.SourceCode) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.SourceCode),
                    item: item.SourceCode_Property,
                    fieldIndex: (int)ScriptFields_FieldIndex.SourceCode,
                    errorMask: errorMask);
            }
            if (item.LocalVariables.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.LocalVariables) ?? true))
            {
                ListXmlTranslation<LocalVariable>.Instance.Write(
                    node: elem,
                    name: nameof(item.LocalVariables),
                    item: item.LocalVariables,
                    fieldIndex: (int)ScriptFields_FieldIndex.LocalVariables,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ScriptFields_FieldIndex.LocalVariables),
                    transl: (XElement subNode, LocalVariable subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<LocalVariable>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
            if (item.References.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.References) ?? true))
            {
                ListXmlTranslation<ScriptReference>.Instance.Write(
                    node: elem,
                    name: nameof(item.References),
                    item: item.References,
                    fieldIndex: (int)ScriptFields_FieldIndex.References,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ScriptFields_FieldIndex.References),
                    transl: (XElement subNode, ScriptReference subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<ScriptReference>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            ScriptFields item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out ScriptFields_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            ScriptFields item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            ScriptFields item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            LoquiBinaryTranslation<ScriptMetaSummary>.Instance.Write(
                writer: writer,
                item: item.MetadataSummary_Property,
                fieldIndex: (int)ScriptFields_FieldIndex.MetadataSummary,
                errorMask: errorMask);
            ScriptFields.WriteBinary_MetadataSummaryOld(
                writer: writer,
                item: item,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CompiledScript_Property,
                fieldIndex: (int)ScriptFields_FieldIndex.CompiledScript,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(ScriptFields_Registration.SCDA_HEADER),
                nullable: false);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SourceCode_Property,
                fieldIndex: (int)ScriptFields_FieldIndex.SourceCode,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(ScriptFields_Registration.SCTX_HEADER),
                nullable: false,
                nullTerminate: false);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<LocalVariable>.Instance.Write(
                writer: writer,
                items: item.LocalVariables,
                fieldIndex: (int)ScriptFields_FieldIndex.LocalVariables,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<LocalVariable>.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ScriptReference>.Instance.Write(
                writer: writer,
                items: item.References,
                fieldIndex: (int)ScriptFields_FieldIndex.References,
                errorMask: errorMask,
                transl: LoquiBinaryTranslation<ScriptReference>.Instance.Write);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class ScriptFields_Mask<T> : IMask<T>, IEquatable<ScriptFields_Mask<T>>
    {
        #region Ctors
        public ScriptFields_Mask()
        {
        }

        public ScriptFields_Mask(T initialValue)
        {
            this.MetadataSummary = new MaskItem<T, ScriptMetaSummary_Mask<T>>(initialValue, new ScriptMetaSummary_Mask<T>(initialValue));
            this.CompiledScript = initialValue;
            this.SourceCode = initialValue;
            this.LocalVariables = new MaskItem<T, IEnumerable<MaskItem<T, LocalVariable_Mask<T>>>>(initialValue, null);
            this.References = new MaskItem<T, IEnumerable<MaskItem<T, ScriptReference_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, ScriptMetaSummary_Mask<T>> MetadataSummary { get; set; }
        public T CompiledScript;
        public T SourceCode;
        public MaskItem<T, IEnumerable<MaskItem<T, LocalVariable_Mask<T>>>> LocalVariables;
        public MaskItem<T, IEnumerable<MaskItem<T, ScriptReference_Mask<T>>>> References;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptFields_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptFields_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MetadataSummary, rhs.MetadataSummary)) return false;
            if (!object.Equals(this.CompiledScript, rhs.CompiledScript)) return false;
            if (!object.Equals(this.SourceCode, rhs.SourceCode)) return false;
            if (!object.Equals(this.LocalVariables, rhs.LocalVariables)) return false;
            if (!object.Equals(this.References, rhs.References)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MetadataSummary?.GetHashCode());
            ret = ret.CombineHashCode(this.CompiledScript?.GetHashCode());
            ret = ret.CombineHashCode(this.SourceCode?.GetHashCode());
            ret = ret.CombineHashCode(this.LocalVariables?.GetHashCode());
            ret = ret.CombineHashCode(this.References?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (MetadataSummary != null)
            {
                if (!eval(this.MetadataSummary.Overall)) return false;
                if (this.MetadataSummary.Specific != null && !this.MetadataSummary.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.CompiledScript)) return false;
            if (!eval(this.SourceCode)) return false;
            if (this.LocalVariables != null)
            {
                if (!eval(this.LocalVariables.Overall)) return false;
                if (this.LocalVariables.Specific != null)
                {
                    foreach (var item in this.LocalVariables.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.References != null)
            {
                if (!eval(this.References.Overall)) return false;
                if (this.References.Specific != null)
                {
                    foreach (var item in this.References.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public ScriptFields_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptFields_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptFields_Mask<R> obj, Func<T, R> eval)
        {
            if (this.MetadataSummary != null)
            {
                obj.MetadataSummary = new MaskItem<R, ScriptMetaSummary_Mask<R>>();
                obj.MetadataSummary.Overall = eval(this.MetadataSummary.Overall);
                if (this.MetadataSummary.Specific != null)
                {
                    obj.MetadataSummary.Specific = this.MetadataSummary.Specific.Translate(eval);
                }
            }
            obj.CompiledScript = eval(this.CompiledScript);
            obj.SourceCode = eval(this.SourceCode);
            if (LocalVariables != null)
            {
                obj.LocalVariables = new MaskItem<R, IEnumerable<MaskItem<R, LocalVariable_Mask<R>>>>();
                obj.LocalVariables.Overall = eval(this.LocalVariables.Overall);
                if (LocalVariables.Specific != null)
                {
                    List<MaskItem<R, LocalVariable_Mask<R>>> l = new List<MaskItem<R, LocalVariable_Mask<R>>>();
                    obj.LocalVariables.Specific = l;
                    foreach (var item in LocalVariables.Specific)
                    {
                        MaskItem<R, LocalVariable_Mask<R>> mask = default(MaskItem<R, LocalVariable_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, LocalVariable_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (References != null)
            {
                obj.References = new MaskItem<R, IEnumerable<MaskItem<R, ScriptReference_Mask<R>>>>();
                obj.References.Overall = eval(this.References.Overall);
                if (References.Specific != null)
                {
                    List<MaskItem<R, ScriptReference_Mask<R>>> l = new List<MaskItem<R, ScriptReference_Mask<R>>>();
                    obj.References.Specific = l;
                    foreach (var item in References.Specific)
                    {
                        MaskItem<R, ScriptReference_Mask<R>> mask = default(MaskItem<R, ScriptReference_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ScriptReference_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.LocalVariables.Specific = null;
            this.References.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptFields_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptFields_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptFields_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MetadataSummary?.Overall ?? true)
                {
                    MetadataSummary?.ToString(fg);
                }
                if (printMask?.CompiledScript ?? true)
                {
                    fg.AppendLine($"CompiledScript => {CompiledScript}");
                }
                if (printMask?.SourceCode ?? true)
                {
                    fg.AppendLine($"SourceCode => {SourceCode}");
                }
                if (printMask?.LocalVariables?.Overall ?? true)
                {
                    fg.AppendLine("LocalVariables =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (LocalVariables.Overall != null)
                        {
                            fg.AppendLine(LocalVariables.Overall.ToString());
                        }
                        if (LocalVariables.Specific != null)
                        {
                            foreach (var subItem in LocalVariables.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.References?.Overall ?? true)
                {
                    fg.AppendLine("References =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (References.Overall != null)
                        {
                            fg.AppendLine(References.Overall.ToString());
                        }
                        if (References.Specific != null)
                        {
                            foreach (var subItem in References.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptFields_ErrorMask : IErrorMask, IErrorMask<ScriptFields_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, ScriptMetaSummary_ErrorMask> MetadataSummary;
        public Exception CompiledScript;
        public Exception SourceCode;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>> LocalVariables;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>> References;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return MetadataSummary;
                case ScriptFields_FieldIndex.CompiledScript:
                    return CompiledScript;
                case ScriptFields_FieldIndex.SourceCode:
                    return SourceCode;
                case ScriptFields_FieldIndex.LocalVariables:
                    return LocalVariables;
                case ScriptFields_FieldIndex.References:
                    return References;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    this.MetadataSummary = new MaskItem<Exception, ScriptMetaSummary_ErrorMask>(ex, null);
                    break;
                case ScriptFields_FieldIndex.CompiledScript:
                    this.CompiledScript = ex;
                    break;
                case ScriptFields_FieldIndex.SourceCode:
                    this.SourceCode = ex;
                    break;
                case ScriptFields_FieldIndex.LocalVariables:
                    this.LocalVariables = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>>(ex, null);
                    break;
                case ScriptFields_FieldIndex.References:
                    this.References = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    this.MetadataSummary = (MaskItem<Exception, ScriptMetaSummary_ErrorMask>)obj;
                    break;
                case ScriptFields_FieldIndex.CompiledScript:
                    this.CompiledScript = (Exception)obj;
                    break;
                case ScriptFields_FieldIndex.SourceCode:
                    this.SourceCode = (Exception)obj;
                    break;
                case ScriptFields_FieldIndex.LocalVariables:
                    this.LocalVariables = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>>)obj;
                    break;
                case ScriptFields_FieldIndex.References:
                    this.References = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (MetadataSummary != null) return true;
            if (CompiledScript != null) return true;
            if (SourceCode != null) return true;
            if (LocalVariables != null) return true;
            if (References != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptFields_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            MetadataSummary?.ToString(fg);
            fg.AppendLine($"CompiledScript => {CompiledScript}");
            fg.AppendLine($"SourceCode => {SourceCode}");
            fg.AppendLine("LocalVariables =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (LocalVariables.Overall != null)
                {
                    fg.AppendLine(LocalVariables.Overall.ToString());
                }
                if (LocalVariables.Specific != null)
                {
                    foreach (var subItem in LocalVariables.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("References =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (References.Overall != null)
                {
                    fg.AppendLine(References.Overall.ToString());
                }
                if (References.Specific != null)
                {
                    foreach (var subItem in References.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public ScriptFields_ErrorMask Combine(ScriptFields_ErrorMask rhs)
        {
            var ret = new ScriptFields_ErrorMask();
            ret.MetadataSummary = new MaskItem<Exception, ScriptMetaSummary_ErrorMask>(this.MetadataSummary.Overall.Combine(rhs.MetadataSummary.Overall), ((IErrorMask<ScriptMetaSummary_ErrorMask>)this.MetadataSummary.Specific).Combine(rhs.MetadataSummary.Specific));
            ret.CompiledScript = this.CompiledScript.Combine(rhs.CompiledScript);
            ret.SourceCode = this.SourceCode.Combine(rhs.SourceCode);
            ret.LocalVariables = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>>(this.LocalVariables.Overall.Combine(rhs.LocalVariables.Overall), new List<MaskItem<Exception, LocalVariable_ErrorMask>>(this.LocalVariables.Specific.And(rhs.LocalVariables.Specific)));
            ret.References = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>>(this.References.Overall.Combine(rhs.References.Overall), new List<MaskItem<Exception, ScriptReference_ErrorMask>>(this.References.Specific.And(rhs.References.Specific)));
            return ret;
        }
        public static ScriptFields_ErrorMask Combine(ScriptFields_ErrorMask lhs, ScriptFields_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ScriptFields_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptFields_ErrorMask();
        }
        #endregion

    }
    public class ScriptFields_CopyMask
    {
        #region Members
        public MaskItem<bool, ScriptMetaSummary_CopyMask> MetadataSummary;
        public bool CompiledScript;
        public bool SourceCode;
        public MaskItem<CopyOption, LocalVariable_CopyMask> LocalVariables;
        public MaskItem<CopyOption, ScriptReference_CopyMask> References;
        #endregion

    }
    public class ScriptFields_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, ScriptMetaSummary_TranslationMask> MetadataSummary;
        public bool CompiledScript;
        public bool SourceCode;
        public MaskItem<bool, LocalVariable_TranslationMask> LocalVariables;
        public MaskItem<bool, ScriptReference_TranslationMask> References;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((MetadataSummary?.Overall ?? true, MetadataSummary?.Specific?.GetCrystal()));
            ret.Add((CompiledScript, null));
            ret.Add((SourceCode, null));
            ret.Add((LocalVariables?.Overall ?? true, LocalVariables?.Specific?.GetCrystal()));
            ret.Add((References?.Overall ?? true, References?.Specific?.GetCrystal()));
        }
    }
    #endregion





    #endregion

}
