/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptMetaSummary : 
        ReactiveObject,
        IScriptMetaSummary,
        ILoquiObject<ScriptMetaSummary>,
        ILoquiObjectSetter,
        IPropertySupporter<Byte[]>,
        IPropertySupporter<UInt32>,
        IPropertySupporter<Int32>,
        IPropertySupporter<ScriptFields.ScriptType>,
        IEquatable<ScriptMetaSummary>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptMetaSummary_Registration.Instance;
        public static ScriptMetaSummary_Registration Registration => ScriptMetaSummary_Registration.Instance;

        #region Ctor
        public ScriptMetaSummary()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Fluff
        protected Byte[] _Fluff = new byte[4];
        protected PropertyForwarder<ScriptMetaSummary, Byte[]> _FluffForwarder;
        public INotifyingSetItem<Byte[]> Fluff_Property => _FluffForwarder ?? (_FluffForwarder = new PropertyForwarder<ScriptMetaSummary, Byte[]>(this, (int)ScriptMetaSummary_FieldIndex.Fluff));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Fluff
        {
            get => this._Fluff;
            set => this.SetFluff(value);
        }
        protected void SetFluff(
            Byte[] item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            if (item == null)
            {
                item = new byte[4];
            }
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.Fluff];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && object.Equals(Fluff, item)) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.Fluff] = hasBeenSet;
            }
            if (_ByteArr_subscriptions != null)
            {
                var tmp = Fluff;
                _Fluff = item;
                _ByteArr_subscriptions.FireSubscriptions(
                    index: (int)ScriptMetaSummary_FieldIndex.Fluff,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Fluff = item;
            }
        }
        protected void UnsetFluff()
        {
            SetFluff(
                item: default(Byte[]),
                hasBeenSet: false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> IScriptMetaSummary.Fluff_Property => this.Fluff_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> IScriptMetaSummaryGetter.Fluff_Property => this.Fluff_Property;
        #endregion
        #region RefCount
        protected UInt32 _RefCount;
        protected PropertyForwarder<ScriptMetaSummary, UInt32> _RefCountForwarder;
        public INotifyingSetItem<UInt32> RefCount_Property => _RefCountForwarder ?? (_RefCountForwarder = new PropertyForwarder<ScriptMetaSummary, UInt32>(this, (int)ScriptMetaSummary_FieldIndex.RefCount));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 RefCount
        {
            get => this._RefCount;
            set => this.SetRefCount(value);
        }
        protected void SetRefCount(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.RefCount];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && RefCount == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.RefCount] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = RefCount;
                _RefCount = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)ScriptMetaSummary_FieldIndex.RefCount,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _RefCount = item;
            }
        }
        protected void UnsetRefCount()
        {
            _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.RefCount] = false;
            RefCount = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IScriptMetaSummary.RefCount_Property => this.RefCount_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IScriptMetaSummaryGetter.RefCount_Property => this.RefCount_Property;
        #endregion
        #region CompiledSize
        protected Int32 _CompiledSize;
        protected PropertyForwarder<ScriptMetaSummary, Int32> _CompiledSizeForwarder;
        public INotifyingSetItemGetter<Int32> CompiledSize_Property => _CompiledSizeForwarder ?? (_CompiledSizeForwarder = new PropertyForwarder<ScriptMetaSummary, Int32>(this, (int)ScriptMetaSummary_FieldIndex.CompiledSize));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 CompiledSize
        {
            get => this._CompiledSize;
            protected set => this.SetCompiledSize(value);
        }
        protected void SetCompiledSize(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.CompiledSize];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && CompiledSize == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.CompiledSize] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = CompiledSize;
                _CompiledSize = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)ScriptMetaSummary_FieldIndex.CompiledSize,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _CompiledSize = item;
            }
        }
        protected void UnsetCompiledSize()
        {
            _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.CompiledSize] = false;
            CompiledSize = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> IScriptMetaSummaryGetter.CompiledSize_Property => this.CompiledSize_Property;
        #endregion
        #region VariableCount
        protected UInt32 _VariableCount;
        protected PropertyForwarder<ScriptMetaSummary, UInt32> _VariableCountForwarder;
        public INotifyingSetItem<UInt32> VariableCount_Property => _VariableCountForwarder ?? (_VariableCountForwarder = new PropertyForwarder<ScriptMetaSummary, UInt32>(this, (int)ScriptMetaSummary_FieldIndex.VariableCount));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 VariableCount
        {
            get => this._VariableCount;
            set => this.SetVariableCount(value);
        }
        protected void SetVariableCount(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.VariableCount];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && VariableCount == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.VariableCount] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = VariableCount;
                _VariableCount = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)ScriptMetaSummary_FieldIndex.VariableCount,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _VariableCount = item;
            }
        }
        protected void UnsetVariableCount()
        {
            _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.VariableCount] = false;
            VariableCount = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IScriptMetaSummary.VariableCount_Property => this.VariableCount_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IScriptMetaSummaryGetter.VariableCount_Property => this.VariableCount_Property;
        #endregion
        #region Type
        protected ScriptFields.ScriptType _Type;
        protected PropertyForwarder<ScriptMetaSummary, ScriptFields.ScriptType> _TypeForwarder;
        public INotifyingSetItem<ScriptFields.ScriptType> Type_Property => _TypeForwarder ?? (_TypeForwarder = new PropertyForwarder<ScriptMetaSummary, ScriptFields.ScriptType>(this, (int)ScriptMetaSummary_FieldIndex.Type));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ScriptFields.ScriptType Type
        {
            get => this._Type;
            set => this.SetType(value);
        }
        protected void SetType(
            ScriptFields.ScriptType item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.Type];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Type == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.Type] = hasBeenSet;
            }
            if (_ScriptFieldsScriptType_subscriptions != null)
            {
                var tmp = Type;
                _Type = item;
                _ScriptFieldsScriptType_subscriptions.FireSubscriptions(
                    index: (int)ScriptMetaSummary_FieldIndex.Type,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Type = item;
            }
        }
        protected void UnsetType()
        {
            _hasBeenSetTracker[(int)ScriptMetaSummary_FieldIndex.Type] = false;
            Type = default(ScriptFields.ScriptType);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<ScriptFields.ScriptType> IScriptMetaSummary.Type_Property => this.Type_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<ScriptFields.ScriptType> IScriptMetaSummaryGetter.Type_Property => this.Type_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => ScriptMetaSummaryCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => ScriptMetaSummaryCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ScriptMetaSummaryCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ScriptMetaSummaryCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<ScriptMetaSummary>.GetEqualsMask(ScriptMetaSummary rhs) => ScriptMetaSummaryCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IScriptMetaSummaryGetter>.GetEqualsMask(IScriptMetaSummaryGetter rhs) => ScriptMetaSummaryCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            return ScriptMetaSummaryCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptMetaSummaryCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public ScriptMetaSummary_Mask<bool> GetHasBeenSetMask()
        {
            return ScriptMetaSummaryCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptMetaSummary rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptMetaSummary rhs)
        {
            if (rhs == null) return false;
            if (!this.Fluff.EqualsFast(rhs.Fluff)) return false;
            if (this.RefCount != rhs.RefCount) return false;
            if (this.CompiledSize != rhs.CompiledSize) return false;
            if (this.VariableCount != rhs.VariableCount) return false;
            if (this.Type != rhs.Type) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefCount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CompiledSize).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(VariableCount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static ScriptMetaSummary Create_Xml(
            XElement root,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptMetaSummary Create_Xml(
            XElement root,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptMetaSummary Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new ScriptMetaSummary();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptMetaSummary Create_Xml(
            string path,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary Create_Xml(
            string path,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary Create_Xml(
            Stream stream,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary Create_Xml(
            Stream stream,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<ScriptMetaSummary>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true,
            ScriptMetaSummary_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ScriptMetaSummaryCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            ScriptMetaSummary item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.UnsetFluff();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RefCount":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.RefCount);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 RefCountParse,
                            errorMask: errorMask))
                        {
                            item.RefCount = RefCountParse;
                        }
                        else
                        {
                            item.UnsetRefCount();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VariableCount":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.VariableCount);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 VariableCountParse,
                            errorMask: errorMask))
                        {
                            item.VariableCount = VariableCountParse;
                        }
                        else
                        {
                            item.UnsetVariableCount();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Type);
                        if (EnumXmlTranslation<ScriptFields.ScriptType>.Instance.Parse(
                            root: root,
                            item: out ScriptFields.ScriptType TypeParse,
                            errorMask: errorMask))
                        {
                            item.Type = TypeParse;
                        }
                        else
                        {
                            item.UnsetType();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region IPropertySupporter Byte[]
        protected ObjectCentralizationSubscriptions<Byte[]> _ByteArr_subscriptions;
        Byte[] IPropertySupporter<Byte[]>.Get(int index)
        {
            return GetByteArr(index: index);
        }

        protected Byte[] GetByteArr(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return Fluff;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        void IPropertySupporter<Byte[]>.Set(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetByteArr(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetByteArr(
            int index,
            Byte[] item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    SetFluff(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        bool IPropertySupporter<Byte[]>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Byte[]>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Byte[]>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetByteArr(
                index: index,
                cmds: cmds);
        }

        protected void UnsetByteArr(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    SetFluff(
                        item: default(Byte[]),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Byte[]> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ByteArr_subscriptions == null)
            {
                _ByteArr_subscriptions = new ObjectCentralizationSubscriptions<Byte[]>();
            }
            _ByteArr_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Byte[]>.Unsubscribe(
            int index,
            object owner)
        {
            _ByteArr_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Byte[]>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Byte[] IPropertySupporter<Byte[]>.DefaultValue(int index)
        {
            return DefaultValueByteArr(index: index);
        }

        protected Byte[] DefaultValueByteArr(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return default(Byte[]);
                default:
                    throw new ArgumentException($"Unknown index for field type Byte[]: {index}");
            }
        }

        #endregion

        #region IPropertySupporter UInt32
        protected ObjectCentralizationSubscriptions<UInt32> _UInt32_subscriptions;
        UInt32 IPropertySupporter<UInt32>.Get(int index)
        {
            return GetUInt32(index: index);
        }

        protected UInt32 GetUInt32(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return RefCount;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return VariableCount;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        void IPropertySupporter<UInt32>.Set(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetUInt32(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.RefCount:
                    SetRefCount(item, hasBeenSet, cmds);
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    SetVariableCount(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        bool IPropertySupporter<UInt32>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<UInt32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetUInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.RefCount:
                    SetRefCount(
                        item: default(UInt32),
                        hasBeenSet: false);
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    SetVariableCount(
                        item: default(UInt32),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt32_subscriptions == null)
            {
                _UInt32_subscriptions = new ObjectCentralizationSubscriptions<UInt32>();
            }
            _UInt32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt32 IPropertySupporter<UInt32>.DefaultValue(int index)
        {
            return DefaultValueUInt32(index: index);
        }

        protected UInt32 DefaultValueUInt32(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return default(UInt32);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        #endregion

        #region IPropertySupporter Int32
        protected ObjectCentralizationSubscriptions<Int32> _Int32_subscriptions;
        Int32 IPropertySupporter<Int32>.Get(int index)
        {
            return GetInt32(index: index);
        }

        protected Int32 GetInt32(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return CompiledSize;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        void IPropertySupporter<Int32>.Set(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetInt32(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    SetCompiledSize(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        bool IPropertySupporter<Int32>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Int32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Int32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    SetCompiledSize(
                        item: default(Int32),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Int32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Int32_subscriptions == null)
            {
                _Int32_subscriptions = new ObjectCentralizationSubscriptions<Int32>();
            }
            _Int32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Unsubscribe(
            int index,
            object owner)
        {
            _Int32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Int32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Int32 IPropertySupporter<Int32>.DefaultValue(int index)
        {
            return DefaultValueInt32(index: index);
        }

        protected Int32 DefaultValueInt32(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return default(Int32);
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        #endregion

        #region IPropertySupporter ScriptFields.ScriptType
        protected ObjectCentralizationSubscriptions<ScriptFields.ScriptType> _ScriptFieldsScriptType_subscriptions;
        ScriptFields.ScriptType IPropertySupporter<ScriptFields.ScriptType>.Get(int index)
        {
            return GetScriptFieldsScriptType(index: index);
        }

        protected ScriptFields.ScriptType GetScriptFieldsScriptType(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Type:
                    return Type;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields.ScriptType: {index}");
            }
        }

        void IPropertySupporter<ScriptFields.ScriptType>.Set(
            int index,
            ScriptFields.ScriptType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetScriptFieldsScriptType(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetScriptFieldsScriptType(
            int index,
            ScriptFields.ScriptType item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Type:
                    SetType(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields.ScriptType: {index}");
            }
        }

        bool IPropertySupporter<ScriptFields.ScriptType>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<ScriptFields.ScriptType>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<ScriptFields.ScriptType>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetScriptFieldsScriptType(
                index: index,
                cmds: cmds);
        }

        protected void UnsetScriptFieldsScriptType(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Type:
                    SetType(
                        item: default(ScriptFields.ScriptType),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields.ScriptType: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ScriptFields.ScriptType>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<ScriptFields.ScriptType> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ScriptFieldsScriptType_subscriptions == null)
            {
                _ScriptFieldsScriptType_subscriptions = new ObjectCentralizationSubscriptions<ScriptFields.ScriptType>();
            }
            _ScriptFieldsScriptType_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ScriptFields.ScriptType>.Unsubscribe(
            int index,
            object owner)
        {
            _ScriptFieldsScriptType_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<ScriptFields.ScriptType>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        ScriptFields.ScriptType IPropertySupporter<ScriptFields.ScriptType>.DefaultValue(int index)
        {
            return DefaultValueScriptFieldsScriptType(index: index);
        }

        protected ScriptFields.ScriptType DefaultValueScriptFieldsScriptType(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Type:
                    return default(ScriptFields.ScriptType);
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields.ScriptType: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ScriptMetaSummary_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static ScriptMetaSummary Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptMetaSummary Create_Binary(
            MutagenFrame frame,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptMetaSummary Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptMetaSummary();
            try
            {
                frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                    frame.Reader,
                    recordTypeConverter.ConvertToCustom(ScriptMetaSummary_Registration.SCHR_HEADER)));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptMetaSummary Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ScriptMetaSummary Create_Binary(
            string path,
            out ScriptMetaSummary_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static ScriptMetaSummary Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ScriptMetaSummary Create_Binary(
            Stream stream,
            out ScriptMetaSummary_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ScriptMetaSummaryCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_CompiledSize_Custom(
            MutagenFrame frame,
            ScriptMetaSummary item,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_CompiledSize_Custom(
            MutagenWriter writer,
            ScriptMetaSummary item,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_CompiledSize(
            MutagenWriter writer,
            ScriptMetaSummary item,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_CompiledSize_Custom(
                writer: writer,
                item: item,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            ScriptMetaSummary item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            try
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Fluff);
                if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out Byte[] FluffParse,
                    errorMask: errorMask))
                {
                    item.Fluff = FluffParse;
                }
                else
                {
                    item.UnsetFluff();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.RefCount);
                if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out UInt32 RefCountParse,
                    errorMask: errorMask))
                {
                    item.RefCount = RefCountParse;
                }
                else
                {
                    item.UnsetRefCount();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            FillBinary_CompiledSize_Custom(
                frame: frame,
                item: item,
                errorMask: errorMask);
            try
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.VariableCount);
                if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out UInt32 VariableCountParse,
                    errorMask: errorMask))
                {
                    item.VariableCount = VariableCountParse;
                }
                else
                {
                    item.UnsetVariableCount();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Type);
                if (EnumBinaryTranslation<ScriptFields.ScriptType>.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out ScriptFields.ScriptType TypeParse,
                    errorMask: errorMask))
                {
                    item.Type = TypeParse;
                }
                else
                {
                    item.UnsetType();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        #endregion

        public ScriptMetaSummary Copy(
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null)
        {
            return ScriptMetaSummary.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ScriptMetaSummary Copy(
            IScriptMetaSummary item,
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null)
        {
            ScriptMetaSummary ret;
            if (item.GetType().Equals(typeof(ScriptMetaSummary)))
            {
                ret = new ScriptMetaSummary();
            }
            else
            {
                ret = (ScriptMetaSummary)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ScriptMetaSummary Copy_ToLoqui(
            IScriptMetaSummaryGetter item,
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null)
        {
            ScriptMetaSummary ret;
            if (item.GetType().Equals(typeof(ScriptMetaSummary)))
            {
                ret = new ScriptMetaSummary() as ScriptMetaSummary;
            }
            else
            {
                ret = (ScriptMetaSummary)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IScriptMetaSummaryGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IScriptMetaSummaryGetter rhs,
            ScriptMetaSummary_CopyMask copyMask,
            IScriptMetaSummaryGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IScriptMetaSummaryGetter rhs,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptMetaSummaryCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IScriptMetaSummaryGetter rhs,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ScriptMetaSummaryCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case ScriptMetaSummary_FieldIndex.Fluff:
                    this.SetFluff(
                        (Byte[])obj,
                        cmds: cmds);
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    this.SetRefCount(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    this.SetVariableCount(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    this.SetType(
                        (ScriptFields.ScriptType)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ScriptMetaSummaryCommon.Clear(this, cmds);
        }


        public static ScriptMetaSummary Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ScriptMetaSummary();
            foreach (var pair in fields)
            {
                CopyInInternal_ScriptMetaSummary(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ScriptMetaSummary(ScriptMetaSummary obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ScriptMetaSummary_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    obj.SetFluff(
                        (Byte[])pair.Value,
                        cmds: null);
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    obj.SetRefCount(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    obj.SetVariableCount(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    obj.SetType(
                        (ScriptFields.ScriptType)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, ScriptMetaSummary obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptMetaSummary : IScriptMetaSummaryGetter, ILoquiClass<IScriptMetaSummary, IScriptMetaSummaryGetter>, ILoquiClass<ScriptMetaSummary, IScriptMetaSummaryGetter>
    {
        new Byte[] Fluff { get; set; }
        new INotifyingItem<Byte[]> Fluff_Property { get; }

        new UInt32 RefCount { get; set; }
        new INotifyingItem<UInt32> RefCount_Property { get; }

        new UInt32 VariableCount { get; set; }
        new INotifyingItem<UInt32> VariableCount_Property { get; }

        new ScriptFields.ScriptType Type { get; set; }
        new INotifyingItem<ScriptFields.ScriptType> Type_Property { get; }

    }

    public partial interface IScriptMetaSummaryGetter : ILoquiObject
    {
        #region Fluff
        Byte[] Fluff { get; }
        INotifyingItemGetter<Byte[]> Fluff_Property { get; }

        #endregion
        #region RefCount
        UInt32 RefCount { get; }
        INotifyingItemGetter<UInt32> RefCount_Property { get; }

        #endregion
        #region CompiledSize
        Int32 CompiledSize { get; }
        INotifyingItemGetter<Int32> CompiledSize_Property { get; }

        #endregion
        #region VariableCount
        UInt32 VariableCount { get; }
        INotifyingItemGetter<UInt32> VariableCount_Property { get; }

        #endregion
        #region Type
        ScriptFields.ScriptType Type { get; }
        INotifyingItemGetter<ScriptFields.ScriptType> Type_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptMetaSummary_FieldIndex
    {
        Fluff = 0,
        RefCount = 1,
        CompiledSize = 2,
        VariableCount = 3,
        Type = 4,
    }
    #endregion

    #region Registration
    public class ScriptMetaSummary_Registration : ILoquiRegistration
    {
        public static readonly ScriptMetaSummary_Registration Instance = new ScriptMetaSummary_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 47,
            version: 0);

        public const string GUID = "80c1bfa2-bdf3-4bc9-aeb7-306536cdbc91";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScriptMetaSummary_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptMetaSummary_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptMetaSummary);

        public static readonly Type GetterType = typeof(IScriptMetaSummaryGetter);

        public static readonly Type SetterType = typeof(IScriptMetaSummary);

        public static readonly Type CommonType = typeof(ScriptMetaSummaryCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptMetaSummary";

        public const string Name = "ScriptMetaSummary";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLUFF":
                    return (ushort)ScriptMetaSummary_FieldIndex.Fluff;
                case "REFCOUNT":
                    return (ushort)ScriptMetaSummary_FieldIndex.RefCount;
                case "COMPILEDSIZE":
                    return (ushort)ScriptMetaSummary_FieldIndex.CompiledSize;
                case "VARIABLECOUNT":
                    return (ushort)ScriptMetaSummary_FieldIndex.VariableCount;
                case "TYPE":
                    return (ushort)ScriptMetaSummary_FieldIndex.Type;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return "Fluff";
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return "RefCount";
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return "CompiledSize";
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return "VariableCount";
                case ScriptMetaSummary_FieldIndex.Type:
                    return "Type";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return true;
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return true;
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return typeof(UInt32);
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return typeof(Int32);
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return typeof(UInt32);
                case ScriptMetaSummary_FieldIndex.Type:
                    return typeof(ScriptFields.ScriptType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCHR_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ScriptMetaSummaryCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IScriptMetaSummary item,
            IScriptMetaSummaryGetter rhs,
            IScriptMetaSummaryGetter def,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Fluff ?? true)
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Fluff);
                try
                {
                    item.Fluff_Property.Set(
                        value: rhs.Fluff,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RefCount ?? true)
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.RefCount);
                try
                {
                    item.RefCount_Property.Set(
                        value: rhs.RefCount,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.VariableCount ?? true)
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.VariableCount);
                try
                {
                    item.VariableCount_Property.Set(
                        value: rhs.VariableCount,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Type ?? true)
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Type);
                try
                {
                    item.Type_Property.Set(
                        value: rhs.Type,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IScriptMetaSummary obj,
            NotifyingFireParameters cmds = null)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IScriptMetaSummary obj,
            NotifyingUnsetParameters cmds = null)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    throw new ArgumentException($"Tried to unset at a derivative index {index}");
                case ScriptMetaSummary_FieldIndex.Fluff:
                    obj.Fluff = default(Byte[]);
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    obj.RefCount = default(UInt32);
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    obj.VariableCount = default(UInt32);
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    obj.Type = default(ScriptFields.ScriptType);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IScriptMetaSummary obj)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IScriptMetaSummaryGetter obj)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return obj.Fluff;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return obj.RefCount;
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return obj.CompiledSize;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return obj.VariableCount;
                case ScriptMetaSummary_FieldIndex.Type:
                    return obj.Type;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IScriptMetaSummary item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Fluff = default(Byte[]);
            item.RefCount = default(UInt32);
            item.VariableCount = default(UInt32);
            item.Type = default(ScriptFields.ScriptType);
        }

        public static ScriptMetaSummary_Mask<bool> GetEqualsMask(
            this IScriptMetaSummaryGetter item,
            IScriptMetaSummaryGetter rhs)
        {
            var ret = new ScriptMetaSummary_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IScriptMetaSummaryGetter item,
            IScriptMetaSummaryGetter rhs,
            ScriptMetaSummary_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Fluff = item.Fluff.EqualsFast(rhs.Fluff);
            ret.RefCount = item.RefCount == rhs.RefCount;
            ret.CompiledSize = item.CompiledSize == rhs.CompiledSize;
            ret.VariableCount = item.VariableCount == rhs.VariableCount;
            ret.Type = item.Type == rhs.Type;
        }

        public static string ToString(
            this IScriptMetaSummaryGetter item,
            string name = null,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IScriptMetaSummaryGetter item,
            FileGeneration fg,
            string name = null,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ScriptMetaSummary)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ScriptMetaSummary)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.RefCount ?? true)
                {
                    fg.AppendLine($"RefCount => {item.RefCount}");
                }
                if (printMask?.CompiledSize ?? true)
                {
                    fg.AppendLine($"CompiledSize => {item.CompiledSize}");
                }
                if (printMask?.VariableCount ?? true)
                {
                    fg.AppendLine($"VariableCount => {item.VariableCount}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IScriptMetaSummaryGetter item,
            ScriptMetaSummary_Mask<bool?> checkMask)
        {
            return true;
        }

        public static ScriptMetaSummary_Mask<bool> GetHasBeenSetMask(IScriptMetaSummaryGetter item)
        {
            var ret = new ScriptMetaSummary_Mask<bool>();
            ret.Fluff = true;
            ret.RefCount = true;
            ret.CompiledSize = true;
            ret.VariableCount = true;
            ret.Type = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            ScriptMetaSummary item,
            bool doMasks,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            ScriptMetaSummary item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptMetaSummary");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptMetaSummary");
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.Fluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Fluff),
                    item: item.Fluff_Property,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.RefCount) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.RefCount),
                    item: item.RefCount_Property,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.RefCount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.VariableCount) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.VariableCount),
                    item: item.VariableCount_Property,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.VariableCount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.Type) ?? true))
            {
                EnumXmlTranslation<ScriptFields.ScriptType>.Instance.Write(
                    node: elem,
                    name: nameof(item.Type),
                    item: item.Type_Property,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.Type,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            ScriptMetaSummary item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out ScriptMetaSummary_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            ScriptMetaSummary item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ScriptMetaSummary_Registration.SCHR_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            ScriptMetaSummary item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff_Property,
                fieldIndex: (int)ScriptMetaSummary_FieldIndex.Fluff,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RefCount_Property,
                fieldIndex: (int)ScriptMetaSummary_FieldIndex.RefCount,
                errorMask: errorMask);
            ScriptMetaSummary.WriteBinary_CompiledSize(
                writer: writer,
                item: item,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VariableCount_Property,
                fieldIndex: (int)ScriptMetaSummary_FieldIndex.VariableCount,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ScriptFields.ScriptType>.Instance.Write(
                writer,
                item.Type_Property,
                length: 4,
                fieldIndex: (int)ScriptMetaSummary_FieldIndex.Type,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class ScriptMetaSummary_Mask<T> : IMask<T>, IEquatable<ScriptMetaSummary_Mask<T>>
    {
        #region Ctors
        public ScriptMetaSummary_Mask()
        {
        }

        public ScriptMetaSummary_Mask(T initialValue)
        {
            this.Fluff = initialValue;
            this.RefCount = initialValue;
            this.CompiledSize = initialValue;
            this.VariableCount = initialValue;
            this.Type = initialValue;
        }
        #endregion

        #region Members
        public T Fluff;
        public T RefCount;
        public T CompiledSize;
        public T VariableCount;
        public T Type;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptMetaSummary_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptMetaSummary_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.RefCount, rhs.RefCount)) return false;
            if (!object.Equals(this.CompiledSize, rhs.CompiledSize)) return false;
            if (!object.Equals(this.VariableCount, rhs.VariableCount)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.RefCount?.GetHashCode());
            ret = ret.CombineHashCode(this.CompiledSize?.GetHashCode());
            ret = ret.CombineHashCode(this.VariableCount?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Fluff)) return false;
            if (!eval(this.RefCount)) return false;
            if (!eval(this.CompiledSize)) return false;
            if (!eval(this.VariableCount)) return false;
            if (!eval(this.Type)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ScriptMetaSummary_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptMetaSummary_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptMetaSummary_Mask<R> obj, Func<T, R> eval)
        {
            obj.Fluff = eval(this.Fluff);
            obj.RefCount = eval(this.RefCount);
            obj.CompiledSize = eval(this.CompiledSize);
            obj.VariableCount = eval(this.VariableCount);
            obj.Type = eval(this.Type);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptMetaSummary_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptMetaSummary_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptMetaSummary_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.RefCount ?? true)
                {
                    fg.AppendLine($"RefCount => {RefCount}");
                }
                if (printMask?.CompiledSize ?? true)
                {
                    fg.AppendLine($"CompiledSize => {CompiledSize}");
                }
                if (printMask?.VariableCount ?? true)
                {
                    fg.AppendLine($"VariableCount => {VariableCount}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptMetaSummary_ErrorMask : IErrorMask, IErrorMask<ScriptMetaSummary_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Fluff;
        public Exception RefCount;
        public Exception CompiledSize;
        public Exception VariableCount;
        public Exception Type;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return Fluff;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return RefCount;
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return CompiledSize;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return VariableCount;
                case ScriptMetaSummary_FieldIndex.Type:
                    return Type;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    this.RefCount = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    this.CompiledSize = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    this.VariableCount = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    this.Type = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    this.RefCount = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    this.CompiledSize = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    this.VariableCount = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Fluff != null) return true;
            if (RefCount != null) return true;
            if (CompiledSize != null) return true;
            if (VariableCount != null) return true;
            if (Type != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptMetaSummary_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"RefCount => {RefCount}");
            fg.AppendLine($"CompiledSize => {CompiledSize}");
            fg.AppendLine($"VariableCount => {VariableCount}");
            fg.AppendLine($"Type => {Type}");
        }
        #endregion

        #region Combine
        public ScriptMetaSummary_ErrorMask Combine(ScriptMetaSummary_ErrorMask rhs)
        {
            var ret = new ScriptMetaSummary_ErrorMask();
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.RefCount = this.RefCount.Combine(rhs.RefCount);
            ret.CompiledSize = this.CompiledSize.Combine(rhs.CompiledSize);
            ret.VariableCount = this.VariableCount.Combine(rhs.VariableCount);
            ret.Type = this.Type.Combine(rhs.Type);
            return ret;
        }
        public static ScriptMetaSummary_ErrorMask Combine(ScriptMetaSummary_ErrorMask lhs, ScriptMetaSummary_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ScriptMetaSummary_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptMetaSummary_ErrorMask();
        }
        #endregion

    }
    public class ScriptMetaSummary_CopyMask
    {
        #region Members
        public bool Fluff;
        public bool RefCount;
        public bool CompiledSize;
        public bool VariableCount;
        public bool Type;
        #endregion

    }
    public class ScriptMetaSummary_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Fluff;
        public bool RefCount;
        public bool CompiledSize;
        public bool VariableCount;
        public bool Type;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Fluff, null));
            ret.Add((RefCount, null));
            ret.Add((CompiledSize, null));
            ret.Add((VariableCount, null));
            ret.Add((Type, null));
        }
    }
    #endregion

    #endregion

}
