/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptMetaSummary :
        LoquiNotifyingObject,
        IScriptMetaSummary,
        ILoquiObject<ScriptMetaSummary>,
        ILoquiObjectSetter,
        IEquatable<ScriptMetaSummary>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptMetaSummary_Registration.Instance;
        public static ScriptMetaSummary_Registration Registration => ScriptMetaSummary_Registration.Instance;

        #region Ctor
        public ScriptMetaSummary()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Fluff
        private Byte[] _Fluff = new byte[4];
        public Byte[] Fluff
        {
            get => _Fluff;
            set
            {
                this._Fluff = value;
                if (value == null)
                {
                    this._Fluff = new byte[4];
                }
            }
        }
        #endregion
        #region RefCount
        private UInt32 _RefCount;
        public UInt32 RefCount
        {
            get => this._RefCount;
            set => this.RaiseAndSetIfChanged(ref this._RefCount, value, nameof(RefCount));
        }
        #endregion
        #region CompiledSize
        private Int32 _CompiledSize;
        public Int32 CompiledSize
        {
            get => this._CompiledSize;
            protected set => this.RaiseAndSetIfChanged(ref this._CompiledSize, value, nameof(CompiledSize));
        }
        #endregion
        #region VariableCount
        private UInt32 _VariableCount;
        public UInt32 VariableCount
        {
            get => this._VariableCount;
            set => this.RaiseAndSetIfChanged(ref this._VariableCount, value, nameof(VariableCount));
        }
        #endregion
        #region Type
        private ScriptFields.ScriptType _Type;
        public ScriptFields.ScriptType Type
        {
            get => this._Type;
            set => this.RaiseAndSetIfChanged(ref this._Type, value, nameof(Type));
        }
        #endregion

        IMask<bool> IEqualsMask<ScriptMetaSummary>.GetEqualsMask(ScriptMetaSummary rhs, EqualsMaskHelper.Include include) => ScriptMetaSummaryCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IScriptMetaSummaryGetter>.GetEqualsMask(IScriptMetaSummaryGetter rhs, EqualsMaskHelper.Include include) => ScriptMetaSummaryCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            return ScriptMetaSummaryCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptMetaSummaryCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public ScriptMetaSummary_Mask<bool> GetHasBeenSetMask()
        {
            return ScriptMetaSummaryCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptMetaSummary rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptMetaSummary rhs)
        {
            if (rhs == null) return false;
            if (!ByteExt.EqualsFast(this.Fluff, rhs.Fluff)) return false;
            if (this.RefCount != rhs.RefCount) return false;
            if (this.CompiledSize != rhs.CompiledSize) return false;
            if (this.VariableCount != rhs.VariableCount) return false;
            if (this.Type != rhs.Type) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefCount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CompiledSize).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(VariableCount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected IXmlTranslator XmlTranslator => ScriptMetaSummaryXmlTranslation.Instance;
        IXmlTranslator IXmlItem.XmlTranslator => this.XmlTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static ScriptMetaSummary CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptMetaSummary CreateFromXml(
            XElement node,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptMetaSummary CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ScriptMetaSummary() : null;
                    break;
                default:
                    break;
            }
            var ret = new ScriptMetaSummary();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ScriptMetaSummaryXmlTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptMetaSummary CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary CreateFromXml(
            string path,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ScriptMetaSummary CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary CreateFromXml(
            Stream stream,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            ScriptMetaSummary item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ScriptMetaSummary_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected IBinaryTranslator BinaryTranslator => ScriptMetaSummaryBinaryTranslation.Instance;
        IBinaryTranslator IBinaryItem.BinaryTranslator => this.BinaryTranslator;
        #region Binary Create
        [DebuggerStepThrough]
        public static ScriptMetaSummary CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptMetaSummary CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptMetaSummary CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptMetaSummary();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ScriptMetaSummary_Registration.SCHR_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            ScriptMetaSummary item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out Byte[] FluffParse))
            {
                item.Fluff = FluffParse;
            }
            else
            {
                item.Fluff = default(Byte[]);
            }
            item.RefCount = frame.ReadUInt32();
            ScriptMetaSummaryBinaryTranslation.FillBinaryCompiledSizeCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            item.VariableCount = frame.ReadUInt32();
            if (EnumBinaryTranslation<ScriptFields.ScriptType>.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out ScriptFields.ScriptType TypeParse))
            {
                item.Type = TypeParse;
            }
            else
            {
                item.Type = default(ScriptFields.ScriptType);
            }
        }

        #endregion

        public ScriptMetaSummary Copy(
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null)
        {
            return ScriptMetaSummary.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ScriptMetaSummary Copy(
            IScriptMetaSummary item,
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null)
        {
            ScriptMetaSummary ret;
            if (item.GetType().Equals(typeof(ScriptMetaSummary)))
            {
                ret = new ScriptMetaSummary();
            }
            else
            {
                ret = (ScriptMetaSummary)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ScriptMetaSummary Copy_ToLoqui(
            IScriptMetaSummaryGetter item,
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null)
        {
            ScriptMetaSummary ret;
            if (item.GetType().Equals(typeof(ScriptMetaSummary)))
            {
                ret = new ScriptMetaSummary() as ScriptMetaSummary;
            }
            else
            {
                ret = (ScriptMetaSummary)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(IScriptMetaSummaryGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IScriptMetaSummaryGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IScriptMetaSummaryGetter rhs,
            ScriptMetaSummary_CopyMask copyMask,
            IScriptMetaSummaryGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IScriptMetaSummaryGetter rhs,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptMetaSummaryCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IScriptMetaSummaryGetter rhs,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null)
        {
            ScriptMetaSummaryCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case ScriptMetaSummary_FieldIndex.Fluff:
                    this.Fluff = (Byte[])obj;
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    this.RefCount = (UInt32)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    this.VariableCount = (UInt32)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    this.Type = (ScriptFields.ScriptType)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            ScriptMetaSummaryCommon.Clear(this);
        }


        public static ScriptMetaSummary Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ScriptMetaSummary();
            foreach (var pair in fields)
            {
                CopyInInternal_ScriptMetaSummary(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ScriptMetaSummary(ScriptMetaSummary obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ScriptMetaSummary_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    obj.Fluff = (Byte[])pair.Value;
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    obj.RefCount = (UInt32)pair.Value;
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    obj.VariableCount = (UInt32)pair.Value;
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    obj.Type = (ScriptFields.ScriptType)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IScriptMetaSummary :
        IScriptMetaSummaryGetter,
        ILoquiClass<IScriptMetaSummary, IScriptMetaSummaryGetter>,
        ILoquiClass<ScriptMetaSummary, IScriptMetaSummaryGetter>
    {
        new Byte[] Fluff { get; set; }

        new UInt32 RefCount { get; set; }

        new UInt32 VariableCount { get; set; }

        new ScriptFields.ScriptType Type { get; set; }

        void CopyFieldsFrom(
            IScriptMetaSummaryGetter rhs,
            ErrorMaskBuilder errorMask = null,
            ScriptMetaSummary_CopyMask copyMask = null,
            IScriptMetaSummaryGetter def = null);
    }

    public partial interface IScriptMetaSummaryGetter :
        ILoquiObject,
        IXmlItem,
        IBinaryItem
    {
        #region Fluff
        Byte[] Fluff { get; }

        #endregion
        #region RefCount
        UInt32 RefCount { get; }

        #endregion
        #region CompiledSize
        Int32 CompiledSize { get; }

        #endregion
        #region VariableCount
        UInt32 VariableCount { get; }

        #endregion
        #region Type
        ScriptFields.ScriptType Type { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptMetaSummary_FieldIndex
    {
        Fluff = 0,
        RefCount = 1,
        CompiledSize = 2,
        VariableCount = 3,
        Type = 4,
    }
    #endregion

    #region Registration
    public class ScriptMetaSummary_Registration : ILoquiRegistration
    {
        public static readonly ScriptMetaSummary_Registration Instance = new ScriptMetaSummary_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 47,
            version: 0);

        public const string GUID = "80c1bfa2-bdf3-4bc9-aeb7-306536cdbc91";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScriptMetaSummary_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptMetaSummary_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptMetaSummary);

        public static readonly Type GetterType = typeof(IScriptMetaSummaryGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptMetaSummary);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(ScriptMetaSummaryCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptMetaSummary";

        public const string Name = "ScriptMetaSummary";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLUFF":
                    return (ushort)ScriptMetaSummary_FieldIndex.Fluff;
                case "REFCOUNT":
                    return (ushort)ScriptMetaSummary_FieldIndex.RefCount;
                case "COMPILEDSIZE":
                    return (ushort)ScriptMetaSummary_FieldIndex.CompiledSize;
                case "VARIABLECOUNT":
                    return (ushort)ScriptMetaSummary_FieldIndex.VariableCount;
                case "TYPE":
                    return (ushort)ScriptMetaSummary_FieldIndex.Type;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return "Fluff";
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return "RefCount";
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return "CompiledSize";
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return "VariableCount";
                case ScriptMetaSummary_FieldIndex.Type:
                    return "Type";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return true;
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return true;
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return typeof(UInt32);
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return typeof(Int32);
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return typeof(UInt32);
                case ScriptMetaSummary_FieldIndex.Type:
                    return typeof(ScriptFields.ScriptType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlTranslation = typeof(ScriptMetaSummaryXmlTranslation);
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCHR_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryTranslation = typeof(ScriptMetaSummaryBinaryTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ScriptMetaSummaryCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IScriptMetaSummary item,
            IScriptMetaSummaryGetter rhs,
            IScriptMetaSummaryGetter def,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_CopyMask copyMask)
        {
            if (copyMask?.Fluff ?? true)
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Fluff);
                try
                {
                    item.Fluff = rhs.Fluff;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RefCount ?? true)
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.RefCount);
                try
                {
                    item.RefCount = rhs.RefCount;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.VariableCount ?? true)
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.VariableCount);
                try
                {
                    item.VariableCount = rhs.VariableCount;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Type ?? true)
            {
                errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Type);
                try
                {
                    item.Type = rhs.Type;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IScriptMetaSummary item)
        {
            item.Fluff = default(Byte[]);
            item.RefCount = default(UInt32);
            item.VariableCount = default(UInt32);
            item.Type = default(ScriptFields.ScriptType);
        }

        public static ScriptMetaSummary_Mask<bool> GetEqualsMask(
            this IScriptMetaSummaryGetter item,
            IScriptMetaSummaryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptMetaSummary_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IScriptMetaSummaryGetter item,
            IScriptMetaSummaryGetter rhs,
            ScriptMetaSummary_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Fluff = ByteExt.EqualsFast(item.Fluff, rhs.Fluff);
            ret.RefCount = item.RefCount == rhs.RefCount;
            ret.CompiledSize = item.CompiledSize == rhs.CompiledSize;
            ret.VariableCount = item.VariableCount == rhs.VariableCount;
            ret.Type = item.Type == rhs.Type;
        }

        public static string ToString(
            this IScriptMetaSummaryGetter item,
            string name = null,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IScriptMetaSummaryGetter item,
            FileGeneration fg,
            string name = null,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ScriptMetaSummary)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ScriptMetaSummary)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.RefCount ?? true)
                {
                    fg.AppendLine($"RefCount => {item.RefCount}");
                }
                if (printMask?.CompiledSize ?? true)
                {
                    fg.AppendLine($"CompiledSize => {item.CompiledSize}");
                }
                if (printMask?.VariableCount ?? true)
                {
                    fg.AppendLine($"VariableCount => {item.VariableCount}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IScriptMetaSummaryGetter item,
            ScriptMetaSummary_Mask<bool?> checkMask)
        {
            return true;
        }

        public static ScriptMetaSummary_Mask<bool> GetHasBeenSetMask(IScriptMetaSummaryGetter item)
        {
            var ret = new ScriptMetaSummary_Mask<bool>();
            ret.Fluff = true;
            ret.RefCount = true;
            ret.CompiledSize = true;
            ret.VariableCount = true;
            ret.Type = true;
            return ret;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class ScriptMetaSummaryXmlTranslation : IXmlTranslator
    {
        public readonly static ScriptMetaSummaryXmlTranslation Instance = new ScriptMetaSummaryXmlTranslation();

        public static void WriteToNodeXml(
            IScriptMetaSummaryGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.Fluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fluff),
                    item: item.Fluff,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.RefCount) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RefCount),
                    item: item.RefCount,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.RefCount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.VariableCount) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VariableCount),
                    item: item.VariableCount,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.VariableCount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.Type) ?? true))
            {
                EnumXmlTranslation<ScriptFields.ScriptType>.Instance.Write(
                    node: node,
                    name: nameof(item.Type),
                    item: item.Type,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.Type,
                    errorMask: errorMask);
            }
        }

        public static void FillPublicXml(
            IScriptMetaSummary item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptMetaSummaryXmlTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IScriptMetaSummary item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.Fluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RefCount":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.RefCount);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 RefCountParse,
                            errorMask: errorMask))
                        {
                            item.RefCount = RefCountParse;
                        }
                        else
                        {
                            item.RefCount = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VariableCount":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.VariableCount);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 VariableCountParse,
                            errorMask: errorMask))
                        {
                            item.VariableCount = VariableCountParse;
                        }
                        else
                        {
                            item.VariableCount = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Type);
                        if (EnumXmlTranslation<ScriptFields.ScriptType>.Instance.Parse(
                            node: node,
                            item: out ScriptFields.ScriptType TypeParse,
                            errorMask: errorMask))
                        {
                            item.Type = TypeParse;
                        }
                        else
                        {
                            item.Type = default(ScriptFields.ScriptType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        public void Write(
            XElement node,
            IScriptMetaSummaryGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptMetaSummary");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptMetaSummary");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IScriptMetaSummaryGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IScriptMetaSummaryGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IScriptMetaSummaryGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    #region Xml Write Mixins
    public static class ScriptMetaSummaryXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            XElement node,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true,
            ScriptMetaSummary_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptMetaSummaryXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            string path,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            Stream stream,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ScriptMetaSummaryXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            XElement node,
            string name = null,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            ((ScriptMetaSummaryXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ScriptMetaSummaryXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ScriptMetaSummaryXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class ScriptMetaSummary_Mask<T> : IMask<T>, IEquatable<ScriptMetaSummary_Mask<T>>
    {
        #region Ctors
        public ScriptMetaSummary_Mask()
        {
        }

        public ScriptMetaSummary_Mask(T initialValue)
        {
            this.Fluff = initialValue;
            this.RefCount = initialValue;
            this.CompiledSize = initialValue;
            this.VariableCount = initialValue;
            this.Type = initialValue;
        }
        #endregion

        #region Members
        public T Fluff;
        public T RefCount;
        public T CompiledSize;
        public T VariableCount;
        public T Type;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptMetaSummary_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptMetaSummary_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.RefCount, rhs.RefCount)) return false;
            if (!object.Equals(this.CompiledSize, rhs.CompiledSize)) return false;
            if (!object.Equals(this.VariableCount, rhs.VariableCount)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.RefCount?.GetHashCode());
            ret = ret.CombineHashCode(this.CompiledSize?.GetHashCode());
            ret = ret.CombineHashCode(this.VariableCount?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Fluff)) return false;
            if (!eval(this.RefCount)) return false;
            if (!eval(this.CompiledSize)) return false;
            if (!eval(this.VariableCount)) return false;
            if (!eval(this.Type)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ScriptMetaSummary_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptMetaSummary_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptMetaSummary_Mask<R> obj, Func<T, R> eval)
        {
            obj.Fluff = eval(this.Fluff);
            obj.RefCount = eval(this.RefCount);
            obj.CompiledSize = eval(this.CompiledSize);
            obj.VariableCount = eval(this.VariableCount);
            obj.Type = eval(this.Type);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptMetaSummary_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptMetaSummary_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptMetaSummary_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.RefCount ?? true)
                {
                    fg.AppendLine($"RefCount => {RefCount}");
                }
                if (printMask?.CompiledSize ?? true)
                {
                    fg.AppendLine($"CompiledSize => {CompiledSize}");
                }
                if (printMask?.VariableCount ?? true)
                {
                    fg.AppendLine($"VariableCount => {VariableCount}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptMetaSummary_ErrorMask : IErrorMask, IErrorMask<ScriptMetaSummary_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Fluff;
        public Exception RefCount;
        public Exception CompiledSize;
        public Exception VariableCount;
        public Exception Type;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return Fluff;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return RefCount;
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return CompiledSize;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return VariableCount;
                case ScriptMetaSummary_FieldIndex.Type:
                    return Type;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    this.RefCount = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    this.CompiledSize = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    this.VariableCount = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    this.Type = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    this.RefCount = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    this.CompiledSize = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    this.VariableCount = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Fluff != null) return true;
            if (RefCount != null) return true;
            if (CompiledSize != null) return true;
            if (VariableCount != null) return true;
            if (Type != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptMetaSummary_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"RefCount => {RefCount}");
            fg.AppendLine($"CompiledSize => {CompiledSize}");
            fg.AppendLine($"VariableCount => {VariableCount}");
            fg.AppendLine($"Type => {Type}");
        }
        #endregion

        #region Combine
        public ScriptMetaSummary_ErrorMask Combine(ScriptMetaSummary_ErrorMask rhs)
        {
            var ret = new ScriptMetaSummary_ErrorMask();
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.RefCount = this.RefCount.Combine(rhs.RefCount);
            ret.CompiledSize = this.CompiledSize.Combine(rhs.CompiledSize);
            ret.VariableCount = this.VariableCount.Combine(rhs.VariableCount);
            ret.Type = this.Type.Combine(rhs.Type);
            return ret;
        }
        public static ScriptMetaSummary_ErrorMask Combine(ScriptMetaSummary_ErrorMask lhs, ScriptMetaSummary_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ScriptMetaSummary_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptMetaSummary_ErrorMask();
        }
        #endregion

    }
    public class ScriptMetaSummary_CopyMask
    {
        public ScriptMetaSummary_CopyMask()
        {
        }

        public ScriptMetaSummary_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Fluff = defaultOn;
            this.RefCount = defaultOn;
            this.CompiledSize = defaultOn;
            this.VariableCount = defaultOn;
            this.Type = defaultOn;
        }

        #region Members
        public bool Fluff;
        public bool RefCount;
        public bool CompiledSize;
        public bool VariableCount;
        public bool Type;
        #endregion

    }

    public class ScriptMetaSummary_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Fluff;
        public bool RefCount;
        public bool CompiledSize;
        public bool VariableCount;
        public bool Type;
        #endregion

        #region Ctors
        public ScriptMetaSummary_TranslationMask()
        {
        }

        public ScriptMetaSummary_TranslationMask(bool defaultOn)
        {
            this.Fluff = defaultOn;
            this.RefCount = defaultOn;
            this.CompiledSize = defaultOn;
            this.VariableCount = defaultOn;
            this.Type = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Fluff, null));
            ret.Add((RefCount, null));
            ret.Add((CompiledSize, null));
            ret.Add((VariableCount, null));
            ret.Add((Type, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class ScriptMetaSummaryBinaryTranslation : IBinaryTranslator
    {
        public readonly static ScriptMetaSummaryBinaryTranslation Instance = new ScriptMetaSummaryBinaryTranslation();

        static partial void FillBinaryCompiledSizeCustom(
            MutagenFrame frame,
            ScriptMetaSummary item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryCompiledSizeCustomPublic(
            MutagenFrame frame,
            ScriptMetaSummary item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryCompiledSizeCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinaryCompiledSizeCustom(
            MutagenWriter writer,
            IScriptMetaSummaryGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryCompiledSize(
            MutagenWriter writer,
            IScriptMetaSummaryGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryCompiledSizeCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            IScriptMetaSummaryGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff);
            writer.Write(item.RefCount);
            ScriptMetaSummaryBinaryTranslation.WriteBinaryCompiledSize(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            writer.Write(item.VariableCount);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ScriptFields.ScriptType>.Instance.Write(
                writer,
                item.Type,
                length: 4);
        }

        public void Write(
            MutagenWriter writer,
            IScriptMetaSummaryGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ScriptMetaSummary_Registration.SCHR_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IScriptMetaSummaryGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class ScriptMetaSummaryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptMetaSummaryGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptMetaSummaryBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IScriptMetaSummaryGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptMetaSummaryBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IScriptMetaSummaryGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ScriptMetaSummaryBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    #endregion

    #endregion

}
