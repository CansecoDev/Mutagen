/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptReference : IScriptReference, ILoquiObjectSetter, IEquatable<ScriptReference>
    {
        ILoquiRegistration ILoquiObject.Registration => ScriptReference_Registration.Instance;
        public static ScriptReference_Registration Registration => ScriptReference_Registration.Instance;

        #region Ctor
        public ScriptReference()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VariableIndex
        protected readonly INotifyingItem<Int32> _VariableIndex = NotifyingItem.Factory<Int32>();
        public INotifyingItem<Int32> VariableIndex_Property => _VariableIndex;
        public Int32 VariableIndex
        {
            get => this._VariableIndex.Item;
            set => this._VariableIndex.Set(value);
        }
        INotifyingItem<Int32> IScriptReference.VariableIndex_Property => this.VariableIndex_Property;
        INotifyingItemGetter<Int32> IScriptReferenceGetter.VariableIndex_Property => this.VariableIndex_Property;
        #endregion
        #region Reference
        protected readonly INotifyingItem<FormID> _Reference = NotifyingItem.Factory<FormID>();
        public INotifyingItem<FormID> Reference_Property => _Reference;
        public FormID Reference
        {
            get => this._Reference.Item;
            set => this._Reference.Set(value);
        }
        INotifyingItem<FormID> IScriptReference.Reference_Property => this.Reference_Property;
        INotifyingItemGetter<FormID> IScriptReferenceGetter.Reference_Property => this.Reference_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => ScriptReferenceCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => ScriptReferenceCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => ScriptReferenceCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ScriptReferenceCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return ScriptReferenceCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            ScriptReference_Mask<bool> printMask = null)
        {
            return ScriptReferenceCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptReferenceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public ScriptReference_Mask<bool> GetHasBeenSetMask()
        {
            return ScriptReferenceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptReference rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptReference rhs)
        {
            if (rhs == null) return false;
            if (VariableIndex != rhs.VariableIndex) return false;
            if (Reference != rhs.Reference) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(VariableIndex).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Reference).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static ScriptReference Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static ScriptReference Create_XML(
            XElement root,
            out ScriptReference_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static ScriptReference Create_XML(
            XElement root,
            bool doMasks,
            out ScriptReference_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (ScriptReference Object, ScriptReference_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            ScriptReference_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ScriptReference_ErrorMask()) : default(Func<ScriptReference_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static ScriptReference Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static ScriptReference Create_XML(
            string path,
            out ScriptReference_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static ScriptReference Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static ScriptReference Create_XML(
            Stream stream,
            out ScriptReference_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<ScriptReference, ScriptReference_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out ScriptReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<ScriptReference, ScriptReference_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out ScriptReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out ScriptReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out ScriptReference_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (ScriptReference_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out ScriptReference_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out ScriptReference_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            ScriptReferenceCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static ScriptReference Create_XML_Internal(
            XElement root,
            Func<ScriptReference_ErrorMask> errorMask)
        {
            var ret = new ScriptReference();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            ScriptReference item,
            XElement root,
            string name,
            Func<ScriptReference_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "VariableIndex":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._VariableIndex.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)ScriptReference_FieldIndex.VariableIndex,
                            subMask);
                    }
                    break;
                case "Reference":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Reference.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)ScriptReference_FieldIndex.Reference,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static ScriptReference Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static ScriptReference Create_Binary(
            MutagenFrame frame,
            out ScriptReference_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static ScriptReference Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out ScriptReference_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (ScriptReference Object, ScriptReference_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            ScriptReference_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ScriptReference_ErrorMask()) : default(Func<ScriptReference_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static ScriptReference Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ScriptReference Create_Binary(
            string path,
            out ScriptReference_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static ScriptReference Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ScriptReference Create_Binary(
            Stream stream,
            out ScriptReference_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<ScriptReference, ScriptReference_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out ScriptReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<ScriptReference, ScriptReference_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out ScriptReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out ScriptReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out ScriptReference_ErrorMask errorMask)
        {
            errorMask = (ScriptReference_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out ScriptReference_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out ScriptReference_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            ScriptReferenceCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static ScriptReference Create_Binary_Internal(
            MutagenFrame frame,
            Func<ScriptReference_ErrorMask> errorMask)
        {
            var ret = new ScriptReference();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    bool first = true;
                    while (!frame.Complete)
                    {
                        if (!Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            first: first,
                            errorMask: errorMask)) break;
                        first = false;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            ScriptReference item,
            MutagenFrame frame,
            Func<ScriptReference_ErrorMask> errorMask)
        {
        }

        protected static bool Fill_Binary_RecordTypes(
            ScriptReference item,
            MutagenFrame frame,
            bool first,
            Func<ScriptReference_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "SCRV":
                    if (!first) return false;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._VariableIndex.SetIfSucceeded(Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)ScriptReference_FieldIndex.VariableIndex,
                        errorMask: errorMask));
                    break;
                case "SCRO":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._Reference.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)ScriptReference_FieldIndex.Reference,
                        errorMask: errorMask));
                    break;
                default:
                    return false;
            }
            return true;
        }

        #endregion

        public ScriptReference Copy(
            ScriptReference_CopyMask copyMask = null,
            IScriptReferenceGetter def = null)
        {
            return ScriptReference.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ScriptReference Copy(
            IScriptReference item,
            ScriptReference_CopyMask copyMask = null,
            IScriptReferenceGetter def = null)
        {
            ScriptReference ret;
            if (item.GetType().Equals(typeof(ScriptReference)))
            {
                ret = new ScriptReference();
            }
            else
            {
                ret = (ScriptReference)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            ScriptReference_CopyMask copyMask = null,
            IScriptReferenceGetter def = null)
            where CopyType : class, IScriptReference
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(ScriptReference)))
            {
                ret = new ScriptReference() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static ScriptReference Copy_ToLoqui(
            IScriptReferenceGetter item,
            ScriptReference_CopyMask copyMask = null,
            IScriptReferenceGetter def = null)
        {
            var ret = new ScriptReference();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                    this._VariableIndex.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case ScriptReference_FieldIndex.Reference:
                    this._Reference.Set(
                        (FormID)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ScriptReferenceCommon.Clear(this, cmds);
        }


        public static ScriptReference Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ScriptReference();
            foreach (var pair in fields)
            {
                CopyInInternal_ScriptReference(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ScriptReference(ScriptReference obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ScriptReference_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                    obj._VariableIndex.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case ScriptReference_FieldIndex.Reference:
                    obj._Reference.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, ScriptReference obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IScriptReference : IScriptReferenceGetter, ILoquiClass<IScriptReference, IScriptReferenceGetter>, ILoquiClass<ScriptReference, IScriptReferenceGetter>
    {
        new Int32 VariableIndex { get; set; }
        new INotifyingItem<Int32> VariableIndex_Property { get; }

        new FormID Reference { get; set; }
        new INotifyingItem<FormID> Reference_Property { get; }

    }

    public interface IScriptReferenceGetter : ILoquiObject
    {
        #region VariableIndex
        Int32 VariableIndex { get; }
        INotifyingItemGetter<Int32> VariableIndex_Property { get; }

        #endregion
        #region Reference
        FormID Reference { get; }
        INotifyingItemGetter<FormID> Reference_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptReference_FieldIndex
    {
        VariableIndex = 0,
        Reference = 1,
    }
    #endregion

    #region Registration
    public class ScriptReference_Registration : ILoquiRegistration
    {
        public static readonly ScriptReference_Registration Instance = new ScriptReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 50,
            version: 0);

        public const string GUID = "5eb6ddcc-5ba8-4da7-87f5-99b6038a61c7";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(ScriptReference_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptReference_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptReference);

        public static readonly Type GetterType = typeof(IScriptReferenceGetter);

        public static readonly Type SetterType = typeof(IScriptReference);

        public static readonly Type CommonType = typeof(ScriptReferenceCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptReference";

        public const string Name = "ScriptReference";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VARIABLEINDEX":
                    return (ushort)ScriptReference_FieldIndex.VariableIndex;
                case "REFERENCE":
                    return (ushort)ScriptReference_FieldIndex.Reference;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                case ScriptReference_FieldIndex.Reference:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                case ScriptReference_FieldIndex.Reference:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                case ScriptReference_FieldIndex.Reference:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                    return "VariableIndex";
                case ScriptReference_FieldIndex.Reference:
                    return "Reference";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                case ScriptReference_FieldIndex.Reference:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                case ScriptReference_FieldIndex.Reference:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                    return typeof(Int32);
                case ScriptReference_FieldIndex.Reference:
                    return typeof(FormID);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType SCRO_HEADER = new RecordType("SCRO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCRV_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ScriptReferenceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IScriptReference item,
            IScriptReferenceGetter rhs,
            ScriptReference_CopyMask copyMask = null,
            IScriptReferenceGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ScriptReferenceCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IScriptReference item,
            IScriptReferenceGetter rhs,
            out ScriptReference_ErrorMask errorMask,
            ScriptReference_CopyMask copyMask = null,
            IScriptReferenceGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ScriptReferenceCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IScriptReference item,
            IScriptReferenceGetter rhs,
            IScriptReferenceGetter def,
            bool doMasks,
            out ScriptReference_ErrorMask errorMask,
            ScriptReference_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            ScriptReference_ErrorMask retErrorMask = null;
            Func<ScriptReference_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new ScriptReference_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IScriptReference item,
            IScriptReferenceGetter rhs,
            IScriptReferenceGetter def,
            bool doMasks,
            Func<ScriptReference_ErrorMask> errorMask,
            ScriptReference_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.VariableIndex ?? true)
            {
                try
                {
                    item.VariableIndex_Property.Set(
                        value: rhs.VariableIndex,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)ScriptReference_FieldIndex.VariableIndex, ex);
                }
            }
            if (copyMask?.Reference ?? true)
            {
                try
                {
                    item.Reference_Property.Set(
                        value: rhs.Reference,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)ScriptReference_FieldIndex.Reference, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IScriptReference obj,
            NotifyingFireParameters? cmds = null)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                case ScriptReference_FieldIndex.Reference:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IScriptReference obj,
            NotifyingUnsetParameters? cmds = null)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                    obj.VariableIndex = default(Int32);
                    break;
                case ScriptReference_FieldIndex.Reference:
                    obj.Reference = default(FormID);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IScriptReference obj)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                case ScriptReference_FieldIndex.Reference:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IScriptReferenceGetter obj)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                    return obj.VariableIndex;
                case ScriptReference_FieldIndex.Reference:
                    return obj.Reference;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IScriptReference item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.VariableIndex = default(Int32);
            item.Reference = default(FormID);
        }

        public static ScriptReference_Mask<bool> GetEqualsMask(
            this IScriptReferenceGetter item,
            IScriptReferenceGetter rhs)
        {
            var ret = new ScriptReference_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IScriptReferenceGetter item,
            IScriptReferenceGetter rhs,
            ScriptReference_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.VariableIndex = item.VariableIndex == rhs.VariableIndex;
            ret.Reference = item.Reference == rhs.Reference;
        }

        public static string ToString(
            this IScriptReferenceGetter item,
            string name = null,
            ScriptReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IScriptReferenceGetter item,
            FileGeneration fg,
            string name = null,
            ScriptReference_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ScriptReference)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ScriptReference)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.VariableIndex ?? true)
                {
                    fg.AppendLine($"VariableIndex => {item.VariableIndex}");
                }
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {item.Reference}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IScriptReferenceGetter item,
            ScriptReference_Mask<bool?> checkMask)
        {
            return true;
        }

        public static ScriptReference_Mask<bool> GetHasBeenSetMask(IScriptReferenceGetter item)
        {
            var ret = new ScriptReference_Mask<bool>();
            ret.VariableIndex = true;
            ret.Reference = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IScriptReferenceGetter item,
            bool doMasks,
            out ScriptReference_ErrorMask errorMask,
            string name = null)
        {
            ScriptReference_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ScriptReference_ErrorMask()) : default(Func<ScriptReference_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IScriptReferenceGetter item,
            Func<ScriptReference_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Oblivion.ScriptReference"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Oblivion.ScriptReference");
                    }
                    Int32XmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.VariableIndex),
                        item: item.VariableIndex_Property,
                        fieldIndex: (int)ScriptReference_FieldIndex.VariableIndex,
                        errorMask: errorMask);
                    FormIDXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Reference),
                        item: item.Reference_Property,
                        fieldIndex: (int)ScriptReference_FieldIndex.Reference,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IScriptReferenceGetter item,
            bool doMasks,
            out ScriptReference_ErrorMask errorMask)
        {
            ScriptReference_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ScriptReference_ErrorMask()) : default(Func<ScriptReference_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IScriptReferenceGetter item,
            Func<ScriptReference_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IScriptReferenceGetter item,
            MutagenWriter writer,
            Func<ScriptReference_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VariableIndex_Property,
                fieldIndex: (int)ScriptReference_FieldIndex.VariableIndex,
                errorMask: errorMask,
                header: ScriptReference_Registration.SCRV_HEADER,
                nullable: false);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Reference_Property,
                fieldIndex: (int)ScriptReference_FieldIndex.Reference,
                errorMask: errorMask,
                header: ScriptReference_Registration.SCRO_HEADER,
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class ScriptReference_Mask<T> : IMask<T>, IEquatable<ScriptReference_Mask<T>>
    {
        #region Ctors
        public ScriptReference_Mask()
        {
        }

        public ScriptReference_Mask(T initialValue)
        {
            this.VariableIndex = initialValue;
            this.Reference = initialValue;
        }
        #endregion

        #region Members
        public T VariableIndex;
        public T Reference;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptReference_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptReference_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.VariableIndex, rhs.VariableIndex)) return false;
            if (!object.Equals(this.Reference, rhs.Reference)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.VariableIndex?.GetHashCode());
            ret = ret.CombineHashCode(this.Reference?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.VariableIndex)) return false;
            if (!eval(this.Reference)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ScriptReference_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptReference_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptReference_Mask<R> obj, Func<T, R> eval)
        {
            obj.VariableIndex = eval(this.VariableIndex);
            obj.Reference = eval(this.Reference);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptReference_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptReference_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.VariableIndex ?? true)
                {
                    fg.AppendLine($"VariableIndex => {VariableIndex}");
                }
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {Reference}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptReference_ErrorMask : IErrorMask, IErrorMask<ScriptReference_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception VariableIndex;
        public Exception Reference;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                    this.VariableIndex = ex;
                    break;
                case ScriptReference_FieldIndex.Reference:
                    this.Reference = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptReference_FieldIndex.VariableIndex:
                    this.VariableIndex = (Exception)obj;
                    break;
                case ScriptReference_FieldIndex.Reference:
                    this.Reference = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptReference_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"VariableIndex => {VariableIndex}");
            fg.AppendLine($"Reference => {Reference}");
        }
        #endregion

        #region Combine
        public ScriptReference_ErrorMask Combine(ScriptReference_ErrorMask rhs)
        {
            var ret = new ScriptReference_ErrorMask();
            ret.VariableIndex = this.VariableIndex.Combine(rhs.VariableIndex);
            ret.Reference = this.Reference.Combine(rhs.Reference);
            return ret;
        }
        public static ScriptReference_ErrorMask Combine(ScriptReference_ErrorMask lhs, ScriptReference_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class ScriptReference_CopyMask
    {
        #region Members
        public bool VariableIndex;
        public bool Reference;
        #endregion

    }
    #endregion




    #endregion

}
