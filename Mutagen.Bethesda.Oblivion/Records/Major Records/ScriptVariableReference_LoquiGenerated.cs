/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptVariableReference : 
        ScriptReference,
        IScriptVariableReference,
        ILoquiObject<ScriptVariableReference>,
        ILoquiObjectSetter,
        IPropertySupporter<Int32>,
        IEquatable<ScriptVariableReference>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptVariableReference_Registration.Instance;
        public new static ScriptVariableReference_Registration Registration => ScriptVariableReference_Registration.Instance;

        #region Ctor
        public ScriptVariableReference()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VariableIndex
        protected Int32 _VariableIndex;
        protected PropertyForwarder<ScriptVariableReference, Int32> _VariableIndexForwarder;
        public INotifyingSetItem<Int32> VariableIndex_Property => _VariableIndexForwarder ?? (_VariableIndexForwarder = new PropertyForwarder<ScriptVariableReference, Int32>(this, (int)ScriptVariableReference_FieldIndex.VariableIndex));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 VariableIndex
        {
            get => this._VariableIndex;
            set => this.SetVariableIndex(value);
        }
        protected void SetVariableIndex(
            Int32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)ScriptVariableReference_FieldIndex.VariableIndex];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && VariableIndex == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)ScriptVariableReference_FieldIndex.VariableIndex] = hasBeenSet;
            }
            if (_Int32_subscriptions != null)
            {
                var tmp = VariableIndex;
                _VariableIndex = item;
                _Int32_subscriptions.FireSubscriptions(
                    index: (int)ScriptVariableReference_FieldIndex.VariableIndex,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _VariableIndex = item;
            }
        }
        protected void UnsetVariableIndex()
        {
            _hasBeenSetTracker[(int)ScriptVariableReference_FieldIndex.VariableIndex] = false;
            VariableIndex = default(Int32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Int32> IScriptVariableReference.VariableIndex_Property => this.VariableIndex_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Int32> IScriptVariableReferenceGetter.VariableIndex_Property => this.VariableIndex_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ScriptVariableReferenceCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ScriptVariableReferenceCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ScriptVariableReferenceCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ScriptVariableReferenceCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<ScriptVariableReference>.GetEqualsMask(ScriptVariableReference rhs) => ScriptVariableReferenceCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IScriptVariableReferenceGetter>.GetEqualsMask(IScriptVariableReferenceGetter rhs) => ScriptVariableReferenceCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return ScriptVariableReferenceCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            ScriptVariableReference_Mask<bool> printMask = null)
        {
            return ScriptVariableReferenceCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptVariableReferenceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new ScriptVariableReference_Mask<bool> GetHasBeenSetMask()
        {
            return ScriptVariableReferenceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptVariableReference rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptVariableReference rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (this.VariableIndex != rhs.VariableIndex) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(VariableIndex).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static ScriptVariableReference Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptVariableReference Create_XML(
            XElement root,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptVariableReference Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptVariableReference();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptVariableReference Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static ScriptVariableReference Create_XML(
            string path,
            out ScriptVariableReference_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static ScriptVariableReference Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static ScriptVariableReference Create_XML(
            Stream stream,
            out ScriptVariableReference_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<ScriptVariableReference>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out ScriptVariableReference_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<ScriptVariableReference>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out ScriptVariableReference_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out ScriptVariableReference_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out ScriptReference_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out ScriptVariableReference_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            ScriptVariableReferenceCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            ScriptVariableReference item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "VariableIndex":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptVariableReference_FieldIndex.VariableIndex);
                        if (Int32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out Int32 VariableIndexParse,
                            errorMask: errorMask))
                        {
                            item.VariableIndex = VariableIndexParse;
                        }
                        else
                        {
                            item.UnsetVariableIndex();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ScriptReference.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ScriptVariableReference_FieldIndex)index)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region IPropertySupporter Int32
        protected ObjectCentralizationSubscriptions<Int32> _Int32_subscriptions;
        Int32 IPropertySupporter<Int32>.Get(int index)
        {
            return GetInt32(index: index);
        }

        protected Int32 GetInt32(int index)
        {
            switch ((ScriptVariableReference_FieldIndex)index)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return VariableIndex;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        void IPropertySupporter<Int32>.Set(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetInt32(
            int index,
            Int32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((ScriptVariableReference_FieldIndex)index)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    SetVariableIndex(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        bool IPropertySupporter<Int32>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<Int32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<Int32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetInt32(
                index: index,
                cmds: cmds);
        }

        protected void UnsetInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((ScriptVariableReference_FieldIndex)index)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    SetVariableIndex(
                        item: default(Int32),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<Int32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_Int32_subscriptions == null)
            {
                _Int32_subscriptions = new ObjectCentralizationSubscriptions<Int32>();
            }
            _Int32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<Int32>.Unsubscribe(
            int index,
            object owner)
        {
            _Int32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<Int32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        Int32 IPropertySupporter<Int32>.DefaultValue(int index)
        {
            return DefaultValueInt32(index: index);
        }

        protected Int32 DefaultValueInt32(int index)
        {
            switch ((ScriptVariableReference_FieldIndex)index)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return default(Int32);
                default:
                    throw new ArgumentException($"Unknown index for field type Int32: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ScriptVariableReference_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static ScriptVariableReference Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptVariableReference Create_Binary(
            MutagenFrame frame,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptVariableReference Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptVariableReference();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptVariableReference Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ScriptVariableReference Create_Binary(
            string path,
            out ScriptVariableReference_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static ScriptVariableReference Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ScriptVariableReference Create_Binary(
            Stream stream,
            out ScriptVariableReference_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ScriptVariableReferenceCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            ScriptVariableReference item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            ScriptVariableReference item,
            MutagenFrame frame,
            int? lastParsed,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x56524353: // SCRV
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptVariableReference_FieldIndex.VariableIndex) return TryGet<int?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)ScriptVariableReference_FieldIndex.VariableIndex);
                        if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out Int32 VariableIndexParse,
                            errorMask: errorMask))
                        {
                            item.VariableIndex = VariableIndexParse;
                        }
                        else
                        {
                            item.UnsetVariableIndex();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)ScriptVariableReference_FieldIndex.VariableIndex);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public ScriptVariableReference Copy(
            ScriptVariableReference_CopyMask copyMask = null,
            IScriptVariableReferenceGetter def = null)
        {
            return ScriptVariableReference.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ScriptVariableReference Copy(
            IScriptVariableReference item,
            ScriptVariableReference_CopyMask copyMask = null,
            IScriptVariableReferenceGetter def = null)
        {
            ScriptVariableReference ret;
            if (item.GetType().Equals(typeof(ScriptVariableReference)))
            {
                ret = new ScriptVariableReference();
            }
            else
            {
                ret = (ScriptVariableReference)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ScriptVariableReference Copy_ToLoqui(
            IScriptVariableReferenceGetter item,
            ScriptVariableReference_CopyMask copyMask = null,
            IScriptVariableReferenceGetter def = null)
        {
            ScriptVariableReference ret;
            if (item.GetType().Equals(typeof(ScriptVariableReference)))
            {
                ret = new ScriptVariableReference() as ScriptVariableReference;
            }
            else
            {
                ret = (ScriptVariableReference)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IScriptVariableReferenceGetter rhs,
            ScriptVariableReference_CopyMask copyMask,
            IScriptVariableReferenceGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IScriptVariableReferenceGetter rhs,
            out ScriptVariableReference_ErrorMask errorMask,
            ScriptVariableReference_CopyMask copyMask = null,
            IScriptVariableReferenceGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptVariableReferenceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IScriptVariableReferenceGetter rhs,
            ErrorMaskBuilder errorMask,
            ScriptVariableReference_CopyMask copyMask = null,
            IScriptVariableReferenceGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ScriptVariableReferenceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    this.SetVariableIndex(
                        (Int32)obj,
                        cmds: cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ScriptVariableReferenceCommon.Clear(this, cmds);
        }


        public new static ScriptVariableReference Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ScriptVariableReference();
            foreach (var pair in fields)
            {
                CopyInInternal_ScriptVariableReference(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_ScriptVariableReference(ScriptVariableReference obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ScriptVariableReference_FieldIndex enu))
            {
                CopyInInternal_ScriptReference(obj, pair);
            }
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    obj.SetVariableIndex(
                        (Int32)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, ScriptVariableReference obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptVariableReference : IScriptVariableReferenceGetter, IScriptReference, ILoquiClass<IScriptVariableReference, IScriptVariableReferenceGetter>, ILoquiClass<ScriptVariableReference, IScriptVariableReferenceGetter>
    {
        new Int32 VariableIndex { get; set; }
        new INotifyingItem<Int32> VariableIndex_Property { get; }

    }

    public partial interface IScriptVariableReferenceGetter : IScriptReferenceGetter
    {
        #region VariableIndex
        Int32 VariableIndex { get; }
        INotifyingItemGetter<Int32> VariableIndex_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptVariableReference_FieldIndex
    {
        VariableIndex = 0,
    }
    #endregion

    #region Registration
    public class ScriptVariableReference_Registration : ILoquiRegistration
    {
        public static readonly ScriptVariableReference_Registration Instance = new ScriptVariableReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 60,
            version: 0);

        public const string GUID = "fb87f678-c078-4acb-b943-fe3d2142a7be";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(ScriptVariableReference_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptVariableReference_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptVariableReference);

        public static readonly Type GetterType = typeof(IScriptVariableReferenceGetter);

        public static readonly Type SetterType = typeof(IScriptVariableReference);

        public static readonly Type CommonType = typeof(ScriptVariableReferenceCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptVariableReference";

        public const string Name = "ScriptVariableReference";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VARIABLEINDEX":
                    return (ushort)ScriptVariableReference_FieldIndex.VariableIndex;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return "VariableIndex";
                default:
                    return ScriptReference_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return typeof(Int32);
                default:
                    return ScriptReference_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCRV_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ScriptVariableReferenceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IScriptVariableReference item,
            IScriptVariableReferenceGetter rhs,
            IScriptVariableReferenceGetter def,
            ErrorMaskBuilder errorMask,
            ScriptVariableReference_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            ScriptReferenceCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.VariableIndex ?? true)
            {
                errorMask.PushIndex((int)ScriptVariableReference_FieldIndex.VariableIndex);
                try
                {
                    item.VariableIndex_Property.Set(
                        value: rhs.VariableIndex,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IScriptVariableReference obj,
            NotifyingFireParameters cmds = null)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    ScriptReferenceCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IScriptVariableReference obj,
            NotifyingUnsetParameters cmds = null)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    obj.VariableIndex = default(Int32);
                    break;
                default:
                    ScriptReferenceCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IScriptVariableReference obj)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return true;
                default:
                    return ScriptReferenceCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IScriptVariableReferenceGetter obj)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return obj.VariableIndex;
                default:
                    return ScriptReferenceCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IScriptVariableReference item,
            NotifyingUnsetParameters cmds = null)
        {
            item.VariableIndex = default(Int32);
        }

        public static ScriptVariableReference_Mask<bool> GetEqualsMask(
            this IScriptVariableReferenceGetter item,
            IScriptVariableReferenceGetter rhs)
        {
            var ret = new ScriptVariableReference_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IScriptVariableReferenceGetter item,
            IScriptVariableReferenceGetter rhs,
            ScriptVariableReference_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.VariableIndex = item.VariableIndex == rhs.VariableIndex;
            ScriptReferenceCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IScriptVariableReferenceGetter item,
            string name = null,
            ScriptVariableReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IScriptVariableReferenceGetter item,
            FileGeneration fg,
            string name = null,
            ScriptVariableReference_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ScriptVariableReference)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ScriptVariableReference)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.VariableIndex ?? true)
                {
                    fg.AppendLine($"VariableIndex => {item.VariableIndex}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IScriptVariableReferenceGetter item,
            ScriptVariableReference_Mask<bool?> checkMask)
        {
            return true;
        }

        public static ScriptVariableReference_Mask<bool> GetHasBeenSetMask(IScriptVariableReferenceGetter item)
        {
            var ret = new ScriptVariableReference_Mask<bool>();
            ret.VariableIndex = true;
            return ret;
        }

        public static ScriptVariableReference_FieldIndex? ConvertFieldIndex(ScriptReference_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static ScriptVariableReference_FieldIndex ConvertFieldIndex(ScriptReference_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IScriptVariableReferenceGetter item,
            bool doMasks,
            out ScriptVariableReference_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IScriptVariableReferenceGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptVariableReference");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptVariableReference");
            }
            Int32XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.VariableIndex),
                item: item.VariableIndex_Property,
                fieldIndex: (int)ScriptVariableReference_FieldIndex.VariableIndex,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            ScriptVariableReference item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out ScriptVariableReference_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            ScriptVariableReference item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            ScriptVariableReference item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VariableIndex_Property,
                fieldIndex: (int)ScriptVariableReference_FieldIndex.VariableIndex,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(ScriptVariableReference_Registration.SCRV_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class ScriptVariableReference_Mask<T> : ScriptReference_Mask<T>, IMask<T>, IEquatable<ScriptVariableReference_Mask<T>>
    {
        #region Ctors
        public ScriptVariableReference_Mask()
        {
        }

        public ScriptVariableReference_Mask(T initialValue)
        {
            this.VariableIndex = initialValue;
        }
        #endregion

        #region Members
        public T VariableIndex;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptVariableReference_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptVariableReference_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.VariableIndex, rhs.VariableIndex)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.VariableIndex?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.VariableIndex)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new ScriptVariableReference_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptVariableReference_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptVariableReference_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.VariableIndex = eval(this.VariableIndex);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptVariableReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptVariableReference_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptVariableReference_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.VariableIndex ?? true)
                {
                    fg.AppendLine($"VariableIndex => {VariableIndex}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptVariableReference_ErrorMask : ScriptReference_ErrorMask, IErrorMask<ScriptVariableReference_ErrorMask>
    {
        #region Members
        public Exception VariableIndex;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return VariableIndex;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    this.VariableIndex = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    this.VariableIndex = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (VariableIndex != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptVariableReference_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"VariableIndex => {VariableIndex}");
        }
        #endregion

        #region Combine
        public ScriptVariableReference_ErrorMask Combine(ScriptVariableReference_ErrorMask rhs)
        {
            var ret = new ScriptVariableReference_ErrorMask();
            ret.VariableIndex = this.VariableIndex.Combine(rhs.VariableIndex);
            return ret;
        }
        public static ScriptVariableReference_ErrorMask Combine(ScriptVariableReference_ErrorMask lhs, ScriptVariableReference_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ScriptVariableReference_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptVariableReference_ErrorMask();
        }
        #endregion

    }
    public class ScriptVariableReference_CopyMask : ScriptReference_CopyMask
    {
        #region Members
        public bool VariableIndex;
        #endregion

    }
    #endregion





    #endregion

}
