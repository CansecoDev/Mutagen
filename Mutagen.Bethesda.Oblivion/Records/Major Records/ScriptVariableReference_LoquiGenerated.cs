/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptVariableReference :
        ScriptReference,
        IScriptVariableReference,
        ILoquiObjectSetter<ScriptVariableReference>,
        IEquatable<ScriptVariableReference>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptVariableReference_Registration.Instance;
        public new static ScriptVariableReference_Registration Registration => ScriptVariableReference_Registration.Instance;
        protected override object CommonInstance => ScriptVariableReferenceCommon.Instance;

        #region Ctor
        public ScriptVariableReference()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VariableIndex
        private Int32 _VariableIndex;
        public Int32 VariableIndex
        {
            get => this._VariableIndex;
            set => this.RaiseAndSetIfChanged(ref this._VariableIndex, value, nameof(VariableIndex));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptVariableReferenceGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptVariableReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IScriptVariableReferenceGetter rhs)) return false;
            return ((ScriptVariableReferenceCommon)this.CommonInstance).Equals(this, rhs);
        }

        public bool Equals(ScriptVariableReference obj)
        {
            return ((ScriptVariableReferenceCommon)this.CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptVariableReferenceCommon)this.CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => ScriptVariableReferenceXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static ScriptVariableReference CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ScriptVariableReference_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptVariableReference CreateFromXml(
            XElement node,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true,
            ScriptVariableReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static ScriptVariableReference CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ScriptVariableReference() : null;
                    break;
                default:
                    break;
            }
            var ret = new ScriptVariableReference();
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptVariableReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ScriptVariableReference CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ScriptVariableReference_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptVariableReference CreateFromXml(
            string path,
            out ScriptVariableReference_ErrorMask errorMask,
            ScriptVariableReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptVariableReference CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ScriptVariableReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ScriptVariableReference CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ScriptVariableReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptVariableReference CreateFromXml(
            Stream stream,
            out ScriptVariableReference_ErrorMask errorMask,
            ScriptVariableReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptVariableReference CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ScriptVariableReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ScriptVariableReference_FieldIndex)index)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ScriptVariableReference_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => ScriptVariableReferenceBinaryWriteTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static ScriptVariableReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptVariableReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static ScriptVariableReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptVariableReference();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            ScriptVariableReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            ScriptVariableReference item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x56524353: // SCRV
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptVariableReference_FieldIndex.VariableIndex) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.VariableIndex = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)ScriptVariableReference_FieldIndex.VariableIndex);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public ScriptVariableReference Copy(
            ScriptVariableReference_CopyMask copyMask = null,
            ScriptVariableReference def = null)
        {
            return ScriptVariableReference.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ScriptVariableReference Copy(
            ScriptVariableReference item,
            ScriptVariableReference_CopyMask copyMask = null,
            ScriptVariableReference def = null)
        {
            ScriptVariableReference ret;
            if (item.GetType().Equals(typeof(ScriptVariableReference)))
            {
                ret = new ScriptVariableReference();
            }
            else
            {
                ret = (ScriptVariableReference)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ScriptVariableReference Copy_ToLoqui(
            ScriptVariableReference item,
            ScriptVariableReference_CopyMask copyMask = null,
            ScriptVariableReference def = null)
        {
            ScriptVariableReference ret;
            if (item.GetType().Equals(typeof(ScriptVariableReference)))
            {
                ret = new ScriptVariableReference() as ScriptVariableReference;
            }
            else
            {
                ret = (ScriptVariableReference)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(ScriptReference rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ScriptVariableReference rhs,
            ScriptVariableReference_CopyMask copyMask,
            ScriptVariableReference def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ScriptVariableReference rhs,
            out ScriptVariableReference_ErrorMask errorMask,
            ScriptVariableReference_CopyMask copyMask = null,
            ScriptVariableReference def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptVariableReferenceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ScriptVariableReference rhs,
            ErrorMaskBuilder errorMask,
            ScriptVariableReference_CopyMask copyMask = null,
            ScriptVariableReference def = null)
        {
            ScriptVariableReferenceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    this.VariableIndex = (Int32)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            ScriptVariableReferenceCommon.Instance.Clear(this);
        }

        public new static ScriptVariableReference Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ScriptVariableReference();
            foreach (var pair in fields)
            {
                CopyInInternal_ScriptVariableReference(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_ScriptVariableReference(ScriptVariableReference obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ScriptVariableReference_FieldIndex enu))
            {
                CopyInInternal_ScriptReference(obj, pair);
            }
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    obj.VariableIndex = (Int32)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IScriptVariableReference :
        IScriptVariableReferenceGetter,
        IScriptReference,
        ILoquiObjectSetter<IScriptVariableReference>
    {
        new Int32 VariableIndex { get; set; }

        void CopyFieldsFrom(
            ScriptVariableReference rhs,
            ErrorMaskBuilder errorMask = null,
            ScriptVariableReference_CopyMask copyMask = null,
            ScriptVariableReference def = null);
    }

    public partial interface IScriptVariableReferenceGetter :
        IScriptReferenceGetter,
        ILoquiObject<IScriptVariableReferenceGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region VariableIndex
        Int32 VariableIndex { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ScriptVariableReferenceMixIn
    {
        public static void Clear(this IScriptVariableReference item)
        {
            ((ScriptVariableReferenceCommon)item.CommonInstance).Clear(item: item);
        }

        public static ScriptVariableReference_Mask<bool> GetEqualsMask(
            this IScriptVariableReferenceGetter item,
            IScriptVariableReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptVariableReferenceCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptVariableReferenceGetter item,
            string name = null,
            ScriptVariableReference_Mask<bool> printMask = null)
        {
            return ((ScriptVariableReferenceCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptVariableReferenceGetter item,
            FileGeneration fg,
            string name = null,
            ScriptVariableReference_Mask<bool> printMask = null)
        {
            ((ScriptVariableReferenceCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IScriptVariableReferenceGetter item,
            ScriptVariableReference_Mask<bool?> checkMask)
        {
            return ((ScriptVariableReferenceCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ScriptVariableReference_Mask<bool> GetHasBeenSetMask(this IScriptVariableReferenceGetter item)
        {
            var ret = new ScriptVariableReference_Mask<bool>();
            ((ScriptVariableReferenceCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IScriptVariableReferenceGetter item,
            IScriptVariableReferenceGetter rhs)
        {
            return ((ScriptVariableReferenceCommon)item.CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptVariableReference_FieldIndex
    {
        VariableIndex = 0,
    }
    #endregion

    #region Registration
    public class ScriptVariableReference_Registration : ILoquiRegistration
    {
        public static readonly ScriptVariableReference_Registration Instance = new ScriptVariableReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 60,
            version: 0);

        public const string GUID = "fb87f678-c078-4acb-b943-fe3d2142a7be";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(ScriptVariableReference_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptVariableReference_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptVariableReference);

        public static readonly Type GetterType = typeof(IScriptVariableReferenceGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptVariableReference);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(ScriptVariableReferenceCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptVariableReference";

        public const string Name = "ScriptVariableReference";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VARIABLEINDEX":
                    return (ushort)ScriptVariableReference_FieldIndex.VariableIndex;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return "VariableIndex";
                default:
                    return ScriptReference_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return typeof(Int32);
                default:
                    return ScriptReference_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ScriptVariableReferenceXmlWriteTranslation);
        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCRV_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(ScriptVariableReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptVariableReferenceCommon : ScriptReferenceCommon
    {
        public static readonly ScriptVariableReferenceCommon Instance = new ScriptVariableReferenceCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            ScriptVariableReference item,
            ScriptVariableReference rhs,
            ScriptVariableReference def,
            ErrorMaskBuilder errorMask,
            ScriptVariableReference_CopyMask copyMask)
        {
            ScriptReferenceCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.VariableIndex ?? true)
            {
                errorMask?.PushIndex((int)ScriptVariableReference_FieldIndex.VariableIndex);
                try
                {
                    item.VariableIndex = rhs.VariableIndex;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IScriptVariableReference item)
        {
            ClearPartial();
            item.VariableIndex = default(Int32);
            base.Clear(item);
        }

        public override void Clear(IScriptReference item)
        {
            Clear(item: (IScriptVariableReference)item);
        }

        public ScriptVariableReference_Mask<bool> GetEqualsMask(
            IScriptVariableReferenceGetter item,
            IScriptVariableReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptVariableReference_Mask<bool>();
            ((ScriptVariableReferenceCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IScriptVariableReferenceGetter item,
            IScriptVariableReferenceGetter rhs,
            ScriptVariableReference_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VariableIndex = item.VariableIndex == rhs.VariableIndex;
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IScriptVariableReferenceGetter item,
            string name = null,
            ScriptVariableReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IScriptVariableReferenceGetter item,
            FileGeneration fg,
            string name = null,
            ScriptVariableReference_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptVariableReference =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptVariableReference) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IScriptVariableReferenceGetter item,
            FileGeneration fg,
            ScriptVariableReference_Mask<bool> printMask = null)
        {
            ScriptReferenceCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.VariableIndex ?? true)
            {
                fg.AppendLine($"VariableIndex => {item.VariableIndex}");
            }
        }

        public bool HasBeenSet(
            IScriptVariableReferenceGetter item,
            ScriptVariableReference_Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IScriptVariableReferenceGetter item,
            ScriptVariableReference_Mask<bool> mask)
        {
            mask.VariableIndex = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static ScriptVariableReference_FieldIndex ConvertFieldIndex(ScriptReference_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IScriptVariableReferenceGetter lhs,
            IScriptVariableReferenceGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.VariableIndex != rhs.VariableIndex) return false;
            return true;
        }

        public override bool Equals(
            IScriptReferenceGetter lhs,
            IScriptReferenceGetter rhs)
        {
            return Equals(
                lhs: (IScriptVariableReferenceGetter)lhs,
                rhs: rhs as IScriptVariableReferenceGetter);
        }

        public virtual int GetHashCode(IScriptVariableReferenceGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.VariableIndex).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(IScriptReferenceGetter item)
        {
            return GetHashCode(item: (IScriptVariableReferenceGetter)item);
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class ScriptVariableReferenceXmlWriteTranslation :
        ScriptReferenceXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ScriptVariableReferenceXmlWriteTranslation Instance = new ScriptVariableReferenceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IScriptVariableReferenceGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            ScriptReferenceXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)ScriptVariableReference_FieldIndex.VariableIndex) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VariableIndex),
                    item: item.VariableIndex,
                    fieldIndex: (int)ScriptVariableReference_FieldIndex.VariableIndex,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IScriptVariableReferenceGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptVariableReference");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptVariableReference");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IScriptVariableReferenceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IScriptReferenceGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IScriptVariableReferenceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ScriptVariableReferenceXmlCreateTranslation : ScriptReferenceXmlCreateTranslation
    {
        public new readonly static ScriptVariableReferenceXmlCreateTranslation Instance = new ScriptVariableReferenceXmlCreateTranslation();

        public static void FillPublicXml(
            IScriptVariableReference item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptVariableReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IScriptVariableReference item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "VariableIndex":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptVariableReference_FieldIndex.VariableIndex);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 VariableIndexParse,
                            errorMask: errorMask))
                        {
                            item.VariableIndex = VariableIndexParse;
                        }
                        else
                        {
                            item.VariableIndex = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ScriptReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class ScriptVariableReferenceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IScriptVariableReferenceGetter item,
            XElement node,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true,
            ScriptVariableReference_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptVariableReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IScriptVariableReferenceGetter item,
            string path,
            out ScriptVariableReference_ErrorMask errorMask,
            ScriptVariableReference_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptVariableReferenceGetter item,
            Stream stream,
            out ScriptVariableReference_ErrorMask errorMask,
            ScriptVariableReference_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class ScriptVariableReference_Mask<T> : ScriptReference_Mask<T>, IMask<T>, IEquatable<ScriptVariableReference_Mask<T>>
    {
        #region Ctors
        public ScriptVariableReference_Mask()
        {
        }

        public ScriptVariableReference_Mask(T initialValue)
        {
            this.VariableIndex = initialValue;
        }
        #endregion

        #region Members
        public T VariableIndex;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptVariableReference_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptVariableReference_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.VariableIndex, rhs.VariableIndex)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.VariableIndex?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.VariableIndex)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new ScriptVariableReference_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptVariableReference_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptVariableReference_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.VariableIndex = eval(this.VariableIndex);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptVariableReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptVariableReference_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptVariableReference_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.VariableIndex ?? true)
                {
                    fg.AppendLine($"VariableIndex => {VariableIndex}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptVariableReference_ErrorMask : ScriptReference_ErrorMask, IErrorMask<ScriptVariableReference_ErrorMask>
    {
        #region Members
        public Exception VariableIndex;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return VariableIndex;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    this.VariableIndex = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    this.VariableIndex = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (VariableIndex != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptVariableReference_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"VariableIndex => {VariableIndex}");
        }
        #endregion

        #region Combine
        public ScriptVariableReference_ErrorMask Combine(ScriptVariableReference_ErrorMask rhs)
        {
            var ret = new ScriptVariableReference_ErrorMask();
            ret.VariableIndex = this.VariableIndex.Combine(rhs.VariableIndex);
            return ret;
        }
        public static ScriptVariableReference_ErrorMask Combine(ScriptVariableReference_ErrorMask lhs, ScriptVariableReference_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ScriptVariableReference_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptVariableReference_ErrorMask();
        }
        #endregion

    }
    public class ScriptVariableReference_CopyMask : ScriptReference_CopyMask
    {
        public ScriptVariableReference_CopyMask()
        {
        }

        public ScriptVariableReference_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.VariableIndex = defaultOn;
        }

        #region Members
        public bool VariableIndex;
        #endregion

    }

    public class ScriptVariableReference_TranslationMask : ScriptReference_TranslationMask
    {
        #region Members
        public bool VariableIndex;
        #endregion

        #region Ctors
        public ScriptVariableReference_TranslationMask()
            : base()
        {
        }

        public ScriptVariableReference_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.VariableIndex = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((VariableIndex, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class ScriptVariableReferenceBinaryWriteTranslation :
        ScriptReferenceBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ScriptVariableReferenceBinaryWriteTranslation Instance = new ScriptVariableReferenceBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IScriptVariableReferenceGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VariableIndex,
                header: recordTypeConverter.ConvertToCustom(ScriptVariableReference_Registration.SCRV_HEADER),
                nullable: false);
        }

        public void Write(
            MutagenWriter writer,
            IScriptVariableReferenceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IScriptVariableReferenceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IScriptReferenceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IScriptVariableReferenceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ScriptVariableReferenceBinaryCreateTranslation : ScriptReferenceBinaryCreateTranslation
    {
        public new readonly static ScriptVariableReferenceBinaryCreateTranslation Instance = new ScriptVariableReferenceBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class ScriptVariableReferenceBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptVariableReferenceGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ScriptVariableReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptVariableReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptVariableReference_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    public partial class ScriptVariableReferenceBinaryWrapper :
        ScriptReferenceBinaryWrapper,
        IScriptVariableReferenceGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptVariableReference_Registration.Instance;
        public new static ScriptVariableReference_Registration Registration => ScriptVariableReference_Registration.Instance;
        protected override object CommonInstance => ScriptVariableReferenceCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptVariableReferenceGetter)rhs, include);

        protected override object XmlWriteTranslator => ScriptVariableReferenceXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => ScriptVariableReferenceBinaryWriteTranslation.Instance;

        #region VariableIndex
        private int? _VariableIndexLocation;
        public bool VariableIndex_IsSet => _VariableIndexLocation.HasValue;
        public Int32 VariableIndex => _VariableIndexLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _VariableIndexLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected ScriptVariableReferenceBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ScriptVariableReferenceBinaryWrapper ScriptVariableReferenceFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package)
        {
            var ret = new ScriptVariableReferenceBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(stream, offset: 0);
            UtilityTranslation.FillTypelessSubrecordTypesForWrapper(
                stream: stream,
                offset: offset,
                meta: ret._package.Meta,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int offset,
            RecordType type,
            int? lastParsed)
        {
            switch (type.TypeInt)
            {
                case 0x56524353: // SCRV
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptVariableReference_FieldIndex.VariableIndex) return TryGet<int?>.Failure;
                    _VariableIndexLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ScriptVariableReference_FieldIndex.VariableIndex);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

    #endregion

    #endregion

}
