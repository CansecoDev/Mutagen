/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Script : 
        MajorRecord,
        IScript,
        ILoquiObject<Script>,
        ILoquiObjectSetter,
        IPropertySupporter<ScriptFields>,
        IEquatable<Script>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Script_Registration.Instance;
        public new static Script_Registration Registration => Script_Registration.Instance;

        #region Ctor
        public Script()
        {
            _hasBeenSetTracker[(int)Script_FieldIndex.Fields] = true;
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Fields
        protected readonly ScriptFields _Fields = new ScriptFields();
        protected PropertyForwarder<Script, ScriptFields> _FieldsForwarder;
        public INotifyingSetItemGetter<ScriptFields> Fields_Property => _FieldsForwarder ?? (_FieldsForwarder = new PropertyForwarder<Script, ScriptFields>(this, (int)Script_FieldIndex.Fields));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ScriptFields Fields
        {
            get => this._Fields;
            protected set => this.SetFields(value);
        }
        protected void SetFields(
            ScriptFields item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            this._Fields.CopyFieldsFrom(
                rhs: item,
                def: null,
                cmds: null,
                copyMask: null,
                doMasks: false,
                errorMask: out var errMask);
        }
        protected void UnsetFields()
        {
            _hasBeenSetTracker[(int)Script_FieldIndex.Fields] = false;
            Fields = default(ScriptFields);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<ScriptFields> IScriptGetter.Fields_Property => this.Fields_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ScriptCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ScriptCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ScriptCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ScriptCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<Script>.GetEqualsMask(Script rhs) => ScriptCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IScriptGetter>.GetEqualsMask(IScriptGetter rhs) => ScriptCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return ScriptCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Script_Mask<bool> printMask = null)
        {
            return ScriptCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new Script_Mask<bool> GetHasBeenSetMask()
        {
            return ScriptCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Script rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Script rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Fields_Property.HasBeenSet != rhs.Fields_Property.HasBeenSet) return false;
            if (Fields_Property.HasBeenSet)
            {
                if (!object.Equals(this.Fields, rhs.Fields)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Fields_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Fields).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Script Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Script Create_XML(
            XElement root,
            out Script_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = Script_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Script Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Script();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Script Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Script Create_XML(
            string path,
            out Script_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Script Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Script Create_XML(
            Stream stream,
            out Script_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Script>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Script_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<Script>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = Script_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Script_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Script_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Script_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Script_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = Script_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out Script_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Script_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public override void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected override void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            ScriptCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            Script item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Fields":
                    try
                    {
                        errorMask?.PushIndex((int)Script_FieldIndex.Fields);
                        item.Fields.CopyFieldsFrom(
                            rhs: ScriptFields.Create_XML(
                                root: root,
                                errorMask: errorMask)
                            ,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region IPropertySupporter ScriptFields
        protected ObjectCentralizationSubscriptions<ScriptFields> _ScriptFields_subscriptions;
        ScriptFields IPropertySupporter<ScriptFields>.Get(int index)
        {
            return GetScriptFields(index: index);
        }

        protected ScriptFields GetScriptFields(int index)
        {
            switch ((Script_FieldIndex)index)
            {
                case Script_FieldIndex.Fields:
                    return Fields;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields: {index}");
            }
        }

        void IPropertySupporter<ScriptFields>.Set(
            int index,
            ScriptFields item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetScriptFields(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetScriptFields(
            int index,
            ScriptFields item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((Script_FieldIndex)index)
            {
                case Script_FieldIndex.Fields:
                    SetFields(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields: {index}");
            }
        }

        bool IPropertySupporter<ScriptFields>.GetHasBeenSet(int index)
        {
            return _hasBeenSetTracker[index];
        }

        void IPropertySupporter<ScriptFields>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<ScriptFields>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetScriptFields(
                index: index,
                cmds: cmds);
        }

        protected void UnsetScriptFields(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((Script_FieldIndex)index)
            {
                case Script_FieldIndex.Fields:
                    _hasBeenSetTracker[index] = false;
                    Fields = default(ScriptFields);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ScriptFields>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<ScriptFields> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_ScriptFields_subscriptions == null)
            {
                _ScriptFields_subscriptions = new ObjectCentralizationSubscriptions<ScriptFields>();
            }
            _ScriptFields_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<ScriptFields>.Unsubscribe(
            int index,
            object owner)
        {
            _ScriptFields_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<ScriptFields>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        ScriptFields IPropertySupporter<ScriptFields>.DefaultValue(int index)
        {
            return DefaultValueScriptFields(index: index);
        }

        protected ScriptFields DefaultValueScriptFields(int index)
        {
            switch ((Script_FieldIndex)index)
            {
                case Script_FieldIndex.Fields:
                    return default(ScriptFields);
                default:
                    throw new ArgumentException($"Unknown index for field type ScriptFields: {index}");
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Script_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Script Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Script Create_Binary(
            MutagenFrame frame,
            out Script_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Script_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Script Create_Binary(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Script>(
                record: new Script(),
                frame: frame,
                errorMask: errorMask,
                recType: Script_Registration.SCPT_HEADER,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        public static Script Create_Binary(string path)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Script Create_Binary(
            string path,
            out Script_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Script Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Script Create_Binary(
            Stream stream,
            out Script_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Script_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Script_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out Script_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Script_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public override void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(writer: writer);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ScriptCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            Script item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Script item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x52484353: // SCHR
                case 0x41444353: // SCDA
                case 0x58544353: // SCTX
                case 0x44534C53: // SLSD
                case 0x52564353: // SCVR
                case 0x56524353: // SCRV
                case 0x4F524353: // SCRO
                    using (errorMask.PushIndex((int)Script_FieldIndex.Fields))
                    {
                        var tmpFields = ScriptFields.Create_Binary(
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: null);
                        item.Fields.CopyFieldsFrom(
                            rhs: tmpFields,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    return TryGet<int?>.Succeed((int)Script_FieldIndex.Fields);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
            }
        }

        #endregion

        public Script Copy(
            Script_CopyMask copyMask = null,
            IScriptGetter def = null)
        {
            return Script.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Script Copy(
            IScript item,
            Script_CopyMask copyMask = null,
            IScriptGetter def = null)
        {
            Script ret;
            if (item.GetType().Equals(typeof(Script)))
            {
                ret = new Script();
            }
            else
            {
                ret = (Script)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Script Copy_ToLoqui(
            IScriptGetter item,
            Script_CopyMask copyMask = null,
            IScriptGetter def = null)
        {
            Script ret;
            if (item.GetType().Equals(typeof(Script)))
            {
                ret = new Script() as Script;
            }
            else
            {
                ret = (Script)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IScriptGetter rhs,
            Script_CopyMask copyMask,
            IScriptGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IScriptGetter rhs,
            out Script_ErrorMask errorMask,
            Script_CopyMask copyMask = null,
            IScriptGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Script_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IScriptGetter rhs,
            ErrorMaskBuilder errorMask,
            Script_CopyMask copyMask = null,
            IScriptGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ScriptCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    this.Fields.CopyFieldsFrom(rhs: (ScriptFields)obj);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ScriptCommon.Clear(this, cmds);
        }


        public new static Script Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Script();
            foreach (var pair in fields)
            {
                CopyInInternal_Script(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Script(Script obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Script_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    obj.Fields.CopyFieldsFrom(rhs: (ScriptFields)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Script obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IScript : IScriptGetter, IMajorRecord, ILoquiClass<IScript, IScriptGetter>, ILoquiClass<Script, IScriptGetter>
    {
    }

    public partial interface IScriptGetter : IMajorRecordGetter
    {
        #region Fields
        ScriptFields Fields { get; }
        INotifyingSetItemGetter<ScriptFields> Fields_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Script_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Fields = 5,
    }
    #endregion

    #region Registration
    public class Script_Registration : ILoquiRegistration
    {
        public static readonly Script_Registration Instance = new Script_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 46,
            version: 0);

        public const string GUID = "4eda2162-86bb-49f3-babd-a9ea5ad8d928";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(Script_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Script_ErrorMask);

        public static readonly Type ClassType = typeof(Script);

        public static readonly Type GetterType = typeof(IScriptGetter);

        public static readonly Type SetterType = typeof(IScript);

        public static readonly Type CommonType = typeof(ScriptCommon);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Script";

        public const string Name = "Script";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FIELDS":
                    return (ushort)Script_FieldIndex.Fields;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    return true;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    return true;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    return "Fields";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    return true;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    return typeof(ScriptFields);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SCPT_HEADER = new RecordType("SCPT");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCDA_HEADER = new RecordType("SCDA");
        public static readonly RecordType SCTX_HEADER = new RecordType("SCTX");
        public static readonly RecordType SLSD_HEADER = new RecordType("SLSD");
        public static readonly RecordType SCVR_HEADER = new RecordType("SCVR");
        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType SCRO_HEADER = new RecordType("SCRO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCPT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ScriptCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IScript item,
            IScriptGetter rhs,
            IScriptGetter def,
            ErrorMaskBuilder errorMask,
            Script_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Fields.Overall ?? true)
            {
                errorMask.PushIndex((int)Script_FieldIndex.Fields);
                try
                {
                    ScriptFieldsCommon.CopyFieldsFrom(
                        item: item.Fields,
                        rhs: rhs.Fields,
                        def: def?.Fields,
                        errorMask: errorMask,
                        copyMask: copyMask?.Fields.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IScript obj,
            NotifyingFireParameters cmds = null)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IScript obj,
            NotifyingUnsetParameters cmds = null)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IScript obj)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    return obj.Fields_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IScriptGetter obj)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    return obj.Fields;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IScript item,
            NotifyingUnsetParameters cmds = null)
        {
        }

        public static Script_Mask<bool> GetEqualsMask(
            this IScriptGetter item,
            IScriptGetter rhs)
        {
            var ret = new Script_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IScriptGetter item,
            IScriptGetter rhs,
            Script_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Fields = item.Fields_Property.LoquiEqualsHelper(rhs.Fields_Property, (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs));
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IScriptGetter item,
            string name = null,
            Script_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IScriptGetter item,
            FileGeneration fg,
            string name = null,
            Script_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Script)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Script)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fields?.Overall ?? true)
                {
                    item.Fields?.ToString(fg, "Fields");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IScriptGetter item,
            Script_Mask<bool?> checkMask)
        {
            if (checkMask.Fields.Overall.HasValue && checkMask.Fields.Overall.Value != item.Fields_Property.HasBeenSet) return false;
            if (checkMask.Fields.Specific != null && (item.Fields == null || !item.Fields.HasBeenSet(checkMask.Fields.Specific))) return false;
            return true;
        }

        public static Script_Mask<bool> GetHasBeenSetMask(IScriptGetter item)
        {
            var ret = new Script_Mask<bool>();
            ret.Fields = new MaskItem<bool, ScriptFields_Mask<bool>>(item.Fields_Property.HasBeenSet, ScriptFieldsCommon.GetHasBeenSetMask(item.Fields));
            return ret;
        }

        public static Script_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static Script_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (Script_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (Script_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Script_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Script_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (Script_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IScriptGetter item,
            bool doMasks,
            out Script_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = Script_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IScriptGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Script");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Script");
            }
            if (item.Fields_Property.HasBeenSet)
            {
                LoquiXmlTranslation<ScriptFields>.Instance.Write(
                    node: elem,
                    item: item.Fields_Property,
                    name: nameof(item.Fields),
                    fieldIndex: (int)Script_FieldIndex.Fields,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            Script item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Script_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Script_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            Script item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Script_Registration.SCPT_HEADER,
                type: ObjectType.Record))
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            Script item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            LoquiBinaryTranslation<ScriptFields>.Instance.Write(
                writer: writer,
                item: item.Fields_Property,
                fieldIndex: (int)Script_FieldIndex.Fields,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Script_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<Script_Mask<T>>
    {
        #region Ctors
        public Script_Mask()
        {
        }

        public Script_Mask(T initialValue)
        {
            this.Fields = new MaskItem<T, ScriptFields_Mask<T>>(initialValue, new ScriptFields_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, ScriptFields_Mask<T>> Fields { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Script_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Script_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Fields, rhs.Fields)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Fields?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Fields != null)
            {
                if (!eval(this.Fields.Overall)) return false;
                if (this.Fields.Specific != null && !this.Fields.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Script_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Script_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Script_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Fields != null)
            {
                obj.Fields = new MaskItem<R, ScriptFields_Mask<R>>();
                obj.Fields.Overall = eval(this.Fields.Overall);
                if (this.Fields.Specific != null)
                {
                    obj.Fields.Specific = this.Fields.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Script_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Script_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Script_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fields?.Overall ?? true)
                {
                    Fields?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Script_ErrorMask : MajorRecord_ErrorMask, IErrorMask<Script_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, ScriptFields_ErrorMask> Fields;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    return Fields;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    this.Fields = new MaskItem<Exception, ScriptFields_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Script_FieldIndex enu = (Script_FieldIndex)index;
            switch (enu)
            {
                case Script_FieldIndex.Fields:
                    this.Fields = (MaskItem<Exception, ScriptFields_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Fields != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Script_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            Fields?.ToString(fg);
        }
        #endregion

        #region Combine
        public Script_ErrorMask Combine(Script_ErrorMask rhs)
        {
            var ret = new Script_ErrorMask();
            ret.Fields = new MaskItem<Exception, ScriptFields_ErrorMask>(this.Fields.Overall.Combine(rhs.Fields.Overall), ((IErrorMask<ScriptFields_ErrorMask>)this.Fields.Specific).Combine(rhs.Fields.Specific));
            return ret;
        }
        public static Script_ErrorMask Combine(Script_ErrorMask lhs, Script_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Script_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Script_ErrorMask();
        }
        #endregion

    }
    public class Script_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public MaskItem<bool, ScriptFields_CopyMask> Fields;
        #endregion

    }
    #endregion





    #endregion

}
